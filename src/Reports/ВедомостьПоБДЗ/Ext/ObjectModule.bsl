#Если Клиент Тогда
// Процедура установки текста запроса построителя отчета
//
Процедура УстановитьТекстЗапроса(ЕстьПолеРегистратор = Истина)
	УниверсальныйОтчет.ДатаНач = ДобавитьМесяц(ТекущаяДата(), -6);
	УниверсальныйОтчет.ДатаКон = ТекущаяДата();
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКонца",УниверсальныйОтчет.ДатаКон);	// Описание исходного текста запроса.
	
	// Описание исходного текста запроса.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МенеджерыТорговыхТочекСрезПоследних.Менеджер,
	|	ВзаиморасчетыОстаткиИОбороты.СуммаУпрРасход КАК СуммаВыбытия,
	|	ВзаиморасчетыОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК СуммаБДЗ,
	|	ВзаиморасчетыОстаткиИОбороты.Регистратор,
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента,
	|	ВзаиморасчетыОстаткиИОбороты.ДокументРасчетов,
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.Организация КАК Организация,
	|	РАЗНОСТЬДАТ(&ДатаКонца, ВзаиморасчетыОстаткиИОбороты.ДокументРасчетов.ДатаОплаты, ДЕНЬ) * -1 КАК Просрочка,
	|	ВзаиморасчетыОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК СуммаРегистрации,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОстаткиИОбороты.СуммаУпрРасход <> 0
	|			ТОГДА ВзаиморасчетыОстаткиИОбороты.Регистратор.Дата
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДатаВыбытия,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОстаткиИОбороты.СуммаУпрПриход - ВзаиморасчетыОстаткиИОбороты.СуммаУпрРасход <> 0
	|			ТОГДА """"
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВзаиморасчетыОстаткиИОбороты.ДокументРасчетов.ДатаОплаты, ДЕНЬ, 30)
	|	КОНЕЦ КАК ДатаРегистрации
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ
	|{ВЫБРАТЬ
	|	Менеджер.*,
	|	СуммаВыбытия,
	|	СуммаБДЗ,
	|	Регистратор.*,
	|	ДоговорКонтрагента.*,
	|	ДокументРасчетов.*,
	|	Контрагент.*,
	|	Организация.*,
	|	Просрочка,
	|	СуммаРегистрации,
	|	ДатаВыбытия,
	|	ДатаРегистрации
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}
	|ИЗ
	|	РегистрНакопления.Взаиморасчеты.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , ) КАК ВзаиморасчетыОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МенеджерыТорговыхТочек.СрезПоследних(&ДатаКон, ) КАК МенеджерыТорговыхТочекСрезПоследних
	|		ПО ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.Владелец.ОсновнаяТорговаяТочка.Ссылка = МенеджерыТорговыхТочекСрезПоследних.ТорговаяТочка.Ссылка
	|//СОЕДИНЕНИЯ
	|ГДЕ
	|	МенеджерыТорговыхТочекСрезПоследних.ВидМенеджера = ЗНАЧЕНИЕ(Перечисление.ВидыМенеджеров.Продажи)
	|	И ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|	И ВзаиморасчетыОстаткиИОбороты.ДокументРасчетов.ДатаОплаты < &ДатаКонца
	|	И ВзаиморасчетыОстаткиИОбороты.СуммаУпрКонечныйОстаток >= 0
	|	И РАЗНОСТЬДАТ(&ДатаКонца, ВзаиморасчетыОстаткиИОбороты.ДокументРасчетов.ДатаОплаты, ДЕНЬ) * -1 > 30
	|{ГДЕ
	|	МенеджерыТорговыхТочекСрезПоследних.Менеджер.*,
	|	ВзаиморасчетыОстаткиИОбороты.СуммаУпрРасход КАК СуммаВыбытия,
	|	ВзаиморасчетыОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК СуммаБДЗ,
	|	ВзаиморасчетыОстаткиИОбороты.Регистратор.*,
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.*,
	|	ВзаиморасчетыОстаткиИОбороты.ДокументРасчетов.*,
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.Владелец.* КАК Контрагент,
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.Организация.* КАК Организация,
	|	(РАЗНОСТЬДАТ(&ДатаКонца, ВзаиморасчетыОстаткиИОбороты.ДокументРасчетов.ДатаОплаты, ДЕНЬ) * -1) КАК Просрочка,
	|	ВзаиморасчетыОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК СуммаРегистрации,
	|	(ВЫБОР
	|			КОГДА ВзаиморасчетыОстаткиИОбороты.СуммаУпрПриход - ВзаиморасчетыОстаткиИОбороты.СуммаУпрРасход <> 0
	|				ТОГДА """"
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ВзаиморасчетыОстаткиИОбороты.ДокументРасчетов.ДатаОплаты, ДЕНЬ, 30)
	|		КОНЕЦ) КАК ДатаРегистрации,
	|	(ВЫБОР
	|			КОГДА ВзаиморасчетыОстаткиИОбороты.СуммаУпрРасход <> 0
	|				ТОГДА ВзаиморасчетыОстаткиИОбороты.Регистратор.Дата
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ДатаВыбытия
	|	//УСЛОВИЯ_СВОЙСТВА
	|	//УСЛОВИЯ_КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО
	|	Менеджер.*,
	|	СуммаВыбытия,
	|	СуммаБДЗ,
	|	Регистратор.*,
	|	ДоговорКонтрагента.*,
	|	ДокументРасчетов.*,
	|	Контрагент.*,
	|	Организация.*,
	|	Просрочка,
	|	СуммаРегистрации,
	|	ДатаВыбытия,
	|	ДатаРегистрации
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}
	|ИТОГИ
	|	СУММА(СуммаВыбытия),
	|	СУММА(СуммаБДЗ),
	|	СУММА(Просрочка),
	|	СУММА(СуммаРегистрации),
	|	МИНИМУМ(ДатаВыбытия),
	|	МИНИМУМ(ДатаРегистрации)
	|	//ИТОГИ_СВОЙСТВА
	|	//ИТОГИ_КАТЕГОРИИ
	|ПО
	|	ОБЩИЕ
	|{ИТОГИ ПО
	|	Менеджер.*,
	|	Регистратор.*,
	|	ДоговорКонтрагента.*,
	|	ДокументРасчетов.*,
	|	Контрагент.*,
	|	Организация.*
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ}
	|";
	
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.Организация", "Организация", "Организация", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.Владелец", "Контрагент", "Контрагент", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента", "ДоговорКонтрагента", "Договор контрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("МенеджерыТорговыхТочекСрезПоследних.Менеджер", "Менеджер", "Менеджер", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Менеджеры);
		//УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("Взаиморасчеты.Сделка", "Сделка", "Сделка", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);
		//УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("Взаиморасчеты.ДокументРасчетовСКонтрагентом", "ДокументРасчетовСКонтрагентом", "Документ расчетов с контрагентом", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
		
		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета по метаданным регистра накопления
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	УниверсальныйОтчет.ИмяРегистра = "Взаиморасчеты";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	
	УстановитьТекстЗапроса();

	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор контрагента");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Организация", "Организация");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Контрагент", "Контрагент");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВидОплаты", "Вид оплаты");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДокументРасчетов", "Кредитный документ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаОплаты", "Дата оплаты");

	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаВыбытия", "Дата выбытия");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаРегистрации", "Дата регистрации");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаБДЗ", "Сумма БДЗ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаРегистрации", "Сумма регистрации");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВыбытия", "Сумма выбытия");
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	//УниверсальныйОтчет.ДобавитьПолеГруппировка("Организация",           "БанковскийСчетКасса", "Владелец",              "Организация");
	//УниверсальныйОтчет.ДобавитьПолеГруппировка("ВалютаДенежныхСредств", "БанковскийСчетКасса", "ВалютаДенежныхСредств", "Валюта счета (кассы)");
	
	// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаНачальныйОстаток", "Начальный остаток", Истина, "ЧЦ=15; ЧДЦ=2", "Сумма", "Сумма в валюте счета (кассы)");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаПриход",           "Приход",            Истина, "ЧЦ=15; ЧДЦ=2", "Сумма", "Сумма в валюте счета (кассы)");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаРасход",           "Расход",            Истина, "ЧЦ=15; ЧДЦ=2", "Сумма", "Сумма в валюте счета (кассы)");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаКонечныйОстаток",  "Конечный остаток",  Истина, "ЧЦ=15; ЧДЦ=2", "Сумма", "Сумма в валюте счета (кассы)");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаОборот",           "Оборот",              Ложь, "ЧЦ=15; ЧДЦ=2", "Сумма", "Сумма в валюте счета (кассы)");
	
	//ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование;
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаУпрНачальныйОстаток", "Начальный остаток", Истина, "ЧЦ=15; ЧДЦ=2", "СуммаУпр", "Сумма в " + ВалютаУпр);
   //Процедура ДобавитьПоказатель(ИмяПоля, ПредставлениеПоля = Неопределено, ВключенПоУмолчанию = Неопределено, ФорматнаяСтрока = Неопределено, ИмяГруппы = Неопределено, ПредставлениеГруппы = Неопределено, Ширина = 0) Экспорт
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаБДЗ",           "Сумма БДЗ",            Истина, "ЧЦ=15; ЧДЦ=2", "СуммаБДЗ", "" );
	УниверсальныйОтчет.ДобавитьПоказатель("ДатаРегистрации",    "Дата регистрации",     Истина,"ДЛФ=Д" , "Регистрация", "Регистрация в реестре" );
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаРегистрации",   "Сумма регистрации",    Истина, "ЧЦ=15; ЧДЦ=2", "Регистрация", "Регистрация в реестре" );
	УниверсальныйОтчет.ДобавитьПоказатель("ДатаВыбытия",  		"Дата выбытия",  		Истина,"ДЛФ=Д" , "Выбытие", "Выбытие из реестра" );
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВыбытия",  		"Сумма выбытия",  		Истина, "ЧЦ=15; ЧДЦ=2", "Выбытие", "Выбытие из реестра" );
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаУпрОборот",           "Оборот",              Ложь, "ЧЦ=15; ЧДЦ=2", "СуммаУпр", "Сумма в " + ВалютаУпр);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Менеджер");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДокументРасчетов");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьОтбор("ЦФОДляБюджета");
	//УниверсальныйОтчет.ДобавитьОтбор("РегионыДляБюджета");
	УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("ДоговорКонтрагента");	
	УниверсальныйОтчет.ДобавитьОтбор("Менеджер");	
	УниверсальныйОтчет.ДобавитьОтбор("ДоговорКонтрагента.Владелец.ОсновнаяТорговаяТочка.Регион");	
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("ВалютаДенежныхСредств");
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("ВидДенежныхСредств");
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);

КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	ДатаКон = УниверсальныйОтчет.ДатаКон;
	
    УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКонца",УниверсальныйОтчет.ДатаКон);	// Описание исходного текста запроса.
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;
УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли