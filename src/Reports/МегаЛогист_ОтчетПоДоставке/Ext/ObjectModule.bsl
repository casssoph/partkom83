#Если Клиент Тогда
	
Перем мРазмещениеПоложениеВыбранныхПолей Экспорт;

Перем мСтруктураПредставлениеПолей Экспорт;
Перем мСоответствиеСвойствКатегорийИИзмерений Экспорт;
Перем мСоответствиеКонтактнойИнформацииИИзмерений Экспорт;
Перем мСоответствиеДанныхОФизлицеИИзмерений Экспорт;
Перем мСоответствиеПолейИИзмерений Экспорт;
Перем мСоответствиеНазначений Экспорт;
Перем мСоответствиеСвязьПолей;
Перем мСоответствиеТиповИнтервальныхПолей Экспорт;

Перем мСтруктураФорматаПолей Экспорт;

Перем мСтруктураПериодов Экспорт;

Перем мТаблицаПолей;
Перем мТаблицаПолейКонтактнаяИнформация;
Перем мТаблицаПолейДанныеОФизлице Экспорт;

Перем мНастройкаПериода Экспорт;
Перем мРежимВводаПериода Экспорт; // (-1) - не выбирать период, 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
Перем мМинимальнаяШиринаКолонкиПоказатель Экспорт;
Перем мВыбиратьИмяРегистра Экспорт;
Перем мВыбиратьИспользованиеСвойств Экспорт;
Перем мИспользованиеСвойствХарактеристикиНоменклатуры Экспорт;
Перем мНетКатегорий Экспорт;
Перем мРежимФормыНастройкиБезГруппировокКолонок Экспорт;
Перем мНазваниеОтчета Экспорт;

Перем мСтруктураИзмеренийСтроки;
Перем мСтруктураИзмеренийКолонки;
Перем мПоляДетали;

Перем мТекущаяНастройка Экспорт;

Перем мТекущаяСтраницаНастройка Экспорт;
Перем мРасширеннаяНастройка Экспорт;

Перем мВосстанавливатьНастройкиПриОткрытии Экспорт;
Перем мРассчитыватьШиринуКолонкиПоНазванию Экспорт;
Перем мРассчитыватьШиринуКолонок Экспорт;

Перем мВидПредставленияПолей Экспорт;

Перем мМассивПоляГруппировка;
Перем мМассивПоляРесурс;
Перем мМассивБыстрыеОтборы;

Перем мПутьКПостроителюОтчета Экспорт;
Перем мДействиеПолеВводаВидСравненияПриИзменении Экспорт;
Перем мДействиеПолеВводаЗначениеПриИзменении Экспорт;
Перем мДействиеКоманднаяПанельФормыПечать Экспорт;
Перем мДействиеКоманднаяПанельФормыСправкаФормы Экспорт;
Перем мДействиеВстроеннаяСправкаonclick Экспорт;
Перем мДействиеВстроеннаяСправкаonmouseout Экспорт;
Перем мДействиеВстроеннаяСправкаonmouseover Экспорт;

Перем мИмяЭлементаУправленияПолеТабличногоДокументаРезультат Экспорт;
Перем мИмяЭлементаУправленияБыстрыеОтборы Экспорт;
Перем мИмяЭлементаУправленияДополнительныеЭлементы Экспорт;
Перем мИмяЭлементаУправленияСправкаФормы Экспорт;
Перем мИмяЭлементаУправленияСтатусСтрока Экспорт;

Перем мОбработкиПодключаемыеКОтчету;
Перем мДействиеФормыВыполнитьВнешнююОбработку Экспорт;

Перем мКартинкаВстроеннойСправкиФормы;
 
Перем ФормаДляДополнительныхЭлементов;
Перем ФормаДляОбработчикаОжидания;
Перем ЭлементовГруппировокСтрок;
Перем ЭлементовГруппировокКолонок;

Перем СпособРасчетаСумм;
Перем мПростыеТипы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

Функция лПолучитьПутьККартинкеДляHTML(Картинка, ПолеHTMLДокумента)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("bmp");
	Картинка.Записать(ИмяФайла);
	
	Возврат """" + ИмяФайла + """";
	
КонецФункции // лПолучитьПутьККартинкеДляHTML()

Процедура лПолеHTMLДокументаOnClick(Элемент, pEvtObj, Форма)
	
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементHTML.id = "Команда" Тогда
		Попытка
			Форма.ВыполнитьКомандуФормы(ЭлементHTML.pathname, ЭлементHTML.target);
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "ОткрытьСписок" Тогда
		Менеджер = Вычислить(ЭлементHTML.pathname);
		Попытка
			ФормаСписка = Менеджер.ПолучитьФормуСписка();
			ФормаСписка.Открыть();
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "АктивизироватьЭУ" Тогда
		Форма.ТекущийЭлемент = Вычислить("Форма.ЭлементыФормы." + ЭлементHTML.pathname);
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлемент(ЭлементHTML, НазваниеТега)
	
	ТекущийЭлементHTML = ЭлементHTML;
	Пока Истина Цикл
		Если ТекущийЭлементHTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлементHTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлементHTML;
		Иначе
			ТекущийЭлементHTML = ТекущийЭлементHTML.parentNode;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура лПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj, ВыделятьРазделы = Ложь)
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 0;
			ЭлементHTML.style.paddingright		= 3;
			ЭлементHTML.style.paddingbottom		= 2;
			ЭлементHTML.style.paddingleft		= 3;
			ЭлементHTML.style.borderwidth		= 1;
			ЭлементHTML.style.borderstyle		= "solid";
			ЭлементHTML.style.backgroundcolor	= "#FFFBF0";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= лВернутьШестнадцатиричноеПредставлениеЦвета(лВстроеннаяСправка_ФонВыделеннойСсылки());
		ЭлементHTML.style.color				= лВернутьШестнадцатиричноеПредставлениеЦвета(лВстроеннаяСправка_ЦветВыделеннойСсылки());
	КонецЕсли;
	
КонецПроцедуры

Процедура лПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj, ВыделятьРазделы = Ложь)
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 1;
			ЭлементHTML.style.paddingright		= 4;
			ЭлементHTML.style.paddingbottom		= 3;
			ЭлементHTML.style.paddingleft		= 4;
			ЭлементHTML.style.borderstyle		= "none";
			ЭлементHTML.style.backgroundcolor	= "";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= "";
		ЭлементHTML.style.color				= "";
	КонецЕсли;
	
КонецПроцедуры

Функция лВстроеннаяСправка_ЦветФона()
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция лВстроеннаяСправка_ЦветРамки()
	
	Возврат Новый Цвет(137, 132, 119);
	
КонецФункции

Функция лВстроеннаяСправка_ЦветСсылки()
	
	Возврат Новый Цвет(0, 0, 0);
	
КонецФункции

Функция лВстроеннаяСправка_ЦветВыделеннойСсылки()
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция лВстроеннаяСправка_ФонВыделеннойСсылки()
	
	Возврат Новый Цвет(64, 94, 172);
	
КонецФункции

// Возвращает описание стилей, используемых при показе встроенной ситуационно-зависимой справки
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   строка
//
Функция лВстроеннаяСправка_СтилиДокумента()

	Возврат "
	|		<STYLE type=text/css>
	|			DIV.top {
	|				PADDING: 0;
	|			}
	|			DIV {
	|				PADDING: 3px 0px 3px 3px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|			}
	|			IMG {
	|				MARGIN-LEFT: 3px;
	|			}
	|		</STYLE>";

КонецФункции // ()

Функция лДесятичноеВШестнадцатиричное(Источник)
	
	ШеснадцатиричныеСимволы = "0123456789ABCDEF";
	
	Если Источник < 0 Тогда
		Возврат "00";
	ИначеЕсли Источник > 255 Тогда
		Возврат "FF";
	КонецЕсли;
	
	ПервыйСимвол	= Цел(Источник / 16) + 1;
	ВторойСимвол	= Источник % 16 + 1;
	
	Возврат Сред(ШеснадцатиричныеСимволы, ПервыйСимвол, 1) + Сред(ШеснадцатиричныеСимволы, ВторойСимвол, 1);
	
КонецФункции // лДесятичноеВШестнадцатиричное()

Функция лВернутьШестнадцатиричноеПредставлениеЦвета(ВыбранныйЦвет) Экспорт
	
	Если ТипЗнч(ВыбранныйЦвет) <> Тип("Цвет") Тогда
		Возврат "";
	КонецЕсли;
	
	Красный	= лДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Красный);
	Зеленый	= лДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Зеленый);
	Синий	= лДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Синий);
	
	Возврат "#" + Красный + Зеленый + Синий;
	
КонецФункции // лВернутьШестнадцатиричноеПредставлениеЦвета()

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ

Функция лПолучитьЗначениеПоУмолчанию(Пользователь, Настройка) Экспорт
	
	Попытка
		Выполнить("Результат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, Настройка)")
	Исключение
		Результат = Неопределено;
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции // лПолучитьЗначениеПоУмолчанию()

Функция лЗначениеПеременной(ИмяПеременной) Экспорт
	
	Попытка
		Выполнить("Результат = глЗначениеПеременной(ИмяПеременной)")
	Исключение
		Результат = Неопределено;
	КонецПопытки; 
	
	Возврат Результат;
	
КонецФункции // лПолучитьЗначениеПоУмолчанию()

// Предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного. Используется
//
// Параметры:
//	ЗаданныйТип   - тип, пустое значение которого нужно получить
//
Функция лПустоеЗначениеТипа(ЗаданныйТип) Экспорт
	
	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат Новый (ЗаданныйТип);
	КонецЕсли;
	
КонецФункции // лПустоеЗначениеТипа();

// Процедура используется в формах настройки отчетов для выбора категории
// или для подбора категорий в список. Использование обусловлено тем,
// что Категории при выборе надо указывать владельца
//
// Параметры:
//	Элемент - элемент управления, в который выбирают категорию
//	Назначение - элемент ПВХ, назначение для категории, известное форме настройки
//	ФормаНастройки - сама форма
//	СтандартнаяОбработка - необходимый параметр процедуры - обработчика события
//
Процедура лОсуществитьВыборКатегории(Элемент, Назначение, ФормаНастройки, СтандартнаяОбработка) Экспорт

	Если ТипЗнч(Элемент.Значение) <> ТипЗнч(Новый СписокЗначений) Тогда

		СтандартнаяОбработка = Ложь;

		ФормаВыбораКатегории = Справочники.КатегорииОбъектов.ПолучитьФормуВыбора(, Элемент,);
		ФормаВыбораКатегории.РежимВыбора = Истина;
		ФормаВыбораКатегории.Отбор.НазначениеКатегории.Установить(Назначение);
		ФормаВыбораКатегории.Открыть();
		
	КонецЕсли;
КонецПроцедуры // лОсуществитьВыборКатегории()

// Процедура используется в формах настройки отчетов для выбора значения свойства
// или для подбора значений свойств в список. Использование обусловлено тем,
// что свойству при выборе надо указывать не только тип значения, но еще и владельца
//
// Параметры:
//	Элемент - элемент управления, в который выбирают свойство
//	Назначение - элемент ПВХ, назначение для свойства, известное форме настройки
//	ФормаНастройки - сама форма
//	СтандартнаяОбработка - необходимый параметр процедуры - обработчика события
//
Процедура лОсуществитьВыборСвойства(Элемент, Свойство, ФормаНастройки, СтандартнаяОбработка) Экспорт
	// Ограничение списка свойств
	Если ТипЗнч(Элемент.Значение) <> Тип("СписокЗначений") Тогда

		Если Свойство.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
			Попытка
				Элемент.ВыборПоВладельцу = Свойство;
				СтандартнаяОбработка = Истина;
			Исключение
				МенеджерДанных = Новый("СправочникМенеджер." + Элемент.Значение.Метаданные().Имя);
				ФормаДанных = МенеджерДанных.ПолучитьФормуВыбора(, Элемент);
				ФормаДанных.РежимВыбора = Истина;
				ФормаДанных.МножественныйВыбор = Ложь;
				ФормаДанных.ЭлементыФормы.СправочникСписок.Значение.Отбор.Владелец.Значение = Свойство;
				ФормаДанных.ЭлементыФормы.СправочникСписок.Значение.Отбор.Владелец.Использование = Истина;
				ФормаДанных.Открыть();
				СтандартнаяОбработка = Ложь;
			КонецПопытки;
		Иначе
			СтандартнаяОбработка = истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // лОсуществитьВыборСвойства()

// Процедура заполняет дерево доступных источников данных для текущей конфигурации
//
Процедура ЗаполнитьИсточникиДанных() Экспорт

	Если ИсточникиДанных.Строки.Количество() Тогда	
		Возврат;
	КонецЕсли;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипКартинка = Новый ОписаниеТипов("Картинка");
	
	Колонки = ИсточникиДанных.Колонки;
	Если Колонки.Количество() Тогда	
		Возврат;
	КонецЕсли;
	
	Колонки.Добавить("Представление", ТипСтрока);
	Колонки.Добавить("Имя", ТипСтрока);
	Колонки.Добавить("Синоним", ТипСтрока);
	Колонки.Добавить("Картинка", ТипКартинка);
	
	Если Метаданные.Справочники.Количество() Тогда
		ИмяГруппы = "Справочник.";
		ОписаниеГруппы = "Справочник: ";
		КартинкаГруппы = БиблиотекаКартинок.СправочникОбъект;
		КартинкаЭлемента = БиблиотекаКартинок.ПланВидовХарактеристикОбъект;
		
		СтрокаГруппы = ИсточникиДанных.Строки.Добавить();
		СтрокаГруппы.Представление = "Справочники";
		СтрокаГруппы.Картинка = БиблиотекаКартинок.Справочник;
		СтрокиГруппы = СтрокаГруппы.Строки;
		
		Для каждого МетаданныеИсточника Из Метаданные.Справочники Цикл
			Если ПравоДоступа("Чтение", МетаданныеИсточника) Тогда
				СтрокаИсточника = СтрокиГруппы.Добавить();
				СтрокаИсточника.Имя = ИмяГруппы + МетаданныеИсточника.Имя;
				СтрокаИсточника.Представление = МетаданныеИсточника.Представление();
				СтрокаИсточника.Синоним = ОписаниеГруппы + СтрокаИсточника.Представление;
				СтрокаИсточника.Картинка = КартинкаГруппы;
				СтрокиИсточника = СтрокаИсточника.Строки;
				
				Для каждого МетаданныеИсточника Из МетаданныеИсточника.ТабличныеЧасти Цикл
					СтрокаТабличнойЧасти = СтрокиИсточника.Добавить();
					СтрокаТабличнойЧасти.Имя = СтрокаИсточника.Имя + "." + МетаданныеИсточника.Имя;
					СтрокаТабличнойЧасти.Представление = МетаданныеИсточника.Представление();
					СтрокаТабличнойЧасти.Синоним = ОписаниеГруппы + СтрокаИсточника.Представление + " (" + СтрокаТабличнойЧасти.Представление + ")";
					СтрокаТабличнойЧасти.Картинка = КартинкаЭлемента;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;

	Если Метаданные.Документы.Количество() Тогда
		ИмяГруппы = "Документ.";
		ОписаниеГруппы = "Документ: ";
		КартинкаГруппы = БиблиотекаКартинок.ДокументОбъект;
		КартинкаЭлемента = БиблиотекаКартинок.ПланВидовХарактеристикОбъект;
		
		СтрокаГруппы = ИсточникиДанных.Строки.Добавить();
		СтрокаГруппы.Представление = "Документы";
		СтрокаГруппы.Картинка = БиблиотекаКартинок.Документ;
		СтрокиГруппы = СтрокаГруппы.Строки;
		
		Для каждого МетаданныеИсточника Из Метаданные.Документы Цикл
			Если ПравоДоступа("Чтение", МетаданныеИсточника) Тогда
				СтрокаИсточника = СтрокиГруппы.Добавить();
				СтрокаИсточника.Имя = ИмяГруппы + МетаданныеИсточника.Имя;
				СтрокаИсточника.Представление = МетаданныеИсточника.Представление();
				СтрокаИсточника.Синоним = ОписаниеГруппы + СтрокаИсточника.Представление;
				СтрокаИсточника.Картинка = КартинкаГруппы;
				СтрокиИсточника = СтрокаИсточника.Строки;
				
				Для каждого МетаданныеИсточника Из МетаданныеИсточника.ТабличныеЧасти Цикл
					СтрокаТабличнойЧасти = СтрокиИсточника.Добавить();
					СтрокаТабличнойЧасти.Имя = СтрокаИсточника.Имя + "." + МетаданныеИсточника.Имя;
					СтрокаТабличнойЧасти.Представление = МетаданныеИсточника.Представление();
					СтрокаТабличнойЧасти.Синоним = ОписаниеГруппы + СтрокаИсточника.Представление + " (" + СтрокаТабличнойЧасти.Представление + ")";
					СтрокаТабличнойЧасти.Картинка = КартинкаЭлемента;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;

	Если Метаданные.РегистрыСведений.Количество() Тогда
		ИмяГруппы = "РегистрСведений.";
		ОписаниеГруппы = "Регистр сведений: ";
		КартинкаГруппы = БиблиотекаКартинок.РегистрСведений;
		КартинкаЭлемента = БиблиотекаКартинок.ПланВидовХарактеристикОбъект;
		
		СтрокаГруппы = ИсточникиДанных.Строки.Добавить();
		СтрокаГруппы.Представление = "Регистры сведений";
		СтрокаГруппы.Картинка = КартинкаГруппы;
		СтрокиГруппы = СтрокаГруппы.Строки;
		
		РегистрСведенийНепериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		
		Для каждого МетаданныеИсточника Из Метаданные.РегистрыСведений Цикл
			Если ПравоДоступа("Чтение", МетаданныеИсточника) Тогда
				СтрокаГруппы2 = СтрокиГруппы.Добавить();
				СтрокаГруппы2.Имя = ИмяГруппы + МетаданныеИсточника.Имя;
				СтрокаГруппы2.Представление = МетаданныеИсточника.Представление();
				СтрокаГруппы2.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление;
				СтрокаГруппы2.Картинка = КартинкаГруппы;
				СтрокиГруппы2 = СтрокаГруппы2.Строки;
				
				Если МетаданныеИсточника.ПериодичностьРегистраСведений <> РегистрСведенийНепериодический Тогда
					СтрокаИсточника = СтрокиГруппы2.Добавить();
					СтрокаИсточника.Имя = ИмяГруппы + МетаданныеИсточника.Имя + ".СрезПервых";
					СтрокаИсточника.Представление = "Срез первых";
					СтрокаИсточника.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление + " (Срез первых)";
					СтрокаИсточника.Картинка = КартинкаЭлемента;
					
					СтрокаИсточника = СтрокиГруппы2.Добавить();
					СтрокаИсточника.Имя = ИмяГруппы + МетаданныеИсточника.Имя + ".СрезПоследних";
					СтрокаИсточника.Представление = "Срез последних";
					СтрокаИсточника.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление + " (Срез последних)";
					СтрокаИсточника.Картинка = КартинкаЭлемента;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;

	Если Метаданные.РегистрыНакопления.Количество() Тогда
		ИмяГруппы = "РегистрНакопления.";
		ОписаниеГруппы = "Регистр накопления: ";
		КартинкаГруппы = БиблиотекаКартинок.РегистрНакопления;
		КартинкаЭлемента = БиблиотекаКартинок.ПланВидовХарактеристикОбъект;
		
		СтрокаГруппы = ИсточникиДанных.Строки.Добавить();
		СтрокаГруппы.Представление = "Регистры накопления";
		СтрокаГруппы.Картинка = КартинкаГруппы;
		СтрокиГруппы = СтрокаГруппы.Строки;
		
		РегистрНакопленияОстатки = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
		
		Для каждого МетаданныеИсточника Из Метаданные.РегистрыНакопления Цикл
			Если ПравоДоступа("Чтение", МетаданныеИсточника) Тогда
				СтрокаГруппы2 = СтрокиГруппы.Добавить();
				СтрокаГруппы2.Имя = ИмяГруппы + МетаданныеИсточника.Имя;
				СтрокаГруппы2.Представление = МетаданныеИсточника.Представление();
				СтрокаГруппы2.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление;
				СтрокаГруппы2.Картинка = КартинкаГруппы;
				СтрокиГруппы2 = СтрокаГруппы2.Строки;
				
				СтрокаИсточника = СтрокиГруппы2.Добавить();
				СтрокаИсточника.Имя = ИмяГруппы + МетаданныеИсточника.Имя + ".Обороты";
				СтрокаИсточника.Представление = "Обороты";
				СтрокаИсточника.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление + " (Обороты)";
				СтрокаИсточника.Картинка = КартинкаЭлемента;
				
				Если МетаданныеИсточника.ВидРегистра = РегистрНакопленияОстатки Тогда
					СтрокаИсточника = СтрокиГруппы2.Добавить();
					СтрокаИсточника.Имя = ИмяГруппы + МетаданныеИсточника.Имя + ".Остатки";
					СтрокаИсточника.Представление = "Остатки";
					СтрокаИсточника.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление + " (Остатки)";
					СтрокаИсточника.Картинка = КартинкаЭлемента;
					
					СтрокаИсточника = СтрокиГруппы2.Добавить();
					СтрокаИсточника.Имя = ИмяГруппы + МетаданныеИсточника.Имя + ".ОстаткиИОбороты";
					СтрокаИсточника.Представление = "Остатки и обороты";
					СтрокаИсточника.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление + " (Остатки и обороты)";
					СтрокаИсточника.Картинка = КартинкаЭлемента;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;

	Если Ложь и Метаданные.РегистрыБухгалтерии.Количество() Тогда
		ИмяГруппы = "РегистрБухгалтерии.";
		ОписаниеГруппы = "Регистр бухгалтерии: ";
		КартинкаГруппы = БиблиотекаКартинок.РегистрБухгалтерии;
		КартинкаЭлемента = БиблиотекаКартинок.ПланВидовХарактеристикОбъект;
		
		СтрокаГруппы = ИсточникиДанных.Строки.Добавить();
		СтрокаГруппы.Представление = "Регистры бухгалтерии";
		СтрокаГруппы.Картинка = КартинкаГруппы;
		СтрокиГруппы = СтрокаГруппы.Строки;
		
		Для каждого МетаданныеИсточника Из Метаданные.РегистрыБухгалтерии Цикл
			Если ПравоДоступа("Чтение", МетаданныеИсточника) Тогда
				СтрокаГруппы2 = СтрокиГруппы.Добавить();
				СтрокаГруппы2.Имя = ИмяГруппы + МетаданныеИсточника.Имя;
				СтрокаГруппы2.Представление = МетаданныеИсточника.Представление();
				СтрокаГруппы2.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление;
				СтрокаГруппы2.Картинка = КартинкаГруппы;
				СтрокиГруппы2 = СтрокаГруппы2.Строки;
				
				СтрокаИсточника = СтрокиГруппы2.Добавить();
				СтрокаИсточника.Имя = ИмяГруппы + МетаданныеИсточника.Имя + ".Обороты";
				СтрокаИсточника.Представление = "Обороты";
				СтрокаИсточника.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление + " (Обороты)";
				СтрокаИсточника.Картинка = КартинкаЭлемента;
				
				СтрокаИсточника = СтрокиГруппы2.Добавить();
				СтрокаИсточника.Имя = ИмяГруппы + МетаданныеИсточника.Имя + ".Остатки";
				СтрокаИсточника.Представление = "Остатки";
				СтрокаИсточника.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление + " (Остатки)";
				СтрокаИсточника.Картинка = КартинкаЭлемента;
				
				СтрокаИсточника = СтрокиГруппы2.Добавить();
				СтрокаИсточника.Имя = ИмяГруппы + МетаданныеИсточника.Имя + ".ОстаткиИОбороты";
				СтрокаИсточника.Представление = "Остатки и обороты";
				СтрокаИсточника.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление + " (Остатки и обороты)";
				СтрокаИсточника.Картинка = КартинкаЭлемента;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;

	Если Ложь и Метаданные.РегистрыРасчета.Количество() Тогда
		ИмяГруппы = "РегистрРасчета.";
		ОписаниеГруппы = "Регистр расчета: ";
		КартинкаГруппы = БиблиотекаКартинок.РегистрРасчета;
		КартинкаЭлемента = БиблиотекаКартинок.ПланВидовХарактеристикОбъект;
		
		СтрокаГруппы = ИсточникиДанных.Строки.Добавить();
		СтрокаГруппы.Представление = "Регистры расчета";
		СтрокаГруппы.Картинка = КартинкаГруппы;
		СтрокиГруппы = СтрокаГруппы.Строки;
		
		Для каждого МетаданныеИсточника Из Метаданные.РегистрыРасчета Цикл
			Если ПравоДоступа("Чтение", МетаданныеИсточника) Тогда
				СтрокаГруппы2 = СтрокиГруппы.Добавить();
				СтрокаГруппы2.Имя = ИмяГруппы + МетаданныеИсточника.Имя;
				СтрокаГруппы2.Представление = МетаданныеИсточника.Представление();
				СтрокаГруппы2.Синоним = ОписаниеГруппы + СтрокаГруппы2.Представление;
				СтрокаГруппы2.Картинка = КартинкаГруппы;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры // ЗаполнитьИсточникиДанных()

// Функция ПолучитьПредставлениеИсточникаДанных() Экспорт
//
// Параметры
//		нет
// Возвращаемое значение:
// 		строка описания источника данных
//
Функция ПолучитьПредставлениеИсточникаДанных() Экспорт
	
	ЗаполнитьИсточникиДанных();
	
	Если ИсточникДанных = "" Тогда
		ИсточникДанныхПредставление = "";
	Иначе
		ИсточникДанныхОписание = ИсточникиДанных.Строки.Найти(ИсточникДанных, "Имя", Истина);
		Если ИсточникДанныхОписание = Неопределено Тогда
			ИсточникДанных = "";
			ИсточникДанныхПредставление = "";
		Иначе
			ИсточникДанныхПредставление = ИсточникДанныхОписание.Синоним;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИсточникДанныхПредставление;
	
КонецФункции // ПолучитьПредставлениеИсточникаДанных()
 

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С КОЛОНТИТУЛАМИ

// Чтение настроек колонтитулов из константы. Если константа не заполнена, то формируются пустые настройки.
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Структура   – Настройки колонтитулов
//
Функция ПолучитьНастройкиКолонтитулов()

	Если Метаданные.Константы.Найти("НастройкиКолонтитуловПоУмолчанию") = Неопределено Тогда
		Настройка = Неопределено;
	Иначе
		Настройка = Константы.НастройкиКолонтитуловПоУмолчанию.Получить().Получить();
	КонецЕсли;
	
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		// Если константа не заполнена, то заполним структуру настройками пустых колонтитулов
		
		Настройка = Новый Структура;
		
		Верхний = Новый Структура;
		Нижний = Новый Структура;
		
		Верхний.Вставить("Выводить", Ложь);
		Верхний.Вставить("НачальнаяСтраница", 1);
		Верхний.Вставить("ТекстСлева",   "");
		Верхний.Вставить("ТекстВЦентре", "");
		Верхний.Вставить("ТекстСправа",  "");
		
		Нижний.Вставить("Выводить", Ложь);
		Нижний.Вставить("НачальнаяСтраница", 1);
		Нижний.Вставить("ТекстСлева",   "");
		Нижний.Вставить("ТекстВЦентре", "");
		Нижний.Вставить("ТекстСправа",  "");
		
		Настройка.Вставить("ВерхнийКолонтитул", Верхний);
		Настройка.Вставить("НижнийКолонтитул",  Нижний);
		
	Иначе
		// Если константа заполнена, но нет нужных нам полей, то заполним структуру настройками пустых колонтитулов
	
		Если Не Настройка.Свойство("ВерхнийКолонтитул") Тогда
			
			Верхний = Новый Структура;
			
			Верхний.Вставить("Выводить", Ложь);
			Верхний.Вставить("НачальнаяСтраница", 1);
			Верхний.Вставить("ТекстСлева",   "");
			Верхний.Вставить("ТекстВЦентре", "");
			Верхний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("ВерхнийКолонтитул", Верхний);
			
		КонецЕсли;
		
		Если Не Настройка.Свойство("НижнийКолонтитул") Тогда
			
			Нижний = Новый Структура;
			
			Нижний.Вставить("Выводить", Ложь);
			Нижний.Вставить("НачальнаяСтраница", 1);
			Нижний.Вставить("ТекстСлева",   "");
			Нижний.Вставить("ТекстВЦентре", "");
			Нижний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("НижнийКолонтитул",  Нижний);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройка;

КонецФункции // ПолучитьНастройкиКолонтитулов()

// Проставление в тексте вместо шаблонов, значений
//
// Параметры
//  Текст           – Строка – Исходный текст шаблона
//  НазваниеОтчета  – Строка – Название отчета
//  Пользователь    – Строка – Имя пользователя
//
// Возвращаемое значение:
//   Строка   – результурующий текст для колонтитула
//
Функция ЗаполнитьТекстКолонтитула(Текст, НазваниеОтчета, Пользователь)

	Результат = Текст;
	
	Результат = СтрЗаменить(Результат, "[&НазваниеОтчета]", НазваниеОтчета);
	Результат = СтрЗаменить(Результат, "[&Пользователь]", Пользователь);
	
	Возврат Результат;

КонецФункции // ЗаполнитьТекстКолонтитула()

// Установка колонтитулов для отчета
//
// Параметры
//  ТабличныйДокумент  – ТабличныйДокумент – Отчет, у которого необходимо установить колонтитулы
//  НазваниеОтчета     – Строка            – Название отчета для вывода в колонтитул
//  Пользователь       – Строка            – Имя пользователя для вывода в колонтитул
//
Процедура лУстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, НазваниеОтчета, Пользователь) Экспорт

	Настройка = ПолучитьНастройкиКолонтитулов();
	
	ТабличныйДокумент.ВерхнийКолонтитул.Выводить          = Настройка.ВерхнийКолонтитул.Выводить;
	ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = Настройка.ВерхнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
	ТабличныйДокумент.НижнийКолонтитул.Выводить          = Настройка.НижнийКолонтитул.Выводить;
	ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = Настройка.НижнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
КонецПроцедуры // лУстановитьКолонтитулыПоУмолчанию()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С НАСТРОЙКАМИ

Функция ПолучитьТаблицуНастроек(ИмяТаблицыНастроек) Экспорт
	
	ТипСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипХранилищеЗначения = Новый ОписаниеТипов("ХранилищеЗначения");
	
	#Если Клиент Тогда
		ТаблицаНастроек = ВосстановитьЗначение(ИмяТаблицыНастроек);
	#Иначе
		ТаблицаНастроек = Неопределено;
	#КонецЕсли
	
	Если ТаблицаНастроек = Неопределено или ТипЗнч(ТаблицаНастроек) <> Тип("ТаблицаЗначений") Тогда
		// Создадим таблицу значений, если настройки не определены
		ТаблицаНастроек = Новый ТаблицаЗначений;
		Колонки = ТаблицаНастроек.Колонки;
		Колонки.Добавить("Пользователь", ТипСтрока);
		Колонки.Добавить("ИмяОбъекта", ТипСтрока);
		Колонки.Добавить("НаименованиеНастройки", ТипСтрока);
		Колонки.Добавить("СохраненнаяНастройка", ТипХранилищеЗначения);
		Колонки.Добавить("ИспользоватьПриОткрытии", ТипБулево);
		Колонки.Добавить("СохранятьАвтоматически", ТипБулево);
	КонецЕсли;
	
	Возврат ТаблицаНастроек;
	
КонецФункции // ПолучитьТаблицуНастроек()

Функция ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки, ИмяТаблицыНастроек) Экспорт
	Перем Результат;
	
	Попытка
		Выполнить("Результат = УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки)")
		
	Исключение
		
		Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаНастроек = ПолучитьТаблицуНастроек(ИмяТаблицыНастроек);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически
		|ПОМЕСТИТЬ СохраненныеНастройки
		|ИЗ
		|	&ТаблицаНастроек КАК СохраненныеНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Пользователь,
		|	ВложенныйЗапрос.НаименованиеНастройки,
		|	ВложенныйЗапрос.СохраненнаяНастройка,
		|	ВложенныйЗапрос.СохранятьАвтоматически
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		СохраненныеНастройки.Пользователь КАК Пользователь,
		|		СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
		|		НЕОПРЕДЕЛЕНО КАК СохраненнаяНастройка,
		|		СохраненныеНастройки.СохранятьАвтоматически КАК СохранятьАвтоматически,
		|		0 КАК ВидНастройки
		|	ИЗ
		|		СохраненныеНастройки КАК СохраненныеНастройки
		|	ГДЕ
		|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|		И СохраненныеНастройки.Пользователь = &Пользователь
		|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		СохраненныеНастройки.Пользователь,
		|		СохраненныеНастройки.НаименованиеНастройки,
		|		НЕОПРЕДЕЛЕНО,
		|		СохраненныеНастройки.СохранятьАвтоматически,
		|		1
		|	ИЗ
		|		СохраненныеНастройки КАК СохраненныеНастройки
		|	ГДЕ
		|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|		И СохраненныеНастройки.Пользователь = """"
		|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.ВидНастройки");
		
		Если СтруктураНастройки.Свойство("Пользователь") И ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
			Запрос.УстановитьПараметр("Пользователь", "" + СтруктураНастройки.Пользователь);
		Иначе
			Запрос.УстановитьПараметр("Пользователь", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		Запрос.УстановитьПараметр("ТаблицаНастроек", ТаблицаНастроек);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + Выборка.Пользователь, СтруктураНастройки.ИмяОбъекта, Выборка.НаименованиеНастройки));
			
			СтруктураНастройки.Вставить("НаименованиеНастройки", Выборка.НаименованиеНастройки);
			СтруктураНастройки.Вставить("СохраненнаяНастройка", СтрокиТаблицыНастроек[0].СохраненнаяНастройка.Получить());
			СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Истина);
			СтруктураНастройки.Вставить("СохранятьАвтоматически", Выборка.СохранятьАвтоматически);
		КонецЕсли;
		
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ПолучитьНастройкуИспользоватьПриОткрытии()

Функция ПолучитьНастройку(СтруктураНастройки, ИмяТаблицыНастроек) Экспорт
	Перем Результат;
	
	Попытка
		Выполнить("Результат = УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки)")
		
	Исключение
		
		Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаНастроек = ПолучитьТаблицуНастроек(ИмяТаблицыНастроек);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически
		|ПОМЕСТИТЬ СохраненныеНастройки
		|ИЗ
		|	&ТаблицаНастроек КАК СохраненныеНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	НЕОПРЕДЕЛЕНО КАК СохраненнаяНастройка,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически
		|ИЗ
		|	СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.Пользователь = &Пользователь
		|	И СохраненныеНастройки.НаименованиеНастройки = &НаименованиеНастройки");
		
		Если СтруктураНастройки.Свойство("Пользователь") Тогда
			Запрос.УстановитьПараметр("Пользователь", "" + СтруктураНастройки.Пользователь);
		Иначе
			Запрос.УстановитьПараметр("Пользователь", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
		Запрос.УстановитьПараметр("ТаблицаНастроек", ТаблицаНастроек);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + Выборка.Пользователь, Выборка.ИмяОбъекта, Выборка.НаименованиеНастройки));
			
			СтруктураНастройки.Вставить("СохраненнаяНастройка", СтрокиТаблицыНастроек[0].СохраненнаяНастройка.Получить());
			СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Выборка.ИспользоватьПриОткрытии);
			СтруктураНастройки.Вставить("СохранятьАвтоматически", Выборка.СохранятьАвтоматически);
		КонецЕсли;
		
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ПолучитьНастройку()

Функция ПолучитьНастройки(СтруктураНастройки, ИмяТаблицыНастроек, ПолучитьНастройкиВсехПользователей = Ложь, ПолучитьГрупповыеНастройки = Ложь, ПолучитьОбщиеНастройки = Ложь) Экспорт
	Перем Выгрузка;
	
	Попытка
		Выполнить("Выгрузка = УниверсальныеМеханизмы.ПолучитьНастройки(СтруктураНастройки, ПолучитьНастройкиВсехПользователей, ПолучитьГрупповыеНастройки, ПолучитьОбщиеНастройки)")
		
	Исключение
		
		ТаблицаНастроек = ПолучитьТаблицуНастроек(ИмяТаблицыНастроек);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически
		|ПОМЕСТИТЬ СохраненныеНастройки
		|ИЗ
		|	&ТаблицаНастроек КАК СохраненныеНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь КАК Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта КАК ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
		|	НЕОПРЕДЕЛЕНО КАК СохраненнаяНастройка,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии КАК ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически КАК СохранятьАвтоматически,
		|	0 КАК ВидНастройки
		|ИЗ
		|	СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	НЕОПРЕДЕЛЕНО,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически,
		|	1
		|ИЗ
		|	СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.Пользователь <> &Пользователь
		|	И &НастройкиВсехПользователей = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки,
		|	НЕОПРЕДЕЛЕНО,
		|	СохраненныеНастройки.ИспользоватьПриОткрытии,
		|	СохраненныеНастройки.СохранятьАвтоматически,
		|	2
		|ИЗ
		|	СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.Пользователь = """"
		|	И &Пользователь <> """"
		|	И &ОбщиеНастройки = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидНастройки,
		|	НаименованиеНастройки");
		
		Если СтруктураНастройки.Свойство("Пользователь") И ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
			Запрос.УстановитьПараметр("Пользователь", "" + СтруктураНастройки.Пользователь);
		Иначе
			Запрос.УстановитьПараметр("Пользователь", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		Запрос.УстановитьПараметр("НастройкиВсехПользователей", ПолучитьНастройкиВсехПользователей);
		Запрос.УстановитьПараметр("ГрупповыеНастройки", ПолучитьГрупповыеНастройки);
		Запрос.УстановитьПараметр("ОбщиеНастройки", ПолучитьОбщиеНастройки);
		Запрос.УстановитьПараметр("ТаблицаНастроек", ТаблицаНастроек);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаВыгрузки Из Выгрузка Цикл
			СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + СтрокаВыгрузки.Пользователь, СтрокаВыгрузки.ИмяОбъекта, СтрокаВыгрузки.НаименованиеНастройки));
			СтрокаВыгрузки.СохраненнаяНастройка = Новый ХранилищеЗначения(СтрокиТаблицыНастроек[0].СохраненнаяНастройка.Получить());
		КонецЦикла;
		
	КонецПопытки;
	
	Возврат Выгрузка;
	
КонецФункции // ПолучитьНастройки()

Функция ВосстановлениеНастроек(СтруктураНастройки, ИмяТаблицыНастроек) Экспорт
	
	ФормаУправленияНастройками = ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Истина;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	ФормаУправленияНастройками.мИмяТаблицыНастроек = ИмяТаблицыНастроек;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // ВосстановлениеНастроек()

Функция СохранениеНастроек(СтруктураНастройки, ИмяТаблицыНастроек) Экспорт
	
	ФормаУправленияНастройками = ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Ложь;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	ФормаУправленияНастройками.мИмяТаблицыНастроек = ИмяТаблицыНастроек;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // СохранениеНастроек()

Функция СохранитьНастройку(СтруктураНастройки, ИмяТаблицыНастроек, СтруктураЗаменяемойНастройки = Неопределено) Экспорт
	Перем Результат;
	
	Попытка
		Выполнить("Результат = УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки, СтруктураЗаменяемойНастройки)")
		
	Исключение
		
		Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат Ложь
		КонецЕсли;
		ТаблицаНастроек = ПолучитьТаблицуНастроек(ИмяТаблицыНастроек);
		
		Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") И СтруктураНастройки.ИспользоватьПриОткрытии = Истина Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СохраненныеНастройки.Пользователь,
			|	СохраненныеНастройки.ИмяОбъекта,
			|	СохраненныеНастройки.НаименованиеНастройки,
			|	СохраненныеНастройки.ИспользоватьПриОткрытии
			|ПОМЕСТИТЬ СохраненныеНастройки
			|ИЗ
			|	&ТаблицаНастроек КАК СохраненныеНастройки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СохраненныеНастройки.Пользователь,
			|	СохраненныеНастройки.ИмяОбъекта,
			|	СохраненныеНастройки.НаименованиеНастройки
			|ИЗ
			|	СохраненныеНастройки КАК СохраненныеНастройки
			|ГДЕ
			|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
			|	И СохраненныеНастройки.Пользователь = &Пользователь
			|	И СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
			|	И СохраненныеНастройки.НаименованиеНастройки <> &НаименованиеНастройки");
			
			Запрос.УстановитьПараметр("Пользователь", "" + СтруктураНастройки.Пользователь);
			Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
			Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
			Запрос.УстановитьПараметр("ТаблицаНастроек", ТаблицаНастроек);
			
			РезультаЗапроса = Запрос.Выполнить();
			
			Если Не РезультаЗапроса.Пустой() Тогда
				Выборка = РезультаЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + Выборка.Пользователь, Выборка.ИмяОбъекта, Выборка.НаименованиеНастройки));
					
					Для каждого СтрокаТаблицыНастроек Из СтрокиТаблицыНастроек Цикл
						СтрокаТаблицыНастроек.ИспользоватьПриОткрытии = Ложь;
					КонецЦикла; 
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураЗаменяемойНастройки <> Неопределено Тогда
			СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + СтруктураЗаменяемойНастройки.Пользователь, СтруктураЗаменяемойНастройки.ИмяОбъекта, СтруктураЗаменяемойНастройки.НаименованиеНастройки));
			
			Если СтрокиТаблицыНастроек.Количество() Тогда
				Для каждого СтрокаТаблицыНастроек Из СтрокиТаблицыНастроек Цикл
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыНастроек, СтруктураНастройки,, "СохраненнаяНастройка");
					Если СтруктураНастройки.Свойство("СохраненнаяНастройка") Тогда
						СтрокаТаблицыНастроек.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
					КонецЕсли;
				КонецЦикла;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + СтруктураНастройки.Пользователь, СтруктураНастройки.ИмяОбъекта, СтруктураНастройки.НаименованиеНастройки));
			
			Если СтрокиТаблицыНастроек.Количество() Тогда
				Для каждого СтрокаТаблицыНастроек Из СтрокиТаблицыНастроек Цикл
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыНастроек, СтруктураНастройки,, "СохраненнаяНастройка");
					Если СтруктураНастройки.Свойство("СохраненнаяНастройка") Тогда
						СтрокаТаблицыНастроек.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
					КонецЕсли;
				КонецЦикла;
			Иначе
				НоваяСтрока = ТаблицаНастроек.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастройки,, "СохраненнаяНастройка");
				НоваяСтрока.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
			КонецЕсли;
		КонецЕсли;
		
		#Если Клиент Тогда
			СохранитьЗначение(ИмяТаблицыНастроек, ТаблицаНастроек);
		#КонецЕсли
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // СохранитьНастройку()

Функция УдалитьНастройку(СтруктураНастройки, ИмяТаблицыНастроек) Экспорт
	Перем Результат;
	
	Попытка
		Выполнить("Результат = УниверсальныеМеханизмы.УдалитьНастройку(СтруктураНастройки)")
		
	Исключение
		
		Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаНастроек = ПолучитьТаблицуНастроек(ИмяТаблицыНастроек);
		
		СтрокиТаблицыНастроек = ТаблицаНастроек.НайтиСтроки(Новый Структура("Пользователь,ИмяОбъекта,НаименованиеНастройки", "" + СтруктураНастройки.Пользователь, СтруктураНастройки.ИмяОбъекта, СтруктураНастройки.НаименованиеНастройки));
		
		Если СтрокиТаблицыНастроек.Количество() Тогда
			ТаблицаНастроек.Удалить(СтрокиТаблицыНастроек[0]);
			#Если Клиент Тогда
				СохранитьЗначение(ИмяТаблицыНастроек, ТаблицаНастроек);
			#КонецЕсли
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // УдалитьНастройку()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОСНОВНОЙ ПРОГРАММЫ
//

Процедура УстановитьНачальныеНастройкиПоИсточникуДанных()

	// Определим источник
	МассивИсточника = ЗначениеИзСтрокиВнутр("{""#"",51e7a0d2-530b-11d4-b98a-008048da3034,{0,{""S"",""" + СтрЗаменить(СтрЗаменить(ИсточникДанных, """", """"""), ".", """},{""S"",""") + """}}}");
	
	Если МассивИсточника.Количество() < 2 Тогда
		Возврат;
	ИначеЕсли МассивИсточника.Количество() = 2 Тогда
		МассивИсточника.Добавить("");
	КонецЕсли;
	
	ВидИсточника = МассивИсточника[0];
	
	Если ВидИсточника = "Справочник" Тогда
		ИсточникДанныхСправочник(МассивИсточника[1], МассивИсточника[2]);
		
	ИначеЕсли ВидИсточника = "Документ" Тогда
		ИсточникДанныхДокумент(МассивИсточника[1], МассивИсточника[2]);
		
	ИначеЕсли ВидИсточника = "РегистрСведений" Тогда
		ИсточникДанныхРегистрСведений(МассивИсточника[1], МассивИсточника[2]);
		
	ИначеЕсли ВидИсточника = "РегистрНакопления" Тогда
		ИсточникДанныхРегистрНакопления(МассивИсточника[1], МассивИсточника[2]);
		
	ИначеЕсли ВидИсточника = "РегистрБухгалтерии" Тогда
		ИсточникДанныхРегистрБухгалтерии(МассивИсточника[1], МассивИсточника[2]);
		
	ИначеЕсли ВидИсточника = "РегистрРасчета" Тогда
		ИсточникДанныхРегистрРасчета(МассивИсточника[1], МассивИсточника[2]);
		
	КонецЕсли;

КонецПроцедуры // УстановитьНачальныеНастройкиПоИсточникуДанных()

Процедура ИсточникДанныхСправочник(ИмяСправочника, ИмяТабличнойЧасти)
	
	МетаданныеСправочника = Метаданные.Справочники.Найти(ИмяСправочника);
	
	Если МетаданныеСправочника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти <> "" Тогда
		МетаданныеСправочника = МетаданныеСправочника.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
	
		Если МетаданныеСправочника = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	мРежимВводаПериода = -1;
	
	ОписаниеПолейВыборки = "";
	ОписаниеПолейВыборкиПостроитель = "";
	ОписаниеИсточниковЗапроса = "";
	ОписаниеОтборовРезультатаЗапроса = "";
	ОписаниеУпорядочиванияРезультатаЗапроса = "";
	ОписаниеИтогиЗапроса = "";
	ОписаниеИтогиЗапросаПостроитель = "";
	
	ТипЧисло = Тип("Число");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	Если ИспользоватьСвойстваИКатегории Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НазначенияСвойствКатегорийОбъектов.Ссылка,
		|	НазначенияСвойствКатегорийОбъектов.Предопределенный,
		|	НазначенияСвойствКатегорийОбъектов.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов КАК НазначенияСвойствКатегорийОбъектов
		|ГДЕ
		|	НазначенияСвойствКатегорийОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И НазначенияСвойствКатегорийОбъектов.ЭтоГруппа = ЛОЖЬ");
		
		РезультатЗапросаНазначенияСвойствКатегорийОбъектов = Запрос.Выполнить();
		ВыборкаНазначенияСвойствКатегорийОбъектов = РезультатЗапросаНазначенияСвойствКатегорийОбъектов.Выбрать();
			
	КонецЕсли;
	
	ОсновныеСвойства = Новый Массив;
	ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Ссылка", "Ссылка", Истина));
	Если ИмяТабличнойЧасти = "" Тогда
		Если МетаданныеСправочника.ДлинаКода Тогда
			ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Код", "Код", Ложь));
		КонецЕсли;
		
		Если МетаданныеСправочника.ДлинаНаименования Тогда
			ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Наименование", "Наименование", Ложь));
		КонецЕсли;
		
		Если МетаданныеСправочника.Владельцы.Количество() Тогда
			ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Владелец", "Владелец", Истина));
		КонецЕсли;
		
		Если МетаданныеСправочника.Иерархический Тогда
			ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Родитель", "Родитель", Истина));
			ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "ЭтоГруппа", "Это группа", Ложь));
		КонецЕсли;
		
		ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "ПометкаУдаления", "Пометка удаления", Ложь));
		ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Предопределенный", "Предопределенный", Ложь));
	КонецЕсли;
	
	Для каждого Измерение Из ОсновныеСвойства Цикл
		
		ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя + ?(Измерение.ДобавитьПредставление, ",
		|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Измерение.Имя + ") КАК " + Измерение.Имя + "Представление", "");
		
		ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление);
		
	КонецЦикла;
	
	// Свойства и категории поля "Ссылка"
	Если ИспользоватьСвойстваИКатегории Тогда
		
		МассивНазначений = Новый Массив;
		
		ТипИзмерения = Тип("СправочникСсылка." + ИмяСправочника);
		
		ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
		
		Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
			
			Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
				Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
					ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
					ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
					ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
					МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
					
					МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
					
				КонецЕсли;
			ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
				МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
				
				МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого Назначение Из МассивНазначений Цикл
			
			ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных.Ссылка", "Ссылка", "Ссылка", Назначение, мНетКатегорий);
			
		КонецЦикла;
		
		// Свойства и категории поля "Владелец"
		Если ИмяТабличнойЧасти = "" и МетаданныеСправочника.Владельцы.Количество() Тогда
			
			МассивНазначений = Новый Массив;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 0
			|	ИсточникДанных.Владелец КАК Владелец
			|ИЗ
			|	Справочник." + ИмяСправочника + " КАК ИсточникДанных");
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Для каждого ТипИзмерения Из РезультатЗапроса.Колонки.Владелец.ТипЗначения.Типы() Цикл
				
				ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
				
				Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
					
					Если ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
						МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
						
						МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для каждого Назначение Из МассивНазначений Цикл
				
				ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных.Владелец", "Владелец", "Владелец", Назначение, мНетКатегорий);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Измерение Из МетаданныеСправочника.Реквизиты Цикл
		
		Если Измерение.Тип = ОписаниеТипаСтрока Тогда
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Измерение.Имя + ", 1, 2000) КАК " + Измерение.Имя;
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Измерение.Имя + ", 1, 2000) КАК " + Измерение.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	ВЫРАЗИТЬ(ИсточникДанных." + Измерение.Имя + " КАК СТРОКА(100)) КАК " + Измерение.Имя;
			
		Иначе
			Типы = Измерение.Тип.Типы();
			ДобавитьПредставление = (Типы.Количество() > 1 или мПростыеТипы.Найти(Типы[0]) = Неопределено);
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя + ?(ДобавитьПредставление, ",
			|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Измерение.Имя + ") КАК " + Измерение.Имя + "Представление", "");
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Измерение.Имя + ".* КАК " + Измерение.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
		КонецЕсли;
		
		ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление());
		
		МассивТипов = Измерение.Тип.Типы();
		Если МассивТипов.Количество() = 1 и МассивТипов[0] = ТипЧисло Тогда
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	СУММА(" + Измерение.Имя + ")";
			
			ДобавитьПоказатель(Измерение.Имя, Измерение.Представление(), Истина, "ЧЦ = " + Формат(Измерение.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Измерение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), "Реквизиты", "Реквизиты");
			
		ИначеЕсли Измерение.Тип = ОписаниеТипаСтрока Тогда
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Измерение.Имя + ", 1, 2000) КАК " + Измерение.Имя;
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
		Иначе
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
			Если ИспользоватьСвойстваИКатегории Тогда
				
				МассивНазначений = Новый Массив;
				
				Для каждого ТипИзмерения Из Измерение.Тип.Типы() Цикл
					
					ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
					
					Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
						
						Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
							Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
								ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
								МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
								
								МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
								
							КонецЕсли;
						ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого Назначение Из МассивНазначений Цикл
					
					ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + Измерение.Имя, Измерение.Имя, Измерение.Представление(), Назначение, мНетКатегорий);
					
				КонецЦикла;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Количество строк табличных частей или элементов
	ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
	|	1 КАК __Количество";
	
	ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
	|	1 КАК __Количество";
	
	ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
	|	СУММА(__Количество)";
	
	Если ИмяТабличнойЧасти = "" Тогда
		мСтруктураПредставлениеПолей.Вставить("__Количество", "Количество элементов");
		ДобавитьПоказатель("__Количество", "Количество элементов", Истина, "", "Дополнительно", "Дополнительно");
	Иначе
		мСтруктураПредставлениеПолей.Вставить("__Количество", "Количество строк");
		ДобавитьПоказатель("__Количество", "Количество строк", Истина, "", "Дополнительно", "Дополнительно");
	КонецЕсли;
	
	Если мМассивПоляГруппировка <> Неопределено Тогда
		
		Для каждого ПолеГруппировка Из мМассивПоляГруппировка Цикл
			
			ПолеВыборки = СтрЗаменить(?(ПолеГруппировка.Выражение = Неопределено, "%ПолеВыборки%", ПолеГруппировка.Выражение), "%ПолеВыборки%", "ИсточникДанных." + ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным);
			ИсточникЗапроса = СтрЗаменить(?(ПолеГруппировка.Выражение = Неопределено, "%ПолеВыборки%", ПолеГруппировка.Выражение), "%ПолеВыборки%", ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным);
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	" + ПолеВыборки + " КАК " + ПолеГруппировка.Имя + ",
			|	ПРЕДСТАВЛЕНИЕ(" + ПолеВыборки + ") КАК " + ПолеГруппировка.Имя + "Представление";
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	(" + ИсточникЗапроса + ").* КАК " + ПолеГруппировка.Имя;
				
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			мСтруктураПредставлениеПолей.Вставить(ПолеГруппировка.Имя, ПолеГруппировка.Представление);
			
			ДокументыДобавлен = Ложь;
			
			Если ИспользоватьСвойстваИКатегории И ПолеГруппировка.Тип <> Неопределено И ТипЗнч(ПолеГруппировка.Тип) = Тип("ОписаниеТипов") Тогда
				
				МассивНазначений = Новый Массив;

				Для каждого ТипГруппировки Из ПолеГруппировка.Тип.Типы() Цикл
					
					ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
					
					Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
						
						Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
							Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
								ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
								МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
								
								МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
								
							КонецЕсли;
						ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого Назначение Из МассивНазначений Цикл
					
					ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным, ПолеГруппировка.Имя, ПолеГруппировка.Представление, Назначение, мНетКатегорий);
					
				КонецЦикла;
				
			КонецЕсли;
			
			УстановитьСвязьПолей(ПолеГруппировка.Имя, ПолеГруппировка.Родитель);
			
		КонецЦикла;
		
		мМассивПоляГруппировка = Неопределено;
		
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "" Тогда
		ОписаниеИсточниковЗапроса =	"
		|ИЗ Справочник." + ИмяСправочника + " КАК ИсточникДанных
		|//СОЕДИНЕНИЯ";
	Иначе
		ОписаниеИсточниковЗапроса =	"
		|ИЗ Справочник." + ИмяСправочника + "." + ИмяТабличнойЧасти + " КАК ИсточникДанных
		|//СОЕДИНЕНИЯ";
	КонецЕсли;
	
	ОписаниеПолейВыборки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ОписаниеПолейВыборки + "
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ";
	
	ОписаниеПолейВыборкиПостроитель = "
	|{ВЫБРАТЬ" + ОписаниеПолейВыборкиПостроитель + "
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ОписаниеОтборовРезультатаЗапроса = "
	|{ГДЕ" + ОписаниеОтборовРезультатаЗапроса + "
	|	//УСЛОВИЯ_СВОЙСТВА
	|	//УСЛОВИЯ_КАТЕГОРИИ
	|}";
	
	ОписаниеУпорядочиванияРезультатаЗапроса = "
	|{УПОРЯДОЧИТЬ ПО" + ОписаниеУпорядочиванияРезультатаЗапроса + "
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ОписаниеИтогиЗапросаПостроитель = "
	|{ИТОГИ ПО" + ОписаниеИтогиЗапросаПостроитель + "
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ОписаниеИтогиЗапроса = "
	|ИТОГИ" + ОписаниеИтогиЗапроса + "
	|	//ИТОГИ_СВОЙСТВА
	|	//ИТОГИ_КАТЕГОРИИ
	|ПО
	|	ОБЩИЕ";
	
	ТекстЗапроса =
		ОписаниеПолейВыборки +
		ОписаниеПолейВыборкиПостроитель +
		ОписаниеИсточниковЗапроса +
		ОписаниеОтборовРезультатаЗапроса +
		ОписаниеУпорядочиванияРезультатаЗапроса +
		ОписаниеИтогиЗапроса +
		ОписаниеИтогиЗапросаПостроитель;
		
	ТекстПоля = "";
	
	Если ИспользоватьСвойстваИКатегории Тогда
		
		ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	ОтборПериодичность = ПостроительОтчета.Отбор.Найти("Периодичность");
	
	Если ОтборПериодичность <> Неопределено Тогда
		
		ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ОтборПериодичность));
		
	КонецЕсли;
										  
	УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, ПостроительОтчета);
	УстановитьТипыЗначенийСвойствДляОтбора();
	
КонецПроцедуры // ИсточникДанныхСправочник()

Процедура ИсточникДанныхДокумент(ИмяДокумента, ИмяТабличнойЧасти)
	
	МетаданныеДокумента = Метаданные.Документы.Найти(ИмяДокумента);
	
	Если МетаданныеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти <> "" Тогда
		МетаданныеДокумента = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
	
		Если МетаданныеДокумента = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	мРежимВводаПериода = 0;
	
	ОписаниеПолейВыборки = "";
	ОписаниеПолейВыборкиПостроитель = "";
	ОписаниеИсточниковЗапроса = "";
	ОписаниеОтборовРезультатаЗапроса = "";
	ОписаниеУпорядочиванияРезультатаЗапроса = "";
	ОписаниеИтогиЗапроса = "";
	ОписаниеИтогиЗапросаПостроитель = "";
	
	ТипЧисло = Тип("Число");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	Если ИспользоватьСвойстваИКатегории Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НазначенияСвойствКатегорийОбъектов.Ссылка,
		|	НазначенияСвойствКатегорийОбъектов.Предопределенный,
		|	НазначенияСвойствКатегорийОбъектов.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов КАК НазначенияСвойствКатегорийОбъектов
		|ГДЕ
		|	НазначенияСвойствКатегорийОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И НазначенияСвойствКатегорийОбъектов.ЭтоГруппа = ЛОЖЬ");
		
		РезультатЗапросаНазначенияСвойствКатегорийОбъектов = Запрос.Выполнить();
		ВыборкаНазначенияСвойствКатегорийОбъектов = РезультатЗапросаНазначенияСвойствКатегорийОбъектов.Выбрать();
			
	КонецЕсли;
	
	ОсновныеСвойства = Новый Массив;
	ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Ссылка", "Ссылка", Истина));
	Если ИмяТабличнойЧасти = "" Тогда
		Если МетаданныеДокумента.ДлинаНомера Тогда
			ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Номер", "Номер", Ложь));
		КонецЕсли;
		
		Если МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Проведен", "Проведен", Ложь));
		КонецЕсли;
		
		ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Дата", "Дата", Ложь));
		ОсновныеСвойства.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "ПометкаУдаления", "Пометка удаления", Ложь));
	КонецЕсли;
	
	Для каждого Измерение Из ОсновныеСвойства Цикл
		
		ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя + ?(Измерение.ДобавитьПредставление, ",
		|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Измерение.Имя + ") КАК " + Измерение.Имя + "Представление", "");
		
		ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление);
		
	КонецЦикла;
	
	// Свойства и категории поля "Ссылка"
	Если ИспользоватьСвойстваИКатегории Тогда
		
		МассивНазначений = Новый Массив;
		
		ТипИзмерения = Тип("ДокументСсылка." + ИмяДокумента);
		
		ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
		
		Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
			
			Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
				Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
					ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
					ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
					ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
					МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
					
					МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
					
				КонецЕсли;
			ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
				МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
				
				МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого Назначение Из МассивНазначений Цикл
			
			ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных.Ссылка", "Ссылка", "Ссылка", Назначение, мНетКатегорий);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Измерение Из МетаданныеДокумента.Реквизиты Цикл
		
		Если Измерение.Тип = ОписаниеТипаСтрока Тогда
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Измерение.Имя + ", 1, 2000) КАК " + Измерение.Имя;
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Измерение.Имя + ", 1, 2000) КАК " + Измерение.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	ВЫРАЗИТЬ(ИсточникДанных." + Измерение.Имя + " КАК СТРОКА(100)) КАК " + Измерение.Имя;
			
		Иначе
			Типы = Измерение.Тип.Типы();
			ДобавитьПредставление = (Типы.Количество() > 1 или мПростыеТипы.Найти(Типы[0]) = Неопределено);
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя + ?(ДобавитьПредставление, ",
			|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Измерение.Имя + ") КАК " + Измерение.Имя + "Представление", "");
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Измерение.Имя + ".* КАК " + Измерение.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
		КонецЕсли;
		
		ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление());
		
		МассивТипов = Измерение.Тип.Типы();
		Если МассивТипов.Количество() = 1 и МассивТипов[0] = ТипЧисло Тогда
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	СУММА(" + Измерение.Имя + ")";
			
			ДобавитьПоказатель(Измерение.Имя, Измерение.Представление(), Истина, "ЧЦ = " + Формат(Измерение.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Измерение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), "Реквизиты", "Реквизиты");
			
		ИначеЕсли Измерение.Тип = ОписаниеТипаСтрока Тогда
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Измерение.Имя + ", 1, 2000) КАК " + Измерение.Имя;
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
		Иначе
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
			Если ИспользоватьСвойстваИКатегории Тогда
				
				МассивНазначений = Новый Массив;
				
				Для каждого ТипИзмерения Из Измерение.Тип.Типы() Цикл
					
					ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
					
					Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
						
						Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
							Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
								ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
								МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
								
								МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
								
							КонецЕсли;
						ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого Назначение Из МассивНазначений Цикл
					
					ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + Измерение.Имя, Измерение.Имя, Измерение.Представление(), Назначение, мНетКатегорий);
					
				КонецЦикла;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Количество строк табличных частей или документов
	ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
	|	1 КАК __Количество";
	
	ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
	|	1 КАК __Количество";
	
	ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
	|	СУММА(__Количество)";
	
	Если ИмяТабличнойЧасти = "" Тогда
		мСтруктураПредставлениеПолей.Вставить("__Количество", "Количество элементов");
		ДобавитьПоказатель("__Количество", "Количество документов", Ложь, "", "Дополнительно", "Дополнительно");
	Иначе
		мСтруктураПредставлениеПолей.Вставить("__Количество", "Количество строк");
		ДобавитьПоказатель("__Количество", "Количество строк", Ложь, "", "Дополнительно", "Дополнительно");
	КонецЕсли;
	
	Если мМассивПоляГруппировка <> Неопределено Тогда
		
		Для каждого ПолеГруппировка Из мМассивПоляГруппировка Цикл
			
			ПолеВыборки = СтрЗаменить(?(ПолеГруппировка.Выражение = Неопределено, "%ПолеВыборки%", ПолеГруппировка.Выражение), "%ПолеВыборки%", "ИсточникДанных." + ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным);
			ИсточникЗапроса = СтрЗаменить(?(ПолеГруппировка.Выражение = Неопределено, "%ПолеВыборки%", ПолеГруппировка.Выражение), "%ПолеВыборки%", ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным);
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	" + ПолеВыборки + " КАК " + ПолеГруппировка.Имя + ",
			|	ПРЕДСТАВЛЕНИЕ(" + ПолеВыборки + ") КАК " + ПолеГруппировка.Имя + "Представление";
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	(" + ИсточникЗапроса + ").* КАК " + ПолеГруппировка.Имя;
				
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			мСтруктураПредставлениеПолей.Вставить(ПолеГруппировка.Имя, ПолеГруппировка.Представление);
			
			ДокументыДобавлен = Ложь;
			
			Если ИспользоватьСвойстваИКатегории И ПолеГруппировка.Тип <> Неопределено И ТипЗнч(ПолеГруппировка.Тип) = Тип("ОписаниеТипов") Тогда
				
				МассивНазначений = Новый Массив;

				Для каждого ТипГруппировки Из ПолеГруппировка.Тип.Типы() Цикл
					
					ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
					
					Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
						
						Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
							Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
								ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
								МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
								
								МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
								
							КонецЕсли;
						ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого Назначение Из МассивНазначений Цикл
					
					ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным, ПолеГруппировка.Имя, ПолеГруппировка.Представление, Назначение, мНетКатегорий);
					
				КонецЦикла;
				
			КонецЕсли;
			
			УстановитьСвязьПолей(ПолеГруппировка.Имя, ПолеГруппировка.Родитель);
			
		КонецЦикла;
		
		мМассивПоляГруппировка = Неопределено;
		
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "" Тогда
		ОписаниеПериодаИсточника = "ИсточникДанных.Дата";
	Иначе
		ОписаниеПериодаИсточника = "ИсточникДанных.Ссылка.Дата";
	КонецЕсли;
	
	ОписаниеИсточниковЗапроса =	"
	|ИЗ Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти + " КАК ИсточникДанных
	|//СОЕДИНЕНИЯ
	|ГДЕ
	|	" + ОписаниеПериодаИсточника + " МЕЖДУ &ДатаНачала И &ДатаКонца";
	
	ОписаниеПолейВыборки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", День) КАК ПериодДень,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Неделя) КАК ПериодНеделя,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Декада) КАК ПериодДекада,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Месяц) КАК ПериодМесяц,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Квартал) КАК ПериодКвартал,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Полугодие) КАК ПериодПолугодие,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Год) КАК ПериодГод
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ";
	
	ОписаниеПолейВыборкиПостроитель = "
	|{ВЫБРАТЬ" + ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ОписаниеОтборовРезультатаЗапроса = "
	|{ГДЕ" + ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", День) КАК ПериодДень,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Неделя) КАК ПериодНеделя,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Декада) КАК ПериодДекада,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Месяц) КАК ПериодМесяц,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Квартал) КАК ПериодКвартал,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Полугодие) КАК ПериодПолугодие,
	|	НачалоПериода(" + ОписаниеПериодаИсточника + ", Год) КАК ПериодГод
	|	//УСЛОВИЯ_СВОЙСТВА
	|	//УСЛОВИЯ_КАТЕГОРИИ
	|}";
	
	ОписаниеУпорядочиванияРезультатаЗапроса = "
	|{УПОРЯДОЧИТЬ ПО" + ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ОписаниеИтогиЗапросаПостроитель = "
	|{ИТОГИ ПО" + ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ОписаниеИтогиЗапроса = "
	|ИТОГИ" + ОписаниеИтогиЗапроса + "
	|	//ИТОГИ_СВОЙСТВА
	|	//ИТОГИ_КАТЕГОРИИ
	|ПО
	|	ОБЩИЕ";
	
	ТекстЗапроса =
		ОписаниеПолейВыборки +
		ОписаниеПолейВыборкиПостроитель +
		ОписаниеИсточниковЗапроса +
		ОписаниеОтборовРезультатаЗапроса +
		ОписаниеУпорядочиванияРезультатаЗапроса +
		ОписаниеИтогиЗапроса +
		ОписаниеИтогиЗапросаПостроитель;
		
	ТекстПоля = "";
	
	Если ИспользоватьСвойстваИКатегории Тогда
		
		ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	ОтборПериодичность = ПостроительОтчета.Отбор.Найти("Периодичность");
	
	Если ОтборПериодичность <> Неопределено Тогда
		
		ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ОтборПериодичность));
		
	КонецЕсли;
										  
	УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, ПостроительОтчета);
	УстановитьТипыЗначенийСвойствДляОтбора();
	
КонецПроцедуры // ИсточникДанныхДокумент()

Процедура ИсточникДанныхРегистрСведений(ИмяРегистра, ИмяВиртуальнойТаблицы)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
	
	Если МетаданныеРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПолейВыборки = "";
	ОписаниеПолейВыборкиПостроитель = "";
	ОписаниеИсточниковЗапроса = "";
	ОписаниеОтборовРезультатаЗапроса = "";
	ОписаниеУпорядочиванияРезультатаЗапроса = "";
	ОписаниеИтогиЗапроса = "";
	ОписаниеИтогиЗапросаПостроитель = "";
	
	ТипЧисло = Тип("Число");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	Если ИспользоватьСвойстваИКатегории Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НазначенияСвойствКатегорийОбъектов.Ссылка,
		|	НазначенияСвойствКатегорийОбъектов.Предопределенный,
		|	НазначенияСвойствКатегорийОбъектов.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов КАК НазначенияСвойствКатегорийОбъектов
		|ГДЕ
		|	НазначенияСвойствКатегорийОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И НазначенияСвойствКатегорийОбъектов.ЭтоГруппа = ЛОЖЬ");
		
		РезультатЗапросаНазначенияСвойствКатегорийОбъектов = Запрос.Выполнить();
		ВыборкаНазначенияСвойствКатегорийОбъектов = РезультатЗапросаНазначенияСвойствКатегорийОбъектов.Выбрать();
			
	КонецЕсли;
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Типы = Измерение.Тип.Типы();
		ДобавитьПредставление = (Типы.Количество() > 1 или мПростыеТипы.Найти(Типы[0]) = Неопределено);
		
		ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя + ?(ДобавитьПредставление, ",
		|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Измерение.Имя + ") КАК " + Измерение.Имя + "Представление", "");
		
		ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление());
		
		Если ИспользоватьСвойстваИКатегории Тогда
			
			МассивНазначений = Новый Массив;
			
			Для каждого ТипИзмерения Из Измерение.Тип.Типы() Цикл
				
				ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
				
				Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
					
					Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
						Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
							ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
							ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
							ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
					ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
						МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
						
						МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для каждого Назначение Из МассивНазначений Цикл
				
				ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + Измерение.Имя, Измерение.Имя, Измерение.Представление(), Назначение, мНетКатегорий);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьРегистратор = (МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
	ЕстьПериод = (МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
	
	// Свойства и категории поля "Регистратор"
	Если ИспользоватьСвойстваИКатегории и ЕстьРегистратор Тогда
		
		МассивНазначений = Новый Массив;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 0
		|	ИсточникДанных.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления." + ИмяРегистра + " КАК ИсточникДанных");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Для каждого ТипРегистратора Из РезультатЗапроса.Колонки.Регистратор.ТипЗначения.Типы() Цикл
			
			ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
			
			Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
				
				Если ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипРегистратора) И
					МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
					
					МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого Назначение Из МассивНазначений Цикл
			
			ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных.Регистратор", "Регистратор", "Документ движения (регистратор)", Назначение, мНетКатегорий);
			
		КонецЦикла;
			
	КонецЕсли;
	
	ДополнительныеРеквизиты = Новый Массив;
	Если ЕстьПериод Тогда
		ДополнительныеРеквизиты.Добавить(Новый Структура("Имя, Представление", "Период", "Период"));
	КонецЕсли;
	
	Если ЕстьРегистратор Тогда
		ДополнительныеРеквизиты.Добавить(Новый Структура("Имя, Представление", "НомерСтроки", "Номер строки"));
		ДополнительныеРеквизиты.Добавить(Новый Структура("Имя, Представление", "Активность", "Активность"));
	КонецЕсли;
	
	Для каждого Измерение Из ДополнительныеРеквизиты Цикл
		
		ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя;
		
		ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление);
		
	КонецЦикла;
	
	Для каждого Измерение Из МетаданныеРегистра.Реквизиты Цикл
		
		Если Измерение.Тип = ОписаниеТипаСтрока Тогда
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Измерение.Имя + ", 1, 2000) КАК " + Измерение.Имя;
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Измерение.Имя + ", 1, 2000) КАК " + Измерение.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	ВЫРАЗИТЬ(ИсточникДанных." + Измерение.Имя + " КАК СТРОКА(100)) КАК " + Измерение.Имя;
			
		Иначе
			Типы = Измерение.Тип.Типы();
			ДобавитьПредставление = (Типы.Количество() > 1 или мПростыеТипы.Найти(Типы[0]) = Неопределено);
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя + ?(ДобавитьПредставление, ",
			|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Измерение.Имя + ") КАК " + Измерение.Имя + "Представление", "");
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Измерение.Имя + ".* КАК " + Измерение.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
		КонецЕсли;
		
		ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление());
		
		МассивТипов = Измерение.Тип.Типы();
		Если МассивТипов.Количество() = 1 и МассивТипов[0] = ТипЧисло Тогда
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	СУММА(" + Измерение.Имя + ")";
			
			ДобавитьПоказатель(Измерение.Имя, Измерение.Представление(), Истина, "ЧЦ = " + Формат(Измерение.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Измерение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), "Реквизиты", "Реквизиты");
			
		ИначеЕсли Измерение.Тип = ОписаниеТипаСтрока Тогда
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Измерение.Имя + ", 1, 2000) КАК " + Измерение.Имя;
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
		Иначе
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
			Если ИспользоватьСвойстваИКатегории Тогда
				
				МассивНазначений = Новый Массив;
				
				Для каждого ТипИзмерения Из Измерение.Тип.Типы() Цикл
					
					ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
					
					Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
						
			Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
				Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
					ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
					ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
					ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
					МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
					
					МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
					
				КонецЕсли;
			ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
				МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
				
				МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
				
			КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого Назначение Из МассивНазначений Цикл
					
					ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + Измерение.Имя, Измерение.Имя, Измерение.Представление(), Назначение, мНетКатегорий);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если Ресурс.Тип = ОписаниеТипаСтрока Тогда
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Ресурс.Имя + ", 1, 2000) КАК " + Ресурс.Имя;
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Ресурс.Имя + ", 1, 2000) КАК " + Ресурс.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	ВЫРАЗИТЬ(ИсточникДанных." + Измерение.Имя + " КАК СТРОКА(100)) КАК " + Измерение.Имя;
			
		Иначе
			Типы = Ресурс.Тип.Типы();
			ДобавитьПредставление = (Типы.Количество() > 1 или мПростыеТипы.Найти(Типы[0]) = Неопределено);
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + " КАК " + Ресурс.Имя + ?(ДобавитьПредставление, ",
			|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Ресурс.Имя + ") КАК " + Ресурс.Имя + "Представление", "");
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + ".* КАК " + Ресурс.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Ресурс.Имя;
			
		КонецЕсли;
		
		ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	" + Ресурс.Имя;
		
		мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя, Ресурс.Представление());
		
		МассивТипов = Ресурс.Тип.Типы();
		Если МассивТипов.Количество() = 1 и МассивТипов[0] = ТипЧисло Тогда
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	СУММА(" + Ресурс.Имя + ")";
			
			ДобавитьПоказатель(Ресурс.Имя, Ресурс.Представление(), Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), "Реквизиты", "Реквизиты");
			
		ИначеЕсли Ресурс.Тип = ОписаниеТипаСтрока Тогда
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	ПОДСТРОКА(ИсточникДанных." + Ресурс.Имя + ", 1, 2000) КАК " + Ресурс.Имя;
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + Ресурс.Имя + ".*";
			
		Иначе
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	" + Ресурс.Имя + ".* КАК " + Ресурс.Имя;
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + Ресурс.Имя + ".*";
			
			Если ИспользоватьСвойстваИКатегории Тогда
				
				МассивНазначений = Новый Массив;
				
				Для каждого ТипИзмерения Из Ресурс.Тип.Типы() Цикл
					
					ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
					
					Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
						
						Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
							Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
								ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
								МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
								
								МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
								
							КонецЕсли;
						ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого Назначение Из МассивНазначений Цикл
					
					ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + Ресурс.Имя, Ресурс.Имя, Ресурс.Представление(), Назначение, мНетКатегорий);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если мМассивПоляГруппировка <> Неопределено Тогда
		
		Для каждого ПолеГруппировка Из мМассивПоляГруппировка Цикл
			
			ПолеВыборки = СтрЗаменить(?(ПолеГруппировка.Выражение = Неопределено, "%ПолеВыборки%", ПолеГруппировка.Выражение), "%ПолеВыборки%", "ИсточникДанных." + ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным);
			ИсточникЗапроса = СтрЗаменить(?(ПолеГруппировка.Выражение = Неопределено, "%ПолеВыборки%", ПолеГруппировка.Выражение), "%ПолеВыборки%", ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным);
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	" + ПолеВыборки + " КАК " + ПолеГруппировка.Имя + ",
			|	ПРЕДСТАВЛЕНИЕ(" + ПолеВыборки + ") КАК " + ПолеГруппировка.Имя + "Представление";
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	(" + ИсточникЗапроса + ").* КАК " + ПолеГруппировка.Имя;
				
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			мСтруктураПредставлениеПолей.Вставить(ПолеГруппировка.Имя, ПолеГруппировка.Представление);
			
			ДокументыДобавлен = Ложь;
			
			Если ИспользоватьСвойстваИКатегории И ПолеГруппировка.Тип <> Неопределено И ТипЗнч(ПолеГруппировка.Тип) = Тип("ОписаниеТипов") Тогда
				
				МассивНазначений = Новый Массив;

				Для каждого ТипГруппировки Из ПолеГруппировка.Тип.Типы() Цикл
					
					ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
					
					Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
						
						Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
							Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
								ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
								МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
								
								МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
								
							КонецЕсли;
						ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого Назначение Из МассивНазначений Цикл
					
					ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным, ПолеГруппировка.Имя, ПолеГруппировка.Представление, Назначение, мНетКатегорий);
					
				КонецЦикла;
				
			КонецЕсли;
			
			УстановитьСвязьПолей(ПолеГруппировка.Имя, ПолеГруппировка.Родитель);
			
		КонецЦикла;
		
		мМассивПоляГруппировка = Неопределено;
		
	КонецЕсли;
	
	Если мМассивПоляРесурс <> Неопределено Тогда
		
		Для каждого ПолеРесурс Из мМассивПоляРесурс Цикл
	
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	" + ПолеРесурс.ПутьКДанным + " КАК " + ПолеРесурс.Имя;
					
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + ПолеРесурс.Имя;
					
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеРесурс.ПутьКДанным + " КАК " + ПолеРесурс.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеРесурс.Имя;
			
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	" + ПолеРесурс.Итог + " КАК " + ПолеРесурс.Имя;
			
			мСтруктураПредставлениеПолей.Вставить(ПолеРесурс.Имя, ПолеРесурс.Представление);
			
		КонецЦикла;
		
		мМассивПоляРесурс = Неопределено;
		
	КонецЕсли;
	
	Если ИмяВиртуальнойТаблицы = "СрезПервых" Тогда
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрСведений." + ИмяРегистра + ".СрезПервых(&ДатаКон, {" +
		ОписаниеИсточниковЗапроса + "}) КАК ИсточникДанных
		|//СОЕДИНЕНИЯ";
		
	ИначеЕсли ИмяВиртуальнойТаблицы = "СрезПоследних" Тогда
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрСведений." + ИмяРегистра + ".СрезПоследних(&ДатаКон, {" +
		ОписаниеИсточниковЗапроса + "}) КАК ИсточникДанных
		|//СОЕДИНЕНИЯ";
		
	Иначе
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрСведений." + ИмяРегистра + " КАК ИсточникДанных
		|//СОЕДИНЕНИЯ";
		
	КонецЕсли;
	
	мРежимВводаПериода = ?(ЕстьПериод, 1, -1);
	ОписаниеПолейВыборки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ОписаниеПолейВыборки + "
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ";
	
	ОписаниеПолейВыборкиПостроитель = "
	|{ВЫБРАТЬ" + ОписаниеПолейВыборкиПостроитель + "
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ОписаниеОтборовРезультатаЗапроса = "
	|{ГДЕ" + ОписаниеОтборовРезультатаЗапроса + "
	|	//УСЛОВИЯ_СВОЙСТВА
	|	//УСЛОВИЯ_КАТЕГОРИИ
	|}";
	
	ОписаниеУпорядочиванияРезультатаЗапроса = "
	|{УПОРЯДОЧИТЬ ПО" + ОписаниеУпорядочиванияРезультатаЗапроса + "
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ОписаниеИтогиЗапросаПостроитель = "
	|{ИТОГИ ПО" + ОписаниеИтогиЗапросаПостроитель + "
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ОписаниеИтогиЗапроса = "
	|ИТОГИ" + ОписаниеИтогиЗапроса + "
	|	//ИТОГИ_СВОЙСТВА
	|	//ИТОГИ_КАТЕГОРИИ
	|ПО
	|	ОБЩИЕ";
	
	ТекстЗапроса =
		ОписаниеПолейВыборки +
		ОписаниеПолейВыборкиПостроитель +
		ОписаниеИсточниковЗапроса +
		ОписаниеОтборовРезультатаЗапроса +
		ОписаниеУпорядочиванияРезультатаЗапроса +
		ОписаниеИтогиЗапроса +
		ОписаниеИтогиЗапросаПостроитель;
		
	ТекстПоля = "";
	
	Если ИспользоватьСвойстваИКатегории Тогда
		
		ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	ОтборПериодичность = ПостроительОтчета.Отбор.Найти("Периодичность");
	
	Если ОтборПериодичность <> Неопределено Тогда
		
		ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ОтборПериодичность));
		
	КонецЕсли;
										  
	УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, ПостроительОтчета);
	УстановитьТипыЗначенийСвойствДляОтбора();
		
КонецПроцедуры // ИсточникДанныхРегистрСведений()

Процедура ИсточникДанныхРегистрНакопления(ИмяРегистра, ИмяВиртуальнойТаблицы)
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	
	Если МетаданныеРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПолейВыборки = "";
	ОписаниеПолейВыборкиПостроитель = "";
	ОписаниеИсточниковЗапроса = "";
	ОписаниеОтборовРезультатаЗапроса = "";
	ОписаниеУпорядочиванияРезультатаЗапроса = "";
	ОписаниеИтогиЗапроса = "";
	ОписаниеИтогиЗапросаПостроитель = "";
	
	Если ИспользоватьСвойстваИКатегории Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НазначенияСвойствКатегорийОбъектов.Ссылка,
		|	НазначенияСвойствКатегорийОбъектов.Предопределенный,
		|	НазначенияСвойствКатегорийОбъектов.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов КАК НазначенияСвойствКатегорийОбъектов
		|ГДЕ
		|	НазначенияСвойствКатегорийОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И НазначенияСвойствКатегорийОбъектов.ЭтоГруппа = ЛОЖЬ");
		
		РезультатЗапросаНазначенияСвойствКатегорийОбъектов = Запрос.Выполнить();
		ВыборкаНазначенияСвойствКатегорийОбъектов = РезультатЗапросаНазначенияСвойствКатегорийОбъектов.Выбрать();
			
	КонецЕсли;
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Типы = Измерение.Тип.Типы();
		ДобавитьПредставление = (Типы.Количество() > 1 или мПростыеТипы.Найти(Типы[0]) = Неопределено);
		
		ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя + ?(ДобавитьПредставление, ",
		|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Измерение.Имя + ") КАК " + Измерение.Имя + "Представление", "");
		
		ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление());
		
		Если ИспользоватьСвойстваИКатегории Тогда
			
			МассивНазначений = Новый Массив;
			
			Для каждого ТипИзмерения Из Измерение.Тип.Типы() Цикл
				
				ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
				
				Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
					
					Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
						Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
							ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
							ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
							ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
					ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
						МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
						
						МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для каждого Назначение Из МассивНазначений Цикл
				
				ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + Измерение.Имя, Измерение.Имя, Измерение.Представление(), Назначение, мНетКатегорий);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Свойства и категории поля "Регистратор"
	Если ИспользоватьСвойстваИКатегории и ИмяВиртуальнойТаблицы <> "Остатки" Тогда
		
		МассивНазначений = Новый Массив;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 0
		|	ИсточникДанных.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления." + ИмяРегистра + " КАК ИсточникДанных");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Для каждого ТипРегистратора Из РезультатЗапроса.Колонки.Регистратор.ТипЗначения.Типы() Цикл
			
			ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
			
			Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
				
				Если ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипРегистратора) И
					МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
					
					МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого Назначение Из МассивНазначений Цикл
			
			ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных.Регистратор", "Регистратор", "Документ движения (регистратор)", Назначение, мНетКатегорий);
			
		КонецЦикла;
			
	КонецЕсли;
	
	Если ИмяВиртуальнойТаблицы = "" Тогда
		ТипЧисло = Тип("Число");
		
		ДополнительныеРеквизиты = Новый Массив;
		ДополнительныеРеквизиты.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "НомерСтроки", "Номер строки", Ложь));
		ДополнительныеРеквизиты.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "Активность", "Активность", Ложь));
		Если МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ДополнительныеРеквизиты.Добавить(Новый Структура("Имя, Представление, ДобавитьПредставление", "ВидДвижения", "Вид движения", Истина));
		КонецЕсли; 
		
		Для каждого Измерение Из ДополнительныеРеквизиты Цикл
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя + ?(Измерение.ДобавитьПредставление, ",
			|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Измерение.Имя + ") КАК " + Измерение.Имя + "Представление", "");
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Измерение.Имя + ".* КАК " + Измерение.Имя;
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
			мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление);
			
		КонецЦикла;
		
		Для каждого Измерение Из МетаданныеРегистра.Реквизиты Цикл
			Типы = Измерение.Тип.Типы();
			ДобавитьПредставление = (Типы.Количество() > 1 или мПростыеТипы.Найти(Типы[0]) = Неопределено);
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя + ?(ДобавитьПредставление, ",
			|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Измерение.Имя + ") КАК " + Измерение.Имя + "Представление", "");
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Измерение.Имя + ".* КАК " + Измерение.Имя;
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Измерение.Имя + ".*";
			
			мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление());
			
			МассивТипов = Измерение.Тип.Типы();
			Если МассивТипов.Количество() = 1 и МассивТипов[0] = ТипЧисло Тогда
				ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
				|	СУММА(" + Измерение.Имя + ")";
				
				ДобавитьПоказатель(Измерение.Имя, Измерение.Представление(), Истина, "ЧЦ = " + Формат(Измерение.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Измерение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"));
				
			Иначе
				ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
				|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
				
				ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
				|	" + Измерение.Имя + ".*";
				
				Если ИспользоватьСвойстваИКатегории Тогда
					
					МассивНазначений = Новый Массив;
					
					Для каждого ТипИзмерения Из Измерение.Тип.Типы() Цикл
						
						ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
						
						Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
							
							Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
								Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
									ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
									ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
									ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
									МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
									
									МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
									
								КонецЕсли;
							ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
								МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
								
								МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
					Для каждого Назначение Из МассивНазначений Цикл
						
						ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + Измерение.Имя, Измерение.Имя, Измерение.Представление(), Назначение, мНетКатегорий);
						
					КонецЦикла;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если мМассивПоляГруппировка <> Неопределено Тогда
		
		Для каждого ПолеГруппировка Из мМассивПоляГруппировка Цикл
			
			ПолеВыборки = СтрЗаменить(?(ПолеГруппировка.Выражение = Неопределено, "%ПолеВыборки%", ПолеГруппировка.Выражение), "%ПолеВыборки%", "ИсточникДанных." + ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным);
			ИсточникЗапроса = СтрЗаменить(?(ПолеГруппировка.Выражение = Неопределено, "%ПолеВыборки%", ПолеГруппировка.Выражение), "%ПолеВыборки%", ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным);
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	" + ПолеВыборки + " КАК " + ПолеГруппировка.Имя + ",
			|	ПРЕДСТАВЛЕНИЕ(" + ПолеВыборки + ") КАК " + ПолеГруппировка.Имя + "Представление";
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	(" + ИсточникЗапроса + ").* КАК " + ПолеГруппировка.Имя;
				
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			мСтруктураПредставлениеПолей.Вставить(ПолеГруппировка.Имя, ПолеГруппировка.Представление);
			
			ДокументыДобавлен = Ложь;
			
			Если ИспользоватьСвойстваИКатегории И ПолеГруппировка.Тип <> Неопределено И ТипЗнч(ПолеГруппировка.Тип) = Тип("ОписаниеТипов") Тогда
				
				МассивНазначений = Новый Массив;

				Для каждого ТипГруппировки Из ПолеГруппировка.Тип.Типы() Цикл
					
					ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
					
					Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
						
						Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
							Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
								ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
								МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
								
								МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
								
							КонецЕсли;
						ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого Назначение Из МассивНазначений Цикл
					
					ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным, ПолеГруппировка.Имя, ПолеГруппировка.Представление, Назначение, мНетКатегорий);
					
				КонецЦикла;
				
			КонецЕсли;
			
			УстановитьСвязьПолей(ПолеГруппировка.Имя, ПолеГруппировка.Родитель);
			
		КонецЦикла;
		
		мМассивПоляГруппировка = Неопределено;
		
	КонецЕсли;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если ИмяВиртуальнойТаблицы = "Обороты" Тогда
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот";
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + Ресурс.Имя + "Оборот";
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот";
			
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	СУММА(" + Ресурс.Имя + "Оборот)";
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Ресурс.Имя + "Оборот";
			
			ДобавитьПоказатель(Ресурс.Имя + "Оборот", Ресурс.Представление(), Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"));
			
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "Оборот", Ресурс.Представление() + " (оборот)");
			
		ИначеЕсли ИмяВиртуальнойТаблицы = "Остатки" Тогда
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "Остаток КАК " + Ресурс.Имя + "Остаток";
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + Ресурс.Имя + "Остаток";
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "Остаток КАК " + Ресурс.Имя + "Остаток";
			
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	СУММА(" + Ресурс.Имя + "Остаток)";
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Ресурс.Имя + "Остаток";
			
			ДобавитьПоказатель(Ресурс.Имя + "Остаток", Ресурс.Представление(), Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"));
			
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "Остаток", Ресурс.Представление() + " (остаток)");
			
		ИначеЕсли ИмяВиртуальнойТаблицы = "ОстаткиИОбороты" Тогда
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "НачальныйОстаток КАК " + Ресурс.Имя + "НачальныйОстаток,
			|	ИсточникДанных." + Ресурс.Имя + "Приход КАК " + Ресурс.Имя + "Приход,
			|	ИсточникДанных." + Ресурс.Имя + "Расход КАК " + Ресурс.Имя + "Расход,
			|	ИсточникДанных." + Ресурс.Имя + "КонечныйОстаток КАК " + Ресурс.Имя + "КонечныйОстаток,
			|	ИсточникДанных." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот";
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + Ресурс.Имя + "НачальныйОстаток,
			|	" + Ресурс.Имя + "Приход,
			|	" + Ресурс.Имя + "Расход,
			|	" + Ресурс.Имя + "КонечныйОстаток,
			|	" + Ресурс.Имя + "Оборот";
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "НачальныйОстаток КАК " + Ресурс.Имя + "НачальныйОстаток,
			|	ИсточникДанных." + Ресурс.Имя + "Приход КАК " + Ресурс.Имя + "Приход,
			|	ИсточникДанных." + Ресурс.Имя + "Расход КАК " + Ресурс.Имя + "Расход,
			|	ИсточникДанных." + Ресурс.Имя + "КонечныйОстаток КАК " + Ресурс.Имя + "КонечныйОстаток,
			|	ИсточникДанных." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот";
			
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	СУММА(" + Ресурс.Имя + "НачальныйОстаток),
			|	СУММА(" + Ресурс.Имя + "Приход),
			|	СУММА(" + Ресурс.Имя + "Расход),
			|	СУММА(" + Ресурс.Имя + "КонечныйОстаток),
			|	СУММА(" + Ресурс.Имя + "Оборот)";
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Ресурс.Имя + "НачальныйОстаток,
			|	" + Ресурс.Имя + "Приход,
			|	" + Ресурс.Имя + "Расход,
			|	" + Ресурс.Имя + "КонечныйОстаток,
			|	" + Ресурс.Имя + "Оборот";
			
			ДобавитьПоказатель(Ресурс.Имя + "НачальныйОстаток", "Нач. остаток", Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), Ресурс.Имя, Ресурс.Представление());
			ДобавитьПоказатель(Ресурс.Имя + "Приход", "Приход", Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), Ресурс.Имя, Ресурс.Представление());
			ДобавитьПоказатель(Ресурс.Имя + "Расход", "Расход", Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), Ресурс.Имя, Ресурс.Представление());
			ДобавитьПоказатель(Ресурс.Имя + "КонечныйОстаток", "Кон. остаток", Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), Ресурс.Имя, Ресурс.Представление());
			ДобавитьПоказатель(Ресурс.Имя + "Оборот", "Оборот", Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), Ресурс.Имя, Ресурс.Представление());
			
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "НачальныйОстаток", Ресурс.Представление() + " (нач. ост.)");
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "Приход", Ресурс.Представление() + " (приход)");
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "Расход", Ресурс.Представление() + " (расход)");
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "КонечныйОстаток", Ресурс.Представление() + " (кон. ост.)");
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "Оборот", Ресурс.Представление() + " (оборот)");
			
		Иначе
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + " КАК " + Ресурс.Имя;
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + Ресурс.Имя;
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + " КАК " + Ресурс.Имя;
			
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	СУММА(" + Ресурс.Имя + ")";
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Ресурс.Имя;
			
			ДобавитьПоказатель(Ресурс.Имя, Ресурс.Представление(), Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"));
			
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя, Ресурс.Представление());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если мМассивПоляРесурс <> Неопределено Тогда
		
		Для каждого ПолеРесурс Из мМассивПоляРесурс Цикл
	
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	" + ПолеРесурс.ПутьКДанным + " КАК " + ПолеРесурс.Имя;
					
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + ПолеРесурс.Имя;
					
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеРесурс.ПутьКДанным + " КАК " + ПолеРесурс.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеРесурс.Имя;
			
			Если ПолеРесурс.Итог = Неопределено Тогда
						
				ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
				|	СУММА(" + ПолеРесурс.Имя + ")";
				
			Иначе
				
				ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
				|	" + ПолеРесурс.Итог + " КАК " + ПолеРесурс.Имя;
						
			КонецЕсли;
					
			мСтруктураПредставлениеПолей.Вставить(ПолеРесурс.Имя, ПолеРесурс.Представление);
			
		КонецЦикла;
		
		мМассивПоляРесурс = Неопределено;
		
	КонецЕсли;
	
	Если ИмяВиртуальнойТаблицы = "Обороты" Тогда
		
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Обороты(&ДатаНач, &ДатаКон, Регистратор {&Периодичность}, {" +
		ОписаниеИсточниковЗапроса + "}) КАК ИсточникДанных
		|//СОЕДИНЕНИЯ";
		
	ИначеЕсли ИмяВиртуальнойТаблицы = "Остатки" Тогда
		
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Остатки(&ДатаКон, {" +
		ОписаниеИсточниковЗапроса + "}) КАК ИсточникДанных
		|//СОЕДИНЕНИЯ";
		
	ИначеЕсли ИмяВиртуальнойТаблицы = "ОстаткиИОбороты" Тогда
		
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор {&Периодичность},, {" +
		ОписаниеИсточниковЗапроса + "}) КАК ИсточникДанных
		|//СОЕДИНЕНИЯ";
		
	Иначе
		
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрНакопления." + ИмяРегистра + " КАК ИсточникДанных
		|//СОЕДИНЕНИЯ
		|ГДЕ
		|	ИсточникДанных.Период МЕЖДУ &ДатаНачала И &ДатаКонца";
		
	КонецЕсли;
	
	Если ИмяВиртуальнойТаблицы = "Остатки" Тогда
		мРежимВводаПериода = 1;
		ОписаниеПолейВыборки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ОписаниеПолейВыборки + "
		|	//ПОЛЯ_СВОЙСТВА
		|	//ПОЛЯ_КАТЕГОРИИ";
		
		ОписаниеПолейВыборкиПостроитель = "
		|{ВЫБРАТЬ" + ОписаниеПолейВыборкиПостроитель + "
		|	//ПСЕВДОНИМЫ_СВОЙСТВА
		|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
		|}";
		
		ОписаниеОтборовРезультатаЗапроса = "
		|{ГДЕ" + ОписаниеОтборовРезультатаЗапроса + "
		|	//УСЛОВИЯ_СВОЙСТВА
		|	//УСЛОВИЯ_КАТЕГОРИИ
		|}";
		
		ОписаниеУпорядочиванияРезультатаЗапроса = "
		|{УПОРЯДОЧИТЬ ПО" + ОписаниеУпорядочиванияРезультатаЗапроса + "
		|	//ПСЕВДОНИМЫ_СВОЙСТВА
		|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
		|}";
		
		ОписаниеИтогиЗапросаПостроитель = "
		|{ИТОГИ ПО" + ОписаниеИтогиЗапросаПостроитель + "
		|	//ПСЕВДОНИМЫ_СВОЙСТВА
		|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
		|}";
	Иначе
		мРежимВводаПериода = 0;
		ОписаниеПолейВыборки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
		|	ИсточникДанных.Регистратор КАК Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Регистратор) КАК РегистраторПредставление,
		|	ИсточникДанных.Период КАК Период,
		|	НачалоПериода(ИсточникДанных.Период, День) КАК ПериодДень,
		|	НачалоПериода(ИсточникДанных.Период, Неделя) КАК ПериодНеделя,
		|	НачалоПериода(ИсточникДанных.Период, Декада) КАК ПериодДекада,
		|	НачалоПериода(ИсточникДанных.Период, Месяц) КАК ПериодМесяц,
		|	НачалоПериода(ИсточникДанных.Период, Квартал) КАК ПериодКвартал,
		|	НачалоПериода(ИсточникДанных.Период, Полугодие) КАК ПериодПолугодие,
		|	НачалоПериода(ИсточникДанных.Период, Год) КАК ПериодГод
		|	//ПОЛЯ_СВОЙСТВА
		|	//ПОЛЯ_КАТЕГОРИИ";
		
		ОписаниеПолейВыборкиПостроитель = "
		|{ВЫБРАТЬ" + ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	Регистратор.* КАК Регистратор,
		|	Период КАК Период,
		|	ПериодДень,
		|	ПериодНеделя,
		|	ПериодДекада,
		|	ПериодМесяц,
		|	ПериодКвартал,
		|	ПериодПолугодие,
		|	ПериодГод
		|	//ПСЕВДОНИМЫ_СВОЙСТВА
		|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
		|}";
		
		ОписаниеОтборовРезультатаЗапроса = "
		|{ГДЕ" + ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
		|	ИсточникДанных.Регистратор.* КАК Регистратор,
		|	ИсточникДанных.Период КАК Период,
		|	НачалоПериода(ИсточникДанных.Период, День) КАК ПериодДень,
		|	НачалоПериода(ИсточникДанных.Период, Неделя) КАК ПериодНеделя,
		|	НачалоПериода(ИсточникДанных.Период, Декада) КАК ПериодДекада,
		|	НачалоПериода(ИсточникДанных.Период, Месяц) КАК ПериодМесяц,
		|	НачалоПериода(ИсточникДанных.Период, Квартал) КАК ПериодКвартал,
		|	НачалоПериода(ИсточникДанных.Период, Полугодие) КАК ПериодПолугодие,
		|	НачалоПериода(ИсточникДанных.Период, Год) КАК ПериодГод
		|	//УСЛОВИЯ_СВОЙСТВА
		|	//УСЛОВИЯ_КАТЕГОРИИ
		|}";
		
		ОписаниеУпорядочиванияРезультатаЗапроса = "
		|{УПОРЯДОЧИТЬ ПО" + ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
		|	Регистратор.*,
		|	Период,
		|	ПериодДень,
		|	ПериодНеделя,
		|	ПериодДекада,
		|	ПериодМесяц,
		|	ПериодКвартал,
		|	ПериодПолугодие,
		|	ПериодГод
		|	//ПСЕВДОНИМЫ_СВОЙСТВА
		|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
		|}";
		
		ОписаниеИтогиЗапросаПостроитель = "
		|{ИТОГИ ПО" + ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
		|	Регистратор.*,
		|	Период,
		|	ПериодДень,
		|	ПериодНеделя,
		|	ПериодДекада,
		|	ПериодМесяц,
		|	ПериодКвартал,
		|	ПериодПолугодие,
		|	ПериодГод
		|	//ПСЕВДОНИМЫ_СВОЙСТВА
		|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
		|}";
	КонецЕсли;
	
	ОписаниеИтогиЗапроса = "
	|ИТОГИ" + ОписаниеИтогиЗапроса + "
	|	//ИТОГИ_СВОЙСТВА
	|	//ИТОГИ_КАТЕГОРИИ
	|ПО
	|	ОБЩИЕ";
	
	ТекстЗапроса =
		ОписаниеПолейВыборки +
		ОписаниеПолейВыборкиПостроитель +
		ОписаниеИсточниковЗапроса +
		ОписаниеОтборовРезультатаЗапроса +
		ОписаниеУпорядочиванияРезультатаЗапроса +
		ОписаниеИтогиЗапроса +
		ОписаниеИтогиЗапросаПостроитель;
		
	ТекстПоля = "";
	
	Если ИспользоватьСвойстваИКатегории Тогда
		
		ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	ОтборПериодичность = ПостроительОтчета.Отбор.Найти("Периодичность");
	
	Если ОтборПериодичность <> Неопределено Тогда
		
		ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ОтборПериодичность));
		
	КонецЕсли;
										  
	УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, ПостроительОтчета);
	УстановитьТипыЗначенийСвойствДляОтбора();
		
КонецПроцедуры // ИсточникДанныхРегистрНакопления()

Процедура ИсточникДанныхРегистрБухгалтерии(ИмяРегистра, ИмяВиртуальнойТаблицы)
	
	МетаданныеРегистра = Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра);
	
	Если МетаданныеРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мРежимВводаПериода = -1;
	
	Предупреждение("Выбран источник данных: " + ПолучитьПредставлениеИсточникаДанных() + " 
	|Источник находится в разработке. Выберите другой источник.", 90);
	
КонецПроцедуры // ИсточникДанныхРегистрБухгалтерии()

Процедура ИсточникДанныхРегистрРасчета(ИмяРегистра, ИмяВиртуальнойТаблицы)
	
	МетаданныеРегистра = Метаданные.РегистрыРасчета.Найти(ИмяРегистра);
	
	Если МетаданныеРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мРежимВводаПериода = -1;
	
	Предупреждение("Выбран источник данных: " + ПолучитьПредставлениеИсточникаДанных() + " 
	|Источник находится в разработке. Выберите другой источник.", 90);
	
КонецПроцедуры // ИсточникДанныхРегистрРасчета()


Процедура СгенерироватьКнопкиУправленияГруппировкой(ТабличныйДокумент)
	
	Если ФормаДляДополнительныхЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    КоличествоГруппировокСтрок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
    КоличествоГруппировокКолонок = ТабличныйДокумент.КоличествоУровнейГруппировокКолонок();
	
	Если ЭлементовГруппировокСтрок = КоличествоГруппировокСтрок
		и ЭлементовГруппировокКолонок = КоличествоГруппировокКолонок Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы = ФормаДляДополнительныхЭлементов.ЭлементыФормы;
	ИмяТабличногоДокумента = ТабличныйДокумент.Имя;
	
	// Привязка к верхнему левому углу ПоляТабличногоДокумента
    НачалоВерх = ТабличныйДокумент.Верх + ?(КоличествоГруппировокКолонок, 5 + КоличествоГруппировокКолонок * 13, 2);
    НачалоЛево = ТабличныйДокумент.Лево + 2;

    // Удалим лишние кнопки
	УдалитьВсеКнопкиСтрок = ЭлементовГруппировокКолонок <> КоличествоГруппировокКолонок;
	Для Индекс = ?(УдалитьВсеКнопкиСтрок, 1, КоличествоГруппировокСтрок + 1) По ЭлементовГруппировокСтрок Цикл
		ИмяКнопки = "КнопкаГруппировкиСтрок_" + Формат(Индекс, "ЧЦ=3; ЧН=; ЧВН=") + "_" + ИмяТабличногоДокумента;
		ТекЭлемент = ЭлементыФормы.Найти(ИмяКнопки);
		Если ТекЭлемент <> Неопределено Тогда
            ЭлементыФормы.Удалить(ТекЭлемент);
        КонецЕсли;
	КонецЦикла;
	
	ЭлементФормыТабличныйДокумент = ЭлементыФормы[ИмяТабличногоДокумента];
	
    // Добавим новые кнопки по количеству группировок
	Для Индекс = 1 По КоличествоГруппировокСтрок Цикл
		ИмяКнопки = "КнопкаГруппировкиСтрок_" + Формат(Индекс, "ЧЦ=3; ЧН=; ЧВН=") + "_" + ИмяТабличногоДокумента;
		Если ЭлементыФормы.Найти(ИмяКнопки) = Неопределено Тогда
			НоваяКнопка = ЭлементыФормы.Добавить(Тип("Кнопка"), ИмяКнопки);
			НоваяКнопка.Верх      = НачалоВерх;
			НоваяКнопка.Лево      = НачалоЛево + (13 * (Индекс - 1));
			НоваяКнопка.Высота    = 12;
			НоваяКнопка.Ширина    = 12;
			НоваяКнопка.Шрифт     = Новый Шрифт("Arial", 7);
			НоваяКнопка.Заголовок = "" + Индекс;
			Если Индекс = 1 Тогда
				НоваяКнопка.Подсказка = "Показать группировки верхнего уровня";
			ИначеЕсли Индекс = КоличествоГруппировокСтрок Тогда
				НоваяКнопка.Подсказка = "Показать все группировки";
			Иначе
				НоваяКнопка.Подсказка = "Показать группировки до уровня " + Индекс;
			КонецЕсли;
			НоваяКнопка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			Попытка
				НоваяКнопка.УстановитьДействие("Нажатие", Новый Действие("КоманднаяПанельФормыБыстрыеОтборы"));
			Исключение
			КонецПопытки;
			НоваяКнопка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементФормыТабличныйДокумент, ГраницаЭлементаУправления.Верх);
			НоваяКнопка.УстановитьПривязку(ГраницаЭлементаУправления.Низ, НоваяКнопка, ГраницаЭлементаУправления.Верх);
			НоваяКнопка.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементФормыТабличныйДокумент, ГраницаЭлементаУправления.Лево);
			НоваяКнопка.УстановитьПривязку(ГраницаЭлементаУправления.Право, НоваяКнопка, ГраницаЭлементаУправления.Лево);
		КонецЕсли;
	КонецЦикла;
	
	// Привязка к верхнему левому углу ПоляТабличногоДокумента
    НачалоВерх = ТабличныйДокумент.Верх + 2 ;
    НачалоЛево = ТабличныйДокумент.Лево + ?(КоличествоГруппировокСтрок, 15 + КоличествоГруппировокСтрок * 13, 2);

    // Удалим лишние кнопки
	УдалитьВсеКнопкиКолонок = ЭлементовГруппировокСтрок <> КоличествоГруппировокСтрок;
	Для Индекс = ?(УдалитьВсеКнопкиКолонок, 1, КоличествоГруппировокКолонок + 1) По ЭлементовГруппировокКолонок Цикл
		ИмяКнопки = "КнопкаГруппировкиКолонок_" + Формат(Индекс, "ЧЦ=3; ЧН=; ЧВН=") + "_" + ИмяТабличногоДокумента;
		ТекЭлемент = ЭлементыФормы.Найти(ИмяКнопки);
		Если ТекЭлемент <> Неопределено Тогда
            ЭлементыФормы.Удалить(ТекЭлемент);
        КонецЕсли;
	КонецЦикла;
	
    // Добавим новые кнопки по количеству группировок
	Для Индекс = 1 По КоличествоГруппировокКолонок Цикл
		ИмяКнопки = "КнопкаГруппировкиКолонок_" + Формат(Индекс, "ЧЦ=3; ЧН=; ЧВН=") + "_" + ИмяТабличногоДокумента;
		Если ЭлементыФормы.Найти(ИмяКнопки) = Неопределено Тогда
			НоваяКнопка = ЭлементыФормы.Добавить(Тип("Кнопка"), ИмяКнопки);
			НоваяКнопка.Верх      = НачалоВерх + (13 * (Индекс - 1));
			НоваяКнопка.Лево      = НачалоЛево;
			НоваяКнопка.Высота    = 12;
			НоваяКнопка.Ширина    = 12;
			НоваяКнопка.Шрифт     = Новый Шрифт("Arial", 7);
			НоваяКнопка.Заголовок = "" + Индекс;
			Если Индекс = 1 Тогда
				НоваяКнопка.Подсказка = "Показать группировки верхнего уровня";
			ИначеЕсли Индекс = КоличествоГруппировокКолонок Тогда
				НоваяКнопка.Подсказка = "Показать все группировки";
			Иначе
				НоваяКнопка.Подсказка = "Показать группировки до уровня " + Индекс;
			КонецЕсли;
			НоваяКнопка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			Попытка
				НоваяКнопка.УстановитьДействие("Нажатие", Новый Действие("КоманднаяПанельФормыБыстрыеОтборы"));
			Исключение
			КонецПопытки;
			НоваяКнопка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементФормыТабличныйДокумент, ГраницаЭлементаУправления.Верх);
			НоваяКнопка.УстановитьПривязку(ГраницаЭлементаУправления.Низ, НоваяКнопка, ГраницаЭлементаУправления.Верх);
			НоваяКнопка.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементФормыТабличныйДокумент, ГраницаЭлементаУправления.Лево);
			НоваяКнопка.УстановитьПривязку(ГраницаЭлементаУправления.Право, НоваяКнопка, ГраницаЭлементаУправления.Лево);
		КонецЕсли;
	КонецЦикла;

	ЭлементовГруппировокСтрок = КоличествоГруппировокСтрок;
	ЭлементовГруппировокКолонок = КоличествоГруппировокКолонок;
	
	ФормаДляДополнительныхЭлементов.ТекущийЭлемент = ЭлементФормыТабличныйДокумент;
	
КонецПроцедуры //СгенерироватьКнопкиУправленияГруппировкой()

Процедура РасчетСуммыПоЯчейкам() Экспорт

	ЭлементыФормы = ФормаДляДополнительныхЭлементов.ЭлементыФормы;
	ЭлементУправления = ЭлементыФормы[мИмяЭлементаУправленияПолеТабличногоДокументаРезультат];
	
	Сумма = 0;
	КоличествоСумм = 0;
	СоответствиеЯчеек = Новый Соответствие;
    ОписаниеТипов = Новый ОписаниеТипов("Число"); 

	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для Каждого ВыделеннаяОбласть Из ЭлементУправления.ВыделенныеОбласти Цикл
	//	Для Индекс1 = ВыделеннаяОбласть.Лево По ВыделеннаяОбласть.Право Цикл
	//		Для Индекс2 = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл
	//			Область = ЭлементУправления.Область(Индекс2, Индекс1, Индекс2, Индекс1);
	//			СоответствиеЯчеек.Вставить(Область.Имя, ОписаниеТипов.ПривестиЗначение(Область.Текст));
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЦикла;
	
	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для Каждого ВыделеннаяОбласть Из ЭлементУправления.ВыделенныеОбласти Цикл Для Индекс1 = ВыделеннаяОбласть.Лево По ВыделеннаяОбласть.Право Цикл Для Индекс2 = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл Область = ЭлементУправления.Область(Индекс2, Индекс1, Индекс2, Индекс1); СоответствиеЯчеек.Вставить(Область.Имя, ОписаниеТипов.ПривестиЗначение(Область.Текст)); КонецЦикла; КонецЦикла; КонецЦикла;
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//Для каждого Ячейка Из СоответствиеЯчеек Цикл
	//	Значение = Ячейка.Значение;
	//	Если Значение <> 0 Тогда
	//		Сумма = Сумма + Значение;
	//		КоличествоСумм = КоличествоСумм + 1;
	//	КонецЕсли;
	//КонецЦикла; 

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для каждого Ячейка Из СоответствиеЯчеек Цикл Значение = Ячейка.Значение; Если Значение <> 0 Тогда Сумма = Сумма + Значение; КоличествоСумм = КоличествоСумм + 1; КонецЕсли; КонецЦикла;
	
	ПанельСтатусСтрока = ЭлементыФормы.ПанельСтатусСтрока;
	КоличествоВыделено = СоответствиеЯчеек.Количество();
	Если КоличествоВыделено > 1 Тогда
		ТекстИтогов = " Выделено ячеек: " + КоличествоВыделено + "    Просуммировано ячеек: " + КоличествоСумм + "    Итого по выделенным ячейкам: " + Сумма;
		ЭлементыФормы.НадписьДляИтоговПоЯчейкам.Заголовок = ТекстИтогов;
		Если ПанельСтатусСтрока.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
			ПанельСтатусСтрока.Свертка = РежимСверткиЭлементаУправления.Нет;
		КонецЕсли; 
	Иначе
		Если ПанельСтатусСтрока.Свертка <> РежимСверткиЭлементаУправления.Низ Тогда
			ПанельСтатусСтрока.Свертка = РежимСверткиЭлементаУправления.Низ;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // РасчетСуммыПоЯчейкам()
 


Процедура СформироватьОтчет(ТабличныйДокумент, Очищать = Истина, ФиксироватьЗаголовок = Истина, Отчет = Неопределено) Экспорт
	
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.Перечисления.Найти("СпособыЗапускаВнешнихОбработокВОтчетахНаБазеУниверсального") <> Неопределено и НЕ ВыполнитьОбработкиПодключаемыеКОтчету(Перечисления.СпособыЗапускаВнешнихОбработокВОтчетахНаБазеУниверсального.АвтоматическиПередФормированиемОтчета, Отчет, ТабличныйДокумент) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ВыполнитьЗамерПроизводительности Тогда
		Скрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
		Скрипт.language = "javascript";
		мСек1 = Формат(Скрипт.eval("new Date().getTime()"),"ЧГ=0");
	КонецЕсли; 
	
	ДобавитьАвтоупорядочивание();
	ВыбранныеПоляУсловноеОформлениеПоказатели = ДобавитьПоказателиВВыбранныеПоляИУсловноеОформление();
	
	Если ВыводВозможен() Тогда
		
		Если Очищать Тогда
		
			ТабличныйДокумент.Очистить();
		
		КонецЕсли;
		
		ОтборПериодичность = ДобавитьОтборПериодичность();
		
		ПостроительОтчета.Макет = ПолучитьМакетПостротеляОтчета();
		ПостроительОтчета.МакетОформления = _ПолучитьМакетОформления();
		ПостроительОтчета.ОформитьМакет();
		
		ПостроительОтчета.Параметры.Вставить("ДатаНач", ?(ДатаНач = Дата('00010101000000'), ДатаНач, Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая)));
		ПостроительОтчета.Параметры.Вставить("ДатаКон", ?(ДатаКон = Дата('00010101000000'), ДатаКон, Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая)));
		ПостроительОтчета.Параметры.Вставить("ДатаНачала", ?(ДатаНач = Дата('00010101000000'), ДатаНач, НачалоДня(ДатаНач)));
		ПостроительОтчета.Параметры.Вставить("ДатаКонца", ?(ДатаКон = Дата('00010101000000'), Дата("39991231"), КонецДня(ДатаКон)));
		
		СвязанныеПоля = ДобавитьСвязанныеПоля();
		ПоляПорядка = ДобавитьПоляПорядка();
		
		ПостроительОтчета.Выполнить();
		ПостроительОтчета.Вывести(ТабличныйДокумент);
		
		УдалитьПоляПорядка(ПоляПорядка);
		УдалитьСвязанныеПоля(СвязанныеПоля);
		УдалитьОтборПериодичность(ОтборПериодичность);
		
		ОформитьЗаголовок(ТабличныйДокумент);
		
		РасчетШириныКолонок(ТабличныйДокумент);
		
		Если ФиксироватьЗаголовок Тогда
			
			УстановитьФиксацию(ТабличныйДокумент);
			
		КонецЕсли;
		
		УстановитьКолонтитул(ТабличныйДокумент);
		
	КонецЕсли;
		
	УдалитьПоказателиИзВыбранныхПолейИУсловногоОформления(ВыбранныеПоляУсловноеОформлениеПоказатели);
	УправлениеОтображениемЗаголовка(ЭтотОбъект, ТабличныйДокумент);
	
	Если Метаданные.Перечисления.Найти("СпособыЗапускаВнешнихОбработокВОтчетахНаБазеУниверсального") <> Неопределено Тогда
		ВыполнитьОбработкиПодключаемыеКОтчету(Перечисления.СпособыЗапускаВнешнихОбработокВОтчетахНаБазеУниверсального.АвтоматическиПослеФормированияОтчета, Отчет, ТабличныйДокумент);
	КонецЕсли;
	
	СгенерироватьКнопкиУправленияГруппировкой(ТабличныйДокумент);
	
	Если ВыполнитьЗамерПроизводительности Тогда
		мСек2 = Формат(Скрипт.eval("new Date().getTime()"),"ЧГ=0");
		мСек3 = (мСек2 - мСек1) / 1000;
		мЧасы = Цел(мСек3 / 3600);
		мСек3 = мСек3 % 3600;
		мМинуты = Цел(мСек3 / 60);
		мСек3 = мСек3 % 60;
		Сообщить("Время выполнения: " + 
			Формат(мЧасы, "ЧН=; ЧВН=") + ":" + Формат(мМинуты, "ЧЦ=2; ЧН=; ЧВН=") + ":" +
			Формат(мСек3, "ЧЦ=5; ЧДЦ=3; ЧРД=.; ЧН=; ЧВН=") + " мс");
	КонецЕсли;
	
КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьРезультат() Экспорт
	
	ДобавитьАвтоупорядочивание();
	ВыбранныеПоляУсловноеОформлениеПоказатели = ДобавитьПоказателиВВыбранныеПоляИУсловноеОформление();
	
	ОтборПериодичность = ДобавитьОтборПериодичность();
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", ?(ДатаНач = Дата('00010101000000'), ДатаНач, Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая)));
	ПостроительОтчета.Параметры.Вставить("ДатаКон", ?(ДатаКон = Дата('00010101000000'), ДатаКон, Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая)));
	ПостроительОтчета.Параметры.Вставить("ДатаНачала", ?(ДатаНач = Дата('00010101000000'), ДатаНач, НачалоДня(ДатаНач)));
	ПостроительОтчета.Параметры.Вставить("ДатаКонца", ?(ДатаКон = Дата('00010101000000'), Дата("39991231"), КонецДня(ДатаКон)));
	
	СвязанныеПоля = ДобавитьСвязанныеПоля();
	ПоляПорядка = ДобавитьПоляПорядка();
	
	ПостроительОтчета.Выполнить();
	Результат = ПостроительОтчета.Результат;
	
	УдалитьПоляПорядка(ПоляПорядка);
	УдалитьСвязанныеПоля(СвязанныеПоля);
	УдалитьОтборПериодичность(ОтборПериодичность);
	
	УдалитьПоказателиИзВыбранныхПолейИУсловногоОформления(ВыбранныеПоляУсловноеОформлениеПоказатели);
	
	Возврат Результат;
	
КонецФункции // ПолучитьРезультат()

Процедура УстановитьНачальныеНастройки(УниверсальныйОтчет = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если УниверсальныйОтчет Тогда
		
		Если ИсточникДанных = "" Тогда
			// Для вызовов из типовых конфигураций
			
			МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
			мНазваниеОтчета = ?(МетаданныеРегистра <> Неопределено И мВыбиратьИмяРегистра, Метаданные.РегистрыНакопления[ИмяРегистра].Синоним, мНазваниеОтчета);
			
			УстановитьНачальныеНастройкиПоМетаданнымРегистра(ИмяРегистра);
		Иначе
			Показатели.Строки.Очистить();
			
			мНазваниеОтчета = ПолучитьПредставлениеИсточникаДанных();
			УстановитьНачальныеНастройкиПоИсточникуДанных();
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ТекущаяСтрока Из Показатели.Строки Цикл
			
		УстановитьПометкиРодителей(ТекущаяСтрока);
			
	КонецЦикла;
	
	ОтборПериодичность = ПостроительОтчета.Отбор.Найти("Периодичность");
	
	Если ОтборПериодичность <> Неопределено Тогда
		
		ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ОтборПериодичность));
		
	КонецЕсли;
	
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	
КонецПроцедуры // УстановитьНачальныеНастройки()

Процедура ПереустановитьНачальныеНастройки(Объект, Отчет, Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Перем ТекущиеНастройкиОтчета;
	
	Универсальный = (ЭтотОбъект.Метаданные() = Отчет.Метаданные());

	Показатели.Строки.Очистить();
	мМассивБыстрыеОтборы = Неопределено;
	
	Если Универсальный Тогда
				
		ТекущиеНастройки = Отчет.ПостроительОтчета.ПолучитьНастройки();
		Отчет.УстановитьНачальныеНастройки(Универсальный);
		Отчет.ПостроительОтчета.УстановитьНастройки(ТекущиеНастройки);
				
	Иначе
		
		Отчет.УстановитьНачальныеНастройки(ДополнительныеПараметры);
				
	КонецЕсли;
	
	Объект.ДобавитьПанельБыстрыеОтборы(Объект, Форма);
	Объект.УправлениеПанельюБыстрыеОтборы(Объект, Форма);
	
	Объект.УстановитьЗаголовокФормы(Объект, Отчет, Форма);
	
КонецПроцедуры // ПереустановитьНачальныеНастройки()
	
Функция _ПолучитьМакетОформления()
	
	МакетОформления = ПолучитьМакетОформления(?(ВариантОформления = Неопределено, СтандартноеОформление.Интерфейс, ВариантОформления));
	
	ОбластьШапкаТаблицы = МакетОформления.Области.Найти("ШапкаТаблицы");
		
	Если ТипЗнч(ОбластьШапкаТаблицы) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ОбластьШапкаТаблицы.Шрифт = Новый Шрифт(ОбластьШапкаТаблицы.Шрифт,, 8);
		
	КонецЕсли;
	
	ОбластьЗаголовок = МакетОформления.Области.Найти("Заголовок");
	
	Если ТипЗнч(ОбластьЗаголовок) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ОбластьЗаголовок.Шрифт = Новый Шрифт(ОбластьШапкаТаблицы.Шрифт,, 8, Ложь, Ложь, Ложь);
		
	КонецЕсли;
	
	Возврат МакетОформления;
	
КонецФункции // _ПолучитьМакетОформления()

Функция ВыводВозможен()
	
	Результат = Истина;
	
	Если ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 И ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 И ПостроительОтчета.ВыбранныеПоля.Количество() = 0 Тогда
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ВыводВозможен()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ МАКЕТА ОТЧЕТА

Функция ПолучитьМакетПостротеляОтчета()
	
	ПостроительОтчета.ДобавлениеПредставлений = ТипДобавленияПредставлений.Добавлять;
	ПостроительОтчета.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.Расшифровка;
	ПостроительОтчета.ОбрабатыватьПрерываниеПользователя = Истина;
	ПостроительОтчета.ОтображатьСостояние = Истина;
	ПостроительОтчета.РазмещениеИзмеренийВКолонках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчета.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.ОтдельноИТолькоВИтогах;
	ПостроительОтчета.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчета.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчета.ВыводитьОбщиеИтоги = ВыводитьОбщиеИтоги;
	ПостроительОтчета.АвтоДетальныеЗаписи = Истина;
	ПостроительОтчета.ВыводитьДетальныеЗаписи = ВыводитьДетальныеЗаписи;
	ПостроительОтчета.АвтоДетальныеЗаписи = Ложь;
	
	// Сброс предыдущего и получение автоматического макета
	ПостроительОтчета.Макет = Неопределено;
	ПостроительОтчета.МакетОформления = Неопределено;
	
	АвтоматическийМакет = ПостроительОтчета.Макет;
	
	// Результирующий макет
	Макет = Новый ТабличныйДокумент;
	
	Макет.Область(, 1,, 1).ШиринаКолонки = 2;
	
	// Получение структуры измерений строк и полей
	ПолучитьСтруктуруИзмеренийСтроки(АвтоматическийМакет);
	
	// Получение структуры измерений колонок и полей
	ПолучитьСтруктуруИзмеренийКолонки(АвтоматическийМакет);
	
	// Получение структуры деталей
	ПолучитьСтруктуруДетали(АвтоматическийМакет);
	
	Для каждого Область Из АвтоматическийМакет.Области Цикл
		
		Если Область.Имя = "Заголовок" Тогда
			
			ДобавитьОбластьЗаголовок(Макет);
			
		ИначеЕсли Область.Имя = "ШапкаСтрок" Тогда
			
			ДобавитьОбластьШапкаСтрок(Макет);
			
		ИначеЕсли Область.Имя = "ШапкаТаблицы" Тогда
			
			ДобавитьОбластьШапкаТаблицы(Макет);
			
		ИначеЕсли Область.Имя = "ЗаголовокИтогаПоСтроке" Тогда
			
			ДобавитьОбластьЗаголовокИтогаПоСтроке(Макет);
			
		ИначеЕсли Область.Имя = "ЗаголовокИтогаПоКолонке" Тогда
			
			ДобавитьОбластьЗаголовокИтогаПоКолонке(Макет);
			
		ИначеЕсли Область.Имя = "ОбщиеИтоги" Тогда
			
			ДобавитьОбластьОбщиеИтоги(Макет, АвтоматическийМакет);
			
		ИначеЕсли Область.Имя = "Ресурсы" Тогда
			
			ДобавитьОбластьРесурсы(Макет);
			
		ИначеЕсли Область.Имя = "РесурсыИтогПоСтроке" Тогда
			
			ДобавитьОбластьРесурсыИтогПоСтроке(Макет);
			
		ИначеЕсли Область.Имя = "РесурсыИтогПоКолонке" Тогда
			
			ДобавитьОбластьРесурсыИтогПоКолонке(Макет);
			
		ИначеЕсли Область.Имя = "Детали" Тогда
			
			ДобавитьОбластьДетали(Макет, АвтоматическийМакет);
			
		Иначе
			
			ДобавитьОбластьИзмерение(Макет, АвтоматическийМакет, Область.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Макет;
	
КонецФункции // ПолучитьМакетПостротеляОтчета()

Процедура ДобавитьОбластьЗаголовок(Макет)
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	ВысотаЗаголовка = 0;
	
	// Название отчета
	ОбластьЗаголовок = Макет.Область(НомерСтрокиМакета + ВысотаЗаголовка, 2, НомерСтрокиМакета + ВысотаЗаголовка, 2);
	ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьЗаголовок.Текст = мНазваниеОтчета;
	
	ВысотаЗаголовка = ВысотаЗаголовка + 1;
	
	// Период
	Если мРежимВводаПериода = -1 Тогда // указание периода не требуется
		
		ОписаниеПериода = "";
		
	ИначеЕсли мРежимВводаПериода = 0 Тогда // произвольный период
		
		Если ДатаНач = '00010101' И ДатаКон = '00010101' Тогда
			
			ОписаниеПериода = НСтр("ru='Период не установлен'");

		ИначеЕсли ДатаНач = '00010101' ИЛИ ДатаКон = '00010101' Тогда
			
			ОписаниеПериода = Формат(ДатаНач, "ДФ = дд.ММ.гггг; ДП = ...") + " - " + Формат(ДатаКон, "ДФ = дд.ММ.гггг; ДП = ...");

		ИначеЕсли ДатаНач <= ДатаКон Тогда
			
			ОписаниеПериода = ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			
		Иначе
			
			ОписаниеПериода = НСтр("ru='Неправильно задан период!'");

		КонецЕсли;
		
	ИначеЕсли мРежимВводаПериода = 1 Тогда // на дату
		
		Если ДатаКон = '00010101' Тогда

			ОписаниеПериода = НСтр("ru='на '") + Формат(ТекущаяДата(), "ДП = ...");

		Иначе

			ОписаниеПериода = НСтр("ru='на конец дня '") + Формат(ДатаКон, "ДФ = дд.ММ.гггг; ДП = ...");

		КонецЕсли;
		
	ИначеЕсли ДатаНач <> '00010101' Тогда // фиксированный период
		
		_ДатаНач = ДатаНач;
		_ДатаКон = ДатаКон;
		
		УстановитьПериод(_ДатаНач, _ДатаКон, мРежимВводаПериода, 0);
		ОписаниеПериода = ПредставлениеПериода(_ДатаНач, _ДатаКон, "ФП = Истина");
		
	Иначе
		
		ОписаниеПериода = НСтр("ru='Период не установлен'");
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеПериода) Тогда
		
		ОбластьЗаголовок = Макет.Область(НомерСтрокиМакета + ВысотаЗаголовка, 2, НомерСтрокиМакета + ВысотаЗаголовка, 2);
		ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьЗаголовок.Текст = НСтр("ru='Период: '") + ОписаниеПериода;
		
		ВысотаЗаголовка = ВысотаЗаголовка + 1;
	
	КонецЕсли;
	
	// Показатели
	ПредставлениеПоказатели = "";
	
	Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
						
		// Группа показателей
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
							
			КоличествоПоказателейВГруппе = 0;
			ПредставлениеПодчиненныеПоказатели = "";
						
			Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
								
				Если Показатель.Использование > 0 Тогда
								
					ПредставлениеПодчиненныеПоказатели = ПредставлениеПодчиненныеПоказатели + ?(ПустаяСтрока(ПредставлениеПодчиненныеПоказатели), "", ", ") + Показатель.Представление;
					КоличествоПоказателейВГруппе = КоличествоПоказателейВГруппе + 1;
									
				КонецЕсли;
								
			КонецЦикла;
							
			Если КоличествоПоказателейВГруппе > 0 Тогда
				
				ПредставлениеПоказатели = ПредставлениеПоказатели + " " + ТекущийПоказатель.Представление + "(" + ПредставлениеПодчиненныеПоказатели + ");";
				
			КонецЕсли;
							
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда // Показатель
			
			ПредставлениеПоказатели = ПредставлениеПоказатели + " " + ТекущийПоказатель.Представление + ";";
							
		КонецЕсли;
						
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПредставлениеПоказатели) Тогда
		
		ОбластьЗаголовок = Макет.Область(НомерСтрокиМакета + ВысотаЗаголовка, 2, НомерСтрокиМакета + ВысотаЗаголовка, 2);
		ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьЗаголовок.Текст = НСтр("ru='Показатели:'") + ПредставлениеПоказатели;
		
		ВысотаЗаголовка = ВысотаЗаголовка + 1;
		
	КонецЕсли;
	
	// Группировки строк
	ПредставлениеГруппировкиСтрок = "";
	
	Для каждого ИзмерениеСтроки Из ПостроительОтчета.ИзмеренияСтроки Цикл

		ПредставлениеГруппировкиСтрок = ПредставлениеГруппировкиСтрок + " " + ИзмерениеСтроки.Представление + " (" + ИзмерениеСтроки.ТипИзмерения + ");";

	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПредставлениеГруппировкиСтрок) Тогда
		
		ОбластьЗаголовок = Макет.Область(НомерСтрокиМакета + ВысотаЗаголовка, 2, НомерСтрокиМакета + ВысотаЗаголовка, 2);
		ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьЗаголовок.Текст = НСтр("ru='Группировки строк:'") + ПредставлениеГруппировкиСтрок;
		
		ВысотаЗаголовка = ВысотаЗаголовка + 1;
		
	КонецЕсли;
	
	// Группировки колонок
	ПредставлениеГруппировкиКолонок = "";
	
	Для каждого ИзмерениеКолонки Из ПостроительОтчета.ИзмеренияКолонки Цикл

		ПредставлениеГруппировкиКолонок = ПредставлениеГруппировкиКолонок + " " + ИзмерениеКолонки.Представление + " (" + ИзмерениеКолонки.ТипИзмерения + ");";

	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПредставлениеГруппировкиКолонок) Тогда
		
		ОбластьЗаголовок = Макет.Область(НомерСтрокиМакета + ВысотаЗаголовка, 2, НомерСтрокиМакета + ВысотаЗаголовка, 2);
		ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьЗаголовок.Текст = НСтр("ru='Группировки колонок:'") + ПредставлениеГруппировкиКолонок;
		
		ВысотаЗаголовка = ВысотаЗаголовка + 1;
		
	КонецЕсли;
	
	// Отборы
	ПредставлениеОтборы = "";
	
	Для каждого Отбор Из ПостроительОтчета.Отбор Цикл
		
		Если Отбор.Использование И Отбор.Имя <> "Периодичность" Тогда
			
			ПредставлениеОтборы = ПредставлениеОтборы + "
			|" + Отбор.Представление + " ";
			
			Если Отбор.ВидСравнения = ВидСравнения.Интервал Тогда
				
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' > '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеС;
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' И < '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеПо;
				
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
				
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' >= '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеС;
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' И <= '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеПо;
				
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
				
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' >= '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеС;
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' И < '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеПо;
				
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
				
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' > '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеС;
                ПредставлениеОтборы = ПредставлениеОтборы + НСтр("ru=' И <= '");
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ЗначениеПо;
				
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСписке ИЛИ Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ Отбор.ВидСравнения = ВидСравнения.НеВСписке ИЛИ Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
				
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ВидСравнения + " (" + Отбор.Значение + ")";
				
			Иначе
				
				ПредставлениеОтборы = ПредставлениеОтборы + Отбор.ВидСравнения + " " + Отбор.Значение;
				
			КонецЕсли;
			
			ПредставлениеОтборы = ПредставлениеОтборы + ";";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПредставлениеОтборы) Тогда
		
		ОбластьЗаголовок = Макет.Область(НомерСтрокиМакета + ВысотаЗаголовка, 2, НомерСтрокиМакета + ВысотаЗаголовка, 2);
		ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьЗаголовок.Текст = НСтр("ru='Отборы:'") + ПредставлениеОтборы;
		
		ВысотаЗаголовка = ВысотаЗаголовка + 1;
		
	КонецЕсли;
	
	// Дополнительные поля
	ПредставлениеДополнительныеПоля = "";
	
	Для каждого ВыбранноеПоле Из ПостроительОтчета.ВыбранныеПоля Цикл

		Если НЕ ЭтоПолеПоказатель(ВыбранноеПоле.Имя) Тогда
			
			ПредставлениеДополнительныеПоля = ПредставлениеДополнительныеПоля + "
			|" + ВыбранноеПоле.Представление + " ("+ ПолучитьРазмещениеВыбранногоПоля(ВыбранноеПоле.Имя) + ", " + ПолучитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя) + ");";
			
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПредставлениеДополнительныеПоля) Тогда
		
		ОбластьЗаголовок = Макет.Область(НомерСтрокиМакета + ВысотаЗаголовка, 2, НомерСтрокиМакета + ВысотаЗаголовка, 2);
		ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьЗаголовок.Текст = НСтр("ru='Дополнительные поля:'") + ПредставлениеДополнительныеПоля;
		
		ВысотаЗаголовка = ВысотаЗаголовка + 1;
		
	КонецЕсли;
	
	// Сортировка
	ПредставлениеСортировка = "";
	
	Для каждого ПолеПорядка Из ПостроительОтчета.Порядок Цикл

		ПредставлениеСортировка = ПредставлениеСортировка + " " + ПолеПорядка.Представление + " (" + ПолеПорядка.Направление + ");";

	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПредставлениеСортировка) Тогда
		
		ОбластьЗаголовок = Макет.Область(НомерСтрокиМакета + ВысотаЗаголовка, 2, НомерСтрокиМакета + ВысотаЗаголовка, 2);
		ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьЗаголовок.Текст = НСтр("ru='Сортировка:'") + ПредставлениеСортировка;
		
		ВысотаЗаголовка = ВысотаЗаголовка + 1;
		
	КонецЕсли;
	
	ОбластьЗаголовок = Макет.Область(НомерСтрокиМакета,, НомерСтрокиМакета + ВысотаЗаголовка);
	ОбластьЗаголовок.Имя = "Заголовок";
	
КонецПроцедуры // ДобавитьОбластьЗаголовок()

Процедура ДобавитьОбластьШапкаСтрок(Макет)
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	
	ОбластьШапкаСтрок = Макет.Область(НомерСтрокиМакета, 1, НомерСтрокиМакета + ПолучитьВысотуШапки() - 1, ПолучитьШиринуШапкиСтрок() + 1);
	ОбластьШапкаСтрок.Имя = "ШапкаСтрок";
	
	ИндексИзмерения = 0;
	
	Для каждого ИзмерениеСтроки Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		СоставЗаголовкаИзмеренияСтроки = ПолучитьСоставЗаголовкаИзмеренияСтроки(ИзмерениеСтроки.Имя);
		
		Для Индекс = 0 по СоставЗаголовкаИзмеренияСтроки.Количество() - 1 Цикл
		
			ОбластьИзмерениеСтроки = Макет.Область(НомерСтрокиМакета + ИндексИзмерения, 2 + Индекс, НомерСтрокиМакета + ИндексИзмерения, 2 + Индекс);
			ОбластьИзмерениеСтроки.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьИзмерениеСтроки.Текст = СоставЗаголовкаИзмеренияСтроки[Индекс];
			ОбластьИзмерениеСтроки.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьИзмерениеСтроки.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
			ОбластьИзмерениеСтроки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			
		КонецЦикла;
		
		ИндексИзмерения = ИндексИзмерения + 1;
		
	КонецЦикла;
	
	Если ИндексИзмерения < ПолучитьВысотуШапки() Тогда
		
		ОбластьИзмерениеСтроки = Макет.Область(НомерСтрокиМакета + ИндексИзмерения, 2, НомерСтрокиМакета + ПолучитьВысотуШапки() - 1, ПолучитьШиринуШапкиСтрок() + 1);
		ОбластьИзмерениеСтроки.Объединить();
		ОбластьИзмерениеСтроки.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьОбластьШапкаСтрок()

Процедура ДобавитьОбластьШапкаТаблицы(Макет)
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	
	ОбластьШапкаТаблицы = Макет.Область(НомерСтрокиМакета,, НомерСтрокиМакета + ПолучитьВысотуШапки() - 1);
	ОбластьШапкаТаблицы.Имя = "ШапкаТаблицы";
	
	ВременнаяОбласть = Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета + ПолучитьВысотуШапки() - 1, 2 + ПолучитьШиринуШапкиСтрок() + ПолучитьШиринуОбластиИзмерениеКолонки() - 1);
	ВременнаяОбласть.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ВременнаяОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ВременнаяОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ВременнаяОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	КоличествоУровнейПоказателей = ПолучитьКоличествоУровнейПоказателей();
	
	ИндексИзмерения = 0;
	
	Для каждого ИзмерениеСтроки Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		СоставЗаголовкаИзмеренияСтроки = ПолучитьСоставЗаголовкаИзмеренияСтроки(ИзмерениеСтроки.Имя);
		
		Для Индекс = 0 по СоставЗаголовкаИзмеренияСтроки.Количество() - 1 Цикл
		
			ОбластьИзмерениеСтроки = Макет.Область(НомерСтрокиМакета + ИндексИзмерения, 2 + Индекс, НомерСтрокиМакета + ИндексИзмерения, 2 + Индекс);
			ОбластьИзмерениеСтроки.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьИзмерениеСтроки.Текст = СоставЗаголовкаИзмеренияСтроки[Индекс];
			ОбластьИзмерениеСтроки.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьИзмерениеСтроки.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
			ОбластьИзмерениеСтроки.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			
		КонецЦикла;
		
		ИндексИзмерения = ИндексИзмерения + 1;
		
	КонецЦикла;
		
	Если ТипЗнч(мПоляДетали) = Тип("Массив") И мПоляДетали.Количество() > 0 Тогда
		
		ДобавленоПолейДетальнойЗаписи = 0;
		
		Для каждого ПолеДетальнойЗаписи Из мПоляДетали Цикл
			
			Для каждого ВыбранноеПоле Из ПостроительОтчета.ВыбранныеПоля Цикл
					
				Если ВыбранноеПоле.Имя = ПолеДетальнойЗаписи ИЛИ ВыбранноеПоле.Имя + "Представление" = ПолеДетальнойЗаписи Тогда
						
					ОбластьПолеДетальнойЗаписи = Макет.Область(ОбластьШапкаТаблицы.Низ, 2 + ДобавленоПолейДетальнойЗаписи, ОбластьШапкаТаблицы.Низ, 2 + ДобавленоПолейДетальнойЗаписи);
					ОбластьПолеДетальнойЗаписи.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
					ОбластьПолеДетальнойЗаписи.Текст = ПолучитьПредставлениеПоля(ВыбранноеПоле);
					ОбластьПолеДетальнойЗаписи.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ОбластьПолеДетальнойЗаписи.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					ОбластьПолеДетальнойЗаписи.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
									
					ДобавленоПолейДетальнойЗаписи = ДобавленоПолейДетальнойЗаписи + 1;
					
					Прервать;
						
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбластьШапкаТаблицы = Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета + ПолучитьВысотуШапки() - 1, ПолучитьШиринуШапкиСтрок() + 1);
	
	ДобавленоПоказателей = 0;
				
	Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
						
		// Группа показателей
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
							
			КоличествоПоказателейВГруппе = 0;
						
			Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
								
				Если Показатель.Использование > 0 Тогда
								
					ОбластьПоказатель = Макет.Область(ОбластьШапкаТаблицы.Верх + 1, ОбластьШапкаТаблицы.Лево + ПолучитьШиринуШапкиСтрок() + ДобавленоПоказателей, ОбластьШапкаТаблицы.Низ, ОбластьШапкаТаблицы.Лево + ПолучитьШиринуШапкиСтрок() + ДобавленоПоказателей);
					ОбластьПоказатель.Объединить();
					ОбластьПоказатель.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
					ОбластьПоказатель.Текст = Показатель.ПредставлениеВОтчете;
					ОбластьПоказатель.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ОбластьПоказатель.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					ОбластьПоказатель.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ОбластьПоказатель.ШиринаКолонки = ?(Показатель.Ширина = 0, мМинимальнаяШиринаКолонкиПоказатель, Показатель.Ширина);
									
					ДобавленоПоказателей = ДобавленоПоказателей + 1;
					КоличествоПоказателейВГруппе = КоличествоПоказателейВГруппе + 1;
									
				КонецЕсли;
								
			КонецЦикла;
							
			Если КоличествоПоказателейВГруппе > 0 Тогда
								
				ОбластьГруппаПоказателей = Макет.Область(ОбластьШапкаТаблицы.Верх, ОбластьШапкаТаблицы.Лево + ПолучитьШиринуШапкиСтрок() + ДобавленоПоказателей - КоличествоПоказателейВГруппе, ОбластьШапкаТаблицы.Верх, ОбластьШапкаТаблицы.Лево + ПолучитьШиринуШапкиСтрок() + ДобавленоПоказателей - 1);
				ОбластьГруппаПоказателей.Объединить();
				ОбластьГруппаПоказателей.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ОбластьГруппаПоказателей.Текст = ТекущийПоказатель.ПредставлениеВОтчете;
				ОбластьГруппаПоказателей.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ОбластьГруппаПоказателей.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				ОбластьГруппаПоказателей.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
								
			КонецЕсли;
							
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда // Показатель
							
			ОбластьПоказатель = Макет.Область(ОбластьШапкаТаблицы.Верх, ОбластьШапкаТаблицы.Лево + ПолучитьШиринуШапкиСтрок() + ДобавленоПоказателей, ОбластьШапкаТаблицы.Низ, ОбластьШапкаТаблицы.Лево + ПолучитьШиринуШапкиСтрок() + ДобавленоПоказателей);
			ОбластьПоказатель.Объединить();
			ОбластьПоказатель.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьПоказатель.Текст = ТекущийПоказатель.ПредставлениеВОтчете;
			ОбластьПоказатель.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			ОбластьПоказатель.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ОбластьПоказатель.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ОбластьПоказатель.ШиринаКолонки = ?(ТекущийПоказатель.Ширина = 0, мМинимальнаяШиринаКолонкиПоказатель, ТекущийПоказатель.Ширина);
							
			ДобавленоПоказателей = ДобавленоПоказателей + 1;
							
		КонецЕсли;
						
	КонецЦикла;
	
КонецПроцедуры // ДобавитьОбластьШапкаТаблицы()

Процедура ДобавитьОбластьЗаголовокИтогаПоСтроке(Макет)
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	
	ОбластьЗаголовокИтогаПоСтроке = Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета + ПолучитьВысотуШапки() - 1, ПолучитьШиринуОбластиИзмерениеКолонки() + 1);
	ОбластьЗаголовокИтогаПоСтроке.Имя = "ЗаголовокИтогаПоСтроке";
	
	КоличествоУровнейПоказателей = ПолучитьКоличествоУровнейПоказателей();
				
	ОбластьИтог = Макет.Область(ОбластьЗаголовокИтогаПоСтроке.Верх, ОбластьЗаголовокИтогаПоСтроке.Лево, ОбластьЗаголовокИтогаПоСтроке.Низ - КоличествоУровнейПоказателей, ОбластьЗаголовокИтогаПоСтроке.Право);
	ОбластьИтог.Объединить();
	ОбластьИтог.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьИтог.Текст = "Итог";
	ОбластьИтог.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ОбластьИтог.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьИтог.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
	ДобавленоПоказателей = 0;
				
	Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
						
		// Группа показателей
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
							
			КоличествоПоказателейВГруппе = 0;
						
			Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
								
				Если Показатель.Использование > 0 Тогда
								
					ОбластьПоказатель = Макет.Область(ОбластьЗаголовокИтогаПоСтроке.Низ, ОбластьЗаголовокИтогаПоСтроке.Лево + ДобавленоПоказателей, ОбластьЗаголовокИтогаПоСтроке.Низ, ОбластьЗаголовокИтогаПоСтроке.Лево + ДобавленоПоказателей);
					ОбластьПоказатель.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
					ОбластьПоказатель.Текст = Показатель.ПредставлениеВОтчете;
					ОбластьПоказатель.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ОбластьПоказатель.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					ОбластьПоказатель.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ОбластьПоказатель.ШиринаКолонки = ?(Показатель.Ширина = 0, мМинимальнаяШиринаКолонкиПоказатель, Показатель.Ширина);
									
					ДобавленоПоказателей = ДобавленоПоказателей + 1;
					КоличествоПоказателейВГруппе = КоличествоПоказателейВГруппе + 1;
									
				КонецЕсли;
								
			КонецЦикла;
							
			Если КоличествоПоказателейВГруппе > 0 Тогда
								
				ОбластьГруппаПоказателей = Макет.Область(ОбластьЗаголовокИтогаПоСтроке.Низ - 1, ОбластьЗаголовокИтогаПоСтроке.Лево + ДобавленоПоказателей - КоличествоПоказателейВГруппе, ОбластьЗаголовокИтогаПоСтроке.Низ - 1, ОбластьЗаголовокИтогаПоСтроке.Лево + ДобавленоПоказателей - 1);
				ОбластьГруппаПоказателей.Объединить();
				ОбластьГруппаПоказателей.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
				ОбластьГруппаПоказателей.Текст = ТекущийПоказатель.ПредставлениеВОтчете;
				ОбластьГруппаПоказателей.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ОбластьГруппаПоказателей.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				ОбластьГруппаПоказателей.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
								
			КонецЕсли;
							
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда // Показатель
							
			ОбластьПоказатель = Макет.Область(ОбластьЗаголовокИтогаПоСтроке.Низ - КоличествоУровнейПоказателей + 1, ОбластьЗаголовокИтогаПоСтроке.Лево + ДобавленоПоказателей, ОбластьЗаголовокИтогаПоСтроке.Низ, ОбластьЗаголовокИтогаПоСтроке.Лево + ДобавленоПоказателей);
			ОбластьПоказатель.Объединить();
			ОбластьПоказатель.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
			ОбластьПоказатель.Текст = ТекущийПоказатель.ПредставлениеВОтчете;
			ОбластьПоказатель.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			ОбластьПоказатель.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ОбластьПоказатель.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ОбластьПоказатель.ШиринаКолонки = ?(ТекущийПоказатель.Ширина = 0, мМинимальнаяШиринаКолонкиПоказатель, ТекущийПоказатель.Ширина);
							
			ДобавленоПоказателей = ДобавленоПоказателей + 1;
							
		КонецЕсли;
						
	КонецЦикла;
	
КонецПроцедуры // ДобавитьОбластьЗаголовокИтогаПоСтроке()

Процедура ДобавитьОбластьЗаголовокИтогаПоКолонке(Макет)
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	
	ОбластьШапкаСтрок = Макет.Область(НомерСтрокиМакета, 1, НомерСтрокиМакета, ПолучитьШиринуШапкиСтрок() + 1);
	ОбластьШапкаСтрок.Имя = "ЗаголовокИтогаПоКолонке";
	
	ОбластьШапкаСтрок = Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета, ПолучитьШиринуШапкиСтрок() + 1);
	ОбластьШапкаСтрок.Объединить();
	ОбластьШапкаСтрок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьШапкаСтрок.Текст = "Итог";
	ОбластьШапкаСтрок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ОбластьШапкаСтрок.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ОбластьШапкаСтрок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
КонецПроцедуры // ДобавитьОбластьЗаголовокИтогаПоКолонке()

Процедура ДобавитьОбластьОбщиеИтоги(Макет, АвтоматическийМакет)
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	
	Если ТипЗнч(АвтоматическийМакет.Области.Найти("Ресурсы")) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ОбластьРесурсы = Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета, ПолучитьШиринуОбластиИзмерениеКолонки() + 1);
		ОбластьРесурсы.Имя = "ОбщиеИтоги";
	
		ДобавленоРесурсов = 0;
		
		Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
			
			Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
				
				Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
					
					Если Показатель.Использование > 0 Тогда
						
						ОбластьРесурс = Макет.Область(НомерСтрокиМакета, 2 + ДобавленоРесурсов, НомерСтрокиМакета, 2 + ДобавленоРесурсов);
						ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
						ОбластьРесурс.Параметр = Показатель.Имя;
						ОбластьРесурс.Формат = Показатель.ФорматнаяСтрока;
						ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
						ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
						ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
						ДобавленоРесурсов = ДобавленоРесурсов + 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда
				
				ОбластьРесурс = Макет.Область(НомерСтрокиМакета, 2 + ДобавленоРесурсов, НомерСтрокиМакета, 2 + ДобавленоРесурсов);
				ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				ОбластьРесурс.Параметр = ТекущийПоказатель.Имя;
				ОбластьРесурс.Формат = ТекущийПоказатель.ФорматнаяСтрока;
				ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
				ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
				ДобавленоРесурсов = ДобавленоРесурсов + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ОбластьРесурсы = Макет.Область(НомерСтрокиМакета,, НомерСтрокиМакета);
		ОбластьРесурсы.Имя = "ОбщиеИтоги";
		
		ОбластьРесурсы = Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета, ПолучитьШиринуШапкиСтрок() + 1);
		ОбластьРесурсы.Объединить();
		ОбластьРесурсы.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьРесурсы.Текст = "Итог";
		ОбластьРесурсы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		ОбластьРесурсы.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		ОбластьРесурсы.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		
		ДобавленоРесурсов = 0;
		
		Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
			
			Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
				
				Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
					
					Если Показатель.Использование > 0 Тогда
						
						ОбластьРесурс = Макет.Область(НомерСтрокиМакета, ПолучитьШиринуШапкиСтрок() + ДобавленоРесурсов + 2, НомерСтрокиМакета, ПолучитьШиринуШапкиСтрок() + ДобавленоРесурсов + 2);
						ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
						ОбластьРесурс.Параметр = Показатель.Имя;
						ОбластьРесурс.Формат = Показатель.ФорматнаяСтрока;
						ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
						ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
						ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
						ДобавленоРесурсов = ДобавленоРесурсов + 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда
				
				ОбластьРесурс = Макет.Область(НомерСтрокиМакета, ПолучитьШиринуШапкиСтрок() + ДобавленоРесурсов + 2, НомерСтрокиМакета, ПолучитьШиринуШапкиСтрок() + ДобавленоРесурсов + 2);
				ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				ОбластьРесурс.Параметр = ТекущийПоказатель.Имя;
				ОбластьРесурс.Формат = ТекущийПоказатель.ФорматнаяСтрока;
				ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
				ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
				ДобавленоРесурсов = ДобавленоРесурсов + 1;
				
			КонецЕсли;
			
		КонецЦикла;
					
	КонецЕсли;
	
КонецПроцедуры // ДобавитьОбластьОбщиеИтоги()

Процедура ДобавитьОбластьРесурсы(Макет)
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	
	ОбластьРесурсы = Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета, ПолучитьШиринуОбластиИзмерениеКолонки() + 1);
	ОбластьРесурсы.Имя = "Ресурсы";
	
	ДобавленоРесурсов = 0;
	
	Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
		
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
			
			Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
				
				Если Показатель.Использование > 0 Тогда
					
					ОбластьРесурс = Макет.Область(НомерСтрокиМакета, 2 + ДобавленоРесурсов, НомерСтрокиМакета, 2 + ДобавленоРесурсов);
					ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
					ОбластьРесурс.Параметр = Показатель.Имя;
					ОбластьРесурс.ПараметрРасшифровки = "Расшифровка";
					ОбластьРесурс.Формат = Показатель.ФорматнаяСтрока;
					ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
					ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					
					ДобавленоРесурсов = ДобавленоРесурсов + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда
			
			ОбластьРесурс = Макет.Область(НомерСтрокиМакета, 2 + ДобавленоРесурсов, НомерСтрокиМакета, 2 + ДобавленоРесурсов);
			ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			ОбластьРесурс.Параметр = ТекущийПоказатель.Имя;
			ОбластьРесурс.ПараметрРасшифровки = "Расшифровка";
			ОбластьРесурс.Формат = ТекущийПоказатель.ФорматнаяСтрока;
			ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
			ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			
			ДобавленоРесурсов = ДобавленоРесурсов + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьОбластьРесурсы()

Процедура ДобавитьОбластьРесурсыИтогПоСтроке(Макет)
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	
	ОбластьРесурсы = Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета, ПолучитьШиринуОбластиИзмерениеКолонки() + 1);
	ОбластьРесурсы.Имя = "РесурсыИтогПоСтроке";
	
	ДобавленоРесурсов = 0;
	
	Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
		
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
			
			Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
				
				Если Показатель.Использование > 0 Тогда
					
					ОбластьРесурс = Макет.Область(НомерСтрокиМакета, 2 + ДобавленоРесурсов, НомерСтрокиМакета, 2 + ДобавленоРесурсов);
					ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
					ОбластьРесурс.Параметр = Показатель.Имя;
					ОбластьРесурс.Формат = Показатель.ФорматнаяСтрока;
					ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
					ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					
					ДобавленоРесурсов = ДобавленоРесурсов + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда
			
			ОбластьРесурс = Макет.Область(НомерСтрокиМакета, 2 + ДобавленоРесурсов, НомерСтрокиМакета, 2 + ДобавленоРесурсов);
			ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			ОбластьРесурс.Параметр = ТекущийПоказатель.Имя;
			ОбластьРесурс.Формат = ТекущийПоказатель.ФорматнаяСтрока;
			ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
			ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			
			ДобавленоРесурсов = ДобавленоРесурсов + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьОбластьРесурсыИтогПоСтроке()

Процедура ДобавитьОбластьРесурсыИтогПоКолонке(Макет)
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	
	ОбластьРесурсы = Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета, ПолучитьШиринуОбластиИзмерениеКолонки() + 1);
	ОбластьРесурсы.Имя = "РесурсыИтогПоКолонке";
	
	ДобавленоРесурсов = 0;
	
	Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
		
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
			
			Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
				
				Если Показатель.Использование > 0 Тогда
					
					ОбластьРесурс = Макет.Область(НомерСтрокиМакета, 2 + ДобавленоРесурсов, НомерСтрокиМакета, 2 + ДобавленоРесурсов);
					ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
					ОбластьРесурс.Параметр = Показатель.Имя;
					ОбластьРесурс.Формат = Показатель.ФорматнаяСтрока;
					ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
					ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					
					ДобавленоРесурсов = ДобавленоРесурсов + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда
			
			ОбластьРесурс = Макет.Область(НомерСтрокиМакета, 2 + ДобавленоРесурсов, НомерСтрокиМакета, 2 + ДобавленоРесурсов);
			ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			ОбластьРесурс.Параметр = ТекущийПоказатель.Имя;
			ОбластьРесурс.Формат = ТекущийПоказатель.ФорматнаяСтрока;
			ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
			ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			
			ДобавленоРесурсов = ДобавленоРесурсов + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьОбластьРесурсыИтогПоКолонке()

Процедура ДобавитьОбластьИзмерение(Макет, АвтоматическийМакет, ИмяОбласти)
	
	Измерение = Неопределено;
	ЭтоИзмерениеСтроки = Ложь;
	
	Для каждого ИзмерениеСтроки Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		Если ИзмерениеСтроки.Имя = ИмяОбласти Тогда
				
			ЭтоИзмерениеСтроки = Истина;
			Измерение = ИзмерениеСтроки;
			Иерархия = Ложь;
			Прервать;
				
		ИначеЕсли ИзмерениеСтроки.Имя + "Иерархия" = ИмяОбласти Тогда
				
			ЭтоИзмерениеСтроки = Истина;
			Измерение = ИзмерениеСтроки;
			Иерархия = Истина;
			Прервать;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Если Измерение = Неопределено Тогда
		
		Для каждого ИзмерениеКолонки Из ПостроительОтчета.ИзмеренияКолонки Цикл
			
			Если ИзмерениеКолонки.Имя = ИмяОбласти Тогда
				
				Измерение = ИзмерениеКолонки;
				Иерархия = Ложь;
				Прервать;
				
			ИначеЕсли ИзмерениеКолонки.Имя + "Иерархия" = ИмяОбласти Тогда
				
				Измерение = ИзмерениеКолонки;
				Иерархия = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Измерение = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	
	Если ЭтоИзмерениеСтроки Тогда // Измерение строки
		
		Область = АвтоматическийМакет.ПолучитьОбласть(ИмяОбласти);
		
		Для ИндексСтолбца = 1 По Область.ШиринаТаблицы Цикл
				
			ТекущаяОбласть = Область.Область(1, ИндексСтолбца, 1, ИндексСтолбца);
			
			Если ЭтоОбластьДляВыводаПоля(ТекущаяОбласть, Измерение.Имя, Измерение.ПутьКДанным) Тогда
				
				// Назначение имени области результирующего макета
				Если ТипЗнч(АвтоматическийМакет.Области.Найти("Ресурсы")) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
					
					ОбластьРезультирующегоМакета = Макет.Область(НомерСтрокиМакета, 1, НомерСтрокиМакета, ПолучитьШиринуШапкиСтрок() + 1);
					
				Иначе
					
					ОбластьРезультирующегоМакета = Макет.Область(НомерСтрокиМакета,, НомерСтрокиМакета);
					
				КонецЕсли;
				
				ОбластьРезультирующегоМакета.Имя = ИмяОбласти;
					
				ИндексПоля = 2;
				
				Для каждого СоставПолей Из ПолучитьСоставПолейИзмеренияСтроки(Измерение.Имя, ТекущаяОбласть.Параметр, Иерархия) Цикл
						
					ОбластьРезультирующегоМакета = Макет.Область(НомерСтрокиМакета, ИндексПоля, НомерСтрокиМакета, ИндексПоля);
					ОбластьРезультирующегоМакета.ПараметрРасшифровки = "Расшифровка";
					ОбластьРезультирующегоМакета.АвтоОтступ = ?(ИндексПоля = 2, 1, 0);
					ОбластьРезультирующегоМакета.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					
					Если СоставПолей.Свойство("Шаблон") Тогда
						
						ОбластьРезультирующегоМакета.Заполнение = ?(ПустаяСтрока(СоставПолей.Шаблон), ТипЗаполненияОбластиТабличногоДокумента.Текст, ТипЗаполненияОбластиТабличногоДокумента.Шаблон);
						ОбластьРезультирующегоМакета.Текст = СоставПолей.Шаблон;
						
					ИначеЕсли СоставПолей.Свойство("Параметр") Тогда
						
						ОбластьРезультирующегоМакета.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
						ОбластьРезультирующегоМакета.Параметр = СоставПолей.Параметр;
						
						Если СоставПолей.Свойство("Формат") Тогда
							
							ОбластьРезультирующегоМакета.Формат = СоставПолей.Формат;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ИндексПоля = ИндексПоля  + 1;
						
				КонецЦикла;
				
				ДобавленоРесурсов = 0;
				
				Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
					
					Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
						
						Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
							
							Если Показатель.Использование > 0 Тогда
								
								ОбластьРесурс = Макет.Область(НомерСтрокиМакета, ИндексПоля + ДобавленоРесурсов, НомерСтрокиМакета, ИндексПоля + ДобавленоРесурсов);
								ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
								ОбластьРесурс.Параметр = Показатель.Имя;
								ОбластьРесурс.ПараметрРасшифровки = "Расшифровка";
								ОбластьРесурс.Формат = Показатель.ФорматнаяСтрока;
								ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
								ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
								ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
								
								ДобавленоРесурсов = ДобавленоРесурсов + 1;
								
							КонецЕсли;
							
						КонецЦикла;
						
					ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда
						
						ОбластьРесурс = Макет.Область(НомерСтрокиМакета, ИндексПоля + ДобавленоРесурсов, НомерСтрокиМакета, ИндексПоля + ДобавленоРесурсов);
						ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
						ОбластьРесурс.Параметр = ТекущийПоказатель.Имя;
						ОбластьРесурс.ПараметрРасшифровки = "Расшифровка";
						ОбластьРесурс.Формат = ТекущийПоказатель.ФорматнаяСтрока;
						ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
						ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
						ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
						ДобавленоРесурсов = ДобавленоРесурсов + 1;
						
					КонецЕсли;
					
				КонецЦикла;
					
				Прервать;
					
			КонецЕсли;
					
		КонецЦикла;
		
	Иначе // Измерение колонки
		
		ИменованнаяОбластьРезультирующегоМакета = Макет.Область(НомерСтрокиМакета, 2, НомерСтрокиМакета + ПолучитьВысотуШапки() - 1, ПолучитьШиринуОбластиИзмерениеКолонки() + 1);
		ИменованнаяОбластьРезультирующегоМакета.Имя = ИмяОбласти;
		
		ДобавленоПолей = 0;
		
		Для каждого ИзмерениеКолонки Из ПостроительОтчета.ИзмеренияКолонки Цикл
			
			Если ТипЗнч(АвтоматическийМакет.Области.Найти(ИзмерениеКолонки.Имя)) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				
				Область = АвтоматическийМакет.ПолучитьОбласть(ИзмерениеКолонки.Имя);
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			Для ИндексСтроки = 1 По Область.ВысотаТаблицы Цикл
				
				// Получение области измерения колонки автоматического макета
				ТекущаяОбласть = Область.Область(ИндексСтроки, 1, ИндексСтроки, 1);
				
				Если ЭтоОбластьДляВыводаПоля(ТекущаяОбласть, ИзмерениеКолонки.Имя, ИзмерениеКолонки.ПутьКДанным) Тогда
					
					Для каждого СоставПолей Из ПолучитьСоставПолейИзмеренияКолонки(ИзмерениеКолонки.Имя, ТекущаяОбласть.Параметр, Иерархия) Цикл
							
						ОбластьРезультирующегоМакета = Макет.Область(НомерСтрокиМакета + ДобавленоПолей, 2, НомерСтрокиМакета + ДобавленоПолей, ПолучитьШиринуОбластиИзмерениеКолонки() + 1);
						ОбластьРезультирующегоМакета.ПараметрРасшифровки = "Расшифровка";
						ОбластьРезультирующегоМакета.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
						Если СоставПолей.Свойство("Шаблон") Тогда
							
							ОбластьРезультирующегоМакета.Заполнение = ?(ПустаяСтрока(СоставПолей.Шаблон), ТипЗаполненияОбластиТабличногоДокумента.Текст, ТипЗаполненияОбластиТабличногоДокумента.Шаблон);
							ОбластьРезультирующегоМакета.Текст = СоставПолей.Шаблон;
							
						ИначеЕсли СоставПолей.Свойство("Параметр") Тогда
							
							ОбластьРезультирующегоМакета.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
							ОбластьРезультирующегоМакета.Параметр = СоставПолей.Параметр;
							
							Если СоставПолей.Свойство("Формат") Тогда
								
								ОбластьРезультирующегоМакета.Формат = СоставПолей.Формат;
								
							КонецЕсли;
							
						КонецЕсли;
						
						ОбластьРезультирующегоМакета.Объединить();
							
						ДобавленоПолей = ДобавленоПолей  + 1;
							
					КонецЦикла;
							
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИзмерениеКолонки = Измерение Тогда
				
				КоличествоУровнейПоказателей = ПолучитьКоличествоУровнейПоказателей();
				
				Если КоличествоУровнейПоказателей > 0 И ДобавленоПолей < ИменованнаяОбластьРезультирующегоМакета.Низ - ИменованнаяОбластьРезультирующегоМакета.Верх - КоличествоУровнейПоказателей + 1 Тогда
					
					ОбластьИтог = Макет.Область(ИменованнаяОбластьРезультирующегоМакета.Верх + ДобавленоПолей, ИменованнаяОбластьРезультирующегоМакета.Лево, ИменованнаяОбластьРезультирующегоМакета.Низ - КоличествоУровнейПоказателей, ИменованнаяОбластьРезультирующегоМакета.Право);
					ОбластьИтог.Объединить();
					ОбластьИтог.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
					ОбластьИтог.Текст = "Итог";
					ОбластьИтог.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
					ОбластьИтог.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
					ОбластьИтог.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
				КонецЕсли;
				
				ДобавленоПоказателей = 0;
				
				Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
						
					// Группа показателей
					Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
							
						КоличествоПоказателейВГруппе = 0;
						
						Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
								
							Если Показатель.Использование > 0 Тогда
								
								ОбластьПоказатель = Макет.Область(ИменованнаяОбластьРезультирующегоМакета.Низ, ИменованнаяОбластьРезультирующегоМакета.Лево + ДобавленоПоказателей, ИменованнаяОбластьРезультирующегоМакета.Низ, ИменованнаяОбластьРезультирующегоМакета.Лево + ДобавленоПоказателей);
								ОбластьПоказатель.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
								ОбластьПоказатель.Текст = Показатель.ПредставлениеВОтчете;
								ОбластьПоказатель.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
								ОбластьПоказатель.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
								ОбластьПоказатель.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
								ОбластьПоказатель.ШиринаКолонки = ?(Показатель.Ширина = 0, мМинимальнаяШиринаКолонкиПоказатель, Показатель.Ширина);
									
								ДобавленоПоказателей = ДобавленоПоказателей + 1;
								КоличествоПоказателейВГруппе = КоличествоПоказателейВГруппе + 1;
									
							КонецЕсли;
								
						КонецЦикла;
							
						Если КоличествоПоказателейВГруппе > 0 Тогда
								
							ОбластьГруппаПоказателей = Макет.Область(ИменованнаяОбластьРезультирующегоМакета.Низ - 1, ИменованнаяОбластьРезультирующегоМакета.Лево + ДобавленоПоказателей - КоличествоПоказателейВГруппе, ИменованнаяОбластьРезультирующегоМакета.Низ - 1, ИменованнаяОбластьРезультирующегоМакета.Лево + ДобавленоПоказателей - 1);
							ОбластьГруппаПоказателей.Объединить();
							ОбластьГруппаПоказателей.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
							ОбластьГруппаПоказателей.Текст = ТекущийПоказатель.ПредставлениеВОтчете;
							ОбластьГруппаПоказателей.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
							ОбластьГруппаПоказателей.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
							ОбластьГруппаПоказателей.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
							
						КонецЕсли;
							
					ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда // Показатель
							
						ОбластьПоказатель = Макет.Область(ИменованнаяОбластьРезультирующегоМакета.Низ - КоличествоУровнейПоказателей + 1, ИменованнаяОбластьРезультирующегоМакета.Лево + ДобавленоПоказателей, ИменованнаяОбластьРезультирующегоМакета.Низ, ИменованнаяОбластьРезультирующегоМакета.Лево + ДобавленоПоказателей);
						ОбластьПоказатель.Объединить();
						ОбластьПоказатель.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
						ОбластьПоказатель.Текст = ТекущийПоказатель.ПредставлениеВОтчете;
						ОбластьПоказатель.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
						ОбластьПоказатель.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
						ОбластьПоказатель.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						ОбластьПоказатель.ШиринаКолонки = ?(ТекущийПоказатель.Ширина = 0, мМинимальнаяШиринаКолонкиПоказатель, ТекущийПоказатель.Ширина);
							
						ДобавленоПоказателей = ДобавленоПоказателей + 1;
							
					КонецЕсли;
						
				КонецЦикла;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьОбластьИзмерение()

Процедура ДобавитьОбластьДетали(Макет, АвтоматическийМакет)
	
	НомерСтрокиМакета = Макет.ВысотаТаблицы + 1;
	
	Область = АвтоматическийМакет.ПолучитьОбласть("Детали");
	
	// Назначение имени области результирующего макета
	ОбластьРезультирующегоМакета = Макет.Область(НомерСтрокиМакета,, НомерСтрокиМакета);
	ОбластьРезультирующегоМакета.Имя = "Детали";
					
	ИндексПоля = 2;
				
	Для каждого Поле Из мПоляДетали Цикл
		
		Если Поле = "" Тогда
				
			ОбластьРезультирующегоМакета = Макет.Область(НомерСтрокиМакета, ИндексПоля, НомерСтрокиМакета, ИндексПоля);
			ИндексПоля = ИндексПоля  + 1;
			
		Иначе
		
			Для ИндексСтолбца = 1 По Область.ШиринаТаблицы Цикл
						
				ТекущаяОбласть = Область.Область(1, ИндексСтолбца, 1, ИндексСтолбца);
					
				Если ЭтоОбластьДляВыводаПоля(ТекущаяОбласть, Поле, Поле) Тогда
							
					ОбластьРезультирующегоМакета = Макет.Область(НомерСтрокиМакета, ИндексПоля, НомерСтрокиМакета, ИндексПоля);
					ОбластьРезультирующегоМакета.ПараметрРасшифровки = ТекущаяОбласть.ПараметрРасшифровки;
					ОбластьРезультирующегоМакета.АвтоОтступ = ?(ИндексПоля = 2, 1, 0);
					ОбластьРезультирующегоМакета.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
								
					ОбластьРезультирующегоМакета.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
					ОбластьРезультирующегоМакета.Параметр = Поле;
									
					Если мСтруктураФорматаПолей.Свойство(Поле) Тогда
						
						ОбластьРезультирующегоМакета.Формат = мСтруктураФорматаПолей[Поле];
										
					КонецЕсли;
								
					ИндексПоля = ИндексПоля  + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
						
	КонецЦикла;
		
	ДобавленоРесурсов = 0;
				
	Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
					
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
						
			Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
							
				Если Показатель.Использование > 0 Тогда
								
					ОбластьРесурс = Макет.Область(НомерСтрокиМакета, ИндексПоля + ДобавленоРесурсов, НомерСтрокиМакета, ИндексПоля + ДобавленоРесурсов);
					ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
					ОбластьРесурс.Параметр = Показатель.Имя;
					ОбластьРесурс.ПараметрРасшифровки = "Расшифровка";
					ОбластьРесурс.Формат = Показатель.ФорматнаяСтрока;
					ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
					ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
								
					ДобавленоРесурсов = ДобавленоРесурсов + 1;
								
				КонецЕсли;
							
			КонецЦикла;
						
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда
						
			ОбластьРесурс = Макет.Область(НомерСтрокиМакета, ИндексПоля + ДобавленоРесурсов, НомерСтрокиМакета, ИндексПоля + ДобавленоРесурсов);
			ОбластьРесурс.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			ОбластьРесурс.Параметр = ТекущийПоказатель.Имя;
			ОбластьРесурс.ПараметрРасшифровки = "Расшифровка";
			ОбластьРесурс.Формат = ТекущийПоказатель.ФорматнаяСтрока;
			ОбластьРесурс.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ОбластьРесурс.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
			ОбластьРесурс.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
						
			ДобавленоРесурсов = ДобавленоРесурсов + 1;
						
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры // ДобавитьОбластьДетали()

Процедура УстановитьФиксацию(ТабличныйДокумент) Экспорт
	
	ОбластьШапкаТаблицы = ТабличныйДокумент.Области.Найти("ШапкаТаблицы");
	
	Если ТипЗнч(ОбластьШапкаТаблицы) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
		ТабличныйДокумент.ФиксацияСверху = ОбластьШапкаТаблицы.Низ;
			
	Иначе
			
		ОбластьШапкаСтрок = ТабличныйДокумент.Области.Найти("ШапкаСтрок");
		
		Если ТипЗнч(ОбластьШапкаСтрок) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				
			ТабличныйДокумент.ФиксацияСверху = ОбластьШапкаСтрок.Низ;
				
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьФиксацию()

Процедура УстановитьКолонтитул(ТабличныйДокумент)
	
	лУстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, мНазваниеОтчета, Строка(лЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры // УстановитьКолонтитул()

Процедура ОформитьЗаголовок(ТабличныйДокумент)
	
	ОбластьЗаголовок = ТабличныйДокумент.Области.Найти("Заголовок");
	
	Если ТипЗнч(ОбластьЗаголовок) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ОбластьНазваниеОтчета = ТабличныйДокумент.Область(ОбластьЗаголовок.Верх, 2, ОбластьЗаголовок.Верх, 2);
		ОбластьНазваниеОтчета.Шрифт = Новый Шрифт(ОбластьНазваниеОтчета.Шрифт,, 12, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ОформитьЗаголовок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА РАЗМЕРОВ ОБЛАСТЕЙ

Функция ПолучитьШиринуШапкиСтрок()
	
	ПередГруппировкойВОтдельнойКолонке = Ложь;
	ПередГруппировкойВОтдельныхКолонках = 0;
	ПослеГруппировкиВОтдельнойКолонке = Ложь;
	ПослеГруппировкиВОтдельныхКолонках = 0;
	
	Для каждого ИзмерениеСтроки Из мСтруктураИзмеренийСтроки Цикл
		
		ПередГруппировкойВОтдельнойКолонке = ПередГруппировкойВОтдельнойКолонке ИЛИ ИзмерениеСтроки.Значение.ПередГруппировкой.ВОтдельнойКолонке.Количество() > 0;
		ПередГруппировкойВОтдельныхКолонках = Макс(ПередГруппировкойВОтдельныхКолонках, ИзмерениеСтроки.Значение.ПередГруппировкой.ВОтдельныхКолонках.Количество());
		ПослеГруппировкиВОтдельнойКолонке = ПослеГруппировкиВОтдельнойКолонке ИЛИ ИзмерениеСтроки.Значение.ПослеГруппировки.ВОтдельнойКолонке.Количество() > 0;
		ПослеГруппировкиВОтдельныхКолонках = Макс(ПослеГруппировкиВОтдельныхКолонках, ИзмерениеСтроки.Значение.ПослеГруппировки.ВОтдельныхКолонках.Количество());
		
	КонецЦикла;
	
	Возврат Макс(?(ПередГруппировкойВОтдельнойКолонке, 1, 0) + ПередГруппировкойВОтдельныхКолонках + ?(ПослеГруппировкиВОтдельнойКолонке, 1, 0) + ПослеГруппировкиВОтдельныхКолонках + 1, мПоляДетали.Количество());
	
КонецФункции // ПолучитьШиринуШапкиСтрок()

Функция ПолучитьВысотуШапки()
	
	КоличествоСтрокВИзмеренииКолонки = 0;
	КоличествоУровнейПоказателей = ПолучитьКоличествоУровнейПоказателей();
	
	Для каждого ИзмерениеКолонки Из мСтруктураИзмеренийКолонки Цикл
		
		КоличествоСтрокВИзмеренииКолонки = КоличествоСтрокВИзмеренииКолонки	+
			?(ИзмерениеКолонки.Значение.ПередГруппировкой.ВОтдельнойКолонке.Количество() > 0, 1, 0) +
			ИзмерениеКолонки.Значение.ПередГруппировкой.ВОтдельныхКолонках.Количество() +
			?(ИзмерениеКолонки.Значение.ПослеГруппировки.ВОтдельнойКолонке.Количество() > 0, 1, 0) +
			ИзмерениеКолонки.Значение.ПослеГруппировки.ВОтдельныхКолонках.Количество() + 1;
		
	КонецЦикла;
	
	Возврат Макс(мСтруктураИзмеренийСтроки.Количество() + ?(ТипЗнч(мПоляДетали) = Тип("Массив"), ?(мПоляДетали.Количество() > 0, 1, 0), 0), КоличествоСтрокВИзмеренииКолонки + КоличествоУровнейПоказателей);
	
КонецФункции // ПолучитьВысотуШапки()

Функция ПолучитьШиринуОбластиИзмерениеКолонки()
	
	// Ширина области измерения колонки складывается из количества
	// группируемых и негруппируемых показателей
	
	ШиринаОбласти = 0;
	
	Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
		
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
			
			Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
				
				Если Показатель.Использование > 0 Тогда
					
					ШиринаОбласти = ШиринаОбласти + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда
			
			ШиринаОбласти = ШиринаОбласти + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ШиринаОбласти;
	
КонецФункции // ПолучитьШиринуОбластиИзмерениеКолонки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СТРУКТУРЫ И СОСТАВА ОБЛАСТЕЙ

Процедура ПолучитьСтруктуруИзмеренийСтроки(Макет)
	
	мСтруктураИзмеренийСтроки = Новый Структура;
	
	Для каждого ИзмерениеСтроки Из ПостроительОтчета.ИзмеренияСтроки Цикл
			
		СтруктураИзмерения = Новый Структура("ПредставлениеИзмерения, ПередГруппировкой, ВместоГруппировки, ПослеГруппировки",
		ПолучитьПредставлениеПоля(ИзмерениеСтроки),
		Новый Структура("СГруппировками, ВОтдельныхКолонках, ВОтдельнойКолонке", Новый Массив, Новый Массив, Новый Массив),
		Новый Массив,
		Новый Структура("СГруппировками, ВОтдельныхКолонках, ВОтдельнойКолонке", Новый Массив, Новый Массив, Новый Массив));
			
		Если ТипЗнч(Макет.Области.Найти(ИзмерениеСтроки.Имя)) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			ИменованнаяОбластьАвтоматическогоМакетаИзмерение = Макет.ПолучитьОбласть(ИзмерениеСтроки.Имя);
			
		Иначе
			
			// В качестве измерения строки выбрано поле, которое не может быть использовано в качестве измерения.
			мСтруктураИзмеренийСтроки.Вставить(ИзмерениеСтроки.Имя, СтруктураИзмерения);
			Продолжить;
			
		КонецЕсли;
		
		Для каждого ВыбранноеПоле Из ПостроительОтчета.ВыбранныеПоля Цикл
			
			Для ИндексСтолбца = 3 По ИменованнаяОбластьАвтоматическогоМакетаИзмерение.ШиринаТаблицы Цикл
					
				ОбластьИзмеренияСтрокиАвтоматическогоМакета = ИменованнаяОбластьАвтоматическогоМакетаИзмерение.Область(1, ИндексСтолбца, 1, ИндексСтолбца);
							
				ДляИерархии = Ложь;
				
				Если ЭтоПолеСвязаноСИзмерением(ВыбранноеПоле.ПутьКДанным, ИзмерениеСтроки.ПутьКДанным, ДляИерархии) Тогда
						
					Если ЭтоОбластьДляВыводаПоля(ОбластьИзмеренияСтрокиАвтоматическогоМакета, ВыбранноеПоле.Имя, ВыбранноеПоле.ПутьКДанным) Тогда
									
						Положение = ПолучитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя);
						Размещение = ПолучитьРазмещениеВыбранногоПоля(ВыбранноеПоле.Имя);
								
						Положение = СтрЗаменить(Положение, " ", "");
								
						Если Положение = "Вместогруппировки" Тогда
									
							СтруктураИзмерения[Положение].Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле, 1), ДляИерархии));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями Тогда
									
							СтруктураИзмерения[Положение].СГруппировками.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Отдельно Тогда
									
							СтруктураИзмерения[Положение].ВОтдельныхКолонках.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Вместе Тогда
									
							СтруктураИзмерения[Положение].ВОтдельнойКолонке.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						КонецЕсли;
								
					КонецЕсли;
						
				ИначеЕсли ЭтоПолеПоказатель(ВыбранноеПоле.ПутьКДанным) Тогда
						
					Если ЭтоОбластьДляВыводаПоля(ОбластьИзмеренияСтрокиАвтоматическогоМакета, ВыбранноеПоле.Имя, ВыбранноеПоле.ПутьКДанным) Тогда
									
						Положение = ПолучитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя);
						Размещение = ПолучитьРазмещениеВыбранногоПоля(ВыбранноеПоле.Имя);
								
						Положение = СтрЗаменить(Положение, " ", "");
								
						Если Положение = "Вместогруппировки" Тогда
									
							СтруктураИзмерения[Положение].Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле, 1), Истина));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями Тогда
									
							СтруктураИзмерения[Положение].СГруппировками.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), Истина));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Отдельно Тогда
									
							СтруктураИзмерения[Положение].ВОтдельныхКолонках.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), Истина));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Вместе Тогда
									
							СтруктураИзмерения[Положение].ВОтдельнойКолонке.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), Истина));
									
						КонецЕсли;
								
					КонецЕсли;
						
				КонецЕсли;
						
			КонецЦикла;
		
			Если ТипЗнч(Макет.Области.Найти("Ресурсы")) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				
				ИменованнаяОбластьАвтоматическогоМакетаРесурсы = Макет.ПолучитьОбласть("Ресурсы");
				
			Иначе
				
				мСтруктураИзмеренийСтроки.Вставить(ИзмерениеСтроки.Имя, СтруктураИзмерения);
				Продолжить;
				
			КонецЕсли;
			
			Для ИндексСтолбца = 1 По ИменованнаяОбластьАвтоматическогоМакетаРесурсы.ШиринаТаблицы Цикл
					
				ОбластьИзмеренияСтрокиАвтоматическогоМакета = ИменованнаяОбластьАвтоматическогоМакетаРесурсы.Область(1, ИндексСтолбца, 1, ИндексСтолбца);
				
				ДляИерархии = Ложь;
				
				Если ЭтоПолеСвязаноСИзмерением(ВыбранноеПоле.ПутьКДанным, ИзмерениеСтроки.ПутьКДанным, ДляИерархии) Тогда
						
					Если ЭтоОбластьДляВыводаПоля(ОбластьИзмеренияСтрокиАвтоматическогоМакета, ВыбранноеПоле.Имя, ВыбранноеПоле.ПутьКДанным) Тогда
									
						Положение = ПолучитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя);
						Размещение = ПолучитьРазмещениеВыбранногоПоля(ВыбранноеПоле.Имя);
								
						Положение = СтрЗаменить(Положение, " ", "");
								
						Если Положение = "Вместогруппировки" Тогда
									
							СтруктураИзмерения[Положение].Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями Тогда
									
							СтруктураИзмерения[Положение].СГруппировками.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Отдельно Тогда
									
							СтруктураИзмерения[Положение].ВОтдельныхКолонках.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Вместе Тогда
									
							СтруктураИзмерения[Положение].ВОтдельнойКолонке.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						КонецЕсли;
								
					КонецЕсли;
						
				КонецЕсли;
						
			КонецЦикла;
			
		КонецЦикла;
			
		мСтруктураИзмеренийСтроки.Вставить(ИзмерениеСтроки.Имя, СтруктураИзмерения);
	
	КонецЦикла;

КонецПроцедуры // ПолучитьСтруктуруИзмеренийСтроки()

Функция ПолучитьСоставПолейИзмеренияСтроки(ИмяИзмерения, ЗначениеИзмерения, Иерархия)
	
	Результат = Новый Массив;
	
	ПередГруппировкойВОтдельнойКолонке = Ложь;
	ПередГруппировкойВОтдельныхКолонках = 0;
	ПослеГруппировкиВОтдельнойКолонке = Ложь;
	ПослеГруппировкиВОтдельныхКолонках = 0;
	
	Для каждого ИзмерениеСтроки Из мСтруктураИзмеренийСтроки Цикл
		
		ПередГруппировкойВОтдельнойКолонке = ПередГруппировкойВОтдельнойКолонке ИЛИ ИзмерениеСтроки.Значение.ПередГруппировкой.ВОтдельнойКолонке.Количество() > 0;
		ПередГруппировкойВОтдельныхКолонках = Макс(ПередГруппировкойВОтдельныхКолонках, ИзмерениеСтроки.Значение.ПередГруппировкой.ВОтдельныхКолонках.Количество());
		ПослеГруппировкиВОтдельнойКолонке = ПослеГруппировкиВОтдельнойКолонке ИЛИ ИзмерениеСтроки.Значение.ПослеГруппировки.ВОтдельнойКолонке.Количество() > 0;
		ПослеГруппировкиВОтдельныхКолонках = Макс(ПослеГруппировкиВОтдельныхКолонках, ИзмерениеСтроки.Значение.ПослеГруппировки.ВОтдельныхКолонках.Количество());
		
	КонецЦикла;
	
	// Перед группировкой в отдельной колонке
	Если ПередГруппировкойВОтдельнойКолонке Тогда
		
		Шаблон = "";
		
		Если мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.ВОтдельнойКолонке.Количество() = 1 Тогда
			
			Поле = мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.ВОтдельнойКолонке[0];
			
			Если Иерархия И НЕ Поле.ДляИерархии Тогда
				
				Результат.Добавить(Новый Структура("Шаблон", ""));
					
			ИначеЕсли мСтруктураФорматаПолей.Свойство(Поле.ИмяПоля) Тогда
				
				Результат.Добавить(Новый Структура("Параметр, Формат", Поле.ИмяПоля, мСтруктураФорматаПолей[Поле.ИмяПоля]));
				
			Иначе
				
				Результат.Добавить(Новый Структура("Параметр", Поле.ИмяПоля));
					
			КонецЕсли;
			
		Иначе
			
			Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.ВОтдельнойКолонке Цикл
				
				Если Иерархия И НЕ Поле.ДляИерархии Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + Поле.ИмяПоля + "]";
				
			КонецЦикла;
			
			Результат.Добавить(Новый Структура("Шаблон", Шаблон));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Перед группировкой в отдельных колонках
	Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.ВОтдельныхКолонках Цикл
		
		Если Иерархия И НЕ Поле.ДляИерархии Тогда
			
			Результат.Добавить(Новый Структура("Шаблон", ""));
				
		ИначеЕсли мСтруктураФорматаПолей.Свойство(Поле.ИмяПоля) Тогда
			
			Результат.Добавить(Новый Структура("Параметр, Формат", Поле.ИмяПоля, мСтруктураФорматаПолей[Поле.ИмяПоля]));
			
		Иначе
			
			Результат.Добавить(Новый Структура("Параметр", Поле.ИмяПоля));
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Перед группировкой в отдельных колонках (пустые)
	Для Индекс = мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.ВОтдельныхКолонках.Количество() По ПередГруппировкойВОтдельныхКолонках - 1 Цикл
		
		Результат.Добавить(Новый Структура("Шаблон", ""));
		
	КонецЦикла;
	
	// Значение измерения
	Если мСтруктураФорматаПолей.Свойство(ЗначениеИзмерения) Тогда
		
		Результат.Добавить(Новый Структура("Параметр, Формат", ЗначениеИзмерения, мСтруктураФорматаПолей[ЗначениеИзмерения]));
		
	Иначе
	
		Если мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.СГруппировками.Количество() = 0 И мСтруктураИзмеренийСтроки[ИмяИзмерения].ВместоГруппировки.Количество() = 1 И мСтруктураИзмеренийСтроки[ИмяИзмерения].ПослеГруппировки.СГруппировками.Количество() = 0 Тогда
			
			Поле = мСтруктураИзмеренийСтроки[ИмяИзмерения].ВместоГруппировки[0];
			
			Если Иерархия И НЕ Поле.ДляИерархии Тогда
							
				Если мСтруктураФорматаПолей.Свойство(ЗначениеИзмерения) Тогда
						
					Результат.Добавить(Новый Структура("Параметр, Формат", ЗначениеИзмерения, мСтруктураФорматаПолей[ЗначениеИзмерения]));
						
				Иначе
						
					Результат.Добавить(Новый Структура("Параметр", ЗначениеИзмерения));
							
				КонецЕсли;
				
			Иначе
							
				Если мСтруктураФорматаПолей.Свойство(ЗначениеИзмерения) Тогда
						
					Результат.Добавить(Новый Структура("Параметр, Формат", Поле.ИмяПоля, мСтруктураФорматаПолей[Поле.ИмяПоля]));
						
				Иначе
						
					Результат.Добавить(Новый Структура("Параметр", Поле.ИмяПоля));
							
				КонецЕсли;
							
			КонецЕсли;
			
		Иначе
			
			Шаблон = "";
			
			Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.СГруппировками Цикл
				
				Если Иерархия И НЕ Поле.ДляИерархии Тогда
					
					Продолжить;
					
				КонецЕсли;
						
				Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + Поле.ИмяПоля + "]";
						
			КонецЦикла;
				
			Если мСтруктураИзмеренийСтроки[ИмяИзмерения].ВместоГруппировки.Количество() > 0 Тогда
							
				Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ВместоГруппировки Цикл
								
					Если Иерархия И НЕ Поле.ДляИерархии Тогда
							
						Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + ЗначениеИзмерения + "]";
							
					Иначе
							
						Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + Поле.ИмяПоля + "]";
							
					КонецЕсли;
								
				КонецЦикла;
							
			Иначе
							
				Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + ЗначениеИзмерения + "]";
							
			КонецЕсли;
					
			Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПослеГруппировки.СГруппировками Цикл
				
				Если Иерархия И НЕ Поле.ДляИерархии Тогда
					
					Продолжить;
					
				КонецЕсли;
						
				Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + Поле.ИмяПоля + "]";
						
			КонецЦикла;
			
			Результат.Добавить(Новый Структура("Шаблон", Шаблон));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// После группировки в отдельной колонке
	Если ПослеГруппировкиВОтдельнойКолонке Тогда
		
		Шаблон = "";
		
		Если мСтруктураИзмеренийСтроки[ИмяИзмерения].ПослеГруппировки.ВОтдельнойКолонке.Количество() = 1 Тогда
			
			Поле = мСтруктураИзмеренийСтроки[ИмяИзмерения].ПослеГруппировки.ВОтдельнойКолонке[0];
			
			Если Иерархия И НЕ Поле.ДляИерархии Тогда
				
				Результат.Добавить(Новый Структура("Шаблон", ""));
					
			ИначеЕсли мСтруктураФорматаПолей.Свойство(Поле.ИмяПоля) Тогда
				
				Результат.Добавить(Новый Структура("Параметр, Формат", Поле.ИмяПоля, мСтруктураФорматаПолей[Поле.ИмяПоля]));
				
			Иначе
				
				Результат.Добавить(Новый Структура("Параметр", Поле.ИмяПоля));
					
			КонецЕсли;
			
		Иначе
			
			Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПослеГруппировки.ВОтдельнойКолонке Цикл
				
				Если Иерархия И НЕ Поле.ДляИерархии Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + Поле.ИмяПоля + "]";
				
			КонецЦикла;
			
			Результат.Добавить(Новый Структура("Шаблон", Шаблон));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// После группировки в отдельных колонках
	Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПослеГруппировки.ВОтдельныхКолонках Цикл
			
		Если Иерархия И НЕ Поле.ДляИерархии Тогда
			
			Результат.Добавить(Новый Структура("Шаблон", ""));
				
		ИначеЕсли мСтруктураФорматаПолей.Свойство(Поле.ИмяПоля) Тогда
			
			Результат.Добавить(Новый Структура("Параметр, Формат", Поле.ИмяПоля, мСтруктураФорматаПолей[Поле.ИмяПоля]));
			
		Иначе
			
			Результат.Добавить(Новый Структура("Параметр", Поле.ИмяПоля));
				
		КонецЕсли;
		
	КонецЦикла;
	
	// После группировки в отдельных колонках (пустые)
	Для Индекс = мСтруктураИзмеренийСтроки[ИмяИзмерения].ПослеГруппировки.ВОтдельныхКолонках.Количество() По ПослеГруппировкиВОтдельныхКолонках - 1 Цикл
		
		Результат.Добавить(Новый Структура("Шаблон", ""));
		
	КонецЦикла;
	
	Для Индекс = Результат.Количество() По мПоляДетали.Количество() - 1 Цикл
		
		Результат.Добавить(Новый Структура("Шаблон", ""));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСоставПолейИзмеренияСтроки()

Функция ПолучитьСоставЗаголовкаИзмеренияСтроки(ИмяИзмерения)
	
	Результат = Новый Массив;
	
	ПередГруппировкойВОтдельнойКолонке = Ложь;
	ПередГруппировкойВОтдельныхКолонках = 0;
	ПослеГруппировкиВОтдельнойКолонке = Ложь;
	ПослеГруппировкиВОтдельныхКолонках = 0;
	
	Для каждого ИзмерениеСтроки Из мСтруктураИзмеренийСтроки Цикл
		
		ПередГруппировкойВОтдельнойКолонке = ПередГруппировкойВОтдельнойКолонке ИЛИ ИзмерениеСтроки.Значение.ПередГруппировкой.ВОтдельнойКолонке.Количество() > 0;
		ПередГруппировкойВОтдельныхКолонках = Макс(ПередГруппировкойВОтдельныхКолонках, ИзмерениеСтроки.Значение.ПередГруппировкой.ВОтдельныхКолонках.Количество());
		ПослеГруппировкиВОтдельнойКолонке = ПослеГруппировкиВОтдельнойКолонке ИЛИ ИзмерениеСтроки.Значение.ПослеГруппировки.ВОтдельнойКолонке.Количество() > 0;
		ПослеГруппировкиВОтдельныхКолонках = Макс(ПослеГруппировкиВОтдельныхКолонках, ИзмерениеСтроки.Значение.ПослеГруппировки.ВОтдельныхКолонках.Количество());
		
	КонецЦикла;
	
	// Перед группировкой в отдельной колонке
	Если ПередГруппировкойВОтдельнойКолонке Тогда
		
		ПредставлениеЗаголовка = "";
		
		Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.ВОтдельнойКолонке Цикл
			
			ПредставлениеЗаголовка = ПредставлениеЗаголовка + ?(ПустаяСтрока(ПредставлениеЗаголовка), "", ", ") + Поле.ПредставлениеПоля;
			
		КонецЦикла;
		
		Результат.Добавить(ПредставлениеЗаголовка);
		
	КонецЕсли;
	
	// Перед группировкой в отдельных колонках
	Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.ВОтдельныхКолонках Цикл
		
		Результат.Добавить(Поле.ПредставлениеПоля);
		
	КонецЦикла;
	
	// Перед группировкой в отдельных колонках (пустые)
	Для Индекс = мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.ВОтдельныхКолонках.Количество() По ПередГруппировкойВОтдельныхКолонках - 1 Цикл
		
		Результат.Добавить("");
		
	КонецЦикла;
	
	// Значение измерения
	ПредставлениеЗаголовка = "";
	
	Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПередГруппировкой.СГруппировками Цикл
		
		ПредставлениеЗаголовка = ПредставлениеЗаголовка + ?(ПустаяСтрока(ПредставлениеЗаголовка), "", ", ") + Поле.ПредставлениеПоля;
				
	КонецЦикла;
		
	Если мСтруктураИзмеренийСтроки[ИмяИзмерения].ВместоГруппировки.Количество() > 0 Тогда
					
		Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ВместоГруппировки Цикл
						
			ПредставлениеЗаголовка = ПредставлениеЗаголовка + ?(ПустаяСтрока(ПредставлениеЗаголовка), "", ", ") + Поле.ПредставлениеПоля;
						
		КонецЦикла;
					
	Иначе
					
		ПредставлениеЗаголовка = ПредставлениеЗаголовка + ?(ПустаяСтрока(ПредставлениеЗаголовка), "", ", ") + мСтруктураИзмеренийСтроки[ИмяИзмерения].ПредставлениеИзмерения;
					
	КонецЕсли;
			
	Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПослеГруппировки.СГруппировками Цикл
		
		ПредставлениеЗаголовка = ПредставлениеЗаголовка + ?(ПустаяСтрока(ПредставлениеЗаголовка), "", ", ") + Поле.ПредставлениеПоля;
				
	КонецЦикла;
	
	Результат.Добавить(ПредставлениеЗаголовка);
			
	// После группировки в отдельной колонке
	Если ПослеГруппировкиВОтдельнойКолонке Тогда
		
		ПредставлениеЗаголовка = "";
		
		Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПослеГруппировки.ВОтдельнойКолонке Цикл
			
			ПредставлениеЗаголовка = ПредставлениеЗаголовка + ?(ПустаяСтрока(ПредставлениеЗаголовка), "", ", ") + Поле.ПредставлениеПоля;
			
		КонецЦикла;
		
		Результат.Добавить(ПредставлениеЗаголовка);
		
	КонецЕсли;
	
	// После группировки в отдельных колонках
	Для каждого Поле Из мСтруктураИзмеренийСтроки[ИмяИзмерения].ПослеГруппировки.ВОтдельныхКолонках Цикл
			
		Результат.Добавить(Поле.ПредставлениеПоля);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСоставЗаголовкаИзмеренияСтроки()

Процедура ПолучитьСтруктуруИзмеренийКолонки(Макет)
	
	мСтруктураИзмеренийКолонки = Новый Структура;
	
	Для каждого ИзмерениеКолонки Из ПостроительОтчета.ИзмеренияКолонки Цикл
			
		СтруктураИзмерения = Новый Структура("ПредставлениеИзмерения, ПередГруппировкой, ВместоГруппировки, ПослеГруппировки",
		ПолучитьПредставлениеПоля(ИзмерениеКолонки),
		Новый Структура("СГруппировками, ВОтдельныхКолонках, ВОтдельнойКолонке", Новый Массив, Новый Массив, Новый Массив),
		Новый Массив,
		Новый Структура("СГруппировками, ВОтдельныхКолонках, ВОтдельнойКолонке", Новый Массив, Новый Массив, Новый Массив));
		
		Если ТипЗнч(Макет.Области.Найти(ИзмерениеКолонки.Имя)) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			ИменованнаяОбластьАвтоматическогоМакетаИзмерение = Макет.ПолучитьОбласть(ИзмерениеКолонки.Имя);
			
		Иначе
			
			// В качестве измерения колонки выбрано поле, которое не может быть использовано в качестве измерения.
			мСтруктураИзмеренийКолонки.Вставить(ИзмерениеКолонки.Имя, СтруктураИзмерения);
			Продолжить;
			
		КонецЕсли;
		
		Для каждого ВыбранноеПоле Из ПостроительОтчета.ВыбранныеПоля Цикл
			
			Для ИндексСтроки = 2 По ИменованнаяОбластьАвтоматическогоМакетаИзмерение.ВысотаТаблицы Цикл
					
				ОбластьИзмеренияКолонкиАвтоматическогоМакета = ИменованнаяОбластьАвтоматическогоМакетаИзмерение.Область(ИндексСтроки, 1, ИндексСтроки, 1);
							
				Если ЭтоОбластьДляВыводаПоля(ОбластьИзмеренияКолонкиАвтоматическогоМакета, ВыбранноеПоле.Имя, ВыбранноеПоле.ПутьКДанным) Тогда
								
					Положение = ПолучитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя);
					Размещение = ПолучитьРазмещениеВыбранногоПоля(ВыбранноеПоле.Имя);
							
					Положение = СтрЗаменить(Положение, " ", "");
							
					Если Положение = "Вместогруппировки" Тогда
								
						СтруктураИзмерения[Положение].Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияКолонкиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), Истина));
								
					ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями Тогда
								
						СтруктураИзмерения[Положение].СГруппировками.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияКолонкиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), Истина));
								
					ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Отдельно Тогда
								
						СтруктураИзмерения[Положение].ВОтдельныхКолонках.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияКолонкиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), Истина));
								
					ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Вместе Тогда
								
						СтруктураИзмерения[Положение].ВОтдельнойКолонке.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияКолонкиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), Истина));
								
					КонецЕсли;
							
				КонецЕсли;
						
			КонецЦикла;
		
			Если ТипЗнч(Макет.Области.Найти("Ресурсы")) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				
				ИменованнаяОбластьАвтоматическогоМакетаРесурсы = Макет.ПолучитьОбласть("Ресурсы");
				
			Иначе
				
				мСтруктураИзмеренийКолонки.Вставить(ИзмерениеКолонки.Имя, СтруктураИзмерения);
				Продолжить;
				
			КонецЕсли;
			
			Для ИндексСтолбца = 1 По ИменованнаяОбластьАвтоматическогоМакетаРесурсы.ШиринаТаблицы Цикл
					
				ОбластьИзмеренияСтрокиАвтоматическогоМакета = ИменованнаяОбластьАвтоматическогоМакетаРесурсы.Область(1, ИндексСтолбца, 1, ИндексСтолбца);
					
				ДляИерархии = Ложь;
				
				Если ЭтоПолеСвязаноСИзмерением(ВыбранноеПоле.ПутьКДанным, ИзмерениеКолонки.ПутьКДанным, ДляИерархии) Тогда

					Если ЭтоОбластьДляВыводаПоля(ОбластьИзмеренияСтрокиАвтоматическогоМакета, ВыбранноеПоле.Имя, ВыбранноеПоле.ПутьКДанным) Тогда
									
						Положение = ПолучитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя);
						Размещение = ПолучитьРазмещениеВыбранногоПоля(ВыбранноеПоле.Имя);
								
						Положение = СтрЗаменить(Положение, " ", "");
								
						Если Положение = "Вместогруппировки" Тогда
									
							СтруктураИзмерения[Положение].Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями Тогда
									
							СтруктураИзмерения[Положение].СГруппировками.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Отдельно Тогда
									
							СтруктураИзмерения[Положение].ВОтдельныхКолонках.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						ИначеЕсли Размещение = ТипРазмещенияРеквизитовИзмерений.Вместе Тогда
									
							СтруктураИзмерения[Положение].ВОтдельнойКолонке.Добавить(Новый Структура("ИмяПоля, ПредставлениеПоля, ДляИерархии", ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр, ПолучитьПредставлениеПоля(ВыбранноеПоле), ДляИерархии));
									
						КонецЕсли;
								
					КонецЕсли;
						
				КонецЕсли;
						
			КонецЦикла;
			
		КонецЦикла;
			
		мСтруктураИзмеренийКолонки.Вставить(ИзмерениеКолонки.Имя, СтруктураИзмерения);
	
	КонецЦикла;

КонецПроцедуры // ПолучитьСтруктуруИзмеренийКолонки()

Функция ПолучитьСоставПолейИзмеренияКолонки(ИмяИзмерения, ЗначениеИзмерения, Иерархия)
	
	Результат = Новый Массив;
	
	// Перед группировкой в отдельной колонке
	Если мСтруктураИзмеренийКолонки[ИмяИзмерения].ПередГруппировкой.ВОтдельнойКолонке.Количество() > 0 Тогда
		
		Если мСтруктураИзмеренийКолонки[ИмяИзмерения].ПередГруппировкой.ВОтдельнойКолонке.Количество() = 1 Тогда
			
			Поле = мСтруктураИзмеренийКолонки[ИмяИзмерения].ПередГруппировкой.ВОтдельнойКолонке[0];
			
			Если Иерархия И НЕ Поле.ДляИерархии Тогда
				
				Результат.Добавить(Новый Структура("Шаблон", ""));
					
			ИначеЕсли мСтруктураФорматаПолей.Свойство(Поле.ИмяПоля) Тогда
				
				Результат.Добавить(Новый Структура("Параметр, Формат", Поле.ИмяПоля, мСтруктураФорматаПолей[Поле.ИмяПоля]));
				
			Иначе
				
				Результат.Добавить(Новый Структура("Параметр", Поле.ИмяПоля));
					
			КонецЕсли;
			
		Иначе
			
			Шаблон = "";
			
			Для каждого Поле Из мСтруктураИзмеренийКолонки[ИмяИзмерения].ПередГруппировкой.ВОтдельнойКолонке Цикл
				
				Если Иерархия И НЕ Поле.ДляИерархии Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + Поле.ИмяПоля + "]";
				
			КонецЦикла;
			
			Результат.Добавить(Новый Структура("Шаблон", Шаблон));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Перед группировкой в отдельных колонках
	Для каждого Поле Из мСтруктураИзмеренийКолонки[ИмяИзмерения].ПередГруппировкой.ВОтдельныхКолонках Цикл
		
		Если Иерархия И НЕ Поле.ДляИерархии Тогда
			
			Результат.Добавить(Новый Структура("Шаблон", ""));
				
		ИначеЕсли мСтруктураФорматаПолей.Свойство(Поле.ИмяПоля) Тогда
			
			Результат.Добавить(Новый Структура("Параметр, Формат", Поле.ИмяПоля, мСтруктураФорматаПолей[Поле.ИмяПоля]));
			
		Иначе
			
			Результат.Добавить(Новый Структура("Параметр", Поле.ИмяПоля));
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Значение измерения
	Если мСтруктураФорматаПолей.Свойство(ЗначениеИзмерения) Тогда
		
		Результат.Добавить(Новый Структура("Параметр, Формат", ЗначениеИзмерения, мСтруктураФорматаПолей[ЗначениеИзмерения]));
		
	Иначе
		
		Если мСтруктураИзмеренийКолонки[ИмяИзмерения].ПередГруппировкой.СГруппировками.Количество() = 0 И мСтруктураИзмеренийКолонки[ИмяИзмерения].ВместоГруппировки.Количество() = 1 И мСтруктураИзмеренийКолонки[ИмяИзмерения].ПослеГруппировки.СГруппировками.Количество() = 0 Тогда
			
			Поле = мСтруктураИзмеренийКолонки[ИмяИзмерения].ВместоГруппировки[0];
			
			Если Иерархия И НЕ Поле.ДляИерархии Тогда
							
				Если мСтруктураФорматаПолей.Свойство(ЗначениеИзмерения) Тогда
						
					Результат.Добавить(Новый Структура("Параметр, Формат", ЗначениеИзмерения, мСтруктураФорматаПолей[ЗначениеИзмерения]));
						
				Иначе
						
					Результат.Добавить(Новый Структура("Параметр", ЗначениеИзмерения));
							
				КонецЕсли;
				
			Иначе
							
				Если мСтруктураФорматаПолей.Свойство(ЗначениеИзмерения) Тогда
						
					Результат.Добавить(Новый Структура("Параметр, Формат", Поле.ИмяПоля, мСтруктураФорматаПолей[Поле.ИмяПоля]));
						
				Иначе
						
					Результат.Добавить(Новый Структура("Параметр", Поле.ИмяПоля));
							
				КонецЕсли;
							
			КонецЕсли;
			
		Иначе
		
			Шаблон = "";
			
			Для каждого Поле Из мСтруктураИзмеренийКолонки[ИмяИзмерения].ПередГруппировкой.СГруппировками Цикл
				
				Если Иерархия И НЕ Поле.ДляИерархии Тогда
					
					Продолжить;
					
				КонецЕсли;
						
				Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + Поле.ИмяПоля + "]";
						
			КонецЦикла;
					
			Если мСтруктураИзмеренийКолонки[ИмяИзмерения].ВместоГруппировки.Количество() > 0 Тогда
						
				Для каждого Поле Из мСтруктураИзмеренийКолонки[ИмяИзмерения].ВместоГруппировки Цикл
							
					Если Иерархия И НЕ Поле.ДляИерархии Тогда
						
						Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + ЗначениеИзмерения + "]";
						
					Иначе
						
						Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + Поле.ИмяПоля + "]";
						
					КонецЕсли;
					
							
				КонецЦикла;
						
			Иначе
						
				Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + ЗначениеИзмерения + "]";
						
			КонецЕсли;
					
			Для каждого Поле Из мСтруктураИзмеренийКолонки[ИмяИзмерения].ПослеГруппировки.СГруппировками Цикл
				
				Если Иерархия И НЕ Поле.ДляИерархии Тогда
					
					Продолжить;
					
				КонецЕсли;
						
				Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + Поле.ИмяПоля + "]";
						
			КонецЦикла;
			
			Результат.Добавить(Новый Структура("Шаблон", Шаблон));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// После группировки в отдельной колонке
	Если мСтруктураИзмеренийКолонки[ИмяИзмерения].ПослеГруппировки.ВОтдельнойКолонке.Количество() > 0 Тогда
		
		Если мСтруктураИзмеренийКолонки[ИмяИзмерения].ПередГруппировкой.ВОтдельнойКолонке.Количество() = 1 Тогда
			
			Поле = мСтруктураИзмеренийКолонки[ИмяИзмерения].ПередГруппировкой.ВОтдельнойКолонке[0];
			
			Если Иерархия И НЕ Поле.ДляИерархии Тогда
				
				Результат.Добавить(Новый Структура("Шаблон", ""));
					
			ИначеЕсли мСтруктураФорматаПолей.Свойство(Поле.ИмяПоля) Тогда
				
				Результат.Добавить(Новый Структура("Параметр, Формат", Поле.ИмяПоля, мСтруктураФорматаПолей[Поле.ИмяПоля]));
				
			Иначе
				
				Результат.Добавить(Новый Структура("Параметр", Поле.ИмяПоля));
					
			КонецЕсли;
			
		Иначе
		
			Шаблон = "";
			
			Для каждого Поле Из мСтруктураИзмеренийКолонки[ИмяИзмерения].ПослеГруппировки.ВОтдельнойКолонке Цикл
				
				Если Иерархия И НЕ Поле.ДляИерархии Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Шаблон = Шаблон + ?(ПустаяСтрока(Шаблон), "", ", ") + "[" + Поле.ИмяПоля + "]";
				
			КонецЦикла;
			
			Результат.Добавить(Новый Структура("Шаблон", Шаблон));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// После группировки в отдельных колонках
	Для каждого Поле Из мСтруктураИзмеренийКолонки[ИмяИзмерения].ПослеГруппировки.ВОтдельныхКолонках Цикл
			
		Если Иерархия И НЕ Поле.ДляИерархии Тогда
			
			Результат.Добавить(Новый Структура("Шаблон", ""));
				
		ИначеЕсли мСтруктураФорматаПолей.Свойство(Поле.ИмяПоля) Тогда
			
			Результат.Добавить(Новый Структура("Параметр, Формат", Поле.ИмяПоля, мСтруктураФорматаПолей[Поле.ИмяПоля]));
			
		Иначе
			
			Результат.Добавить(Новый Структура("Параметр", Поле.ИмяПоля));
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСоставПолейИзмеренияКолонки()

Процедура ПолучитьСтруктуруДетали(Макет)
	
	мПоляДетали = Новый Массив;
	
	Если НЕ ПостроительОтчета.ВыводитьДетальныеЗаписи Тогда
		
		Возврат;
		
	КонецЕсли;
			
	Если ТипЗнч(Макет.Области.Найти("Детали")) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
		ИменованнаяОбластьАвтоматическогоМакетаДетали = Макет.ПолучитьОбласть("Детали");
			
	Иначе
			
		Возврат;
			
	КонецЕсли;
	
	Для каждого ВыбранноеПоле Из ПостроительОтчета.ВыбранныеПоля Цикл
			
		Для ИндексСтолбца = 1 По ИменованнаяОбластьАвтоматическогоМакетаДетали.ШиринаТаблицы Цикл
					
			ОбластьИзмеренияСтрокиАвтоматическогоМакета = ИменованнаяОбластьАвтоматическогоМакетаДетали.Область(1, ИндексСтолбца, 1, ИндексСтолбца);
							
			Если ЭтоОбластьДляВыводаПоля(ОбластьИзмеренияСтрокиАвтоматическогоМакета, ВыбранноеПоле.Имя, ВыбранноеПоле.ПутьКДанным) И НЕ ЭтоПолеВыводитсяСИзмерением(ВыбранноеПоле.ПутьКДанным) Тогда
								
				мПоляДетали.Добавить(ОбластьИзмеренияСтрокиАвтоматическогоМакета.Параметр);
				Прервать;
							
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПередГруппировкойВОтдельнойКолонке = Ложь;
	ПередГруппировкойВОтдельныхКолонках = 0;
	ПослеГруппировкиВОтдельнойКолонке = Ложь;
	ПослеГруппировкиВОтдельныхКолонках = 0;
	
	Для каждого ИзмерениеСтроки Из мСтруктураИзмеренийСтроки Цикл
		
		ПередГруппировкойВОтдельнойКолонке = ПередГруппировкойВОтдельнойКолонке ИЛИ ИзмерениеСтроки.Значение.ПередГруппировкой.ВОтдельнойКолонке.Количество() > 0;
		ПередГруппировкойВОтдельныхКолонках = Макс(ПередГруппировкойВОтдельныхКолонках, ИзмерениеСтроки.Значение.ПередГруппировкой.ВОтдельныхКолонках.Количество());
		ПослеГруппировкиВОтдельнойКолонке = ПослеГруппировкиВОтдельнойКолонке ИЛИ ИзмерениеСтроки.Значение.ПослеГруппировки.ВОтдельнойКолонке.Количество() > 0;
		ПослеГруппировкиВОтдельныхКолонках = Макс(ПослеГруппировкиВОтдельныхКолонках, ИзмерениеСтроки.Значение.ПослеГруппировки.ВОтдельныхКолонках.Количество());
		
	КонецЦикла;
	
	Для Индекс = мПоляДетали.Количество() По ?(ПередГруппировкойВОтдельнойКолонке, 1, 0) + ПередГруппировкойВОтдельныхКолонках + ?(ПослеГруппировкиВОтдельнойКолонке, 1, 0) + ПослеГруппировкиВОтдельныхКолонках Цикл
			
		мПоляДетали.Добавить("");
			
	КонецЦикла;
		
КонецПроцедуры // ПолучитьСтруктуруДетали()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВСПОМОГАТЕЛЬНЫЕ

Функция ПолучитьКоличествоУровнейПоказателей()
	
	КоличествоУровнейПоказателей = 0;
	
	Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
		
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
			
			КоличествоУровнейПоказателей = 2;
			Прервать;
			
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда
			
			КоличествоУровнейПоказателей = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоУровнейПоказателей;
	
КонецФункции // ПолучитьКоличествоУровнейПоказателей()

Функция ПолучитьПредставлениеПоля(Поле, Вид = Неопределено)
	
	// Вид
	// 0 - Авто (полное наименование группировок и сокращенное наименование выбранных полей)
	// 1 - Полное наименование (полные наименования группировок и выбранных полей)
	// 2 - Сокращенное наименование (сокращенные наименования группировок и выбранных полей)
	
	ВидПредставления = Вид;
	
	Если ВидПредставления = Неопределено Тогда
		
		ВидПредставления = мВидПредставленияПолей;
		
	КонецЕсли;
	
	Представление = Поле.Представление;
	
	Если (ТипЗнч(Поле) = Тип("ИзмерениеПостроителяОтчета") И ВидПредставления = 2) ИЛИ (ТипЗнч(Поле) = Тип("ПолеПостроителяОтчета") И (ВидПредставления = 0 ИЛИ ВидПредставления = 2)) Тогда
		
		ПутьКДаннымПоСтрокам = СтрЗаменить(Поле.ПутьКДанным, ".", Символы.ПС);
		
		Поля = ПостроительОтчета.ДоступныеПоля;
		
		Для Индекс = 1 По СтрЧислоСтрок(ПутьКДаннымПоСтрокам) Цикл
			
			НайденноеПоле = Поля.Найти(СтрПолучитьСтроку(ПутьКДаннымПоСтрокам, Индекс));
			
			Если НайденноеПоле <> Неопределено Тогда
				
				Представление = НайденноеПоле.Представление;
				Поля = НайденноеПоле.Поля;
				
			Иначе
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции // ПолучитьПредставлениеПоля()

Функция ЭтоОбластьДляВыводаПоля(Область, Имя, ПутьКДанным)
	
	Если Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр И Показатели.Строки.Найти(Имя, "Имя", Истина) = Неопределено И Показатели.Строки.Найти(ПутьКДанным, "Имя", Истина) = Неопределено Тогда
		
		Возврат Область.Параметр = СтрЗаменить(ПутьКДанным, ".", "") ИЛИ Область.Параметр = СтрЗаменить(ПутьКДанным, ".", "") + "Представление" ИЛИ Область.Параметр = Имя ИЛИ Область.Параметр = Имя + "Представление";
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ЭтоОбластьДляВыводаПоля()

Функция ЭтоПолеСвязаноСИзмерением(ПолеИмя, ИзмерениеИмя, ДляИерархии)
	
	Если мСоответствиеСвойствКатегорийИИзмерений[ПолеИмя] = Неопределено И
		мСоответствиеКонтактнойИнформацииИИзмерений[ПолеИмя] = Неопределено И
		мСоответствиеДанныхОФизлицеИИзмерений[ПолеИмя] = Неопределено И
		мСоответствиеПолейИИзмерений[ПолеИмя] = Неопределено Тогда
		
		ДляИерархии = Истина;
		Возврат Истина;
		
	ИначеЕсли мСоответствиеСвойствКатегорийИИзмерений[ПолеИмя] <> Неопределено И
		мСоответствиеСвойствКатегорийИИзмерений[ПолеИмя] = СтрЗаменить(ИзмерениеИмя, ".", "") Тогда
		
		ДляИерархии = Ложь;
		Возврат Истина;
		
	ИначеЕсли мСоответствиеКонтактнойИнформацииИИзмерений[ПолеИмя] <> Неопределено И
		мСоответствиеКонтактнойИнформацииИИзмерений[ПолеИмя] = СтрЗаменить(ИзмерениеИмя, ".", "") Тогда
		
		ДляИерархии = Ложь;
		Возврат Истина;
		
	ИначеЕсли мСоответствиеДанныхОФизлицеИИзмерений[ПолеИмя] <> Неопределено И
		мСоответствиеДанныхОФизлицеИИзмерений[ПолеИмя] = СтрЗаменить(ИзмерениеИмя, ".", "") Тогда
		
		ДляИерархии = Ложь;
		Возврат Истина;
		
	ИначеЕсли мСоответствиеПолейИИзмерений[ПолеИмя] <> Неопределено И
		мСоответствиеПолейИИзмерений[ПолеИмя].Свойство(СтрЗаменить(ИзмерениеИмя, ".", "")) Тогда
		
		ДляИерархии = Ложь;
		Возврат Истина;
		
	Иначе
		
		ДляИерархии = Ложь;
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ЭтоПолеСвязаноСИзмерением()

Функция ЭтоПолеВыводитсяСИзмерением(ПолеИмя)
	
	ОбластиПоиска = Новый Массив;
	
	Для каждого СтруктураИзмерения Из мСтруктураИзмеренийСтроки Цикл
		
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ВместоГруппировки);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПередГруппировкой.ВОтдельнойКолонке);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПередГруппировкой.ВОтдельныхКолонках);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПередГруппировкой.СГруппировками);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПослеГруппировки.ВОтдельнойКолонке);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПослеГруппировки.ВОтдельныхКолонках);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПослеГруппировки.СГруппировками);
		
	КонецЦикла;
	
	Для каждого СтруктураИзмерения Из мСтруктураИзмеренийКолонки Цикл
		
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ВместоГруппировки);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПередГруппировкой.ВОтдельнойКолонке);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПередГруппировкой.ВОтдельныхКолонках);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПередГруппировкой.СГруппировками);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПослеГруппировки.ВОтдельнойКолонке);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПослеГруппировки.ВОтдельныхКолонках);
		ОбластиПоиска.Добавить(СтруктураИзмерения.Значение.ПослеГруппировки.СГруппировками);
		
	КонецЦикла;
	
	Для каждого ОбластьПоиска Из ОбластиПоиска Цикл
		
		Для каждого Поле Из ОбластьПоиска Цикл
			
			Если Поле.ИмяПоля = ПолеИмя Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЭтоПолеВыводитсяСИзмерением()

Функция ЭтоПолеПоказатель(ПолеИмя) Экспорт
	
	Возврат (Показатели.Строки.Найти(ПолеИмя, "Имя", Истина) <> Неопределено);
	
КонецФункции // ЭтоПолеПоказатель()

Функция ДобавитьПоказателиВВыбранныеПоляИУсловноеОформление()
	
	МассивВыбранныеПоляПоказатели = Новый Массив;
	МассивУсловноеОформлениеПоказатели = Новый Массив;
	
	Для каждого ТекущийПоказатель Из Показатели.Строки Цикл
			
		// Группа показателей
		Если ТекущийПоказатель.Строки.Количество() > 0 И ТекущийПоказатель.Использование > 0 Тогда
				
			КоличествоПоказателейВГруппе = 0;
			
			Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
					
				Если Показатель.Использование > 0 Тогда
					
					МассивВыбранныеПоляПоказатели.Добавить(ПостроительОтчета.ВыбранныеПоля.Добавить(Показатель.Имя));
						
				КонецЕсли;
					
			КонецЦикла;
				
		ИначеЕсли ТекущийПоказатель.Использование > 0 Тогда // Показатель
			
			МассивВыбранныеПоляПоказатели.Добавить(ПостроительОтчета.ВыбранныеПоля.Добавить(ТекущийПоказатель.Имя));
				
		КонецЕсли;
			
	КонецЦикла;
	
	Если ОтрицательноеКрасным И МассивВыбранныеПоляПоказатели.Количество() > 0 Тогда
		
		ЭлементОформления = ПостроительОтчета.УсловноеОформление.Добавить("ОтрицательноеКрасным", "Отрицательное красным");
		
		Для каждого ВыбранноеПоле Из МассивВыбранныеПоляПоказатели Цикл
				
			ЭлементОформления.Область.Добавить(ВыбранноеПоле.ПутьКДанным, ВыбранноеПоле.Представление, ТипОбластиОформления.Поле);
				
		КонецЦикла;
		
		ЭлементОформления.Оформление.ВыделятьОтрицательные.Значение = Истина;
		ЭлементОформления.Оформление.ВыделятьОтрицательные.Использование = Истина;
		
		ЭлементОформления.Использование = Истина;
		
		МассивУсловноеОформлениеПоказатели.Добавить(ЭлементОформления);
		
	КонецЕсли;

	Возврат Новый Структура("ВыбранныеПоля, УсловноеОформление", МассивВыбранныеПоляПоказатели, МассивУсловноеОформлениеПоказатели);
	
КонецФункции // ДобавитьПоказателиВВыбранныеПоляИУсловноеОформление()

Процедура УдалитьПоказателиИзВыбранныхПолейИУсловногоОформления(ВыбранныеПоляУсловноеОформлениеПоказатели)
	
	Для каждого ВыбранноеПоле Из ВыбранныеПоляУсловноеОформлениеПоказатели.ВыбранныеПоля Цикл
		
		ПостроительОтчета.ВыбранныеПоля.Удалить(ВыбранноеПоле);
		
	КонецЦикла;
	
	Для каждого ЭлементОформления Из ВыбранныеПоляУсловноеОформлениеПоказатели.УсловноеОформление Цикл
		
		ПостроительОтчета.УсловноеОформление.Удалить(ЭлементОформления);
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьПоказателиИзВыбранныхПолейИУсловногоОформления()

Функция ДобавитьОтборПериодичность()
	
	МассивОтборПериодичность = Новый Массив;
	
	ДоступныеПоля = ПостроительОтчета.Отбор.ПолучитьДоступныеПоля();
	
	Если ДоступныеПоля.Найти("Периодичность") = Неопределено Тогда
		
		Возврат МассивОтборПериодичность;
		
	КонецЕсли;
	
	Периодичность = 0;
	
	Для каждого Период Из мСтруктураПериодов Цикл
		
		Периодичность = ?(НайтиПоле(Период.Ключ,,,,, Ложь, Истина), ?(Периодичность = 0, Период.Значение, Мин(Период.Значение, Периодичность)), Периодичность);
		
	КонецЦикла;
	
	ПолеОтборПериодичность = ПостроительОтчета.Отбор.Добавить("Периодичность");
	ПолеОтборПериодичность.Значение = Периодичность;
	ПолеОтборПериодичность.Использование = Истина;
	
	МассивОтборПериодичность.Добавить(ПолеОтборПериодичность);
	
	Возврат МассивОтборПериодичность;
	
КонецФункции // ДобавитьОтборПериодичность()

Процедура УдалитьОтборПериодичность(ОтборыПериодичность)
	
	Для каждого ЭлементОтборПериодичность Из ОтборыПериодичность Цикл
		
		ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ЭлементОтборПериодичность));
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьОтборПериодичность()

Функция ДобавитьСвязанныеПоля()
	
	МассивСвязанныеПоля = Новый Массив;
	
	Для каждого СвязьПолей Из мСоответствиеСвязьПолей Цикл
		
		Если НайтиПоле(СвязьПолей.Ключ, Истина, Истина, Ложь, Истина, Ложь) И НЕ НайтиПоле(СвязьПолей.Значение, Истина, Истина, Ложь, Истина, Ложь) Тогда
			
			МассивСвязанныеПоля.Добавить(ПостроительОтчета.ВыбранныеПоля.Добавить(СвязьПолей.Значение));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ВыбранноеПоле Из ПостроительОтчета.ВыбранныеПоля Цикл
		
		РодительскоеПолеПутьКДанным = Лев(ВыбранноеПоле.ПутьКДанным, Найти(ВыбранноеПоле.ПутьКДанным, ".") - 1);
		
		Если НЕ ПустаяСтрока(РодительскоеПолеПутьКДанным) И НЕ НайтиПоле(РодительскоеПолеПутьКДанным, Истина, Истина, Ложь, Истина, Ложь, Истина) Тогда
			
			МассивСвязанныеПоля.Добавить(ПостроительОтчета.ВыбранныеПоля.Добавить(РодительскоеПолеПутьКДанным));
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат МассивСвязанныеПоля;
	
КонецФункции // ДобавитьСвязанныеПоля()

Процедура УдалитьСвязанныеПоля(СвязанныеПоля)
	
	Для каждого СвязанноеПоле Из СвязанныеПоля Цикл
		
		ПостроительОтчета.ВыбранныеПоля.Удалить(СвязанноеПоле);
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьСвязанныеПоля()

Функция ДобавитьПоляПорядка()
	
	МассивПоляПорядка = Новый Массив;
	
	Для каждого ИзмерениеСтроки Из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		Если НЕ НайтиПоле(ИзмерениеСтроки.ПутьКДанным, Ложь, Ложь, Ложь, Ложь, Истина) Тогда
			
			Попытка
				
				ПостроительОтчета.Порядок.Добавить(ИзмерениеСтроки.ПутьКДанным);
				
			Исключение
				
				Продолжить;
				
			КонецПопытки;
			
			МассивПоляПорядка.Вставить(0, ПостроительОтчета.Порядок.Количество() - 1);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Для каждого ИзмерениеКолонки Из ПостроительОтчета.ИзмеренияКолонки Цикл
		
		Если НЕ НайтиПоле(ИзмерениеКолонки.ПутьКДанным, Ложь, Ложь, Ложь, Ложь, Истина) Тогда
			
			Попытка
				
				ПостроительОтчета.Порядок.Добавить(ИзмерениеКолонки.ПутьКДанным);
				
			Исключение
				
				Продолжить;
				
			КонецПопытки;
			
			МассивПоляПорядка.Вставить(0, ПостроительОтчета.Порядок.Количество() - 1);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Для каждого ВыбранноеПоле Из ПостроительОтчета.ВыбранныеПоля Цикл
		
		Если НЕ НайтиПоле(ВыбранноеПоле.ПутьКДанным, Ложь, Ложь, Ложь, Ложь, Истина) Тогда
			
			Если мСтруктураПериодов.Свойство(СтрЗаменить(ВыбранноеПоле.ПутьКДанным, ".", "")) Тогда
				
				Попытка
					
					ПостроительОтчета.Порядок.Добавить(ВыбранноеПоле.ПутьКДанным);
					
				Исключение
					
					Продолжить;
					
				КонецПопытки;
				
				МассивПоляПорядка.Вставить(0, ПостроительОтчета.Порядок.Количество() - 1);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПоляПорядка;
	
КонецФункции // ДобавитьПоляПорядка()

Процедура УдалитьПоляПорядка(ПоляПорядка)
	
	Для каждого ПолеПорядка Из ПоляПорядка Цикл
		
		Если ПолеПорядка <= ПостроительОтчета.Порядок.Количество() - 1 Тогда
			
			ПостроительОтчета.Порядок.Удалить(ПолеПорядка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьПоляПорядка()

Процедура ДобавитьАвтоупорядочивание()
	
	Если ПустаяСтрока(ПостроительОтчета.Текст) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ДобавитьАвтоупорядочивание = Ложь;
	ТекстЗапроса = ПостроительОтчета.Текст;
	Автоупорядочивание = Найти(ТекстЗапроса, "АВТОУПОРЯДОЧИВАНИЕ") > 0;
	ДобавитьАвтоупорядочивание = ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 ИЛИ ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 ИЛИ ПостроительОтчета.Порядок.Количество() > 0;
	
	Если Автоупорядочивание И НЕ ДобавитьАвтоупорядочивание Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АВТОУПОРЯДОЧИВАНИЕ", "");
		
		ТекущиеНастройки = ПостроительОтчета.ПолучитьНастройки();
		ПостроительОтчета.Текст = ТекстЗапроса;
		ПостроительОтчета.УстановитьНастройки(ТекущиеНастройки);
		
		УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, ПостроительОтчета);
		УстановитьТипыЗначенийСвойствДляОтбора();
		
	ИначеЕсли НЕ Автоупорядочивание И ДобавитьАвтоупорядочивание Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		ТекущиеНастройки = ПостроительОтчета.ПолучитьНастройки();
		ПостроительОтчета.Текст = ТекстЗапроса;
		ПостроительОтчета.УстановитьНастройки(ТекущиеНастройки);
		
		УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, ПостроительОтчета);
		УстановитьТипыЗначенийСвойствДляОтбора();
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьАвтоупорядочивание()

Функция НайтиПоле(ПутьКДанным, ИзмеренияСтроки = Истина, ИзмеренияКолонки = Истина, Отбор = Истина, ВыбранныеПоля = Истина, Порядок = Истина, ТочноеСоответствие = Ложь)
	
	Если ИзмеренияСтроки Тогда
		
		Для каждого ИзмерениеСтроки Из ПостроительОтчета.ИзмеренияСтроки Цикл
			
			Если ИзмерениеСтроки.ПутьКДанным = ПутьКДанным ИЛИ НЕ ТочноеСоответствие И Лев(ИзмерениеСтроки.ПутьКДанным, Найти(ИзмерениеСтроки.ПутьКДанным, ".")) = ПутьКДанным + "." Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИзмеренияКолонки Тогда
		
		Для каждого ИзмерениеКолонки Из ПостроительОтчета.ИзмеренияКолонки Цикл
		
			Если ИзмерениеКолонки.ПутьКДанным = ПутьКДанным ИЛИ НЕ ТочноеСоответствие И Лев(ИзмерениеКолонки.ПутьКДанным, Найти(ИзмерениеКолонки.ПутьКДанным, ".")) = ПутьКДанным + "." Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отбор Тогда
		
		Для каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
			
			Если ЭлементОтбора.Использование И (ЭлементОтбора.ПутьКДанным = ПутьКДанным ИЛИ НЕ ТочноеСоответствие И Лев(ЭлементОтбора.ПутьКДанным, Найти(ЭлементОтбора.ПутьКДанным, ".")) = ПутьКДанным + ".") Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыбранныеПоля Тогда
		
		Для каждого ВыбранноеПоле Из ПостроительОтчета.ВыбранныеПоля Цикл
			
			Если ВыбранноеПоле.ПутьКДанным = ПутьКДанным ИЛИ НЕ ТочноеСоответствие И Лев(ВыбранноеПоле.ПутьКДанным, Найти(ВыбранноеПоле.ПутьКДанным, ".")) = ПутьКДанным + "." Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Порядок Тогда
		
		Для каждого ЭлементПорядка Из ПостроительОтчета.Порядок Цикл
			
			Если ЭлементПорядка.ПутьКДанным = ПутьКДанным ИЛИ НЕ ТочноеСоответствие И Лев(ЭлементПорядка.ПутьКДанным, Найти(ЭлементПорядка.ПутьКДанным, ".")) = ПутьКДанным + "." Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НайтиПоле()

Процедура УстановитьНачальныеНастройкиПоМетаданнымРегистра(ИмяРегистра)
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	
	Если МетаданныеРегистра = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Обороты = МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты;
	
	ОписаниеПолейВыборки = "";
	ОписаниеПолейВыборкиПостроитель = "";
	ОписаниеИсточниковЗапроса = "";
	ОписаниеОтборовРезультатаЗапроса = "";
	ОписаниеУпорядочиванияРезультатаЗапроса = "";
	ОписаниеИтогиЗапроса = "";
	ОписаниеИтогиЗапросаПостроитель = "";
	
	Если ИспользоватьСвойстваИКатегории Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НазначенияСвойствКатегорийОбъектов.Ссылка,
		|	НазначенияСвойствКатегорийОбъектов.Предопределенный,
		|	НазначенияСвойствКатегорийОбъектов.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов КАК НазначенияСвойствКатегорийОбъектов
		|ГДЕ
		|	НазначенияСвойствКатегорийОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И НазначенияСвойствКатегорийОбъектов.ЭтоГруппа = ЛОЖЬ");
		
		РезультатЗапросаНазначенияСвойствКатегорийОбъектов = Запрос.Выполнить();
		ВыборкаНазначенияСвойствКатегорийОбъектов = РезультатЗапросаНазначенияСвойствКатегорийОбъектов.Выбрать();
			
	КонецЕсли;
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Типы = Измерение.Тип.Типы();
		ДобавитьПредставление = (Типы.Количество() > 1 или мПростыеТипы.Найти(Типы[0]) = Неопределено);
		
		ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
		|	ИсточникДанных." + Измерение.Имя + " КАК " + Измерение.Имя + ?(ДобавитьПредставление, ",
		|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных." + Измерение.Имя + ") КАК " + Измерение.Имя + "Представление", "");
		
		ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".* КАК " + Измерение.Имя;
		
		ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
		|	" + Измерение.Имя + ".*";
		
		
		мСтруктураПредставлениеПолей.Вставить(Измерение.Имя, Измерение.Представление());
		
		Если ИспользоватьСвойстваИКатегории Тогда
			
			МассивНазначений = Новый Массив;
			
			Для каждого ТипИзмерения Из Измерение.Тип.Типы() Цикл
				
				ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
				
				Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
					
					Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
						Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
							ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
							ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
							ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
					ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
						МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
						
						МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для каждого Назначение Из МассивНазначений Цикл
				
				ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + Измерение.Имя, Измерение.Имя, Измерение.Представление(), Назначение, мНетКатегорий);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Свойства и категории поля "Регистратор"
	Если ИспользоватьСвойстваИКатегории Тогда
		
		МассивНазначений = Новый Массив;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 0
		|	ИсточникДанных.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления." + ИмяРегистра + " КАК ИсточникДанных");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Для каждого ТипРегистратора Из РезультатЗапроса.Колонки.Регистратор.ТипЗначения.Типы() Цикл
			
			ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
			
			Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
				
				Если ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипРегистратора) И
					МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
					
					МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого Назначение Из МассивНазначений Цикл
			
			ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных.Регистратор", "Регистратор", "Документ движения (регистратор)", Назначение, мНетКатегорий);
			
		КонецЦикла;
			
	КонецЕсли;
	
	Если мМассивПоляГруппировка <> Неопределено Тогда
		
		Для каждого ПолеГруппировка Из мМассивПоляГруппировка Цикл
			
			ПолеВыборки = СтрЗаменить(?(ПолеГруппировка.Выражение = Неопределено, "%ПолеВыборки%", ПолеГруппировка.Выражение), "%ПолеВыборки%", "ИсточникДанных." + ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным);
			ИсточникЗапроса = СтрЗаменить(?(ПолеГруппировка.Выражение = Неопределено, "%ПолеВыборки%", ПолеГруппировка.Выражение), "%ПолеВыборки%", ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным);
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	" + ПолеВыборки + " КАК " + ПолеГруппировка.Имя + ",
			|	ПРЕДСТАВЛЕНИЕ(" + ПолеВыборки + ") КАК " + ПолеГруппировка.Имя + "Представление";
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			ОписаниеИсточниковЗапроса = ОписаниеИсточниковЗапроса + ?(ОписаниеИсточниковЗапроса = "", "", ",") + "
			|	(" + ИсточникЗапроса + ").* КАК " + ПолеГруппировка.Имя;
				
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			ОписаниеИтогиЗапросаПостроитель = ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
			|	" + ПолеГруппировка.Имя + ".*";
			
			мСтруктураПредставлениеПолей.Вставить(ПолеГруппировка.Имя, ПолеГруппировка.Представление);
			
			ДокументыДобавлен = Ложь;
			
			Если ИспользоватьСвойстваИКатегории И ПолеГруппировка.Тип <> Неопределено И ТипЗнч(ПолеГруппировка.Тип) = Тип("ОписаниеТипов") Тогда
				
				МассивНазначений = Новый Массив;

				Для каждого ТипГруппировки Из ПолеГруппировка.Тип.Типы() Цикл
					
					ВыборкаНазначенияСвойствКатегорийОбъектов.Сбросить();
					
					Пока ВыборкаНазначенияСвойствКатегорийОбъектов.Следующий() Цикл
						
						Если мИспользованиеСвойствХарактеристикиНоменклатуры Тогда
							Если ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ТипИзмерения = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") ИЛИ
								ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры И
								ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
								МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
								
								МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
								
							КонецЕсли;
						ИначеЕсли ВыборкаНазначенияСвойствКатегорийОбъектов.ТипЗначения.СодержитТип(ТипИзмерения) И
							МассивНазначений.Найти(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка) = Неопределено Тогда
							
							МассивНазначений.Добавить(ВыборкаНазначенияСвойствКатегорийОбъектов.Ссылка);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Для каждого Назначение Из МассивНазначений Цикл
					
					ДобавитьСвойстваИКатегорииДляПоля("ИсточникДанных." + ПолеГруппировка.Родитель + "." + ПолеГруппировка.ПутьКДанным, ПолеГруппировка.Имя, ПолеГруппировка.Представление, Назначение, мНетКатегорий);
					
				КонецЦикла;
				
			КонецЕсли;
			
			УстановитьСвязьПолей(ПолеГруппировка.Имя, ПолеГруппировка.Родитель);
			
		КонецЦикла;
		
		мМассивПоляГруппировка = Неопределено;
		
	КонецЕсли;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если Обороты Тогда
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот";
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + Ресурс.Имя + "Оборот";
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот";
			
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	СУММА(" + Ресурс.Имя + "Оборот)";
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Ресурс.Имя + "Оборот";
			
			ДобавитьПоказатель(Ресурс.Имя + "Оборот", Ресурс.Представление(), Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"));
			
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "Оборот", Ресурс.Представление() + " (оборот)");
			
		Иначе
			
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "НачальныйОстаток КАК " + Ресурс.Имя + "НачальныйОстаток,
			|	ИсточникДанных." + Ресурс.Имя + "Приход КАК " + Ресурс.Имя + "Приход,
			|	ИсточникДанных." + Ресурс.Имя + "Расход КАК " + Ресурс.Имя + "Расход,
			|	ИсточникДанных." + Ресурс.Имя + "КонечныйОстаток КАК " + Ресурс.Имя + "КонечныйОстаток,
			|	ИсточникДанных." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот";
			
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + Ресурс.Имя + "НачальныйОстаток,
			|	" + Ресурс.Имя + "Приход,
			|	" + Ресурс.Имя + "Расход,
			|	" + Ресурс.Имя + "КонечныйОстаток,
			|	" + Ресурс.Имя + "Оборот";
			
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	ИсточникДанных." + Ресурс.Имя + "НачальныйОстаток КАК " + Ресурс.Имя + "НачальныйОстаток,
			|	ИсточникДанных." + Ресурс.Имя + "Приход КАК " + Ресурс.Имя + "Приход,
			|	ИсточникДанных." + Ресурс.Имя + "Расход КАК " + Ресурс.Имя + "Расход,
			|	ИсточникДанных." + Ресурс.Имя + "КонечныйОстаток КАК " + Ресурс.Имя + "КонечныйОстаток,
			|	ИсточникДанных." + Ресурс.Имя + "Оборот КАК " + Ресурс.Имя + "Оборот";
			
			ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
			|	СУММА(" + Ресурс.Имя + "НачальныйОстаток),
			|	СУММА(" + Ресурс.Имя + "Приход),
			|	СУММА(" + Ресурс.Имя + "Расход),
			|	СУММА(" + Ресурс.Имя + "КонечныйОстаток),
			|	СУММА(" + Ресурс.Имя + "Оборот)";
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + Ресурс.Имя + "НачальныйОстаток,
			|	" + Ресурс.Имя + "Приход,
			|	" + Ресурс.Имя + "Расход,
			|	" + Ресурс.Имя + "КонечныйОстаток,
			|	" + Ресурс.Имя + "Оборот";
			
			ДобавитьПоказатель(Ресурс.Имя + "НачальныйОстаток", "Нач. остаток", Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), Ресурс.Имя, Ресурс.Представление());
			ДобавитьПоказатель(Ресурс.Имя + "Приход", "Приход", Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), Ресурс.Имя, Ресурс.Представление());
			ДобавитьПоказатель(Ресурс.Имя + "Расход", "Расход", Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), Ресурс.Имя, Ресурс.Представление());
			ДобавитьПоказатель(Ресурс.Имя + "КонечныйОстаток", "Кон. остаток", Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), Ресурс.Имя, Ресурс.Представление());
			ДобавитьПоказатель(Ресурс.Имя + "Оборот", "Оборот", Истина, "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0"), Ресурс.Имя, Ресурс.Представление());
			
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "НачальныйОстаток", Ресурс.Представление() + " (нач. ост.)");
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "Приход", Ресурс.Представление() + " (приход)");
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "Расход", Ресурс.Представление() + " (расход)");
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "КонечныйОстаток", Ресурс.Представление() + " (кон. ост.)");
			мСтруктураПредставлениеПолей.Вставить(Ресурс.Имя + "Оборот", Ресурс.Представление() + " (оборот)");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если мМассивПоляРесурс <> Неопределено Тогда
		
		Для каждого ПолеРесурс Из мМассивПоляРесурс Цикл
	
			ОписаниеПолейВыборки = ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
			|	" + ПолеРесурс.ПутьКДанным + " КАК " + ПолеРесурс.Имя;
					
			ОписаниеПолейВыборкиПостроитель = ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
			|	" + ПолеРесурс.Имя;
					
			ОписаниеОтборовРезультатаЗапроса = ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеРесурс.ПутьКДанным + " КАК " + ПолеРесурс.Имя;
			
			ОписаниеУпорядочиванияРезультатаЗапроса = ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
			|	" + ПолеРесурс.Имя;
			
			Если ПолеРесурс.Итог = Неопределено Тогда
						
				ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
				|	СУММА(" + ПолеРесурс.Имя + ")";
				
			Иначе
				
				ОписаниеИтогиЗапроса = ОписаниеИтогиЗапроса + ?(ОписаниеИтогиЗапроса = "", "", ",") + "
				|	" + ПолеРесурс.Итог + " КАК " + ПолеРесурс.Имя;
						
			КонецЕсли;
					
			мСтруктураПредставлениеПолей.Вставить(ПолеРесурс.Имя, ПолеРесурс.Представление);
			
		КонецЦикла;
		
		мМассивПоляРесурс = Неопределено;
		
	КонецЕсли;
	
	ОписаниеПолейВыборки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ОписаниеПолейВыборки + ?(ОписаниеПолейВыборки = "", "", ",") + "
	|	ИсточникДанных.Регистратор КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Регистратор) КАК РегистраторПредставление,
	|	ИсточникДанных.Период КАК Период,
	|	НачалоПериода(ИсточникДанных.Период, День) КАК ПериодДень,
	|	НачалоПериода(ИсточникДанных.Период, Неделя) КАК ПериодНеделя,
	|	НачалоПериода(ИсточникДанных.Период, Декада) КАК ПериодДекада,
	|	НачалоПериода(ИсточникДанных.Период, Месяц) КАК ПериодМесяц,
	|	НачалоПериода(ИсточникДанных.Период, Квартал) КАК ПериодКвартал,
	|	НачалоПериода(ИсточникДанных.Период, Полугодие) КАК ПериодПолугодие,
	|	НачалоПериода(ИсточникДанных.Период, Год) КАК ПериодГод
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ";

	ОписаниеПолейВыборкиПостроитель = "
	|{ВЫБРАТЬ" + ОписаниеПолейВыборкиПостроитель + ?(ОписаниеПолейВыборкиПостроитель = "", "", ",") + "
	|	Регистратор.* КАК Регистратор,
	|	Период КАК Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	Если Обороты Тогда
		
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Обороты(&ДатаНач, &ДатаКон, Регистратор {&Периодичность}, {" +
		ОписаниеИсточниковЗапроса + "}) КАК ИсточникДанных
		|//СОЕДИНЕНИЯ";
		
	Иначе
		
		ОписаниеИсточниковЗапроса =	"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор {&Периодичность},, {" +
		ОписаниеИсточниковЗапроса + "}) КАК ИсточникДанных
		|//СОЕДИНЕНИЯ";
		
	КонецЕсли;
	
	ОписаниеОтборовРезультатаЗапроса = "
	|{ГДЕ" + ОписаниеОтборовРезультатаЗапроса + ?(ОписаниеОтборовРезультатаЗапроса = "", "", ",") + "
	|	ИсточникДанных.Регистратор.* КАК Регистратор,
	|	ИсточникДанных.Период КАК Период,
	|	НачалоПериода(ИсточникДанных.Период, День) КАК ПериодДень,
	|	НачалоПериода(ИсточникДанных.Период, Неделя) КАК ПериодНеделя,
	|	НачалоПериода(ИсточникДанных.Период, Декада) КАК ПериодДекада,
	|	НачалоПериода(ИсточникДанных.Период, Месяц) КАК ПериодМесяц,
	|	НачалоПериода(ИсточникДанных.Период, Квартал) КАК ПериодКвартал,
	|	НачалоПериода(ИсточникДанных.Период, Полугодие) КАК ПериодПолугодие,
	|	НачалоПериода(ИсточникДанных.Период, Год) КАК ПериодГод
	|	//УСЛОВИЯ_СВОЙСТВА
	|	//УСЛОВИЯ_КАТЕГОРИИ
	|}";
	
	ОписаниеУпорядочиванияРезультатаЗапроса = "
	|{УПОРЯДОЧИТЬ ПО" + ОписаниеУпорядочиванияРезультатаЗапроса + ?(ОписаниеУпорядочиванияРезультатаЗапроса = "", "", ",") + "
	|	Регистратор.*,
	|	Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ОписаниеИтогиЗапроса = "
	|ИТОГИ" + ОписаниеИтогиЗапроса + "
	|	//ИТОГИ_СВОЙСТВА
	|	//ИТОГИ_КАТЕГОРИИ
	|ПО
	|	ОБЩИЕ";
	
	ОписаниеИтогиЗапросаПостроитель = "
	|{ИТОГИ ПО" + ОписаниеИтогиЗапросаПостроитель + ?(ОписаниеИтогиЗапросаПостроитель = "", "", ",") + "
	|	Регистратор.*,
	|	Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";
	
	ТекстЗапроса =
		ОписаниеПолейВыборки +
		ОписаниеПолейВыборкиПостроитель +
		ОписаниеИсточниковЗапроса +
		ОписаниеОтборовРезультатаЗапроса +
		ОписаниеУпорядочиванияРезультатаЗапроса +
		ОписаниеИтогиЗапроса +
		ОписаниеИтогиЗапросаПостроитель;
		
	ТекстПоля = "";
	
	Если ИспользоватьСвойстваИКатегории Тогда
		
		ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	ОтборПериодичность = ПостроительОтчета.Отбор.Найти("Периодичность");
	
	Если ОтборПериодичность <> Неопределено Тогда
		
		ПостроительОтчета.Отбор.Удалить(ПостроительОтчета.Отбор.Индекс(ОтборПериодичность));
		
	КонецЕсли;
										  
	УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, ПостроительОтчета);
	УстановитьТипыЗначенийСвойствДляОтбора();
		
КонецПроцедуры // УстановитьНачальныеНастройкиПоМетаданнымРегистра()

Процедура ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса, ТаблицаПолей = Неопределено, СтруктураПредставлениеПолей = Неопределено, СоответствиеНазначений = Неопределено, Параметры = Неопределено, СоответствиеСвойствКатегорийИИзмерений = Неопределено, СтруктураЗаменять = Неопределено) Экспорт

	// Добавляемые фрагменты запроса
	Если ТипЗнч(СтруктураЗаменять) = Тип("Структура") И СтруктураЗаменять.Количество() > 0 Тогда
		
		ЗаменятьПоляСвойства = ?(СтруктураЗаменять.Свойство("ПоляСвойства"), СтруктураЗаменять.ПоляСвойства, "//ПОЛЯ_СВОЙСТВА");
		ЗаменятьПоляКатегории = ?(СтруктураЗаменять.Свойство("ПоляКатегории"), СтруктураЗаменять.ПоляКатегории, "//ПОЛЯ_КАТЕГОРИИ");
		ЗаменятьПсевдонимыСвойства = ?(СтруктураЗаменять.Свойство("ПсевдонимыСвойства"), СтруктураЗаменять.ПсевдонимыСвойства, "//ПСЕВДОНИМЫ_СВОЙСТВА");
		ЗаменятьПсевдонимыКатегории = ?(СтруктураЗаменять.Свойство("ПсевдонимыКатегории"), СтруктураЗаменять.ПсевдонимыКатегории, "//ПСЕВДОНИМЫ_КАТЕГОРИИ");
		ЗаменятьСоединения = ?(СтруктураЗаменять.Свойство("Соединения"), СтруктураЗаменять.Соединения, "//СОЕДИНЕНИЯ");
		ЗаменятьУсловияСвойства = ?(СтруктураЗаменять.Свойство("УсловияСвойства"), СтруктураЗаменять.УсловияСвойства, "//УСЛОВИЯ_СВОЙСТВА");
		ЗаменятьУсловияКатегории = ?(СтруктураЗаменять.Свойство("УсловияКатегории"), СтруктураЗаменять.УсловияКатегории, "//УСЛОВИЯ_КАТЕГОРИИ");
		ЗаменятьИтогиСвойства = ?(СтруктураЗаменять.Свойство("ИтогиСвойства"), СтруктураЗаменять.ИтогиСвойства, "//ИТОГИ_СВОЙСТВА");
		ЗаменятьИтогиКатегории = ?(СтруктураЗаменять.Свойство("ИтогиКатегории"), СтруктураЗаменять.ИтогиКатегории, "//ИТОГИ_КАТЕГОРИИ");
		
	Иначе
		
		ЗаменятьПоляСвойства = "//ПОЛЯ_СВОЙСТВА";
		ЗаменятьПоляКатегории = "//ПОЛЯ_КАТЕГОРИИ";
		ЗаменятьПсевдонимыСвойства = "//ПСЕВДОНИМЫ_СВОЙСТВА";
		ЗаменятьПсевдонимыКатегории = "//ПСЕВДОНИМЫ_КАТЕГОРИИ";
		ЗаменятьСоединения = "//СОЕДИНЕНИЯ";
		ЗаменятьУсловияСвойства = "//УСЛОВИЯ_СВОЙСТВА";
		ЗаменятьУсловияКатегории = "//УСЛОВИЯ_КАТЕГОРИИ";
		ЗаменятьИтогиСвойства = "//ИТОГИ_СВОЙСТВА";
		ЗаменятьИтогиКатегории = "//ИТОГИ_КАТЕГОРИИ";
		
	КонецЕсли;
	
	Если ТаблицаПолей = Неопределено Тогда
		
		ТаблицаПолей = мТаблицаПолей;
		
	КонецЕсли;
	
	Если СтруктураПредставлениеПолей = Неопределено Тогда
		
		СтруктураПредставлениеПолей = мСтруктураПредставлениеПолей;
		
	КонецЕсли;
	
	Если СоответствиеНазначений = Неопределено Тогда
		
		СоответствиеНазначений = мСоответствиеНазначений;
		
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда
		
		Параметры = ПостроительОтчета.Параметры;
		
	КонецЕсли;
	
	Если СоответствиеСвойствКатегорийИИзмерений = Неопределено Тогда
		
		СоответствиеСвойствКатегорийИИзмерений = мСоответствиеСвойствКатегорийИИзмерений;
		
	КонецЕсли;
	
	ТекстПоляСвойства = "";
	ТекстПоляКатегории = "";
	ТекстПсевдонимыСвойства = "";
	ТекстПсевдонимыКатегории = "";
	ТекстСоединения = "";
	ТекстУсловияСвойства = "";
	ТекстУсловияКатегории = "";
	ТекстИтогиСвойства = "";
	ТекстИтогиКатегории = "";
	
	Если ТипЗнч(СоответствиеСвойствКатегорийИИзмерений) <> Тип("Соответствие") Тогда
		
		СоответствиеСвойствКатегорийИИзмерений = Новый Соответствие;
		
	КонецЕсли;
	
	СоответствиеДобавленныеКатегории = Новый Соответствие;

	Для каждого Поле Из ТаблицаПолей Цикл
		
		СвойстваОбъектов = ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать(, Новый Структура("НазначениеСвойства", Поле.Назначение));
		
		Пока СвойстваОбъектов.Следующий() Цикл

			Если СвойстваОбъектов.ЭтоГруппа ИЛИ СвойстваОбъектов.ПометкаУдаления Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если СвойстваОбъектов.ТипЗначения.Типы().Количество() > 1 Тогда
				
				ПараметрПустоеЗначениеСвойства = "Неопределено";
				
			Иначе
				
				ТипСвойства = СвойстваОбъектов.ТипЗначения.Типы()[0];
				ВозможныеТипыСвойств = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.Типы();
				
				ИндексТекущегоВозможногоТипа = 1;
				
				Для каждого ВозможныйТипСвойства Из ВозможныеТипыСвойств Цикл
					
					Если ВозможныйТипСвойства = ТипСвойства Тогда
						
						ПараметрПустоеЗначениеСвойства = "&ПараметрПустоеЗначениеСвойства" + Формат(ИндексТекущегоВозможногоТипа, "ЧГ=0");
						
					КонецЕсли;
					
					ИндексТекущегоВозможногоТипа = ИндексТекущегоВозможногоТипа + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ИмяСвойства = Поле.ИмяИзмерения + "Свойство" + СтрЗаменить(Строка(СвойстваОбъектов.Ссылка.УникальныйИдентификатор()), "-", "");

			// Поля
			ТекстПоляСвойства = ТекстПоляСвойства + ",
			|	" + ИмяСвойства + ".Значение КАК " + ИмяСвойства + "Значение,
			|	ПРЕДСТАВЛЕНИЕ(" + ИмяСвойства + ".Значение) КАК " + ИмяСвойства + "ЗначениеПредставление";
			
			// Псевдонимы
			ТекстПсевдонимыСвойства = ТекстПсевдонимыСвойства + ",
			|	" + ИмяСвойства + "Значение";
			
			// Соединения
			ТекстСоединения = ТекстСоединения + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК " + ИмяСвойства + "
			|	ПО " + ИмяСвойства + ".Объект = " + Поле.ПутьКДанным + "
			|	И " + ИмяСвойства + ".Свойство = &Параметр" + ИмяСвойства + "}";
			
			// Условия
			ТекстУсловияСвойства = ТекстУсловияСвойства + ",
			|	ЕСТЬNULL (" + ИмяСвойства + ".Значение, " + ПараметрПустоеЗначениеСвойства + ") КАК " + ИмяСвойства + "Значение";
				
			// Итоги
			ТекстИтогиСвойства = ТекстИтогиСвойства + ",
			|	МАКСИМУМ(" + ИмяСвойства + "Значение)";

			Параметры.Вставить("Параметр" + ИмяСвойства, СвойстваОбъектов.Ссылка);
			СтруктураПредставлениеПолей.Вставить(ИмяСвойства + "Значение", СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")");
			СоответствиеНазначений.Вставить(СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")", СвойстваОбъектов.Ссылка);
			СоответствиеСвойствКатегорийИИзмерений.Вставить(ИмяСвойства + "Значение", Поле.ИмяИзмерения);
			УстановитьСвязьПолей(ИмяСвойства + "Значение", Поле.ИмяИзмерения);
				
		КонецЦикла;
		
		Если Поле.НетКатегорий = Истина Тогда
					
			Продолжить;
					
		КонецЕсли;
		
		КатегорииОбъектов = Справочники.КатегорииОбъектов.Выбрать(,, Новый Структура("НазначениеКатегории", Поле.Назначение));
		
		Пока КатегорииОбъектов.Следующий() Цикл

			Если КатегорииОбъектов.ЭтоГруппа ИЛИ КатегорииОбъектов.ПометкаУдаления Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ИмяКатегории = Поле.ИмяИзмерения + "Категория" + СтрЗаменить(Строка(КатегорииОбъектов.Ссылка.УникальныйИдентификатор()), "-", "");
				
			// Поля
			ТекстПоляКатегории = ТекстПоляКатегории + ",
			|	ВЫБОР КОГДА " + ИмяКатегории + ".Категория ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ КАК " + ИмяКатегории + "Категория";
				
			// Псевдонимы
			ТекстПсевдонимыКатегории = ТекстПсевдонимыКатегории + ",
			|	" + ИмяКатегории + "Категория";
			
			// Соединения
			ТекстСоединения = ТекстСоединения + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК " + ИмяКатегории + "
			|	ПО " + ИмяКатегории + ".Объект = " + Поле.ПутьКДанным + "
			|	И " + ИмяКатегории + ".Категория = &Параметр" + ИмяКатегории + "}";
				
			// Условия
			ТекстУсловияКатегории = ТекстУсловияКатегории + ",
			|	ВЫБОР КОГДА " + ИмяКатегории + ".Категория ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ КАК " + ИмяКатегории + "Категория";
			
			// Итоги
			ТекстИтогиКатегории = ТекстИтогиКатегории + ",
			|	МАКСИМУМ(" + ИмяКатегории + "Категория)";

			Параметры.Вставить("Параметр" + ИмяКатегории, КатегорииОбъектов.Ссылка);
			СтруктураПредставлениеПолей.Вставить(ИмяКатегории + "Категория", КатегорииОбъектов.Наименование + " (категория " + Поле.Представление + ")");
			СоответствиеСвойствКатегорийИИзмерений.Вставить(ИмяКатегории + "Категория", Поле.ИмяИзмерения);
			УстановитьСвязьПолей(ИмяКатегории + "Категория", Поле.ИмяИзмерения);

			мСтруктураФорматаПолей.Вставить(ИмяКатегории + "Категория", "БЛ=; БИ=" + КатегорииОбъектов.Наименование + "");
				
		КонецЦикла;
		
		Если СоответствиеДобавленныеКатегории.Получить(Поле.ПутьКДанным) = Неопределено Тогда
			
			// Поля
			ТекстПоляКатегории = ТекстПоляКатегории + ",
			|	" + Поле.ИмяИзмерения + "Категории.Категория КАК " + Поле.ИмяИзмерения + "КатегорииКатегория";
			
			// Псевдонимы
			ТекстПсевдонимыКатегории = ТекстПсевдонимыКатегории + ",
			|	" + Поле.ИмяИзмерения + "КатегорииКатегория";
			
			// Соединения
			ТекстСоединения = ТекстСоединения + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК " + Поле.ИмяИзмерения + "Категории
			|	ПО " + Поле.ИмяИзмерения + "Категории.Объект = " + Поле.ПутьКДанным + "}";
			
			// Условия
			ТекстУсловияКатегории = ТекстУсловияКатегории + ",
			|	" + Поле.ИмяИзмерения + "Категории.Категория КАК " + Поле.ИмяИзмерения + "КатегорииКатегория";
			
			СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "КатегорииКатегория", Поле.Представление + " (категории)");
			СоответствиеНазначений.Вставить(Поле.Представление + " (категории)", Поле.Назначение);
			УстановитьСвязьПолей(Поле.ИмяИзмерения + "КатегорииКатегория", Поле.ИмяИзмерения);
			
			СоответствиеДобавленныеКатегории.Вставить(Поле.ПутьКДанным, Поле.ПутьКДанным);
			
		КонецЕсли;

	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПоляСвойства, ТекстПоляСвойства);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПоляКатегории, ТекстПоляКатегории);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПсевдонимыСвойства, ТекстПсевдонимыСвойства);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПсевдонимыКатегории, ТекстПсевдонимыКатегории);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьСоединения, ТекстСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьУсловияСвойства, ТекстУсловияСвойства);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьУсловияКатегории, ТекстУсловияКатегории);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьИтогиСвойства, ТекстИтогиСвойства);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьИтогиКатегории, ТекстИтогиКатегории);
	
	мТаблицаПолей.Очистить();

КонецПроцедуры // ДобавитьВТекстЗапросаСвойстваИКатегории()

Процедура ДобавитьВТекстЗапросаКонтактнуюИнформацию(ТекстЗапроса, ТаблицаПолей = Неопределено, СтруктураПредставлениеПолей = Неопределено, Параметры = Неопределено, СоответствиеКонтактнойИнформацииИИзмерений = Неопределено, СтруктураЗаменять = Неопределено) Экспорт

	// Добавляемые фрагменты запроса
	Если ТипЗнч(СтруктураЗаменять) = Тип("Структура") И СтруктураЗаменять.Количество() > 0 Тогда
		
		ЗаменятьПоляКонтактнаяИнформация = ?(СтруктураЗаменять.Свойство("ПоляКонтактнаяИнформация"), СтруктураЗаменять.ПоляКонтактнаяИнформация, "//ПОЛЯ_КОНТАКТНАЯИНФОРМАЦИЯ");
		ЗаменятьПсевдонимыКонтактнаяИнформация = ?(СтруктураЗаменять.Свойство("ПсевдонимыКонтактнаяИнформация"), СтруктураЗаменять.ПсевдонимыКонтактнаяИнформация, "//ПСЕВДОНИМЫ_КОНТАКТНАЯИНФОРМАЦИЯ");
		ЗаменятьСоединения = ?(СтруктураЗаменять.Свойство("Соединения"), СтруктураЗаменять.Соединения, "//КОНТАКТНАЯИНФОРМАЦИЯ_СОЕДИНЕНИЯ");
		ЗаменятьУсловияКонтактнаяИнформация = ?(СтруктураЗаменять.Свойство("УсловияКонтактнаяИнформация"), СтруктураЗаменять.УсловияКонтактнаяИнформация, "//УСЛОВИЯ_КОНТАКТНАЯИНФОРМАЦИЯ");
		ЗаменятьИтогиКонтактнаяИнформация = ?(СтруктураЗаменять.Свойство("ИтогиКонтактнаяИнформация"), СтруктураЗаменять.ИтогиКонтактнаяИнформация, "//ИТОГИ_КОНТАКТНАЯИНФОРМАЦИЯ");
		
	Иначе
		
		ЗаменятьПоляКонтактнаяИнформация = "//ПОЛЯ_КОНТАКТНАЯИНФОРМАЦИЯ";
		ЗаменятьПсевдонимыКонтактнаяИнформация = "//ПСЕВДОНИМЫ_КОНТАКТНАЯИНФОРМАЦИЯ";
		ЗаменятьСоединения = "//КОНТАКТНАЯИНФОРМАЦИЯ_СОЕДИНЕНИЯ";
		ЗаменятьУсловияКонтактнаяИнформация = "//УСЛОВИЯ_КОНТАКТНАЯИНФОРМАЦИЯ";
		ЗаменятьИтогиКонтактнаяИнформация = "//ИТОГИ_КОНТАКТНАЯИНФОРМАЦИЯ";
		
	КонецЕсли;
	
	Если ТаблицаПолей = Неопределено Тогда
		
		ТаблицаПолей = мТаблицаПолейКонтактнаяИнформация;
		
	КонецЕсли;
	
	Если СтруктураПредставлениеПолей = Неопределено Тогда
		
		СтруктураПредставлениеПолей = мСтруктураПредставлениеПолей;
		
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда
		
		Параметры = ПостроительОтчета.Параметры;
		
	КонецЕсли;
	
	Если СоответствиеКонтактнойИнформацииИИзмерений = Неопределено Тогда
		
		СоответствиеКонтактнойИнформацииИИзмерений = мСоответствиеКонтактнойИнформацииИИзмерений;
		
	КонецЕсли;
	
	ТекстПоляКонтактнаяИнформация = "";
	ТекстПсевдонимыКонтактнаяИнформация = "";
	ТекстСоединения = "";
	ТекстУсловияКонтактнаяИнформация = "";
	ТекстИтогиКонтактнаяИнформация = "";
	
	Если ТипЗнч(СоответствиеКонтактнойИнформацииИИзмерений) <> Тип("Соответствие") Тогда
		
		СоответствиеКонтактнойИнформацииИИзмерений = Новый Соответствие;
		
	КонецЕсли;

	Для каждого Поле Из ТаблицаПолей Цикл
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	""#ПроизвольныйВид#"" КАК Объект,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.Вид КАК Наименование
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	(НЕ КонтактнаяИнформация.Вид В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВидыКонтактнойИнформации.Ссылка
		|				ИЗ
		|					Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации))
		|	И КонтактнаяИнформация.Объект ССЫЛКА " + Поле.ТипОбъекта + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВидыКонтактнойИнформации.Тип,
		|	ВидыКонтактнойИнформации.Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
		|	И ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации");
		
		Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", Поле.ВидОбъекта);
		
		ВидыКонтактнойИнформации = Запрос.Выполнить().Выбрать();	
		
		Индекс = 1;
		
		Пока ВидыКонтактнойИнформации.Следующий() Цикл
			
			Если ВидыКонтактнойИнформации.Объект = "#ПроизвольныйВид#" тогда
				
				ИмяВидаКонтактнойИнформации = Поле.ИмяИзмерения + "ВидКонтактнойИнформации" + Формат(Индекс, "ЧГ=0");
				Параметры.Вставить("Параметр" + ИмяВидаКонтактнойИнформации, ВидыКонтактнойИнформации.Наименование);
				
				Индекс = Индекс + 1;
				
			Иначе
				
				ИмяВидаКонтактнойИнформации = Поле.ИмяИзмерения + "ВидКонтактнойИнформации" + СтрЗаменить(Строка(ВидыКонтактнойИнформации.Объект.УникальныйИдентификатор()), "-", "");
				Параметры.Вставить("Параметр" + ИмяВидаКонтактнойИнформации, ВидыКонтактнойИнформации.Объект);
				
			КонецЕсли;
			
			// Поля
			ТекстПоляКонтактнаяИнформация = ТекстПоляКонтактнаяИнформация + ",
			|	" + ИмяВидаКонтактнойИнформации + ".Представление КАК " + ИмяВидаКонтактнойИнформации + "Значение";
				
			// Псевдонимы
			ТекстПсевдонимыКонтактнаяИнформация = ТекстПсевдонимыКонтактнаяИнформация + ",
			|	" + ИмяВидаКонтактнойИнформации + "Значение";
			
			// Соединения
			ТекстСоединения = ТекстСоединения + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК " + ИмяВидаКонтактнойИнформации + "
			|	ПО " + ИмяВидаКонтактнойИнформации + ".Объект = " + Поле.ПутьКДанным + "
			|	И " + ИмяВидаКонтактнойИнформации + ".Вид = &Параметр" + ИмяВидаКонтактнойИнформации + "}";
			
			// Условия
			ТекстУсловияКонтактнаяИнформация = ТекстУсловияКонтактнаяИнформация + ",
			|	ЕСТЬNULL (" + ИмяВидаКонтактнойИнформации + ".Представление, """") КАК " + ИмяВидаКонтактнойИнформации + "Значение";
				
			// Итоги
			ТекстИтогиКонтактнаяИнформация = ТекстИтогиКонтактнаяИнформация + ",
			|	МАКСИМУМ(" + ИмяВидаКонтактнойИнформации + "Значение)";
			
			СтруктураПредставлениеПолей.Вставить(ИмяВидаКонтактнойИнформации + "Значение", СокрЛП(ВидыКонтактнойИнформации.Наименование));
			СоответствиеКонтактнойИнформацииИИзмерений.Вставить(ИмяВидаКонтактнойИнформации + "Значение", Поле.ИмяИзмерения);
				
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПоляКонтактнаяИнформация, ТекстПоляКонтактнаяИнформация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПсевдонимыКонтактнаяИнформация, ТекстПсевдонимыКонтактнаяИнформация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьСоединения, ТекстСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьУсловияКонтактнаяИнформация, ТекстУсловияКонтактнаяИнформация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьИтогиКонтактнаяИнформация, ТекстИтогиКонтактнаяИнформация);
	
	мТаблицаПолейКонтактнаяИнформация.Очистить();

КонецПроцедуры // ДобавитьВТекстЗапросаКонтактнуюИнформацию()
	
Процедура ДобавитьВТекстЗапросаДанныеОФизлице(ТекстЗапроса, ТаблицаПолей = Неопределено, СтруктураПредставлениеПолей = Неопределено, Параметры = Неопределено, СоответствиеДанныхОФизлицеИИзмерений = Неопределено, СтруктураЗаменять = Неопределено) Экспорт
	
	// Добавляемые фрагменты запроса
	Если ТипЗнч(СтруктураЗаменять) = Тип("Структура") И СтруктураЗаменять.Количество() > 0 Тогда
		
		ЗаменятьПоляДанныеОФизлице = ?(СтруктураЗаменять.Свойство("ПоляДанныеОФизлице"), СтруктураЗаменять.ПоляДанныеОФизлице, "//ПОЛЯ_ДАННЫЕОФИЗЛИЦЕ");
		ЗаменятьПсевдонимыДанныеОФизлице = ?(СтруктураЗаменять.Свойство("ПсевдонимыДанныеОФизлице"), СтруктураЗаменять.ПсевдонимыДанныеОФизлице, "//ПСЕВДОНИМЫ_ДАННЫЕОФИЗЛИЦЕ");
		ЗаменятьСоединения = ?(СтруктураЗаменять.Свойство("Соединения"), СтруктураЗаменять.Соединения, "//ДАННЫЕОФИЗЛИЦЕ_СОЕДИНЕНИЯ");
		ЗаменятьУсловияДанныеОФизлице = ?(СтруктураЗаменять.Свойство("УсловияДанныеОФизлице"), СтруктураЗаменять.УсловияДанныеОФизлице, "//УСЛОВИЯ_ДАННЫЕОФИЗЛИЦЕ");
		ЗаменятьИтогиДанныеОФизлице = ?(СтруктураЗаменять.Свойство("ИтогиДанныеОФизлице"), СтруктураЗаменять.ИтогиДанныеОФизлице, "//ИТОГИ_ДАННЫЕОФИЗЛИЦЕ");
		
	Иначе
		
		ЗаменятьПоляДанныеОФизлице = "//ПОЛЯ_ДАННЫЕОФИЗЛИЦЕ";
		ЗаменятьПсевдонимыДанныеОФизлице = "//ПСЕВДОНИМЫ_ДАННЫЕОФИЗЛИЦЕ";
		ЗаменятьСоединения = "//ДАННЫЕОФИЗЛИЦЕ_СОЕДИНЕНИЯ";
		ЗаменятьУсловияДанныеОФизлице = "//УСЛОВИЯ_ДАННЫЕОФИЗЛИЦЕ";
		ЗаменятьИтогиДанныеОФизлице = "//ИТОГИ_ДАННЫЕОФИЗЛИЦЕ";
		
	КонецЕсли;
	
	Если ТаблицаПолей = Неопределено Тогда
		
		ТаблицаПолей = мТаблицаПолейДанныеОФизлице;
		
	КонецЕсли;
	
	Если СтруктураПредставлениеПолей = Неопределено Тогда
		
		СтруктураПредставлениеПолей = мСтруктураПредставлениеПолей;
		
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда
		
		Параметры = ПостроительОтчета.Параметры;
		
	КонецЕсли;
	
	Если СоответствиеДанныхОФизлицеИИзмерений = Неопределено Тогда
		
		СоответствиеДанныхОФизлицеИИзмерений = мСоответствиеДанныхОФизлицеИИзмерений;
		
	КонецЕсли;
	
	ТекстПоляДанныеОФизлице = "";
	ТекстПсевдонимыДанныеОФизлице = "";
	ТекстСоединения = "";
	ТекстУсловияДанныеОФизлице = "";
	ТекстИтогиДанныеОФизлице = "";
	
	Если ТипЗнч(СоответствиеДанныхОФизлицеИИзмерений) <> Тип("Соответствие") Тогда
		
		СоответствиеДанныхОФизлицеИИзмерений = Новый Соответствие;
		
	КонецЕсли;

	Для каждого Поле Из ТаблицаПолей Цикл
		
		// Поля
		ТекстПоляДанныеОФизлице = ТекстПоляДанныеОФизлице + ",
		|	" + Поле.ПутьКДанным + ".ДатаРождения КАК " + Поле.ИмяИзмерения + "ДатаРождения,
		|	" + Поле.ПутьКДанным + ".ИНН КАК " + Поле.ИмяИзмерения + "ИНН,
		|	" + Поле.ПутьКДанным + ".КодИМНС КАК " + Поле.ИмяИзмерения + "КодИМНС,
		|	" + Поле.ПутьКДанным + ".Комментарий КАК " + Поле.ИмяИзмерения + "Комментарий,
		|	" + Поле.ПутьКДанным + ".СтраховойНомерПФР КАК " + Поле.ИмяИзмерения + "СтраховойНомерПФР,
		|	" + Поле.ПутьКДанным + ".Пол КАК " + Поле.ИмяИзмерения + "Пол,
		|	" + Поле.ПутьКДанным + ".МестоРождения КАК " + Поле.ИмяИзмерения + "МестоРождения,
		|	ВЫБОР КОГДА (ФИОФизЛиц.Фамилия) ЕСТЬ NULL ТОГДА " + Поле.ПутьКДанным +".Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КОНЕЦ КАК " + Поле.ИмяИзмерения + "ФиоПолное,
		|	ВЫБОР КОГДА (ФИОФизЛиц.ФизЛицо) ЕСТЬ NULL ТОГДА " + Поле.ПутьКДанным +".Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК " + Поле.ИмяИзмерения + "ФиоКраткое,
		|	ВЫБОР КОГДА ГОД(" + Поле.ПутьКДанным +".ДатаРождения) = 1 ТОГДА 0 ИНАЧЕ &ДатаАктуальности_Год - ГОД(" + Поле.ПутьКДанным +".ДатаРождения) + ВЫБОР КОГДА (Месяц(" + Поле.ПутьКДанным + ".ДатаРождения) * 100 + День(" + Поле.ПутьКДанным +".ДатаРождения)) > (&ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День) ТОГДА -1 ИНАЧЕ 0 КОНЕЦ КОНЕЦ КАК " + Поле.ИмяИзмерения + "Возраст,
		|	СоставСемьиФизлица.СтепеньРодства КАК " + Поле.ИмяИзмерения + "СтепеньРодства,
		|	СоставСемьиФизлица.Имя КАК " + Поле.ИмяИзмерения + "ИмяРодственника,
		|	СоставСемьиФизлица.ГодРождения КАК " + Поле.ИмяИзмерения + "ГодРожденияРодственника,
		|	ВЫБОР КОГДА СоставСемьиФизлица.ГодРождения = 0 ТОГДА 0 ИНАЧЕ &ДатаАктуальности_Год - СоставСемьиФизлица.ГодРождения КОНЕЦ КАК " + Поле.ИмяИзмерения + "ВозрастРодственника,
		|	ОбразованиеФизлица.ВидОбразования КАК " + Поле.ИмяИзмерения + "ВидОбразования,
		|	ОбразованиеФизлица.УчебноеЗаведение КАК " + Поле.ИмяИзмерения + "УчебноеЗаведение,
		|	ОбразованиеФизлица.Специальность КАК " + Поле.ИмяИзмерения + "Специальность,
		|	ОбразованиеФизлица.Диплом КАК " + Поле.ИмяИзмерения + "Диплом,
		|	ОбразованиеФизлица.ГодОкончания КАК " + Поле.ИмяИзмерения + "ГодОкончания,
		|	ОбразованиеФизлица.Квалификация КАК " + Поле.ИмяИзмерения + "Квалификация,
		|	ТрудоваяДеятельностьФизлица.Организация КАК " + Поле.ИмяИзмерения + "ТД_Организация,
		|	ТрудоваяДеятельностьФизлица.ДатаНачала КАК " + Поле.ИмяИзмерения + "ТД_ДатаНачала,
		|	ТрудоваяДеятельностьФизлица.ДатаОкончания КАК " + Поле.ИмяИзмерения + "ТД_ДатаОкончания,
		|	ТрудоваяДеятельностьФизлица.Должность КАК " + Поле.ИмяИзмерения + "ТД_Должность,
		|	ЗнаниеЯзыковФизлица.Язык КАК " + Поле.ИмяИзмерения + "Язык,
		|	ЗнаниеЯзыковФизлица.СтепеньЗнанияЯзыка КАК " + Поле.ИмяИзмерения + "СтепеньЗнанияЯзыка,
		|	ПаспортныеДанныеФизЛиц.ДокументВид КАК " + Поле.ИмяИзмерения + "ДокументВид,
		|	ПаспортныеДанныеФизЛиц.ДокументСерия КАК " + Поле.ИмяИзмерения + "ДокументСерия,
		|	ПаспортныеДанныеФизЛиц.ДокументНомер КАК " + Поле.ИмяИзмерения + "ДокументНомер,
		|	ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи КАК " + Поле.ИмяИзмерения + "ДокументДатаВыдачи,
		|	ПаспортныеДанныеФизЛиц.ДокументКемВыдан КАК " + Поле.ИмяИзмерения + "ДокументКемВыдан,
		|	ПаспортныеДанныеФизЛиц.ДокументКодПодразделения КАК " + Поле.ИмяИзмерения + "ДокументКодПодразделения,
		|	ГражданствоФизЛиц.Страна КАК " + Поле.ИмяИзмерения + "Страна,
		|	ГражданствоФизЛиц.НеИмеетПравоНаПенсию КАК " + Поле.ИмяИзмерения + "НеИмеетПравоНаПенсию,
		|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРФ КАК " + Поле.ИмяИзмерения + "НеЯвляетсяНалоговымРезидентомРФ,
		|	ВоинскийУчет.ОтношениеКВоинскойОбязанности КАК " + Поле.ИмяИзмерения + "ОтношениеКВоинскойОбязанности,
		|	ВоинскийУчет.ОтношениеКВоинскомуУчету КАК " + Поле.ИмяИзмерения + "ОтношениеКВоинскомуУчету,
		|	ВоинскийУчет.Годность КАК " + Поле.ИмяИзмерения + "Годность,
		|	ВоинскийУчет.Звание КАК " + Поле.ИмяИзмерения + "Звание,
		|	ВоинскийУчет.ЗабронированОрганизацией КАК " + Поле.ИмяИзмерения + "ЗабронированОрганизацией,
		|	ВоинскийУчет.НаличиеМобпредписания КАК " + Поле.ИмяИзмерения + "НаличиеМобпредписания,
		|	ВоинскийУчет.Военкомат КАК " + Поле.ИмяИзмерения + "Военкомат,
		|	ВоинскийУчет.ВУС КАК " + Поле.ИмяИзмерения + "ВУС,
		|	ВоинскийУчет.КатегорияЗапаса КАК " + Поле.ИмяИзмерения + "КатегорияЗапаса,
		|	ВоинскийУчет.Состав КАК " + Поле.ИмяИзмерения + "Состав,
		|	ВоинскийУчет.НомерКомандыПартии КАК " + Поле.ИмяИзмерения + "НомерКомандыПартии,
		|	СемейноеПоложениеФизЛиц.СемейноеПоложение КАК " + Поле.ИмяИзмерения + "СемейноеПоложение";
				
		// Псевдонимы
		ТекстПсевдонимыДанныеОФизлице = ТекстПсевдонимыДанныеОФизлице + ",
		|	" + Поле.ИмяИзмерения + "ДатаРождения,
		|	" + Поле.ИмяИзмерения + "ИНН,
		|	" + Поле.ИмяИзмерения + "КодИМНС,
		|	" + Поле.ИмяИзмерения + "Комментарий,
		|	" + Поле.ИмяИзмерения + "СтраховойНомерПФР,
		|	" + Поле.ИмяИзмерения + "Пол,
		|	" + Поле.ИмяИзмерения + "МестоРождения,
		|	" + Поле.ИмяИзмерения + "ФиоПолное,
		|	" + Поле.ИмяИзмерения + "ФиоКраткое,
		|	" + Поле.ИмяИзмерения + "Возраст,
		|	" + Поле.ИмяИзмерения + "СтепеньРодства,
		|	" + Поле.ИмяИзмерения + "ИмяРодственника,
		|	" + Поле.ИмяИзмерения + "ГодРожденияРодственника,
		|	" + Поле.ИмяИзмерения + "ВозрастРодственника,
		|	" + Поле.ИмяИзмерения + "ВидОбразования,
		|	" + Поле.ИмяИзмерения + "УчебноеЗаведение,
		|	" + Поле.ИмяИзмерения + "Специальность,
		|	" + Поле.ИмяИзмерения + "Диплом,
		|	" + Поле.ИмяИзмерения + "ГодОкончания,
		|	" + Поле.ИмяИзмерения + "Квалификация,
		|	" + Поле.ИмяИзмерения + "ТД_Организация,
		|	" + Поле.ИмяИзмерения + "ТД_ДатаНачала,
		|	" + Поле.ИмяИзмерения + "ТД_ДатаОкончания,
		|	" + Поле.ИмяИзмерения + "ТД_Должность,
		|	" + Поле.ИмяИзмерения + "Язык,
		|	" + Поле.ИмяИзмерения + "СтепеньЗнанияЯзыка,
		|	" + Поле.ИмяИзмерения + "ДокументВид,
		|	" + Поле.ИмяИзмерения + "ДокументСерия,
		|	" + Поле.ИмяИзмерения + "ДокументНомер,
		|	" + Поле.ИмяИзмерения + "ДокументДатаВыдачи,
		|	" + Поле.ИмяИзмерения + "ДокументКемВыдан,
		|	" + Поле.ИмяИзмерения + "ДокументКодПодразделения,
		|	" + Поле.ИмяИзмерения + "Страна,
		|	" + Поле.ИмяИзмерения + "НеИмеетПравоНаПенсию,
		|	" + Поле.ИмяИзмерения + "НеЯвляетсяНалоговымРезидентомРФ,
		|	" + Поле.ИмяИзмерения + "ОтношениеКВоинскойОбязанности,
		|	" + Поле.ИмяИзмерения + "ОтношениеКВоинскомуУчету,
		|	" + Поле.ИмяИзмерения + "Годность,
		|	" + Поле.ИмяИзмерения + "Звание,
		|	" + Поле.ИмяИзмерения + "ЗабронированОрганизацией,
		|	" + Поле.ИмяИзмерения + "НаличиеМобпредписания,
		|	" + Поле.ИмяИзмерения + "Военкомат,
		|	" + Поле.ИмяИзмерения + "ВУС,
		|	" + Поле.ИмяИзмерения + "КатегорияЗапаса,
		|	" + Поле.ИмяИзмерения + "Состав,
		|	" + Поле.ИмяИзмерения + "НомерКомандыПартии,
		|	" + Поле.ИмяИзмерения + "СемейноеПоложение";
		
		// Соединения
		ТекстСоединения = ТекстСоединения + Символы.ПС + 
		"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаАктуальности) КАК ПаспортныеДанныеФизЛиц
		|	ПО " + Поле.ПутьКДанным + " = ПаспортныеДанныеФизЛиц.ФизЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаАктуальности) КАК ГражданствоФизЛиц
		|	ПО " + Поле.ПутьКДанным + " = ГражданствоФизЛиц.ФизЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВоинскийУчет.СрезПоследних(&ДатаАктуальности) КАК ВоинскийУчет
		|	ПО " + Поле.ПутьКДанным + " = ВоинскийУчет.Физлицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(&ДатаАктуальности) КАК СемейноеПоложениеФизЛиц
		|	ПО " + Поле.ПутьКДанным + " = СемейноеПоложениеФизЛиц.ФизЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности) КАК ФИОФизЛиц
		|	ПО " + Поле.ПутьКДанным + " = ФИОФизЛиц.ФизЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.СоставСемьи КАК СоставСемьиФизлица
		|	ПО " + Поле.ПутьКДанным + " = СоставСемьиФизлица.Ссылка}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Образование КАК ОбразованиеФизлица
		|	ПО " + Поле.ПутьКДанным + " = ОбразованиеФизлица.Ссылка}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ТрудоваяДеятельность КАК ТрудоваяДеятельностьФизлица
		|	ПО " + Поле.ПутьКДанным + " = ТрудоваяДеятельностьФизлица.Ссылка}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ЗнаниеЯзыков КАК ЗнаниеЯзыковФизлица
		|	ПО " + Поле.ПутьКДанным + " = ЗнаниеЯзыковФизлица.Ссылка}";
		
				
		// Условия
		ТекстУсловияДанныеОФизлице = ТекстУсловияДанныеОФизлице + ",
		|	" + Поле.ПутьКДанным + ".ДатаРождения КАК " + Поле.ИмяИзмерения + "ДатаРождения,
		|	" + Поле.ПутьКДанным + ".ИНН КАК " + Поле.ИмяИзмерения + "ИНН,
		|	" + Поле.ПутьКДанным + ".КодИМНС КАК " + Поле.ИмяИзмерения + "КодИМНС,
		|	" + Поле.ПутьКДанным + ".Комментарий КАК " + Поле.ИмяИзмерения + "Комментарий,
		|	" + Поле.ПутьКДанным + ".СтраховойНомерПФР КАК " + Поле.ИмяИзмерения + "СтраховойНомерПФР,
		|	" + Поле.ПутьКДанным + ".Пол КАК " + Поле.ИмяИзмерения + "Пол,
		|	" + Поле.ПутьКДанным + ".МестоРождения КАК " + Поле.ИмяИзмерения + "МестоРождения,
		|	ВЫБОР КОГДА (ФИОФизЛиц.Фамилия) ЕСТЬ NULL ТОГДА " + Поле.ПутьКДанным +".Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КОНЕЦ КАК " + Поле.ИмяИзмерения + "ФиоПолное,
		|	ВЫБОР КОГДА (ФИОФизЛиц.ФизЛицо) ЕСТЬ NULL ТОГДА " + Поле.ПутьКДанным +".Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК " + Поле.ИмяИзмерения + "ФиоКраткое,
		|	ВЫБОР КОГДА ГОД(" + Поле.ПутьКДанным +".ДатаРождения) = 1 ТОГДА 0 ИНАЧЕ &ДатаАктуальности_Год - ГОД(" + Поле.ПутьКДанным +".ДатаРождения) + ВЫБОР КОГДА (Месяц(" + Поле.ПутьКДанным + ".ДатаРождения) * 100 + День(" + Поле.ПутьКДанным +".ДатаРождения)) > (&ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День) ТОГДА -1 ИНАЧЕ 0 КОНЕЦ КОНЕЦ КАК " + Поле.ИмяИзмерения + "Возраст,
		|	СоставСемьиФизлица.СтепеньРодства КАК " + Поле.ИмяИзмерения + "СтепеньРодства,
		|	СоставСемьиФизлица.Имя КАК " + Поле.ИмяИзмерения + "ИмяРодственника,
		|	СоставСемьиФизлица.ГодРождения КАК " + Поле.ИмяИзмерения + "ГодРожденияРодственника,
		|	ВЫБОР КОГДА СоставСемьиФизлица.ГодРождения = 0 ТОГДА 0 ИНАЧЕ &ДатаАктуальности_Год - СоставСемьиФизлица.ГодРождения КОНЕЦ КАК " + Поле.ИмяИзмерения + "ВозрастРодственника,
		|	ОбразованиеФизлица.ВидОбразования КАК " + Поле.ИмяИзмерения + "ВидОбразования,
		|	ОбразованиеФизлица.УчебноеЗаведение КАК " + Поле.ИмяИзмерения + "УчебноеЗаведение,
		|	ОбразованиеФизлица.Специальность КАК " + Поле.ИмяИзмерения + "Специальность,
		|	ОбразованиеФизлица.Диплом КАК " + Поле.ИмяИзмерения + "Диплом,
		|	ОбразованиеФизлица.ГодОкончания КАК " + Поле.ИмяИзмерения + "ГодОкончания,
		|	ОбразованиеФизлица.Квалификация КАК " + Поле.ИмяИзмерения + "Квалификация,
		|	ТрудоваяДеятельностьФизлица.Организация КАК " + Поле.ИмяИзмерения + "ТД_Организация,
		|	ТрудоваяДеятельностьФизлица.ДатаНачала КАК " + Поле.ИмяИзмерения + "ТД_ДатаНачала,
		|	ТрудоваяДеятельностьФизлица.ДатаОкончания КАК " + Поле.ИмяИзмерения + "ТД_ДатаОкончания,
		|	ТрудоваяДеятельностьФизлица.Должность КАК " + Поле.ИмяИзмерения + "ТД_Должность,
		|	ЗнаниеЯзыковФизлица.Язык КАК " + Поле.ИмяИзмерения + "Язык,
		|	ЗнаниеЯзыковФизлица.СтепеньЗнанияЯзыка КАК " + Поле.ИмяИзмерения + "СтепеньЗнанияЯзыка,
		|	ПаспортныеДанныеФизЛиц.ДокументВид КАК " + Поле.ИмяИзмерения + "ДокументВид,
		|	ПаспортныеДанныеФизЛиц.ДокументСерия КАК " + Поле.ИмяИзмерения + "ДокументСерия,
		|	ПаспортныеДанныеФизЛиц.ДокументНомер КАК " + Поле.ИмяИзмерения + "ДокументНомер,
		|	ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи КАК " + Поле.ИмяИзмерения + "ДокументДатаВыдачи,
		|	ПаспортныеДанныеФизЛиц.ДокументКемВыдан КАК " + Поле.ИмяИзмерения + "ДокументКемВыдан,
		|	ПаспортныеДанныеФизЛиц.ДокументКодПодразделения КАК " + Поле.ИмяИзмерения + "ДокументКодПодразделения,
		|	ГражданствоФизЛиц.Страна КАК " + Поле.ИмяИзмерения + "Страна,
		|	ГражданствоФизЛиц.НеИмеетПравоНаПенсию КАК " + Поле.ИмяИзмерения + "НеИмеетПравоНаПенсию,
		|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРФ КАК " + Поле.ИмяИзмерения + "НеЯвляетсяНалоговымРезидентомРФ,
		|	ВоинскийУчет.ОтношениеКВоинскойОбязанности КАК " + Поле.ИмяИзмерения + "ОтношениеКВоинскойОбязанности,
		|	ВоинскийУчет.ОтношениеКВоинскомуУчету КАК " + Поле.ИмяИзмерения + "ОтношениеКВоинскомуУчету,
		|	ВоинскийУчет.Годность КАК " + Поле.ИмяИзмерения + "Годность,
		|	ВоинскийУчет.Звание КАК " + Поле.ИмяИзмерения + "Звание,
		|	ВоинскийУчет.ЗабронированОрганизацией КАК " + Поле.ИмяИзмерения + "ЗабронированОрганизацией,
		|	ВоинскийУчет.НаличиеМобпредписания КАК " + Поле.ИмяИзмерения + "НаличиеМобпредписания,
		|	ВоинскийУчет.Военкомат КАК " + Поле.ИмяИзмерения + "Военкомат,
		|	ВоинскийУчет.ВУС КАК " + Поле.ИмяИзмерения + "ВУС,
		|	ВоинскийУчет.КатегорияЗапаса КАК " + Поле.ИмяИзмерения + "КатегорияЗапаса,
		|	ВоинскийУчет.Состав КАК " + Поле.ИмяИзмерения + "Состав,
		|	ВоинскийУчет.НомерКомандыПартии КАК " + Поле.ИмяИзмерения + "НомерКомандыПартии,
		|	СемейноеПоложениеФизЛиц.СемейноеПоложение КАК " + Поле.ИмяИзмерения + "СемейноеПоложение";
		
		// Итоги
		ТекстИтогиДанныеОФизлице = ТекстИтогиДанныеОФизлице + ",
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ДатаРождения),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ИНН),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "КодИМНС),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Комментарий),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "СтраховойНомерПФР),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Пол),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "МестоРождения),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ФиоПолное),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ФиоКраткое),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Возраст),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "СтепеньРодства),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ИмяРодственника),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ГодРожденияРодственника),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ВозрастРодственника),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ВидОбразования),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "УчебноеЗаведение),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Специальность),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Диплом),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ГодОкончания),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Квалификация),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ТД_Организация),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ТД_ДатаНачала),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ТД_ДатаОкончания),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ТД_Должность),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Язык),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "СтепеньЗнанияЯзыка),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ДокументВид),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ДокументСерия),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ДокументНомер),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ДокументДатаВыдачи),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ДокументКемВыдан),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ДокументКодПодразделения),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Страна),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "НеИмеетПравоНаПенсию),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "НеЯвляетсяНалоговымРезидентомРФ),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ОтношениеКВоинскойОбязанности),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ОтношениеКВоинскомуУчету),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Годность),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Звание),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ЗабронированОрганизацией),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "НаличиеМобпредписания),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Военкомат),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "ВУС),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "КатегорияЗапаса),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "Состав),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "НомерКомандыПартии),
		|	МАКСИМУМ(" + Поле.ИмяИзмерения + "СемейноеПоложение)";

		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ДатаРождения", "Дата рождения");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ИНН", "ИНН");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "КодИМНС", "Код ИМНС");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Комментарий", "Комментарий");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "СтраховойНомерПФР", "Страховой номер ПФР");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Пол", "Пол");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "МестоРождения", "Место рождения");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ФиоПолное", "ФИО (полностью)");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ФиоКраткое", "Фамилия И. О.");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Возраст", "Возраст");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "СтепеньРодства", "Степень родства");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ИмяРодственника", "Имя родственника");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ГодРожденияРодственника", "Год рождения родственника");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ВозрастРодственника", "Возраст родственника");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ВидОбразования", "Вид образования");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "УчебноеЗаведение", "Учебное заведение");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Специальность", "Специальность");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Диплом", "Диплом");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ГодОкончания", "Год окончания учебного заведения");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Квалификация", "Квалификация");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ТД_Организация", "Трудовая деятельность: организация");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ТД_ДатаНачала", "Трудовая деятельность: начало работы");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ТД_ДатаОкончания", "Трудовая деятельность: окончание работы");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ТД_Должность", "Трудовая деятельность: должность");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Язык", "Знание языков: язык");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "СтепеньЗнанияЯзыка", "Знание языков: степень владения");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ДокументВид", "Вид документа");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ДокументСерия", "Серия документа");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ДокументНомер", "Номер документа");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ДокументДатаВыдачи", "Дата выдачи документа");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ДокументКемВыдан", "Кем выдан документ");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ДокументКодПодразделения", "Код подразделения, выдавшего документ");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Страна", "Страна");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "НеИмеетПравоНаПенсию", "Не имеет права на пенсию");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "НеЯвляетсяНалоговымРезидентомРФ", "Не является налоговым резидентом РФ");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ОтношениеКВоинскойОбязанности", "Отношение к воинской обязанности");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ОтношениеКВоинскомуУчету", "Отношение к воинскому учету");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Годность", "Годность к воинской службе");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Звание", "Воинское звание");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ЗабронированОрганизацией", "Забронирован организацией");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "НаличиеМобпредписания", "Наличие мобпредписания");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Военкомат", "Военкомат");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "ВУС", "ВУС");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "КатегорияЗапаса", "Категория запаса");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "Состав", "Состав (профиль)");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "НомерКомандыПартии", "Номер команды, партии");
		СтруктураПредставлениеПолей.Вставить(Поле.ИмяИзмерения + "СемейноеПоложение", "Семейное положение");
		
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ДатаРождения", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ИНН", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "КодИМНС", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Комментарий", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "СтраховойНомерПФР", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Пол", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "МестоРождения", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ФиоПолное", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ФиоКраткое", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Возраст", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "СтепеньРодства", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ИмяРодственника", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ГодРожденияРодственника", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ВозрастРодственника", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ВидОбразования", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "УчебноеЗаведение", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Специальность", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Диплом", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ГодОкончания", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Квалификация", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ТД_Организация", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ТД_ДатаНачала", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ТД_ДатаОкончания", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ТД_Должность", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Язык", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "СтепеньЗнанияЯзыка", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ДокументВид", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ДокументСерия", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ДокументНомер", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ДокументДатаВыдачи", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ДокументКемВыдан", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ДокументКодПодразделения", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Страна", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "НеИмеетПравоНаПенсию", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "НеЯвляетсяНалоговымРезидентомРФ", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ОтношениеКВоинскойОбязанности", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ОтношениеКВоинскомуУчету", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Годность", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Звание", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ЗабронированОрганизацией", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "НаличиеМобпредписания", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Военкомат", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "ВУС", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "КатегорияЗапаса", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "Состав", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "НомерКомандыПартии", Поле.ИмяИзмерения);
		СоответствиеДанныхОФизлицеИИзмерений.Вставить(Поле.ИмяИзмерения + "СемейноеПоложение", Поле.ИмяИзмерения);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПоляДанныеОФизлице, ТекстПоляДанныеОФизлице);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПсевдонимыДанныеОФизлице, ТекстПсевдонимыДанныеОФизлице);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьСоединения, ТекстСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьУсловияДанныеОФизлице, ТекстУсловияДанныеОФизлице);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьИтогиДанныеОФизлице, ТекстИтогиДанныеОФизлице);
	
	мТаблицаПолейДанныеОФизлице.Очистить();
	
КонецПроцедуры // ДобавитьВТекстЗапросаДанныеОФизлице()
	
Процедура УстановитьТипыЗначенийСвойствДляОтбора(НастраиваемыйПостроительОтчета = Неопределено, СоответствиеСвойствКатегорийИИзмерений = Неопределено, СоответствиеНазначений = Неопределено, СтруктураПредставлениеПолей = Неопределено) Экспорт
	
	Если НастраиваемыйПостроительОтчета = Неопределено Тогда
		
		НастраиваемыйПостроительОтчета = ПостроительОтчета;
		
	КонецЕсли;
	
	Если СоответствиеНазначений = Неопределено Тогда
		
		СоответствиеНазначений = мСоответствиеНазначений;
		
	КонецЕсли;
	
	Если СтруктураПредставлениеПолей = Неопределено Тогда
		
		СтруктураПредставлениеПолей = мСтруктураПредставлениеПолей;
		
	КонецЕсли;
	
	Если СоответствиеСвойствКатегорийИИзмерений = Неопределено Тогда
		
		СоответствиеСвойствКатегорийИИзмерений = мСоответствиеСвойствКатегорийИИзмерений;
		
	КонецЕсли;
	
	Если СоответствиеСвойствКатегорийИИзмерений.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого Поле Из СтруктураПредставлениеПолей Цикл
		
		Если СоответствиеСвойствКатегорийИИзмерений[Поле.Ключ] <> Неопределено Тогда
			
			Назначение = СоответствиеНазначений[Поле.Значение];
			
			Если Назначение <> Неопределено Тогда
					
				ДоступноеПоле = НастраиваемыйПостроительОтчета.ДоступныеПоля.Найти(Поле.Ключ);
				
				Если ДоступноеПоле <> Неопределено И ДоступноеПоле.Отбор Тогда
					
					ДоступноеПоле.ТипЗначения = Назначение.ТипЗначения;
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозможныеТипыСвойств = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.Типы();
	
	ИндексТекущегоВозможногоТипа = 1;
			
	Для каждого ВозможныйТипСвойства Из ВозможныеТипыСвойств Цикл
				
		НастраиваемыйПостроительОтчета.Параметры.Вставить("ПараметрПустоеЗначениеСвойства" + Формат(ИндексТекущегоВозможногоТипа, "ЧГ=0"), лПустоеЗначениеТипа(ВозможныйТипСвойства));
		ИндексТекущегоВозможногоТипа = ИндексТекущегоВозможногоТипа + 1;
				
	КонецЦикла;
	
КонецПроцедуры // УстановитьТипыЗначенийСвойствДляОтбора()

Функция ПолучитьИнтервальноеПоле(ТаблицаИнтервалов, СтруктураПараметры, СоответствиеТиповИнтервальныхПолей, ПолеИнтервала, ИсходноеПоле, ТипИсходногоПоля, СтрокаФорматирования = "") Экспорт
	
	ТекстПоляВыбора = Символы.Таб + "ВЫБОР ";
	ТипГраницыИнтервалаСтрока = Ложь;
	
	Если ТипИсходногоПоля = Тип("Строка") Тогда
		
		ПредыдущаяГраницаИнтервала = " ";
		ТипГраницыИнтервалаСтрока = Истина;
		
	ИначеЕсли ТипИсходногоПоля = Тип("Дата") Тогда
		
		ПредыдущаяГраницаИнтервала = '00010101';
		
	Иначе
		
		ПредыдущаяГраницаИнтервала = 0;
		
	КонецЕсли;
	
	Для Каждого СтрокаИнтервал Из ТаблицаИнтервалов Цикл
		
		Если СтрокаИнтервал.ИнтервальноеПоле = ПолеИнтервала Тогда
			
			ТекущаяГраницаИнтервала = ?(ПустаяСтрока(СтрокаИнтервал.ВГраница), " ", СтрокаИнтервал.ВГраница);
			
			Если ТипГраницыИнтервалаСтрока Тогда
				
				_ИсходноеПолеПредыдущаяГраница = "ПОДСТРОКА(" + ИсходноеПоле + ", 1, " + ?(СтрДлина(ПредыдущаяГраницаИнтервала) = 0, 1, СтрДлина(ПредыдущаяГраницаИнтервала)) + ")";
				_ИсходноеПолеТекущаяГраница = "ПОДСТРОКА(" + ИсходноеПоле + ", 1, " + ?(СтрДлина(ТекущаяГраницаИнтервала) = 0, 1, СтрДлина(ТекущаяГраницаИнтервала)) + ")";
				
			Иначе
				
				_ИсходноеПолеПредыдущаяГраница = ИсходноеПоле;
				_ИсходноеПолеТекущаяГраница = ИсходноеПоле;
				
			КонецЕсли;
			
			ТекстПоляВыбора = ТекстПоляВыбора + Символы.ПС + Символы.Таб + "КОГДА " + _ИсходноеПолеПредыдущаяГраница + " >= " + ЗначениеВТекстЗапроса(ПредыдущаяГраницаИнтервала) + " И " + _ИсходноеПолеТекущаяГраница + " <= " + ЗначениеВТекстЗапроса(ТекущаяГраницаИнтервала) + " ТОГДА &Интервал" + ПолеИнтервала + ЗначениеВТекстЗапроса(ТаблицаИнтервалов.Индекс(СтрокаИнтервал) + 1);
			
			СтруктураПараметры.Вставить("Интервал" + ПолеИнтервала + ЗначениеВТекстЗапроса(ТаблицаИнтервалов.Индекс(СтрокаИнтервал) + 1), СтрокаИнтервал.Название);
			ПредыдущаяГраницаИнтервала = ТекущаяГраницаИнтервала;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Найти(ТекстПоляВыбора, "КОГДА") > 0 Тогда
		
		ТекстПоляВыбора = ТекстПоляВыбора + Символы.ПС + Символы.Таб + "ИНАЧЕ &Интервал" + ПолеИнтервала + "Прочие";
		ТекстПоляВыбора = ТекстПоляВыбора + Символы.ПС + Символы.Таб + "КОНЕЦ КАК " + ПолеИнтервала;
		
	Иначе
		
		ТекстПоляВыбора = Символы.Таб + "&Интервал" + ПолеИнтервала + "Прочие КАК " + ПолеИнтервала;
		
	КонецЕсли;
	
	СтруктураПараметры.Вставить("Интервал" + ПолеИнтервала + "Прочие", Нстр("ru = 'Остальные'"));
	
	СоответствиеТиповИнтервальныхПолей.Вставить(ПолеИнтервала, ТипИсходногоПоля);
	
	Возврат ТекстПоляВыбора;
	
КонецФункции // ПолучитьИнтервальноеПоле()

Функция ЗначениеВТекстЗапроса(Значение)
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		Результат = Формат(Значение,"ЧРД=.; ЧН=; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Результат = """" + Значение + """";
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Результат = "ДАТАВРЕМЯ(" + ЗначениеВТекстЗапроса(Год(Значение)) + ", " + ЗначениеВТекстЗапроса(Месяц(Значение)) + ", " + ЗначениеВТекстЗапроса(День(Значение)) + ", " + ЗначениеВТекстЗапроса(Час(Значение)) + ", " + ЗначениеВТекстЗапроса(Минута(Значение)) + ", " + ЗначениеВТекстЗапроса(Секунда(Значение)) + ")";
		
	Иначе
		
		Результат = "0";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗначениеВТекстЗапроса()

Процедура ДобавитьВТекстЗапросаИнтервальныеГруппировкиФизлиц(ТекстЗапроса, ИмяПоляФизЛицо = "Работники.ФизЛицо", ТаблицаИнтервалов = Неопределено, СтруктураПредставлениеПолей = Неопределено, Параметры = Неопределено, СоответствиеТиповИнтервальныхПолей = Неопределено, СтруктураЗаменять = Неопределено) Экспорт
	
	// Добавляемые фрагменты запроса
	Если ТипЗнч(СтруктураЗаменять) = Тип("Структура") И СтруктураЗаменять.Количество() > 0 Тогда
		
		ЗаменятьПоляИнтервальныеГруппировкиФизЛиц = ?(СтруктураЗаменять.Свойство("ПоляИнтервальныеГруппировкиФизЛиц"), СтруктураЗаменять.ПоляИнтервальныеГруппировкиФизЛиц, "//ПОЛЯ_ИНТЕРВАЛЬНЫЕГРУППИРОВКИФИЗЛИЦ");
		ЗаменятьИтогиИнтервальныеГруппировкиФизЛиц = ?(СтруктураЗаменять.Свойство("ИтогиИнтервальныеГруппировкиФизЛиц"), СтруктураЗаменять.ИтогиИнтервальныеГруппировкиФизЛиц, "//ИНТЕРВАЛЬНЫЕГРУППИРОВКИФИЗЛИЦ");
		
	Иначе
		
		ЗаменятьПоляИнтервальныеГруппировкиФизЛиц = "//ПОЛЯ_ИНТЕРВАЛЬНЫЕГРУППИРОВКИФИЗЛИЦ";
		ЗаменятьИтогиИнтервальныеГруппировкиФизЛиц = "//ИТОГИ_ИНТЕРВАЛЬНЫЕГРУППИРОВКИФИЗЛИЦ";
		
	КонецЕсли;
	
	Если ТаблицаИнтервалов = Неопределено Тогда
		
		ТаблицаИнтервалов = Интервалы;
		
	КонецЕсли;
	
	Если СтруктураПредставлениеПолей = Неопределено Тогда
		
		СтруктураПредставлениеПолей = мСтруктураПредставлениеПолей;
		
	КонецЕсли;
	
	Если СоответствиеТиповИнтервальныхПолей = Неопределено Тогда
		
		СоответствиеТиповИнтервальныхПолей = мСоответствиеТиповИнтервальныхПолей;
		
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда
		
		Параметры = ПостроительОтчета.Параметры;
		
	КонецЕсли;
	
	ПолеВозраст =
	"ВЫБОР
	|	КОГДА ГОД(" + ИмяПоляФизЛицо + ".ДатаРождения) = 1
	|		ТОГДА 0
	|	ИНАЧЕ &ДатаАктуальности_Год - ГОД(" + ИмяПоляФизЛицо + ".ДатаРождения) + ВЫБОР
	|			КОГДА МЕСЯЦ(" + ИмяПоляФизЛицо + ".ДатаРождения) * 100 + ДЕНЬ(" + ИмяПоляФизЛицо + ".ДатаРождения) > &ДатаАктуальности_Месяц * 100 + &ДатаАктуальности_День
	|				ТОГДА -1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ";
	
	СтруктураПредставлениеПолей.Вставить("ВозрастИН", "Возраст (интервалы)");
	
	ПолеФИО = 
	"ВЫБОР
	|	КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL
	|		ТОГДА " + ИмяПоляФизЛицо + ".Наименование
	|	ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество
	|КОНЕЦ";
	
	СтруктураПредставлениеПолей.Вставить("ФиоПолноеИН", "Начало ФИО (интервалы)");
	
	ТекстПолеСИнтервалами =	",
	|" + ПолучитьИнтервальноеПоле(ТаблицаИнтервалов, Параметры, СоответствиеТиповИнтервальныхПолей, "ВозрастИН", ПолеВозраст, Тип("Число")) + ",
	|" + ПолучитьИнтервальноеПоле(ТаблицаИнтервалов, Параметры, СоответствиеТиповИнтервальныхПолей, "ФиоПолноеИН", ПолеФИО, Тип("Строка"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПоляИнтервальныеГруппировкиФизЛиц, ТекстПолеСИнтервалами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьИтогиИнтервальныеГруппировкиФизЛиц, ",
	|	ВозрастИН,
	|	ФиоПолноеИН");
	
КонецПроцедуры // ДобавитьВТекстЗапросаИнтервальныеГруппировкиФизлиц()

Процедура УстановитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета) Экспорт

	СтруктураПредставлениеПолей.Вставить("Периодичность", "Периодичность итогов");
	СтруктураПредставлениеПолей.Вставить("Регистратор", "Документ движения (регистратор)");
	СтруктураПредставлениеПолей.Вставить("Период", "Период");
	СтруктураПредставлениеПолей.Вставить("ПериодДень", "По дням");
	СтруктураПредставлениеПолей.Вставить("ПериодНеделя", "По неделям");
	СтруктураПредставлениеПолей.Вставить("ПериодДекада", "По декадам");
	СтруктураПредставлениеПолей.Вставить("ПериодМесяц", "По месяцам");
	СтруктураПредставлениеПолей.Вставить("ПериодКвартал", "По кварталам");
	СтруктураПредставлениеПолей.Вставить("ПериодПолугодие", "По полугодиям");
	СтруктураПредставлениеПолей.Вставить("ПериодГод", "По годам");

	СтруктураКоллекцийПостроителяОтчета = Новый Структура("ДоступныеПоля, ВыбранныеПоля, ИзмеренияКолонки, ИзмеренияСтроки, Отбор, Порядок");
	
	Для каждого ЭлементСтруктуры Из СтруктураКоллекцийПостроителяОтчета Цикл
		
		Для Индекс = 0 По ПостроительОтчета[ЭлементСтруктуры.Ключ].Количество() - 1 Цикл
			
			Представление = Неопределено;
			
			Если Найти(ПостроительОтчета[ЭлементСтруктуры.Ключ][Индекс].ПутьКДанным, ".") = 0 Тогда
				
				Попытка
					
					СтруктураПредставлениеПолей.Свойство(ПостроительОтчета[ЭлементСтруктуры.Ключ][Индекс].ПутьКДанным, Представление);
					
				Исключение
					
				КонецПопытки;
				
			КонецЕсли;
				
			Если Представление = Неопределено Тогда
					
				Продолжить;
				
			Иначе
				
				ПостроительОтчета[ЭлементСтруктуры.Ключ][Индекс].Представление = Представление;
					
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры // УстановитьПредставленияПолей()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ СО СПРАВКОЙ ФОРМЫ

Процедура ПодготовитьСправкуФормы(Объект, Отчет, Форма) Экспорт
	
	Если Форма.ЭлементыФормы.Найти("ПанельСправкаФормы") = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЦветФонаСправки = лВернутьШестнадцатиричноеПредставлениеЦвета(лВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки = лВернутьШестнадцатиричноеПредставлениеЦвета(лВстроеннаяСправка_ЦветСсылки());
	
	Форма.ЭлементыФормы.ПанельСправкаФормы.ЦветРамки = лВстроеннаяСправка_ЦветРамки();
	Форма.ЭлементыФормы.НадписиЗакрытьСправкуФормы.ЦветФона	= лВстроеннаяСправка_ЦветФона();
	Форма.ЭлементыФормы.НадписиЗакрытьСправкуФормы.ЦветТекста = лВстроеннаяСправка_ЦветСсылки();
	
	ТекстМакета = "";
	
	Если Отчет.Метаданные().Макеты.Найти("МакетВстроеннойСправки") <> Неопределено Тогда
		
		ТекстМакета = Отчет.ПолучитьМакет("МакетВстроеннойСправки").ПолучитьТекст();
		
	Иначе
		
		ТекстМакета = Отчет.ПолучитьТекстСправкиФормы();
		
	КонецЕсли;
	
	ТекстМакетаВстроеннойСправки =
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + лВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|
	|	<BODY aLink=" + ЦветСсылкиСправки + " vLink=" + ЦветСсылкиСправки + " link=" + ЦветСсылкиСправки + " bgColor=" + ЦветФонаСправки + " scroll=auto><FONT face=""Verdana"" size=1>
	|		<IMG src=" + лПолучитьПутьККартинкеДляHTML(мКартинкаВстроеннойСправкиФормы, Форма.ЭлементыФормы.ВстроеннаяСправка) + ">
	|" + ТекстМакета + "
	|	</FONT></BODY>
	|</HTML>";
	
	Форма.ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);
	
КонецПроцедуры // ПодготовитьСправкуФормы()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции // ПолучитьТекстСправкиФормы()

Процедура onclick(Объект, Отчет, Форма, Элемент, pEvtObj) Экспорт
	
	лПолеHTMLДокументаOnClick(Элемент, pEvtObj, Форма);
	
КонецПроцедуры // onclick()

Процедура onmouseout(Объект, Отчет, Форма, Элемент, pEvtObj) Экспорт
	
	лПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj);
	
КонецПроцедуры // onmouseout()

Процедура onmouseover(Объект, Отчет, Форма, Элемент, pEvtObj) Экспорт
	
	лПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj);
	
КонецПроцедуры // onmouseover()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПОДКЛЮЧАЕМЫМИ ОБРАБОТКАМИ

Функция ВыполнитьОбработкиПодключаемыеКОтчету(СпособЗапуска, Объект = Неопределено, ТабличныйДокумент)
	
	Если Объект = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если мОбработкиПодключаемыеКОтчету = Неопределено Тогда
		ИмяМетаданныхОбъекта = "Отчет." + Объект.Метаданные().Имя;
		Попытка
			Выполнить("мОбработкиПодключаемыеКОтчету = УниверсальныеМеханизмы.ПолучитьСписокОбработокПодключаемыхКОтчету(ИмяМетаданныхОбъекта)")
		Исключение
			Возврат Истина;
		КонецПопытки;
	КонецЕсли;
	
	МассивОбработкиПодключаемыеКОтчету = мОбработкиПодключаемыеКОтчету.НайтиСтроки(Новый Структура("СпособЗапуска", СпособЗапуска));
	
	Для каждого ЭлОбработка Из МассивОбработкиПодключаемыеКОтчету Цикл
		Попытка
			Выполнить("Результат = УниверсальныеМеханизмы.ВыполнитьОбработкуПодключаемуюКОтчету(ЭлОбработка, Объект, ТабличныйДокумент)")
		Исключение
			Результат = Неопределено
		КонецПопытки;
		
		Если Результат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат.Отказ Тогда
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции // ВыполнитьОбработкиПодключаемыеКОтчету

// Процедура вызывает обработку, которая была выбрана из меню пользователем
// Результат выполнения обработки не обрабатывается
//
Процедура ОбработатьНажатиеНаКнопкуОбработкиПодключаемойКОтчету(ИдентификаторОбработки, Объект = Неопределено, ТабличныйДокумент) Экспорт
	
	Попытка
		Выполнить("УниверсальныеМеханизмы.ВыполнитьОбработкуПодключаемуюКОтчету(мОбработкиПодключаемыеКОтчету.Найти(ИдентификаторОбработки, ""Идентификатор""), Объект, ТабличныйДокумент)")
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ОбработатьНажатиеНаКнопкуОбработкиПодключаемойКОтчету

// Процедура формирует список обработок, заполняет меню обработками выполяемых вручную
//
Процедура УстановитьОбработкиПодключаемыеКОтчету(Объект, Отчет, Форма)
	
	Если Отчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если мОбработкиПодключаемыеКОтчету = Неопределено Тогда
		ИмяМетаданныхОбъекта = "Отчет." + Отчет.Метаданные().Имя;
		Попытка
			Выполнить("мОбработкиПодключаемыеКОтчету = УниверсальныеМеханизмы.ПолучитьСписокОбработокПодключаемыхКОтчету(ИмяМетаданныхОбъекта)")
		Исключение
			мДействиеФормыВыполнитьВнешнююОбработку = Неопределено;
		КонецПопытки;
	КонецЕсли; 
	
	// Сформируем меню, содержащее обработки вызываемые вручную
	Если мДействиеФормыВыполнитьВнешнююОбработку <> Неопределено Тогда
		ОбработкиЗапускаемыеВручную = мОбработкиПодключаемыеКОтчету.НайтиСтроки(Новый Структура("СпособЗапуска", Перечисления.СпособыЗапускаВнешнихОбработокВОтчетахНаБазеУниверсального.Вручную));
		Если ОбработкиЗапускаемыеВручную.Количество() <> 0 Тогда
			ИндексКнопки = -1;
			
			КнопкиПодмеюДействияФормы = Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки;
			КнопкаНастройка = КнопкиПодмеюДействияФормы.Найти("Настройка");
			Если КнопкаНастройка <> Неопределено Тогда
				ИндексКнопки = КнопкиПодмеюДействияФормы.Индекс(КнопкаНастройка);
				КнопкиПодмеюДействияФормы.Вставить(ИндексКнопки + 1, "РазделительОбработки", ТипКнопкиКоманднойПанели.Разделитель);
				ИндексКнопки = ИндексКнопки + 2;
			Иначе
				КнопкаДействиеЗакрыть = КнопкиПодмеюДействияФормы.Найти("ДействиеЗакрыть");
				Если КнопкаДействиеЗакрыть <> Неопределено Тогда
					ИндексКнопки = КнопкиПодмеюДействияФормы.Индекс(КнопкаДействиеЗакрыть);
					КнопкиПодмеюДействияФормы.Вставить(ИндексКнопки, "РазделительОбработки", ТипКнопкиКоманднойПанели.Разделитель);
					ИндексКнопки = ИндексКнопки - 1;
				КонецЕсли; 
			КонецЕсли; 
			
			Для каждого ЭлОбработка Из ОбработкиЗапускаемыеВручную Цикл
				
				Если ИндексКнопки = -1 Тогда
					Кнопка = КнопкиПодмеюДействияФормы.Добавить();
				Иначе
					Кнопка = КнопкиПодмеюДействияФормы.Вставить(ИндексКнопки);
					ИндексКнопки = ИндексКнопки + 1;
				КонецЕсли; 
				Кнопка.Имя = ЭлОбработка.Идентификатор;
				Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
				Кнопка.Текст = ЭлОбработка.Наименование;
				Кнопка.Пояснение = "Выполнить обработку """ + ЭлОбработка.Наименование + """";
				Кнопка.Действие = мДействиеФормыВыполнитьВнешнююОбработку;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // УстановитьОбработкиПодключаемыеКОтчету
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА ШИРИНЫ КОЛОНОК

Процедура РасчетШириныКолонок(ТабличныйДокумент) Экспорт
	
	Перем МаксимальнаяШиринаКолонки;
	Перем КонечнаяСтрока, НачальнаяСтрока, ТекущаяКолонка, ТекущаяСтрока, НачалоДанных;
	Перем ОбластьШапки, ОбластьПодвала;
	Перем ШиринаКолонки, ТекстЯчейки, НомерСтрокиТекста;
	Перем КоличествоУровнейГруппировокСтрок, Отступ;
	Перем ШириныКолонок;
	
	Если НЕ мРассчитыватьШиринуКолонок Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(НСтр("ru='Выполняется расчет ширины колонок...'"));
	
	// Ограничение максимальной ширины колонки
	МаксимальнаяШиринаКолонки = 50;
	
	// Массив, в который будут помещаться ширины колонок
	ШириныКолонок = Новый Массив;
	
	// Получим количество уровней группировок в отчете для учета автоматического отступа
	КоличествоУровнейГруппировокСтрок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	
	// Инициализируем начальные строки
	НачальнаяСтрока = 0;
	НачалоДанных = 0;
	
	// Найдем в результирующем документе область шапки таблицы
	ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаТаблицы");
	
	Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		// Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины
		НачальнаяСтрока = ОбластьШапки.Верх;
		НачалоДанных = ОбластьШапки.Низ + 1;
		
	Иначе
		
		// Если область шапки таблицы не найдена, найдем область шапки строк
		ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаСтрок");
		
		Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			// Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины
			НачальнаяСтрока = ОбластьШапки.Верх;
			НачалоДанных = ОбластьШапки.Низ + 1;
			
		КонецЕсли;
			
	КонецЕсли;
	
	// Получим область подвала отчета и вычислим конечную строку расчета
	ОбластьПодвала = ТабличныйДокумент.Области.Найти("Подвал");
	
	Если ТипЗнч(ОбластьПодвала) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		// Область подвала найдена
		КонечнаяСтрока = ОбластьПодвала.Верх - 1;
		
	Иначе 
		
		// Область подвала не найдена
		КонечнаяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		
	КонецЕсли;
	
	ПоследняяПроверяемаяСтрока = НачальнаяСтрока + 100;
	
	// Код в комментарии записаный в 1 строку находится ниже этого комментария
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	//// Переберем все колонки отчета
	//Для ТекущаяКолонка = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
	//	
	//	АвтоОтступ = 0;
	//	
	//	КоличествоЗаполненныхСтрок = 0;
	//	
	//	// Переберем строки, которые будут использованы для расчета ширин колонок
	//	Для ТекущаяСтрока = НачальнаяСтрока По КонечнаяСтрока Цикл
	//		
	//		// Получим область текущей ячейки
	//		ОбластьЯчейки = ТабличныйДокумент.Область(ТекущаяСтрока, ТекущаяКолонка);
	//		
	//		// Получим текст ячейки
	//		ТекстЯчейки = ОбластьЯчейки.Текст;
	//		
	//		Если ПустаяСтрока(ТекстЯчейки) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ОбластьЯчейки.Лево <> ТекущаяКолонка Или ОбластьЯчейки.Верх <> ТекущаяСтрока Тогда
	//			
	//			// Данная ячейка принадлежит объединенным ячейкам и не является начальной ячейкой
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//		// обсчитывать все строки отчета очень накладно, обсчитаем первые 100
	//		// если в первых 100 строках нет заполненных ячеек, то ищем первые 1 заполненные
	//		// в большинстве случаев погрешность будет незначительной, а ускорение получим в несколько раз
	//		Если КоличествоЗаполненныхСтрок > 0 и ТекущаяСтрока > ПоследняяПроверяемаяСтрока Тогда
	//			Прервать;
	//		КонецЕсли;
	//		КоличествоЗаполненныхСтрок = КоличествоЗаполненныхСтрок + 1;
	//		
	//		Если КоличествоУровнейГруппировокСтрок > 0 И ТекущаяСтрока = НачалоДанных Тогда
	//			
	//			// Для первой строки с данными получим значение автоотступа
	//			АвтоОтступ = ОбластьЯчейки.АвтоОтступ;
	//			
	//		КонецЕсли;
	//
	//		ШиринаКолонки = 0;
	//		
	//		// Для каждой строки из текста ячейки рассчитаем количество символов в строке
	//		Для НомерСтрокиТекста = 1 По СтрЧислоСтрок(ТекстЯчейки) Цикл
	//			
	//			ШиринаТекстаЯчейки = СтрДлина(СтрПолучитьСтроку(ТекстЯчейки, НомерСтрокиТекста));
	//			
	//			Если НЕ мРассчитыватьШиринуКолонкиПоНазванию И ТекущаяСтрока < НачалоДанных И ШиринаТекстаЯчейки > 0 Тогда
	//				
	//				ШиринаТекстаЯчейки = мМинимальнаяШиринаКолонкиПоказатель;
	//				
	//			КонецЕсли;
	//			
	//			// Если используется автоотступ, то прибавим к ширине ячейки его величину
	//			Если АвтоОтступ <> Неопределено И АвтоОтступ > 0 Тогда
	//				
	//				ШиринаТекстаЯчейки = ШиринаТекстаЯчейки + КоличествоУровнейГруппировокСтрок * АвтоОтступ;
	//				
	//			КонецЕсли;
	//			
	//			ШиринаКолонки = Макс(ШиринаКолонки, ШиринаТекстаЯчейки);
	//
	//		КонецЦикла;
	//
	//		Если ШиринаКолонки > МаксимальнаяШиринаКолонки Тогда
	//			
	//			// Ограничим ширину колонки
	//			ШиринаКолонки = МаксимальнаяШиринаКолонки;
	//			
	//		КонецЕсли;
	//		
	//		Если ШиринаКолонки <> 0 Тогда
	//		// Ширина колонки рассчитана
	//			
	//			// Определим, сколько ячеек по ширине используется в области для текущей ячейки
	//			КоличествоКолонок = ОбластьЯчейки.Право - ОбластьЯчейки.Лево;
	//			
	//			// Переберем все ячейки, расположенные в области
	//			Для НомерКолонки = 0 По КоличествоКолонок Цикл
	//				
	//				Если ШириныКолонок.ВГраница() >= ТекущаяКолонка - 1 + НомерКолонки Тогда
	//					
	//					// В массиве ширин колонок уже был элемент для текущей колонки
	//					Если ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Неопределено Тогда
	//						
	//						// Значение ширины колонки еще не было установлено
	//						ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = ШиринаКолонки / (КоличествоКолонок + 1);
	//						
	//					Иначе
	//						
	//						// Значение ширины колонки уже было установлено
	//						// Вычислим максимум ширины колонки
	//						ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Макс(ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки], ШиринаКолонки / (КоличествоКолонок + 1));
	//						
	//					КонецЕсли;
	//					
	//				Иначе
	//					
	//					// В массиве ширин колонок еще не было элемента для данной колонки
	//					// Добавим элемент в массив ширин колонок
	//					ШириныКолонок.Вставить(ТекущаяКолонка - 1 + НомерКолонки, ШиринаКолонки / (КоличествоКолонок + 1));
	//					
	//				КонецЕсли;
	//				
	//			КонецЦикла;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;	// Конец цикла перебора строк
	//	
	//КонецЦикла;	// Конец цикла перебора колонок

	// Код записанный в 1 строку находится в комментарии расположенном выше
	// Для редактирования кода снимите комментарий
	// Подробнее про код в 1 строку см. http://infostart.ru/public/71130/
	Для ТекущаяКолонка = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл АвтоОтступ = 0; КоличествоЗаполненныхСтрок = 0; Для ТекущаяСтрока = НачальнаяСтрока По КонечнаяСтрока Цикл ОбластьЯчейки = ТабличныйДокумент.Область(ТекущаяСтрока, ТекущаяКолонка); ТекстЯчейки = ОбластьЯчейки.Текст; Если ПустаяСтрока(ТекстЯчейки) Тогда Продолжить; КонецЕсли; Если ОбластьЯчейки.Лево <> ТекущаяКолонка Или ОбластьЯчейки.Верх <> ТекущаяСтрока Тогда Продолжить; КонецЕсли; Если КоличествоЗаполненныхСтрок > 0 и ТекущаяСтрока > ПоследняяПроверяемаяСтрока Тогда Прервать; КонецЕсли; КоличествоЗаполненныхСтрок = КоличествоЗаполненныхСтрок + 1; Если КоличествоУровнейГруппировокСтрок > 0 И ТекущаяСтрока = НачалоДанных Тогда АвтоОтступ = ОбластьЯчейки.АвтоОтступ; КонецЕсли; ШиринаКолонки = 0; Для НомерСтрокиТекста = 1 По СтрЧислоСтрок(ТекстЯчейки) Цикл ШиринаТекстаЯчейки = СтрДлина(СтрПолучитьСтроку(ТекстЯчейки, НомерСтрокиТекста)); Если НЕ мРассчитыватьШиринуКолонкиПоНазванию И ТекущаяСтрока < НачалоДанных И ШиринаТекстаЯчейки > 0 Тогда ШиринаТекстаЯчейки = мМинимальнаяШиринаКолонкиПоказатель; КонецЕсли; Если АвтоОтступ <> Неопределено И АвтоОтступ > 0 Тогда ШиринаТекстаЯчейки = ШиринаТекстаЯчейки + КоличествоУровнейГруппировокСтрок * АвтоОтступ; КонецЕсли; ШиринаКолонки = Макс(ШиринаКолонки, ШиринаТекстаЯчейки); КонецЦикла; Если ШиринаКолонки > МаксимальнаяШиринаКолонки Тогда ШиринаКолонки = МаксимальнаяШиринаКолонки; КонецЕсли; Если ШиринаКолонки <> 0 Тогда КоличествоКолонок = ОбластьЯчейки.Право - ОбластьЯчейки.Лево; Для НомерКолонки = 0 По КоличествоКолонок Цикл Если ШириныКолонок.ВГраница() >= ТекущаяКолонка - 1 + НомерКолонки Тогда Если ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Неопределено Тогда ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = ШиринаКолонки / (КоличествоКолонок + 1); Иначе ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Макс(ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки], ШиринаКолонки / (КоличествоКолонок + 1)); КонецЕсли; Иначе ШириныКолонок.Вставить(ТекущаяКолонка - 1 + НомерКолонки, ШиринаКолонки / (КоличествоКолонок + 1)); КонецЕсли; КонецЦикла; КонецЕсли; КонецЦикла; КонецЦикла;
	
	// Переберем все элементы в массиве вычисленных ширин колонок
	Для ТекущаяКолонка = 0 По ШириныКолонок.ВГраница() Цикл
		
		Если ШириныКолонок[ТекущаяКолонка] <> Неопределено Тогда
			
			// Ширина колонок установлена
			// Установим ширину области ячеек
			Если ТабличныйДокумент.Область(, ТекущаяКолонка + 1, НачалоДанных, ТекущаяКолонка + 1).ШиринаКолонки < ШириныКолонок[ТекущаяКолонка] + 1 Тогда
				
				ТабличныйДокумент.Область(, ТекущаяКолонка + 1, НачалоДанных, ТекущаяКолонка + 1).ШиринаКолонки = ШириныКолонок[ТекущаяКолонка] + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // РасчетШириныКолонок()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

Процедура УстановитьРазмещениеВыбранногоПоля(Имя, Значение) Экспорт
	
	Если ПустаяСтрока(Имя) Тогда
		
		Возврат;
		
	ИначеЕсли НЕ мРазмещениеПоложениеВыбранныхПолей.Свойство(Имя) Тогда
		
		мРазмещениеПоложениеВыбранныхПолей.Вставить(Имя, Новый Структура("Размещение", Значение));
		
	ИначеЕсли НЕ мРазмещениеПоложениеВыбранныхПолей[Имя].Свойство("Размещение") Тогда
		
		мРазмещениеПоложениеВыбранныхПолей[Имя].Вставить("Размещение", Значение);
		
	Иначе
		
		мРазмещениеПоложениеВыбранныхПолей[Имя].Размещение = Значение;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьРазмещениеВыбранногоПоля()

Процедура УстановитьПоложениеВыбранногоПоля(Имя, Значение) Экспорт
	
	Если ПустаяСтрока(Имя) Тогда
		
		Возврат;
		
	ИначеЕсли НЕ мРазмещениеПоложениеВыбранныхПолей.Свойство(Имя) Тогда
		
		мРазмещениеПоложениеВыбранныхПолей.Вставить(Имя, Новый Структура("Положение", Значение));
		
	ИначеЕсли НЕ мРазмещениеПоложениеВыбранныхПолей[Имя].Свойство("Положение") Тогда
		
		мРазмещениеПоложениеВыбранныхПолей[Имя].Вставить("Положение", Значение);
		
	Иначе
		
		мРазмещениеПоложениеВыбранныхПолей[Имя].Положение = Значение;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПоложениеВыбранногоПоля()

Функция ПолучитьРазмещениеВыбранногоПоля(Имя) Экспорт
	
	РазмещениеПоУмолчанию = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями;
	
	Если ПустаяСтрока(Имя) Тогда
		
		Возврат РазмещениеПоУмолчанию;
		
	Иначе
		
		СтруктураНастройки = Неопределено;
		
		Если НЕ мРазмещениеПоложениеВыбранныхПолей.Свойство(Имя, СтруктураНастройки) Тогда
			
			Возврат РазмещениеПоУмолчанию;
			
		ИначеЕсли ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
			
			Размещение = Неопределено;
			
			Если НЕ СтруктураНастройки.Свойство("Размещение", Размещение) Тогда
				
				Возврат РазмещениеПоУмолчанию;
				
			Иначе
				
				Возврат Размещение;
				
			КонецЕсли;
			
		Иначе	
			
			Возврат РазмещениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьРазмещениеВыбранногоПоля()

Функция ПолучитьПоложениеВыбранногоПоля(Имя) Экспорт
	
	ПоложениеПоУмолчанию = НСтр("ru='После группировки'");
	
	Если ПустаяСтрока(Имя) Тогда
		
		Возврат ПоложениеПоУмолчанию;
		
	Иначе
		
		СтруктураНастройки = Неопределено;
		
		Если НЕ мРазмещениеПоложениеВыбранныхПолей.Свойство(Имя, СтруктураНастройки) Тогда
			
			Возврат ПоложениеПоУмолчанию;
			
		ИначеЕсли ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
			
			Положение = Неопределено;
			
			Если НЕ СтруктураНастройки.Свойство("Положение", Положение) Тогда
				
				Возврат ПоложениеПоУмолчанию;
				
			Иначе
				
				Возврат Положение;
				
			КонецЕсли;
			
		Иначе	
			
			Возврат ПоложениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьПоложениеВыбранногоПоля()

Процедура СкопироватьРазмещениеПоложениеВыбранныхПолей(Приемник, Источник)
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ТипЗнч(Приемник) = Тип("Структура") Тогда
			
			Приемник.Очистить();
			
		Иначе
			
			Приемник = Новый Структура;
			
		КонецЕсли;
		
		Для каждого ЭлементИсточника Из Источник Цикл
			
			Приемник.Вставить(ЭлементИсточника.Ключ, Новый Структура("Размещение, Положение", ЭлементИсточника.Значение.Размещение, ЭлементИсточника.Значение.Положение));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СкопироватьРазмещениеПоложениеВыбранныхПолей()

Процедура ВосстановитьДеревоПоказателей(Приемник, Источник)
	
	Если ТипЗнч(Источник) = Тип("ДеревоЗначений") Тогда
		
		Если ТипЗнч(Приемник) <> Тип("ДеревоЗначений") ИЛИ Приемник.Строки.Количество() = 0 Тогда
			
			Приемник = Источник.Скопировать();
			
		Иначе
			
			Для каждого ТекущийПоказатель Из Источник.Строки Цикл
								
				// Группа показателей
				Если ТекущийПоказатель.Строки.Количество() > 0 Тогда
					
					НайденнаяГруппаПоказателей = Приемник.Строки.Найти(ТекущийПоказатель.Имя, "Имя", Ложь);
					
					// В приемнике найдена группа показателей с требуемым именем
					Если НайденнаяГруппаПоказателей <> Неопределено Тогда
						
						НайденнаяГруппаПоказателей.Использование = ТекущийПоказатель.Использование;
						Попытка
							Приемник.Строки.Сдвинуть(НайденнаяГруппаПоказателей, Источник.Строки.Индекс(ТекущийПоказатель) - Приемник.Строки.Индекс(НайденнаяГруппаПоказателей));
						Исключение
						КонецПопытки;
						
						Для каждого Показатель Из ТекущийПоказатель.Строки Цикл
							
							НайденныйПоказатеmель = НайденнаяГруппаПоказателей.Строки.Найти(Показатель.Имя, "Имя", Ложь);
							
							// В группе показателей приемнике найден показатель с требуемым именем
							Если НайденныйПоказатеmель <> Неопределено Тогда
								
								НайденныйПоказатеmель.Использование = Показатель.Использование;
								Попытка
									НайденнаяГруппаПоказателей.Строки.Сдвинуть(НайденныйПоказатеmель, ТекущийПоказатель.Строки.Индекс(Показатель) - НайденнаяГруппаПоказателей.Строки.Индекс(НайденныйПоказатеmель));
								Исключение
								КонецПопытки;
								
							КонецЕсли;
											
						КонецЦикла;
						
					КонецЕсли;
									
				Иначе // Показатель
					
					НайденныйПоказатеmель = Приемник.Строки.Найти(ТекущийПоказатель.Имя, "Имя", Ложь);
					
					// В приемнике найден показатель с требуемым именем
					Если НайденныйПоказатеmель <> Неопределено Тогда
						
						НайденныйПоказатеmель.Использование = ТекущийПоказатель.Использование;
						Попытка
							Приемник.Строки.Сдвинуть(НайденныйПоказатеmель, Источник.Строки.Индекс(ТекущийПоказатель) - Приемник.Строки.Индекс(НайденныйПоказатеmель));
						Исключение
						КонецПопытки;
						
					КонецЕсли;
									
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьДеревоПоказателей()

Процедура УстановитьПометки(ТекущаяСтрока) Экспорт
	
	УстановитьПометкиПодчиненных(ТекущаяСтрока);
	УстановитьПометкиРодителей(ТекущаяСтрока);
	
КонецПроцедуры // УстановитьПометки()

Процедура УстановитьПометкиПодчиненных(СтрокаРодитель) Экспорт

	Использование = СтрокаРодитель.Использование;
	Подчиненные = СтрокаРодитель.Строки;

	Если Подчиненные.Количество() > 0 Тогда
		
		Для каждого ТекущаяСтрока Из Подчиненные Цикл
			
			ТекущаяСтрока.Использование = Использование;
			УстановитьПометкиПодчиненных(ТекущаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

Процедура УстановитьПометкиРодителей(Родитель) Экспорт

	Если Родитель = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Использование = Родитель.Использование;
	
	Если Родитель.Строки.Количество() Тогда

		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;

		Для каждого Строка Из Родитель.Строки Цикл
			
			Если Строка.Использование = 0 Тогда
				
				НайденыВыключенные = Истина;
				
			ИначеЕсли Строка.Использование = 1 Тогда
				
				НайденыВключенные  = Истина;
				
			КонецЕсли;
			
			Если НайденыВключенные И НайденыВыключенные Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			
			Использование = 2;
			
		ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
			
			Использование = 1;
			
		ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
			
			Использование = 0;
			
		ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
			
			Использование = 2;
			
		КонецЕсли;

	КонецЕсли; 

	Родитель.Использование = Использование;
	УстановитьПометкиРодителей(Родитель.Родитель);
	
КонецПроцедуры // УстановитьПометкиРодителей()

Процедура ДобавитьСвойстваИКатегорииДляПоля(ПутьКДанным, ИмяИзмерения, Представление, Назначение, НетКатегорий = Ложь, ТаблицаПолей = Неопределено) Экспорт
	
	Если ТаблицаПолей = Неопределено Тогда
		
		ТаблицаПолей = мТаблицаПолей;
		
	КонецЕсли;
	
	СтрокаТаблицыПолей = ТаблицаПолей.Добавить();
		
	СтрокаТаблицыПолей.ПутьКДанным = ПутьКДанным;
	СтрокаТаблицыПолей.ИмяИзмерения = ИмяИзмерения;
	СтрокаТаблицыПолей.Представление = Представление;
	СтрокаТаблицыПолей.Назначение = Назначение;
	СтрокаТаблицыПолей.НетКатегорий = НетКатегорий;
	
КонецПроцедуры // ДобавитьСвойстваИКатегорииДляПоля()

Процедура ДобавитьКонтактнуюИнформацияДляПоля(ПутьКДанным, ИмяИзмерения, Представление, ВидОбъекта, ТипОбъекта, ТаблицаПолей = Неопределено) Экспорт
	
	Если ТаблицаПолей = Неопределено Тогда
		
		ТаблицаПолей = мТаблицаПолейКонтактнаяИнформация;
		
	КонецЕсли;
	
	СтрокаТаблицыПолей = ТаблицаПолей.Добавить();
		
	СтрокаТаблицыПолей.ПутьКДанным = ПутьКДанным;
	СтрокаТаблицыПолей.ИмяИзмерения = ИмяИзмерения;
	СтрокаТаблицыПолей.Представление = Представление;
	СтрокаТаблицыПолей.ВидОбъекта = ВидОбъекта;
	СтрокаТаблицыПолей.ТипОбъекта = ТипОбъекта;
	
КонецПроцедуры // ДобавитьКонтактнуюИнформацияДляПоля()

Процедура ДобавитьДанныеОФизлицеДляПоля(ПутьКДанным, ИмяИзмерения, Представление, ТаблицаПолей = Неопределено) Экспорт
	
	Если ТаблицаПолей = Неопределено Тогда
		
		ТаблицаПолей = мТаблицаПолейДанныеОФизлице;
		
	КонецЕсли;
	
	СтрокаТаблицыПолей = ТаблицаПолей.Добавить();
		
	СтрокаТаблицыПолей.ПутьКДанным = ПутьКДанным;
	СтрокаТаблицыПолей.ИмяИзмерения = ИмяИзмерения;
	СтрокаТаблицыПолей.Представление = Представление;
	
КонецПроцедуры // ДобавитьКонтактнуюИнформацияДляПоля()

Процедура ОчиститьНастройкиПостроителя(ИзмеренияСтроки = Истина, ИзмеренияКолонки = Истина, ВыбранныеПоля = Истина, Порядок = Истина) Экспорт
	
	Если ИзмеренияСтроки Тогда
		
		ПостроительОтчета.ИзмеренияСтроки.Очистить();
		
	КонецЕсли;
	
	Если ИзмеренияКолонки Тогда
		
		ПостроительОтчета.ИзмеренияКолонки.Очистить();
		
	КонецЕсли;
	
	Если ВыбранныеПоля Тогда
		
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		
	КонецЕсли;
	
	Если Порядок Тогда
		
		ПостроительОтчета.Порядок.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьНастройкиПостроителя()

Функция ДобавитьИзмерениеСтроки(ПутьКДанным, Знач ТипИзмерения = Неопределено) Экспорт
	
	ТипИзмерения = ?(ТипИзмерения = Неопределено, ТипИзмеренияПостроителяОтчета.Элементы, ТипИзмерения);
	
	Попытка
		
		ПостроительОтчета.ИзмеренияСтроки.Добавить(ПутьКДанным,, ТипИзмерения);
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ДобавитьИзмерениеСтроки()

Функция ДобавитьИзмерениеКолонки(ПутьКДанным, Знач ТипИзмерения = Неопределено) Экспорт
	
	ТипИзмерения = ?(ТипИзмерения = Неопределено, ТипИзмеренияПостроителяОтчета.Элементы, ТипИзмерения);
	
	Попытка
	
		ПостроительОтчета.ИзмеренияКолонки.Добавить(ПутьКДанным,, ТипИзмерения);
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ДобавитьИзмерениеКолонки()

Функция ДобавитьОтбор(ПутьКДанным, Использование = Неопределено, ВидСравнения = Неопределено, Значение = Неопределено, ЗначениеС = Неопределено, ЗначениеПо = Неопределено, ИспользоватьВБыстрыхОтборах = Истина) Экспорт
	
	ДобавляемыйЭлементОтбора = Неопределено;
	
	Для каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
		
		Если ЭлементОтбора.ПутьКДанным = ПутьКДанным Тогда
			
			ДобавляемыйЭлементОтбора = ЭлементОтбора;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавляемыйЭлементОтбора = Неопределено Тогда
		
		Попытка
			
			ДобавляемыйЭлементОтбора = ПостроительОтчета.Отбор.Добавить(ПутьКДанным);
			
		Исключение
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ИспользоватьВБыстрыхОтборах Тогда
				
		Если мМассивБыстрыеОтборы = Неопределено Тогда
					
			мМассивБыстрыеОтборы = Новый Массив;
					
		КонецЕсли;
				
		Если мМассивБыстрыеОтборы.Найти(ДобавляемыйЭлементОтбора) = Неопределено Тогда
			
			мМассивБыстрыеОтборы.Добавить(ДобавляемыйЭлементОтбора);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		
		ДобавляемыйЭлементОтбора.Использование = Использование;
		
	КонецЕсли;
	
	Если ВидСравнения <> Неопределено Тогда
		
		ДобавляемыйЭлементОтбора.ВидСравнения = ВидСравнения;
		
	КонецЕсли;
	
	Если Значение <> Неопределено Тогда
		
		ДобавляемыйЭлементОтбора.Значение = Значение;
		
	КонецЕсли;
	
	Если ЗначениеС <> Неопределено Тогда
		
		ДобавляемыйЭлементОтбора.ЗначениеС = ЗначениеС;
		
	КонецЕсли;
	
	Если ЗначениеПо <> Неопределено Тогда
		
		ДобавляемыйЭлементОтбора.ЗначениеПо = ЗначениеПо;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДобавитьОтбор()

Функция ДобавитьДополнительноеПоле(ПутьКДанным, Размещение = Неопределено, Положение = 3) Экспорт
	
	Попытка
	
		ВыбранноеПоле = ПостроительОтчета.ВыбранныеПоля.Добавить(ПутьКДанным);
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Размещение = Неопределено Тогда
		
		УстановитьРазмещениеВыбранногоПоля(ВыбранноеПоле.Имя, ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями);
		
	Иначе
		
		УстановитьРазмещениеВыбранногоПоля(ВыбранноеПоле.Имя, Размещение);
		
	КонецЕсли;
	
	Если Положение = 1 Тогда
		
		УстановитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя, НСтр("ru='Перед группировкой'"));
		
	ИначеЕсли Положение = 2 Тогда
		
		УстановитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя, НСтр("ru='Вместо группировки'"));
		
	ИначеЕсли Положение = 3 Тогда
		
		УстановитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя, НСтр("ru='После группировки'"));
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДобавитьДополнительноеПоле()

Функция ДобавитьПорядок(ПутьКДанным, Знач Направление = Неопределено) Экспорт
	
	Направление = ?(Направление = Неопределено, НаправлениеСортировки.Возр, Направление);
	
	Попытка
	
		ПостроительОтчета.Порядок.Добавить(ПутьКДанным,,, Направление);
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ДобавитьПорядок()

Процедура ДобавитьПоказатель(ИмяПоля, ПредставлениеПоля = Неопределено, ВключенПоУмолчанию = Неопределено, ФорматнаяСтрока = Неопределено, ИмяГруппы = Неопределено, ПредставлениеГруппы = Неопределено, Ширина = 0) Экспорт
	
	Если ИмяГруппы <> Неопределено Тогда
		
		Группа = Показатели.Строки.Найти(ИмяГруппы, "Имя", Ложь);
		
		Если Группа = Неопределено Тогда
			
			Группа = Показатели.Строки.Добавить();
			Группа.Имя = ИмяГруппы;
			Группа.Использование = Ложь;
			
		КонецЕсли;
			
		Если ПредставлениеГруппы <> Неопределено Тогда
			
			Группа.Представление = СтрЗаменить(ПредставлениеГруппы, Символы.ПС, " ");
			Группа.ПредставлениеВОтчете = ПредставлениеГруппы;
			
		КонецЕсли;
		
		Показатель = Группа.Строки.Найти(ИмяПоля, "Имя");
		
		Если Показатель = Неопределено Тогда
			
			Показатель = Группа.Строки.Добавить();
			Показатель.Имя = ИмяПоля;
			
		КонецЕсли;
			
		Если ПредставлениеПоля <> Неопределено Тогда
			
			Показатель.Представление = СтрЗаменить(ПредставлениеПоля, Символы.ПС, " ");
			Показатель.ПредставлениеВОтчете = ПредставлениеПоля;
			
		КонецЕсли;
		
		Показатель.Ширина = Ширина;
		
		Если ВключенПоУмолчанию <> Неопределено Тогда
			
			Показатель.Использование = ВключенПоУмолчанию;
			
		КонецЕсли;
		
		Если ФорматнаяСтрока <> Неопределено Тогда
			
			Показатель.ФорматнаяСтрока = ФорматнаяСтрока;
			
		КонецЕсли;
		
	Иначе
		
		Показатель = Показатели.Строки.Найти(ИмяПоля, "Имя");
		
		Если Показатель = Неопределено Тогда
			
			Показатель = Показатели.Строки.Добавить();
			Показатель.Имя = ИмяПоля;
			
		КонецЕсли;
			
		Если ПредставлениеПоля <> Неопределено Тогда
			
			Показатель.Представление = СтрЗаменить(ПредставлениеПоля, Символы.ПС, " ");
			Показатель.ПредставлениеВОтчете = ПредставлениеПоля;
			
		КонецЕсли;
		
		Показатель.Ширина = Ширина;
		
		Если ВключенПоУмолчанию <> Неопределено Тогда
			
			Показатель.Использование = ВключенПоУмолчанию;
			
		КонецЕсли;
		
		Если ФорматнаяСтрока <> Неопределено Тогда
			
			Показатель.ФорматнаяСтрока = ФорматнаяСтрока;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПоказатель()

Процедура ДобавитьПолеГруппировка(Имя, Родитель, ПутьКДанным, Представление, Тип = Неопределено, Выражение = Неопределено) Экспорт
	
	Если мМассивПоляГруппировка = Неопределено Тогда
		
		мМассивПоляГруппировка = Новый Массив;
		
	КонецЕсли;
	
	мМассивПоляГруппировка.Добавить(Новый Структура("Имя, Родитель, ПутьКДанным, Представление, Тип, Выражение", Имя, Родитель, ПутьКДанным, Представление, Тип, Выражение));
	
КонецПроцедуры // ДобавитьДоступноеПоле()

Процедура ДобавитьПолеРесурс(Имя, ПутьКДанным, Представление, Итог = Неопределено) Экспорт
	
	Если мМассивПоляРесурс = Неопределено Тогда
		
		мМассивПоляРесурс = Новый Массив;
		
	КонецЕсли;
	
	мМассивПоляРесурс.Добавить(Новый Структура("Имя, ПутьКДанным, Представление, Итог", Имя, ПутьКДанным, Представление, Итог));
	
КонецПроцедуры // ДобавитьПолеРесурс()

Процедура УстановитьСвязьПолей(ПолеПутьКДанным, ПолеРодительПутьКДанным) Экспорт
	
	мСоответствиеСвязьПолей.Вставить(ПолеПутьКДанным, ПолеРодительПутьКДанным);
	
КонецПроцедуры // УстановитьСвязьПолей()

Процедура УстановитьСвязьПоляИИзмерения(ИмяПоля, ИмяИзмерения) Экспорт
	
	Если мСоответствиеПолейИИзмерений[ИмяПоля] = Неопределено Тогда
		
		мСоответствиеПолейИИзмерений.Вставить(ИмяПоля, Новый Структура);
		
	КонецЕсли;
	
	мСоответствиеПолейИИзмерений[ИмяПоля].Вставить(ИмяИзмерения);
		
КонецПроцедуры // УстановитьСвязьПоляИИзмерения()

Функция ПолеНачалоВыбора(Расшифровка = Неопределено, НачальноеЗначениеВыбора = Неопределено, Измерение = Ложь, Отбор = Ложь, Поле = Ложь, Порядок = Ложь, ДочерниеПоля = Истина) Экспорт
	
	ФормаВыборПоля = ПолучитьФорму("ФормаВыборПоля");
	ФормаВыборПоля.Расшифровка = Расшифровка;
	ФормаВыборПоля.НачальноеЗначениеВыбора = НачальноеЗначениеВыбора;
	
	ФормаВыборПоля.Измерение = Измерение;
	ФормаВыборПоля.Отбор = Отбор;
	ФормаВыборПоля.Поле = Поле;
	ФормаВыборПоля.Порядок = Порядок;
	ФормаВыборПоля.ДочерниеПоля = ДочерниеПоля;
	
	Возврат ФормаВыборПоля.ОткрытьМодально();
	
КонецФункции // ПолеНачалоВыбора()

Процедура ПолеОбработкаВыбора(Элемент, Выбор, ЭлементФормыТабличноеПоле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Выбор = Неопределено ИЛИ Выбор.Количество() = 0 Тогда
		
		ЭлементФормыТабличноеПоле.ЗакончитьРедактированиеСтроки(Истина);
		Возврат;
		
	КонецЕсли;
	
	Если Выбор.Количество() = 1 И ТипЗнч(Выбор[0].ПутьКДанным) <> Тип("Массив") Тогда
		
		Элемент.Значение = Выбор[0].ПутьКДанным;
		
	Иначе
		
		Для каждого ВыбранноеЗначение Из Выбор Цикл
			
			Если ТипЗнч(ВыбранноеЗначение.ПутьКДанным) = Тип("Массив") Тогда
				
				Для каждого ПутьКДанным Из ВыбранноеЗначение.ПутьКДанным Цикл
					
					Если ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.ИзмеренияСтроки" Тогда
						
						ДобавитьИзмерениеСтроки(ПутьКДанным);
						
					ИначеЕсли ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.ИзмеренияКолонки" Тогда
						
						ДобавитьИзмерениеКолонки(ПутьКДанным);
						
					ИначеЕсли ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.Отбор" Тогда
						
						ДобавитьОтбор(ПутьКДанным,,,,,, Ложь);
						
					ИначеЕсли ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.ВыбранныеПоля" Тогда
						
						ДобавитьДополнительноеПоле(ПутьКДанным);
						
					ИначеЕсли ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.Порядок" Тогда
						
						ДобавитьПорядок(ПутьКДанным);
					
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
			
				Если ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.ИзмеренияСтроки" Тогда
					
					ДобавитьИзмерениеСтроки(ВыбранноеЗначение.ПутьКДанным);
					
				ИначеЕсли ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.ИзмеренияКолонки" Тогда
					
					ДобавитьИзмерениеКолонки(ВыбранноеЗначение.ПутьКДанным);
					
				ИначеЕсли ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.Отбор" Тогда
						
					ДобавитьОтбор(ВыбранноеЗначение.ПутьКДанным,,,,,, Ложь);
					
				ИначеЕсли ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.ВыбранныеПоля" Тогда
					
					ДобавитьДополнительноеПоле(ВыбранноеЗначение.ПутьКДанным);
					
				ИначеЕсли ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.Порядок" Тогда
					
					ДобавитьПорядок(ВыбранноеЗначение.ПутьКДанным);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПолеОбработкаВыбора()

Процедура ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Отчет, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		Выбор = ПолеНачалоВыбора(Расшифровка,, Истина);
		
		Если Выбор = Неопределено ИЛИ Выбор.Количество() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ВыполнятьРасшифровку = Ложь;
		
		Для каждого ВыбранноеЗначение Из Выбор Цикл
			
			Если ЗначениеЗаполнено(ВыбранноеЗначение.Значение) Тогда
				
				ОткрытьЗначение(ВыбранноеЗначение.Значение);
				
			ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.ПутьКДанным) Тогда
				
				ВыполнятьРасшифровку = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ВыполнятьРасшифровку Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если Строка(Отчет) = "ВнешняяОбработкаОбъект." + Отчет.Метаданные().Имя Тогда
					
			ОтчетРасшифровка = ВнешниеОбработки.Создать(Отчет.ИспользуемоеИмяФайла);
					
		ИначеЕсли Строка(Отчет) = "ВнешнийОтчетОбъект." + Отчет.Метаданные().Имя Тогда
					
			ОтчетРасшифровка = ВнешниеОтчеты.Создать(Отчет.ИспользуемоеИмяФайла);
			
		Иначе
			
			ОтчетРасшифровка = Отчеты[Отчет.Метаданные().Имя].Создать();
			
		КонецЕсли;
				
		ОтчетРасшифровкаУниверсальный = (ЭтотОбъект.Метаданные() = Отчет.Метаданные());
		
		УниверсальныйОтчетРасшифровка = ?(ОтчетРасшифровкаУниверсальный, ОтчетРасшифровка, ОтчетРасшифровка.УниверсальныйОтчет);
		УниверсальныйОтчетТекущий = ?(ОтчетРасшифровкаУниверсальный, Отчет, Отчет.УниверсальныйОтчет);
		
		УниверсальныйОтчетРасшифровка.Интервалы = УниверсальныйОтчетТекущий.Интервалы.Скопировать();
		УниверсальныйОтчетРасшифровка.ВариантОформления = УниверсальныйОтчетТекущий.ВариантОформления;
		УниверсальныйОтчетРасшифровка.ИмяРегистра = УниверсальныйОтчетТекущий.ИмяРегистра;
		УниверсальныйОтчетРасшифровка.ИспользоватьСвойстваИКатегории = УниверсальныйОтчетТекущий.ИспользоватьСвойстваИКатегории;
		УниверсальныйОтчетРасшифровка.ВыводитьОбщиеИтоги = УниверсальныйОтчетТекущий.ВыводитьОбщиеИтоги;
		УниверсальныйОтчетРасшифровка.ОтрицательноеКрасным = УниверсальныйОтчетТекущий.ОтрицательноеКрасным;
		УниверсальныйОтчетРасшифровка.ПоказыватьЗаголовок = УниверсальныйОтчетТекущий.ПоказыватьЗаголовок;
		УниверсальныйОтчетРасшифровка.НеПоказыватьСправкуФормы = УниверсальныйОтчетТекущий.НеПоказыватьСправкуФормы;
		УниверсальныйОтчетРасшифровка.БыстрыйОтборРазвернут = УниверсальныйОтчетТекущий.БыстрыйОтборРазвернут;
		УниверсальныйОтчетРасшифровка.мРежимФормыНастройкиБезГруппировокКолонок = УниверсальныйОтчетТекущий.мРежимФормыНастройкиБезГруппировокКолонок;
		УниверсальныйОтчетРасшифровка.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		УниверсальныйОтчетРасшифровка.мНастройкаПериода = УниверсальныйОтчетТекущий.мНастройкаПериода;
		УниверсальныйОтчетРасшифровка.ДатаНач = УниверсальныйОтчетТекущий.ДатаНач;
		УниверсальныйОтчетРасшифровка.ДатаКон = УниверсальныйОтчетТекущий.ДатаКон;
		УниверсальныйОтчетРасшифровка.ИсточникДанных = УниверсальныйОтчетТекущий.ИсточникДанных;
		УниверсальныйОтчетРасшифровка.ИсточникиДанных = УниверсальныйОтчетТекущий.ИсточникиДанных;
		УниверсальныйОтчетРасшифровка.ОтключитьПроверкуНовыхВерсий = УниверсальныйОтчетТекущий.ОтключитьПроверкуНовыхВерсий;
		
		Если ОтчетРасшифровкаУниверсальный Тогда
			
			ОтчетРасшифровка.УстановитьНачальныеНастройки(Истина);
			
		Иначе
			
			ОтчетРасшифровка.УстановитьНачальныеНастройки(ДополнительныеПараметры);
			
		КонецЕсли;
		
		СкопироватьРазмещениеПоложениеВыбранныхПолей(УниверсальныйОтчетРасшифровка.мРазмещениеПоложениеВыбранныхПолей, УниверсальныйОтчетТекущий.мРазмещениеПоложениеВыбранныхПолей);
		
		УниверсальныйОтчетРасшифровка.Показатели = УниверсальныйОтчетТекущий.Показатели.Скопировать();
		
		УниверсальныйОтчетРасшифровка.ОчиститьНастройкиПостроителя();
		
		Для каждого ИзмерениеСтроки Из УниверсальныйОтчетТекущий.ПостроительОтчета.ИзмеренияСтроки Цикл
			
			УниверсальныйОтчетРасшифровка.ДобавитьИзмерениеСтроки(ИзмерениеСтроки.ПутьКДанным);
			
		КонецЦикла;
		
		Для каждого ИзмерениеКолонки Из УниверсальныйОтчетТекущий.ПостроительОтчета.ИзмеренияКолонки Цикл
			
			УниверсальныйОтчетРасшифровка.ДобавитьИзмерениеКолонки(ИзмерениеКолонки.ПутьКДанным);
			
		КонецЦикла;
		
		Для каждого ВыбранноеПоле Из УниверсальныйОтчетТекущий.ПостроительОтчета.ВыбранныеПоля Цикл
			
			УниверсальныйОтчетРасшифровка.ДобавитьДополнительноеПоле(ВыбранноеПоле.ПутьКДанным, ПолучитьРазмещениеВыбранногоПоля(ВыбранноеПоле.Имя), ПолучитьПоложениеВыбранногоПоля(ВыбранноеПоле.Имя));
			
		КонецЦикла;
		
		Для каждого ЭлементПорядка Из УниверсальныйОтчетТекущий.ПостроительОтчета.Порядок Цикл
			
			УниверсальныйОтчетРасшифровка.ДобавитьПорядок(ЭлементПорядка.ПутьКДанным, ЭлементПорядка.Направление);
			
		КонецЦикла;
		
		Для каждого ВыбранноеЗначение Из Выбор Цикл
			
			Если ЗначениеЗаполнено(ВыбранноеЗначение.ПутьКДанным) Тогда
				
				Если ТипЗнч(ВыбранноеЗначение.ПутьКДанным) = Тип("Массив") Тогда
					
					Для каждого ПутьКДанным Из ВыбранноеЗначение.ПутьКДанным Цикл
						
						Если ВыбранноеЗначение.ДетальнаяЗапись И ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 Тогда
							
							УниверсальныйОтчетРасшифровка.ВыводитьДетальныеЗаписи = Истина;
							УниверсальныйОтчетРасшифровка.ДобавитьДополнительноеПоле(ПутьКДанным);
							
						Иначе
							
							УниверсальныйОтчетРасшифровка.ДобавитьИзмерениеСтроки(ПутьКДанным);
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					Если ВыбранноеЗначение.ДетальнаяЗапись И ПостроительОтчета.ИзмеренияКолонки.Количество() = 0 Тогда
						
						УниверсальныйОтчетРасшифровка.ВыводитьДетальныеЗаписи = Истина;
						УниверсальныйОтчетРасшифровка.ДобавитьДополнительноеПоле(ВыбранноеЗначение.ПутьКДанным);
						
					Иначе
						
						УниверсальныйОтчетРасшифровка.ДобавитьИзмерениеСтроки(ВыбранноеЗначение.ПутьКДанным);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
			
		УниверсальныйОтчетТекущий.ПостроительОтчета.НастроитьРасшифровку(УниверсальныйОтчетРасшифровка.ПостроительОтчета, Расшифровка);
		
		Для каждого ЭлементОтбора Из УниверсальныйОтчетТекущий.ПостроительОтчета.Отбор Цикл
			
			Если НЕ ЭлементОтбора.Использование Тогда
			
				УниверсальныйОтчетРасшифровка.ДобавитьОтбор(ЭлементОтбора.ПутьКДанным,,,,,, Ложь);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ФормаОтчетРасшифровка = ОтчетРасшифровка.ПолучитьФорму();
		ФормаОтчетРасшифровка.Открыть();
		ФормаОтчетРасшифровка.ОбновитьОтчет();
			
	Иначе
		
		ОткрытьЗначение(Расшифровка);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровкиУниверсальногоОтчета()

Процедура УстановитьПериод(ДатаНач, ДатаКон, Периодичность, КоличествоПериодов) Экспорт
	
	Если Периодичность = 2 Тогда
		
		ТекущаяПериодичность = "НЕДЕЛЯ";
		
	ИначеЕсли Периодичность = 3 Тогда
		
		ТекущаяПериодичность = "ДЕКАДА";
		
	ИначеЕсли Периодичность = 4 Тогда
		
		ТекущаяПериодичность = "МЕСЯЦ";
		
	ИначеЕсли Периодичность = 5 Тогда
		
		ТекущаяПериодичность = "КВАРТАЛ";
		
	ИначеЕсли Периодичность = 6 Тогда
		
		ТекущаяПериодичность = "ПОЛУГОДИЕ";
		
	ИначеЕсли Периодичность = 7 Тогда
		
		ТекущаяПериодичность = "ГОД";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если ДатаНач = Дата('00010101') Тогда
		
		ДатаНач = ТекущаяДата();
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаНач, " + Строка(ТекущаяПериодичность) + "," + КоличествоПериодов + "), " + Строка(ТекущаяПериодичность) + ") КАК ДатаНач,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаНач, " + Строка(ТекущаяПериодичность) + "," + КоличествоПериодов + "), " + Строка(ТекущаяПериодичность) + ") КАК ДатаКон");
		
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
		
	ДатаНач = Выборка.ДатаНач;
	ДатаКон = Выборка.ДатаКон;
	
КонецПроцедуры // УстановитьПериод()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ НАСТРОЕК

Функция ВосстановитьНастройки(Объект, Отчет, Форма, ИмяОбъекта = Неопределено) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", лЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", ?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(Объект.мТекущаяНастройка = Неопределено, Неопределено, Объект.мТекущаяНастройка.НаименованиеНастройки));
	
	Результат = ВосстановлениеНастроек(СтруктураНастройки, "УниверсальныйОтчет_ТаблицаНастроек");
	
	Если Результат <> Неопределено Тогда
			
		Объект.мТекущаяНастройка = Результат;
		Отчет.ВосстановитьНастройкиИзСтруктуры(Результат.СохраненнаяНастройка);
		ВосстановитьПараметрыПечати(Объект, Отчет, Форма, Результат.СохраненнаяНастройка);
			
	Иначе
		
		Объект.мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
	ФормаУстановкаВводаПериода(Объект, Форма);
	
	Объект.УстановитьЗаголовокФормы(Объект, Отчет, Форма);

КонецФункции // ВосстановитьНастройки()

Процедура СохранитьНастройки(Объект, Отчет, Форма, ИмяОбъекта = Неопределено) Экспорт
	
	Перем СохраненнаяНастройка;
	
	Отчет.СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
	СохранитьПараметрыПечати(Объект, Отчет, Форма, СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", лЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", ?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(Объект.мТекущаяНастройка = Неопределено, Неопределено, Объект.мТекущаяНастройка.НаименованиеНастройки));
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);
	
	Результат = СохранениеНастроек(СтруктураНастройки, "УниверсальныйОтчет_ТаблицаНастроек");
	
	Если Результат <> Неопределено Тогда
			
		Объект.мТекущаяНастройка = Результат;
			
	Иначе
		
		Объект.мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
	Объект.УстановитьЗаголовокФормы(Объект, Отчет, Форма);
	
КонецПроцедуры // СохранитьНастройки()

Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	мНастройкаПериода.ДатаНачала = ДатаНач;
	мНастройкаПериода.ДатаОкончания = ДатаКон;
	
	СтруктураСНастройками.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	СтруктураСНастройками.Вставить("ИмяРегистра", ИмяРегистра);
	СтруктураСНастройками.Вставить("ИсточникДанных", ИсточникДанных);
	СтруктураСНастройками.Вставить("НастройкаПериода", мНастройкаПериода);
	СтруктураСНастройками.Вставить("ОтрицательноеКрасным", ОтрицательноеКрасным);
	СтруктураСНастройками.Вставить("ВыводитьОбщиеИтоги", ВыводитьОбщиеИтоги);
	СтруктураСНастройками.Вставить("ВыводитьДетальныеЗаписи", ВыводитьДетальныеЗаписи);
	СтруктураСНастройками.Вставить("ИспользоватьСвойстваИКатегории", ИспользоватьСвойстваИКатегории);
	СтруктураСНастройками.Вставить("Показатели", Показатели.Скопировать());
	СтруктураСНастройками.Вставить("ВариантОформления", ВариантОформления);
	СтруктураСНастройками.Вставить("Интервалы", Интервалы.Скопировать());
	СтруктураСНастройками.Вставить("РазмещениеПоложениеВыбранныхПолей");
	СкопироватьРазмещениеПоложениеВыбранныхПолей(СтруктураСНастройками.РазмещениеПоложениеВыбранныхПолей, мРазмещениеПоложениеВыбранныхПолей);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, Отчет = Неопределено) Экспорт
	
	Перем ДеревоПоказатели, ТаблицаИнтервалы, СохраненнаяНастройкаПериода;
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ИмяРегистра", ИмяРегистра);
	СтруктураСНастройками.Свойство("ИсточникДанных", ИсточникДанных);
	СтруктураСНастройками.Свойство("НастройкаПериода", СохраненнаяНастройкаПериода);
	
	Если ТипЗнч(СохраненнаяНастройкаПериода) = Тип("НастройкаПериода") Тогда
		
		мНастройкаПериода = СохраненнаяНастройкаПериода;
		
	КонецЕсли;
	
	ДатаНач = мНастройкаПериода.ДатаНачала;
	ДатаКон = мНастройкаПериода.ДатаОкончания;
	
	СтруктураСНастройками.Свойство("ИспользоватьСвойстваИКатегории", ИспользоватьСвойстваИКатегории);
	СтруктураСНастройками.Свойство("Интервалы", ТаблицаИнтервалы);
	
	Если ТипЗнч(ТаблицаИнтервалы) = Тип("ТаблицаЗначений") Тогда
		
		Интервалы = ТаблицаИнтервалы.Скопировать();
		
	КонецЕсли;
	
	Если Отчет = Неопределено Тогда
		
		УстановитьНачальныеНастройки(Истина);
		
	Иначе
		
		Отчет.УстановитьНачальныеНастройки();
		
	КонецЕсли;
	
	Если СтруктураСНастройками.Свойство("РазмещениеПоложениеВыбранныхПолей") Тогда
	
		СкопироватьРазмещениеПоложениеВыбранныхПолей(мРазмещениеПоложениеВыбранныхПолей, СтруктураСНастройками.РазмещениеПоложениеВыбранныхПолей);
		
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ОтрицательноеКрасным", ОтрицательноеКрасным);
	СтруктураСНастройками.Свойство("ВыводитьОбщиеИтоги", ВыводитьОбщиеИтоги);
	СтруктураСНастройками.Свойство("ВыводитьДетальныеЗаписи", ВыводитьДетальныеЗаписи);
	СтруктураСНастройками.Свойство("ВариантОформления", ВариантОформления);
	
	СтруктураСНастройками.Свойство("Показатели", ДеревоПоказатели);
	ВосстановитьДеревоПоказателей(Показатели, ДеревоПоказатели);
	
	ПостроительОтчета.УстановитьНастройки(СтруктураСНастройками.НастройкиПостроителя);
	
	Возврат Истина;
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

Процедура ВосстановитьДополнительныеНастройки(Объект, Отчет, ИмяОбъекта = Неопределено) Экспорт
	
	Объект.БыстрыйОтборРазвернут = ?(ВосстановитьЗначение(СтрЗаменить(?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта), ".", "_") + "_БыстрыйОтборРазвернут") = Истина, Истина, Ложь);
	Объект.ПоказыватьЗаголовок = ?(ВосстановитьЗначение(СтрЗаменить(?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта), ".", "_") + "_ПоказыватьЗаголовок") = Истина, Истина, Ложь);
	Объект.НеПоказыватьСправкуФормы = ?(ВосстановитьЗначение(СтрЗаменить(?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта), ".", "_") + "_НеПоказыватьСправкуФормы") = Истина, Истина, Ложь);
	Объект.ОтключитьПроверкуНовыхВерсий = ?(ВосстановитьЗначение("УниверсальныйОтчет_ОтключитьПроверкуНовыхВерсий") = Истина, Истина, Ложь);
	Объект.ВыполнитьЗамерПроизводительности = ?(ВосстановитьЗначение("УниверсальныйОтчет_ВыполнитьЗамерПроизводительности") = Истина, Истина, Ложь);
	
КонецПроцедуры // ВосстановитьДополнительныеНастройки()

Процедура СохранитьДополнительныеНастройки(Объект, Отчет, ИмяОбъекта = Неопределено) Экспорт
	
	СохранитьЗначение(СтрЗаменить(?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта), ".", "_") + "_БыстрыйОтборРазвернут", Объект.БыстрыйОтборРазвернут);
	СохранитьЗначение(СтрЗаменить(?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта), ".", "_") + "_ПоказыватьЗаголовок", Объект.ПоказыватьЗаголовок);
	СохранитьЗначение(СтрЗаменить(?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта), ".", "_") + "_НеПоказыватьСправкуФормы", Объект.НеПоказыватьСправкуФормы);
	СохранитьЗначение("УниверсальныйОтчет_ОтключитьПроверкуНовыхВерсий", Объект.ОтключитьПроверкуНовыхВерсий);
	СохранитьЗначение("УниверсальныйОтчет_ВыполнитьЗамерПроизводительности", Объект.ВыполнитьЗамерПроизводительности);
	
КонецПроцедуры // СохранитьДополнительныеНастройки()

Процедура ВосстановитьПараметрыПечати(Объект, Отчет, Форма, СтруктураСНастройками) Экспорт
	
	Перем СохраненныеПараметрыПечати;
	
	СтруктураСНастройками.Свойство("ПараметрыПечати", СохраненныеПараметрыПечати);
	
	Если ТипЗнч(СохраненныеПараметрыПечати) = Тип("Структура") Тогда
		
		ПолеТабличногоДокументаРезультат = Форма.ЭлементыФормы[мИмяЭлементаУправленияПолеТабличногоДокументаРезультат];
	
		// Ориентация
		СохраненныеПараметрыПечати.Свойство("ОриентацияСтраницы", ПолеТабличногоДокументаРезультат.ОриентацияСтраницы);
		
		// Масштаб
		СохраненныеПараметрыПечати.Свойство("МасштабПечати", ПолеТабличногоДокументаРезультат.МасштабПечати);
		СохраненныеПараметрыПечати.Свойство("АвтоМасштаб", ПолеТабличногоДокументаРезультат.АвтоМасштаб);
		
		// Поля
		СохраненныеПараметрыПечати.Свойство("ПолеСлева", ПолеТабличногоДокументаРезультат.ПолеСлева);
		СохраненныеПараметрыПечати.Свойство("ПолеСверху", ПолеТабличногоДокументаРезультат.ПолеСверху);
		СохраненныеПараметрыПечати.Свойство("ПолеСправа", ПолеТабличногоДокументаРезультат.ПолеСправа);
		СохраненныеПараметрыПечати.Свойство("ПолеСнизу", ПолеТабличногоДокументаРезультат.ПолеСнизу);
		
		// Колонтитулы
		СохраненныеПараметрыПечати.Свойство("РазмерКолонтитулаСверху", ПолеТабличногоДокументаРезультат.РазмерКолонтитулаСверху);
		СохраненныеПараметрыПечати.Свойство("РазмерКолонтитулаСнизу", ПолеТабличногоДокументаРезультат.РазмерКолонтитулаСнизу);
		
		// Экземпляров на страницу
		СохраненныеПараметрыПечати.Свойство("ЭкземпляровНаСтранице", ПолеТабличногоДокументаРезультат.ЭкземпляровНаСтранице);
		
		// Черно-белая печать
		СохраненныеПараметрыПечати.Свойство("ЧерноБелаяПечать", ПолеТабличногоДокументаРезультат.ЧерноБелаяПечать);
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьПараметрыПечати()

Процедура СохранитьПараметрыПечати(Объект, Отчет, Форма, СтруктураСНастройками) Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПолеТабличногоДокументаРезультат = Форма.ЭлементыФормы[мИмяЭлементаУправленияПолеТабличногоДокументаРезультат];
	
	// Ориентация
	ПараметрыПечати.Вставить("ОриентацияСтраницы", ПолеТабличногоДокументаРезультат.ОриентацияСтраницы);
	
	// Масштаб
	ПараметрыПечати.Вставить("МасштабПечати", ПолеТабличногоДокументаРезультат.МасштабПечати);
	ПараметрыПечати.Вставить("АвтоМасштаб", ПолеТабличногоДокументаРезультат.АвтоМасштаб);
	
	// Поля
	ПараметрыПечати.Вставить("ПолеСлева", ПолеТабличногоДокументаРезультат.ПолеСлева);
	ПараметрыПечати.Вставить("ПолеСверху", ПолеТабличногоДокументаРезультат.ПолеСверху);
	ПараметрыПечати.Вставить("ПолеСправа", ПолеТабличногоДокументаРезультат.ПолеСправа);
	ПараметрыПечати.Вставить("ПолеСнизу", ПолеТабличногоДокументаРезультат.ПолеСнизу);
	
	// Колонтитулы
	ПараметрыПечати.Вставить("РазмерКолонтитулаСверху", ПолеТабличногоДокументаРезультат.РазмерКолонтитулаСверху);
	ПараметрыПечати.Вставить("РазмерКолонтитулаСнизу", ПолеТабличногоДокументаРезультат.РазмерКолонтитулаСнизу);
	
	// Экземпляров на страницу
	ПараметрыПечати.Вставить("ЭкземпляровНаСтранице", ПолеТабличногоДокументаРезультат.ЭкземпляровНаСтранице);
	
	// Черно-белая печать
	ПараметрыПечати.Вставить("ЧерноБелаяПечать", ПолеТабличногоДокументаРезультат.ЧерноБелаяПечать);
	
	СтруктураСНастройками.Вставить("ПараметрыПечати", ПараметрыПечати);
	
КонецПроцедуры // СохранитьПараметрыПечати()

Процедура УправлениеОтображениемЭлементовФормы(Объект, Форма, КнопкаИмя = Неопределено) Экспорт
	
	Если Лев(КнопкаИмя, 23) = "КнопкаГруппировкиСтрок_" Тогда
		ТабличныйДокумент = Форма.ЭлементыФормы[Сред(КнопкаИмя, 28)];
		Форма.ТекущийЭлемент = ТабличныйДокумент;
		Уровень = Число(Форма.ЭлементыФормы[КнопкаИмя].Заголовок); // здесь записан нужный уровень
		ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(Уровень - 1);
		Возврат;
		
	ИначеЕсли Лев(КнопкаИмя, 25) = "КнопкаГруппировкиКолонок_" Тогда
		ТабличныйДокумент = Форма.ЭлементыФормы[Сред(КнопкаИмя, 30)];
		Форма.ТекущийЭлемент = ТабличныйДокумент;
		Уровень = Число(Форма.ЭлементыФормы[КнопкаИмя].Заголовок); // здесь записан нужный уровень
		ТабличныйДокумент.ПоказатьУровеньГруппировокКолонок(Уровень - 1);
		Возврат;
	КонецЕсли;
	
	Если КнопкаИмя = "БыстрыеОтборы" Тогда
		
		БыстрыйОтборРазвернут = НЕ БыстрыйОтборРазвернут;
		
	ИначеЕсли КнопкаИмя = "ЗаголовокОтчета" Тогда
		
		ПоказыватьЗаголовок = НЕ ПоказыватьЗаголовок;
		
	ИначеЕсли КнопкаИмя = "СправкаФормы" ИЛИ КнопкаИмя = "НадписиЗакрытьСправкуФормы" Тогда
		
		НеПоказыватьСправкуФормы = НЕ НеПоказыватьСправкуФормы;
		
	ИначеЕсли КнопкаИмя = "ЗамерПроизводительности" Тогда
		
		ВыполнитьЗамерПроизводительности = НЕ ВыполнитьЗамерПроизводительности;
		
	КонецЕсли;

	КнопкиКоманднойПанели = Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
	КнопкиПодменю = КнопкиКоманднойПанели.Подменю.Кнопки;
	
	КнопкиКоманднойПанели.ЗаголовокОтчета.Пометка = Объект.ПоказыватьЗаголовок;
	КнопкиПодменю.ЗаголовокОтчета.Пометка = Объект.ПоказыватьЗаголовок;
	
	КнопкиКоманднойПанели.БыстрыеОтборы.Пометка = Объект.БыстрыйОтборРазвернут;
	КнопкиПодменю.БыстрыеОтборы.Пометка = Объект.БыстрыйОтборРазвернут;
	
	Если КнопкиКоманднойПанели.Найти("СправкаФормы") <> Неопределено Тогда
		КнопкиКоманднойПанели.СправкаФормы.Пометка = НЕ Объект.НеПоказыватьСправкуФормы;
	КонецЕсли;
	
	Если КнопкиКоманднойПанели.Найти("ЗамерПроизводительности") <> Неопределено Тогда
		КнопкиКоманднойПанели.ЗамерПроизводительности.Пометка = Объект.ВыполнитьЗамерПроизводительности;
	КонецЕсли;
	
КонецПроцедуры // УправлениеОтображениемЭлементовФормы()

Процедура ДобавитьПанельБыстрыеОтборы(Объект, Форма) Экспорт
	
	КоличествоБыстрыхОтборов = 0;
	МаксимальноеКоличествоБыстрыхОтборов = 5;
	
	ЭлементУправленияВысота = 19;
	ИнтервалМеждуЭлементамиУправленияВертикальный = 5;
	ИнтервалМеждуЭлементамиУправленияГоризонтальный = 5;
	
	ФлажокИспользованиеШирина = 190;
	ПолеВводаВидСравненияШирина = 180;
	
	ЭлементУправления = Форма.ЭлементыФормы[мИмяЭлементаУправленияБыстрыеОтборы];
	
	Если Форма.ЭлементыФормы.Найти("ПанельБыстрыеОтборы") <> Неопределено Тогда
		
		Если Форма.ЭлементыФормы.Найти("ПолеВводаВидСравнения1") <> Неопределено Тогда
			
			ПолеВводаВидСравненияШирина = Форма.ЭлементыФормы.ПолеВводаВидСравнения1.Ширина;
			
		КонецЕсли;
		
		ЭлементыФормы = Форма.ЭлементыФормы;
		ИмяТабличногоДокумента = ЭлементыФормы[мИмяЭлементаУправленияПолеТабличногоДокументаРезультат].Имя;
		
		// Удалим старые кнопки
		Для Индекс = 1 По ЭлементовГруппировокСтрок Цикл
			ИмяКнопки = "КнопкаГруппировкиСтрок_" + Формат(Индекс, "ЧЦ=3; ЧН=; ЧВН=") + "_" + ИмяТабличногоДокумента;
			ТекЭлемент = ЭлементыФормы.Найти(ИмяКнопки);
			Если ТекЭлемент <> Неопределено Тогда
				ЭлементыФормы.Удалить(ТекЭлемент);
			КонецЕсли;
		КонецЦикла;
		
		// Удалим старые кнопки
		Для Индекс = 1 По ЭлементовГруппировокКолонок Цикл
			ИмяКнопки = "КнопкаГруппировкиКолонок_" + Формат(Индекс, "ЧЦ=3; ЧН=; ЧВН=") + "_" + ИмяТабличногоДокумента;
			ТекЭлемент = ЭлементыФормы.Найти(ИмяКнопки);
			Если ТекЭлемент <> Неопределено Тогда
				ЭлементыФормы.Удалить(ТекЭлемент);
			КонецЕсли;
		КонецЦикла;
		
		ЭлементовГруппировокСтрок = 0;
		ЭлементовГруппировокКолонок = 0;
		
		ЭлементУправления.Верх = Форма.ЭлементыФормы.ПанельБыстрыеОтборы.Верх;
		ЭлементУправления.Высота = ЭлементУправления.Высота + Форма.ЭлементыФормы.ПанельБыстрыеОтборы.Высота;
		
		ЭлементУправления.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Форма.Панель, ГраницаЭлементаУправления.Верх);
		
		Форма.ЭлементыФормы.Удалить(Форма.ЭлементыФормы.ПанельБыстрыеОтборы);
		
	КонецЕсли;
	
	КоличествоБыстрыхОтборов = Мин(МаксимальноеКоличествоБыстрыхОтборов, ?(мМассивБыстрыеОтборы = Неопределено, 0, мМассивБыстрыеОтборы.Количество()));
	
	Если КоличествоБыстрыхОтборов = 0 Тогда
		
		ВысотаПанелиБыстрыеОтборы = ЭлементУправленияВысота + ИнтервалМеждуЭлементамиУправленияВертикальный;
		
	Иначе
		
		ВысотаПанелиБыстрыеОтборы = КоличествоБыстрыхОтборов * (ЭлементУправленияВысота + ИнтервалМеждуЭлементамиУправленияВертикальный);
		
	КонецЕсли;
	
	ЕстьПанельСправкаФормы = (Форма.ЭлементыФормы.Найти("ПанельСправкаФормы") <> Неопределено);

	ПанельВерх = ЭлементУправления.Верх;
	ПанельЛево = ЭлементУправления.Лево;
	ПанельШирина = ЭлементУправления.Ширина + ?(ЕстьПанельСправкаФормы, Форма.ЭлементыФормы.РазделительСправкаФормы.Ширина + Форма.ЭлементыФормы.ПанельСправкаФормы.Ширина, 0);
	ПанельВысота = ВысотаПанелиБыстрыеОтборы;
		
	ПанельБыстрыеОтборы = Форма.ЭлементыФормы.Добавить(Тип("Панель"), "ПанельБыстрыеОтборы");
	ПанельБыстрыеОтборы.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ПанельБыстрыеОтборы.Верх = ПанельВерх;
	ПанельБыстрыеОтборы.Лево = ПанельЛево;
	ПанельБыстрыеОтборы.Ширина = ПанельШирина;
	ПанельБыстрыеОтборы.Высота = ПанельВысота;
	ПанельБыстрыеОтборы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Лево);
	ПанельБыстрыеОтборы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
	
	ЭлементУправления.Высота = ЭлементУправления.Высота - ПанельБыстрыеОтборы.Высота;
	ЭлементУправления.Верх = ПанельБыстрыеОтборы.Верх + ПанельБыстрыеОтборы.Высота;
	ЭлементУправления.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Низ);
	
	Если ЕстьПанельСправкаФормы Тогда
		Форма.ЭлементыФормы.ПанельСправкаФормы.Высота = ЭлементУправления.Высота;
		Форма.ЭлементыФормы.ПанельСправкаФормы.Верх = ЭлементУправления.Верх;
		Форма.ЭлементыФормы.ПанельСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Низ);
		Форма.ЭлементыФормы.РазделительСправкаФормы.Высота = ЭлементУправления.Высота;
		Форма.ЭлементыФормы.РазделительСправкаФормы.Верх = ЭлементУправления.Верх;
		Форма.ЭлементыФормы.РазделительСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Низ);
	КонецЕсли;
	
	Если КоличествоБыстрыхОтборов = 0 Тогда
		
		// Надпись об отсутствии быстрых отборов
		НадписьОтборыОтсутствуют = Форма.ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьОтборыОтсутствуют",, ПанельБыстрыеОтборы);
		НадписьОтборыОтсутствуют.Верх = 0;
		НадписьОтборыОтсутствуют.Высота = ЭлементУправленияВысота;
		НадписьОтборыОтсутствуют.Лево = 0;
		НадписьОтборыОтсутствуют.Ширина = ПанельБыстрыеОтборы.Ширина - 1;
		НадписьОтборыОтсутствуют.Заголовок = НСтр("ru = 'Отчет не содержит быстрых отборов'");
		НадписьОтборыОтсутствуют.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		НадписьОтборыОтсутствуют.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		
		НадписьОтборыОтсутствуют.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Лево);
		НадписьОтборыОтсутствуют.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Право);
	
	Иначе
		
		Индекс = 1;
		
		Для каждого ЭлементОтбора Из мМассивБыстрыеОтборы Цикл
			
			Если ПостроительОтчета.Отбор.Найти(ЭлементОтбора.Имя) = Неопределено Тогда
				
				Если НЕ ДобавитьОтбор(ЭлементОтбора.Имя,,,,,, Ложь) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
				
			// Использование
			ФлажокИспользование = Форма.ЭлементыФормы.Добавить(Тип("Флажок"), "ФлажокИспользование" + Формат(Индекс, "ЧГ=0"),, ПанельБыстрыеОтборы);
			ФлажокИспользование.Верх = (ЭлементУправленияВысота + ИнтервалМеждуЭлементамиУправленияВертикальный) * (Индекс - 1);
			ФлажокИспользование.Высота = ЭлементУправленияВысота;
			ФлажокИспользование.Ширина = ФлажокИспользованиеШирина;
			ФлажокИспользование.Заголовок = ЭлементОтбора.Представление;
			ФлажокИспользование.Данные = мПутьКПостроителюОтчета + ".ПостроительОтчета.Отбор." + ЭлементОтбора.Имя + ".Использование";
			
			// Вид сравнения
			ПолеВводаВидСравнения = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ПолеВводаВидСравнения" + Формат(Индекс, "ЧГ=0"),, ПанельБыстрыеОтборы);
			ПолеВводаВидСравнения.Лево = ФлажокИспользование.Лево + ФлажокИспользование.Ширина + ИнтервалМеждуЭлементамиУправленияГоризонтальный;
			ПолеВводаВидСравнения.Верх = (ЭлементУправленияВысота + ИнтервалМеждуЭлементамиУправленияВертикальный) * (Индекс - 1);
			ПолеВводаВидСравнения.Высота = ЭлементУправленияВысота;
			ПолеВводаВидСравнения.Ширина = ПолеВводаВидСравненияШирина;
			ПолеВводаВидСравнения.Данные = мПутьКПостроителюОтчета + ".ПостроительОтчета.Отбор." + ЭлементОтбора.Имя + ".ВидСравнения";
			
			ПолеВводаВидСравнения.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ФлажокИспользование, ГраницаЭлементаУправления.Право);
			ПолеВводаВидСравнения.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Лево, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Право);
			
			ПолеВводаВидСравнения.УстановитьДействие("ПриИзменении", ?(мДействиеПолеВводаВидСравненияПриИзменении = Неопределено, Новый Действие("ПолеВводаВидСравненияПриИзменении"), мДействиеПолеВводаВидСравненияПриИзменении));
				
			// Значение
			ПолеВводаЗначение = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ПолеВводаЗначение" + Формат(Индекс, "ЧГ=0"),, ПанельБыстрыеОтборы);
			ПолеВводаЗначение.Лево = ПолеВводаВидСравнения.Лево + ПолеВводаВидСравнения.Ширина + ИнтервалМеждуЭлементамиУправленияГоризонтальный;
			ПолеВводаЗначение.Верх = (ЭлементУправленияВысота + ИнтервалМеждуЭлементамиУправленияВертикальный) * (Индекс - 1);
			ПолеВводаЗначение.Высота = ЭлементУправленияВысота;
			ПолеВводаЗначение.Ширина = ПанельШирина - 1 - ПолеВводаЗначение.Лево;
			ПолеВводаЗначение.Данные = мПутьКПостроителюОтчета + ".ПостроительОтчета.Отбор." + ЭлементОтбора.Имя + ".Значение";
			
			ПолеВводаЗначение.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПолеВводаВидСравнения, ГраницаЭлементаУправления.Право);
			ПолеВводаЗначение.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Право);
			
			ПолеВводаЗначение.УстановитьДействие("ПриИзменении", ?(мДействиеПолеВводаЗначениеПриИзменении = Неопределено, Новый Действие("ПолеВводаЗначениеПриИзменении"), мДействиеПолеВводаЗначениеПриИзменении));
			
			// Значение с
			ПолеВводаЗначениеС = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ПолеВводаЗначениеС" + Формат(Индекс, "ЧГ=0"),, ПанельБыстрыеОтборы);
			ПолеВводаЗначениеС.Лево = ПолеВводаВидСравнения.Лево + ПолеВводаВидСравнения.Ширина + ИнтервалМеждуЭлементамиУправленияГоризонтальный;
			ПолеВводаЗначениеС.Верх = (ЭлементУправленияВысота + ИнтервалМеждуЭлементамиУправленияВертикальный) * (Индекс - 1);
			ПолеВводаЗначениеС.Высота = ЭлементУправленияВысота;
			ПолеВводаЗначениеС.Ширина = Цел((ПанельШирина - 1 - ПолеВводаЗначениеС.Лево - ИнтервалМеждуЭлементамиУправленияГоризонтальный) / 2);
			ПолеВводаЗначениеС.Данные = мПутьКПостроителюОтчета + ".ПостроительОтчета.Отбор." + ЭлементОтбора.Имя + ".ЗначениеС";
			
			ПолеВводаЗначениеС.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПолеВводаВидСравнения, ГраницаЭлементаУправления.Право);
			ПолеВводаЗначениеС.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Лево, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Право);
			
			ПолеВводаЗначениеС.УстановитьДействие("ПриИзменении", ?(мДействиеПолеВводаЗначениеПриИзменении = Неопределено, Новый Действие("ПолеВводаЗначениеПриИзменении"), мДействиеПолеВводаЗначениеПриИзменении));
			
			// Значение по
			ПолеВводаЗначениеПо = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ПолеВводаЗначениеПо" + Формат(Индекс, "ЧГ=0"),, ПанельБыстрыеОтборы);
			ПолеВводаЗначениеПо.Лево = ПолеВводаЗначениеС.Лево + ПолеВводаЗначениеС.Ширина + ИнтервалМеждуЭлементамиУправленияГоризонтальный;
			ПолеВводаЗначениеПо.Верх = (ЭлементУправленияВысота + ИнтервалМеждуЭлементамиУправленияВертикальный) * (Индекс - 1);
			ПолеВводаЗначениеПо.Высота = ЭлементУправленияВысота;
			ПолеВводаЗначениеПо.Ширина = ПанельШирина - 1 - ПолеВводаЗначениеПо.Лево;
			ПолеВводаЗначениеПо.Данные = мПутьКПостроителюОтчета + ".ПостроительОтчета.Отбор." + ЭлементОтбора.Имя + ".ЗначениеПо";
			
			ПолеВводаЗначениеПо.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПолеВводаЗначениеС, ГраницаЭлементаУправления.Право);
			ПолеВводаЗначениеПо.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельБыстрыеОтборы, ГраницаЭлементаУправления.Право);
			
			ПолеВводаЗначениеПо.УстановитьДействие("ПриИзменении", ?(мДействиеПолеВводаЗначениеПриИзменении = Неопределено, Новый Действие("ПолеВводаЗначениеПриИзменении"), мДействиеПолеВводаЗначениеПриИзменении));
				
			ИнициализацияПолейВводаЗначение(ПолеВводаВидСравнения, Форма);
			
			Индекс = Индекс + 1;
			
			Если Индекс > МаксимальноеКоличествоБыстрыхОтборов Тогда
				
				Прервать;
				
			КонецЕсли;
				
		КонецЦикла;
	
	КонецЕсли;
	
	ТабличныйДокумент = Форма.ЭлементыФормы[мИмяЭлементаУправленияПолеТабличногоДокументаРезультат];
	СгенерироватьКнопкиУправленияГруппировкой(ТабличныйДокумент);
	
КонецПроцедуры // ДобавитьПанельБыстрыеОтборы()

Процедура ДобавитьПанельДополнительныеЭлементыФормы(Форма, СоставПанелиДополнительныхЭлементовФормы) Экспорт
	
	ЭлементУправленияВысота = 19;
	ИнтервалМеждуЭлементамиУправленияВертикальный = 5;
	ИнтервалМеждуЭлементамиУправленияГоризонтальный = 5;
	
	Если СоставПанелиДополнительныхЭлементовФормы = Неопределено ИЛИ СоставПанелиДополнительныхЭлементовФормы.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВысотаПанелиДополнительныеЭлементыФормы = СоставПанелиДополнительныхЭлементовФормы.Количество() * ИнтервалМеждуЭлементамиУправленияВертикальный + СоставПанелиДополнительныхЭлементовФормы.Количество() * ЭлементУправленияВысота;
	
	ЭлементУправления = Форма.ЭлементыФормы[мИмяЭлементаУправленияДополнительныеЭлементы];

	ПанельВерх = ЭлементУправления.Верх;
	ПанельЛево = ЭлементУправления.Лево;
	ПанельШирина = ЭлементУправления.Ширина;
	ПанельВысота = ВысотаПанелиДополнительныеЭлементыФормы;
		
	ПанельДополнительныеЭлементыФормы = Форма.ЭлементыФормы.Добавить(Тип("Панель"), "ПанельДополнительныеЭлементыФормы");
	ПанельДополнительныеЭлементыФормы.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ПанельДополнительныеЭлементыФормы.Верх = ПанельВерх;
	ПанельДополнительныеЭлементыФормы.Лево = ПанельЛево;
	ПанельДополнительныеЭлементыФормы.Ширина = ПанельШирина;
	ПанельДополнительныеЭлементыФормы.Высота = ПанельВысота;
	ПанельДополнительныеЭлементыФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Лево);
	ПанельДополнительныеЭлементыФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
		
	ЭлементУправления.Высота = ЭлементУправления.Высота - ПанельДополнительныеЭлементыФормы.Высота - ИнтервалМеждуЭлементамиУправленияВертикальный;
	ЭлементУправления.Верх = ПанельДополнительныеЭлементыФормы.Верх + ПанельДополнительныеЭлементыФормы.Высота + ИнтервалМеждуЭлементамиУправленияВертикальный;
	ЭлементУправления.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельДополнительныеЭлементыФормы, ГраницаЭлементаУправления.Низ);
	
	ИндексГруппы = 1;
	
	Для каждого ГруппаЭлементов Из СоставПанелиДополнительныхЭлементовФормы Цикл
		
		ЛеваяГраницаПредыдущегоЭлемента = 0;
		ШиринаПредыдущегоЭлемента = 0;
		
		// Группа
		Если ГруппаЭлементов.Свойство("Имя") И НЕ ПустаяСтрока(ГруппаЭлементов.Имя) Тогда
			
			НадписьГруппаЭлементов = Форма.ЭлементыФормы.Добавить(Тип("Надпись"), ГруппаЭлементов.Имя,, ПанельДополнительныеЭлементыФормы);
			НадписьГруппаЭлементов.Верх = (ЭлементУправленияВысота + ИнтервалМеждуЭлементамиУправленияВертикальный) * (ИндексГруппы - 1);
			НадписьГруппаЭлементов.Высота = ЭлементУправленияВысота;
			
			Если ГруппаЭлементов.Свойство("Ширина") Тогда
				
				НадписьГруппаЭлементов.Ширина = ГруппаЭлементов.Ширина;
				
			КонецЕсли;
			
			Если ГруппаЭлементов.Свойство("Заголовок") Тогда
				
				НадписьГруппаЭлементов.Заголовок = ГруппаЭлементов.Заголовок;
				
			КонецЕсли;
			
			ЛеваяГраницаПредыдущегоЭлемента = НадписьГруппаЭлементов.Лево;
			ШиринаПредыдущегоЭлемента = НадписьГруппаЭлементов.Ширина;
			
		КонецЕсли;
		
		Для каждого ЭлементГруппы Из ГруппаЭлементов.СоставГруппы Цикл
			
			Если ЭлементГруппы.Свойство("ЭлементГруппы") И НЕ ЭлементГруппы.Видимость Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Элемент группы
			Если ЭлементГруппы.Свойство("Имя") И НЕ ПустаяСтрока(ЭлементГруппы.Имя) Тогда
				
				ЭлементГруппыПереключатель = Форма.ЭлементыФормы.Добавить(Тип("Переключатель"), ЭлементГруппы.Имя,, ПанельДополнительныеЭлементыФормы);
				ЭлементГруппыПереключатель.Лево = ЛеваяГраницаПредыдущегоЭлемента + ШиринаПредыдущегоЭлемента + ИнтервалМеждуЭлементамиУправленияГоризонтальный;
				ЭлементГруппыПереключатель.Верх = (ЭлементУправленияВысота + ИнтервалМеждуЭлементамиУправленияВертикальный) * (ИндексГруппы - 1);
				ЭлементГруппыПереключатель.Высота = ЭлементУправленияВысота;
				
				Если ЭлементГруппы.Свойство("Ширина") Тогда
						
					ЭлементГруппыПереключатель.Ширина = ЭлементГруппы.Ширина;
						
				КонецЕсли;
				
				Если ЭлементГруппы.Свойство("Данные") Тогда
				
					ЭлементГруппыПереключатель.Данные = ЭлементГруппы.Данные;
					
				КонецЕсли;
				
				Если ЭлементГруппы.Свойство("ПервыйВГруппе") Тогда
				
					ЭлементГруппыПереключатель.ПервыйВГруппе = ЭлементГруппы.ПервыйВГруппе;
					
				КонецЕсли;
				
				Если ЭлементГруппы.Свойство("ВыбираемоеЗначение") Тогда
				
					ЭлементГруппыПереключатель.ВыбираемоеЗначение = ЭлементГруппы.ВыбираемоеЗначение;
					
				КонецЕсли;
				
				Если ЭлементГруппы.Свойство("Видимость") Тогда
				
					ЭлементГруппыПереключатель.Видимость = ЭлементГруппы.Видимость;
					
				КонецЕсли;
				
				Если ЭлементГруппы.Свойство("Доступность") Тогда
				
					ЭлементГруппыПереключатель.Доступность = ЭлементГруппы.Доступность;
					
				КонецЕсли;
				
				Если ЭлементГруппы.Свойство("Заголовок") Тогда
				
					ЭлементГруппыПереключатель.Заголовок = ЭлементГруппы.Заголовок;
					
				КонецЕсли;
				
				Если ЭлементГруппы.Свойство("ДействиеПриИзменении") Тогда
				
					ЭлементГруппыПереключатель.УстановитьДействие("ПриИзменении", ЭлементГруппы.ДействиеПриИзменении);
					
				КонецЕсли;
				
				ЛеваяГраницаПредыдущегоЭлемента = ЭлементГруппыПереключатель.Лево;
				ШиринаПредыдущегоЭлемента = ЭлементГруппыПереключатель.Ширина;
				
				Попытка
					
					Форма.ЭтотОбъект[ЭлементГруппы.Данные] = Форма.ЭтотОбъект[ЭлементГруппы.Данные];
					
				Исключение
					
					Попытка
						
						Форма[ЭлементГруппы.Данные] = Форма[ЭлементГруппы.Данные];
						
					Исключение
						
					КонецПопытки;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИндексГруппы = ИндексГруппы + 1;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПанельДополнительныеЭлементыФормы()

Процедура ДобавитьПанельСправкаФормы(Объект, Форма) Экспорт
	
	Если мДействиеКоманднаяПанельФормыСправкаФормы <> Неопределено Тогда
		
		Если Форма.ОтчетОбъект.Метаданные().Макеты.Найти("МакетВстроеннойСправки") <> Неопределено Тогда
			
			Если ПустаяСтрока(Форма.ОтчетОбъект.ПолучитьМакет("МакетВстроеннойСправки").ПолучитьТекст()) Тогда
			
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Если ПустаяСтрока(Форма.ОтчетОбъект.ПолучитьТекстСправкиФормы()) Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;

		Если Форма.ЭлементыФормы.Найти("КоманднаяПанельФормы") <> Неопределено Тогда
			
			Если Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Найти("Справка") <> Неопределено Тогда
				
				КнопкаСправкаФормы = Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Справка;
				КнопкаСправкаФормы.Имя = "СправкаФормы";
				КнопкаСправкаФормы.Текст = НСтр("ru = 'Показать/скрыть справку'");
				КнопкаСправкаФормы.Подсказка = НСтр("ru = 'Показать/скрыть справку'");
				КнопкаСправкаФормы.Пояснение = НСтр("ru = 'Показать/скрыть справку'");
				КнопкаСправкаФормы.Картинка = мКартинкаВстроеннойСправкиФормы;
				КнопкаСправкаФормы.Действие = мДействиеКоманднаяПанельФормыСправкаФормы;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ШиринаПанелиСправкаФормы = 224;
	ШиринаРазделителяСправкаФормы = 6;
	ВысотаНадписиЗакрытьСправкуФормы = 35;
	
	ЭлементУправления = Форма.ЭлементыФормы[мИмяЭлементаУправленияДополнительныеЭлементы];

	// ПанельСправкаФормы
	ПанельСправкаФормыВерх = ЭлементУправления.Верх;
	ПанельСправкаФормыЛево = ЭлементУправления.Лево + ЭлементУправления.Ширина - ШиринаПанелиСправкаФормы;
	ПанельСправкаФормыШирина = ШиринаПанелиСправкаФормы;
	ПанельСправкаФормыВысота = ЭлементУправления.Высота;
		
	ПанельСправкаФормы = Форма.ЭлементыФормы.Добавить(Тип("Панель"), "ПанельСправкаФормы");
	ПанельСправкаФормы.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ПанельСправкаФормы.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
	ПанельСправкаФормы.Верх = ПанельСправкаФормыВерх;
	ПанельСправкаФормы.Лево = ПанельСправкаФормыЛево;
	ПанельСправкаФормы.Ширина = ПанельСправкаФормыШирина;
	ПанельСправкаФормы.Высота = ПанельСправкаФормыВысота;
	
	// ВстроеннаяСправка
	ВстроеннаяСправка = Форма.ЭлементыФормы.Добавить(Тип("ПолеHTMLДокумента"), "ВстроеннаяСправка",, ПанельСправкаФормы);
	ВстроеннаяСправка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ВстроеннаяСправка.Верх = 0;
	ВстроеннаяСправка.Лево = 0;
	ВстроеннаяСправка.Ширина = ПанельСправкаФормыШирина;
	ВстроеннаяСправка.Высота = ПанельСправкаФормыВысота - ВысотаНадписиЗакрытьСправкуФормы;
	ВстроеннаяСправка.УстановитьДействие("onclick", мДействиеВстроеннаяСправкаonclick);
	ВстроеннаяСправка.УстановитьДействие("onmouseout", мДействиеВстроеннаяСправкаonmouseout);
	ВстроеннаяСправка.УстановитьДействие("onmouseover", мДействиеВстроеннаяСправкаonmouseover);
	
	// НадписиЗакрытьСправкуФормы
	НадписиЗакрытьСправкуФормы = Форма.ЭлементыФормы.Добавить(Тип("Надпись"), "НадписиЗакрытьСправкуФормы",, ПанельСправкаФормы);
	НадписиЗакрытьСправкуФормы.Заголовок = НСтр("ru = 'Скрыть эту информацию'");
	НадписиЗакрытьСправкуФормы.ГиперСсылка = Истина;
	НадписиЗакрытьСправкуФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	НадписиЗакрытьСправкуФормы.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	НадписиЗакрытьСправкуФормы.Верх = ПанельСправкаФормыВысота - ВысотаНадписиЗакрытьСправкуФормы;
	НадписиЗакрытьСправкуФормы.Лево = 0;
	НадписиЗакрытьСправкуФормы.Ширина = ПанельСправкаФормыШирина;
	НадписиЗакрытьСправкуФормы.Высота = ВысотаНадписиЗакрытьСправкуФормы;
	НадписиЗакрытьСправкуФормы.УстановитьДействие("Нажатие", мДействиеКоманднаяПанельФормыСправкаФормы);
	
	// РазделительСправкаФормы
	РазделительСправкаФормыВерх = ЭлементУправления.Верх;
	РазделительСправкаФормыЛево = ЭлементУправления.Лево + ЭлементУправления.Ширина - ШиринаПанелиСправкаФормы - ШиринаРазделителяСправкаФормы;
	РазделительСправкаФормыШирина = ШиринаРазделителяСправкаФормы;
	РазделительСправкаФормыВысота = ЭлементУправления.Высота;
		
	РазделительСправкаФормы = Форма.ЭлементыФормы.Добавить(Тип("Разделитель"), "РазделительСправкаФормы");
	РазделительСправкаФормы.Верх = РазделительСправкаФормыВерх;
	РазделительСправкаФормы.Лево = РазделительСправкаФормыЛево;
	РазделительСправкаФормы.Ширина = РазделительСправкаФормыШирина;
	РазделительСправкаФормы.Высота = РазделительСправкаФормыВысота;
	РазделительСправкаФормы.Ориентация = Ориентация.Вертикально;
	
	//Установка привязок
	ПервыйЭлемент = Неопределено;
	ГраницаПервогоЭлемента = Неопределено;
	ВторойЭлемент = Неопределено;
	ГраницаВторогоЭлемента = Неопределено;
	
	ЭлементУправления.ПолучитьПривязку(ГраницаЭлементаУправления.Верх, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	ПанельСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	РазделительСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	
	ЭлементУправления.ПолучитьПривязку(ГраницаЭлементаУправления.Низ, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	ПанельСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	РазделительСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента);
	
	ПанельСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, РазделительСправкаФормы, ГраницаЭлементаУправления.Право);
	ПанельСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
	
	ВстроеннаяСправка.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПанельСправкаФормы, ГраницаЭлементаУправления.Лево);
	ВстроеннаяСправка.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельСправкаФормы, ГраницаЭлементаУправления.Право);
	ВстроеннаяСправка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельСправкаФормы, ГраницаЭлементаУправления.Верх);
	ВстроеннаяСправка.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельСправкаФормы, ГраницаЭлементаУправления.Низ);
	
	НадписиЗакрытьСправкуФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПанельСправкаФормы, ГраницаЭлементаУправления.Лево);
	НадписиЗакрытьСправкуФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельСправкаФормы, ГраницаЭлементаУправления.Право);
	НадписиЗакрытьСправкуФормы.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельСправкаФормы, ГраницаЭлементаУправления.Низ);
	НадписиЗакрытьСправкуФормы.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельСправкаФормы, ГраницаЭлементаУправления.Низ);
	
	РазделительСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, РазделительСправкаФормы, ГраницаЭлементаУправления.Право);
	РазделительСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
	
	ЭлементУправления.Ширина = ЭлементУправления.Ширина - ШиринаПанелиСправкаФормы - ШиринаРазделителяСправкаФормы;
	ЭлементУправления.УстановитьПривязку(ГраницаЭлементаУправления.Право, РазделительСправкаФормы, ГраницаЭлементаУправления.Право);
	
КонецПроцедуры // ДобавитьПанельСправкаФормы()

Процедура ДобавитьПанельСтатусСтрока(Объект, Форма) Экспорт
	
	ЭлементУправления = Форма.ЭлементыФормы[мИмяЭлементаУправленияСтатусСтрока];
	Попытка
		//ЭлементУправления.УстановитьДействие("ПриАктивизацииОбласти", Новый Действие("ДействияФормыВыполнитьВнешнююОбработку"));
		ЭлементУправления.УстановитьДействие("ПриАктивизацииОбласти", Новый Действие("ПолеВводаЗначениеПриИзменении"));
	Исключение
		Возврат;
	КонецПопытки;
	
	ЭлементУправленияВысота = 17;
	ИнтервалМеждуЭлементамиУправленияВертикальный = 5;
	ИнтервалМеждуЭлементамиУправленияГоризонтальный = 5;
	
	ВысотаПанелиСтатусСтрока = ЭлементУправленияВысота + ИнтервалМеждуЭлементамиУправленияВертикальный;
	
	ПанельВерх = ЭлементУправления.Верх + ЭлементУправления.Высота - ВысотаПанелиСтатусСтрока;
	ПанельЛево = ЭлементУправления.Лево;
	ПанельШирина = ЭлементУправления.Ширина;
	ПанельВысота = ВысотаПанелиСтатусСтрока;
		
	ПанельСтатусСтрока = Форма.ЭлементыФормы.Добавить(Тип("Панель"), "ПанельСтатусСтрока");
	ПанельСтатусСтрока.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ПанельСтатусСтрока.Верх = ПанельВерх;
	ПанельСтатусСтрока.Лево = ПанельЛево;
	ПанельСтатусСтрока.Ширина = ПанельШирина;
	ПанельСтатусСтрока.Высота = ПанельВысота;
	ПанельСтатусСтрока.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Лево);
	ПанельСтатусСтрока.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
	ПанельСтатусСтрока.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельСтатусСтрока, ГраницаЭлементаУправления.Низ);
	ПанельСтатусСтрока.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Форма.Панель, ГраницаЭлементаУправления.Низ);
		
	ЭлементУправления.Высота = ЭлементУправления.Высота - ВысотаПанелиСтатусСтрока;
	ЭлементУправления.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельСтатусСтрока, ГраницаЭлементаУправления.Верх);
	
	НадписьИтого = Форма.ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьДляИтоговПоЯчейкам",, ПанельСтатусСтрока);
	НадписьИтого.Верх = ИнтервалМеждуЭлементамиУправленияВертикальный;
	НадписьИтого.Высота = ЭлементУправленияВысота;
	НадписьИтого.Ширина = ПанельШирина - 1;
	НадписьИтого.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	НадписьИтого.Заголовок = " <Статус строка. Итоги по выделенным ячейкам> ";
	НадписьИтого.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПанельСтатусСтрока, ГраницаЭлементаУправления.Лево);
	НадписьИтого.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельСтатусСтрока, ГраницаЭлементаУправления.Право);
	
КонецПроцедуры // ДобавитьПанельСтатусСтрока()

Процедура ДобавитьКнопкиПечать(Объект, Форма) Экспорт
	
	Если мДействиеКоманднаяПанельФормыПечать <> Неопределено Тогда

		Если Форма.ЭлементыФормы.Найти("КоманднаяПанельФормы") <> Неопределено Тогда
			
			Если Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Найти("Подменю") <> Неопределено Тогда
				
				ПодменюДействия = Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю;
				
				Если ПодменюДействия.Кнопки.Найти("Справка") <> Неопределено Тогда
					
					Если мДействиеКоманднаяПанельФормыПечать <> Неопределено Тогда
						
						КнопкаПечать = ПодменюДействия.Кнопки.Вставить(ПодменюДействия.Кнопки.Индекс(ПодменюДействия.Кнопки.Справка), "Печать", ТипКнопкиКоманднойПанели.Действие, НСтр("ru = 'Печать...'"), мДействиеКоманднаяПанельФормыПечать);
						КнопкаПечать.Картинка = БиблиотекаКартинок.Печать;
						КнопкаПечать.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.P,, Истина);
						
					КонецЕсли;
					
					ПодменюДействия.Кнопки.Вставить(ПодменюДействия.Кнопки.Индекс(ПодменюДействия.Кнопки.Справка), "РазделительПечать", ТипКнопкиКоманднойПанели.Разделитель);
					
				Иначе
					
					ПодменюДействия.Кнопки.Добавить("РазделительПечать", ТипКнопкиКоманднойПанели.Разделитель);
					
					Если мДействиеКоманднаяПанельФормыПечать <> Неопределено Тогда
						
						КнопкаПечать = ПодменюДействия.Кнопки.Добавить("Печать", ТипКнопкиКоманднойПанели.Действие, НСтр("ru = 'Печать...'"), мДействиеКоманднаяПанельФормыПечать);
						КнопкаПечать.Картинка = БиблиотекаКартинок.Печать;
						КнопкаПечать.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.P,, Истина);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКнопкиПечать()

Процедура УправлениеПанельюБыстрыеОтборы(Объект, Форма) Экспорт
	
	Если Форма.ЭлементыФормы.Найти("ПанельБыстрыеОтборы") = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.БыстрыйОтборРазвернут Тогда
		
		Форма.ЭлементыФормы.ПанельБыстрыеОтборы.Свертка = РежимСверткиЭлементаУправления.Нет;
		
	Иначе
		
		Форма.ЭлементыФормы.ПанельБыстрыеОтборы.Свертка = РежимСверткиЭлементаУправления.Верх;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеПанельюБыстрыеОтборы()

Процедура ИнициализацияПолейВводаЗначение(Элемент, Форма)
	
	ВидСравненияЗначение = Истина;
	ВидСравненияВСписке = Ложь;
	
	Индекс = СтрЗаменить(Элемент.Имя, "ПолеВводаВидСравнения", "");
	
	Если Элемент.Значение = ВидСравнения.Интервал ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяГраницы ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяНачало ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
		ВидСравненияЗначение = Ложь;
		
	ИначеЕсли Элемент.Значение = ВидСравнения.ВСписке ИЛИ Элемент.Значение = ВидСравнения.ВСпискеПоИерархии ИЛИ Элемент.Значение = ВидСравнения.НеВСписке ИЛИ Элемент.Значение = ВидСравнения.НеВСпискеПоИерархии Тогда
		
		ВидСравненияВСписке = Истина;
		
	КонецЕсли;
		
	Если Форма.ЭлементыФормы.Найти("ПолеВводаЗначение" + Индекс) <> Неопределено Тогда
				
		Форма.ЭлементыФормы["ПолеВводаЗначение" + Индекс].Видимость = ВидСравненияЗначение;
				
	КонецЕсли;
			
	Если Форма.ЭлементыФормы.Найти("ПолеВводаЗначениеС" + Индекс) <> Неопределено Тогда
				
		Форма.ЭлементыФормы["ПолеВводаЗначениеС" + Индекс].Видимость = НЕ ВидСравненияЗначение;
				
	КонецЕсли;
			
	Если Форма.ЭлементыФормы.Найти("ПолеВводаЗначениеПо" + Индекс) <> Неопределено Тогда
				
		Форма.ЭлементыФормы["ПолеВводаЗначениеПо" + Индекс].Видимость = НЕ ВидСравненияЗначение;
				
	КонецЕсли;
	
	Если ВидСравненияВСписке Тогда
		
		Форма.ЭлементыФормы["ПолеВводаЗначение" + Индекс].ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		
	Иначе
		
		Форма.ЭлементыФормы["ПолеВводаЗначение" + Индекс].ОграничениеТипа = Новый ОписаниеТипов(Форма.ЭлементыФормы["ПолеВводаЗначение" + Индекс].ТипЗначения,, "СписокЗначений");
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияПолейВводаЗначение()

Процедура ВидСравненияПриИзменении(Элемент, Форма) Экспорт
	
	ИнициализацияПолейВводаЗначение(Элемент, Форма);
	
	Индекс = СтрЗаменить(Элемент.Имя, "ПолеВводаВидСравнения", "");
	Форма.ЭлементыФормы["ФлажокИспользование" + Индекс].Значение = Истина;
		
КонецПроцедуры // ВидСравненияПриИзменении()

Процедура ЗначениеПриИзменении(Элемент, Форма) Экспорт
	
	//Если ИдентификаторОбработки = мИмяЭлементаУправленияСтатусСтрока Тогда
	Если Элемент.Имя = мИмяЭлементаУправленияСтатусСтрока Тогда
		Если ФормаДляОбработчикаОжидания <> Неопределено Тогда
			ФормаДляОбработчикаОжидания.ПодключитьОбработчикОжидания("РасчетСуммыПоЯчейкам", 0.2, Истина);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Индекс = СтрЗаменить(СтрЗаменить(СтрЗаменить(Элемент.Имя, "ПолеВводаЗначение", ""), "С", ""), "По", "");
	
	Если Элемент.Имя = "ПолеВводаЗначение" + Индекс И НЕ Форма.ЭлементыФормы["ФлажокИспользование" + Индекс].Значение Тогда
		
		Попытка
			
			ЭтоГруппа = Форма.ЭлементыФормы["ПолеВводаЗначение" + Индекс].Значение.ЭтоГруппа;
			
		Исключение
			
			ЭтоГруппа = Ложь;
			
		КонецПопытки;
		
		Если ЭтоГруппа Тогда
			
			Форма.ЭлементыФормы["ПолеВводаВидСравнения" + Индекс].Значение = ВидСравнения.ВИерархии;
			
		КонецЕсли;
		
		Форма.ЭлементыФормы["ФлажокИспользование" + Индекс].Значение = Истина;
		
	КонецЕсли;
	
	Если Элемент.Имя = "ПолеВводаЗначение" + Индекс И ТипЗнч(Форма.ЭлементыФормы["ПолеВводаЗначение" + Индекс].Значение) = Тип("СписокЗначений") И Форма.ЭлементыФормы["ПолеВводаЗначение" + Индекс].Значение.ТипЗначения = Новый ОписаниеТипов() Тогда
		
		Форма.ЭлементыФормы["ПолеВводаЗначение" + Индекс].Значение.ТипЗначения = Новый ОписаниеТипов(Форма.ЭлементыФормы["ПолеВводаЗначение" + Индекс].ТипЗначения,, "СписокЗначений");
		
	КонецЕсли;
		
КонецПроцедуры // ВидСравненияПриИзменении()

Процедура УправлениеОтображениемЗаголовка(Объект, ПолеТабличногоДокументаРезультат) Экспорт
	
	ОбластьЗаголовок = ПолеТабличногоДокументаРезультат.Области.Найти("Заголовок");
	
	Если ТипЗнч(ОбластьЗаголовок) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ОбластьЗаголовок.Видимость = Объект.ПоказыватьЗаголовок;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеОтображениемЗаголовка()

Процедура УправлениеОтображениемСправкиФормы(Объект, Форма) Экспорт
	
	Если Форма.ЭлементыФормы.Найти("ПанельСправкаФормы") = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если (НЕ Объект.НеПоказыватьСправкуФормы И Форма.ЭлементыФормы.ПанельСправкаФормы.Свертка = РежимСверткиЭлементаУправления.Нет) ИЛИ
		(Объект.НеПоказыватьСправкуФормы И Форма.ЭлементыФормы.ПанельСправкаФормы.Свертка <> РежимСверткиЭлементаУправления.Нет) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Форма.ЭлементыФормы.ПанельСправкаФормы.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
		
		Форма.ЭлементыФормы[мИмяЭлементаУправленияСправкаФормы].Ширина = Форма.ЭлементыФормы[мИмяЭлементаУправленияСправкаФормы].Ширина + Форма.ЭлементыФормы.РазделительСправкаФормы.Ширина;
		Форма.ЭлементыФормы.ПанельСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
		Форма.ЭлементыФормы.РазделительСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.ЭлементыФормы.ПанельСправкаФормы, ГраницаЭлементаУправления.Лево);
		Форма.ЭлементыФормы.ПанельСправкаФормы.Свертка = РежимСверткиЭлементаУправления.Право;
		Форма.ЭлементыФормы.РазделительСправкаФормы.Свертка = РежимСверткиЭлементаУправления.Право;
		
	Иначе
		
		Форма.ЭлементыФормы.РазделительСправкаФормы.Свертка = РежимСверткиЭлементаУправления.Нет;
		Форма.ЭлементыФормы.ПанельСправкаФормы.Свертка = РежимСверткиЭлементаУправления.Нет;
		Форма.ЭлементыФормы.РазделительСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
		Форма.ЭлементыФормы.ПанельСправкаФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.ЭлементыФормы.РазделительСправкаФормы, ГраницаЭлементаУправления.Право);
		Форма.ЭлементыФормы[мИмяЭлементаУправленияСправкаФормы].Ширина = Форма.ЭлементыФормы[мИмяЭлементаУправленияСправкаФормы].Ширина - Форма.ЭлементыФормы.РазделительСправкаФормы.Ширина;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеОтображениемСправкиФормы()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ФормаПриОткрытии(Объект, Отчет, Форма, СоставПанелиДополнительныхЭлементовФормы = Неопределено, ИмяОбъекта = Неопределено) Экспорт
	
	ЭлементовГруппировокСтрок = 0;
	ЭлементовГруппировокКолонок = 0;
	Форма.КлючУникальности = Новый УникальныйИдентификатор;
	
	Если Объект.мВосстанавливатьНастройкиПриОткрытии Тогда
		
		Если ЗначениеЗаполнено(лЗначениеПеременной("глТекущийПользователь")) И Не ЗначениеЗаполнено(Объект.ДатаНач) Тогда
			
			Объект.ДатаНач = лПолучитьЗначениеПоУмолчанию(лЗначениеПеременной("глТекущийПользователь"), "ОсновнаяДатаНачалаОтчетов");
			
		КонецЕсли;
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь", лЗначениеПеременной("глТекущийПользователь"));
		СтруктураНастройки.Вставить("ИмяОбъекта", ?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта));
		
		Если ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки, "УниверсальныйОтчет_ТаблицаНастроек") Тогда
			
			Объект.мТекущаяНастройка = СтруктураНастройки;
			Отчет.ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
			ВосстановитьПараметрыПечати(Объект, Отчет, Форма, СтруктураНастройки.СохраненнаяНастройка);
			
		Иначе
			
			Отчет.УстановитьНачальныеНастройки();
			
		КонецЕсли;
		
		Объект.ВосстановитьДополнительныеНастройки(Объект, Отчет, ИмяОбъекта);
		
	КонецЕсли;
	
	ФормаУстановкаВводаПериода(Объект, Форма);
	
	Объект.ДобавитьПанельДополнительныеЭлементыФормы(Форма, СоставПанелиДополнительныхЭлементовФормы);
	Объект.ДобавитьПанельБыстрыеОтборы(Объект, Форма);
	Объект.ДобавитьПанельСтатусСтрока(Объект, Форма);
	Объект.ДобавитьПанельСправкаФормы(Объект, Форма);

	Объект.ДобавитьКнопкиПечать(Объект, Форма);
	
	ФормаДляДополнительныхЭлементов = Форма;
	ФормаДобавитьКнопкуЗамераПроизводительности();

	Объект.УправлениеОтображениемЭлементовФормы(Объект, Форма);
	Объект.УправлениеПанельюБыстрыеОтборы(Объект, Форма);
	Объект.УправлениеОтображениемСправкиФормы(Объект, Форма);
	
	Объект.УстановитьЗаголовокФормы(Объект, Отчет, Форма);
	
	Объект.ПодготовитьСправкуФормы(Объект, Отчет, Форма);
	
	УстановитьОбработкиПодключаемыеКОтчету(Объект, Отчет, Форма);
	
	ФормаДляОбработчикаОжидания = ПолучитьФорму();
	
КонецПроцедуры // ФормаПриОткрытии()

Процедура ФормаДобавитьКнопкуЗамераПроизводительности()

	КоманднаяПанельФормы = ФормаДляДополнительныхЭлементов.ЭлементыФормы.Найти("КоманднаяПанельФормы");
	Если КоманднаяПанельФормы <> Неопределено Тогда
		КоманднаяПанельФормы.Кнопки.Добавить("РазделительЗамерПроизводительности", ТипКнопкиКоманднойПанели.Разделитель, "");
		Кнопка = КоманднаяПанельФормы.Кнопки.Добавить("ЗамерПроизводительности", ТипКнопкиКоманднойПанели.Действие, "Замер производительности", Новый Действие("КоманднаяПанельФормыБыстрыеОтборы"));
		Кнопка.Картинка = БиблиотекаКартинок.УстановитьВремя;
		Кнопка.Подсказка = "Замер времени выполнения отчета";
		Кнопка.Пояснение = "Замер времени выполнения отчета";
	КонецЕсли;

КонецПроцедуры // ФормаДобавитьКнопкуЗамераПроизводительности()

Процедура ФормаУстановкаВводаПериода(Объект, Форма) Экспорт
	
	Если Объект.мРежимВводаПериода = -1 Тогда
		
		Форма.ЭлементыФормы.ПанельВыборПериода.Видимость = Ложь;
		
	Иначе
		Форма.ЭлементыФормы.ПанельВыборПериода.Видимость = Истина;
		
		Если Объект.мРежимВводаПериода = 0 Тогда
			
			Форма.ЭлементыФормы.ПанельВыборПериода.ТекущаяСтраница = Форма.ЭлементыФормы.ПанельВыборПериода.Страницы.Найти("СтраницаПроизвольныйПериод");
			
		ИначеЕсли Объект.мРежимВводаПериода = 1 Тогда
			
			Форма.ЭлементыФормы.ПанельВыборПериода.ТекущаяСтраница = Форма.ЭлементыФормы.ПанельВыборПериода.Страницы.Найти("СтраницаНаДату");
			
		Иначе
			
			Форма.ЭлементыФормы.ПанельВыборПериода.ТекущаяСтраница = Форма.ЭлементыФормы.ПанельВыборПериода.Страницы.Найти("СтраницаПериод");
			
			Если Объект.мРежимВводаПериода = 2 Тогда
				
				Форма.ЭлементыФормы.Период.Формат = Объект.мСтруктураФорматаПолей.ПериодНеделя;
				
			ИначеЕсли Объект.мРежимВводаПериода = 3 Тогда
				
				Форма.ЭлементыФормы.Период.Формат = Объект.мСтруктураФорматаПолей.ПериодДекада;
				
			ИначеЕсли Объект.мРежимВводаПериода = 4 Тогда
				
				Форма.ЭлементыФормы.Период.Формат = Объект.мСтруктураФорматаПолей.ПериодМесяц;
				
			ИначеЕсли Объект.мРежимВводаПериода = 5 Тогда
				
				Форма.ЭлементыФормы.Период.Формат = Объект.мСтруктураФорматаПолей.ПериодКвартал;
				
			ИначеЕсли Объект.мРежимВводаПериода = 6 Тогда
				
				Форма.ЭлементыФормы.Период.Формат = Объект.мСтруктураФорматаПолей.ПериодПолугодие;
				
			ИначеЕсли Объект.мРежимВводаПериода = 7 Тогда
				
				Форма.ЭлементыФормы.Период.Формат = Объект.мСтруктураФорматаПолей.ПериодГод;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ФормаУстановкаВводаПериода()

Процедура ФормаПриЗакрытии(Объект, Отчет, Форма, ИмяОбъекта = Неопределено) Экспорт
	
	Перем СохраненнаяНастройка;
	
	Если Объект.мТекущаяНастройка <> Неопределено И Объект.мТекущаяНастройка.НаименованиеНастройки <> Неопределено И Объект.мТекущаяНастройка.Свойство("СохранятьАвтоматически") И Объект.мТекущаяНастройка.СохранятьАвтоматически Тогда
	
		Отчет.СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
		СохранитьПараметрыПечати(Объект, Отчет, Форма, СохраненнаяНастройка);
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь", лЗначениеПеременной("глТекущийПользователь"));
		СтруктураНастройки.Вставить("ИмяОбъекта", ?(ИмяОбъекта = Неопределено, Строка(Отчет), ИмяОбъекта));
		СтруктураНастройки.Вставить("НаименованиеНастройки", Объект.мТекущаяНастройка.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Объект.мТекущаяНастройка.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", Объект.мТекущаяНастройка.СохранятьАвтоматически);
		
		СохранитьНастройку(СтруктураНастройки, "УниверсальныйОтчет_ТаблицаНастроек");

	КонецЕсли;
	
	Объект.СохранитьДополнительныеНастройки(Объект, Отчет, ИмяОбъекта);
	
КонецПроцедуры // ФормаПриЗакрытии()

Процедура ФормаНастройка(Объект, Отчет, Форма, ПолеТабличногоДокументаРезультат) Экспорт
	
	Перем ТекущиеНастройкиОтчета;
	
	ФормаНастройка = Объект.ПолучитьФорму("ФормаНастройка", Форма);
	
	Отчет.СформироватьСтруктуруДляСохраненияНастроек(ТекущиеНастройкиОтчета);
	
	КомандаЗакрытияФормы = ФормаНастройка.ОткрытьМодально();
	
	Если КомандаЗакрытияФормы = 2 Тогда
		
		Отчет.СформироватьОтчет(ПолеТабличногоДокументаРезультат);
		
	ИначеЕсли КомандаЗакрытияФормы <> 1 Тогда
		
		Отчет.ВосстановитьНастройкиИзСтруктуры(ТекущиеНастройкиОтчета);
		
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ПолеТабличногоДокументаРезультат;
	
КонецПроцедуры // ФормаНастройка()

Процедура ФормаНовыйОтчет(Объект, Отчет, ДополнительныеПараметры = Неопределено, УниверсальныйОтчет = Ложь) Экспорт
	
	Перем СтруктураСНастройками;
	
	Отчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
	Если Строка(Отчет) = "ВнешняяОбработкаОбъект." + Отчет.Метаданные().Имя Тогда
				
		НовыйОтчет = ВнешниеОбработки.Создать(Отчет.ИспользуемоеИмяФайла);
				
	ИначеЕсли Строка(Отчет) = "ВнешнийОтчетОбъект." + Отчет.Метаданные().Имя Тогда
				
		НовыйОтчет = ВнешниеОтчеты.Создать(Отчет.ИспользуемоеИмяФайла);
		
	Иначе
		
		НовыйОтчет = Отчеты[Отчет.Метаданные().Имя].Создать();
		
	КонецЕсли;
	
	Если УниверсальныйОтчет Тогда
		
		НовыйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		НовыйОтчет.БыстрыйОтборРазвернут = Объект.БыстрыйОтборРазвернут;
		НовыйОтчет.ПоказыватьЗаголовок = Объект.ПоказыватьЗаголовок;
		НовыйОтчет.НеПоказыватьСправкуФормы = Объект.НеПоказыватьСправкуФормы;
		
	Иначе
		
		НовыйОтчет.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		НовыйОтчет.УниверсальныйОтчет.БыстрыйОтборРазвернут = Объект.БыстрыйОтборРазвернут;
		НовыйОтчет.УниверсальныйОтчет.ПоказыватьЗаголовок = Объект.ПоказыватьЗаголовок;
		НовыйОтчет.УниверсальныйОтчет.НеПоказыватьСправкуФормы = Объект.НеПоказыватьСправкуФормы;
		
	КонецЕсли;
	
	НовыйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками);
	
	ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();
	ФормаНовогоОтчета.Открыть();
	
КонецПроцедуры // ФормаНовыйОтчет()

Процедура УстановитьЗаголовокФормы(Объект, Отчет, Форма) Экспорт
	
	Если Объект.мТекущаяНастройка <> Неопределено И Объект.мТекущаяНастройка.Свойство("НаименованиеНастройки") И Объект.мТекущаяНастройка.НаименованиеНастройки <> Неопределено Тогда
		
		Форма.Заголовок = мНазваниеОтчета + ". Настройка: " + СокрЛП(Объект.мТекущаяНастройка.НаименованиеНастройки);
		
	Иначе
		
		Форма.Заголовок = мНазваниеОтчета;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

Процедура ФормаНастройкаПериода(Объект) Экспорт
	
	мНастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон = Дата('00010101000000'), ДатаКон, КонецДня(ДатаКон)));
	
	Если Объект.мНастройкаПериода.Редактировать() Тогда
		
		Объект.ДатаНач = Объект.мНастройкаПериода.ПолучитьДатуНачала();
		Объект.ДатаКон = Объект.мНастройкаПериода.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры // ФормаНастройкаПериода()

Процедура ФормаМинусПериод(Объект) Экспорт
	
	УстановитьПериод(Объект.ДатаНач, Объект.ДатаКон, Объект.мРежимВводаПериода, -1);
	
КонецПроцедуры // ФормаМинусПериод()

Процедура ФормаПлюсПериод(Объект) Экспорт
	
	УстановитьПериод(Объект.ДатаНач, Объект.ДатаКон, Объект.мРежимВводаПериода, 1);
	
КонецПроцедуры // ФормаПлюсПериод()

Процедура ФормаПечать(Объект, Отчет, Форма) Экспорт
	
	Форма.ЭлементыФормы[мИмяЭлементаУправленияПолеТабличногоДокументаРезультат].Напечатать(Ложь);
	
КонецПроцедуры // ФормаПечать()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

Если Показатели.Колонки.Количество() = 0 Тогда
	
	Показатели.Колонки.Добавить("Представление");
	Показатели.Колонки.Добавить("ПредставлениеВОтчете");
	Показатели.Колонки.Добавить("Ширина");
	Показатели.Колонки.Добавить("Использование");
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("ФорматнаяСтрока");
	
КонецЕсли;

Если Интервалы.Колонки.Количество() = 0 Тогда
	
	Интервалы.Колонки.Добавить("ВГраница");
	Интервалы.Колонки.Добавить("ИнтервальноеПоле");
	Интервалы.Колонки.Добавить("Название");
	
КонецЕсли;

мРазмещениеПоложениеВыбранныхПолей = Новый Структура;

мСтруктураПредставлениеПолей = Новый Структура;
мСоответствиеСвойствКатегорийИИзмерений = Новый Соответствие;
мСоответствиеКонтактнойИнформацииИИзмерений = Новый Соответствие;
мСоответствиеДанныхОФизлицеИИзмерений = Новый Соответствие;
мСоответствиеПолейИИзмерений = Новый Соответствие;
мСоответствиеНазначений = Новый Соответствие;
мСоответствиеСвязьПолей = Новый Соответствие;
мСоответствиеТиповИнтервальныхПолей = Новый Соответствие;

мСтруктураФорматаПолей = Новый Структура;
мСтруктураФорматаПолей.Вставить("ПериодДень", "ДФ = дд.ММ.гггг");
мСтруктураФорматаПолей.Вставить("ПериодНеделя","ДФ = '""Неделя с"" дд.ММ.гггг '");
мСтруктураФорматаПолей.Вставить("ПериодДекада","ДФ = '""Декада с"" дд.ММ.гггг '");
мСтруктураФорматаПолей.Вставить("ПериодМесяц", "ДФ = 'ММММ гггг ""г.""'");
мСтруктураФорматаПолей.Вставить("ПериодКвартал", "ДФ = 'к ""квартал"" гггг ""г.""'");
мСтруктураФорматаПолей.Вставить("ПериодПолугодие","ДФ = '""Полугодие с"" дд.ММ.гггг'");
мСтруктураФорматаПолей.Вставить("ПериодГод", "ДФ = 'гггг ""г.""'");

мСтруктураПериодов = Новый Структура;
мСтруктураПериодов.Вставить("ПериодГод", 12);
мСтруктураПериодов.Вставить("ПериодПолугодие", 11);
мСтруктураПериодов.Вставить("ПериодКвартал", 10);
мСтруктураПериодов.Вставить("ПериодМесяц", 9);
мСтруктураПериодов.Вставить("ПериодДекада", 8);
мСтруктураПериодов.Вставить("ПериодНеделя", 7);
мСтруктураПериодов.Вставить("ПериодДень", 6);
мСтруктураПериодов.Вставить("Период", 3);
мСтруктураПериодов.Вставить("Регистратор", 2);

мТаблицаПолей = Новый ТаблицаЗначений;
мТаблицаПолей.Колонки.Добавить("ПутьКДанным");   // описание поля запроса, для которого добавляются свойства и категории
мТаблицаПолей.Колонки.Добавить("ИмяИзмерения");  // имя поля запроса, для которого добавляются свойства и категории
мТаблицаПолей.Колонки.Добавить("Представление"); // представление поля, для которого добавляются свойства и категории
мТаблицаПолей.Колонки.Добавить("Назначение");    // назначение свойств/категорий объектов для данного поля
мТаблицаПолей.Колонки.Добавить("НетКатегорий");  // признак НЕиспользования категорий для объекта

мТаблицаПолейКонтактнаяИнформация = Новый ТаблицаЗначений;
мТаблицаПолейКонтактнаяИнформация.Колонки.Добавить("ПутьКДанным");   // описание поля запроса, для которого добавляется контактная информация
мТаблицаПолейКонтактнаяИнформация.Колонки.Добавить("ИмяИзмерения");  // имя поля запроса, для которого добавляется контактная информация
мТаблицаПолейКонтактнаяИнформация.Колонки.Добавить("Представление"); // представление поля, для которого добавляется контактная информация
мТаблицаПолейКонтактнаяИнформация.Колонки.Добавить("ВидОбъекта");    // вид объекта-владельца контактной информации
мТаблицаПолейКонтактнаяИнформация.Колонки.Добавить("ТипОбъекта");    // тип объекта-владельца контактной информации

мТаблицаПолейДанныеОФизлице = Новый ТаблицаЗначений;
мТаблицаПолейДанныеОФизлице.Колонки.Добавить("ПутьКДанным");   // описание поля запроса, для которого добавляются данные о физ. лице
мТаблицаПолейДанныеОФизлице.Колонки.Добавить("ИмяИзмерения");  // имя поля запроса, для которого добавляются данные о физ. лице
мТаблицаПолейДанныеОФизлице.Колонки.Добавить("Представление"); // представление поля, для которого добавляются данные о физ. лице

мНастройкаПериода = Новый НастройкаПериода;
мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;

мРежимВводаПериода = 0;
мМинимальнаяШиринаКолонкиПоказатель = 14;
мВыбиратьИмяРегистра = Истина;
мВыбиратьИспользованиеСвойств = (Метаданные.ПланыВидовХарактеристик.Найти("НазначенияСвойствКатегорийОбъектов") <> Неопределено);
Если мВыбиратьИспользованиеСвойств Тогда
	Попытка
		А = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
		мИспользованиеСвойствХарактеристикиНоменклатуры = Истина;
	Исключение
		мИспользованиеСвойствХарактеристикиНоменклатуры = Ложь;
	КонецПопытки;
Иначе
	мИспользованиеСвойствХарактеристикиНоменклатуры = Ложь;
КонецЕсли;
мНетКатегорий = (Метаданные.Справочники.Найти("КатегорииОбъектов") = Неопределено);
мРежимФормыНастройкиБезГруппировокКолонок = Ложь;
мНазваниеОтчета = "";

ВыводитьОбщиеИтоги = Истина;

мВосстанавливатьНастройкиПриОткрытии = Истина;
мРассчитыватьШиринуКолонок = Истина;
мРассчитыватьШиринуКолонкиПоНазванию = Ложь;

// 0 - Авто (полное наименование группировок и сокращенное наименование выбранных полей)
// 1 - Полное наименование (полные наименования группировок и выбранных полей)
// 2 - Сокращенное наименование (сокращенные наименования группировок и выбранных полей)
мВидПредставленияПолей = 0;

мПутьКПостроителюОтчета = "ОтчетОбъект.УниверсальныйОтчет";
мИмяЭлементаУправленияПолеТабличногоДокументаРезультат = "ПолеТабличногоДокументаРезультат";
мИмяЭлементаУправленияБыстрыеОтборы = "ПолеТабличногоДокументаРезультат";
мИмяЭлементаУправленияДополнительныеЭлементы = "ПолеТабличногоДокументаРезультат";
мИмяЭлементаУправленияСправкаФормы = "ПолеТабличногоДокументаРезультат";
мИмяЭлементаУправленияСтатусСтрока = "ПолеТабличногоДокументаРезультат";
мДействиеПолеВводаВидСравненияПриИзменении = Неопределено;
мДействиеПолеВводаЗначениеПриИзменении = Неопределено;
мДействиеКоманднаяПанельФормыПечать = Неопределено;
мДействиеКоманднаяПанельФормыСправкаФормы = Неопределено;
мДействиеВстроеннаяСправкаonclick = Неопределено;
мДействиеВстроеннаяСправкаonmouseout = Неопределено;
мДействиеВстроеннаяСправкаonmouseover = Неопределено;
мДействиеФормыВыполнитьВнешнююОбработку = Неопределено;

мКартинкаВстроеннойСправкиФормы = Новый Картинка(ПолучитьМакет("ВстроеннаяСправкаФормы"), Истина);

мПростыеТипы = Новый Массив;
мПростыеТипы.Добавить(Тип("Строка"));
мПростыеТипы.Добавить(Тип("Число"));
мПростыеТипы.Добавить(Тип("Дата"));
мПростыеТипы.Добавить(Тип("Булево"));

#КонецЕсли