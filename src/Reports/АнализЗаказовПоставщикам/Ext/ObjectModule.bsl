#Если Клиент Тогда
	
Перем мВалютаРегламентированногоУчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	//
	//ЗапросН = Новый Запрос( 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	СостоянияСтрокЗаказов.Наименование,
	//|	СостоянияСтрокЗаказов.Представление,
	//|	СостоянияСтрокЗаказов.Ссылка
	//|ИЗ
	//|	Справочник.СостоянияСтрокЗаказов КАК СостоянияСтрокЗаказов");
	//
	//ВыборкаСостояний = ЗапросН.Выполнить().Выбрать();
	
	
	// Настройка общих параметров универсального отчета
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
	
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
ТекстЗапроса = 	
"ВЫБРАТЬ
|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Организация КАК Организация,
|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Владелец,
|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
|	ЗаказыПоставщикамОстатки.ТорговаяТочка,
|	ЗаказыПоставщикамОстатки.Склад,
|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
|	ЗаказыПоставщикамОстатки.СтрокаЗаявки,
//|	ЗаказыПоставщикамОстатки.СостояниеСтрокиЗаказа КАК СостояниеЗаказа,
|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток,
|	ЗаказыПоставщикамОстатки.СтрокаЗаявки.Заказ КАК ЗаказПоставщику,
|	ИдентификаторыСтрокЗаказов.КоличествоЗаказано КАК КоличествоЗаказано,
|	ПартииТоваровУпрОстатки.КоличествоОстаток КАК КоличествоОстаток1
//|	ЗаказыПоставщикамОстатки.ЕдиницаИзмерения,
//|	СостоянияСтрокЗаказов.Ссылка
|{ВЫБРАТЬ
|	Организация.*,
|	ДоговорКонтрагентаВладелец.*,
|	ДоговорКонтрагента.*,
|	ТорговаяТочка.*,
|	Склад.*,
|	Номенклатура.*,
|	СтрокаЗаявки.*,
//|	СостояниеЗаказа.*,
|	КоличествоОстаток,
|	КоличествоЗаказано,
|	КоличествоОстаток1,
|	ЕдиницаИзмерения.*,
|	ЗаказПоставщику.*,
|	Ссылка КАК ССылка}
|ИЗ
|	РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокЗаказов КАК ИдентификаторыСтрокЗаказов
|		ПО ЗаказыПоставщикамОстатки.СтрокаЗаявки = ИдентификаторыСтрокЗаказов.Ссылка
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещенияСтрокЗаказов КАК РазмещенияСтрокЗаказов
|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровУпр.Остатки КАК ПартииТоваровУпрОстатки
|			ПО РазмещенияСтрокЗаказов.СтрокаПрихода = ПартииТоваровУпрОстатки.СтрокаПрихода
|		ПО ЗаказыПоставщикамОстатки.СтрокаЗаявки = РазмещенияСтрокЗаказов.СтрокаЗаявки
//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СостоянияСтрокЗаказов КАК СостоянияСтрокЗаказов
//|		ПО ЗаказыПоставщикамОстатки.СтрокаЗаявки.СостояниеСтрокиЗаказа = СостоянияСтрокЗаказов.Ссылка
|{ГДЕ
|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Организация.* КАК Организация,
|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Владелец.* КАК Контрагент,
|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.*,
|	ЗаказыПоставщикамОстатки.ТорговаяТочка.*,
|	ЗаказыПоставщикамОстатки.Склад.*,
|	ЗаказыПоставщикамОстатки.Номенклатура.* КАК Номенклатура,
|	ЗаказыПоставщикамОстатки.СтрокаЗаявки.*,
//|	ЗаказыПоставщикамОстатки.СостояниеСтрокиЗаказа.*,
|	ЗаказыПоставщикамОстатки.КоличествоОстаток,
|	ЗаказыПоставщикамОстатки.СтрокаЗаявки.Заказ.*,
|	ИдентификаторыСтрокЗаказов.КоличествоЗаказано,
|	ПартииТоваровУпрОстатки.КоличествоОстаток,
//|	ЗаказыПоставщикамОстатки.ЕдиницаИзмерения.*,
|	ИдентификаторыСтрокЗаказов.КоличествоЗаказано КАК Запланировано}
//|	СостоянияСтрокЗаказов.Наименование,
//|	СостоянияСтрокЗаказов.ИмяПредопределенныхДанных КАК Ссылка}
|{УПОРЯДОЧИТЬ ПО
|	Организация.*,
|	ДоговорКонтрагентаВладелец.*,
|	ДоговорКонтрагента.*,
|	ТорговаяТочка.*,
|	Склад.*,
|	Номенклатура.*,
|	СтрокаЗаявки.*,
//|	СостояниеЗаказа.*,
|	ЗаказПоставщику.* КАК ЗаказПоставщику,
|	КоличествоЗаказано КАК Запланировано,
//|	ЕдиницаИзмерения.*,
|	КоличествоОстаток,
|	КоличествоОстаток1,
|	Ссылка КАК ССылка}
|ИТОГИ
|	СУММА(КоличествоОстаток),
|	СУММА(КоличествоЗаказано),
|	СУММА(КоличествоОстаток1)
|ПО
|	ОБЩИЕ
|{ИТОГИ ПО
|	Организация.* КАК Организация,
|	ДоговорКонтрагентаВладелец.*,
|	ДоговорКонтрагента.*,
|	ТорговаяТочка.*,
|	Склад.*,
|	Номенклатура.*,
|	СтрокаЗаявки.*,
//|	СостояниеЗаказа.*,
|	ЗаказПоставщику.* КАК ЗаказПоставщику,
|	ЕдиницаИзмерения.*,
|	Ссылка КАК Ссылка}";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Владелец", "ДоговорКонтрагентаВладелец", "Контрагент",                  ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ЗаказыПоставщикамОстатки.ДоговорКонтрагента",          "ДоговорКонтрагента",         "Договор контрагента",         ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ЗаказыПоставщикамОстатки.Номенклатура",                "Номенклатура",               "Номенклатура",                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ЗаказыПоставщикамОстатки.ЗаказПоставщику",             "ЗаказПоставщику",            "Заказ поставщику",            ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
		
		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагентаВладелец", "Контрагент");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗаказПоставщику", "Заказ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Номенклатура", "Номенклатура");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Наименование", "Состояние");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Цена", "Цена");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЕдиницаИзмерения", "Единица измерения");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтатусПартии", "Статус партии");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СостояниеОтгрузки", "Состояние поступления");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СостояниеОплаты", "Состояние оплаты");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаЗаказа", "Сумма заказа");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаЗапланировано", "Сумма запланировано оплатить");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОплатить", "Осталось оплатить");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Оплачено", "Оплачено");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьЗакупитьСуммаВзаиморасчетов", "Осталось закупить (сумма в валюте взаиморасчетов)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьЗакупитьСуммаУпр", "Осталось закупить (сумма в валюте упр. учета)");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Запланировано",      "Запланировано отгрузить");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОтгрузить",  "Осталось закупить");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПринятоНаСклад",           "Принято на склад");
	
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗапланированоБазовыхЕд",      "Запланировано отгрузить (в базовых ед.)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОтгрузитьБазовыхЕд",  "Осталось закупить (в базовых ед.)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗаказаноБазовыхЕд",           "Размещено в заказе (в базовых ед.)");
	//
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗапланированоЕдиницОтчетов",      "Запланировано отгрузить (в ед. отчетов)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОтгрузитьЕдиницОтчетов",  "Осталось закупить (в ед. отчетов)");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗаказаноЕдиницОтчетов",           "Размещено в заказе (в ед. отчетов)");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗаказа",        "Сумма заказа",   				Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗапланировано", "Сумма запланировано оплатить",	Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	//УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОплатить",   "Осталось оплатить", 			Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	//УниверсальныйОтчет.ДобавитьПоказатель("Оплачено",   		"Оплачено",			 			Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	//УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьЗакупитьСуммаУпр",			 "Осталось закупить "+Символы.ПС+ "(в валюте упр. учета)",	   Ложь, "ЧЦ=15; ЧДЦ=2");
	//УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьЗакупитьСуммаВзаиморасчетов", "Осталось закупить "+Символы.ПС+ "(в валюте взаиморасчетов)",Ложь, "ЧЦ=15; ЧДЦ=2");
	ВыборкаСостояний = УниверсальныйОтчет.ПостроительОтчета.ПолучитьЗапрос().Выполнить().Выгрузить();
	//ВыборкаСостояний.Свернуть("СостояниеЗаказа", "");
	
	//Для а = 0 по ВыборкаСостояний.Количество() - 1 Цикл
	//	Если ВыборкаСостояний.Получить(а).СостояниеЗаказа <> NULL Тогда
	//
	//		//УниверсальныйОтчет.ДобавитьПоказатель(ВыборкаСостояний.Получить(а).Ссылка.ИмяПредопределенныхДанных,      ВыборкаСостояний.Получить(а).Ссылка.Наименование,      Истина, "ЧЦ=15; ЧДЦ=3", ВыборкаСостояний.Получить(а).Ссылка.Наименование, "Закупка (в ед. хранения)");
	//		УниверсальныйОтчет.ДобавитьПоказатель("СостояниеЗаказа",  ВыборкаСостояний.Получить(а).СостояниеЗаказа,  Истина, "ЧЦ=15; ЧДЦ=3", ВыборкаСостояний.Получить(а).СостояниеЗаказа, "Закупка (в ед. хранения)");
	//		//УниверсальныйОтчет.ДобавитьПоказатель("ПринятоНаСклад",     "Размещено в заказе", Истина, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Закупка (в ед. хранения)");
	//	КонецЕсли;
	//КонецЦикла;
	
	//УниверсальныйОтчет.ДобавитьПоказатель("ЗапланированоБазовыхЕд",      "Запланировано",      Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаБазовыхЕд", "Закупка (в базовых ед.)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьБазовыхЕд",  "Осталось закупить",  Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаБазовыхЕд", "Закупка (в базовых ед.)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ЗаказаноБазовыхЕд",           "Размещено в заказе", Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаБазовыхЕд", "Закупка (в базовых ед.)");
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("ЗапланированоЕдиницОтчетов",      "Запланировано",       Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаЕдиницОтчетов", "Закупка (в ед. отчетов)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьЕдиницОтчетов",  "Осталось закупить",   Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаЕдиницОтчетов", "Закупка (в ед. отчетов)");
	//УниверсальныйОтчет.ДобавитьПоказатель("ЗаказаноЕдиницОтчетов",           "Размещено в заказе",  Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаЕдиницОтчетов", "Закупка (в ед. отчетов)");
	//
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагентаВладелец");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ЗаказПоставщику");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("ДоговорКонтрагентаВладелец");
	УниверсальныйОтчет.ДобавитьОтбор("ЗаказПоставщику");
	УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	
	//УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОтгрузки.Отбор = Ложь;
	//УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОплаты.Отбор = Ложь;
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("СостояниеОтгрузки", "ЗаказПоставщику");
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("СостояниеОплаты", "ЗаказПоставщику");
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	//УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОтгрузки.Отбор = Истина;
	//УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОплаты.Отбор = Истина;
	
	ОтборСостояниеОтгрузкиПоЗаказуСписок = Новый СписокЗначений;
	
	//Если НеОтгружено = Истина Тогда
		
		ОтборСостояниеОтгрузкиПоЗаказуСписок.Добавить("Обработано поставщиком");
		
	//КонецЕсли;
	
	Если ОтгруженоЧастично = Истина Тогда
		
		ОтборСостояниеОтгрузкиПоЗаказуСписок.Добавить("Поступило частично");
		
	КонецЕсли;
	
	Если ОтгруженоПолностью = Истина Тогда
		
		ОтборСостояниеОтгрузкиПоЗаказуСписок.Добавить("Поступило полностью");
		
	КонецЕсли;
	
	ОтборСостояниеОплатыПоЗаказуСписок = Новый СписокЗначений;
		
	Если НеОплачено = Истина Тогда
		
		ОтборСостояниеОплатыПоЗаказуСписок.Добавить("Не оплачено");
		
	КонецЕсли;
	
	Если ОплаченоЧастично = Истина Тогда
		
		ОтборСостояниеОплатыПоЗаказуСписок.Добавить("Оплачено частично");
		
	КонецЕсли;
	
	Если ОплаченоПолностью = Истина Тогда
		
		ОтборСостояниеОплатыПоЗаказуСписок.Добавить("Оплачено полностью");
		
	КонецЕсли;
		
	//УниверсальныйОтчет.ДобавитьОтбор("СостояниеОтгрузки", СостояниеОтгрузкиПоЗаказу, ВидСравнения.ВСписке, ОтборСостояниеОтгрузкиПоЗаказуСписок);
	//УниверсальныйОтчет.ДобавитьОтбор("СостояниеОплаты", СостояниеОплатыПоЗаказу, ВидСравнения.ВСписке, ОтборСостояниеОплатыПоЗаказуСписок);
	
	//УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СостояниеПодготовлен",Перечисления.СостоянияОбъектов.Утвержден);
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	
	//УниверсальныйОтчет.ПостроительОтчета.Отбор.Удалить(УниверсальныйОтчет.ПостроительОтчета.Отбор.Индекс(УниверсальныйОтчет.ПостроительОтчета.Отбор["СостояниеОтгрузки"]));
	//УниверсальныйОтчет.ПостроительОтчета.Отбор.Удалить(УниверсальныйОтчет.ПостроительОтчета.Отбор.Индекс(УниверсальныйОтчет.ПостроительОтчета.Отбор["СостояниеОплаты"]));
	
	//УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОтгрузки.Отбор = Ложь;
	//УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОплаты.Отбор = Ложь;

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: // (-1) - не выбирать период, 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

#КонецЕсли