&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Здесь заполняем колонки, на которые должна реагировать расшифровка. В данном варианте отчета поля д.б. ссылками 
	МРасшифровываемых = Новый Массив();
	МРасшифровываемых.Добавить("ДокументПрихода");
	МРасшифровываемых.Добавить("Номенклатура");
	
	//Полученное значение 
	РасшифрЗначение = ПолучитьРасшифровкуНаСервере(Расшифровка, МРасшифровываемых); 
	
	Если РасшифрЗначение.Номенклатура = Неопределено 
		И  РасшифрЗначение.ДокументПрихода = Неопределено  Тогда 
		Возврат; 
	КонецЕсли;
	
	// Прописываем доступные действия. Если какое то действие не указать, оно не будет доступно пользователю
	
	ОбрРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));
	
	ВыпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;
	ПараметрВыполненногоДействия = Неопределено;
	ДоступДействия = Новый Массив;
	ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
	ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
	ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
	//Создаем собственные действия
	ДопПункты = Новый СписокЗначений;
	Если ЗначениеЗаполнено(РасшифрЗначение.Номенклатура)
		И ЗначениеЗаполнено(РасшифрЗначение.ДокументПрихода) Тогда
		ДопПункты.Добавить( 1, "Расшифровать по документам движения");
	КонецЕсли;
	
	//Меню 
	ОбрРасшифровки.ВыбратьДействие(Расшифровка, ВыпДействие, ПараметрВыполненногоДействия, ДоступДействия, ДопПункты);
	
	Если ВыпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
	ИначеЕсли ВыпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		
		ОткрытьЗначение(ПараметрВыполненногоДействия);
	ИначеЕсли ТипЗнч(ВыпДействие) = Тип("Число") Тогда 
		
		Форм2 = ПолучитьФорму("Отчет.ЗависшиеПТУРасшифровка.Форма", , , РасшифрЗначение.Номенклатура); //Форма Расшифровки.
		
		КомпоновщНастр = ЭтаФорма.Отчет.КомпоновщикНастроек;
		КомпоновщНастр2 = Форм2.Отчет.КомпоновщикНастроек;
		
		
		//Здесь устанавливаем настройки открываемого отчета
		//УстановитьЗначениеОтбораКомпоновщикаНастроекПоОбразцу(КомпоновщНастр, КомпоновщНастр2, "ДокументПрихода");
		УстановитьЗначениеОтбораКомпоновщикаНастроек(КомпоновщНастр2, "ДокументПрихода", РасшифрЗначение.ДокументПрихода, ВидСравненияКомпоновкиДанных.Равно);
		
		//УстановитьЗначениеОтбораКомпоновщикаНастроекПоОбразцу(КомпоновщНастр, КомпоновщНастр2, "Номенклатура");
		УстановитьЗначениеОтбораКомпоновщикаНастроек(КомпоновщНастр2, "Номенклатура", РасшифрЗначение.Номенклатура, ВидСравненияКомпоновкиДанных.Равно);
		
		ДатаОкончания = ПолучитьЗначениеПераметраКомпоновщикаНастроек(ЭтаФорма.Отчет.КомпоновщикНастроек, "ДатаОкончания");
		УстановитьЗначениеПераметраКомпоновщикаНастроек(КомпоновщНастр2, "ДатаОкончания", ДатаОкончания);
		ДатаНачала = ПолучитьЗначениеПераметраКомпоновщикаНастроек(ЭтаФорма.Отчет.КомпоновщикНастроек, "ДатаНачала");
		УстановитьЗначениеПераметраКомпоновщикаНастроек(КомпоновщНастр2, "ДатаНачала", ДатаНачала);
		
		//Здесь открываем новый отчет
		СтрВозврата = ОбработатьРасшифровкуНаСервере(Форм2.Отчет, "ОтчетОбъект.ЗависшиеПТУРасшифровка", Форм2.Результат, Форм2.НавигационнаяСсылка, Форм2.УникальныйИдентификатор);
		Форм2.Результат = СтрВозврата.Результат;
		Форм2.ДанныеРасшифровки = СтрВозврата.ДанныеРасшифровки;
		Форм2.Открыть();
		Форм2.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения=ДополнительныйРежимОтображения.НеИспользовать; 
		Форм2.Элементы.Результат.ОтображениеСостояния.Видимость = ложь;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуНаСервере(Расшифровка, МассивИменРасшифровки, ЭтоГруппа = Ложь)
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Поля = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля();
	
	ВозвращаемоеЗначение = Новый Структура;
	Для каждого ИмяРасшифровки Из МассивИменРасшифровки Цикл
		ВозвращаемоеЗначение.Вставить(ИмяРасшифровки, Неопределено);
	КонецЦикла;
	
	//Значение текущего поля     
	Поле = Данные.Элементы[Расшифровка].ПолучитьПоля()[0];
	//Сообщить("Поле: " + Поле.Поле + ", значение: " + Поле.Значение);
	
	//Значения всех вышестоящих группировок     
	ВывестиЗначениеГруппировки(Данные, Расшифровка, ВозвращаемоеЗначение);

	Возврат ВозвращаемоеЗначение;
	 
КонецФункции


Процедура ВывестиЗначениеГруппировки(ДанныеРасшифровки, ТекРасшифровка, СтруктураРасшифровки)
    
    МассивРодителей = ДанныеРасшифровки.Элементы[ТекРасшифровка].ПолучитьРодителей();
    Для СчРодителей = 1 По МассивРодителей.Количество() Цикл
    
        ПолеРодитель = МассивРодителей[СчРодителей-1];
        Если Число(ПолеРодитель.Идентификатор) > 0 Тогда
            
            //Получим текущее поле
            Если ТипЗнч(ПолеРодитель) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
               МассивПолей = ПолеРодитель.ПолучитьПоля();
            ИначеЕсли ТипЗнч(ПолеРодитель) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
               МассивПолей = ПолеРодитель.ПолучитьРодителей()[0].ПолучитьПоля();
            КонецЕсли; 
               
            Для СчПолей = 1 По МассивПолей.Количество() Цикл
                
                Поле = МассивПолей[СчПолей-1];
            
                //Выведем значения текущей расшифровки
				//Сообщить("Поле: " + Поле.Поле + ", значение: " + Поле.Значение);
				Для каждого КлючЗначение Из СтруктураРасшифровки Цикл
					Если КлючЗначение.Ключ = Строка(Поле.Поле) И КлючЗначение.Значение = Неопределено Тогда
						СтруктураРасшифровки[КлючЗначение.Ключ] = Поле.Значение;
					КонецЕсли;
				КонецЦикла;
                
                //Рекурсивный вызов процедуры. 
                РасшифровкиВыше = ПолеРодитель.ПолучитьРодителей()[0].Идентификатор;
                ВывестиЗначениеГруппировки(ДанныеРасшифровки, РасшифровкиВыше, СтруктураРасшифровки);
                
            КонецЦикла;    
            
        КонецЕсли;        
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеОтбораКомпоновщикаНастроек(КомпоновщНастр2, ИмяОтбора, Значение, ВидСравнения, Использование = Истина)
	ПолеЭлементаОтбора = КомпоновщНастр2.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(ИмяОтбора).Поле;
	
	ИДЭлмОтбора = "";
	Для Каждого Элемент Из КомпоновщНастр2.Настройки.Отбор.Элементы Цикл
		Если Элемент.ЛевоеЗначение = ПолеЭлементаОтбора Тогда 
			ИДЭлмОтбора = Элемент.ИдентификаторПользовательскойНастройки; 
			Прервать; 
		КонецЕсли;
	КонецЦикла;
	
	Коллекция2 = КомпоновщНастр2.ПользовательскиеНастройки.Элементы;
	
	Если ИДЭлмОтбора = "" Тогда //Нет среди стандартных настроек
		Для Каждого Элемент Из Коллекция2 Цикл //Ищем....
			Если ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных") Тогда
				ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяОтбора);
				ОтборНайден = Ложь;
				Для Каждого ЭлемОтбора Из Элемент.Элементы Цикл
					Если ЭлемОтбора.ЛевоеЗначение = ПолеОтбора Тогда ОтборНайден = Истина; Прервать; КонецЕсли;
				КонецЦикла;
				Если Не ОтборНайден Тогда
					ЭлемОтбора = Элемент.Элементы.Добавить(Тип("ЭлемОтбораКомпоновкиДанных"));
					Элемент.Элементы[0].ЛевоеЗначение = ПолеОтбора;
					ЭлемОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОтбора);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлемОтбора = Коллекция2.Найти(ИДЭлмОтбора);
	КонецЕсли;
	
	ЭлемОтбора.ПравоеЗначение = Значение;
	ЭлемОтбора.Использование = Использование;
	ЭлемОтбора.ВидСравнения = ВидСравнения;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеОтбораКомпоновщикаНастроекПоОбразцу(КомпоновщНастр, КомпоновщНастр2, ИмяОтбора)
	Отбор = КомпоновщНастр.Настройки.Отбор;
	Для Каждого Элемент Из Отбор.Элементы Цикл
		ЭлемОтбора = Элемент;
		Прервать;
	КонецЦикла;
	УстановитьЗначениеОтбораКомпоновщикаНастроек(КомпоновщНастр2, ИмяОтбора, ЭлемОтбора.ПравоеЗначение, ЭлемОтбора.ВидСравнения, ЭлемОтбора.Использование);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеПераметраКомпоновщикаНастроек(КомпоновщНастр, ИмяПараметра)
	ИД_Настройки = КомпоновщНастр.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра).ИдентификаторПользовательскойНастройки;
	Коллекция = КомпоновщНастр.ПользовательскиеНастройки.Элементы;
	Возврат Коллекция.Найти(ИД_Настройки).Значение;
КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеПераметраКомпоновщикаНастроек(КомпоновщНастр2, ИмяПараметра, Значение)
	ИД_НастройкиПарам2 = КомпоновщНастр2.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра).ИдентификаторПользовательскойНастройки;
	Коллекция2 = КомпоновщНастр2.ПользовательскиеНастройки.Элементы;
	Коллекция2.Найти(ИД_НастройкиПарам2).Значение = Значение;
КонецПроцедуры

&НаСервере
Функция ОбработатьРасшифровкуНаСервере(Знач ОтчетZ, СтрТипаОтчета ,Знач РезультатZ, Знач ДанныеРасшифровкиZ, Знач ИДФормы)
	ОтчетОбъект = ДанныеФормыВЗначение(ОтчетZ, Тип(СтрТипаОтчета)); 
	РезультатZ.Очистить();
	ОтчетОбъект.СкомпоноватьРезультат(РезультатZ, ДанныеРасшифровкиZ);                                  //Формируем
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиZ, ИДФормы);                
	Возврат Новый Структура("Результат,ДанныеРасшифровки", РезультатZ, АдресДанныхРасшифровки);         
КонецФункции