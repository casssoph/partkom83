
&НаСервере
Процедура ЗакрытьВыбраноеНаСервере()
	ДеревоЗакрытия = РеквизитФормыВЗначение("ДеревоДанных");
	Для каждого СтрокаДокумента из ДеревоЗакрытия.Строки цикл 
		Документ = СтрокаДокумента[ИмяТекущегоПоляДокумента()];
		если СтрокаДокумента.Пометка тогда	
			менеджер = Документы[Документ.Метаданные().Имя];
			менеджер.ПроставитьПолныйОтказНаДокумент(Документ);
		Иначе
			СтрокиКЗакрытию = Новый Массив;
			Для каждого СтрокаССИД  из СтрокаДокумента.Строки цикл
				Если СтрокаССИД.Пометка тогда
					СтрокиКЗакрытию.Добавить(СтрокаССИД.СтрокаЗаявки);			  
				КонецЕсли;	  			  
			КонецЦикла;	  
			если СтрокиКЗакрытию.Количество() тогда 
				ЧастичноеЗакрытиеДокумента(Документ,СтрокиКЗакрытию);		
			КонецЕсли;  
		КонецЕсли;
		
	КонецЦикла;	
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обработка завершена");
	ДеревоДанных.ПолучитьЭлементы().Очистить();	
	
КонецПроцедуры
&НаСервере
Процедура ЧастичноеЗакрытиеДокумента(Документ,МассивСтрокЗаявок)
	ЭтоЗаявка = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаПокупателя");
	ДокументИзменен = ложь; 
	ПоследняяКорректировка =РаботаСоСтатусамиДокументовСервер.ПолучитьПоследниюКорректировкуЗаявкиЗаказа(Документ).ПолучитьОбъект();  
	Для Каждого СтрокаЗаявки из МассивСтрокЗаявок цикл 
		КоличествоОтказ = ЗаявкиПокупателяСервер.ДоступноеКоличествоПоЗаявкеКОтказу(СтрокаЗаявки,ТекущаяДата(),ЭтоЗаявка);
		Если КоличествоОтказ>0 тогда 
			СтрокаОтказа  = ПоследняяКорректировка.ПричиныОтказов.Добавить(); 
			СтрокаОтказа.Количество = КоличествоОтказ;
			
			если ЭтоЗаявка тогда 
				СтрТоваров =ПоследняяКорректировка.Товары.Найти(СтрокаЗаявки,"СтрокаЗаявки");
				Если СтрТоваров = Неопределено тогда 
					продолжить;
				КонецЕсли;
				
				СтрокаОтказа.ПричинаОтмены = ПредопределенноеЗначение("Справочник.СостоянияСтрокДокументов.СнятоПоСрокуПК");
				СтрокаОтказа.КлючСвязи = СтрТоваров.КлючСвязи;
			иначе
				СтрокаОтказа.ПричинаОтказа = ПредопределенноеЗначение("Справочник.СостоянияСтрокДокументов.СнятоПоСрокуПК");
				СтрокаОтказа.СтрокаЗаявки  = СтрокаЗаявки ;
				
				
			КонецЕсли;
			
			ДокументИзменен = Истина;
		КонецЕсли;  
		
		
		
	КонецЦикла;
	
	
	если ДокументИзменен тогда 
		ПоследняяКорректировка.Записать(РежимЗаписиДокумента.Проведение);	
		
	КонецЕсли;	
	
	
	
	
КонецПроцедуры	




Функция ИмяТекущегоПоляДокумента()
	если ВариантВыполнения = "ДеревоЗаявок" тогда
		Возврат "Заявка";
	иначе 
		возврат "Заказ";
	КонецЕсли;	
	
КонецФункции	



&НаКлиенте
Процедура ЗакрытьВыбраное(Команда)
	ЗакрытьВыбраноеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗакрытияЗаявокПриИзменении(Элемент)
	ОбновитьНастрокиСКД();	
	
	Если ВариантВыполнения = "ДеревоЗаявок" тогда 
		Элементы.ДеревоДанныхДокумент.Видимость = Ложь;
		Элементы.ДеревоДанныхЗаявка.Видимость = Истина;
	иначе 
		Элементы.ДеревоДанныхДокумент.Видимость = Истина;
		Элементы.ДеревоДанныхЗаявка.Видимость = Ложь;	
	КонецЕсли;	
	
КонецПроцедуры


&Насервере
Процедура ОбновитьНастрокиСКД()
	СхемаКомпоновкиДанных = СхемаКомпоновки();
	КомпоновщикНастроек.Инициализировать(
	Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор)));
	
	ВариантОтчета = СхемаКомпоновкиДанных.ВариантыНастроек[ВариантВыполнения];
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтчета.Настройки);	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры	

&Насервере
Функция   СхемаКомпоновки()
	Возврат  Отчеты.АнализНезакрытыхЗаявокЗаказов.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
КонецФункции	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//ОбновитьНастрокиСКД();	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДерево()
	
	СхемаКомпоновкиДанных = СхемаКомпоновки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДанных");	
	ПроцессорВывода.УстановитьОбъект(ДеревоЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ЗначениеВРеквизитФормы(ДеревоЗначений,"ДеревоДанных");
	Элементы.ДеревоДанных.Обновить();
	//ПроцессорВывода.НачатьВывод();
	//  Пока Истина Цикл
	//   
	//    ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	//    Если ЭлементРезультата = Неопределено Тогда
	//        Прервать;
	//    Иначе
	//        ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
	//    КонецЕсли;
	//   
	//   КонецЦикла;	
	// ПроцессорВывода.ЗакончитьВывод();
	
	//ЗначениеВРеквизитФормы(ДеревоЗначений,"ДеревоДанных")
КонецПроцедуры




&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() тогда 	
		ОбновитьДерево();
	иначе 
		ПоказатьПредупреждение(,"Не заполнено поле отбора");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	СнятьУстановитьФлажки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьУстановитьФлажки(ЗначениеФлажка)
	для каждого СтрДокумент из ДеревоДанных.ПолучитьЭлементы() цикл
		СтрДокумент.Пометка = ЗначениеФлажка;
		Для Каждого СтрокаССИД из СтрДокумент.ПолучитьЭлементы() цикл
			СтрокаССИД.Пометка = ЗначениеФлажка;
		КонецЦикла;		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СнятьФлажки(Команда)
	СнятьУстановитьФлажки(Ложь)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхЗаявкаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура ЗаполнитьАктивныеСтрокиДокумента()
	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоДанныхПометкаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры


