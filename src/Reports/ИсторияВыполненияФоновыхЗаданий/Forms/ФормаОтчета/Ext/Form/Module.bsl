#Область Основные_процедуры_и_функции
&НаКлиенте
Процедура ОбновитьНаКлиенте()
			
	ЗаполнитьДиаграммуНаТекущейСтраницеНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьДанныеНаСервере()
	
	ДанныеУспешноПрочитаны = Ложь;
	
	ПустаяДата = Дата(1,1,1);
	
	Если РежимВычисленияПериода = "Вывести данные за последние" Тогда
		
		Если ЧислоЕдиницВремениДляРасчетаДатыНачала = 0 Тогда
			СообщениеПользователю 		= Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Введите положительное число";
			СообщениеПользователю.Поле 	= "ЧислоЕдиницВремениДляРасчетаДатыНачала";
			СообщениеПользователю.Сообщить();
			Возврат ДанныеУспешноПрочитаны;
		КонецЕсли;
		
		ДатаОкончания = ТекущаяДата();
		
		Если ЕдиницаВремениДляВыводаПоследнихX = "ч." Тогда
			ДатаНачала = ДатаОкончания - 3600 * ЧислоЕдиницВремениДляРасчетаДатыНачала;
		ИначеЕсли ЕдиницаВремениДляВыводаПоследнихX = "мин." Тогда
			ДатаНачала = ДатаОкончания - 60 * ЧислоЕдиницВремениДляРасчетаДатыНачала;
		Иначе
			ДатаНачала = ДатаОкончания - ЧислоЕдиницВремениДляРасчетаДатыНачала;
		КонецЕсли;
		
	ИначеЕсли РежимВычисленияПериода = "Вывести данные за указанный период" Тогда
	
		Если ПриОбновленииПодставлятьТекущуюДатуВПравуюГраницу Тогда
			ДатаОкончания = ТекущаяДата();
		КонецЕсли;
		
		Если ДатаНачала > ДатаОкончания Тогда
			СообщениеПользователю 		= Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Укажите корректную дату начала периода.";
			СообщениеПользователю.Поле 	= "ДатаНачала";
			СообщениеПользователю.Сообщить();
			Возврат ДанныеУспешноПрочитаны;
		КонецЕсли;
	
	КонецЕсли;
			
	//Инициализируем данные перекрестно, чтобы при поиске минимума/максимума период мог ужаться, если заданий не было
	МинДата = ДатаОкончания;
	МаксДата = ДатаНачала;

	ТЗДанныеФоновыхЗаданий.Очистить();
	
	//ИмяXMLФайла = ПолучитьИмяВременногоФайла("XML");
   
	//Фильтр = Новый Структура;
	//  Фильтр.Вставить("ДатаНачала"	, ДатаНачала);
	//Фильтр.Вставить("ДатаОкончания"	, ДатаОкончания);
	
	//СписокСобытий = Новый Массив;
	//СписокСобытий.Добавить("_$Job$_.Start");
	//СписокСобытий.Добавить("_$Job$_.Succeed");
	//СписокСобытий.Добавить("_$Job$_.Fail");
	//СписокСобытий.Добавить("_$Job$_.Cancel");
	//Фильтр.Вставить("Событие", СписокСобытий);
	//ВыгрузитьЖурналРегистрации(ИмяXMLФайла, Фильтр);//, "Дата, Метаданные, Данные, Событие, ПредставлениеДанных, ИмяПользователя");
	
	//ЧтениеXML = Новый ЧтениеXML;
	//ЧтениеXML.ОткрытьФайл(ИмяXMLФайла);
	//ПостроительDOM = Новый ПостроительDOM;
	//ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	//Event = ДокументDOM.ПолучитьЭлементыПоИмени("v8e:Event");
	//МассивСобытий = новый Массив;
	
	ВыборкаРегламентныхЗаданий = ПолучитьСписокРегламентныхЗаданий(ДатаНачала, ДатаОкончания);
	
	//Для СчетчикСобытий = 0 По Event.Количество() - 1 Цикл
	
	Пока ВыборкаРегламентныхЗаданий.Следующий() Цикл
		//ДочерниеУзлы = Event[СчетчикСобытий].ДочерниеУзлы;
		//Для Каждого Узел Из ДочерниеУзлы Цикл
		//    Если Узел.ИмяУзла = "v8e:Date" Тогда
		//        ДатаСобытия = СтрЗаменить(Узел.ТекстовоеСодержимое, "T", "");
		//        ДатаСобытия = СтрЗаменить(ДатаСобытия, ":", "");
		//        ДатаСобытия = Дата(СтрЗаменить(ДатаСобытия, "-", ""));
		//    ИначеЕсли Узел.ИмяУзла = "v8e:MetadataPresentation" Тогда
		//        ПредставлениеЗадания = Узел.ТекстовоеСодержимое; 
		//	ИначеЕсли Узел.ИмяУзла = "v8e:Metadata" Тогда
		//        Имязадания = Узел.ТекстовоеСодержимое;
		//    ИначеЕсли Узел.ИмяУзла = "v8e:Connection" Тогда
		//        ИДСоединения = Узел.ТекстовоеСодержимое;
		//    ИначеЕсли Узел.ИмяУзла = "v8e:Session" Тогда
		//        ИДСессии = Узел.ТекстовоеСодержимое;
		//	ИначеЕсли Узел.ИмяУзла = "v8e:Event" Тогда
		//		Событие = Узел.ТекстовоеСодержимое;
		//	ИначеЕсли Узел.ИмяУзла = "v8e:UserName" Тогда
		//        Пользователь = Узел.ТекстовоеСодержимое;
		//	ИначеЕсли Узел.ИмяУзла = "v8e:Comment" Тогда
		//		КомментарийСобытия = Узел.ТекстовоеСодержимое;
		//    КонецЕсли;
		//КонецЦикла;
		
		ДатаСобытия = ВыборкаРегламентныхЗаданий.ДатаНачала;
		ПредставлениеЗадания = Строка(ВыборкаРегламентныхЗаданий.РегламентноеЗадание);
		Имязадания = Строка(ВыборкаРегламентныхЗаданий.РегламентноеЗадание);
		ИДСоединения = ВыборкаРегламентныхЗаданий.НомерСеанса;
		ИДСессии = ВыборкаРегламентныхЗаданий.НомерСеанса;
		Событие = ВыборкаРегламентныхЗаданий.Событие;
		Пользователь = ВыборкаРегламентныхЗаданий.Пользователь;
		КомментарийСобытия = ВыборкаРегламентныхЗаданий.ОписаниеОшибки;
		//Для отладки
		//Сообщить(Строка(ДатаСобытия) + " 1: " + Событие + " 2: " + Имязадания + " 3: " + ИДСессии + " 4: " + ИДСоединения + " 5: " + Пользователь);
		
		Если НеУчитыватьБезымянныеФоновыеЗадания Тогда 
			Если ПустаяСтрока(Имязадания) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
			
		//Поиск строки с фоновым, если одно из событий уже было обработано
		СтрокиТЗДанныеФоновыхЗаданий = ТЗДанныеФоновыхЗаданий.НайтиСтроки(Новый Структура("Соединение", ИДСоединения));
		Если СтрокиТЗДанныеФоновыхЗаданий.Количество() > 0 Тогда
			
			ДанныеФоновогоЗадания = СтрокиТЗДанныеФоновыхЗаданий[0];
						
		Иначе
			
			ДанныеФоновогоЗадания = ТЗДанныеФоновыхЗаданий.Добавить();
			СинонимЗадания = СокрЛП(СтрЗаменить(ПредставлениеЗадания, "Регламентное задание.", ""));
			//Имязадания = СокрЛП(СтрЗаменить(Имязадания, "ScheduledJob.", ""));
			ДанныеФоновогоЗадания.Представление = ?(ОтображатьВЗаголовкеСиноним, СинонимЗадания, ИмяЗадания);
			ДанныеФоновогоЗадания.РасширенноеПредставление = "" + ДатаСобытия + ": " + ?(ОтображатьВЗаголовкеСиноним, СинонимЗадания, ИмяЗадания);
			ДанныеФоновогоЗадания.Синоним		= СинонимЗадания;
			ДанныеФоновогоЗадания.Имя			= ИмяЗадания;
			ДанныеФоновогоЗадания.Соединение 	= ИДСоединения;
		
		КонецЕсли;
		
		//Если Событие = "_$Job$_.Start" Тогда
		//	ДанныеФоновогоЗадания.ДатаНачала = ДатаСобытия;
		//Иначе
		//	ДанныеФоновогоЗадания.ДатаОкончания = ДатаСобытия;
		//КонецЕсли;
		ДанныеФоновогоЗадания.ДатаНачала = ВыборкаРегламентныхЗаданий.Начало;
		ДанныеФоновогоЗадания.ДатаОкончания = ВыборкаРегламентныхЗаданий.Конец;
		
		МинДата = Мин(МинДата, ДатаСобытия);
		МаксДата = Макс(МаксДата, ДатаСобытия);
		
		//Если Событие = "_$Job$_.Succeed" Тогда
		Если Не ВыборкаРегламентныхЗаданий.Ошибка И ЗначениеЗаполнено(ВыборкаРегламентныхЗаданий.Конец) Тогда
			ДанныеФоновогоЗадания.Состояние = "Успешно завершено";
		//ИначеЕсли Событие = "_$Job$_.Fail" Тогда
		ИначеЕсли ВыборкаРегламентныхЗаданий.Ошибка Тогда
			ДанныеФоновогоЗадания.Состояние = "Завершено с ошибкой";
			ДанныеФоновогоЗадания.ОписаниеОшибки = СокрЛП(КомментарийСобытия);
		//ИначеЕсли Событие = "_$Job$_.Cancel" Тогда
		//	ДанныеФоновогоЗадания.Состояние = "Отменено";
		Иначе
			//Если еще не обработано завершающее событие, проставляется Активно
			Если Не ЗначениеЗаполнено(ДанныеФоновогоЗадания.Состояние) Тогда
				ДанныеФоновогоЗадания.Состояние = "Активно";
			КонецЕсли;
		КонецЕсли;		
						
	КонецЦикла;
	   	
	//Данных нет, значения, заданные в начале, остались без изменений
	Если МинДата > МаксДата Тогда
		МинДата 	= ДатаНачала;
		МаксДата 	= ДатаОкончания;
	КонецЕсли;
	
	ПустаяДата = Дата(1,1,1);
	Если НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда
		ФорматДатыПодсказки = "ДЛФ=T";
	Иначе
		ФорматДатыПодсказки = "ДЛФ=DT";
	КонецЕсли;
	
	//Вычисление длительности интервалов
	Для Каждого ДанныеФоновогоЗадания Из ТЗДанныеФоновыхЗаданий Цикл
		
		Если ДанныеФоновогоЗадания.ДатаНачала = Неопределено Тогда
			ДанныеФоновогоЗадания.ДатаНачала = ПустаяДата;
		КонецЕсли;
		
		Если ДанныеФоновогоЗадания.ДатаОкончания = Неопределено Тогда
			ДанныеФоновогоЗадания.ДатаОкончания = ПустаяДата;
		КонецЕсли;
		
		//Ситуация, когда у задания есть начало, но нет окончания, может возникнуть в двух случаях:
		//1.Задание активно 2. Окончание задания по каким-то причинам
		//Чтобы отличить 1 от 2, необходимо проверить, выполнялось ли заданее снова
		//тогда можно не отображать 2 до правой границы выбранного пользователем периода, а просто поставить точку со статусом Данные некорректны,
		//если же ничего не предпринимать, то два интервала наложатся друг на друга
		//Таким образом, 
		//для 1: в правую границу интервала вносится правая граница выбранного пользователем периода
		//для 2: в правую границу интервала вносится левая граница этого же интервала плюс секунда для бОльшей наглядности
		Если ДанныеФоновогоЗадания.Состояние = "Активно" И ДанныеФоновогоЗадания.ДатаОкончания = Дата(1,1,1) Тогда
			
			НайденБолееПозднийЗапуск = Ложь;
			СтрокиСТемЖеЗаданием = ТЗДанныеФоновыхЗаданий.НайтиСтроки(Новый Структура("Имя",ДанныеФоновогоЗадания.Имя));
			Для Каждого СтрокаСТемЖеЗаданием Из СтрокиСТемЖеЗаданием Цикл 
				//Другой запуск
				Если ДанныеФоновогоЗадания.Соединение <> СтрокаСТемЖеЗаданием.Соединение Тогда
					Если СтрокаСТемЖеЗаданием.ДатаНачала <> ПустаяДата И ДанныеФоновогоЗадания.ДатаНачала < СтрокаСТемЖеЗаданием.ДатаНачала Тогда
						НайденБолееПозднийЗапуск = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденБолееПозднийЗапуск Тогда
				ДанныеФоновогоЗадания.Состояние = "Данные некорректны";
				ДанныеФоновогоЗадания.ДатаОкончания = ДанныеФоновогоЗадания.ДатаНачала + 1;
			Иначе
				ДанныеФоновогоЗадания.ДатаОкончания = ДатаОкончания;
			КонецЕсли;
		КонецЕсли;

		ГраницыИнтервалаСтрокой = ?(ДанныеФоновогоЗадания.ДатаНачала = ПустаяДата, "<>", Формат(ДанныеФоновогоЗадания.ДатаНачала, ФорматДатыПодсказки)) + " - " + 
			?(ДанныеФоновогоЗадания.ДатаОкончания = ПустаяДата, "<>", Формат(ДанныеФоновогоЗадания.ДатаОкончания, ФорматДатыПодсказки));
			
		Если ДанныеФоновогоЗадания.ДатаНачала <> ПустаяДата И ДанныеФоновогоЗадания.ДатаОкончания <> ПустаяДата Тогда
			
			ДлительностьИнтервалаСекВсего = ДанныеФоновогоЗадания.ДатаОкончания - ДанныеФоновогоЗадания.ДатаНачала;
			ДанныеФоновогоЗадания.Длительность = ДлительностьИнтервалаСекВсего;
			ДлительностьВыполненияСтрокой = ПолучитьДлительностьИнтервалаСтрокой(ДлительностьИнтервалаСекВсего);
			ДанныеФоновогоЗадания.ДлительностьПредставление = ДлительностьВыполненияСтрокой;
			
		Иначе
			ДанныеФоновогоЗадания.Длительность = 0;
			ДлительностьВыполненияСтрокой = "длительность неизвестна";
			ДанныеФоновогоЗадания.ДлительностьПредставление = ДлительностьВыполненияСтрокой;
		КонецЕсли;
		
		ДанныеФоновогоЗадания.ДлительностьПериодПредставление = ДлительностьВыполненияСтрокой + "(" + ГраницыИнтервалаСтрокой + ")";
		    					
	КонецЦикла;
	
	ДанныеПрочитаны = Истина;
	ТЗСекунды.Очистить();
	ТЗСекундыЗаполнена = Ложь;
	ТЗСекундыСвернутая.Очистить();
	ТЗСекундыСвернутаяЗаполнена = Ложь;
	ТЗДлительностьФоновыхЗаданий.Очистить();
	ТЗДлительностьФоновыхЗаданийЗаполнена = Ложь;
	ТЗКоличествоЗапусковФоновыхЗаданий.Очистить();
	ТЗКоличествоЗапусковФоновыхЗаданийЗаполнена = Ложь;
	
	//Все диаграммы необходимо перезаполнить
	Для Каждого СтрокаТЗ Из ТЗСостоянияДиаграмм Цикл
		СтрокаТЗ.Заполнена = Ложь;
	КонецЦикла;
	
	ДанныеУспешноПрочитаны = Истина;
	
	Возврат ДанныеУспешноПрочитаны;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокРегламентныхЗаданий(ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияРегламентныхЗаданий.Период,
	|	ИсторияРегламентныхЗаданий.РегламентноеЗадание,
	|	ИсторияРегламентныхЗаданий.Событие,
	|	ИсторияРегламентныхЗаданий.Пользователь,
	|	ИсторияРегламентныхЗаданий.НомерСеанса,
	|	ИсторияРегламентныхЗаданий.Начало,
	|	ИсторияРегламентныхЗаданий.Конец,
	|	ИсторияРегламентныхЗаданий.Длительность,
	|	ИсторияРегламентныхЗаданий.Ошибка,
	|	ИсторияРегламентныхЗаданий.ОписаниеОшибки,
	|	ИсторияРегламентныхЗаданий.Завершено
	|ИЗ
	|	РегистрСведений.ИсторияРегламентныхЗаданий КАК ИсторияРегламентныхЗаданий
	|ГДЕ
	|	ИсторияРегламентныхЗаданий.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДиаграммуНаТекущейСтраницеНаКлиенте()
	
	//При указанных настройках данные должны обновляться каждый раз
	Если РежимВычисленияПериода = "Вывести данные за последние" Или ПриОбновленииПодставлятьТекущуюДатуВПравуюГраницу Тогда
		ДанныеПрочитаны = Ложь;
		ТЗСекунды.Очистить();
		ТЗСекундыЗаполнена = Ложь;
		ТЗСекундыСвернутая.Очистить();
		ТЗСекундыСвернутаяЗаполнена = Ложь;
		ТЗДлительностьФоновыхЗаданий.Очистить();
		ТЗДлительностьФоновыхЗаданийЗаполнена = Ложь;
		ТЗКоличествоЗапусковФоновыхЗаданий.Очистить();
		ТЗКоличествоЗапусковФоновыхЗаданийЗаполнена = Ложь;
		УстановитьЗначениеРеквизитаДляВсехСтрокТЗСостоянияДиаграммНаКлиенте("Заполнена", Ложь);
	КонецЕсли;
	
	пТекущаяСтраница = Элементы.ГруппаДиаграммыСтраницы.ТекущаяСтраница;
	Если пТекущаяСтраница = Элементы.ГруппаДиаграммаГантаИсторияВыполнения Тогда
		ИмяТекущейСтраницыСДиаграммой = Элементы.ГруппаДиаграммаГантаИсторияВыполнения.Имя;
	ИначеЕсли пТекущаяСтраница = Элементы.ГруппаТопДлительныхСтраница Тогда
		ИмяТекущейСтраницыСДиаграммой = Элементы.ГруппаТопДлительныхСтраницы.ТекущаяСтраница.Имя;
	ИначеЕсли пТекущаяСтраница = Элементы.ГруппаЧислоВыполняющихсяЗаданийСтраница Тогда
		ИмяТекущейСтраницыСДиаграммой = Элементы.ГруппаЧислоВыполняющихсяЗаданийСтраницы.ТекущаяСтраница.Имя;
	ИначеЕсли пТекущаяСтраница = Элементы.ГруппаГистограммаСостоянияСтраница Тогда
		ИмяТекущейСтраницыСДиаграммой = Элементы.ГруппаГистограммаСостоянияСтраницы.ТекущаяСтраница.Имя;
	КонецЕсли;
		
	ИмяТекущейДиаграммы = СтрЗаменить(ИмяТекущейСтраницыСДиаграммой, "Группа", "");
	ЗаполнитьДиаграммуНаСервере(ИмяТекущейДиаграммы);	
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьДиаграммуНаСервере(ИмяДиаграммы)
	
	//Если данные не прочитаны после последнего изменения параметров отбора
	Если Не ДанныеПрочитаны Тогда
		ДанныеУспешноПрочитаны = ПрочитатьДанныеНаСервере();
		Если Не ДанныеУспешноПрочитаны Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Если диаграмма уже заполнена
	НайденныеСтроки = ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Сообщить("Не найдена диаграмма " + ИмяДиаграммы);
		Возврат;
	КонецЕсли;
	
	Если НайденныеСтроки[0].Заполнена Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяДиаграммы = "ДиаграммаГантаИсторияВыполнения" Тогда
		ЗаполнитьДиаграммуГантаИсторияВыполненияНаСервере();
	ИначеЕсли ИмяДиаграммы = "ДиаграммаГантаТопДлительных" Тогда
		ЗаполнитьДиаграммуГантаТопДлительныхНаСервере();
	ИначеЕсли ИмяДиаграммы = "ДиаграммаГантаТопДлительныхОбщееВремя" Тогда
		ЗаполнитьДиаграммуГантаТопДлительныхОбщееВремяНаСервере();
	ИначеЕсли ИмяДиаграммы = "КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий" Тогда
		ЗаполнитьКруговуюДиаграммуДолиПериодовСРазнымЧисломЗаданийНаСервере();
	ИначеЕсли ИмяДиаграммы = "ДиаграммаГрафикЧислоВыполняющихсяЗаданий" Тогда
		ЗаполнитьДиаграммуГрафикЧислоВыполняющихсяЗаданийНаСервере();
	ИначеЕсли ИмяДиаграммы = "ГистограммаЗавершенныеСОшибками" Тогда
		ЗаполнитьГистограммуЗавершенныеСОшибкамиНаСервере();
	ИначеЕсли ИмяДиаграммы = "ГистограммаДолиСостоянийПриЗавершении" Тогда
		ЗаполнитьГистограммуДолиСостоянийПриЗавершенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммуГантаИсторияВыполненияНаСервере()
	
	//Зеленый цвет
	ЗеленыйЦвет = Новый Цвет(0,180,0);
	//Красный цвет
	КрасныйЦвет = Новый Цвет(200,7,7);
	//Синий цвет
	СинийЦвет = Новый Цвет(6,107,150);
	//Оранжевый цвет
	ОранжевыйЦвет = Новый Цвет(252,150,7);
	//Черный цвет
	ЧерныйЦвет = Новый Цвет(0,0,0);
	
	ПустаяДата = Дата(1,1,1);
	Если НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда
		ФорматДатыПодсказки = "ДЛФ=T";
	Иначе
		ФорматДатыПодсказки = "ДЛФ=DT";
	КонецЕсли;
	
	ДиаграммаГантаИсторияВыполнения.Очистить();
	ДиаграммаГантаИсторияВыполнения.Обновление = Ложь;
			
	ТЗДанныеФоновыхЗаданий.Сортировать("Представление");
	
	ДиаграммаГантаИсторияВыполнения.УстановитьПолныйИнтервал(ДатаНачала, ДатаОкончания);
		
	Для Каждого ДанныеФоновогоЗадания Из ТЗДанныеФоновыхЗаданий Цикл
						
		Если РежимОтображения = "Задания в точках, состояния в сериях" Тогда
			
			Точка 			= ДиаграммаГантаИсторияВыполнения.УстановитьТочку(ДанныеФоновогоЗадания.Представление);
			Серия 			= ДиаграммаГантаИсторияВыполнения.УстановитьСерию("Все задания");
						
		Иначе
			Точка 			= ДиаграммаГантаИсторияВыполнения.УстановитьТочку(ДанныеФоновогоЗадания.Состояние);
			Серия 			= ДиаграммаГантаИсторияВыполнения.УстановитьСерию(ДанныеФоновогоЗадания.Представление);
		КонецЕсли;
		     				
		ТекущееЗначение = ДиаграммаГантаИсторияВыполнения.ПолучитьЗначение(Точка, Серия);
		
		Интервал 				= ТекущееЗначение.Добавить();
		Интервал.Начало 		= ДанныеФоновогоЗадания.ДатаНачала;
		Интервал.Конец 			= ДанныеФоновогоЗадания.ДатаОкончания;
		Интервал.Текст  		= ДанныеФоновогоЗадания.Состояние + ": " + ДанныеФоновогоЗадания.ДлительностьПериодПредставление + 
			?(ДанныеФоновогоЗадания.Состояние = "Завершено с ошибкой", " ОШИБКА: " + ДанныеФоновогоЗадания.ОписаниеОшибки, "");
		Интервал.Расшифровка 	= ДанныеФоновогоЗадания.Состояние + ": " + ДанныеФоновогоЗадания.ДлительностьПериодПредставление + 
			?(ДанныеФоновогоЗадания.Состояние = "Завершено с ошибкой", " ОШИБКА: " + ДанныеФоновогоЗадания.ОписаниеОшибки, "");
			
		Если РежимОтображения = "Задания в точках, состояния в сериях" Тогда
				
			Если ДанныеФоновогоЗадания.Состояние = "Успешно завершено" Тогда
				ТекущийЦвет = ЗеленыйЦвет;
			ИначеЕсли ДанныеФоновогоЗадания.Состояние = "Завершено с ошибкой" Тогда
				ТекущийЦвет = КрасныйЦвет;
			ИначеЕсли ДанныеФоновогоЗадания.Состояние = "Отменено" Тогда
				ТекущийЦвет = СинийЦвет;
			ИначеЕсли ДанныеФоновогоЗадания.Состояние = "Активно" Тогда
				ТекущийЦвет = ОранжевыйЦвет;
			ИначеЕсли ДанныеФоновогоЗадания.Состояние = "Данные некорректны" Тогда
				ТекущийЦвет = ЧерныйЦвет;
			КонецЕсли;
			Интервал.Цвет = ТекущийЦвет;
			
		КонецЕсли;
				
	КонецЦикла;

	ДиаграммаГантаИсторияВыполнения.Обновление = Истина;

	ИмяДиаграммы = "ДиаграммаГантаИсторияВыполнения";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммуГантаТопДлительныхНаСервере()
	
	ПустаяДата = Дата(1,1,1);
	Если НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда
		ФорматДатыПодсказки = "ДЛФ=T";
	Иначе
		ФорматДатыПодсказки = "ДЛФ=DT";
	КонецЕсли;
	
	ДиаграммаГантаТопДлительных.Очистить();
	ДиаграммаГантаТопДлительных.Обновление = Ложь;
	       		
	ТЗДанныеФоновыхЗаданий.Сортировать("Длительность УБЫВ");
	
	ДлительностьСамогоДлинногоЗадания = 0;
	
	Серия = ДиаграммаГантаТопДлительных.УстановитьСерию(?(ТопЧислоОтображаемыхЗаданийТолькоУспешноЗавершенные, "Задания в состоянии ""Успешно завершено""", "Задания в любых состояниях"));
	
	СчетчикЗаданий = 1;
	Для Каждого ДанныеФоновогоЗадания Из ТЗДанныеФоновыхЗаданий Цикл
		
		Если ТопЧислоОтображаемыхЗаданий > 0 И СчетчикЗаданий > ТопЧислоОтображаемыхЗаданий  Тогда
			Прервать;
		КонецЕсли;
		   		
		Если ТопЧислоОтображаемыхЗаданийТолькоУспешноЗавершенные И ДанныеФоновогоЗадания.Состояние <> "Успешно завершено" Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикЗаданий = СчетчикЗаданий + 1;
				
		Если ДлительностьСамогоДлинногоЗадания = 0 Тогда
			ДлительностьСамогоДлинногоЗадания = ДанныеФоновогоЗадания.Длительность;
		КонецЕсли;
		
		Точка 			= ДиаграммаГантаТопДлительных.УстановитьТочку(ДанныеФоновогоЗадания.РасширенноеПредставление);
		
		ЗеленыйЦвет = Новый Цвет(0,180,0);
		Серия.Цвет = ЗеленыйЦвет;
		
		Значение 				= ДиаграммаГантаТопДлительных.ПолучитьЗначение(Точка, Серия);
		Интервал 				= Значение.Добавить();
		Интервал.Начало 		= НачалоГода(ТекущаяДата());
		Интервал.Конец 			= НачалоГода(ТекущаяДата()) + ?(ЗначениеЗаполнено(ДанныеФоновогоЗадания.Длительность), ДанныеФоновогоЗадания.Длительность, 0);
		Интервал.Текст  		= ДанныеФоновогоЗадания.ДлительностьПериодПредставление + 
			?(ДанныеФоновогоЗадания.Состояние = "Завершено с ошибкой", " ОШИБКА: " + ДанныеФоновогоЗадания.ОписаниеОшибки, "");
		Интервал.Расшифровка 	= ДанныеФоновогоЗадания.ДлительностьПериодПредставление + 
			?(ДанныеФоновогоЗадания.Состояние = "Завершено с ошибкой", " ОШИБКА: " + ДанныеФоновогоЗадания.ОписаниеОшибки, "");
							
	КонецЦикла;
	
	ДопОтрезок = Цел(ДлительностьСамогоДлинногоЗадания / 10);
	ДопОтрезок = ?(ДопОтрезок = 0, 1, ДопОтрезок);
	ДиаграммаГантаТопДлительных.УстановитьПолныйИнтервал(НачалоГода(ТекущаяДата()), НачалоГода(ТекущаяДата()) + ДлительностьСамогоДлинногоЗадания + ДопОтрезок);

	ДиаграммаГантаТопДлительных.Обновление = Истина;
	
	ИмяДиаграммы = "ДиаграммаГантаТопДлительных";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммуГантаТопДлительныхОбщееВремяНаСервере()
	
	ПустаяДата = Дата(1,1,1);
	Если НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда
		ФорматДатыПодсказки = "ДЛФ=T";
	Иначе
		ФорматДатыПодсказки = "ДЛФ=DT";
	КонецЕсли;
	
	ДиаграммаГантаТопДлительныхОбщееВремя.Очистить();
	ДиаграммаГантаТопДлительныхОбщееВремя.Обновление = Ложь;
	       		
	ЗаполнитьТЗДлительностьФоновыхЗаданий();
	
	ДлительностьСамогоДлинногоЗадания = 0;
	
	Серия = ДиаграммаГантаТопДлительныхОбщееВремя.УстановитьСерию(?(ТопЧислоОтображаемыхЗаданийТолькоУспешноЗавершенные, "Задания в состоянии ""Успешно завершено""", "Задания в любых состояниях"));
	
	СчетчикЗаданий = 1;
	
	Для Каждого ДанныеФоновогоЗадания Из ТЗДлительностьФоновыхЗаданий Цикл
		
		Если ТопЧислоОтображаемыхЗаданийОбщееВремя > 0 И СчетчикЗаданий > ТопЧислоОтображаемыхЗаданийОбщееВремя  Тогда
			Прервать;
		КонецЕсли;
				
		СчетчикЗаданий = СчетчикЗаданий + 1;
		
		Если ДлительностьСамогоДлинногоЗадания = 0 Тогда
			ДлительностьСамогоДлинногоЗадания = ДанныеФоновогоЗадания.Длительность;
		КонецЕсли;
				
		Точка 	= ДиаграммаГантаТопДлительныхОбщееВремя.УстановитьТочку(ДанныеФоновогоЗадания.Представление);
		
		ЗеленыйЦвет = Новый Цвет(0,180,0);
		Серия.Цвет = ЗеленыйЦвет;
					
		Значение 				= ДиаграммаГантаТопДлительныхОбщееВремя.ПолучитьЗначение(Точка, Серия);
		Интервал 				= Значение.Добавить();
		Интервал.Начало 		= НачалоГода(ТекущаяДата());
		Интервал.Конец 			= НачалоГода(ТекущаяДата()) + ?(ЗначениеЗаполнено(ДанныеФоновогоЗадания.Длительность), ДанныеФоновогоЗадания.Длительность, 0);
		       		
		ДлительностьВыполненияСтрокой = ПолучитьДлительностьИнтервалаСтрокой(ДанныеФоновогоЗадания.Длительность);
		
		Интервал.Текст  		= ДлительностьВыполненияСтрокой;
		Интервал.Расшифровка 	= ДлительностьВыполненияСтрокой;
							
	КонецЦикла;
	
	ДопОтрезок = Цел(ДлительностьСамогоДлинногоЗадания / 10);
	ДопОтрезок = ?(ДопОтрезок = 0, 1, ДопОтрезок);
	ДиаграммаГантаТопДлительныхОбщееВремя.УстановитьПолныйИнтервал(НачалоГода(ТекущаяДата()), НачалоГода(ТекущаяДата()) + ДлительностьСамогоДлинногоЗадания + ДопОтрезок);

	ДиаграммаГантаТопДлительныхОбщееВремя.Обновление = Истина;
	
	ИмяДиаграммы = "ДиаграммаГантаТопДлительныхОбщееВремя";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКруговуюДиаграммуДолиПериодовСРазнымЧисломЗаданийНаСервере()
	
	ПустаяДата = Дата(1,1,1);
		
	ЗаполнитьТЗСекунды();
	ЗаполнитьТЗСекундыСвернутая();
		
	ЧислоСекундВсего = ТЗСекундыСвернутая.Итог("ЧислоСекунд");
	
	КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий.Очистить();
	КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий.Обновление = Ложь;
   	КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий.АвтоТранспонирование = Ложь;
	
	Точка = КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий.УстановитьТочку(0);
	
	Для Каждого СтрокаТЗ Из ТЗСекундыСвернутая Цикл
		
		ОписаниеСерии = ?(СтрокаТЗ.ЧислоЗаданий = 0, "Задания не выполнялись", "Количество фоновых заданий: " + Строка(СтрокаТЗ.ЧислоЗаданий));
		Серия = КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий.УстановитьСерию(ОписаниеСерии);
		ДоляВПроцентах = ?(ЧислоСекундВсего > 0, Окр(СтрокаТЗ.ЧислоСекунд / ЧислоСекундВсего * 100, 2), 0);
		КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий.УстановитьЗначение(
			Точка, 
			Серия, 
			СтрокаТЗ.ЧислоСекунд, , 
			ОписаниеСерии + " (суммарная длительность: " + ПолучитьДлительностьИнтервалаСтрокой(СтрокаТЗ.ЧислоСекунд) + ", " + ДоляВПроцентах  + "%)");
				
	КонецЦикла;
	
	КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий.Обновление = Истина;
	КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий.АвтоТранспонирование = Истина;
	
	ИмяДиаграммы = "КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммуГрафикЧислоВыполняющихсяЗаданийНаСервере()
	
	ПустаяДата = Дата(1,1,1);
	
	ДиаграммаГрафикЧислоВыполняющихсяЗаданий.ТипДиаграммы = ТипДиаграммы[ТипДиаграммыГрафикЧислоВыполняющихсяЗаданий];
	ДиаграммаГрафикЧислоВыполняющихсяЗаданий.Очистить();
	ДиаграммаГрафикЧислоВыполняющихсяЗаданий.Обновление = Ложь;
   	ДиаграммаГрафикЧислоВыполняющихсяЗаданий.АвтоТранспонирование = Ложь;
		
	Серия = ДиаграммаГрафикЧислоВыполняющихсяЗаданий.УстановитьСерию("Одновременно выполнявшиеся фоновые задания");
	
	ЗаполнитьТЗСекунды();
	
	Для Каждого СтрокаТЗ Из ТЗСекунды Цикл
		
		Точка = ДиаграммаГрафикЧислоВыполняющихсяЗаданий.УстановитьТочку(ПустаяДата + СтрокаТЗ.НомерСекунды);
		ДиаграммаГрафикЧислоВыполняющихсяЗаданий.УстановитьЗначение(Точка, Серия, СтрокаТЗ.ЧислоЗаданий);
				
	КонецЦикла;
	
	ДиаграммаГрафикЧислоВыполняющихсяЗаданий.Обновление = Истина;
	ДиаграммаГрафикЧислоВыполняющихсяЗаданий.АвтоТранспонирование = Истина;
	
	ИмяДиаграммы = "ДиаграммаГрафикЧислоВыполняющихсяЗаданий";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГистограммуЗавершенныеСОшибкамиНаСервере()
	
	ПустаяДата = Дата(1,1,1);
	
	ГистограммаЗавершенныеСОшибками.Очистить();
	ГистограммаЗавершенныеСОшибками.Обновление = Ложь;
   	ГистограммаЗавершенныеСОшибками.АвтоТранспонирование = Ложь;
	
	Если Не ТЗКоличествоЗапусковФоновыхЗаданийЗаполнена Тогда
		ЗаполнитьТЗКоличествоЗапусковФоновыхЗаданий();
	КонецЕсли;
	
	ТЗКоличествоЗапусковФоновыхЗаданий.Сортировать(СтрЗаменить(ВидСортировкиТЗКоличествоЗапусковФоновыхЗаданий, "Количество", "КоличествоОшибка"));
	
	Серия = ГистограммаЗавершенныеСОшибками.УстановитьСерию("Завершено с ошибкой");
	
	//Красный цвет
	КрасныйЦвет = Новый Цвет(200,7,7);
	Серия.Цвет = КрасныйЦвет;

	Для Каждого СтрокаТЗКоличествоФоновыхЗаданийСОшибками Из ТЗКоличествоЗапусковФоновыхЗаданий Цикл
		
		Если СтрокаТЗКоличествоФоновыхЗаданийСОшибками.КоличествоОшибка = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		Точка = ГистограммаЗавершенныеСОшибками.УстановитьТочку(СтрокаТЗКоличествоФоновыхЗаданийСОшибками.Представление);
		
		СтрокиСТемЖеЗаданием = ТЗДанныеФоновыхЗаданий.НайтиСтроки(Новый Структура("Представление, Состояние",СтрокаТЗКоличествоФоновыхЗаданийСОшибками.Представление,"Завершено с ошибкой"));
		СчетчикЭлементовСпискаЗначений = 0;
		СписокРасшифровки = Новый СписокЗначений();
		Для Каждого СтрокаТЗДанныеФоновыхЗаданий Из СтрокиСТемЖеЗаданием Цикл
			СчетчикЭлементовСпискаЗначений = СчетчикЭлементовСпискаЗначений + 1;
			СписокРасшифровки.Добавить(Строка(СчетчикЭлементовСпискаЗначений) + ". " + Формат(СтрокаТЗДанныеФоновыхЗаданий.ДатаНачала, "ДФ='dd.MM.yyyy HH.mm.ss'") + ": " + СтрокаТЗДанныеФоновыхЗаданий.ОписаниеОшибки);
		КонецЦикла;
		СписокРасшифровки.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		ОписаниеЗаданияДляРасшифровки = "Описания ошибок, имевших место при выполнения регламентного задания """ + СтрокаТЗКоличествоФоновыхЗаданийСОшибками.Представление + """:";
		СписокРасшифровки.Вставить(0, ОписаниеЗаданияДляРасшифровки, ОписаниеЗаданияДляРасшифровки,, БиблиотекаКартинок.РегламентноеЗадание);
		
		ГистограммаЗавершенныеСОшибками.УстановитьЗначение(Точка, Серия, СтрокаТЗКоличествоФоновыхЗаданийСОшибками.КоличествоОшибка, СписокРасшифровки, "Задание завершилось с ошибкой " + СтрокаТЗКоличествоФоновыхЗаданийСОшибками.КоличествоОшибка + " раз(а)");
				 								
	КонецЦикла;
		
	ГистограммаЗавершенныеСОшибками.Обновление = Истина;
	ГистограммаЗавершенныеСОшибками.АвтоТранспонирование = Истина;
	
	ИмяДиаграммы = "ГистограммаЗавершенныеСОшибками";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГистограммуДолиСостоянийПриЗавершенииНаСервере()
	
	ПустаяДата = Дата(1,1,1);
	
	ГистограммаДолиСостоянийПриЗавершении.ТипДиаграммы = ТипДиаграммы[ТипДиаграммыГистограммаДолиСостоянийПриЗавершении];	
	ГистограммаДолиСостоянийПриЗавершении.Очистить();
	ГистограммаДолиСостоянийПриЗавершении.Обновление = Ложь;
   	ГистограммаДолиСостоянийПриЗавершении.АвтоТранспонирование = Ложь;
	
	Если Не ТЗКоличествоЗапусковФоновыхЗаданийЗаполнена Тогда
		ЗаполнитьТЗКоличествоЗапусковФоновыхЗаданий();
	КонецЕсли;
	
	ТЗКоличествоЗапусковФоновыхЗаданий.Сортировать(СтрЗаменить(ВидСортировкиТЗКоличествоЗапусковФоновыхЗаданий, "Количество", "КоличествоИтого"));
	
	//Зеленый цвет
	ЗеленыйЦвет = Новый Цвет(0,180,0);
	//Красный цвет
	КрасныйЦвет = Новый Цвет(200,7,7);
	//Синий цвет
	СинийЦвет = Новый Цвет(6,107,150);
	//Оранжевый цвет
	ОранжевыйЦвет = Новый Цвет(252,150,7);
	//Черный цвет
	ЧерныйЦвет = Новый Цвет(0,0,0);	
	
	СерияОшибка = ГистограммаДолиСостоянийПриЗавершении.УстановитьСерию("Завершено с ошибкой");
	СерияОшибка.Цвет = КрасныйЦвет;
	СерияОтменено = ГистограммаДолиСостоянийПриЗавершении.УстановитьСерию("Отменено");
	СерияОтменено.Цвет = СинийЦвет;
	СерияАктивно = ГистограммаДолиСостоянийПриЗавершении.УстановитьСерию("Активно");
	СерияАктивно.Цвет = ОранжевыйЦвет;
	СерияДанныеНекорректны = ГистограммаДолиСостоянийПриЗавершении.УстановитьСерию("Данные некорректны");
	СерияДанныеНекорректны.Цвет = ЧерныйЦвет;
	СерияУспешно = ГистограммаДолиСостоянийПриЗавершении.УстановитьСерию("Успешно завершено");
	СерияУспешно.Цвет = ЗеленыйЦвет;
	
	Для Каждого СтрокаТЗКоличествоЗапусковФоновыхЗаданий Из ТЗКоличествоЗапусковФоновыхЗаданий Цикл
		
		КоличествоИтого = СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоИтого;
		
		Точка = ГистограммаДолиСостоянийПриЗавершении.УстановитьТочку(СтрокаТЗКоличествоЗапусковФоновыхЗаданий.Представление);
		ГистограммаДолиСостоянийПриЗавершении.УстановитьЗначение(
			Точка, 
			СерияОшибка, 
			СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоОшибка,,
			"Завершено с ошибкой " + СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоОшибка + " раз(а) из " + КоличествоИтого + 
			?(КоличествоИтого > 0," (" + Окр(СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоОшибка / КоличествоИтого * 100,2) + "%)",""));
		
		Точка = ГистограммаДолиСостоянийПриЗавершении.УстановитьТочку(СтрокаТЗКоличествоЗапусковФоновыхЗаданий.Представление);
		ГистограммаДолиСостоянийПриЗавершении.УстановитьЗначение(
			Точка, 
			СерияОтменено, 
			СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоОтменено,,
			"Отменено " + СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоОтменено + " раз(а) из " + КоличествоИтого + 
			?(КоличествоИтого > 0," (" + Окр(СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоОтменено / КоличествоИтого * 100,2) + "%)",""));
		
		Точка = ГистограммаДолиСостоянийПриЗавершении.УстановитьТочку(СтрокаТЗКоличествоЗапусковФоновыхЗаданий.Представление);
		ГистограммаДолиСостоянийПриЗавершении.УстановитьЗначение(
			Точка, 
			СерияАктивно, 
			СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоАктивно,,
			"Активно " + СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоАктивно + " раз(а) из " + КоличествоИтого + 
			?(КоличествоИтого > 0," (" + Окр(СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоАктивно / КоличествоИтого * 100,2) + "%)",""));
		
		Точка = ГистограммаДолиСостоянийПриЗавершении.УстановитьТочку(СтрокаТЗКоличествоЗапусковФоновыхЗаданий.Представление);
		ГистограммаДолиСостоянийПриЗавершении.УстановитьЗначение(Точка, СерияДанныеНекорректны, СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоДанныеНекорректны,,
			"Данные некорректны " + СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоДанныеНекорректны + " раз(а) из " + КоличествоИтого + 
			?(КоличествоИтого > 0," (" + Окр(СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоДанныеНекорректны / КоличествоИтого * 100,2) + "%)",""));
		
		Точка = ГистограммаДолиСостоянийПриЗавершении.УстановитьТочку(СтрокаТЗКоличествоЗапусковФоновыхЗаданий.Представление);
		ГистограммаДолиСостоянийПриЗавершении.УстановитьЗначение(
			Точка, 
			СерияУспешно, 
			СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоУспешно,,
			"Успешно завершено " + СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоУспешно + " раз(а) из " + КоличествоИтого + 
			?(КоличествоИтого > 0," (" + Окр(СтрокаТЗКоличествоЗапусковФоновыхЗаданий.КоличествоУспешно / КоличествоИтого * 100,2) + "%)",""));
				 								
	КонецЦикла;
		
	ГистограммаДолиСостоянийПриЗавершении.Обновление = Истина;
	ГистограммаДолиСостоянийПриЗавершении.АвтоТранспонирование = Истина;
	
	ИмяДиаграммы = "ГистограммаДолиСостоянийПриЗавершении";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Истина;
	
КонецПроцедуры
#КонецОбласти


#Область Дополнительные_процедуры_и_функции
&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	Если РежимОтображения = "Задания в точках, состояния в сериях" Тогда
		//ДиаграммаГантаИсторияВыполнения.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Нет;
		Элементы.ЛегендаКартинка.Видимость = Истина;
	Иначе
		//ДиаграммаГантаИсторияВыполнения.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Право;
		Элементы.ЛегендаКартинка.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДатаОкончания.Доступность = РежимВычисленияПериода = "Вывести данные за указанный период" И Не ПриОбновленииПодставлятьТекущуюДатуВПравуюГраницу;
	Элементы.ДатаНачала.Доступность = РежимВычисленияПериода = "Вывести данные за указанный период";
	
	Элементы.ПриОбновленииПодставлятьТекущуюДатуВПравуюГраницу.Видимость = РежимВычисленияПериода = "Вывести данные за указанный период";
	Элементы.ГруппаРежимВычисленияПериодаXЕдиниц.Видимость = РежимВычисленияПериода = "Вывести данные за последние";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДлительностьИнтервалаСтрокой(ДлительностьВСекундах)
	
	ДлительностьИнтервалаЧас = Цел(ДлительностьВСекундах / 3600);
	ДлительностьИнтервалаМин = Цел((ДлительностьВСекундах - ДлительностьИнтервалаЧас * 3600) / 60);
	ДлительностьИнтервалаСек = ДлительностьВСекундах - ДлительностьИнтервалаЧас * 3600 - ДлительностьИнтервалаМин * 60;
	
	ДлительностьИнтервалаСтрокой = 				
		?(ДлительностьИнтервалаЧас > 0, Строка(ДлительностьИнтервалаЧас) + " ч " + Строка(ДлительностьИнтервалаМин) + " мин ", 
			?(ДлительностьИнтервалаМин > 0, Строка(ДлительностьИнтервалаМин) + " мин ", "")) + 
		ДлительностьИнтервалаСек + " с ";
		
	Возврат ДлительностьИнтервалаСтрокой;
		
КонецФункции

&НаКлиенте
Процедура ПриИзмененииКлючевыхПараметровНаКлиенте()
	
	ДанныеПрочитаны = Ложь;
	ТЗСекунды.Очистить();
	ТЗСекундыЗаполнена = Ложь;
	ТЗСекундыСвернутая.Очистить();
	ТЗСекундыСвернутаяЗаполнена = Ложь;
	ТЗДлительностьФоновыхЗаданий.Очистить();
	ТЗДлительностьФоновыхЗаданийЗаполнена = Ложь;
	ТЗКоличествоЗапусковФоновыхЗаданий.Очистить();
	ТЗКоличествоЗапусковФоновыхЗаданийЗаполнена = Ложь;
	УстановитьЗначениеРеквизитаДляВсехСтрокТЗСостоянияДиаграммНаКлиенте("Заполнена", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеРеквизитаДляВсехСтрокТЗСостоянияДиаграммНаКлиенте(ИмяРеквизита, ЗначениеРеквизита)
		
	Для Каждого СтрокаТЗ Из ТЗСостоянияДиаграмм Цикл
		СтрокаТЗ[ИмяРеквизита] = ЗначениеРеквизита;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗСекунды()
	
	//посекундный анализ времени для вывода информации самых занятых и свободных периодов времени
	
	Если ТЗСекундыЗаполнена Тогда
		Возврат;
	КонецЕсли;
		
	ТЗСекунды.Очистить();
	
	ПустаяДата = Дата(1,1,1);
	ПерваяСекундаПериода = ДатаНачала - Дата(1,1,1);
	ПоследняяСекундаПериода = ДатаОкончания - Дата(1,1,1);
	Для СчетчикСекунд = ПерваяСекундаПериода По ПоследняяСекундаПериода Цикл
		СтрокаТЗСекунды = ТЗСекунды.Добавить();
		СтрокаТЗСекунды.НомерСекунды = СчетчикСекунд;
		СтрокаТЗСекунды.ЧислоЗаданий = 0;
	КонецЦикла;
	
	Для Каждого СтрокаТЗДанныеФоновыхЗаданий Из ТЗДанныеФоновыхЗаданий Цикл
		
		Если СтрокаТЗДанныеФоновыхЗаданий.ДатаНачала = ПустаяДата Тогда
			ПерваяСекундаПериода = СтрокаТЗДанныеФоновыхЗаданий.ДатаОкончания - Дата(1,1,1);
		Иначе
			ПерваяСекундаПериода = СтрокаТЗДанныеФоновыхЗаданий.ДатаНачала - Дата(1,1,1);
		КонецЕсли;
		
		Если СтрокаТЗДанныеФоновыхЗаданий.ДатаОкончания = ПустаяДата Тогда
			ПоследняяСекундаПериода = СтрокаТЗДанныеФоновыхЗаданий.ДатаНачала - Дата(1,1,1);
		Иначе
			ПоследняяСекундаПериода = СтрокаТЗДанныеФоновыхЗаданий.ДатаОкончания - Дата(1,1,1);
		КонецЕсли;
		
		Для СчетчикСекунд = ПерваяСекундаПериода По ПоследняяСекундаПериода Цикл
			
			НайденныеСтроки = ТЗСекунды.НайтиСтроки(Новый Структура("НомерСекунды",СчетчикСекунд));
			Если НайденныеСтроки.Количество() Тогда
				СтрокаТЗСекунды = НайденныеСтроки[0];
				СтрокаТЗСекунды.ЧислоЗаданий = СтрокаТЗСекунды.ЧислоЗаданий + 1; 
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТЗСекунды.Сортировать("НомерСекунды");
	
	ТЗСекундыЗаполнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗСекундыСвернутая()
	
	Если ТЗСекундыСвернутаяЗаполнена Тогда
		Возврат;
	КонецЕсли;
	
	ТЗСекундыСвернутая.Очистить();
	
	Для Каждого СтрокаТЗСекунды Из ТЗСекунды Цикл
		
		НайденныеСтроки = ТЗСекундыСвернутая.НайтиСтроки(Новый Структура("ЧислоЗаданий",СтрокаТЗСекунды.ЧислоЗаданий));
		Если НайденныеСтроки.Количество() Тогда
			СтрокаТЗСекундыСвернутая = НайденныеСтроки[0];
			СтрокаТЗСекундыСвернутая.ЧислоСекунд = СтрокаТЗСекундыСвернутая.ЧислоСекунд + 1; 
		Иначе
			СтрокаТЗСекундыСвернутая = ТЗСекундыСвернутая.Добавить();
			СтрокаТЗСекундыСвернутая.ЧислоЗаданий = СтрокаТЗСекунды.ЧислоЗаданий;
			СтрокаТЗСекундыСвернутая.ЧислоСекунд = 1;
		КонецЕсли;
				
	КонецЦикла;
	
	ТЗСекундыСвернутая.Сортировать("ЧислоЗаданий");
		
	ТЗСекундыСвернутаяЗаполнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗДлительностьФоновыхЗаданий()
	
	Если ТЗДлительностьФоновыхЗаданийЗаполнена Тогда
		Возврат;
	КонецЕсли;
		
	ТЗДлительностьФоновыхЗаданий.Очистить();
	
	ПустаяДата = Дата(1,1,1);
	Для Каждого СтрокаТЗДанныеФоновыхЗаданий Из ТЗДанныеФоновыхЗаданий Цикл
		
		Если ТопЧислоОтображаемыхЗаданийТолькоУспешноЗавершенные И СтрокаТЗДанныеФоновыхЗаданий.Состояние <> "Успешно завершено" Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = ТЗДлительностьФоновыхЗаданий.НайтиСтроки(Новый Структура("Представление", СтрокаТЗДанныеФоновыхЗаданий.Представление));
		Если НайденныеСтроки.Количество() Тогда
			СтрокаТЗДлительностьФоновыхЗаданий = НайденныеСтроки[0];
		Иначе
			СтрокаТЗДлительностьФоновыхЗаданий = ТЗДлительностьФоновыхЗаданий.Добавить();
			СтрокаТЗДлительностьФоновыхЗаданий.Представление 	= СтрокаТЗДанныеФоновыхЗаданий.Представление;
		КонецЕсли;
		СтрокаТЗДлительностьФоновыхЗаданий.Длительность = СтрокаТЗДлительностьФоновыхЗаданий.Длительность + СтрокаТЗДанныеФоновыхЗаданий.Длительность;
		
	КонецЦикла;
	
	ТЗДлительностьФоновыхЗаданий.Сортировать("Длительность УБЫВ");
	
	ТЗДлительностьФоновыхЗаданийЗаполнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗКоличествоЗапусковФоновыхЗаданий()
	
	Если ТЗКоличествоЗапусковФоновыхЗаданийЗаполнена Тогда
		Возврат;
	КонецЕсли;
		
	ТЗКоличествоЗапусковФоновыхЗаданий.Очистить();
	
	ПустаяДата = Дата(1,1,1);
	Для Каждого СтрокаТЗДанныеФоновыхЗаданий Из ТЗДанныеФоновыхЗаданий Цикл
		    				
		НайденныеСтроки = ТЗКоличествоЗапусковФоновыхЗаданий.НайтиСтроки(Новый Структура("Представление", СтрокаТЗДанныеФоновыхЗаданий.Представление));
		Если НайденныеСтроки.Количество() Тогда
			СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками = НайденныеСтроки[0];
		Иначе
			СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками = ТЗКоличествоЗапусковФоновыхЗаданий.Добавить();
			СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.Представление 	= СтрокаТЗДанныеФоновыхЗаданий.Представление;
		КонецЕсли;
		
		Если СтрокаТЗДанныеФоновыхЗаданий.Состояние = "Успешно завершено" Тогда
			СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоУспешно = СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоУспешно + 1;
		ИначеЕсли СтрокаТЗДанныеФоновыхЗаданий.Состояние = "Завершено с ошибкой" Тогда
			СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоОшибка = СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоОшибка + 1;
		ИначеЕсли СтрокаТЗДанныеФоновыхЗаданий.Состояние = "Отменено" Тогда
			СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоОтменено = СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоОтменено + 1;
		ИначеЕсли СтрокаТЗДанныеФоновыхЗаданий.Состояние = "Активно" Тогда
			СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоАктивно = СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоАктивно + 1;
		ИначеЕсли СтрокаТЗДанныеФоновыхЗаданий.Состояние = "Данные некорректны" Тогда
			СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоДанныеНекорректны = СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоДанныеНекорректны + 1;
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоИтого = СтрокаТЗТЗКоличествоФоновыхЗаданийСОшибками.КоличествоИтого + 1;
				
	КонецЦикла;
		
	ТЗКоличествоЗапусковФоновыхЗаданийЗаполнена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТЗСостоянияДиаграмм(ИмяДиаграммы)
	
	СтрокаТЗСостоянияДиаграмм = ТЗСостоянияДиаграмм.Добавить();
	СтрокаТЗСостоянияДиаграмм.Имя = ИмяДиаграммы;
	СтрокаТЗСостоянияДиаграмм.Заполнена = Ложь;
	
КонецПроцедуры
#КонецОбласти


#Область Команды
&НаКлиенте
Процедура КомандаОбновить(Команда)
		
	ОбновитьНаКлиенте();
	
КонецПроцедуры
#КонецОбласти


#Область Обработчики_событий
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДанныеПрочитаны = Ложь;

	ДобавитьСтрокуТЗСостоянияДиаграмм("ДиаграммаГантаИсторияВыполнения");
	ДобавитьСтрокуТЗСостоянияДиаграмм("ДиаграммаГантаТопДлительных");
	ДобавитьСтрокуТЗСостоянияДиаграмм("ДиаграммаГантаТопДлительныхОбщееВремя");
	ДобавитьСтрокуТЗСостоянияДиаграмм("КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий");
	ДобавитьСтрокуТЗСостоянияДиаграмм("ДиаграммаГрафикЧислоВыполняющихсяЗаданий");
	ДобавитьСтрокуТЗСостоянияДиаграмм("ГистограммаЗавершенныеСОшибками");
	ДобавитьСтрокуТЗСостоянияДиаграмм("ГистограммаДолиСостоянийПриЗавершении");
	
	МакетЛегенда 		= РеквизитФормыВЗначение("Отчет").ПолучитьМакет("Легенда");
	ЛегендаКартинка 	= ПоместитьВоВременноеХранилище(МакетЛегенда , УникальныйИдентификатор);
	
	ВидСортировкиТЗКоличествоЗапусковФоновыхЗаданий = "Количество УБЫВ";
	
#Область ДиаграммаГантаИсторияВыполнения

	ДиаграммаГантаИсторияВыполнения.АвтоОпределениеПолногоИнтервала = Ложь;
		
	ДиаграммаГантаИсторияВыполнения.ОбластьПостроения.ШкалаВремени.Элементы.Добавить().Единица = ТипЕдиницыШкалыВремени.День;
	ДиаграммаГантаИсторияВыполнения.ОбластьПостроения.ШкалаВремени.Элементы.Добавить().Единица = ТипЕдиницыШкалыВремени.Час;
	ДиаграммаГантаИсторияВыполнения.ОбластьПостроения.ШкалаВремени.Элементы.Добавить().Единица = ТипЕдиницыШкалыВремени.Минута;
	ДиаграммаГантаИсторияВыполнения.ОбластьПостроения.ШкалаВремени.Элементы.Добавить().Единица = ТипЕдиницыШкалыВремени.Секунда;
	ДиаграммаГантаИсторияВыполнения.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.НеОтображать;
		
	ДиаграммаГантаИсторияВыполнения.ОбластьПостроения.ШкалаВремени.Элементы[0].Видимость = Ложь;
	
#КонецОбласти

#Область ДиаграммаГантаТопДлительных

	ДиаграммаГантаТопДлительных.АвтоОпределениеПолногоИнтервала = Ложь;
	//ДиаграммаГантаТопДлительных.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Низ;

	ЭлементЧас = ДиаграммаГантаТопДлительных.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	ЭлементЧас.Единица = ТипЕдиницыШкалыВремени.Час;
	ЭлементЧас.Формат = "ДФ='HH'";
	ДиаграммаГантаТопДлительных.ОбластьПостроения.ШкалаВремени.Элементы.Добавить().Единица = ТипЕдиницыШкалыВремени.Минута;
	ДиаграммаГантаТопДлительных.ОбластьПостроения.ШкалаВремени.Элементы.Добавить().Единица = ТипЕдиницыШкалыВремени.Секунда;
	ДиаграммаГантаТопДлительных.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	
	ДиаграммаГантаТопДлительных.ОбластьПостроения.ШкалаВремени.Элементы[0].Видимость = Ложь;
	
#КонецОбласти

#Область ДиаграммаГантаТопДлительныхОбщееВремя

	ДиаграммаГантаТопДлительныхОбщееВремя.АвтоОпределениеПолногоИнтервала = Ложь;
	//ДиаграммаГантаТопДлительныхОбщееВремя.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Низ;
	
	ЭлементЧас = ДиаграммаГантаТопДлительныхОбщееВремя.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	ЭлементЧас.Единица = ТипЕдиницыШкалыВремени.Час;
	ЭлементЧас.Формат = "ДФ='HH'";
	ДиаграммаГантаТопДлительныхОбщееВремя.ОбластьПостроения.ШкалаВремени.Элементы.Добавить().Единица = ТипЕдиницыШкалыВремени.Минута;
	ДиаграммаГантаТопДлительныхОбщееВремя.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	
	ДиаграммаГантаТопДлительныхОбщееВремя.ОбластьПостроения.ШкалаВремени.Элементы[0].Видимость = Ложь;
	
#КонецОбласти

#Область КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий

	КруговаяДиаграммаДолиПериодовСРазнымЧисломЗаданий.ТипДиаграммы = ТипДиаграммы.Круговая;

#КонецОбласти
	
#Область ДиаграммаГрафикЧислоВыполняющихсяЗаданий
		
	ТипДиаграммыГрафикЧислоВыполняющихсяЗаданий = "График";
	
	//ДиаграммаГрафикЧислоВыполняющихсяЗаданий.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Нет;
	
#КонецОбласти

#Область ГистограммаЗавершенныеСОшибками

	ТипДиаграммыГистограммаДолиСостоянийПриЗавершении = "ГистограммаСНакоплениемГоризонтальная";
	//ГистограммаЗавершенныеСОшибками.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Нет;

#КонецОбласти

#Область ГистограммаДолиСостоянийПриЗавершении

	ГистограммаДолиСостоянийПриЗавершении.ТипДиаграммы = ТипДиаграммы.ГистограммаГоризонтальная;
	//ГистограммаДолиСостоянийПриЗавершении.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Низ;

#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НеУчитыватьБезымянныеФоновыеЗадания = Истина;
	ОтображатьВЗаголовкеСиноним = Истина;
	ТекущаяДата = ТекущаяДата();
	ДатаНачала = ТекущаяДата - 3600;
	ДатаОкончания = ТекущаяДата + 30;
	РежимОтображения = "Задания в точках, состояния в сериях";
	РежимВычисленияПериода = "Вывести данные за указанный период";
	ЧислоЕдиницВремениДляРасчетаДатыНачала = 1;
	ЕдиницаВремениДляВыводаПоследнихX = "ч.";
	ТопЧислоОтображаемыхЗаданий = 20;
			
	УстановитьВидимостьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементовФормы();	
	ИмяДиаграммы = "ДиаграммаГантаИсторияВыполнения";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Ложь;
	ЗаполнитьДиаграммуНаТекущейСтраницеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбновленииПодставлятьТекущуюДатуВПравуюГраницуПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхПараметровНаКлиенте();
	УстановитьВидимостьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВычисленияПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РежимВычисленияПериода = "Вывести данные за указанный период";
	УстановитьВидимостьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВычисленияПериодаПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхПараметровНаКлиенте();
	УстановитьВидимостьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаВремениДляВыводаПоследнихXОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЕдиницаВремениДляВыводаПоследнихX = "сек.";
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)

	ПриИзмененииКлючевыхПараметровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)

	ПриИзмененииКлючевыхПараметровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧислоЕдиницВремениДляРасчетаДатыНачалаПриИзменении(Элемент)

	ПриИзмененииКлючевыхПараметровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаВремениДляВыводаПоследнихXПриИзменении(Элемент)

	ПриИзмененииКлючевыхПараметровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДиаграммыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЗаполнитьДиаграммуНаТекущейСтраницеНаКлиенте();
			
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВЗаголовкеСинонимПриИзменении(Элемент)

	ПриИзмененииКлючевыхПараметровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТопЧислоОтображаемыхЗаданийПриИзменении(Элемент)
	
	ИмяДиаграммы = "ДиаграммаГантаТопДлительных";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТопЧислоОтображаемыхЗаданийОбщееВремяПриИзменении(Элемент)

	ИмяДиаграммы = "ДиаграммаГантаТопДлительныхОбщееВремя";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТопЧислоОтображаемыхЗаданийТолькоУспешноЗавершенныеПриИзменении(Элемент)
	
	ТЗДлительностьФоновыхЗаданийЗаполнена = Ложь;
	
	ИмяДиаграммы = "ДиаграммаГантаТопДлительных";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Ложь;
	
	ИмяДиаграммы = "ДиаграммаГантаТопДлительныхОбщееВремя";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДиаграммыГрафикЧислоВыполняющихсяЗаданийПриИзменении(Элемент)
	
	ИмяДиаграммы = "ДиаграммаГрафикЧислоВыполняющихсяЗаданий";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Ложь;
	ЗаполнитьДиаграммуНаТекущейСтраницеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСортировкиТЗКоличествоЗапусковФоновыхЗаданийПриИзменении(Элемент)
	
	ИмяДиаграммы = "ГистограммаЗавершенныеСОшибками";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Ложь;
	
	ИмяДиаграммы = "ГистограммаДолиСостоянийПриЗавершении";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Ложь;
	
	ЗаполнитьДиаграммуНаТекущейСтраницеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДиаграммыГистограммаДолиСостоянийПриЗавершенииПриИзменении(Элемент)
	
	ИмяДиаграммы = "ГистограммаДолиСостоянийПриЗавершении";
	ТЗСостоянияДиаграмм.НайтиСтроки(Новый Структура("Имя", ИмяДиаграммы))[0].Заполнена = Ложь;
	ЗаполнитьДиаграммуНаТекущейСтраницеНаКлиенте();
	
КонецПроцедуры
#КонецОбласти