
Процедура ВыполнитьРассылку(ИмяСхемыОтчета= "",ДополнительныеПараметры=Неопределено) Экспорт
	
	ВыборкаПоставщиков	 = ПолучитьСписокПоставщиковКРассылке();
	пока ВыборкаПоставщиков.следующий() цикл
		 ОтправитьПисьмоПоставщику(ВыборкаПоставщиков.Поставщик,ВыборкаПоставщиков.Организация,ВыборкаПоставщиков.АдресПоставщика,ВыборкаПоставщиков.УчетнаяЗаписьМенеджера);
	
		//ДанныеОтчета =  ПолучитьДанныеОтчета(ВыборкаПоставщиков.Поставщик,ВыборкаПоставщиков.Организация);
		//
		//ТемаПисьма = "Реестр возвратов тоаваров";
		//ТелоСообщения = ТемаПисьма + " за "++Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		//ИмяФайлаВложения = ТемаПисьма;
		//ФайлВФорматеXLS = ПолучитьИмяВременногоФайла();
		//ДанныеОтчета.Записать(ФайлВФорматеXLS, ТипФайлаТабличногоДокумента.XLS);
		//СписокФайловВложений = Новый СписокЗначений;
		//СписокФайловВложений.Добавить(Новый Структура("Хранилище, ИмяФайла, Наименование", ПолучитьДвоичныеДанные(ФайлВФорматеXLS), (ИмяФайлаВложения + ".XLS"), ИмяФайлаВложения));
		//
		//РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаФайлаОтчета,
		// ТекстПисьма(ВыборкаПоставщиков.Организация,ВыборкаПоставщиков.Менеджер),ТемаПисьма,ВыборкаПоставщиков.АдресПоставщика,,,СписокФайловВложений,ВыборкаПоставщиков.УчетнаяЗаписьМенеджера);
	КонецЦикла;	

КонецПроцедуры	


Процедура ОтправитьПисьмоПоставщику(Поставщик,Организация,АдресПоставщика = "",УчетнаяЗаписьМенеджера= Неопределено) экспорт
 	Если АдресПоставщика = "" тогда 
		СтруктураРегистра = РегистрыСведений.КонтактнаяИнформация.Получить(Новый Структура("Объект,Тип,Вид",Поставщик,Перечисления.ТИпыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailДляОбменаДокументамиСКонтрагентами)) ;
		АдресПоставщика = СтруктураРегистра.Представление;
	КонецЕсли;
	
	Если УчетнаяЗаписьМенеджера  = Неопределено тогда 
		
		Запрос = новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.ОтветственныйЗаАвтоПолучениеОтправкуСообщений = &ОтветственныйЗаАвтоПолучениеОтправкуСообщений
		|	И УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ"  );
		Запрос.УстановитьПараметр("ОтветственныйЗаАвтоПолучениеОтправкуСообщений",ПараметрыСеанса.ТекущийПользователь);
		Результат  = Запрос.Выполнить();
		Если Результат.Пустой() тогда 
			УчетнаяЗаписьМенеджера = Справочники.УчетныеЗаписиЭлектроннойПочты.ТехПоддержка;
		иначе 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			УчетнаяЗаписьМенеджера = Выборка.Ссылка;			
		КонецЕсли;
	КонецЕсли;
	
	ДанныеОтчета =  ПолучитьДанныеОтчета(Поставщик,Организация);
	
	ТемаПисьма = "Реестр возвратов тоаваров";
	//ТелоСообщения = ТемаПисьма + " за "+Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	ИмяФайлаВложения = ТемаПисьма;
	ФайлВФорматеXLS = ПолучитьИмяВременногоФайла();
	ДанныеОтчета.Записать(ФайлВФорматеXLS, ТипФайлаТабличногоДокумента.XLS);
	СписокФайловВложений = Новый СписокЗначений;
	СписокФайловВложений.Добавить(Новый Структура("Хранилище, ИмяФайла, Наименование", ПолучитьДвоичныеДанные(ФайлВФорматеXLS), (ИмяФайлаВложения + ".XLS"), ИмяФайлаВложения));
	
	РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаФайлаОтчета,
	ТекстПисьма(Организация,УчетнаяЗаписьМенеджера),ТемаПисьма,АдресПоставщика,,,СписокФайловВложений,УчетнаяЗаписьМенеджера);
	
КонецПроцедуры	




Функция ТекстПисьма(Организация,Менеджер)
ТекстПисьма = " Добрый день!
|
| Уважаемые коллеги, во избежание образования расхождений в актах сверки, отправляем Вам реестр возвратов, оформленных на Вашу организацию, которые Вами не подтверждены.
| Просьба довести данную информацию до бухгалтерии.
| Документы из реестра, у которых не заполнено ""Проверен Партком"", необходимо продублировать и передать на наш склад.
| О всех расхождениях можете сообщить своему специалисту.
| 
| С уважением,
| специалист компании " + Организация.НаименованиеПолное  + " " + Сокрлп(Менеджер);	
	
КонецФункции	

Функция ПолучитьДвоичныеДанные(ИмяФайла)

	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Существует() Тогда
		Данные = Новый ДвоичныеДанные(ИмяФайла);
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;
		Возврат Данные;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьСписокПоставщиковКРассылке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Контрагент КАК Поставщик,
		|	ВозвратТоваровПоставщику.Организация,
		|	ЕСТЬNULL(МенеджерыТорговыхТочек.Менеджер, ЗНАЧЕНИЕ(Справочник.Менеджеры.Пустаяссылка)) КАК Менеджер
		|ПОМЕСТИТЬ Выборка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МенеджерыТорговыхТочек КАК МенеджерыТорговыхТочек
		|		ПО ВозвратТоваровПоставщику.Контрагент = МенеджерыТорговыхТочек.Контрагент
		|			И ВозвратТоваровПоставщику.ТорговаяТочка = МенеджерыТорговыхТочек.ТорговаяТочка
		|			И (МенеджерыТорговыхТочек.ВидМенеджера = ЗНАЧЕНИЕ(Перечисление.ВидыМенеджеров.Снабжения))
		|ГДЕ
		|	ВозвратТоваровПоставщику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ВозвратТоваровПоставщику.ПометкаУдаления = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА ВозвратТоваровПоставщику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратПоставщику.КорректировочныйСчетФактура)
		|					И ВозвратТоваровПоставщику.КоррСФНомер = """"
		|					И ВозвратТоваровПоставщику.КоррСФДата = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВозвратТоваровПоставщику.Контрагент.РаботатьСОкномПоставщика = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выборка.Поставщик,
		|	Выборка.Организация,
		|	Выборка.Менеджер,
		|	КонтактнаяИнформация.Представление КАК АдресПоставщика,
		|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресМенеджера,
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗаписьМенеджера
		|ИЗ
		|	Выборка КАК Выборка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО Выборка.Поставщик = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТИпыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailДляОбменаДокументамиСКонтрагентами))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|		ПО Выборка.Менеджер.Пользователь = УчетныеЗаписиЭлектроннойПочты.ОтветственныйЗаАвтоПолучениеОтправкуСообщений";
	
	Запрос.УстановитьПараметр("ДатаНачала", РегистрыСведений.ГраницыЗапретаИзмененияДанных.Получить(Новый структура("Организация,Пользователь")).ГраницаЗапретаИзменений);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции	

Функция ПолучитьДанныеОтчета(Поставщик,Организация)
	
	Отчет  =  Отчеты.РеестрВозвратовТоваровПоставщикам.Создать();
	КомпоновщикНастроек = новый КомпоновщикНастроекКомпоновкиДанных;
	СхемаВыгрузки = Отчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ВариантОтчета =СхемаВыгрузки.ВариантыНастроек.ДляРассылки ;
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтчета.настройки);
	КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Поставщик;
	КомпоновщикНастроек.Настройки.Отбор.Элементы[1].ПравоеЗначение = Организация;

	
	ПериодОтчета = новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала =  РегистрыСведений.ГраницыЗапретаИзмененияДанных.Получить(Новый структура("Организация,Пользователь")).ГраницаЗапретаИзменений;
	ПериодОтчета.ДатаОкончания =КонецДня(ТекущаяДата());
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0].Использование  = Истина;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0].Значение = ПериодОтчета;
	
	ТабДокОтчета  = новый ТабличныйДокумент;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузки, КомпоновщикНастроек.ПолучитьНастройки());
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДокОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Возврат ТабДокОтчета;
		
КонецФункции

