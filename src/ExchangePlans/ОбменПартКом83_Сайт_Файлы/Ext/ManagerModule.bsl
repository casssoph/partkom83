#Область ЗагрузкаДанныхССайта
Процедура ПолучитьСообщениеОбмена(ИдентификаторУзлаОбмена)Экспорт
	
	URI = URI();
	Настройка = Справочники.НастройкиРеквизитовДляОбменов.Обмен_1С_Сайт_Файлы;
	АдресВебСервиса = ?(ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза(), Настройка.СтрокаДляРабочейБазы, Настройка.СтрокаДляТестовойБазы);
	
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_Сайт_Файлы;
	
	Получатель = ЭтотУзел();
	Отправитель = ОбменДаннымиКлиентСервер.ПолучитьВходящийУзелОбмена(МетаданныеПланаОбмена, ИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(Получатель) тогда
		ВызватьИсключение "[ЗагрузитьСообщениеОбмена]: не найден входящий узел с ID:" + ИдентификаторУзлаОбмена;	
	КонецЕсли;                                                                      		
	
	КодПолучателя = Получатель.ИдентификаторУзла;
	НомерПринятого = Отправитель.НомерПринятого;
	
	Определения = Новый WSОпределения(АдресВебСервиса);
	Прокси = Новый WSПрокси(Определения, Определения.Сервисы[0].URIПространстваИмен, Определения.Сервисы[0].Имя, Определения.Сервисы[0].ТочкиПодключения[0].Имя);
	
	ОтветСервера = Прокси.GetExchangeMessage("1CSiteExchange", КодПолучателя, НомерПринятого);
	РаспакованноеСообщение = ОбменДаннымиСервер.РаспаковатьСообщениеОбмена(ОтветСервера);

	ЗагрузитьСообщениеОбмена(РаспакованноеСообщение);
	
КонецПроцедуры
Процедура ЗагрузитьСообщениеОбмена(СообщениеОбмена) Экспорт
	
	URIПространстваИмен = URI();
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_Сайт_Файлы;
	ТипСообщениеОбмена = ФабрикаXDTO.Тип(URIПространстваИмен, "СообщениеОбмена");
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(СообщениеОбмена);
	
	ДанныеХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ, ТипСообщениеОбмена);
	
	Получатель = ЭтотУзел();
	ИдентификаторОтправителя = ДанныеХДТО.Отправитель;
	ИдентификаторПолучателя = ДанныеХДТО.Получатель;
	Если ИдентификаторПолучателя <> Получатель.ИдентификаторУзла тогда
		ВызватьИсключение "[ЗагрузитьСообщениеОбмена]: неправильное значение элемента <Получатель>";
	КонецЕсли;
	
	Входящий = ОбменДаннымиКлиентСервер.ПолучитьВходящийУзелОбмена(МетаданныеПланаОбмена, ИдентификаторОтправителя);
	Если НЕ ЗначениеЗаполнено(Входящий) Тогда
		ВызватьИсключение "[ЗагрузитьСообщениеОбмена]: не найден входящий узел с ID:" + ИдентификаторОтправителя;
	КонецЕсли;
	Исходящий = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(МетаданныеПланаОбмена, ИдентификаторОтправителя);
	Если НЕ ЗначениеЗаполнено(Исходящий) Тогда
		ВызватьИсключение "[ЗагрузитьСообщениеОбмена]: не найден исходящий узел с ID:" + ИдентификаторОтправителя;
	КонецЕсли;
	
	НомерОтправленного = Исходящий.НомерОтправленного;
	Если ДанныеХДТО.НомерПринятого > НомерОтправленного тогда
		ВызватьИсключение "[ЗагрузитьСообщениеОбмена]: неправильное значение элемента ""НомерПринятого"": сообщение с таким номером не отправлялось.";
	КонецЕсли;
	
	ОтметитьПринятыеОбъекты(ДанныеХДТО.НомерПринятого);
		
	СписокОбъектов = ДанныеХДТО.Объекты.ПолучитьСписок("Объект");
	Для Каждого Объект Из СписокОбъектов цикл
		ИмяТипа = Объект.Тип().Имя;
		Если ЭтоЗапросАктаСверки(ИмяТипа) Тогда
			ЗагрузитьЭлементЗапросАктаСверки(Объект, ДанныеХДТО.НомерСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Узел = Входящий.ПолучитьОбъект();
	Узел.НомерПринятого = ДанныеХДТО.НомерСообщения;
	Узел.Записать();
	
КонецПроцедуры
Функция ЭтоЗапросАктаСверки(Имя)
	
	Возврат Имя = "ОтчетПоВзаиморасчетамЗапрос";
	
КонецФункции
Процедура ЗагрузитьЭлементЗапросАктаСверки(ОбъектXDTO, НомерСообщения)
	
	Параметры = Новый Структура("Договор", Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(ОбъектXDTO.Договор));
	Параметры.Вставить("EMail", ОбъектXDTO.EMail);
	Параметры.Вставить("НачалоПериода", ОбъектXDTO.НачалоПериода);
	Параметры.Вставить("КонецПериода", ОбъектXDTO.КонецПериода);
	
	Запись = РегистрыСведений.ОбменФайламиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
	Запись.ВидОбмена = Перечисления.ВидыОбменов.ОбменСайт_1С_АктСверкиВзаиморасчетов;
	Запись.НомерСообщения = НомерСообщения;
	Запись.ID = ОбъектXDTO.ID;
	Запись.Параметры = ЗначениеВСтрокуВнутр(Параметры);
	Запись.ДатаСоздания = ТекущаяДата();
	Запись.Записать();
	
КонецПроцедуры
#КонецОбласти

#Область ОбработкаДанных
Процедура ОбработатьДанныеОбмена() Экспорт
	
	Выборка = ВыборкаНеобработанныхОбъектов();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидОбмена = Перечисления.ВидыОбменов.ОбменСайт_1С_АктСверкиВзаиморасчетов Тогда
			СформироватьАктСверкиВзаиморасчетов(Выборка);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры
Функция ВыборкаНеобработанныхОбъектов()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбменФайламиСВнешнимиСистемами.ВидОбмена,
	                      |	ОбменФайламиСВнешнимиСистемами.НомерСообщения,
	                      |	ОбменФайламиСВнешнимиСистемами.ID,
	                      |	ОбменФайламиСВнешнимиСистемами.Параметры
	                      |ИЗ
	                      |	РегистрСведений.ОбменФайламиСВнешнимиСистемами КАК ОбменФайламиСВнешнимиСистемами
	                      |ГДЕ
	                      |	НЕ ОбменФайламиСВнешнимиСистемами.Обработан
	                      |	И ОбменФайламиСВнешнимиСистемами.ВидОбмена В (ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменСайт_1С_АктСверкиВзаиморасчетов))");
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
#Область АктСверкиВзаиморасчетов
Процедура СформироватьАктСверкиВзаиморасчетов(Выборка)
	
	СтруктураОтчета = Новый Структура("Ошибка,ТекстОшибки,ID,НомерСообщения", Ложь, "", Выборка.ID, Выборка.НомерСообщения);
	Отчет = Отчеты.АктСверкиВзаиморасчетов.Создать();
	Параметры = ЗначениеИзСтрокиВнутр(Выборка.Параметры);
	
	УстановитьПараметрыОтчетаАктСверки(Отчет, Параметры, СтруктураОтчета);
	СформироватьОтчетАктСверки(Отчет, СтруктураОтчета);
	ОбработатьСформированныйАктСверки(СтруктураОтчета);
	ОтметитьОбработанныйОтчет(Выборка, Параметры, СтруктураОтчета);
	
КонецПроцедуры
Процедура УстановитьПараметрыОтчетаАктСверки(Отчет, Параметры, СтруктураОтчета)
	
	СтруктураОтчета.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
	Попытка
		СтруктураОтчета.Вставить("Договор", Параметры.Договор);
		СтруктураОтчета.Вставить("Организация", Параметры.Договор.Организация);
		СтруктураОтчета.Вставить("Контрагент", Параметры.Договор.Владелец);
		СтруктураОтчета.Вставить("НачалоПериода", Параметры.НачалоПериода);
		СтруктураОтчета.Вставить("ОкончаниеПериода", Параметры.КонецПериода);
		СтруктураОтчета.Вставить("EMailКонтрагента", Параметры.EMail);
		СтруктураОтчета.Вставить("ВыводитьЗаголовок", Ложь);
		Если НЕ ЗначениеЗаполнено(СтруктураОтчета.Договор.ВерсияДанных) Тогда
			СтруктураОтчета.Ошибка = Истина;
			СтруктураОтчета.ТекстОшибки = "Договор не определен, UID:" + СтруктураОтчета.Договор.УникальныйИдентификатор();
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		СтруктураОтчета.Ошибка = Истина;
		СтруктураОтчета.ТекстОшибки = ОписаниеОшибки;
	КонецПопытки
	
КонецПроцедуры
Функция СформироватьОтчетАктСверки(Отчет, СтруктураОтчета)
	
	Если НЕ СтруктураОтчета.Ошибка Тогда
		Попытка
			Отчет.ЗаполнитьАктСверки(СтруктураОтчета);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			СтруктураОтчета.Ошибка = Истина;
			СтруктураОтчета.ТекстОшибки = ОписаниеОшибки;
		КонецПопытки
	КонецЕсли;
	
КонецФункции
Процедура ОтметитьОбработанныйОтчет(Выборка, Параметры, СтруктураОтчета)
	
	Запись = РегистрыСведений.ОбменФайламиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, Выборка, "ID,НомерСообщения,ВидОбмена");
	Запись.Прочитать();
	
	Если СтруктураОтчета.Ошибка Тогда
		Параметры.Вставить("ТекстОшибки", СтруктураОтчета.ТекстОшибки);
		Запись.Параметры = ЗначениеВСтрокуВнутр(Параметры);
		Запись.Ошибка = Истина;
	КонецЕсли;
	
	Запись.Обработан = Истина;
	Запись.ДатаОбработки = ТекущаяДата();
	
	Запись.Записать();
	
КонецПроцедуры
Процедура ОбработатьСформированныйАктСверки(СтруктураОтчета)
	
	ЗначениеBase64 = "";
	
	Если НЕ СтруктураОтчета.Ошибка Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("XLSX");
		СтруктураОтчета.ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		ЗначениеBase64 = Base64Строка(ДвоичныеДанные);
		Если РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "Отправлять акты сверки по почте", Ложь) Тогда
			ОтправитьПисьмоАктаСверки(СтруктураОтчета, ДвоичныеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Запись = РегистрыСведений.ОбменФайламиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
	Запись.ВидОбмена = Перечисления.ВидыОбменов.Обмен1С_Сайт_АктСверкиВзаиморасчетов;
	Запись.ДатаСоздания = ТекущаяДата();
	Запись.Параметры = ЗначениеВСтрокуВнутр(Новый Структура("ТекстОшибки", СтруктураОтчета.ТекстОшибки));
	Запись.Base64 = ЗначениеBase64;
	ЗаполнитьЗначенияСвойств(Запись, СтруктураОтчета, "ID,Ошибка");
	
	Запись.Записать();

КонецПроцедуры
Процедура ОтправитьПисьмоАктаСверки(СтруктураОтчета, ДвоичныеДанные)
	
	EMail = СтруктураОтчета.EMailКонтрагента;
	Если ЗначениеЗаполнено(EMail) Тогда
		
		Период = "с " + Формат(СтруктураОтчета.НачалоПериода, "ДЛФ=DD") + " по " + Формат(СтруктураОтчета.ОкончаниеПериода, "ДЛФ=DD");
		Тема = "Акт сверки взаиморасчетов за период " + Период + " по договору:" + СтруктураОтчета.Договор;
		ТекстПисьма =	"Добрый день!" + Символы.ПС +
						"С сайта www.part-kom.ru Вами был отправлен запрос на формирование акта сверки взаиморасчетов за период:" + Период + Символы.ПС +
						"Прикладываем запрошенный акт сверки во вложение." + Символы.ПС +
						"С уважением, команда Партком";
		
		СписокФайловВложений = Новый СписокЗначений;
		СписокФайловВложений.Добавить(Новый Структура("Хранилище, ИмяФайла, Наименование", ДвоичныеДанные, ("АктСверки.XLSX"), "Акт сверки"));
		
		Попытка
			РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаФайлаОтчета, ТекстПисьма, Тема, EMail,,,СписокФайловВложений);
			СтруктураОтчета.ТекстОшибки = "Файл отправлен на почту:" + EMail;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			СтруктураОтчета.Ошибка = Истина;
			СтруктураОтчета.ТекстОшибки = ОписаниеОшибки;
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область ВыгрузкаДанныхНаСайт
Функция ВыгрузитьСообщениеОбмена(ИдентификаторУзлаОбмена, ReceivedNo) Экспорт
	
	URIПространстваИмен = URI();
	ПолучитьМетаданные = Метаданные.ПланыОбмена.ОбменПартКом83_Сайт_Файлы;
	ТипОбъекты = ФабрикаXDTO.Тип(URIПространстваИмен, "Объекты");
	ТипСообщениеОбмена = ФабрикаXDTO.Тип(URIПространстваИмен, "СообщениеОбмена");
	
	Отправитель = ЭтотУзел();
	Исходящий = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(ПолучитьМетаданные, ИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(Исходящий) Тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	Если ReceivedNo > Исходящий.НомерОтправленного Тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер принятого. Сообщение с таким номером не отправлялось";
	КонецЕсли;
	НомерСообщения = Исходящий.НомерОтправленного + 1;
	
	Входящий = ОбменДаннымиКлиентСервер.ПолучитьВходящийУзелОбмена(ПолучитьМетаданные, ИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(Входящий) Тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	НомерПринятого = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Входящий, "НомерПринятого");
	
	ОтметитьПринятыеОбъекты(ReceivedNo);
	
	СообщениеОбмена = ФабрикаXDTO.Создать(ТипСообщениеОбмена);
	СообщениеОбмена.ПланОбмена = "1CSiteExchange";
	СообщениеОбмена.Отправитель = Отправитель.ИдентификаторУзла;
	СообщениеОбмена.Получатель = ИдентификаторУзлаОбмена;
	СообщениеОбмена.НомерСообщения = НомерСообщения;
	СообщениеОбмена.НомерПринятого = НомерПринятого;
	
	Объекты = ФабрикаXDTO.Создать(ТипОбъекты);
	СписокОбъектов = Объекты.ПолучитьСписок("Объект");
	
	ДобавитьДанныеАктовСверки(СписокОбъектов, НомерСообщения, ReceivedNo);
	
	СообщениеОбмена.Объекты = Объекты;
	
	//Увеличение счетчика сообщений//
	Узел = Исходящий.ПолучитьОбъект();
	Узел.НомерОтправленного = НомерСообщения;
	Узел.Записать();
	
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("utf-8");
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьХМЛ, СообщениеОбмена);
	
	Возврат ЗаписьХМЛ.Закрыть();
	
КонецФункции
Процедура ОтметитьПринятыеОбъекты(НомерПринятого)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбменФайламиСВнешнимиСистемами.ВидОбмена,
	                      |	ОбменФайламиСВнешнимиСистемами.ID
	                      |ИЗ
	                      |	РегистрСведений.ОбменФайламиСВнешнимиСистемами КАК ОбменФайламиСВнешнимиСистемами
	                      |ГДЕ
	                      |	ОбменФайламиСВнешнимиСистемами.ВидОбмена В (ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.Обмен1С_Сайт_АктСверкиВзаиморасчетов))
	                      |	И НЕ ОбменФайламиСВнешнимиСистемами.Обработан
	                      |	И ОбменФайламиСВнешнимиСистемами.НомерСообщения МЕЖДУ 1 И &НомерПринятого");
	Запрос.УстановитьПараметр("НомерПринятого", НомерПринятого);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ОбменФайламиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		
		Запись.Обработан = Истина;
		Запись.ДатаОбработки = ТекущаяДата();
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры
Процедура ДобавитьДанныеАктовСверки(СписокОбъектов, НомерСообщения, НомерПринятого)
	
	ТипОбъекта = ФабрикаXDTO.Тип("http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema", "ОтчетПоВзаиморасчетам");
	ВыгружатьОтчетНаСайт = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт","Отправлять акты сверки на сайт", Ложь);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбменФайламиСВнешнимиСистемами.ВидОбмена,
	                      |	ОбменФайламиСВнешнимиСистемами.ID,
	                      |	ОбменФайламиСВнешнимиСистемами.Base64,
	                      |	ОбменФайламиСВнешнимиСистемами.Параметры,
	                      |	ОбменФайламиСВнешнимиСистемами.Ошибка
	                      |ИЗ
	                      |	РегистрСведений.ОбменФайламиСВнешнимиСистемами КАК ОбменФайламиСВнешнимиСистемами
	                      |ГДЕ
	                      |	ОбменФайламиСВнешнимиСистемами.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.Обмен1С_Сайт_АктСверкиВзаиморасчетов)
	                      |	И (ОбменФайламиСВнешнимиСистемами.НомерСообщения > &НомерПринятого
	                      |			ИЛИ ОбменФайламиСВнешнимиСистемами.НомерСообщения = 0)
	                      |	И НЕ ОбменФайламиСВнешнимиСистемами.Обработан");
	Запрос.УстановитьПараметр("НомерПринятого", НомерПринятого);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Параметры = ЗначениеИзСтрокиВнутр(Выборка.Параметры);
		ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ЗаполнитьЗначенияСвойств(ОбъектXDTO, Выборка, "ID,Ошибка");
		ОбъектXDTO.ТекстОшибки = Параметры.ТекстОшибки;
		ОбъектXDTO.ОтчетBase64 = ?(ВыгружатьОтчетНаСайт, Выборка.Base64, "");
		
		СписокОбъектов.Добавить(ОбъектXDTO);

		Запись = РегистрыСведений.ОбменФайламиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка, "ВидОбмена,ID");
		Запись.Прочитать();
		Запись.НомерСообщения = НомерСообщения;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область Общее
Функция URI()
	
	Возврат "http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema";
	
КонецФункции
#КонецОбласти