//Загрузка
Функция ЗагрузитьСообщениеОбмена() Экспорт
	
	URI = "http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema";
	Настройка = Справочники.НастройкиРеквизитовДляОбменов.Обмен_1С_Сайт_Розница;
	АдресВебСервиса = ?(ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза(), Настройка.СтрокаДляРабочейБазы, Настройка.СтрокаДляТестовойБазы);
	
	ВходящийУзел = УзелПланаОбмена(Истина);
	ИсходящийУзел = УзелПланаОбмена(Ложь);
	ЭтотУзел = ЭтотУзел();
	
	КодПолучателя = ЭтотУзел.ИдентификаторУзла;
	НомерПринятого1С = ВходящийУзел.НомерПринятого;
	НомерОтправленного1С = ИсходящийУзел.НомерОтправленного;
	
	Определения = Новый WSОпределения(АдресВебСервиса);
	Прокси = Новый WSПрокси(Определения, Определения.Сервисы[0].URIПространстваИмен, Определения.Сервисы[0].Имя, Определения.Сервисы[0].ТочкиПодключения[0].Имя);
	
	//Warning - Не подтверждаем на тесте
	//ОтветСервера = Прокси.GetExchangeMessage("retail_orders", КодПолучателя, НомерПринятого1С);
	ОтветСервера = Прокси.GetExchangeMessage("retail_orders", КодПолучателя, 0);
	РаспакованноеСообщение = ОбменДаннымиСервер.РаспаковатьСообщениеОбмена(ОтветСервера);

	ТипСообщениеОбмена = ФабрикаXDTO.Тип(URI, "СообщениеОбмена");
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(РаспакованноеСообщение);
	ДанныеХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ, ТипСообщениеОбмена);
	
	ОбъектыXDTO = ДанныеХДТО.Объекты.ПолучитьСписок("Объект");
	НомерСообщения = ДанныеХДТО.НомерСообщения;
	НомерПринятогоСайтом = Мин(НомерОтправленного1С, ДанныеХДТО.НомерПринятого);
	
	//Warning - Отметить полученное//
	
	Если НомерСообщения <= НомерПринятого1С Тогда
		ВызватьИсключение "[ЗагрузитьСообщениеОбмена]: неправильное значение элемента ""НомерСообщения"": сообщение с таким номером уже загружалось";
	КонецЕсли;
	
	Если ОбъектыXDTO.Количество() > 0 Тогда
		ОбменДаннымиВызовСервера.ЗарегистрироватьСообщениеВИсторииОбменаССайтом(ИсходящийУзел.ИдентификаторУзла, КодПолучателя, ОтветСервера, НомерСообщения);
		РазобратьПолученныеОбъекты(ОбъектыXDTO, НомерСообщения);
	КонецЕсли;

	ОбъектУзла = ВходящийУзел.ПолучитьОбъект();
	ОбъектУзла.НомерПринятого = НомерСообщения;
	ОбъектУзла.Записать();
	
	Возврат РаспакованноеСообщение;
	
КонецФункции
Процедура РазобратьПолученныеОбъекты(ОбъектыXDTO, НомерСообщения) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОбъектыОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидОбмена.Установить(Перечисления.ВидыОбменов.ОбменСайт_1С_Розница);
	НаборЗаписей.Отбор.НомерСообщения.Установить(НомерСообщения);
	
	ИндексСтроки = 1;
	Для Каждого Объект Из ОбъектыXDTO Цикл
		ВидОбъекта = ВидОбъекта(Объект.Тип().Имя);
		Если ЗначениеЗаполнено(ВидОбъекта) Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.ВидОбмена = Перечисления.ВидыОбменов.ОбменСайт_1С_Розница; 
			Запись.НомерСообщения = НомерСообщения; 
			Запись.ИндексСтроки = ИндексСтроки;
			
			Запись.ВидОбъекта = ВидОбъекта;
			Запись.Период = ТекущаяДата();
			Запись.Данные = ЗначениеВСтрокуВнутр(ПреобразованныйОбъектXDTO(Объект, ВидОбъекта));
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры
Функция ПреобразованныйОбъектXDTO(ОбъектXDTO, ВидОбъекта)
	
	Если ВидОбъекта = "retail_order.items" Тогда
		ПреобразованныйОбъект = Новый Массив;
		Для Каждого Строка Из ОбъектXDTO Цикл
			Структура = Новый Структура;
			Структура.Вставить("site_id", Строка.site_id);
			Структура.Вставить("part_uuid", Строка.part_uuid);
			Структура.Вставить("quantity", Строка.quantity);
			Структура.Вставить("price", Строка.price);
			Структура.Вставить("description", Строка.description);
			ПреобразованныйОбъект.Добавить(Структура);
		КонецЦикла;
	ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаРозница Тогда
		ПреобразованныйОбъект = Новый Структура;
		ПреобразованныйОбъект.Вставить("date_created", ОбъектXDTO.date_created);
		ПреобразованныйОбъект.Вставить("client", ОбъектXDTO.client);
		ПреобразованныйОбъект.Вставить("filial_uuid", ОбъектXDTO.filial_uuid);
		ПреобразованныйОбъект.Вставить("shop_uuid", ОбъектXDTO.shop_uuid);
		ПреобразованныйОбъект.Вставить("number", ОбъектXDTO.number);
		ПреобразованныйОбъект.Вставить("user_comment", ОбъектXDTO.user_comment);
		ПреобразованныйОбъект.Вставить("name", ОбъектXDTO.name);
		ПреобразованныйОбъект.Вставить("delivery_needed", ОбъектXDTO.delivery_needed);
		ПреобразованныйОбъект.Вставить("delivery_address", ОбъектXDTO.delivery_address);
		ПреобразованныйОбъект.Вставить("phone", ОбъектXDTO.phone);
		ПреобразованныйОбъект.Вставить("items", ПреобразованныйОбъектXDTO(ОбъектXDTO.items.ПолучитьСписок("item"), "retail_order.items"));
	КонецЕсли;
	
	Возврат ПреобразованныйОбъект;
	
КонецФункции
Функция ВидОбъекта(ВидОбъектаСтрокой)
	
	Если ВидОбъектаСтрокой = "retail_order" Тогда
		ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаРозница;
	Иначе
		ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидОбъекта;
	
КонецФункции

//Обработка
Процедура ОбработатьОбъекты() Экспорт
	
	Выборка = ОбъектыКОбработке();
	ОбщиеНастройкиЗагрузки = ОбщиеНастройкиЗагрузки();
	Пока Выборка.Следующий() Цикл
		СтруктураОтчета = Новый Структура("СсылкаНаЗаявку,Ошибка,ВременнаяОшибка,ТекстОшибки", Неопределено, Ложь, Ложь, "");
		ЗагрузитьОбъект(Выборка, СтруктураОтчета, ОбщиеНастройкиЗагрузки);
		
		Если СтруктураОтчета.Ошибка Тогда
			Сообщить(СтруктураОтчета.ТекстОшибки);
		КонецЕсли;
		
		Запись = РегистрыСведений.ОбъектыОбмена.СоздатьМенеджерЗаписи();
		Запись.Период = Выборка.Период;
		Запись.ВидОбмена = Выборка.ВидОбмена;
		Запись.НомерСообщения = Выборка.НомерСообщения;
		Запись.ИндексСтроки = Выборка.ИндексСтроки;
		Запись.Прочитать();
		
		ЗаполнитьЗначенияСвойств(Запись, СтруктураОтчета, "Ошибка,ТекстОшибки");
		Если НЕ СтруктураОтчета.ВременнаяОшибка Тогда
			Запись.Обработано = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОтчета.СсылкаНаЗаявку) Тогда
			Запись.Ссылка = СтруктураОтчета.СсылкаНаЗаявку;
		КонецЕсли;
		Запись.ДатаОбработки = ТекущаяДата();
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
Функция ОбъектыКОбработке()
	
	ВидыОбмена = Новый Массив;
	ВидыОбмена.Добавить(Перечисления.ВидыОбменов.ОбменСайт_1С_Розница);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1000
	                      |	ОбъектыОбмена.Период,
	                      |	ОбъектыОбмена.ВидОбмена,
	                      |	ОбъектыОбмена.НомерСообщения,
	                      |	ОбъектыОбмена.ИндексСтроки,
	                      |	ОбъектыОбмена.ВидОбъекта,
	                      |	ОбъектыОбмена.Данные
	                      |ИЗ
	                      |	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	                      |ГДЕ
	                      |	НЕ ОбъектыОбмена.Обработано
	                      |	И ОбъектыОбмена.ВидОбмена В(&ВидыОбмена)");
	Запрос.УстановитьПараметр("ВидыОбмена", ВидыОбмена);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
Процедура ЗагрузитьОбъект(ДанныеОбъекта, СтруктураОтчета, ОбщиеНастройкиЗагрузки)
	
	Если ДанныеОбъекта.ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаРозница Тогда
		ЗагрузитьРозничнуюЗаявку(ДанныеОбъекта.Данные, СтруктураОтчета, ОбщиеНастройкиЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

//Загрузка различных видов объектов//
#Область РозничнаяЗаявка
Процедура ЗагрузитьРозничнуюЗаявку(ДанныеВнутреннийФормат, СтруктураОтчета, ОбщиеНастройкиЗагрузки)
	
	ДанныеОбъекта = ДанныеОбъекта(ДанныеВнутреннийФормат, СтруктураОтчета);
	Если НЕ СтруктураОтчета.Ошибка Тогда
		СтруктураЗаявки = Новый Структура;
		СтруктураЗаявки.Вставить("НомерРозничнойЗаявки", ДанныеОбъекта.number); 
		СтруктураЗаявки.Вставить("Дата", ТекущаяДата()); 
		СтруктураЗаявки.Вставить("ИсточникЗаявки", Перечисления.ИсточникиЗаявок.СайтРозница);
		СтруктураЗаявки.Вставить("ВалютаДокумента", ОбщиеНастройкиЗагрузки.ВалютаВзаиморасчетов);
		СтруктураЗаявки.Вставить("КурсВзаиморасчетов", 1);
		СтруктураЗаявки.Вставить("КратностьВзаиморасчетов", 1);
		СтруктураЗаявки.Вставить("Подтверждена", Истина);//?
		СтруктураЗаявки.Вставить("ТипЦен", ОбщиеНастройкиЗагрузки.ТипЦен);
		СтруктураЗаявки.Вставить("СтатусДокумента", ?(СтруктураЗаявки.Подтверждена, Справочники.СтатусыДокументов.ЗаявкаПокупателяПодтвержден, Справочники.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден));
		СтруктураЗаявки.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаявкаПокупателя.ЗаявкаПокупателя);
		СтруктураЗаявки.Вставить("Филиал", ФилиалПоUUID(ДанныеОбъекта, СтруктураОтчета));
		СтруктураЗаявки.Вставить("Организация", ОрганизацияФилиала(СтруктураЗаявки.Филиал, СтруктураОтчета));
		СтруктураЗаявки.Вставить("БанковскийСчет", СтруктураЗаявки.Организация.ОсновнойБанковскийСчет);
		СтруктураЗаявки.Вставить("Регион", РегионФилиала(СтруктураЗаявки.Филиал));
		УстановитьСкладЗаявки(СтруктураЗаявки, ДанныеОбъекта, СтруктураОтчета);
		УстановитьДанныеКонтрагента(СтруктураЗаявки, ДанныеОбъекта, ОбщиеНастройкиЗагрузки, СтруктураОтчета);
		СтруктураЗаявки.Вставить("Комментарий", ДанныеОбъекта.user_comment);
		СтруктураЗаявки.Вставить("Товары", ТаблицаТоваров(ДанныеОбъекта.items, СтруктураЗаявки, СтруктураОтчета));
		
		КонтрольДокументаЗаявки(ДанныеОбъекта, СтруктураЗаявки, СтруктураОтчета);
		
		Если НЕ СтруктураОтчета.Ошибка Тогда 
			ЗаписатьДокументЗаявки(СтруктураЗаявки, СтруктураОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры
Процедура КонтрольДокументаЗаявки(ДанныеОбъекта, СтруктураЗаявки, СтруктураОтчета)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаявкаПокупателя.Ссылка
	                      |ИЗ
	                      |	Документ.ЗаявкаПокупателя КАК ЗаявкаПокупателя
	                      |ГДЕ
	                      |	ЗаявкаПокупателя.НомерРозничнойЗаявки = &number
	                      |	И ЗаявкаПокупателя.ИсточникЗаявки = ЗНАЧЕНИЕ(Перечисление.ИсточникиЗаявок.СайтРозница)");
	Запрос.УстановитьПараметр("number", ДанныеОбъекта.number);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураОтчета.Ошибка = Истина;
		DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, "Заявка с указанным ID(" + ДанныеОбъекта.number + ") уже загружена");
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаписатьДокументЗаявки(СтруктураЗаявки, СтруктураОтчета)
	
	Документ = Документы.ЗаявкаПокупателя.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Документ, СтруктураЗаявки);
	Документ.Товары.Загрузить(СтруктураЗаявки.Товары);
	
	Попытка
		Документ.ДополнительныеСвойства.Вставить("ЗагрузкаССайта", Истина);
		//Документ.ДополнительныеСвойства.Вставить("РеквизитыПоставщика", СтруктураДокумента.РеквизитыПоставщика);
		Документ.Записать(РежимЗаписиДокумента.Проведение);
		СтруктураОтчета.Вставить("СсылкаНаЗаявку", Документ.Ссылка);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		СтруктураОтчета.Ошибка = Истина;
		СтруктураОтчета.ВременнаяОшибка = ЭтоВременнаяОшибка(ОписаниеОшибки);
		ТекстОшибки = "Ошибка записи документа: " + Символы.ПС + ОписаниеОшибки;
		DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, ТекстОшибки);
		СтруктураОтчета.Вставить("СсылкаНаЗаявку", Документы.ЗаявкаПокупателя.ПустаяСсылка());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

//Выгрузка
Функция ВыгрузитьСообщениеОбмена(ИдентификаторУзлаОбмена, НомерПринятого, НеСжиматьСообщение = Ложь) Экспорт
	
КонецФункции



//Общее
Функция ОбщиеНастройкиЗагрузки()
	
	Структура = Новый Структура;
	Структура.Вставить("ГруппаРозничныхКонтрагентов", РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт(Розница)", "Группа розничных контрагентов", Справочники.Контрагенты.НайтиПоКоду("00000002")));
	Структура.Вставить("ЦеноваяГруппаРозничныхКонтрагентов", РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт(Розница)", "Ценовая группа розничных контрагентов", Справочники.ГруппыКонтрагентов.НайтиПоКоду(1)));
	Структура.Вставить("ВалютаВзаиморасчетов", Константы.ВалютаРегламентированногоУчета.Получить());
	Структура.Вставить("СоздаватьТорговуюТочку", Истина);
	Структура.Вставить("ТипЦен", Константы.ТипЦен_дляСайта.Получить());
	
	Возврат Структура;
	
КонецФункции
Функция УзелПланаОбмена(Входящий = Истина) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбменССайтом_Розница.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.ОбменССайтом_Розница КАК ОбменССайтом_Розница
	                      |ГДЕ
	                      |	НЕ ОбменССайтом_Розница.ЭтотУзел
	                      |	И (&Входящий
	                      |				И ОбменССайтом_Розница.Входящий
	                      |			ИЛИ НЕ &Входящий
	                      |				И ОбменССайтом_Розница.Исходящий)");
	Запрос.УстановитьПараметр("Входящий", Входящий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, ЭтотУзел());
	
КонецФункции
Функция ДанныеОбъекта(ДанныеВнутреннийФормат, СтруктураОтчета)
	
	Если НЕ ЗначениеЗаполнено(ДанныеВнутреннийФормат) Тогда
		СтруктураОтчета.Ошибка = Истина;
		СтруктураОтчета.ТекстОшибки = "Неверный формат данных <Данные>";
		Структура = Новый Структура;
	Иначе
		Попытка
			Структура = ЗначениеИзСтрокиВнутр(ДанныеВнутреннийФормат);
		Исключение
			СтруктураОтчета.Ошибка = Истина;
			СтруктураОтчета.ТекстОшибки = "Неверный формат данных <Данные>";
		КонецПопытки;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции
Процедура УстановитьСкладЗаявки(СтруктураЗаявки, ДанныеОбъекта, СтруктураОтчета)
	
	Склад = Справочники.Склады.ПустаяСсылка();
	Если ЗначениеЗаполнено(ДанныеОбъекта.shop_uuid) Тогда
		Попытка
			UUID = Новый УникальныйИдентификатор(ДанныеОбъекта.shop_uuid);
			Склад = Справочники.Склады.ПолучитьСсылку(UUID);
		Исключение
			СтруктураОтчета.Ошибка = Истина;
			DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, "Ошибка определения склада по UUID (" + uuid + ")");
		КонецПопытки;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Склады.Ссылка
		                      |ИЗ
		                      |	Справочник.Склады КАК Склады
		                      |ГДЕ
		                      |	Склады.Филиал = &Филиал
		                      |	И Склады.ОсновнойСкладРегиона");
		Запрос.УстановитьПараметр("Филиал", ДанныеОбъекта.Филиал);
		Выборка = Запрос.Выполнить().Выбрать();
		Склад = ?(Выборка.Следующий(), Выборка.Ссылка, Склад);
	КонецЕсли;
	
	Если Склад.Пустая() Тогда
		СтруктураОтчета.Ошибка = Истина;
		DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, "Не определен склад заявки");
	КонецЕсли;

	СтруктураЗаявки.Вставить("Склад", Склад);
	
КонецПроцедуры
Функция ФилиалПоUUID(ДанныеОбъекта, СтруктураОтчета)
	
	Филиал = Справочники.Филиалы.ПустаяСсылка();
	
	Попытка
		UUID = Новый УникальныйИдентификатор(ДанныеОбъекта.filial_uuid);
		Филиал = Справочники.Филиалы.ПолучитьСсылку(UUID);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ДанныеОбъекта.Ошибка = Истина;
		ДанныеОбъекта.ТекстОшибки = "Ошибка определения региона:" + ОписаниеОшибки;
	КонецПопытки;
	
	Если Филиал.Пустая() Тогда
		СтруктураОтчета.Ошибка = Истина;
		DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, "Ошибка определения региона, UUID:" + ДанныеОбъекта.filial_uuid);
	КонецЕсли;
	
	Возврат Филиал;
	
КонецФункции
Функция РегионФилиала(Филиал)
	
	Регион = Справочники.Регионы.ПустаяСсылка();

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Регионы.Ссылка
	                      |ИЗ
	                      |	Справочник.Регионы КАК Регионы
	                      |ГДЕ
	                      |	Регионы.Филиал = &Филиал");
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Регион = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Регион;
	
КонецФункции
Функция ОрганизацияФилиала(Филиал, СтруктураОтчета)
	
	Организация = Филиал.ФирмаДляФизЛиц;
	Если Организация.Пустая() Тогда
		СтруктураОтчета.Ошибка = Истина;
		DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, "Ошибка определения организации по филиалу <" + Филиал.Код + ">");
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции
Процедура УстановитьДанныеКонтрагента(СтруктураЗаявки, ДанныеОбъекта, ОбщиеНастройкиЗагрузки, СтруктураОтчета)
	
	Если СтруктураОтчета.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Контрагенты.Ссылка
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	НЕ Контрагенты.ПометкаУдаления
	                      |	И Контрагенты.IDРозничногоПокупателя = &IDРозничногоПокупателя");
	Запрос.УстановитьПараметр("IDРозничногоПокупателя", ДанныеОбъекта.client);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//Контрагент уже существует//
		Контрагент = Выборка.Ссылка;
	Иначе
		//Контрагента нет, создаем нового//
		КонтрагентСсылкаНового = Справочники.Контрагенты.ПолучитьСсылку();
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.УстановитьНовыйКод();
		НовыйКонтрагент.УстановитьСсылкуНового(КонтрагентСсылкаНового);

		НовыйКонтрагент.Родитель = ОбщиеНастройкиЗагрузки.ГруппаРозничныхКонтрагентов;
		НовыйКонтрагент.IDРозничногоПокупателя = ДанныеОбъекта.client;
		НовыйКонтрагент.Наименование = ДанныеОбъекта.name;
		НовыйКонтрагент.НаименованиеПолное = ДанныеОбъекта.name;
		НовыйКонтрагент.Покупатель = Истина;
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		НовыйКонтрагент.СайтГруппаКонтрагента = ОбщиеНастройкиЗагрузки.ЦеноваяГруппаРозничныхКонтрагентов;
		НовыйКонтрагент.Регион = СтруктураЗаявки.Регион;
		НовыйКонтрагент.ДатаСоздания = ТекущаяДата();
		
		//Создаем торговую точку.. или не создаем
		Если ОбщиеНастройкиЗагрузки.СоздаватьТорговуюТочку Тогда		
			ТорговаяТочка = Справочники.ТорговыеТочки.СоздатьЭлемент();
			ТорговаяТочка.Владелец = КонтрагентСсылкаНового;
			ТорговаяТочка.Регион = СтруктураЗаявки.Регион;
			ТорговаяТочка.Наименование = ДанныеОбъекта.name;
			ТорговаяТочка.Код = НовыйКонтрагент.Код;
			ТорговаяТочка.ДополнительныйКомментарий = "Создано для розничного покупателя";
			ТорговаяТочка.ОбменДанными.Загрузка = Истина;
			ТорговаяТочка.Записать();
		Иначе
			ТорговаяТочка = Справочники.ТорговыеТочки.ПустаяСсылка();
		КонецЕсли;
		
		//Создаем договор//
		Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Договор.УстановитьНовыйКод();
		Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Договор.Владелец = КонтрагентСсылкаНового;
		Договор.Наименование = "Основной договор";
		Договор.Дата = ТекущаяДата();
		Договор.Организация = СтруктураЗаявки.Организация;
		Договор.ДопустимаяСуммаЗадолженности = 0;
		Договор.ДопустимоеЧислоДнейЗадолженности = 0;
		Договор.КоэффициентСуммыКредита = 1;
		Договор.ВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные;
		Договор.ДоговорНаОферту = Истина;
		Договор.НеКонтролироватьЛимит = Ложь;
		Договор.ДоговорПодписан = Истина;
		Договор.ВалютаВзаиморасчетов = ОбщиеНастройкиЗагрузки.ВалютаВзаиморасчетов;
		Договор.Номер = "1";
		Договор.ВидРасчетаДней = Перечисления.ВидыРасчетаДней.ПоБанковскимДням;
		Договор.ОбменДанными.Загрузка = Истина;
		Договор.Записать();

		НовыйКонтрагент.ОсновнойДоговорКонтрагента = Договор.Ссылка;
		НовыйКонтрагент.ОсновнаяТорговаяТочка = ТорговаяТочка;
		НовыйКонтрагент.ОбменДанными.Загрузка = Истина;
		НовыйКонтрагент.Записать();
		
		Контрагент = НовыйКонтрагент.Ссылка;
		
		//Запись контактной информации
		ДобавитьКонтактнуюИнформацию(Новый Структура("Объект,Тип,Вид,Представление",
												Контрагент,
												Перечисления.ТипыКонтактнойИнформации.Телефон,
												Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
												ДанныеОбъекта.phone));
	КонецЕсли;

	СтруктураЗаявки.Вставить("Контрагент", Контрагент);	
	СтруктураЗаявки.Вставить("ТорговаяТочка", Контрагент.ОсновнаяТорговаяТочка);	
	СтруктураЗаявки.Вставить("ДоговорКонтрагента", Контрагент.ОсновнойДоговорКонтрагента);	
	СтруктураЗаявки.Вставить("УчитыватьНДС", СтруктураЗаявки.Организация.УчитыватьНДС);	
	СтруктураЗаявки.Вставить("СуммаВключаетНДС", Истина);
	
КонецПроцедуры
Процедура ДобавитьКонтактнуюИнформацию(Структура)
	
	Если ЗначениеЗаполнено(Структура.Представление) Тогда
		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Структура);
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры
Функция ТаблицаТоваров(МассивТоваров, СтруктураЗаявки, СтруктураОтчета)
	
	ТаблицаТовары = Документы.ЗаявкаПокупателя.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Для Каждого ЭлементМассива Из МассивТоваров Цикл
		СтрокаТовары = ТаблицаТовары.Добавить();
		//УстановитьРеквизитыПрайса(СтруктураОбъекта, СтрокаТовары, СтрокаXDTO.ПрайсПоставщика_Код);
		УстановитьРеквизитыНоменклатуры(СтрокаТовары, ЭлементМассива.part_uuid, СтруктураОтчета);
		СтрокаТовары.Качество = Справочники.Качество.Новый;
		СтрокаТовары.Цена = ЭлементМассива.price;
		СтрокаТовары.Количество = ЭлементМассива.quantity;
		СтрокаТовары.Сумма = СтрокаТовары.Цена * СтрокаТовары.Количество;
		//СтрокаТовары.ЦенаЗакупки = 0;//СтрокаТовары.Цена; //или как?
		//СтрокаТовары.СрокГарантированный = СтрокаXDTO.СрокГарантированный;
		//СтрокаТовары.СрокОжидаемый = СтрокаXDTO.СрокОжидаемый;
		//СтрокаТовары.СрокГарантированныйЗаказа = СтрокаXDTO.СрокГарантированныйЗаказа;
		//СтрокаТовары.СрокОжидаемыйЗаказа = СтрокаXDTO.СрокОжидаемыйЗаказа;
		СтрокаТовары.IDSite = ЭлементМассива.site_id;
		СтрокаТовары.КомментарийИзСайта = ЭлементМассива.description;
		
		//ДополнительныеДанные = Новый Структура("ИзготовительПоставщика,АртикулПоставщика", СтрокаXDTO.Номенклатура_ИзготовительПоставщика, СтрокаXDTO.Номенклатура_АртикулПоставщика);
		//ДополнительныеДанные.Вставить("ТипПоставки", ТипПоставки(СтрокаXDTO.ТипПоставки));
		//ДополнительныеДанные.Вставить("ДнейДоставкиДоДомашнегоСклада", ?(ЗначениеЗаполнено(СтрокаXDTO.ДнейДоставкиДоДомашнегоСклада), СтрокаXDTO.ДнейДоставкиДоДомашнегоСклада, 0));
		//СтруктураОбъекта.РеквизитыПоставщика.Вставить(СтрокаТовары.IDSite, ДополнительныеДанные);
		
		СтрокаТовары.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТовары.Сумма, СтруктураЗаявки.УчитыватьНДС, СтруктураЗаявки.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТовары.СтавкаНДС));
		//КонтрольЗаполненияСроковЗаказа(СтруктураОбъекта, СтрокаТовары);

	КонецЦикла;

	Возврат ТаблицаТовары;
	
КонецФункции
Процедура УстановитьРеквизитыНоменклатуры(Строка, UUID, СтруктураОтчета)
	
	Отчет = Новый Структура("Отказ,ТекстОшибки", Ложь, Истина);
	Строка.Номенклатура = DataExchangeModule.НоменклатураПоUUID(UUID, Отчет);
	Если Отчет.Отказ Тогда
		СтруктураОтчета.Ошибка = Истина;
		DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, Отчет.ТекстОшибки);
	ИначеЕсли Строка.Номенклатура.Пустая() Тогда
		СтруктураОтчета.Ошибка = Истина;
		DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, "Не удалось определить номенклатуру: UUID = <" + UUID + ">");
	Иначе
		Строка.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаХраненияОстатков;
		Строка.Коэффициент = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения), Строка.ЕдиницаИзмерения.Коэффициент, 1);
		Строка.СтавкаНДС = Строка.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры
Функция ЭтоВременнаяОшибка(ОписаниеОшибки)
	
	Если Найти(ОписаниеОшибки, "Lock request time out period exceeded") Тогда
		ЭтоВременнаяОшибка = Истина;
	ИначеЕсли Найти(ОписаниеОшибки, "was deadlocked on lock resources") Тогда
		ЭтоВременнаяОшибка = Истина;
	Иначе
		ЭтоВременнаяОшибка = Ложь;
	КонецЕсли;
	
	Возврат ЭтоВременнаяОшибка;
	
КонецФункции

