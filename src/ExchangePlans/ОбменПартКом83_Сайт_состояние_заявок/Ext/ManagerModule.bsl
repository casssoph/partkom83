#Область ВыгрузкаДанных
Функция ПолучитьМетаданные()
	Возврат Метаданные.ПланыОбмена.ОбменПартКом83_Сайт_состояние_заявок;
КонецФункции
Функция URIПространстваИмен() 
	
	Возврат "http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema";
	
КонецФункции
Функция ТипПоОбъектуМетаданных(вхОбъектМетаданных) Экспорт
	
	Результат = Неопределено;
	лИмяТипа = ИмяТипаПоОбъектуМетаданных(вхОбъектМетаданных);
	Если НЕ ПустаяСтрока(лИмяТипа) тогда
		Результат = ФабрикаXDTO.Тип(URIПространстваИмен(), лИмяТипа);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции
Функция ИмяТипаПоОбъектуМетаданных(вхОбъектМетаданных) 
	Возврат	ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(вхОбъектМетаданных) + "." + вхОбъектМетаданных.Имя;
КонецФункции

Функция ВыгрузитьСообщениеОбмена_ИсторияЗаявок(ИдентификаторУзлаОбмена, НомерПринятого) Экспорт
	
	Если Константы.ВключитьРегистрациюDataExchageModule.Получить() Тогда
		ЗаписьЖурналаРегистрации("Обмен данными.Выгрузка." + Метаданные.ПланыОбмена.ОбменПартКом83_Сайт_состояние_заявок.Синоним,
				УровеньЖурналаРегистрации.Ошибка,,,"Номер сообщения: " + НомерПринятого);
	КонецЕсли;
	
	Узел1С = ОбменДаннымиКлиентСервер.ПолучитьВходящийУзелОбмена(ПолучитьМетаданные(), ИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(Узел1С) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена_ИсторияЗаявок]: неправильный параметр номер 1(Узел 1С)";
	КонецЕсли;
	
	УзелСайт = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(ПолучитьМетаданные(), ИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(УзелСайт) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена_ИсторияЗаявок]: неправильный параметр номер 1.(Узел Сайт)";
	КонецЕсли;
	
	НомерОтправленного = УзелСайт.НомерПринятого;
	Если НомерПринятого > НомерОтправленного Тогда
		//ВызватьИсключение "[ВыгрузитьСообщениеОбмена_ИсторияЗаявок]: Сообщение №"+ НомерПринятого + " ещё не отправлялось(последнее №" + НомерОтправленного + ")";
		//Иногда разбегаются счетчики, номер принятого на 1 превышает номер отправленного, обычно ночью такое//
		ТекстОшибки = "Расхождение счетчиков, ReceivedNo:" + НомерПринятого + ", НомерОтправленного:" + НомерОтправленного;
		ЗаписьЖурналаРегистрации("Обмен данными.Выгрузка.ОбменПартКом83_Сайт_состояние_заявок", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		НомерСообщения = НомерПринятого + 1;
		НомерПринятого = НомерОтправленного;
	Иначе
		НомерСообщения = НомерОтправленного + 1;
	КонецЕсли;
	
	ФиксацияПринятогоСообщения(УзелСайт, НомерПринятого);
	
	ТипОбъекты = ФабрикаXDTO.Тип(URIПространстваИмен(), "Объекты");
	ТипСообщениеОбмена = ФабрикаXDTO.Тип(URIПространстваИмен(), "СообщениеОбмена");
	
	Узел = УзелСайт.ПолучитьОбъект();
	Узел.НомерПринятого = НомерСообщения;
	Узел.Записать();
	
	СообщениеОбмена = ФабрикаXDTO.Создать(ТипСообщениеОбмена);
	СообщениеОбмена.ПланОбмена = "orders_nn";
	СообщениеОбмена.Отправитель = ЭтотУзел().ИдентификаторУзла;
	СообщениеОбмена.Получатель = ИдентификаторУзлаОбмена;
	СообщениеОбмена.НомерСообщения = НомерСообщения;
	СообщениеОбмена.НомерПринятого = Узел1С.НомерОтправленного;
	
	Объекты = ФабрикаXDTO.Создать(ТипОбъекты);
	СписокОбъектов = Объекты.ПолучитьСписок("Объект");
	
	РегистрыСведений._ИсторияСтрокЗаявок.ДобавитьДанныеИсторииСтрокЗаявок(СписокОбъектов, НомерСообщения);
	ДобавитьДанныеПодтверждений(СписокОбъектов, НомерСообщения);
	
	СообщениеОбмена.Объекты = Объекты;
	
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("utf-8");
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьХМЛ, СообщениеОбмена);
	
	Возврат ЗаписьХМЛ.Закрыть();
	
КонецФункции
Процедура ФиксацияПринятогоСообщения(ИсходящийУзел, НомерПринятогоСообщения)
	
	//Зафиксируем принятые сообщения о логе загрузки
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЛогОбменовССайтом.ПланОбмена,
	                      |	ЛогОбменовССайтом.Ссылка,
	                      |	ЛогОбменовССайтом.SiteID
	                      |ИЗ
	                      |	РегистрСведений.ЛогОбменовССайтом КАК ЛогОбменовССайтом
	                      |ГДЕ
	                      |	ЛогОбменовССайтом.ПланОбмена В (ЗНАЧЕНИЕ(Перечисление.ПланыОбменаССайтом.ПодтвержениеПолученияЗаявок), ЗНАЧЕНИЕ(Перечисление.ПланыОбменаССайтом.ПодтверждениеОтменыЗаявок))
	                      |	И НЕ ЛогОбменовССайтом.СайтСообщениеОбработал
	                      |	И ЛогОбменовССайтом.НомерСообщенияИсходящий МЕЖДУ 1 И &НомерПринятогоСообщения");
	Запрос.УстановитьПараметр("НомерПринятогоСообщения", НомерПринятогоСообщения);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ЛогОбменовССайтом.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка, "Ссылка,ПланОбмена,SiteID");
		Запись.Прочитать();
		Запись.ДатаОбработкиСайтом = ТекущаяДата();
		Запись.СайтСообщениеОбработал = Истина;
		Запись.Записать();
	КонецЦикла;
	
	РегистрыСведений._ИсторияСтрокЗаявок.ФиксацияПринятогоСообщения(НомерПринятогоСообщения);
	
КонецПроцедуры
Процедура ДобавитьДанныеПодтверждений(СписокОбъектов, НомерСообщения)
	
	КоличествоОбъектов = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен (Общее)","Количество объектов в обмене", 1000);
	ПодтвержениеПолученияЗаявок = ФабрикаXDTO.Тип(URIПространстваИмен(), "Документы.ЗаявкаПокупателя.Загрузка");
	ПодтверждениеОтменыЗаявок = ФабрикаXDTO.Тип(URIПространстваИмен(), "Документы.ЗаявкаПокупателяОтмена.Загрузка");
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1234
	                      |	ЛогОбменовССайтом.Ссылка,
	                      |	ЛогОбменовССайтом.ПланОбмена,
	                      |	ЛогОбменовССайтом.SiteID,
	                      |	ЛогОбменовССайтом.Ошибка,
	                      |	ЛогОбменовССайтом.ТекстОшибки
	                      |ИЗ
	                      |	РегистрСведений.ЛогОбменовССайтом КАК ЛогОбменовССайтом
	                      |ГДЕ
	                      |	ЛогОбменовССайтом.ПланОбмена В (ЗНАЧЕНИЕ(Перечисление.ПланыОбменаССайтом.ПодтвержениеПолученияЗаявок), ЗНАЧЕНИЕ(Перечисление.ПланыОбменаССайтом.ПодтверждениеОтменыЗаявок))
	                      |	И НЕ ЛогОбменовССайтом.СайтСообщениеОбработал");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1234", Формат(КоличествоОбъектов, "ЧГ="));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипОбъектаXDTO = ?(Выборка.ПланОбмена = Перечисления.ПланыОбменаССайтом.ПодтвержениеПолученияЗаявок, ПодтвержениеПолученияЗаявок, ПодтверждениеОтменыЗаявок);
		
		ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
		ЗаполнитьЗначенияСвойств(ОбъектXDTO, Выборка,, "Ссылка");
		ОбъектXDTO.Ссылка = Выборка.Ссылка;
		Если Выборка.ПланОбмена = Перечисления.ПланыОбменаССайтом.ПодтверждениеОтменыЗаявок Тогда
			ОбъектXDTO.IDSite = Выборка.SiteID;
		КонецЕсли;
		
		СписокОбъектов.Добавить(ОбъектXDTO);
		
		Запись = РегистрыСведений.ЛогОбменовССайтом.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка, "Ссылка,ПланОбмена,SiteID");
		Запись.Прочитать();
		Запись.НомерСообщенияИсходящий = НомерСообщения;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область ЗагрузкаДанных
Функция ОбработатьПакетЗаявокССайта(СписокОбъектовXDTO, URI, НомерСообщения, Экспресс = Ложь) Экспорт
	
	МассивЗаявок = Новый Массив;	
	Для Каждого ОбъектXDTO Из СписокОбъектовXDTO цикл
		Если ОбъектXDTO.Тип() = ФабрикаXDTO.Тип(URI, "Документы.ЗаявкаПокупателя") Тогда
			СтруктураДокумента = СтруктураДокументаЗаявкаПокупателя(ОбъектXDTO, НомерСообщения);
			КонтрольЗаполненияДокумента(СтруктураДокумента);
			ЗаписатьДокументЗаявки(СтруктураДокумента, МассивЗаявок);
			СформироватьСамовывозПоЗаявке(СтруктураДокумента);
			ЗаписатьЛогЗагрузкиДокумента(СтруктураДокумента, НомерСообщения, Экспресс);
		ИначеЕсли ОбъектXDTO.Тип() = ФабрикаXDTO.Тип(URI, "Документы.ЗаявкаПокупателяОтмена") Тогда
			СтруктураОбъекта = СтруктураОтменыЗаявки(ОбъектXDTO);
			КонтрольВозможностиОтменыЗаявки(СтруктураОбъекта);
			ОтменитьСтрокуЗаявки(СтруктураОбъекта);
			ЗаписатьЛогОтменыЗаявки(СтруктураОбъекта, НомерСообщения, Экспресс);
		КонецЕсли;
	КонецЦикла;
	DataExchangeModule.ОтметитьОтправкуОбъектов(МассивЗаявок, Перечисления.ВидыОбменов.ОбменСайт_1С_Заявки, НомерСообщения);
	
КонецФункции

//Загрузка заявок
Функция СтруктураДокументаЗаявкаПокупателя(ОбъектXDTO, НомерСообщения)
	
	СтруктураОбъекта = Новый Структура("Отказ,ТекстОшибки", Ложь, "");
	СтруктураОбъекта.Вставить("ДоговорИзОсновногоДоговора", РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт","Загрузка заявок: Использовать основной договор", Ложь));
	СтруктураОбъекта.Вставить("ОшибкаЗаполненияСроковЗаказа", Ложь);
	СтруктураОбъекта.Вставить("ТекстОшибкиЗаполненияСроковЗаказа", "");
	СтруктураОбъекта.Вставить("ОшибкаСозданияСамовывоза", Ложь);
	СтруктураОбъекта.Вставить("ТекстОшибкиСозданияСамовывоза", "");
	УстановитьСсылкуНаДокумент(СтруктураОбъекта, ОбъектXDTO.Ссылка);
	УстановитьКонтрагентаПоЛогину(СтруктураОбъекта, ОбъектXDTO.ТТ_Логин);
	УстановитьРеквизитыКонтрагента(СтруктураОбъекта, Строка(ОбъектXDTO.ДоговорКонтрагента));
	УстановитьВидОперации(СтруктураОбъекта);
	УстановитьАукцион(СтруктураОбъекта, ОбъектXDTO);
	СтруктураОбъекта.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
	СтруктураОбъекта.Вставить("Подтверждена", ОбъектXDTO.Подтверждена);
	СтруктураОбъекта.Вставить("СтатусДокумента", ?(СтруктураОбъекта.Подтверждена, Справочники.СтатусыДокументов.ЗаявкаПокупателяПодтвержден, Справочники.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден));
	СтруктураОбъекта.Вставить("ОбщаяСкидка", 0);
	СтруктураОбъекта.Вставить("Комментарий", "Загружено с сайта:" + ТекущаяДата() + ", № пакета:" + НомерСообщения);
	СтруктураОбъекта.Вставить("Склад", Константы.СкладОсновной.Получить());
	СтруктураОбъекта.Вставить("Самовывоз", ОбъектXDTO.Самовывоз);
	СтруктураОбъекта.Вставить("МаршрутДоставки", Справочники.МаршрутыДоставки.ПустаяСсылка());
	СтруктураОбъекта.Вставить("РеквизитыПоставщика", Новый Соответствие);
	СтруктураОбъекта.Вставить("ИсточникЗаявки", ИсточникЗаявки(ОбъектXDTO.Source));
	
	СтруктураОбъекта.Вставить("Склады", Новый Массив);
	
	ТаблицаТовары = Документы.ЗаявкаПокупателя.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Для Каждого СтрокаXDTO Из ОбъектXDTO.items.ПолучитьСписок("item") Цикл
		СтрокаТовары = ТаблицаТовары.Добавить();
		УстановитьРеквизитыПрайса(СтруктураОбъекта, СтрокаТовары, СтрокаXDTO.ПрайсПоставщика_Код);
		УстановитьРеквизитыНоменклатуры(СтруктураОбъекта, СтрокаТовары, СтрокаXDTO.Номенклатура, СтрокаXDTO.Номенклатура_Наименование);
		СтрокаТовары.Качество = Справочники.Качество.Новый;
		СтрокаТовары.Цена = СтрокаXDTO.Цена;
		СтрокаТовары.Количество = СтрокаXDTO.Количество;
		СтрокаТовары.Сумма = СтрокаXDTO.Сумма;
		СтрокаТовары.ЦенаЗакупки = СтрокаXDTO.ЦенаЗакупки;
		СтрокаТовары.СрокГарантированный = СтрокаXDTO.СрокГарантированный;
		СтрокаТовары.СрокОжидаемый = СтрокаXDTO.СрокОжидаемый;
		СтрокаТовары.СрокГарантированныйЗаказа = СтрокаXDTO.СрокГарантированныйЗаказа;
		СтрокаТовары.СрокОжидаемыйЗаказа = СтрокаXDTO.СрокОжидаемыйЗаказа;
		СтрокаТовары.IDSite = СтрокаXDTO.IDSite;
		СтрокаТовары.КомментарийИзСайта = ПолучитьКомментарий(СтрокаXDTO.КомментарийИзСайта);
		
		ДополнительныеДанные = Новый Структура("ИзготовительПоставщика,АртикулПоставщика", СтрокаXDTO.Номенклатура_ИзготовительПоставщика, СтрокаXDTO.Номенклатура_АртикулПоставщика);
		ДополнительныеДанные.Вставить("ТипПоставки", ТипПоставки(СтрокаXDTO.ТипПоставки));
		СтруктураОбъекта.РеквизитыПоставщика.Вставить(СтрокаТовары.IDSite, ДополнительныеДанные);
		
		СтрокаТовары.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТовары.Сумма, СтруктураОбъекта.УчитыватьНДС, СтруктураОбъекта.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТовары.СтавкаНДС));
		КонтрольЗаполненияСроковЗаказа(СтруктураОбъекта, СтрокаТовары);

	КонецЦикла;
	УстановитьСкладДокумента(СтруктураОбъекта, ОбъектXDTO.СкладЦС);
	СтруктураОбъекта.Вставить("Товары", ТаблицаТовары);
	КорректировкаЦенБонусныхСкладов(СтруктураОбъекта);
	СтруктураОбъекта.Вставить("СуммаДокумента", СтруктураОбъекта.Товары.Итог("Сумма"));
	
	Возврат СтруктураОбъекта;
	
КонецФункции
Процедура КонтрольЗаполненияДокумента(СтруктураДокумента)
	
	//Проверяем пустые цены
	Склад = СтруктураДокумента.Склад;
	Если НЕ Склад.Пустая() И НЕ Склад.Сувенирный И НЕ Склад.Бонусный Тогда
		Для Каждого Строка Из СтруктураДокумента.Товары.НайтиСтроки(Новый Структура("Цена",0)) Цикл
			СтруктураДокумента.Отказ = Истина;
			ТекстОшибки = "Нулевая цена в строке SiteID:" + Строка.IDSite;
			ДополнитьОшибку(СтруктураДокумента.ТекстОшибки, ТекстОшибки);	
		КонецЦикла;
	КонецЕсли;
	
	//Проверяем количество заявок в аукционе
	Если СтруктураДокумента.АукционнаяЗаявка Тогда
		ТЧЗаявки = СтруктураДокумента.АукционОбъект.Заявки;
		Если ТЧЗаявки.Количество() > СтруктураДокумента.АукционОбъект.ОбщееЧислоЗаявок Тогда
			СтруктураДокумента.Отказ = Истина;
			ТекстОшибки = "Количество заявок в указанном аукционе превышает установленное <ID:" + Формат(СтруктураДокумента.АукционОбъект.ИдентификаторАукциона, "ЧГ=") + ">";
			ДополнитьОшибку(СтруктураДокумента.ТекстОшибки, ТекстОшибки);	
		КонецЕсли;
	КонецЕсли;
	
	//Проверяем пустую организацию
	//Если пустая в договоре, то будет пустая в документе
	Если НЕ ЗначениеЗаполнено(СтруктураДокумента.Организация) Тогда
		СтруктураДокумента.Отказ = Истина;
		ТекстОшибки = "Не определена организация договора: <" + СтруктураДокумента.ДоговорКонтрагента.Код + ">";
		ДополнитьОшибку(СтруктураДокумента.ТекстОшибки, ТекстОшибки);	
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаписатьДокументЗаявки(СтруктураДокумента, МассивЗаявок)
	
	РезрешеноПерезаписыватьЗаявки = Ложь;
	
	Если НЕ СтруктураДокумента.Отказ Тогда
		СсылкаНаДокумент = СтруктураДокумента.СсылкаНаДокумент;
		ЗаявкаСуществует = ЗначениеЗаполнено(СсылкаНаДокумент.ВерсияДанных);
		
		Если	ЗаявкаСуществует И НЕ РезрешеноПерезаписыватьЗаявки Тогда
			СтруктураДокумента.Отказ = Истина;
			ТекстОшибки = "Документ существует, перезапись существующих документов запрещена. (" + Строка(СсылкаНаДокумент) + ", GUID = <" + СсылкаНаДокумент.УникальныйИдентификатор() + ">)";
			ДополнитьОшибку(СтруктураДокумента.ТекстОшибки, ТекстОшибки);
		Иначе
			Если ЗаявкаСуществует Тогда
				Документ = СсылкаНаДокумент.ПолучитьОбъект();
			Иначе
				Документ = Документы.ЗаявкаПокупателя.СоздатьДокумент();
				Документ.УстановитьСсылкуНового(СсылкаНаДокумент);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Документ, СтруктураДокумента, ,"Товары");
			Документ.Товары.Загрузить(СтруктураДокумента.Товары);
			
			Если СтруктураДокумента.АукционнаяЗаявка Тогда
				СтруктураДокумента.АукционОбъект.Записать();
				Документ.Аукцион = СтруктураДокумента.АукционОбъект.Ссылка;
			КонецЕсли;
			
			Попытка
				Документ.ДополнительныеСвойства.Вставить("ЗагрузкаССайта", Истина);
				Документ.ДополнительныеСвойства.Вставить("РеквизитыПоставщика", СтруктураДокумента.РеквизитыПоставщика);
				Документ.Записать(РежимЗаписиДокумента.Проведение);
				МассивЗаявок.Добавить(Документ.Ссылка);
			Исключение
				СтруктураДокумента.Отказ = Истина;
				ТекстОшибки = "Ошибка записи документа: " + Символы.ПС + ОписаниеОшибки();
				ДополнитьОшибку(СтруктураДокумента.ТекстОшибки, ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаписатьЛогЗагрузкиДокумента(СтруктураДокумента, НомерСообщения, Экспресс)
	
	Запись = РегистрыСведений.ЛогОбменовССайтом.СоздатьМенеджерЗаписи();
	Запись.ПланОбмена = ?(Экспресс, Перечисления.ПланыОбменаССайтом.ПодтвержениеПолученияЗаявок_express, Перечисления.ПланыОбменаССайтом.ПодтвержениеПолученияЗаявок);
	Запись.Ссылка = СтруктураДокумента.СсылкаНаДокумент.УникальныйИдентификатор();
	Запись.НомерСообщенияВходящий = НомерСообщения;
	Запись.Ошибка = СтруктураДокумента.Отказ;
	Запись.ТекстОшибки = СтруктураДокумента.ТекстОшибки + ?(СтруктураДокумента.Самовывоз, СтруктураДокумента.ТекстОшибкиСозданияСамовывоза, "");
	Запись.Записать();
	
	Если СтруктураДокумента.ОшибкаЗаполненияСроковЗаказа Тогда
		ТекстСообщения = ?(Экспресс,"(Express)","") + "От сайта пришла подтвержденная заявка с незаполненными сроками заказа (Заявка: <" + СтруктураДокумента.СсылкаНаДокумент + ">, (" + СтруктураДокумента.ТекстОшибкиЗаполненияСроковЗаказа + ")";
		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаССайтом, ТекстСообщения, "Ошибка заполнения сроков заказа");
	КонецЕсли;
	
	Если СтруктураДокумента.ОшибкаСозданияСамовывоза Тогда
		ТекстСообщения = ?(Экспресс,"(Express)","") + "Ошибка создания реализации(самовывоз) по заявке: <" + СтруктураДокумента.СсылкаНаДокумент + ">, (" + СтруктураДокумента.ТекстОшибкиСозданияСамовывоза + ")";
		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаССайтом, ТекстСообщения, "Ошибка формирования заявки с самовывозом");
	КонецЕсли;
	
КонецПроцедуры

//Создание реализации при самовывозе
Процедура СформироватьСамовывозПоЗаявке(СтруктураДокумента)

	Если СтруктураДокумента.Самовывоз И НЕ СтруктураДокумента.Отказ Тогда
		КонтрольВозможностиСозданияРеализации(СтруктураДокумента);
		Если НЕ СтруктураДокумента.ОшибкаСозданияСамовывоза Тогда
			ДокументЗаявки = СтруктураДокумента.СсылкаНаДокумент;
			
			ДокументРеализации = ДокументРеализацииДляСамовывоза(ДокументЗаявки);
			ВыборкаПоРезервам = ДанныеРезервовПоЗаявке(ДокументЗаявки);
			ЗаполнитьТоварыДляРеализации(ДокументРеализации, ВыборкаПоРезервам, СтруктураДокумента);
			ЗаписатьДокументРеализации(ДокументРеализации, СтруктураДокумента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Функция ДокументРеализацииДляСамовывоза(ДокументЗаявки)
	
	Документ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Документ.Дата = ТекущаяДата();
	Документ.Комментарий = "Самовывоз заявки: " + ДокументЗаявки;
	Документ.ТипДоставки = Справочники.ТипыДоставки.Самовывоз;
	Документ.ДокументОснование = ДокументЗаявки;
	Документ.БанковскийСчетОрганизации = ДокументЗаявки.Организация.ОсновнойБанковскийСчет;
	Документ.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка;
	ЗаполнитьЗначенияСвойств(Документ, ДокументЗаявки, "Организация,Контрагент,Склад,ДоговорКонтрагента,ТипЦен,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,УчитыватьНДС,СуммаВключаетНДС,Филиал,Менеджер,МаршрутДоставки");
	Документ.ДатаДоставки = Документ.Дата;
	
	Возврат Документ;
	
КонецФункции
Функция ДанныеРезервовПоЗаявке(ДокументЗаявки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаявкаПокупателяТовары.СтрокаЗаявки,
	                      |	ЗаявкаПокупателяТовары.Номенклатура,
	                      |	ЗаявкаПокупателяТовары.СтавкаНДС,
	                      |	ЗаявкаПокупателяТовары.Количество КАК КоличествоЗаявка,
	                      |	ЗаявкаПокупателяТовары.Цена,
	                      |	ЗаявкаПокупателяТовары.Качество,
	                      |	ЗаявкаПокупателяТовары.ЕдиницаИзмерения,
	                      |	ЗаявкаПокупателяТовары.Коэффициент,
	                      |	ЗаявкаПокупателяТовары.КомментарийИзСайта,
	                      |	ЗаявкаПокупателяТовары.IDSite,
	                      |	ЗаявкаПокупателяТовары.ПроцентСкидкиНаценки,
	                      |	ЗаявкаПокупателяТовары.ЦенаЗакупки,
	                      |	ЗаявкаПокупателяТовары.Прибыль
	                      |ПОМЕСТИТЬ ВТ_ДанныеДокумента
	                      |ИЗ
	                      |	Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
	                      |ГДЕ
	                      |	ЗаявкаПокупателяТовары.Ссылка = &ДокументЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ДанныеДокумента.СтрокаЗаявки,
	                      |	ВТ_ДанныеДокумента.Номенклатура,
	                      |	ВТ_ДанныеДокумента.СтавкаНДС,
	                      |	ВТ_ДанныеДокумента.Цена,
	                      |	ВТ_ДанныеДокумента.КоличествоЗаявка,
	                      |	ВТ_ДанныеДокумента.Качество,
	                      |	ВТ_ДанныеДокумента.ЕдиницаИзмерения,
	                      |	ВТ_ДанныеДокумента.Коэффициент,
	                      |	ВТ_ДанныеДокумента.КомментарийИзСайта,
	                      |	ВТ_ДанныеДокумента.IDSite,
	                      |	ВТ_ДанныеДокумента.ПроцентСкидкиНаценки,
	                      |	ЕСТЬNULL(РезервыТоваровОбороты.КоличествоПриход, 0) КАК КоличествоРезерв,
	                      |	ЕСТЬNULL(РезервыТоваровОбороты.СтрокаПрихода, ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)) КАК СтрокаПрихода,
	                      |	ВТ_ДанныеДокумента.ЦенаЗакупки,
	                      |	ВТ_ДанныеДокумента.Прибыль
	                      |ИЗ
	                      |	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваров.Обороты(
	                      |				,
	                      |				,
	                      |				Регистратор,
	                      |				Склад = &Склад
	                      |					И Номенклатура В
	                      |						(ВЫБРАТЬ
	                      |							ВТ_ДанныеДокумента.Номенклатура
	                      |						ИЗ
	                      |							ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента)
	                      |					И СтрокаЗаявки В
	                      |						(ВЫБРАТЬ
	                      |							ВТ_ДанныеДокумента.СтрокаЗаявки
	                      |						ИЗ
	                      |							ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента)) КАК РезервыТоваровОбороты
	                      |		ПО ВТ_ДанныеДокумента.СтрокаЗаявки = РезервыТоваровОбороты.СтрокаЗаявки
	                      |			И ВТ_ДанныеДокумента.Номенклатура = РезервыТоваровОбороты.Номенклатура");
	Запрос.УстановитьПараметр("ДокументЗаявки", ДокументЗаявки);
	Запрос.УстановитьПараметр("Склад", ДокументЗаявки.Склад);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
Процедура ЗаполнитьТоварыДляРеализации(ДокументРеализации, ВыборкаПоРезервам, СтруктураДокумента)
	
	Пока ВыборкаПоРезервам.Следующий() Цикл
		Если ВыборкаПоРезервам.КоличествоРезерв > 0 Тогда
			НоваяСтрока = ДокументРеализации.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоРезервам, "Номенклатура,Качество,Цена,ЕдиницаИзмерения,Коэффициент,СтавкаНДС,СтрокаЗаявки,КомментарийИзСайта,IDSite,ПроцентСкидкиНаценки,ЦенаЗакупки,Прибыль");
			НоваяСтрока.КлючСвязи = НоваяСтрока.НомерСтроки;
			НоваяСтрока.Количество = ВыборкаПоРезервам.КоличествоРезерв;
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена - НоваяСтрока.Количество * НоваяСтрока.Цена * НоваяСтрока.ПроцентСкидкиНаценки / 100;
			//JIRA PK83-600{
			//НоваяСтрока.КоличествоПлан = ВыборкаПоРезервам.КоличествоЗаявка;
			НоваяСтрока.КоличествоПлан = ВыборкаПоРезервам.КоличествоРезерв;
			//JIRA PK83-600}
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокументРеализации);
			
			//JIRA PK83-600{
			//Не имеет смысла в связи с изменением//
			//Если НоваяСтрока.Количество <> НоваяСтрока.КоличествоПлан Тогда
			//	СтруктураДокумента.ОшибкаСозданияСамовывоза = Истина;
			//	ТекстОшибки = "Заявка сформировала не полный резерв по строке IDSite:" + ВыборкаПоРезервам.IDSite + " (Запланировано:" + НоваяСтрока.КоличествоПлан + ", зарезервировано:" + НоваяСтрока.Количество + ")";
			//	ДополнитьОшибку(СтруктураДокумента.ТекстОшибкиСозданияСамовывоза, ТекстОшибки);
			//КонецЕсли;
			//JIRA PK83-600}
		Иначе
			СтруктураДокумента.ОшибкаСозданияСамовывоза = Истина;
			ТекстОшибки = "Заявка не сформировала резерв по строке IDSite:" + ВыборкаПоРезервам.IDSite;
			ДополнитьОшибку(СтруктураДокумента.ТекстОшибкиСозданияСамовывоза, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Процедура ЗаписатьДокументРеализации(ДокументРеализации, СтруктураДокумента)
	
	Если ДокументРеализации.Товары.Количество() = 0 Тогда
		СтруктураДокумента.ТекстОшибкиСозданияСамовывоза = "Заявка не зарезервировала товары. Реализация не сформирована";
	Иначе
		Попытка
			ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки;
			ДокументРеализации.Записать(РежимЗаписиДокумента.Запись);
			ДополнитьОшибку(СтруктураДокумента.ТекстОшибкиСозданияСамовывоза, "Ошибка проведения документа реализации:" + ДокументРеализации + Символы.ПС + ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
Процедура КонтрольВозможностиСозданияРеализации(СтруктураДокумента)
	
	Если СтруктураДокумента.Подтверждена Тогда
		Контрагент = СтруктураДокумента.Контрагент;
		ДатаБлокировкиРеализаций = Контрагент.Блокировка_Отгрузок_Дата;
		Если ЗначениеЗаполнено(ДатаБлокировкиРеализаций) И ДатаБлокировкиРеализаций <= ТекущаяДата() Тогда
			СтруктураДокумента.ОшибкаСозданияСамовывоза = Истина;
			СтруктураДокумента.ТекстОшибкиСозданияСамовывоза = "У контрагента заблокирована реализация: " + Контрагент.Блокировка_Отгрузок_Коммент;
		КонецЕсли;
	Иначе
		СтруктураДокумента.ОшибкаСозданияСамовывоза = Истина;
		СтруктураДокумента.ТекстОшибкиСозданияСамовывоза = "По неподтвержденной заявке нельзя сформировать самовывоз";
	КонецЕсли;
	
КонецПроцедуры

//Отмена заявок
Функция СтруктураОтменыЗаявки(ОбъектXDTO)
	
	СтруктураОбъекта = Новый Структура("Отказ,ТекстОшибки", Ложь, "");
	УстановитьРеквизитыЗаявки(СтруктураОбъекта, ОбъектXDTO);
	
	Возврат СтруктураОбъекта; 
	
КонецФункции
Процедура КонтрольВозможностиОтменыЗаявки(СтруктураОбъекта)
	
	Если НЕ СтруктураОбъекта.Отказ Тогда
		Если СтруктураОбъекта.Сток Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	РеализацияТоваровУслугТовары.Ссылка
			                      |ИЗ
			                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			                      |ГДЕ
			                      |	РеализацияТоваровУслугТовары.СтрокаЗаявки = &СтрокаЗаявки
			                      |	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
			                      |
			                      |СГРУППИРОВАТЬ ПО
			                      |	РеализацияТоваровУслугТовары.Ссылка");
			Запрос.УстановитьПараметр("СтрокаЗаявки", СтруктураОбъекта.ИдентификаторСтрокиЗаявки);
			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				СтруктураОбъекта.Отказ = Истина;
				ТекстОшибки = "По строке заявки(Сток) уже сформирована реализация: " + Результат.Ссылка;
				ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
			КонецЕсли;
		Иначе
			Если НЕ СтруктураОбъекта.ИдентификаторСтрокиЗаявки.Заказ.Пустая() Тогда
				СтруктураОбъекта.Отказ = Истина;
				ТекстОшибки = "По строке заявки(Кросс) уже сформирован заказ";
				ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура ОтменитьСтрокуЗаявки(СтруктураОбъекта)
	
	Если НЕ СтруктураОбъекта.Отказ Тогда
		Документ = СтруктураОбъекта.СсылкаНаДокумент;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда
			ИзменяемыйОбъект = Документ.Скопировать();
			ИзменяемыйОбъект.Дата = ТекущаяДата();
		Иначе
			ИзменяемыйОбъект = Документ.ПолучитьОбъект();
			ИзменяемыйОбъект.ДополнительныеСвойства.Свойство("СоздаватьКорректировку", Истина);
		КонецЕсли;
		
		СтрокаДокумента = ИзменяемыйОбъект.Товары[СтруктураОбъекта.НомерСтроки];
		КлючСвязи = СтрокаДокумента.КлючСвязи;
		КоличествоИсходное = СтрокаДокумента.Количество;
		КоличествоОтказ = ОтказыПоСтрокеЗаявки(СтрокаДокумента.СтрокаЗаявки);
		
		ОтказыСайта = КоличествоИсходное - КоличествоОтказ;
		Если ОтказыСайта > 0 Тогда
			Строка = ИзменяемыйОбъект.ПричиныОтказов.Добавить();
			Строка.КлючСвязи = КлючСвязи;
			Строка.ПричинаОтмены = Справочники.СостоянияСтрокДокументов.ОтказССайта;
			Строка.Количество = ОтказыСайта;
			Попытка
				ИзменяемыйОбъект.Записать(РежимЗаписиДокумента.Проведение); 
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("Загрузка заявок с сайта", 
       				 УровеньЖурналаРегистрации.Ошибка, , ИзменяемыйОбъект.Ссылка,
        				"Ключ связи: "+КлючСвязи+", Ошибка отмены заявки: " + ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 
Процедура ЗаписатьЛогОтменыЗаявки(СтруктураДокумента, НомерСообщения, Экспресс)
	
	Запись = РегистрыСведений.ЛогОбменовССайтом.СоздатьМенеджерЗаписи();
	Запись.ПланОбмена = ?(Экспресс, Перечисления.ПланыОбменаССайтом.ПодтверждениеОтменыЗаявок_express, Перечисления.ПланыОбменаССайтом.ПодтверждениеОтменыЗаявок);
	Запись.Ссылка = СтруктураДокумента.ИсходнаяЗаявка.УникальныйИдентификатор();
	Запись.SiteID = СтруктураДокумента.IDSite;
	Запись.НомерСообщенияВходящий = НомерСообщения;
	Запись.Ошибка = СтруктураДокумента.Отказ;
	Запись.ТекстОшибки = СтруктураДокумента.ТекстОшибки;
	Запись.Записать();
	
КонецПроцедуры

//Дополнительные функции
Процедура УстановитьСсылкуНаДокумент(СтруктураОбъекта, UUID)
	
	СсылкаНаДокумент = Документы.ЗаявкаПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
	СтруктураОбъекта.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
	СтруктураОбъекта.Вставить("Дата", ?(ЗначениеЗаполнено(СсылкаНаДокумент.ВерсияДанных), СсылкаНаДокумент.Дата, ТекущаяДата()));
	
КонецПроцедуры
Процедура УстановитьКонтрагентаПоЛогину(СтруктураОбъекта, Логин)
	
	СтруктураОбъекта.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	СтруктураОбъекта.Вставить("ТорговаяТочка", Справочники.ТорговыеТочки.ПустаяСсылка());
	СтруктураОбъекта.Вставить("Филиал", Справочники.Филиалы.ПустаяСсылка());
	СтруктураОбъекта.Вставить("Менеджер", Справочники.Менеджеры.ПустаяСсылка());
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УчетныеЗаписиСайта.Владелец КАК ТорговаяТочка,
	                      |	УчетныеЗаписиСайта.Владелец.Владелец.Ссылка КАК Контрагент,
	                      |	ЕСТЬNULL(МенеджерыТорговыхТочекСрезПоследних.Менеджер, ЗНАЧЕНИЕ(Справочник.Менеджеры.ПустаяСсылка)) КАК Менеджер,
	                      |	ЕСТЬNULL(УчетныеЗаписиСайта.Владелец.Регион.Филиал, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиСайта КАК УчетныеЗаписиСайта
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МенеджерыТорговыхТочек.СрезПоследних КАК МенеджерыТорговыхТочекСрезПоследних
	                      |		ПО УчетныеЗаписиСайта.Владелец = МенеджерыТорговыхТочекСрезПоследних.ТорговаяТочка
	                      |			И (МенеджерыТорговыхТочекСрезПоследних.ВидМенеджера = ЗНАЧЕНИЕ(Перечисление.ВидыМенеджеров.Продажи))
	                      |ГДЕ
	                      |	УчетныеЗаписиСайта.Код = &Логин");
	Запрос.УстановитьПараметр("Логин", Логин);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Результат);
	Иначе
		СтруктураОбъекта.Отказ = Истина;
		ТекстОшибки = "Не определен контрагент по логину: <" + Логин + ">";
		ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьРеквизитыКонтрагента(СтруктураОбъекта, UUIDДоговора)
	
	СтруктураОбъекта.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураОбъекта.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураОбъекта.Вставить("ВалютаДокумента", Константы.ВалютаРубль.Получить());
	СтруктураОбъекта.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	СтруктураОбъекта.Вставить("КурсВзаиморасчетов", 1);
	СтруктураОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	СтруктураОбъекта.Вставить("ТипЦен", Константы.ТипЦен_дляСайта.Получить());
	СтруктураОбъекта.Вставить("УчитыватьНДС", Ложь);
	СтруктураОбъекта.Вставить("СуммаВключаетНДС", Истина);
	СтруктураОбъекта.Вставить("БанковскийСчет ", Справочники.БанковскиеСчета.ПустаяСсылка());
	СтруктураОбъекта.Вставить("ДатаОплаты", СтруктураОбъекта.Дата);
	
	ДанныеДоговора = ДанныеДоговора(СтруктураОбъекта, UUIDДоговора);
	
	Если ДанныеДоговора.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОбъекта, ДанныеДоговора,,"ТипЦен");
		СтруктураОбъекта.ТипЦен = ?(ЗначениеЗаполнено(ДанныеДоговора.ТипЦен), ДанныеДоговора.ТипЦен, СтруктураОбъекта.ТипЦен);
		СтруктураОбъекта.ДатаОплаты = РассчитатьДатуОплаты(СтруктураОбъекта.Дата, ДанныеДоговора.ВидРасчетаДней, ДанныеДоговора.ГлубинаКредита);
	Иначе
		СтруктураОбъекта.Отказ = Истина;
		ТекстОшибки = "Не определен договор по UUID: <" + UUIDДоговора + ">";
		ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры
Функция ДанныеДоговора(СтруктураОбъекта, UUID)
	
	Контрагент = СтруктураОбъекта.Контрагент;
	
	//28.06.2018: PaSe - Договор по умолчанию решили брать из основного договора контрагента//
	Если СтруктураОбъекта.ДоговорИзОсновногоДоговора И ЗначениеЗаполнено(Контрагент.ОсновнойДоговорКонтрагента) Тогда
		Договор = Контрагент.ОсновнойДоговорКонтрагента;
	Иначе
		Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	                      |	ДоговорыКонтрагентов.ГлубинаКредита,
	                      |	ДоговорыКонтрагентов.ВидРасчетаДней,
	                      |	ДоговорыКонтрагентов.Организация,
	                      |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	                      |	ДоговорыКонтрагентов.ТипЦен,
	                      |	ВЫБОР
	                      |		КОГДА ДоговорыКонтрагентов.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ДоговорыКонтрагентов.Организация.УчитыватьНДС
	                      |	КОНЕЦ КАК УчитыватьНДС,
	                      |	ВЫБОР
	                      |		КОГДА ДоговорыКонтрагентов.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	                      |				И ДоговорыКонтрагентов.Организация.УчитыватьНДС
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК СуммаВключаетНДС,
	                      |	ВЫБОР
	                      |		КОГДА ДоговорыКонтрагентов.Владелец.НашРасчетныйСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	                      |				И ДоговорыКонтрагентов.Владелец.НашРасчетныйСчет.Владелец = ДоговорыКонтрагентов.Организация
	                      |			ТОГДА ЕСТЬNULL(ДоговорыКонтрагентов.Владелец.НашРасчетныйСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))
	                      |		ИНАЧЕ ЕСТЬNULL(ДоговорыКонтрагентов.Организация.ОсновнойБанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))
	                      |	КОНЕЦ КАК БанковскийСчет,
	                      |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК КурсВзаиморасчетов,
	                      |	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК КратностьВзаиморасчетов
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	                      |		ПО ДоговорыКонтрагентов.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	                      |ГДЕ
	                      |	ДоговорыКонтрагентов.Ссылка = &Договор");
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", СтруктураОбъекта.Дата);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
Процедура УстановитьВидОперации(СтруктураОбъекта)
	
	СтруктураОбъекта.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаявкаПокупателя.ЗаявкаПокупателя);
	СтруктураОбъекта.Вставить("СкладПополнения", Справочники.Склады.ПустаяСсылка());
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Склады.Ссылка КАК Склад
	                      |ИЗ
	                      |	Справочник.Склады КАК Склады
	                      |ГДЕ
	                      |	Склады.КонтрагентПополнениеСклада = &Контрагент
	                      |	И НЕ Склады.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Склады.ОсновнойСкладРегиона УБЫВ");
	Запрос.УстановитьПараметр("Контрагент", СтруктураОбъекта.Контрагент);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		СтруктураОбъекта.ВидОперации = Перечисления.ВидыОперацийЗаявкаПокупателя.ПополнениеСклада;
		СтруктураОбъекта.СкладПополнения = РезультатЗапроса.Склад;
	КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьАукцион(СтруктураОбъекта, ОбъектXDTO)
	
	IDАукциона = ОбъектXDTO.АукционID;
	СтруктураОбъекта.Вставить("АукционОбъект", Неопределено);
	СтруктураОбъекта.Вставить("АукционнаяЗаявка", Ложь);
	
	Если ЗначениеЗаполнено(IDАукциона) Тогда
		АукционСсылка = Справочники.АукционПоставщиков.НайтиПоРеквизиту("ИдентификаторАукциона", IDАукциона);
		Если АукционСсылка.Пустая() Тогда
			АукционОбъект = Справочники.АукционПоставщиков.СоздатьЭлемент();
			АукционОбъект.ОбщееЧислоЗаявок = ОбъектXDTO.КоличествоЗаявокВАукционе;
			АукционОбъект.ИдентификаторАукциона = IDАукциона;
		Иначе
			АукционОбъект = АукционСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если АукционОбъект.Заявки.Найти(СтруктураОбъекта.СсылкаНаДокумент, "Заявка") = Неопределено Тогда
			Строка = АукционОбъект.Заявки.Добавить();
			Строка.Заявка = СтруктураОбъекта.СсылкаНаДокумент;
		КонецЕсли;
		
		СтруктураОбъекта.АукционОбъект = АукционОбъект;
		СтруктураОбъекта.АукционнаяЗаявка = Истина;
	КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьРеквизитыНоменклатуры(СтруктураОбъекта, Строка, UUID, НаименованиеНоменклатуры)
	
	Строка.Номенклатура = НоменклатураПоUUID(Строка(UUID), СтруктураОбъекта, НаименованиеНоменклатуры);
	Если Строка.Номенклатура.Пустая() Тогда
		СтруктураОбъекта.Отказ = Истина;
		ТекстОшибки = "Не удалось определить номенклатуру: UUID = <" + UUID + ">";
		ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
	Иначе
		Строка.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаХраненияОстатков;
		Строка.Коэффициент = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения), Строка.ЕдиницаИзмерения.Коэффициент, 1);
		Строка.СтавкаНДС = Строка.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьРеквизитыПрайса(СтруктураОбъекта, СтрокаТовары, КодПрайсаПоставщика)
	
	СтрокаТовары.ПрайсПоставщика = Справочники.ПрайсыПоставщиков.НайтиПоКоду(КодПрайсаПоставщика);
	Если СтрокаТовары.ПрайсПоставщика.Пустая() Тогда
		СтруктураОбъекта.Отказ = Истина;
		ТекстОшибки = "Не удалось определить прайс поставщика: Код = <" + КодПрайсаПоставщика + ">";
		ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);		
	Иначе
		Склад = СтрокаТовары.ПрайсПоставщика.Склад;
		МассивСкладов = СтруктураОбъекта.Склады;
		Если ЗначениеЗаполнено(Склад) И МассивСкладов.Найти(Склад) = Неопределено Тогда
			МассивСкладов.Добавить(Склад);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьСкладДокумента(СтруктураОбъекта, ЦентральныйСклад)
	
	Если НЕ ЦентральныйСклад Тогда
		Если СтруктураОбъекта.Склады.Количество() > 0 Тогда
			СтруктураОбъекта.Склад = СтруктураОбъекта.Склады[0];
		ИначеЕсли ЗначениеЗаполнено(СтруктураОбъекта.СкладПополнения) Тогда
			СтруктураОбъекта.Склад = СтруктураОбъекта.СкладПополнения;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОбъекта.Филиал.Пустая() И НЕ СтруктураОбъекта.Склад.Пустая() Тогда
		СтруктураОбъекта.Филиал = СтруктураОбъекта.Склад.Филиал;
	КонецЕсли;
	
	Если СтруктураОбъекта.Самовывоз И ЗначениеЗаполнено(СтруктураОбъекта.Склад) Тогда
		СтруктураОбъекта.МаршрутДоставки = СтруктураОбъекта.Склад.МаршрутДоставкиСамовывоза;
	КонецЕсли;
	
	Если СтруктураОбъекта.Склад.Пустая() Тогда
		СтруктураОбъекта.Отказ = Истина;
		ТекстОшибки = "Не удалось определить склад. Требуется указать <Основной склад> в константах";
		ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);	
	КонецЕсли;
	
КонецПроцедуры
Процедура ДополнитьОшибку(Строка, Дополнение)
	
	Строка = Строка + ?(Строка = "", "", Символы.ПС) + Дополнение;
	
КонецПроцедуры
Процедура КорректировкаЦенБонусныхСкладов(СтруктураОбъекта)
	
	Если НЕ СтруктураОбъекта.Склад.Пустая() И СтруктураОбъекта.Склад.Бонусный Тогда
		СтруктураОбъекта.Товары.ЗаполнитьЗначения(0,"Цена,Сумма,СуммаНДС");
	КонецЕсли;
	
КонецПроцедуры
Процедура КонтрольЗаполненияСроковЗаказа(СтруктураОбъекта, Строка)
	
	Если	(НЕ ЗначениеЗаполнено(Строка.СрокГарантированный) ИЛИ НЕ ЗначениеЗаполнено(Строка.СрокОжидаемый) ИЛИ
			 НЕ ЗначениеЗаполнено(Строка.СрокГарантированныйЗаказа) ИЛИ НЕ ЗначениеЗаполнено(Строка.СрокОжидаемыйЗаказа)) И СтруктураОбъекта.Подтверждена Тогда
			 
			СтруктураОбъекта.Подтверждена = Ложь;
			ТекстОшибки = "Не заполнены сроки выполнения заказа в строке IDSite: <" + Строка.IDSite + ">";
			ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
			
			СтруктураОбъекта.ОшибкаЗаполненияСроковЗаказа = Истина;
			ТекстОшибки = "IDSite: <" + Строка.IDSite + ">";
			ДополнитьОшибку(СтруктураОбъекта.ТекстОшибкиЗаполненияСроковЗаказа, ТекстОшибки);

	КонецЕсли;
	
КонецПроцедуры
Функция РассчитатьДатуОплаты(ДатаДокумента, ВариантРасчетаДней, ГлубинаКредита)
	
	ДатаОплаты = ДатаДокумента;
	
	Если ВариантРасчетаДней = Перечисления.ВидыРасчетаДней.ПоКалендарнымДням Тогда
		ДатаОплаты = ДатаОплаты + ГлубинаКредита*24*60*60;
	ИначеЕсли ГлубинаКредита > 0 Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 12345
		                      |	ДатыКалендарей.ДатаКалендаря
		                      |ИЗ
		                      |	РегистрСведений.ДатыКалендарей КАК ДатыКалендарей
		                      |ГДЕ
		                      |	ДатыКалендарей.ДатаКалендаря > &НачальнаяДата
		                      |	И ДатыКалендарей.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.Регламентированный)
		                      |	И ДатыКалендарей.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейКалендаря.Предпраздничный))");
		Запрос.УстановитьПараметр("НачальнаяДата", ДатаДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "12345", Формат(ГлубинаКредита, "ЧГ="));
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = ГлубинаКредита Тогда
			ДатаОплаты = Результат[ГлубинаКредита-1].ДатаКалендаря;
		Иначе
			СчетчикДней = ГлубинаКредита;
			Пока СчетчикДней > 0 Цикл
				ДатаОплаты = ДатаОплаты + 24*60*60;
				ДеньНедели = ДеньНедели(ДатаОплаты);
				ЭтоБуднийДень = (ДеньНедели = 6) Или (ДеньНедели = 7);
				СчетчикДней = СчетчикДней - ?(ЭтоБуднийДень, 1, 0);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаОплаты;
	
КонецФункции
Функция СледующийДень(Дата)
	
	Возврат КонецДня(КонецДня(Дата)+10);
	
КонецФункции
Функция ПолучитьКомментарий(Строка)

	Подстрока = СокрЛП(Строка);
	Подстрока = СтрЗаменить(Подстрока, Символ(13), " ");
	Подстрока = СтрЗаменить(Подстрока, Символ(10), "");
	Подстрока = СтрЗаменить(Подстрока, "'"," ");
	Подстрока = СтрЗаменить(Подстрока, "\","/");
	
	Возврат Подстрока;
	
КонецФункции
Функция ДанныеНоменклатурыПоUUID(UUID, Отказ)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	ПараметрыЗапроса = "uuid=" + UUID;
	
	HTTPСоединение = Новый HTTPСоединение(АдресWEBСервиса());
	HTTPЗапрос = Новый HTTPЗапрос("/uuid/part_by_uuid", Заголовки); 
	HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		Текст = Ответ.ПолучитьТелоКакСтроку();
			
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);

		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	Иначе
		Отказ = Истина;
		ДокументDOM = Неопределено;
	КонецЕсли;
	
	Возврат ДокументDOM;
	
КонецФункции
Функция АдресWEBСервиса()
	
	Настройка = Справочники.НастройкиРеквизитовДляОбменов.API_Сайт;
	
	Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
		Адрес = Настройка.СтрокаДляРабочейБазы;
	Иначе
		Адрес = Настройка.СтрокаДляТестовойБазы;
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции
Функция ЗначениеЭлементаDOM(ДокументDOM, Путь, Разыменователь, ЗначениеПоУмолчанию)
	
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath (Путь, ДокументDOM, Разыменователь);
	ПолученныйЭлемент = РезультатXPath.ПолучитьСледующий();
	
	Возврат ?(ПолученныйЭлемент = Неопределено, ЗначениеПоУмолчанию, ПолученныйЭлемент.ТекстовоеСодержимое);
	
КонецФункции
Функция НоменклатураПоUUID(UUID, СтруктураОбъекта, НаименованиеНоменклатуры)
	
	НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
	Если ЗначениеЗаполнено(НоменклатураСсылка.ВерсияДанных) Тогда
		Номенклатура = НоменклатураСсылка;
	Иначе
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		Отказ = Ложь;
		//Получили реквизиты номенклатуры с WS Сайта//
		ДокументDOM  = ДанныеНоменклатурыПоUUID(UUID, Отказ);
		Если НЕ Отказ Тогда
			//Сайт выдал читаемый результат//
			Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
			
			НоменклатураНайдена = (ЗначениеЭлементаDOM(ДокументDOM, "/response/success", Разыменователь, 0) = "1");
			Если НоменклатураНайдена Тогда
				//Сайт выдал реквизиты номенклатуры
				//Наименование = ЗначениеЭлементаDOM(ДокументDOM, "/response/data/name", Разыменователь, "");
				//У сайта есть наше наименование и наименование поставщика, зависящее от прайса,
				//т.к. часто сайт возвращает пустое или левое наименование, теперь берем его непосредственно из заявки
				Наименование = НаименованиеНоменклатуры;
				БрендНаименование = ЗначениеЭлементаDOM(ДокументDOM, "/response/data/brand/name", Разыменователь, "");
				БрендUUID = ЗначениеЭлементаDOM(ДокументDOM, "/response/data/brand/uuid", Разыменователь, "");
				Артикул = ЗначениеЭлементаDOM(ДокументDOM, "/response/data/number", Разыменователь, "");
				
				Бренд = БрендПоUUID(БрендUUID, Наименование);
				
				Попытка
					//Создаем новый элемент с нужными реквизитами//
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
					ЕдиницаИзмерения.Владелец = НоменклатураСсылка;
					ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Константы.ОсновнаяЕдиницаПоКлассификатору.Получить();
					ЕдиницаИзмерения.Коэффициент = 1;
					ЕдиницаИзмерения.Наименование = ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование;
					ЕдиницаИзмерения.ОбменДанными.Загрузка = Истина;
					ЕдиницаИзмерения.УстановитьНовыйКод();
					ЕдиницаИзмерения.Записать();
					
					НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
					НовыйЭлемент.УстановитьСсылкуНового(НоменклатураСсылка);
					НовыйЭлемент.Наименование = Наименование;
					НовыйЭлемент.Изготовитель = Бренд;
					НовыйЭлемент.Артикул = Артикул;
					НовыйЭлемент.ЕдиницаХраненияОстатков = ЕдиницаИзмерения.Ссылка;
					НовыйЭлемент.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
					НовыйЭлемент.ДатаСоздания = ТекущаяДата();
					НовыйЭлемент.ОбменДанными.Загрузка = Истина;
					НовыйЭлемент.УстановитьНовыйКод();
					НовыйЭлемент.Записать();
					
					Номенклатура = НовыйЭлемент.Ссылка;
				Исключение
					СтруктураОбъекта.Отказ = Истина;
					ТекстОшибки = "Не записать номенклатуру: UUID = <" + UUID + ">" + ОписаниеОшибки();
					ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции
Функция БрендПоUUID(UUID, Наименование)
	
	БрендСсылка = Справочники.Изготовители.ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
	Если НЕ ЗначениеЗаполнено(БрендСсылка.ВерсияДанных) Тогда
		
		НовыйЭлемент = Справочники.Изготовители.СоздатьЭлемент();
		НовыйЭлемент.УстановитьСсылкуНового(БрендСсылка);
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.Записать();
		
	КонецЕсли;
	
	Возврат БрендСсылка;
	
КонецФункции
Процедура УстановитьРеквизитыЗаявки(СтруктураОбъекта, ОбъектXDTO)
	
	Документ = Документы.ЗаявкаПокупателя.ПолучитьСсылку(ОбъектXDTO.Ссылка);
	СтруктураОбъекта.Вставить("ИсходнаяЗаявка", Документ);
	СтруктураОбъекта.Вставить("IDSite", ОбъектXDTO.IDSite);
	Если ЗначениеЗаполнено(Документ.ВерсияДанных) Тогда
		СтруктураОбъекта.Вставить("СсылкаНаДокумент", Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(Документ));
		СтрокиПоIDSite = Документ.Товары.НайтиСтроки(Новый Структура("IDSite", ОбъектXDTO.IDSite));
		Если СтрокиПоIDSite.Количество() = 0 Тогда
			СтруктураОбъекта.Отказ = Истина;
			ТекстОшибки = "Не определена строка заявки по IDSite";
			ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
		ИначеЕсли СтрокиПоIDSite.Количество() > 1 Тогда
			СтруктураОбъекта.Отказ = Истина;
			ТекстОшибки = "Несколько строк с указанным IDSite";
			ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
		Иначе
			Строка = СтрокиПоIDSite[0];
			СтруктураОбъекта.Вставить("ИдентификаторСтрокиЗаявки", Строка.СтрокаЗаявки);
			СтруктураОбъекта.Вставить("НомерСтроки", Строка.НомерСтроки - 1);
			СтруктураОбъекта.Вставить("Сток", НЕ КроссЗаявка(Документ, Строка.ПрайсПоставщика));
			Если СтруктураОбъекта.ИдентификаторСтрокиЗаявки.Пустая() Тогда
				СтруктураОбъекта.Отказ = Истина;
				ТекстОшибки = "В строке не указан идентификатор строки заявки";
				ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтруктураОбъекта.Отказ = Истина;
		ТекстОшибки = "Не определен документ заявки";
		ДополнитьОшибку(СтруктураОбъекта.ТекстОшибки, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры
Функция ОтказыПоСтрокеЗаявки(СтрокаЗаявки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтказыПоЗаявкамОбороты.КоличествоОборот КАК Отказы
	                      |ИЗ
	                      |	РегистрНакопления.ОтказыПоЗаявкам.Обороты(, , , СтрокаЗаявки = &СтрокаЗаявки) КАК ОтказыПоЗаявкамОбороты");
	Запрос.УстановитьПараметр("СтрокаЗаявки", СтрокаЗаявки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Отказы, 0);
	
КонецФункции
Функция КроссЗаявка(Документ, ПрайсПоставщика)
	
	КроссЗаявка = Истина;
	Если Документ.ВидОперации <> Перечисления.ВидыОперацийЗаявкаПокупателя.ПополнениеСклада Тогда
		Если ПрайсПоставщика.Пустая() Тогда
			КроссЗаявка = Ложь;
		ИначеЕсли НЕ ПрайсПоставщика.Склад.Пустая() Тогда
			КроссЗаявка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КроссЗаявка;
	
КонецФункции
Функция ТипПоставки(ТипПоставкиСтрока)
	
	Если Нрег(ТипПоставкиСтрока) = "vmi" Тогда
		ТипПоставки = Перечисления.ТипПоставки.VMI;
	ИначеЕсли Нрег(ТипПоставкиСтрока) = "cross" Тогда
		ТипПоставки = Перечисления.ТипПоставки.Кросс;
	ИначеЕсли Нрег(ТипПоставкиСтрока) = "inventor" Тогда
		ТипПоставки = Перечисления.ТипПоставки.ПополнениеСклада;
	Иначе
		ТипПоставки = Перечисления.ТипПоставки.Сток;
	КонецЕсли;
	
	Возврат ТипПоставки;
	
КонецФункции
Функция Узел(Входящий = Истина) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ОбменПартКом83_Сайт_состояние_заявок.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.ОбменПартКом83_Сайт_состояние_заявок КАК ОбменПартКом83_Сайт_состояние_заявок
	                      |ГДЕ
	                      |	НЕ ОбменПартКом83_Сайт_состояние_заявок.ЭтотУзел
	                      |	И (&Входящий
	                      |				И ОбменПартКом83_Сайт_состояние_заявок.Входящий
	                      |			ИЛИ НЕ &Входящий
	                      |				И ОбменПартКом83_Сайт_состояние_заявок.Исходящий)");
	Запрос.УстановитьПараметр("Входящий", Входящий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, ПланыОбмена.ОбменПартКом83_Сайт_состояние_заявок.ПустаяСсылка());
	
КонецФункции
Функция ИсточникЗаявки(Source)
	
	Если Source = "inventor" Тогда
		ИсточникЗаявки = Перечисления.ИсточникиЗаявок.Inventor;
	ИначеЕсли Source = "4RM" Тогда
		ИсточникЗаявки = Перечисления.ИсточникиЗаявок._4RM;
	ИначеЕсли Source = "webservice" Тогда
		ИсточникЗаявки = Перечисления.ИсточникиЗаявок.Webservice;
	ИначеЕсли Source = "4orders" Тогда
		ИсточникЗаявки = Перечисления.ИсточникиЗаявок._4orders;
	Иначе
		ИсточникЗаявки = Перечисления.ИсточникиЗаявок.СайтОпт;
	КонецЕсли;
	
	Возврат ИсточникЗаявки;
	
КонецФункции
#КонецОбласти