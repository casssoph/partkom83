Функция ПолучитьМетаданные() Экспорт
	
	Возврат Метаданные.ПланыОбмена.ОбменПартКом83_Сайт;
	
КонецФункции
Функция URIПространстваИмен() Экспорт
	Возврат "http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema";	
КонецФункции
Функция ИмяТипаПоОбъектуМетаданных(вхОбъектМетаданных) 
	Возврат	ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(вхОбъектМетаданных) + "." + вхОбъектМетаданных.Имя;
КонецФункции
Функция ИмяТипаПоСсылке(вхСсылкаНаОбъект)
	
	Результат = "";
	лОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(вхСсылкаНаОбъект));
	Если (лОбъектМетаданных <> Неопределено) тогда
		Результат = ИмяТипаПоОбъектуМетаданных(лОбъектМетаданных);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции
Функция ТипПоСсылке(вхСсылкаНаОбъект) Экспорт
	
	Результат = Неопределено;
	лИмяТипа = ИмяТипаПоСсылке(вхСсылкаНаОбъект);
	Если НЕ ПустаяСтрока(лИмяТипа) тогда
		Результат = ФабрикаXDTO.Тип(URIПространстваИмен(), лИмяТипа);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции
Функция ТипПоОбъектуМетаданных(вхОбъектМетаданных) Экспорт
	
	Результат = Неопределено;
	лИмяТипа = ИмяТипаПоОбъектуМетаданных(вхОбъектМетаданных);
	Если НЕ ПустаяСтрока(лИмяТипа) тогда
		Результат = ФабрикаXDTO.Тип(URIПространстваИмен(), лИмяТипа);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции
Функция ЗарегистрироватьВОбмен(РегистрируемыйОбъект) Экспорт
	
	ИсходящийУзел = ИсходящийУзел();
	Если ЗначениеЗаполнено(ИсходящийУзел) Тогда
		Если ТипЗнч(РегистрируемыйОбъект) = Тип("Массив") Тогда
			Для Каждого Объект Из РегистрируемыйОбъект Цикл
				ЗарегистрироватьОбъект(ИсходящийУзел, Объект);
			КонецЦикла;
		Иначе
			ЗарегистрироватьОбъект(ИсходящийУзел, РегистрируемыйОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
Процедура ЗарегистрироватьОбъект(Узел, РегистрируемыйОбъект)
	//Семенов И.П. 31.01.2019 XX-1768(
	//ПланыОбмена.ЗарегистрироватьИзменения(Узел, РегистрируемыйОбъект);
	ОбменДаннымиКлиентСервер.ЗарегистрироватьИзмененияВПланеОбмена(Узел, РегистрируемыйОбъект);
	//)Семенов И.П.
КонецПроцедуры
Функция ИсходящийУзел() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОбменПартКом83_Сайт.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменПартКом83_Сайт КАК ОбменПартКом83_Сайт
	|ГДЕ
	|	НЕ ОбменПартКом83_Сайт.ЭтотУзел
	|	И ОбменПартКом83_Сайт.Исходящий");
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции
Функция ВходящийУзел() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОбменПартКом83_Сайт.Ссылка
	|ИЗ
	|	ПланОбмена.ОбменПартКом83_Сайт КАК ОбменПартКом83_Сайт
	|ГДЕ
	|	НЕ ОбменПартКом83_Сайт.ЭтотУзел
	|	И ОбменПартКом83_Сайт.Входящий");
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции
Функция XDTOСообщение(Сообщение, СообщениеЗапаковано) Экспорт
	
	Если СообщениеЗапаковано Тогда
		ТекстСообщения = ОбменДаннымиСервер.РаспаковатьСообщениеОбмена(Сообщение);
	Иначе
		ТекстСообщения = Сообщение;
	КонецЕсли;
	
	//29.11.18 Строганов Роман > XX-953 Добавить проверку XML при получении с сайта
	Если Константы.УдалятьНедопустимыеСимволыФайлаОбмена.Получить() = Истина Тогда
		ТекстСообщения = ОбменДаннымиСервер.ЗаменитьНедопустимыеСимволыXML(ТекстСообщения);
	КонецЕсли;
	//29.11.18 Строганов Роман < XX-953 Добавить проверку XML при получении с сайта 
	
	ТипСообщениеОбмена = ФабрикаXDTO.Тип(URIПространстваИмен(), "СообщениеОбмена");
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТекстСообщения);
	
	Возврат ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ, ТипСообщениеОбмена);
	
КонецФункции


Процедура ОбработатьСообщениеССайта() Экспорт
	
	Настройка = Справочники.НастройкиРеквизитовДляОбменов.Обмен_1С_Сайт;
	АдресВебСервиса = ?(ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза(), Настройка.СтрокаДляРабочейБазы, Настройка.СтрокаДляТестовойБазы);
	
	Получатель = ЭтотУзел();
	Исходящий = ИсходящийУзел();
	Входящий = ВходящийУзел();
	
	Определения = Новый WSОпределения(АдресВебСервиса);
	Прокси = Новый WSПрокси(Определения, Определения.Сервисы[0].URIПространстваИмен, Определения.Сервисы[0].Имя, Определения.Сервисы[0].ТочкиПодключения[0].Имя);
	ОтветСервера = Прокси.GetExchangeMessage("ОбменПартКом83_Сайт", Получатель.ИдентификаторУзла, Входящий.НомерПринятого);
	
	ДанныеХДТО = XDTOСообщение(ОтветСервера, Истина);
	
	НомерСообщения = Формат(ДанныеХДТО.НомерСообщения, "ЧГ=");
	НомерПринятого = Мин(ДанныеХДТО.НомерПринятого, Исходящий.НомерОтправленного);
	ПланыОбмена.УдалитьРегистрациюИзменений(Исходящий, НомерПринятого);
	ОтметитьПринятыеСообщенияЭкспрессДоставки(НомерПринятого);
	
	ТекстШаблона = ПолучитьОбщийМакет("ЗаголовокСообщенияОбмена").ПолучитьТекст();
	ТекстПустышки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, "ОбменПартКом83_Сайт", Получатель.Код, Входящий.Код, НомерСообщения, "0");
	Пустышка = Новый ЧтениеXML;
	Пустышка.УстановитьСтроку(ТекстПустышки);
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(Пустышка, ДопустимыйНомерСообщения.Больший);
	
	Попытка
		СписокОбъектов = ДанныеХДТО.Объекты.ПолучитьСписок("Объект");
		Если СписокОбъектов.Количество() > 0 Тогда
			ОбменДаннымиВызовСервера.ЗарегистрироватьСообщениеВИсторииОбменаССайтом(Исходящий.ИдентификаторУзла, Получатель.ИдентификаторУзла, ОтветСервера, НомерСообщения);
			ЗагрузитьСообщениеОбмена(СписокОбъектов, Исходящий, НомерСообщения);
		КонецЕсли;
		ЧтениеСообщения.ЗакончитьЧтение();
	Исключение
		ЧтениеСообщения.ПрерватьЧтение();
		ВызватьИсключение ;
	КонецПопытки;
	
КонецПроцедуры
Процедура ЗагрузитьСообщениеОбмена(СписокОбъектов, ИсходящийУзел, НомерСообщения) Экспорт
	
	Для Каждого Объект Из СписокОбъектов цикл
		ИмяТипа = Объект.Тип().Имя;
		Если ЭтоЭкспрессДоставка(ИмяТипа) Тогда
			ЗагрузитьЭлементЭкспрессДоставки(Объект, НомерСообщения);
		Иначе
			МенеджерОбъекта =  Вычислить(ИмяТипа);
			МенеджерОбъекта.ЗагрузитьЭлемент(Объект, ИсходящийУзел);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьУдаленияЭлементов(вхМассивСсылок, вхОбъектМетаданных) Экспорт
	
	лИмяТипа = ИмяТипаПоОбъектуМетаданных(вхОбъектМетаданных);
	лТипУдалениеОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен(), "УдалениеОбъекта");
	
	Результат = Новый Массив;
	
	Для Каждого лСсылкаНаОбъект Из вхМассивСсылок цикл
		
		лОбъект = ФабрикаXDTO.Создать(лТипУдалениеОбъекта);
		лОбъект.ТипОбъекта = лИмяТипа;
		лОбъект.Ссылка = лСсылкаНаОбъект.УникальныйИдентификатор();
		Результат.Добавить(лОбъект);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
Функция ВыгрузитьСообщениеОбмена(вхИдентификаторУзлаОбмена, ReceivedNo, НеСжиматьСообщение = Ложь) Экспорт
	
	лОтправитель = ЭтотУзел();
	лИсходящий = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(ПолучитьМетаданные(), вхИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(лИсходящий) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	
	лВходящий = ОбменДаннымиКлиентСервер.ПолучитьВходящийУзелОбмена(ПолучитьМетаданные(), вхИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(лВходящий) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	лНомерПринятого = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(лВходящий, "НомерПринятого");
	
	лТипОбъекты = ФабрикаXDTO.Тип(URIПространстваИмен(), "Объекты");
	лТипСообщениеОбмена = ФабрикаXDTO.Тип(URIПространстваИмен(), "СообщениеОбмена");
	
	РегистрироватьВыгрузкуОбъектов = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт","Регистрировать выгрузку объектов", Ложь);
	лПустышка = Новый ЗаписьXML;
	лПустышка.УстановитьСтроку("utf-8");
	лЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	лЗаписьСообщения.НачатьЗапись(лПустышка, лИсходящий);
	Попытка
		
		лСообщениеОбмена = ФабрикаXDTO.Создать(лТипСообщениеОбмена);
		лСообщениеОбмена.ПланОбмена = "ОбменПартКом83_Сайт";
		лСообщениеОбмена.Отправитель = лОтправитель.ИдентификаторУзла;
		лСообщениеОбмена.Получатель = вхИдентификаторУзлаОбмена;
		лСообщениеОбмена.НомерСообщения = лЗаписьСообщения.НомерСообщения;
		лСообщениеОбмена.НомерПринятого = лНомерПринятого;
		
		лОбъекты = ФабрикаXDTO.Создать(лТипОбъекты);
		лСписокОбъектов = лОбъекты.ПолучитьСписок("Объект");
		ОбъектыРегистрации = Новый Массив;
		
		лВыгружаемыеОбъекты = ОбменДаннымиКлиентСервер.ВыбратьПакетИзмененийДляУзлаОбменаНовое(лИсходящий, лСообщениеОбмена.НомерСообщения, 1000);
		Для Каждого лЭлементСоответствия Из лВыгружаемыеОбъекты цикл
			лМенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лЭлементСоответствия.Ключ);
			лВыгруженныеОбъекты = лМенеджерОбъекта.ВыгрузитьЭлементы(лЭлементСоответствия.Значение, ПолучитьМетаданные(), ОбъектыРегистрации);
			Для Каждого лВыгруженныйОбъект Из лВыгруженныеОбъекты цикл
				лСписокОбъектов.Добавить(лВыгруженныйОбъект);
			КонецЦикла;
		КонецЦикла;
		
		//Добавляем данные экспресс-доставки
		м = ВидыКодманд1с();
		
		ВыгружаемыеОбъекты = ВыбратьИзмененияЭкспрессДоставки(ReceivedNo);
		Пока ВыгружаемыеОбъекты.Следующий() Цикл
			
			инд = м.Найти(ВыгружаемыеОбъекты.operation_type);
			Если НЕ инд = Неопределено тогда
				// нашли
				Продолжить;
			КонецЕсли;
			
			ОбъектXDTO = ОбъектОтчетаЭкспрессДоставки(ВыгружаемыеОбъекты, URIПространстваИмен());
			лСписокОбъектов.Добавить(ОбъектXDTO);
			ОтметитьОтправленныеДанныеЭкспрессДоставки(ВыгружаемыеОбъекты, лЗаписьСообщения.НомерСообщения);
		КонецЦикла;
		
		РубильникВключен = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ВключитьВыгрузкуExpressDelivery1c", Ложь);
		Если РубильникВключен тогда
			ВыгружаемыеОбъекты_2 = ВыбратьИзмененияЭкспрессДоставки(ReceivedNo,Истина);
			Пока ВыгружаемыеОбъекты_2.Следующий() Цикл
				
				инд = м.Найти(ВыгружаемыеОбъекты_2.operation_type);
				Если инд = Неопределено тогда
					// НЕ нашли
					Продолжить;
				КонецЕсли;
				
				ОбъектXDTO = ОбъектОтчетаЭкспрессДоставки_2(ВыгружаемыеОбъекты_2, URIПространстваИмен());
				лСписокОбъектов.Добавить(ОбъектXDTO);
				ОтметитьОтправленныеДанныеЭкспрессДоставки(ВыгружаемыеОбъекты_2, лЗаписьСообщения.НомерСообщения);
			КонецЦикла;
		КонецЕсли;
		
		лСообщениеОбмена.Объекты = лОбъекты;
		ЕстьОбъектыОбмена = лСписокОбъектов.Количество() > 0;
		
		Если РегистрироватьВыгрузкуОбъектов Тогда
			DataExchangeModule.ОтметитьОтправкуОбъектов(ОбъектыРегистрации, Перечисления.ВидыОбменов.Обмен1C_Сайт, лЗаписьСообщения.НомерСообщения);
		КонецЕсли;
		
		//Увеличение счетчика сообщений//
		лЗаписьСообщения.ЗакончитьЗапись();
		
	Исключение
		лЗаписьСообщения.ПрерватьЗапись();
		ВызватьИсключение ;
	КонецПопытки;
	
	лЗаписьХМЛ = Новый ЗаписьXML;
	лЗаписьХМЛ.УстановитьСтроку("utf-8");
	лЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(лЗаписьХМЛ, лСообщениеОбмена);
	
	НесжатоеСообщение = лЗаписьХМЛ.Закрыть();
	УпакованноеСообщение = ОбщегоНазначенияВызовСервера.ЗапаковатьСообщение(НесжатоеСообщение);
	Если ЕстьОбъектыОбмена Тогда
		ОбменДаннымиВызовСервера.ЗарегистрироватьСообщениеВИсторииОбменаССайтом(лОтправитель.ИдентификаторУзла, вхИдентификаторУзлаОбмена, УпакованноеСообщение, ReceivedNo); 
	КонецЕсли;
	
	Возврат ?(НеСжиматьСообщение, НесжатоеСообщение, УпакованноеСообщение);
	
КонецФункции



//Экспресс доставка
#Область Загрузка
Процедура ЗагрузитьЭлементЭкспрессДоставки(ОбъектXDTO, НомерСообщенияВходящий) Экспорт
	
	ИмяКоманды = ОбъектXDTO.Тип().Имя;
	СтруктураОбъекта = СтруктураОбъекта(ИмяКоманды, ОбъектXDTO);
	СтруктураОтчета = Новый Структура("express_delivery_request_id,operation_type,Error,Description", СтруктураОбъекта.RequestID, СтруктураОбъекта.Команда, Ложь, "");
	
	Если		ИмяКоманды = "ExpressDelivery.Init" Тогда
		ЭкспрессДоставка_init(СтруктураОбъекта, СтруктураОтчета);
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.Add" Тогда
		ЭкспрессДоставка_add(СтруктураОбъекта, СтруктураОтчета);
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.DeletePart" Тогда
		ЭкспрессДоставка_delete_part(СтруктураОбъекта, СтруктураОтчета);
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.Cancel" Тогда
		ЭкспрессДоставка_cancel(СтруктураОбъекта, СтруктураОтчета);
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.LogistConfirm" Тогда
		ЭкспрессДоставка_logist_confirm(СтруктураОбъекта, СтруктураОтчета);
	КонецЕсли;
	
	ЗаписатьОтчетПоЗагрузке(СтруктураОтчета, НомерСообщенияВходящий);
	
КонецПроцедуры

#Область init
Процедура ЭкспрессДоставка_init(СтруктураОбъекта, СтруктураОтчета)
	
	КлючАлгоритма = "ПланОбмена_ОбменПартКом83_Сайт_МодульМенеджера_ЭкспрессДоставка_init";
	Если АлгоритмыСуществуетЗамена(КлючАлгоритма) Тогда
		АлгоритмыВыполнитьЗаменуПроцедуры(КлючАлгоритма);
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////	
	
	СтруктураОтчета.Вставить("invoice_number", "");
	СтруктураОтчета.Вставить("items", Новый Массив);
	
	УстановитьДатыОплаты(СтруктураОбъекта);
	
	ЗагружаемыеОбъекты = ЗагружаемыеОбъектыРеализации(СтруктураОбъекта);
	КонтрольСуществующихДокументов(СтруктураОбъекта, СтруктураОтчета);
	//Временый затык проблемы эд 
	Если СтруктураОтчета.Error тогда 
		СтруктураОтчета.Error = Ложь;
		Возврат
	КонецЕсли;	
	
	РеализацияБылаСформирована = Ложь;
	
	Если НЕ СтруктураОтчета.Error Тогда
		МассивРТУ = Новый Массив;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			Для Каждого СтруктураРеализации Из ЗагружаемыеОбъекты Цикл
				Если НЕ СтруктураОтчета.Error Тогда
					ЗагрузитьРеализацию(СтруктураРеализации, СтруктураОтчета, РеализацияБылаСформирована);
					МассивРТУ.Добавить(СтруктураРеализации.НоворожденнаяРТУ);
				КонецЕсли;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			МассивРТУ.Очистить();
		КонецПопытки;
	КонецЕсли;
		
		Для каждого лРТУ из МассивРТУ цикл
			
		    ОписаниеОшибки = "";
			Попытка
				Документ = лРТУ.ПолучитьОбъект();
				Документ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ПринудительноеПроведениеДОкумента(ОписаниеОшибки,Документ,СтруктураОтчета,"ЭкспрессДоставка_init()");	
			КонецЕсли;
			
			Если НЕ СтруктураОтчета.error Тогда
				Ответ = SMSоповещение.РассчитатьУслугуЭД(Документ.express_delivery_request_id);
				Если НЕ Ответ Тогда
					СтруктураОтчета.Вставить("Error",Истина);	
				КонецЕсли;
			КонецЕсли;
			Если НЕ СтруктураОтчета.error Тогда
				//Мегалогист++
				ЗагрузитьМаршрутноеЗадание(Документ,СтруктураОтчета);
				//Мегалогист--
			КонецЕсли;
			
		КонецЦикла;
			
	
	СтруктураОтчета.error = СтруктураОтчета.error ИЛИ НЕ РеализацияБылаСформирована;
	
КонецПроцедуры

Процедура КонтрольСуществующихДокументов(СтруктураОбъекта, СтруктураОтчета)
	
	СписокДокументов = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Реализация.Ссылка,
	|	Реализация.Склад,
	|	Реализация.Номер,
	|	Реализация.Дата,
	|	Реализация.Склад.Код КАК КодСклада
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|ГДЕ
	|	Реализация.express_delivery_request_id = &RequestID
	|	И НЕ Реализация.ПометкаУдаления");
	Запрос.УстановитьПараметр("RequestID", СтруктураОбъекта.RequestID);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДополнитьСтроку(СписокДокументов, СокрЛП(Выборка.Номер), ",");
		СтруктураОтчета.Error = Истина;
	КонецЦикла;
	
	Если СтруктураОтчета.Error Тогда
		ТекстОшибки = "Документ (RequestID: " + СтруктураОбъекта.RequestID + ") уже существует. Документы - " + СписокДокументов;
		СтруктураОтчета.Description = ТекстОшибки;
		СтруктураОтчета.invoice_number = СписокДокументов;
		ДобавитьВОтчетОшибочныеСтроки(СтруктураОтчета.items, СтруктураОбъекта.Товары);
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗагрузитьРеализацию(СтруктураДокумента, СтруктураОтчета, РеализацияБылаСформирована)
	
	// ЛНА
	КлючАлгоритма = "ПланОбмена_ОбменПартКом83_Сайт_МодульМенеджера_ЗагрузитьРеализацию";
	Если АлгоритмыСуществуетЗамена(КлючАлгоритма) Тогда
		АлгоритмыВыполнитьЗаменуПроцедуры(КлючАлгоритма);
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////
	
	БылоДобавлениеСтроки = Ложь;
	
	Документ = ДокументРеализация(СтруктураДокумента);
	ЗаполнитьРеквизитыДокументаРеализации(Документ, СтруктураДокумента);
	Документ.Комментарий = "Экспресс-доставка, дата оплаты:" + СтруктураДокумента.ДатаОплаты;
	ДобавитьТоварыВРеализацию(Документ, СтруктураДокумента, СтруктураОтчета, БылоДобавлениеСтроки, Документ.Дата);
	
	Документ.Записать(РежимЗаписиДокумента.Запись);
	
	РеализацияБылаСформирована = Истина;
	ДополнитьСтроку(СтруктураОтчета.invoice_number, Документ.Номер, ",");
	СтруктураДокумента.вставить("НоворожденнаяРТУ",Документ.Ссылка);
	
	//ОписаниеОшибки = "";
	//Если НЕ СтруктураОтчета.Error И БылоДобавлениеСтроки Тогда
	//	Попытка
	//		Документ.Записать(РежимЗаписиДокумента.Проведение);
	//		РеализацияБылаСформирована = Истина;
	//		ДополнитьСтроку(СтруктураОтчета.invoice_number, Документ.Номер, ",");
	//	Исключение
	//		ОписаниеОшибки = ОписаниеОшибки();
	//		//ЖурналРегистрации
	//		ЗаписьЖурналаРегистрации("ОшибкаЗагрузкиРеализации",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	//		//ВызватьИсключение ОписаниеОшибки;
	//		Документ.Записать(РежимЗаписиДокумента.Запись);
	//		//СтруктураОтчета.Error = Истина;
	//		//ДополнитьСтроку(СтруктураОтчета.Description, ОписаниеОшибки, ";");
	//	КонецПопытки;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
	//	ПринудительноеПроведениеДОкумента(ОписаниеОшибки,Документ,СтруктураОтчета,"ЗагрузитьРеализацию()");	
	//КонецЕсли;
	//
	//Если НЕ СтруктураОтчета.Error И БылоДобавлениеСтроки Тогда
	//	Ответ = SMSоповещение.РассчитатьУслугуЭД(Документ.express_delivery_request_id);
	//	Если НЕ Ответ Тогда
	//		СтруктураОтчета.Вставить("Error",Истина);	
	//	КонецЕсли;
	//КонецЕсли;
	//
	////Мегалогист++
	//Если НЕ СтруктураОтчета.Error И БылоДобавлениеСтроки Тогда
	//	ЗагрузитьМаршрутноеЗадание(Документ,СтруктураОтчета);
	//КонецЕсли;
	////Мегалогист--
	
КонецПроцедуры
Процедура ЗаполнитьРеквизитыДокументаРеализации(Документ, СтруктураДокумента)
	
	Документ.ПометкаУдаления = Ложь;
	Документ.Дата = ТекущаяДата();//СтруктураДокумента.Дата;
	Документ.ДополнительныеСвойства.Вставить("ОперативноеПроведение", Истина);
	
	Документ.express_delivery_request_id = СтруктураДокумента.RequestID;
	ЗаполнитьЗначенияСвойств(Документ, СтруктураДокумента, "Контрагент,Склад,ДатаДоставки");
	Документ.ДоговорКонтрагента = Документ.Контрагент.ОсновнойДоговорКонтрагента;
	Документ.Организация = Документ.ДоговорКонтрагента.Организация;
	Документ.Филиал = Документ.Склад.Филиал;
	Документ.Статус = Перечисления.СтатусыРеализацииЭкспрессДоставки.Оформляется;
	Документ.АдресДоставки = СтруктураДокумента.АдресДоставки;
	Документ.ТорговаяТочка = СтруктураДокумента.ТорговаяТочка;
	Документ.Менеджер = СтруктураДокумента.Менеджер;
	Документ.ТипДоставки = Справочники.ТипыДоставки.ЭкспрессДоставка;
	Документ.флНеВыгружатьВТопЛог = Истина;
	Документ.Источник = Перечисления.ИсточникиРеализаций.Сайт;
	Документ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Документ.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка;
	Документ.ВалютаДокумента = Константы.ВалютаРубль.Получить();
	Документ.КурсВзаиморасчетов = 1;
	Документ.УчитыватьНДС = УчетНДСПовтИсп.УчитыватьНДСПоВариантуУчета(Документ.Организация.ВариантУчетаНДС, Документ.ДоговорКонтрагента.ВидОплаты);//Документ.Организация.УчитыватьНДС;
	Документ.СуммаВключаетНДС = Истина;
	Документ.КратностьВзаиморасчетов = 1;
	
	// + Пушкин 20181114 XX-1345
	Документ.ВремяДоставкиС = СтруктураДокумента.ВремяДоставкиС;
	Документ.ВремяДоставкиПо = СтруктураДокумента.ВремяДоставкиПо;
	// - Пушкин 20181114 XX-1345
	// + Пушкин 20181204 XX-1445
	Документ.Телефон = СтруктураДокумента.Телефон;
	Документ.Заказчик = СтруктураДокумента.Заказчик;
	// - Пушкин 20181204 XX-1445
	
	// + Пушкин 20181213 XX-1532
	Попытка
		лInit = Неопределено;
		Если СтруктураДокумента.Свойство("ЭД_init",лInit) тогда
			Если лInit = Истина тогда
				
				Документ.ЭД_init = Истина;
				
				ПараметрыКА = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Документ.Контрагент,"СтоимостьУслугиЭДрубли,СтоимостьУслугиЭДбонусы,СуммаБесплатнойЭД");
				
				Документ.ЭД_ВидОплаты = ?(ЗначениеЗаполнено(СтруктураДокумента.ЭД_ВидОплаты),СтруктураДокумента.ЭД_ВидОплаты,Перечисления.ВидыОплатыЭД.Рубли);
				Документ.ЭД_СуммаБесплатнойЭД = ?(ЗначениеЗаполнено(СтруктураДокумента.ЭД_СуммаБесплатнойЭД),СтруктураДокумента.ЭД_СуммаБесплатнойЭД,ПараметрыКА.СуммаБесплатнойЭД);
				Документ.ЭД_СтоимостьУслугиЭДрубли = ?(ЗначениеЗаполнено(СтруктураДокумента.ЭД_СтоимостьУслугиЭДрубли),СтруктураДокумента.ЭД_СтоимостьУслугиЭДрубли,ПараметрыКА.СтоимостьУслугиЭДрубли);
				Документ.ЭД_СтоимостьУслугиЭДбонусы = ?(ЗначениеЗаполнено(СтруктураДокумента.ЭД_СтоимостьУслугиЭДбонусы),СтруктураДокумента.ЭД_СтоимостьУслугиЭДбонусы,ПараметрыКА.СтоимостьУслугиЭДбонусы);
				
			ИначеЕсли лInit = Ложь тогда
				
				Документ.ЭД_init = Ложь;
				
				ПараметрыКорня = НайтиКорень(СтруктураДокумента.RequestID);
				Если ПараметрыКорня.Количество() > 0 тогда
					Документ.ЭД_СуммаБесплатнойЭД = ПараметрыКорня[0].ЭД_СуммаБесплатнойЭД;
					Документ.ЭД_СтоимостьУслугиЭДрубли = ПараметрыКорня[0].ЭД_СтоимостьУслугиЭДрубли;
					Документ.ЭД_СтоимостьУслугиЭДбонусы = ПараметрыКорня[0].ЭД_СтоимостьУслугиЭДбонусы;
					Документ.ЭД_ВидОплаты = ПараметрыКорня[0].ЭД_ВидОплаты;
					Документ.АдресДоставки = ПараметрыКорня[0].АдресДоставки;
				Иначе
					
					ПараметрыКА = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Документ.Контрагент,"СтоимостьУслугиЭДрубли,СтоимостьУслугиЭДбонусы,СуммаБесплатнойЭД");
					
					Документ.ЭД_ВидОплаты = ?(ЗначениеЗаполнено(СтруктураДокумента.ЭД_ВидОплаты),СтруктураДокумента.ЭД_ВидОплаты,Перечисления.ВидыОплатыЭД.Рубли);
					Документ.ЭД_СуммаБесплатнойЭД = ?(ЗначениеЗаполнено(СтруктураДокумента.ЭД_СуммаБесплатнойЭД),СтруктураДокумента.ЭД_СуммаБесплатнойЭД,ПараметрыКА.СуммаБесплатнойЭД);
					Документ.ЭД_СтоимостьУслугиЭДрубли = ?(ЗначениеЗаполнено(СтруктураДокумента.ЭД_СтоимостьУслугиЭДрубли),СтруктураДокумента.ЭД_СтоимостьУслугиЭДрубли,ПараметрыКА.СтоимостьУслугиЭДрубли);
					Документ.ЭД_СтоимостьУслугиЭДбонусы = ?(ЗначениеЗаполнено(СтруктураДокумента.ЭД_СтоимостьУслугиЭДбонусы),СтруктураДокумента.ЭД_СтоимостьУслугиЭДбонусы,ПараметрыКА.СтоимостьУслугиЭДбонусы);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	// - Пушкин 20181213 XX-1532
	
КонецПроцедуры

Функция НайтиКорень(пар_id)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Реализация.Ссылка КАК Корень,
	|	Реализация.ЭД_СуммаБесплатнойЭД,
	|	Реализация.ЭД_СтоимостьУслугиЭДрубли,
	|	Реализация.ЭД_СтоимостьУслугиЭДбонусы,
	|	Реализация.ЭД_ВидОплаты,
	|	Реализация.АдресДоставки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|ГДЕ
	|	Реализация.express_delivery_request_id = &RequestID
	|	И Реализация.ЭД_init = Истина");
	Запрос.УстановитьПараметр("RequestID", пар_id);
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка;
	
КонецФункции


Процедура ДобавитьТоварыВРеализацию(Документ, СтруктураДокумента, СтруктураОтчета, БылоДобавление, ПериодОстатков)
	
	ИспользоватьЦенуСоСкидкой = Ценообразование.ИспользоватьЦенуСоСкидкойВДокументах();	
	
	РубильникВключен = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ВключитьНовоеЗаполнениеТчТоварыЭД", Ложь);
	
	Если РубильникВключен тогда
		
		Для Каждого Строка Из СтруктураДокумента.Товары Цикл
			
			Если Документ.Товары.Найти(Строка.ИдентификаторСтрокиЗаявки, "СтрокаЗаявки") = Неопределено Тогда
				
				НоваяСтрока = Документ.Товары.Добавить();
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.Качество = Справочники.Качество.Новый;
				НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
				НоваяСтрока.СтрокаЗаявки = Строка.ИдентификаторСтрокиЗаявки;
				НоваяСтрока.IDSite = Строка.IDSite;
				НоваяСтрока.ОрганизацияПриVMI = Строка.ОрганизацияПриVMI;
				НоваяСтрока.Коэффициент = 1;
				НоваяСтрока.КлючСвязи = НоваяСтрока.НомерСтроки;
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.КоличествоПлан = Строка.Количество;
				НоваяСтрока.Цена = Строка.Цена;
				НоваяСтрока.ЦенаСоСкидкой = ?(ИспользоватьЦенуСоСкидкой, Строка.Цена, 0); 
				НоваяСтрока.Сумма = Строка.Цена * Строка.Количество;
				НоваяСтрока.СтавкаНДС = ?(Документ.СуммаВключаетНДС, НоваяСтрока.Номенклатура.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Документ);
				
				БылоДобавление = Истина;
				ОтчетПоЗагрузкеСтроки = Новый Структура("motion_id,quantity_site,quantity,error,description", Строка.IDSite, Строка.Количество, Строка.Количество, Строка.error, Строка.description);
				СтруктураОтчета.items.Добавить(ОтчетПоЗагрузкеСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ИдентификаторыСтрокЗаявок = СтруктураДокумента.Товары.ВыгрузитьКолонку("ИдентификаторСтрокиЗаявки");
		СвободныеОстатки = СвободныеОстаткиНоменклатуры(ПериодОстатков, Документ.Склад, СтруктураДокумента.Товары.ВыгрузитьКолонку("Номенклатура"), ИдентификаторыСтрокЗаявок);
		РезервыПоIDSite = РезервыПоIDSite(СтруктураДокумента, ПериодОстатков, Документ.Склад);
		
		Для Каждого Строка Из СтруктураДокумента.Товары Цикл
			
			ОтчетПоЗагрузкеСтроки = Новый Структура("motion_id,quantity_site,quantity,error,description", Строка.IDSite, Строка.Количество, Строка.Количество, Строка.error, Строка.description);
			
			Если НЕ ОтчетПоЗагрузкеСтроки.error Тогда
				
				ДанныеРезерва = РезервыПоIDSite[Строка.ИдентификаторСтрокиЗаявки];
				Если ДанныеРезерва = Неопределено Тогда
					ОтчетПоЗагрузкеСтроки.error = Истина;
					ОтчетПоЗагрузкеСтроки.description = "Нет остатков по резервам";
				ИначеЕсли НЕ ДанныеРезерва.ДостаточноРезерва Тогда
					ОтчетПоЗагрузкеСтроки.error = Истина;
					ОтчетПоЗагрузкеСтроки.description = ДанныеРезерва.ТекстОшибки;
				Иначе
					Если Документ.Товары.Найти(Строка.ИдентификаторСтрокиЗаявки, "СтрокаЗаявки") = Неопределено Тогда
						Количество = КоличествоСУчетомОстатков(Строка.Количество, Строка.Номенклатура, СвободныеОстатки);
						Если Количество > 0 Тогда
							
							НоваяСтрока = Документ.Товары.Добавить();
							НоваяСтрока.Номенклатура = Строка.Номенклатура;
							НоваяСтрока.Качество = Справочники.Качество.Новый;
							НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
							НоваяСтрока.СтрокаЗаявки = Строка.ИдентификаторСтрокиЗаявки;
							НоваяСтрока.IDSite = Строка.IDSite;
							НоваяСтрока.ОрганизацияПриVMI = Строка.ОрганизацияПриVMI;
							НоваяСтрока.Коэффициент = 1;
							НоваяСтрока.КлючСвязи = НоваяСтрока.НомерСтроки;
							НоваяСтрока.Количество = Количество;
							НоваяСтрока.КоличествоПлан = Количество;
							НоваяСтрока.Цена = Строка.Цена;
							НоваяСтрока.ЦенаСоСкидкой = ?(ИспользоватьЦенуСоСкидкой, Строка.Цена, 0); 
							НоваяСтрока.Сумма = Строка.Цена * Количество;
							НоваяСтрока.СтавкаНДС = ?(Документ.СуммаВключаетНДС, НоваяСтрока.Номенклатура.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Документ);
							
							БылоДобавление = Истина;
							
						КонецЕсли;
						ОтчетПоЗагрузкеСтроки.quantity = Количество;
						ОтчетПоЗагрузкеСтроки.error = ?(Количество = 0, 1, 0);
						ОтчетПоЗагрузкеСтроки.description = ?(Количество = Строка.Количество, "", "Недостаточно остатков на складах");
					Иначе
						ОтчетПоЗагрузкеСтроки.error = Истина;
						ОтчетПоЗагрузкеСтроки.description = "Строка уже существует";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураОтчета.items.Добавить(ОтчетПоЗагрузкеСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ДобавитьВОтчетОшибочныеСтроки(items, ТаблицаТоваров, description = "")
	
	Для Каждого Товар Из ТаблицаТоваров Цикл
		Структура = Новый Структура("motion_id,quantity,quantity_site,error,description", Товар.ИдентификаторСтрокиЗаявки.IDSite, Товар.Количество, Товар.Количество, Истина, description);
		items.Добавить(Структура);
	КонецЦикла;
	
КонецПроцедуры
Процедура УстановитьДатыОплаты(СтруктураОбъекта)
	
	Договор = СтруктураОбъекта.Контрагент.ОсновнойДоговорКонтрагента;
	ОбщаяДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(СтруктураОбъекта.Дата, 1, Перечисления.ВидыРасчетаДней.ПоКалендарнымДням, Истина);
	ОбщаяДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(ОбщаяДатаОплаты, Договор.ДопустимоеЧислоДнейЗадолженности, Договор.ВидРасчетаДней, Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОсобыеУсловияОтсрочки.Изготовитель,
	|	ОсобыеУсловияОтсрочки.ТипПоставки,
	|	ОсобыеУсловияОтсрочки.ДопустимоеЧислоДнейЗадолженности,
	|	ОсобыеУсловияОтсрочки.ВидРасчетаДней
	|ИЗ
	|	РегистрСведений.ОсобыеУсловияОтсрочки КАК ОсобыеУсловияОтсрочки
	|ГДЕ
	|	ОсобыеУсловияОтсрочки.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И ОсобыеУсловияОтсрочки.ДатаОкончания >= &ДатаОкончания");
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	Запрос.УстановитьПараметр("ДатаОкончания", СтруктураОбъекта.Дата);
	ОсобыеУсловия = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из СтруктураОбъекта.Товары Цикл
		
		ДнейДоставкиДоДомашнегоСклада = Строка.ИдентификаторСтрокиЗаявки.ДнейДоставкиДоДомашнегоСклада;
		ДопустимоеЧислоДнейЗадолженности = 0;
		ВидРасчетаДней = 0;
		СтрокиОсобыхУсловий = ОсобыеУсловия.НайтиСтроки(Новый Структура("Изготовитель,ТипПоставки", Строка.Номенклатура.Изготовитель, Строка.ИдентификаторСтрокиЗаявки.ТипПоставки));
		Если СтрокиОсобыхУсловий.Количество() > 0 Тогда
			ДопустимоеЧислоДнейЗадолженности = СтрокиОсобыхУсловий[0].ДопустимоеЧислоДнейЗадолженности;
			ВидРасчетаДней = СтрокиОсобыхУсловий[0].ВидРасчетаДней;
		КонецЕсли;
		
		ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(ОбщаяДатаОплаты, ДнейДоставкиДоДомашнегоСклада, Перечисления.ВидыРасчетаДней.ПоБанковскимДням, Истина);
		Строка.ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(ДатаОплаты, ДопустимоеЧислоДнейЗадолженности, ВидРасчетаДней, Договор.ОплатаВЛюбойДень);
		
	КонецЦикла;
	
КонецПроцедуры

//Мегалогист++
Функция ДокументМаршрутноеЗадание(Реализация)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МегаЛогист_МаршрутноеЗадание.Ссылка
	|ИЗ
	|	Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
	|ГДЕ
	|	МегаЛогист_МаршрутноеЗадание.express_delivery_request_id = &express_delivery_request_id");
	Запрос.УстановитьПараметр("express_delivery_request_id", Реализация.express_delivery_request_id);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Документ = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Документ = Документы.МегаЛогист_МаршрутноеЗадание.СоздатьДокумент();
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции
Процедура ЗагрузитьМаршрутноеЗадание(Реализация,СтруктураОтчета)
	
	МЗ = ДокументМаршрутноеЗадание(Реализация);
	//МЗ=Документы.МегаЛогист_МаршрутноеЗадание.СоздатьДокумент();
	
	МЗ.Дата=ТекущаяДата();
	ЗаполнитьЗначенияСвойств(МЗ, Реализация, "ДатаДоставки,Контрагент,express_delivery_request_id,Организация,Филиал,МаршрутДоставки");
	НоваяСтрока=МЗ.ДокументыРеализации.Добавить();
	НоваяСтрока.ДокументСсылка=Реализация.Ссылка;
	//МЗ.ЗаказПокупателя=Реализация.Ссылка;
	МЗ.Статус = Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.КРаспределению;
	МЗ.Ответственный  = ПараметрыСеанса.ТекущийПользователь;
	МЗ.ТипЗадания=Справочники.МегаЛогист_ТипыМаршрутныхЗаданий.ДоставкаДоКлиента;
	МЗ.ЭкспрессДоставка=Истина;
	Если НЕ ЗначениеЗаполнено(МЗ.ВремяДоставкиС) тогда
		МЗ.ВремяДоставкиС=ПроверкаРазницыВремени.ПолучитьРегиональноеВремя(Реализация.ВремяДоставкиС,Реализация.Склад);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(МЗ.ВремяДоставкиПо) тогда
		МЗ.ВремяДоставкиПо=ПроверкаРазницыВремени.ПолучитьРегиональноеВремя(Реализация.ВремяДоставкиПо,Реализация.Склад);
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(МЗ.АдресДоставки) тогда
		МЗ.АдресДоставки=Реализация.АдресДоставки;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Попытка
		МЗ.Записать(РежимЗаписиДокумента.Проведение);
		Мегалогист_Партком.ЭкспрессДоставка_add(МЗ.Ссылка);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		МЗ.Записать(РежимЗаписиДокумента.Запись);
		//СтруктураОтчета.Error = Истина;
		//ДополнитьСтроку(СтруктураОтчета.Description, ОписаниеОшибки, ";");
	КонецПопытки;	
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПринудительноеПроведениеДОкумента(ОписаниеОшибки,МЗ,СтруктураОтчета,"ЗагрузитьМаршрутноеЗадание()");	
	КонецЕсли;
	
КонецПроцедуры
//Мегалогист--

#Область КонтрольОстатковИРезервов
Функция СвободныеОстаткиНоменклатуры(Период, Склад, СписокНоменклатуры, ИдентификаторыСтрокЗаявок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&Период,
	|				Номенклатура В (&СписокНоменклатуры)
	|					И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РезервыТоваровОстатки.Номенклатура,
	|		-РезервыТоваровОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.РезервыТоваров.Остатки(
	|				&Период,
	|				Номенклатура В (&СписокНоменклатуры)
	|					И Склад = &Склад
	|					И НЕ СтрокаЗаявки В (&ИдентификаторыСтрокЗаявок)) КАК РезервыТоваровОстатки) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура");
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ИдентификаторыСтрокЗаявок", ИдентификаторыСтрокЗаявок);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция РезервыПоIDSite(СтруктураДокумента, Период, Склад)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВнешняяТаблица.ИдентификаторСтрокиЗаявки КАК Справочник.ИдентификаторыСтрокЗаявок) КАК ИдентификаторСтрокиЗаявки,
	|	ВЫРАЗИТЬ(ВнешняяТаблица.Количество КАК ЧИСЛО(10, 3)) КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ВнешняяТаблица КАК ВнешняяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтрокиЗаявки,
	|	Товары.Количество,
	|	РезервыТоваровОстатки.КоличествоОстаток КАК КоличествоРезерв,
	|	Товары.Количество <= РезервыТоваровОстатки.КоличествоОстаток КАК ДостаточноРезерва
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваров.Остатки(
	|				&Период,
	|				Склад = &Склад
	|					И СтрокаЗаявки В
	|						(ВЫБРАТЬ
	|							Товары.ИдентификаторСтрокиЗаявки
	|						ИЗ
	|							Товары КАК Товары)) КАК РезервыТоваровОстатки
	|		ПО Товары.ИдентификаторСтрокиЗаявки = РезервыТоваровОстатки.СтрокаЗаявки");
	Запрос.УстановитьПараметр("ВнешняяТаблица", СтруктураДокумента.Товары);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Склад", Склад);
	Соответствие = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("ДостаточноРезерва,ТекстОшибки", Выборка.ДостаточноРезерва, "");
		Если НЕ Структура.ДостаточноРезерва Тогда
			Структура.ТекстОшибки = "Недостаточно резерва. Нужно:" + Выборка.Количество + ", имеется:" + Выборка.КоличествоРезерв;
		КонецЕсли;
		Соответствие.Вставить(Выборка.ИдентификаторСтрокиЗаявки, Структура);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции
Функция КоличествоСУчетомОстатков(quantity_site, Номенклатура, СвободныеОстатки)
	
	ОстатокКРаспределению = quantity_site;
	СтрокиОстатков = СвободныеОстатки.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	
	Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
		
		КоличествоСписание = Мин(ОстатокКРаспределению, СтрокаОстатков.Количество);
		
		Если КоличествоСписание > 0 Тогда
			ОстатокКРаспределению = ОстатокКРаспределению - КоличествоСписание;
			СтрокаОстатков.Количество = СтрокаОстатков.Количество - КоличествоСписание;
		КонецЕсли;
		
		Если ОстатокКРаспределению = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат quantity_site - ОстатокКРаспределению;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область add
Процедура ЭкспрессДоставка_add(СтруктураОбъекта, СтруктураОтчета)
	КлючАлгоритма = "ПланОбмена_ОбменПартКом83_Сайт_МодульМенеджера_ЭкспрессДоставка_add";
	Если АлгоритмыСуществуетЗамена(КлючАлгоритма) Тогда
		АлгоритмыВыполнитьЗаменуПроцедуры(КлючАлгоритма);
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////	
	
	СтруктураОтчета.Вставить("items", Новый Массив);
	УстановитьРеквизитыСуществующейРеализации(СтруктураОбъекта, СтруктураОтчета);
	БылоДобавление = Ложь;
	
	УстановитьДатыОплаты(СтруктураОбъекта);
		
	ЗагружаемыеОбъекты = ЗагружаемыеОбъектыРеализации(СтруктураОбъекта);
	
	Если НЕ СтруктураОтчета.Error Тогда
		МассивРТУ = Новый Массив;
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			Для Каждого СтруктураРеализации Из ЗагружаемыеОбъекты Цикл
				Если НЕ СтруктураОтчета.Error Тогда
					ЗагрузитьРеализацию(СтруктураРеализации, СтруктураОтчета, БылоДобавление);
					МассивРТУ.Добавить(СтруктураРеализации.НоворожденнаяРТУ);
				КонецЕсли;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			МассивРТУ.Очистить();
		КонецПопытки;
	КонецЕсли;
		
		Для каждого лРТУ из МассивРТУ цикл
			
		    ОписаниеОшибки = "";
			Попытка
				Документ = лРТУ.ПолучитьОбъект();
				Документ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ПринудительноеПроведениеДОкумента(ОписаниеОшибки,Документ,СтруктураОтчета,"ЭкспрессДоставка_add()");	
			КонецЕсли;
			
			Если НЕ СтруктураОтчета.error Тогда
				Ответ = SMSоповещение.РассчитатьУслугуЭД(Документ.express_delivery_request_id);
				Если НЕ Ответ Тогда
					СтруктураОтчета.Вставить("Error",Истина);	
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ СтруктураОтчета.error Тогда
				//Мегалогист++
				ЗагрузитьМаршрутноеЗадание(Документ,СтруктураОтчета);
				//Мегалогист--
			КонецЕсли;
			
		КонецЦикла;
		
	
	
	
	
	СтруктураОтчета.Error = СтруктураОтчета.Error ИЛИ НЕ БылоДобавление;
	
КонецПроцедуры
#КонецОбласти

#Область delete_part
Процедура ЭкспрессДоставка_delete_part(СтруктураОбъекта, СтруктураОтчета)
	
	СтруктураОтчета.Вставить("invoice_number", "");
	СтруктураОтчета.Вставить("Source", СтруктураОбъекта.Source);
	СтруктураОтчета.Вставить("items", Новый Массив);
	
	ЗагружаемыеОбъекты = ЗагружаемыеОбъекты_delete_part(СтруктураОбъекта);
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Для Каждого СтруктураРеализации Из ЗагружаемыеОбъекты Цикл
		Документ = СтруктураРеализации.Документ.ПолучитьОбъект();
		
		УдаляемыеСтроки = Новый Массив;
		Для Каждого Строка Из СтруктураРеализации.Товары Цикл
			УдаляемыеСтроки.Добавить(Документ.Товары[Строка.НомерСтроки-1]);
		КонецЦикла;
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			Документ.Товары.Удалить(Строка);
		КонецЦикла;
		
		Документ.ПометкаУдаления = Документ.Товары.Количество() = 0;
		
		Попытка
			Документ.Записать(?(Документ.ПометкаУдаления, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Проведение));
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			СтруктураОтчета.Error = Истина;
			ДополнитьСтроку(СтруктураОтчета.Description, ОписаниеОшибки, ";");
		КонецПопытки;
		
	КонецЦикла;
	
	Если СтруктураОтчета.error Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	СформироватьОтчет_detele_part(СтруктураОбъекта, СтруктураОтчета);
	
КонецПроцедуры
Функция ЗагружаемыеОбъекты_delete_part(СтруктураОбъекта)
	
	МассивОбъектов = Новый Массив;
	УдаляемыеДокументы = Новый Массив;
	ЗагружаемыеSiteID = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Документ,
	|	РеализацияТоваровУслугТовары.НомерСтроки,
	|	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК ИдентификаторСтрокиЗаявки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.express_delivery_request_id = &RequestID
	|	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
	|	И РеализацияТоваровУслугТовары.СтрокаЗаявки В(&ИдентификаторыСтрокЗаявок)
	|ИТОГИ ПО
	|	Документ");
	Запрос.УстановитьПараметр("RequestID", СтруктураОбъекта.RequestID);
	Запрос.УстановитьПараметр("ИдентификаторыСтрокЗаявок", СтруктураОбъекта.Товары.ВыгрузитьКолонку("ИдентификаторСтрокиЗаявки"));
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		Структура = Новый Структура;
		Структура.Вставить("Документ", ВыборкаПоДокументам.Документ);
		ТаблицаТовары = НоваяТаблицаЗначений("НомерСтроки,ИдентификаторСтрокиЗаявки");
		ВыборкаПоСтрокам = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(), ВыборкаПоСтрокам);
			ЗагружаемыеSiteID.Добавить(ВыборкаПоСтрокам.ИдентификаторСтрокиЗаявки);
		КонецЦикла;
		Структура.Вставить("Товары", ТаблицаТовары);
		Структура.Вставить("УдаленыВсеСтроки", ТаблицаТовары.Количество() = ВыборкаПоДокументам.Документ.Товары.Количество());
		
		Если Структура.УдаленыВсеСтроки Тогда
			УдаляемыеДокументы.Добавить(ВыборкаПоДокументам.Документ);
		КонецЕсли;
		
		МассивОбъектов.Добавить(Структура);
	КонецЦикла;
	
	СтруктураОбъекта.Вставить("УдаляемыеДокументы", УдаляемыеДокументы);
	СтруктураОбъекта.Вставить("ЗагружаемыеSiteID", ЗагружаемыеSiteID);
	
	Возврат МассивОбъектов;
	
КонецФункции
Процедура СформироватьОтчет_detele_part(СтруктураОбъекта, СтруктураОтчета)
	
	ОбщаяОшибка = Истина;
	
	//Отмечаем удаление строк
	Для Каждого Строка Из СтруктураОбъекта.Товары Цикл
		СтрокаНеУдалена = СтруктураОбъекта.ЗагружаемыеSiteID.Найти(Строка.ИдентификаторСтрокиЗаявки) = Неопределено;
		description = ?(СтрокаНеУдалена, "Актуальная строка не найдена", "");
		Структура = Новый Структура("motion_id,error,description,",Строка.IDSite, СтрокаНеУдалена, description);
		СтруктураОтчета.items.Добавить(Структура);
		ОбщаяОшибка = ?(СтрокаНеУдалена, ОбщаяОшибка, Ложь);
	КонецЦикла;
	СтруктураОтчета.error = СтруктураОтчета.error ИЛИ ОбщаяОшибка;
	
	//Формируем актуальный список документов реализации
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Номер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.express_delivery_request_id = &express_delivery_request_id");
	Запрос.УстановитьПараметр("express_delivery_request_id", СтруктураОбъекта.RequestID);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДополнитьСтроку(СтруктураОтчета.invoice_number, Выборка.Номер, ",");
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область cancel
Процедура ЭкспрессДоставка_cancel(СтруктураОбъекта, СтруктураОтчета)
	
	СтруктураОтчета.Вставить("Source", СтруктураОбъекта.Source);
	
	ЗагружаемыеОбъекты = ЗагружаемыеОбъекты_cancel(СтруктураОбъекта, СтруктураОтчета);
	Пока ЗагружаемыеОбъекты.Следующий() Цикл
		Документ = ЗагружаемыеОбъекты.Документ.ПолучитьОбъект();
		Документ.ПометкаУдаления = Истина;
		Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
		//Мегалогист++
		Документ=ДокументМаршрутноеЗадание(Документ);
		Документ.ПометкаУдаления = Истина;
		Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//Мегалогист--
		
	КонецЦикла;
	
КонецПроцедуры
Функция ЗагружаемыеОбъекты_cancel(СтруктураОбъекта, СтруктураОтчета)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.express_delivery_request_id = &RequestID
	|	И РеализацияТоваровУслуг.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацииЭкспрессДоставки.ВыписанаРеализация)");
	Запрос.УстановитьПараметр("RequestID", СтруктураОбъекта.RequestID);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураОтчета.error = Истина;
		СтруктураОтчета.description = "Нет актуальных реализаций с указанным ReqiestID";
	КонецЕсли;
	
	Возврат Результат.Выбрать();
	
КонецФункции
#КонецОбласти

#Область confirm
Процедура ЭкспрессДоставка_logist_confirm(СтруктураОбъекта, СтруктураОтчета)
	
	РубильникВключен = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ВключитьНовыйАлгоритмПересчетаУслугиВExpressDeliveryLogistConfirm", Ложь);
	
	УстановитьСтоимостьДоставки = Истина;
	ВыборкаПоСкладам = ЗагружаемыеОбъекты_confirm(СтруктураОбъекта, СтруктураОтчета);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Пока ВыборкаПоСкладам.Следующий() Цикл
		Документ = Документы.СлужебноеЗадание.СоздатьДокумент();
		ЗаполнитьДокументСлужебноеЗадание(Документ, СтруктураОбъекта, ВыборкаПоСкладам);
		ВыборкаПоРеализациям = ВыборкаПоСкладам.Выбрать();
		Пока ВыборкаПоРеализациям.Следующий() Цикл
			НоваяСтрока = Документ.Покупатели.Добавить();
			НоваяСтрока.Реализация = ВыборкаПоРеализациям.ДокументРеализации;
			НоваяСтрока.ОрганизацияОплаты = НоваяСтрока.Реализация.Организация;
			НоваяСтрока.ТорговаяТочка = НоваяСтрока.Реализация.ТорговаяТочка;
			НоваяСтрока.Регион = НоваяСтрока.ТорговаяТочка.Регион;
			ПровестиДокументРеализацииКакПодтвержденный(ВыборкаПоРеализациям.ДокументРеализации, УстановитьСтоимостьДоставки, СтруктураОбъекта, СтруктураОтчета, РубильникВключен);
		КонецЦикла;
		
		Если НЕ СтруктураОтчета.Error Тогда
			Документ.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Если РубильникВключен И НЕ СтруктураОтчета.Error тогда
		Ответ = SMSоповещение.РассчитатьУслугуЭД(СтруктураОбъекта.RequestID, Ложь);
		Если НЕ Ответ Тогда
			СтруктураОтчета.Вставить("Error",Истина);	
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОтчета.Error Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры
Функция ЗагружаемыеОбъекты_confirm(СтруктураОбъекта, СтруктураОтчета)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализации,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.ТорговаяТочка КАК ТорговаяТочка,
	|	РеализацияТоваровУслуг.Филиал КАК Филиал,
	|	РеализацияТоваровУслуг.Дата КАК ДатаОтгрузки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.express_delivery_request_id = &RequestID
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДокументРеализации),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ТорговаяТочка),
	|	МАКСИМУМ(Филиал),
	|	МИНИМУМ(ДатаОтгрузки)
	|ПО
	|	Склад");
	Запрос.УстановитьПараметр("RequestID", СтруктураОбъекта.RequestID);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтруктураОтчета.error = Истина;
		СтруктураОтчета.description = "Нет актуальных реализаций с указанным ReqiestID";
	КонецЕсли;
	
	Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции
Процедура ЗаполнитьДокументСлужебноеЗадание(Документ, СтруктураОбъекта, ВыборкаПоСкладам)
	
	Документ.Дата = ТекущаяДата();
	Документ.Авто = Истина;
	Документ.express_delivery_request_id = СтруктураОбъекта.RequestID;
	Документ.Организация = ВыборкаПоСкладам.Организация;
	Документ.Филиал = ВыборкаПоСкладам.Филиал;
	Документ.Склад = ВыборкаПоСкладам.Склад;
	Документ.МаршрутДоставки = СтруктураОбъекта.МаршрутДоставки;
	Документ.Водитель = СтруктураОбъекта.Водитель;
	Документ.ТранспортнаяКомпания = Документ.Водитель.ТранспортнаяКомпания;
	Документ.ТипДоставки = Справочники.ТипыДоставки.ЭкспрессДоставка;
	Документ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Документ.ДатаОтгрузки = ВыборкаПоСкладам.ДатаОтгрузки;
	Документ.ВремяОтгрузки =  ВремяОтгрузкиПоМаршруту(Документ.МаршрутДоставки, Документ.ДатаОтгрузки);
	Документ.ДатаСдачиЗадания = ДатаСдачиЗадания(Документ.ДатаОтгрузки, Документ.МаршрутДоставки);
	
КонецПроцедуры

Процедура ПровестиДокументРеализацииКакПодтвержденный(ДокументРеализации, УстановитьСтоимостьДоставки, СтруктураОбъекта, СтруктураОтчета,РубильникВключен)
	
	Документ = ДокументРеализации.ПолучитьОбъект();
	Документ.Статус = Перечисления.СтатусыРеализацииЭкспрессДоставки.ВыписанаРеализация;
	Документ.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка;
	Документ.МаршрутДоставки = СтруктураОбъекта.МаршрутДоставки;
	Документ.флНеВыгружатьВТопЛог = Ложь;
	
	Если РубильникВключен тогда
		
		Документ.ЭД_ВидОплаты = СтруктураОбъекта.ЭД_ВидОплаты;
		
		Если СтруктураОбъекта.ЭД_ВидОплаты = Перечисления.ВидыОплатыЭД.Рубли тогда
			Документ.ЭД_СтоимостьУслугиЭДрубли = СтруктураОбъекта.СтоимостьДоставки;
		ИначеЕсли СтруктураОбъекта.ЭД_ВидОплаты = Перечисления.ВидыОплатыЭД.Бонусы тогда
			Документ.ЭД_СтоимостьУслугиЭДбонусы = СтруктураОбъекта.СтоимостьДоставки;
		ИначеЕсли СтруктураОбъекта.ЭД_ВидОплаты = Перечисления.ВидыОплатыЭД.ВЦенеТовара тогда
			Документ.ЭД_СтоимостьУслугиЭДрубли = СтруктураОбъекта.СтоимостьДоставки;
		КонецЕсли;
		
	Иначе
		Если УстановитьСтоимостьДоставки Тогда //И СтруктураОбъекта.СтоимостьДоставки > 0 Тогда
			ИзменитьСтоимостьДоставки(Документ, СтруктураОбъекта.СтоимостьДоставки);
			УстановитьСтоимостьДоставки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Попытка
		Документ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Документ.Записать(РежимЗаписиДокумента.Запись);
		//СтруктураОтчета.Error = Истина;
		//ДополнитьСтроку(СтруктураОтчета.Description, ОписаниеОшибки, ";");
	КонецПопытки;	
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПринудительноеПроведениеДОкумента(ОписаниеОшибки,Документ,СтруктураОтчета,"ПровестиДокументРеализацииКакПодтвержденный()");	
	КонецЕсли;
	
КонецПроцедуры
Процедура ИзменитьСтоимостьДоставки(Документ, СтоимостьДоставки)
	
	Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента) И Документ.ДоговорКонтрагента.ВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		ИмяПараметраУслугаДоставки = "Услуга экспресс-доставки (Безнал)";
	Иначе
		ИмяПараметраУслугаДоставки = "Услуга экспресс-доставки (Нал)";
	КонецЕсли;
	УслугаДоставки = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", ИмяПараметраУслугаДоставки, Константы.УслугаЭкспрессДоставка.Получить());
	
	СтрокаСтоимостиДоставки = Документ.Услуги.Найти(УслугаДоставки, "Номенклатура");
	
	Если СтоимостьДоставки = 0 И СтрокаСтоимостиДоставки <> Неопределено Тогда
		Документ.Услуги.Удалить(СтрокаСтоимостиДоставки);
	ИначеЕсли СтоимостьДоставки <> 0 Тогда
		Если СтрокаСтоимостиДоставки = Неопределено Тогда
			СтрокаСтоимостиДоставки = Документ.Услуги.Добавить();
			СтрокаСтоимостиДоставки.Номенклатура = УслугаДоставки;
			СтрокаСтоимостиДоставки.Содержание = УслугаДоставки.НаименованиеПолное;
			СтрокаСтоимостиДоставки.Количество = 1;
			СтрокаСтоимостиДоставки.СтавкаНДС = УслугаДоставки.СтавкаНДС;
		КонецЕсли;
		Если СтрокаСтоимостиДоставки.Цена <> СтоимостьДоставки Тогда
			СтрокаСтоимостиДоставки.Цена = СтоимостьДоставки;
			СтрокаСтоимостиДоставки.Сумма = СтоимостьДоставки;
		КонецЕсли;
		СтрокаСтоимостиДоставки.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаСтоимостиДоставки.Сумма, Документ.УчитыватьНДС, Документ.СуммаВключаетНДС, СтрокаСтоимостиДоставки.СтавкаНДС);
	КонецЕсли;			
	
КонецПроцедуры

#КонецОбласти

#Область ПриведениеТипов
Функция СтруктураОбъекта(ИмяКоманды, Объект)
	
	Структура = Новый Структура;
	Структура.Вставить("Команда", ИмяКоманды);
	Структура.Вставить("RequestID", Объект.express_delivery_request_id);
	Структура.Вставить("Отказ", Ложь);
	Структура.Вставить("ТекстОшибки", "");
	Если		ИмяКоманды = "ExpressDelivery.Init" Тогда
		Структура.Вставить("Контрагент", КонтрагентПоЛогину(Объект.login));
		Структура.Вставить("ТорговаяТочка", ТорговаяТочкаКонтрагента(Структура.Контрагент));
		Структура.Вставить("Менеджер", МенеджерТорговойТочки(Структура.ТорговаяТочка));
		Структура.Вставить("Дата", Объект.date_created);
		Структура.Вставить("ДатаДоставки", Объект.delivery_date);
		// + Пушкин 20181114 XX-1345
		Структура.Вставить("ВремяДоставкиС", Объект.date_statement);
		Структура.Вставить("ВремяДоставкиПо", Объект.date_arrival);
		// - Пушкин 20181114 XX-1345
		Структура.Вставить("Телефон", Объект.client_phone);
		// + Пушкин 20181204 XX-1445
		Структура.Вставить("Заказчик", Объект.client_name);
		// - Пушкин 20181204 XX-1445
		// + Пушкин 20181212 XX-1532
		Структура.Вставить("ЭД_init", Истина);
		Структура.Вставить("ЭД_ВидОплаты", Неопределено);
		Структура.Вставить("ЭД_СуммаБесплатнойЭД", Неопределено);
		Структура.Вставить("ЭД_СтоимостьУслугиЭДрубли", Неопределено);
		Структура.Вставить("ЭД_СтоимостьУслугиЭДбонусы", Неопределено);
		
		Если Объект.type_cost = 1 тогда
			Структура.Вставить("ЭД_ВидОплаты", Перечисления.ВидыОплатыЭД.Рубли);
			Если Объект.delivery_cost > 0 тогда
				Структура.Вставить("ЭД_СтоимостьУслугиЭДрубли", Объект.delivery_cost);
			КонецЕсли;
		ИначеЕсли Объект.type_cost = 2 тогда
			Структура.Вставить("ЭД_ВидОплаты", Перечисления.ВидыОплатыЭД.Бонусы);
			Если Объект.delivery_cost > 0 тогда
				Структура.Вставить("ЭД_СтоимостьУслугиЭДбонусы", Объект.delivery_cost);
			КонецЕсли;
		ИначеЕсли Объект.type_cost = 3 тогда
			Структура.Вставить("ЭД_ВидОплаты", Перечисления.ВидыОплатыЭД.ВЦенеТовара);
			Если Объект.delivery_cost > 0 тогда
				Структура.Вставить("ЭД_СтоимостьУслугиЭДрубли", Объект.delivery_cost);
			КонецЕсли;
		КонецЕсли;
		
		// - Пушкин 20181212 XX-1532
		Структура.Вставить("АдресДоставки", Объект.delivery_address);
		Структура.Вставить("Товары", ТаблицаТоваров(Объект.items));
		
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.Add" Тогда
		Структура.Вставить("Товары", ТаблицаТоваров(Объект.items));
		// + Пушкин 20181206 XX-1445
		Структура.Вставить("Заказчик", Объект.client_name);
		Структура.Вставить("Телефон", Объект.client_phone);
		Структура.Вставить("ВремяДоставкиС", Объект.date_statement);
		Структура.Вставить("ВремяДоставкиПо", Объект.date_arrival);
		// - Пушкин 20181206 XX-1445
		// + Пушкин 20181212 XX-1532
		Структура.Вставить("ЭД_init", Ложь);
		Структура.Вставить("ЭД_ВидОплаты", Неопределено);
		Структура.Вставить("ЭД_СуммаБесплатнойЭД", Неопределено);
		Структура.Вставить("ЭД_СтоимостьУслугиЭДрубли", Неопределено);
		Структура.Вставить("ЭД_СтоимостьУслугиЭДбонусы", Неопределено);
		// - Пушкин 20181212 XX-1532
		
		Если Объект.type_cost = 1 тогда
			Структура.Вставить("ЭД_ВидОплаты", Перечисления.ВидыОплатыЭД.Рубли);
			Если Объект.delivery_cost > 0 тогда
				Структура.Вставить("ЭД_СтоимостьУслугиЭДрубли", Объект.delivery_cost);
			КонецЕсли;
		ИначеЕсли Объект.type_cost = 2 тогда
			Структура.Вставить("ЭД_ВидОплаты", Перечисления.ВидыОплатыЭД.Бонусы);
			Если Объект.delivery_cost > 0 тогда
				Структура.Вставить("ЭД_СтоимостьУслугиЭДбонусы", Объект.delivery_cost);
			КонецЕсли;
		ИначеЕсли Объект.type_cost = 3 тогда
			Структура.Вставить("ЭД_ВидОплаты", Перечисления.ВидыОплатыЭД.ВЦенеТовара);
			Если Объект.delivery_cost > 0 тогда
				Структура.Вставить("ЭД_СтоимостьУслугиЭДрубли", Объект.delivery_cost);
			КонецЕсли;
		КонецЕсли;
		
		Структура.Вставить("АдресДоставки", Неопределено);
		
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.DeletePart" Тогда
		Структура.Вставить("Source", Объект.source);
		Структура.Вставить("Товары", ТаблицаТоваров(Объект.items, Истина));
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.Cancel" Тогда
		Структура.Вставить("Source", Объект.source);
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.LogistConfirm" Тогда
		Структура.Вставить("МаршрутДоставки", МаршрутДоставкиПоКоду(Объект.route_code));
		Структура.Вставить("Водитель", ВодительПоUUID(Объект.driver_code));
		Структура.Вставить("СтоимостьДоставки", Объект.delivery_cost);
		
		Структура.Вставить("ЭД_ВидОплаты", Неопределено);
		Если Объект.type_cost = 1 тогда
			Структура.Вставить("ЭД_ВидОплаты", Перечисления.ВидыОплатыЭД.Рубли);
		ИначеЕсли Объект.type_cost = 2 тогда
			Структура.Вставить("ЭД_ВидОплаты", Перечисления.ВидыОплатыЭД.Бонусы);
		ИначеЕсли Объект.type_cost = 3 тогда
			Структура.Вставить("ЭД_ВидОплаты", Перечисления.ВидыОплатыЭД.ВЦенеТовара);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции
Функция КонтрагентПоЛогину(login)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	УчетныеЗаписиСайта.Владелец.Владелец КАК Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиСайта КАК УчетныеЗаписиСайта
	|ГДЕ
	|	УчетныеЗаписиСайта.Код = &login");
	Запрос.УстановитьПараметр("login", login);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
	
КонецФункции
Функция НоменклатураПоАртикулуИКодуИзготовителя(Строка, СтрокаОтчета)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул
	|	И Номенклатура.Изготовитель.КодСайта = &КодИзготовителя");
	Запрос.УстановитьПараметр("Артикул", Строка.number);
	Запрос.УстановитьПараметр("КодИзготовителя", Строка.maker_id);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Номенклатура = Выборка.Ссылка;
	Иначе
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаОтчета.error = Истина;
		СтрокаОтчета.description = "Не найдена номенклатура";
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции
Функция ИдентификаторСтрокиЗаявкиПоКоду(Строка, СтрокаОтчета)
	
	IDSite = Строка.motion_id;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИдентификаторыСтрокЗаявок.Ссылка
	|ИЗ
	|	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	|ГДЕ
	|	ИдентификаторыСтрокЗаявок.IDSite = &IDSite");
	Запрос.УстановитьПараметр("IDSite", IDSite);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Идентификатор = Выборка.Ссылка;
	Иначе
		Идентификатор = Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка();
		СтрокаОтчета.error = Истина;
		СтрокаОтчета.description = "Не найден IDSite";
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции
Функция СкладПоКодуСайта(Строка, СтрокаОтчета)
	
	КодСайта = Строка.store_placement;
	КодСтрокой = Формат(КодСайта, "ЧЦ=9; ЧВН=; ЧГ=");
	
	Склад = Справочники.Склады.НайтиПоКоду(КодСтрокой);
	Если Склад.Пустая() Тогда
		СтрокаОтчета.error = Истина;
		СтрокаОтчета.description = "Не определен склад";
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции
Функция МаршрутДоставкиПоКоду(Код)
	
	КодСтрокой = Формат(Код, "ЧЦ=9; ЧВН=; ЧГ=");
	Возврат Справочники.МаршрутыДоставки.НайтиПоКоду(КодСтрокой);
	
КонецФункции
Функция ВодительПоUUID(UUID)
	
	Возврат Справочники.Водители.ПолучитьСсылку(UUID);
	
КонецФункции
Функция ТаблицаТоваров(items, ЭтоУдаление = Ложь)
	
	Если ЭтоУдаление Тогда
		Таблица = НоваяТаблицаЗначений("ИдентификаторСтрокиЗаявки,IDSite,error,description");
	Иначе
		Таблица = НоваяТаблицаЗначений("Номенклатура,ИдентификаторСтрокиЗаявки,IDSite,Количество,Цена,Склад,ОрганизацияПриVMI,error,description,ДатаОплаты");
	КонецЕсли;
	
	Для Каждого Строка Из items.item Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.error = Ложь;
		НоваяСтрока.description = "";
		НоваяСтрока.IDSite = Строка.motion_id;
		НоваяСтрока.ИдентификаторСтрокиЗаявки = ИдентификаторСтрокиЗаявкиПоКоду(Строка, НоваяСтрока);
		Если НЕ ЭтоУдаление Тогда
			НоваяСтрока.Количество = Строка.quantity;
			НоваяСтрока.Цена = Строка.price;
			НоваяСтрока.Номенклатура = НоменклатураПоАртикулуИКодуИзготовителя(Строка, НоваяСтрока);
			НоваяСтрока.Склад = СкладПоКодуСайта(Строка, НоваяСтрока);
			Если НоваяСтрока.Склад.СкладVMI Тогда
				НоваяСтрока.ОрганизацияПриVMI = ОрганизацияПриVMI(НоваяСтрока.ИдентификаторСтрокиЗаявки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции
Функция ДокументРеализация(СтруктураДокумента)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Реализация.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|ГДЕ
	|	Реализация.express_delivery_request_id = &RequestID
	|	И Реализация.Склад = &Склад
	|	И Реализация.ДатаОплаты = &ДатаОплаты");
	Запрос.УстановитьПараметр("RequestID", СтруктураДокумента.RequestID);
	Запрос.УстановитьПараметр("Склад", СтруктураДокумента.Склад);
	Запрос.УстановитьПараметр("ДатаОплаты", СтруктураДокумента.ДатаОплаты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Документ = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Документ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции
Функция ОрганизацияПриVMI(ИдентификаторСтрокиЗаявки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Организация
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец В
	|			(ВЫБРАТЬ
	|				ИдентификаторыСтрокЗаявок.ПрайсПоставщика.Владелец.Владелец КАК Контрагент
	|			ИЗ
	|				Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	|			ГДЕ
	|				ИдентификаторыСтрокЗаявок.Ссылка = &ИдентификаторСтрокиЗаявки)
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ОтветХранение)");
	Запрос.УстановитьПараметр("ИдентификаторСтрокиЗаявки", ИдентификаторСтрокиЗаявки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Организация, Справочники.Организации.ПустаяСсылка());
	
КонецФункции
Функция ТорговаяТочкаКонтрагента(Контрагент)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТорговыеТочки.Ссылка КАК ТорговаяТочка
	|ИЗ
	|	Справочник.ТорговыеТочки КАК ТорговыеТочки
	|ГДЕ
	|	ТорговыеТочки.Владелец = &Контрагент
	|	И НЕ ТорговыеТочки.ПометкаУдаления");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ТорговаяТочка, Справочники.ТорговыеТочки.ПустаяСсылка());
	
КонецФункции
Функция ВремяОтгрузкиПоМаршруту(МаршрутДоставки, ДатаОтгрузки)
	
	Если ЗначениеЗаполнено(МаршрутДоставки) Тогда
		ДеньНедели = ДеньНедели(ДатаОтгрузки);
		Если ДеньНедели = 6 Тогда
			ВремяОтгрузки = МаршрутДоставки.ВремяОтгрузкиСуббота;
		ИначеЕсли ДеньНедели = 7 Тогда
			ВремяОтгрузки = МаршрутДоставки.ВремяОтгрузкиВоскресенье;
		Иначе
			ВремяОтгрузки = МаршрутДоставки.ВремяОтгрузкиБудни;
		КонецЕсли;
	Иначе
		ВремяОтгрузки = Неопределено;
	КонецЕсли;
	
	Возврат ВремяОтгрузки;
	
КонецФункции
Функция ДатаСдачиЗадания(ВремяОтгрузки, МаршрутДоставки)
	
	Если ЗначениеЗаполнено(МаршрутДоставки) Тогда
		ДатаСдачиЗадания = ВремяОтгрузки + МаршрутДоставки.КоличествоДнейДоставки*60*60*24;
	Иначе
		ДатаСдачиЗадания = ВремяОтгрузки + 1;
	КонецЕсли;
	
	Возврат ДатаСдачиЗадания;
	
КонецФункции
Функция МенеджерТорговойТочки(ТорговаяТочка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МенеджерыТорговыхТочекСрезПоследних.Менеджер
	|ИЗ
	|	РегистрСведений.МенеджерыТорговыхТочек.СрезПоследних КАК МенеджерыТорговыхТочекСрезПоследних
	|ГДЕ
	|	МенеджерыТорговыхТочекСрезПоследних.ТорговаяТочка = &ТорговаяТочка
	|	И МенеджерыТорговыхТочекСрезПоследних.ВидМенеджера = &ВидМенеджера");
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	Запрос.УстановитьПараметр("ВидМенеджера", Перечисления.ВидыМенеджеров.Продажи);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Менеджер, Справочники.Менеджеры.ПустаяСсылка());
	
КонецФункции
Процедура УстановитьРеквизитыСуществующейРеализации(Структура, СтруктураОтчета)
	
	СтруктураОтчета.Вставить("invoice_number", "");
	
	Структура.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Структура.Вставить("ТорговаяТочка", Справочники.ТорговыеТочки.ПустаяСсылка());
	Структура.Вставить("Менеджер", Справочники.Менеджеры.ПустаяСсылка());
	Структура.Вставить("ДатаДоставки", '00010101');
	Структура.Вставить("Дата", ТекущаяДата());
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.ТорговаяТочка,
	|	РеализацияТоваровУслуг.Менеджер,
	|	РеализацияТоваровУслуг.ДатаДоставки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.express_delivery_request_id = &express_delivery_request_id
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления");
	Запрос.УстановитьПараметр("express_delivery_request_id", Структура.RequestID);
	Результат = Запрос.Выполнить();
	РеализацияСуществует = НЕ Результат.Пустой();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДополнитьСтроку(СтруктураОтчета.invoice_number, Выборка.Номер, ",");
	КонецЦикла;
	
	Если РеализацияСуществует Тогда
		Структура.Вставить("Контрагент", Выборка.Контрагент);
		Структура.Вставить("ТорговаяТочка", Выборка.ТорговаяТочка);
		Структура.Вставить("Менеджер", Выборка.Менеджер);
		Структура.Вставить("ДатаДоставки", Выборка.ДатаДоставки);
	Иначе
		СтруктураОтчета.Error = Истина;
		СтруктураОтчета.Description = "Не существуют экспресс-доставки, доступной для добавления товаров";
	КонецЕсли;
	
КонецПроцедуры
Функция ЗагружаемыеОбъектыРеализации(СтруктураОбъекта)
	
	МассивОбъектов = Новый Массив;
	
	ВыборкаПоГруппировкам = СтруктураОбъекта.Товары.Скопировать(,"Склад,ДатаОплаты");
	ВыборкаПоГруппировкам.Свернуть("Склад,ДатаОплаты");
	Для Каждого Группировка Из ВыборкаПоГруппировкам Цикл
		// + Пушкин 20181114 XX-1345 
		НоваяСтруктураОбъекта = Новый Структура("RequestID,Контрагент,Дата,ДатаДоставки,ВремяДоставкиС,ВремяДоставкиПо,Телефон,Заказчик,ЭД_init,ЭД_ВидОплаты,ЭД_СуммаБесплатнойЭД,ЭД_СтоимостьУслугиЭДрубли,ЭД_СтоимостьУслугиЭДбонусы,АдресДоставки,ТорговаяТочка,Менеджер");
		//НоваяСтруктураОбъекта = Новый Структура("RequestID,Контрагент,Дата,ДатаДоставки,ВремяДоставкиС,ВремяДоставкиПо,Телефон,Заказчик,АдресДоставки,ТорговаяТочка,Менеджер");
		//НоваяСтруктураОбъекта = Новый Структура("RequestID,Контрагент,Дата,ДатаДоставки,Телефон,АдресДоставки,ТорговаяТочка,Менеджер");
		// - Пушкин 20181114 XX-1345
		ЗаполнитьЗначенияСвойств(НоваяСтруктураОбъекта, СтруктураОбъекта);
		НоваяСтруктураОбъекта.Вставить("Склад", Группировка.Склад);
		НоваяСтруктураОбъекта.Вставить("ДатаОплаты", Группировка.ДатаОплаты);
		
		ТаблицаТоваров = НоваяТаблицаЗначений("Номенклатура,IDSite,Цена,ОрганизацияПриVMI,error,description");
		ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтрокиЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
		ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		Для Каждого Строка Из СтруктураОбъекта.Товары.НайтиСтроки(Новый Структура("Склад,ДатаОплаты", Группировка.Склад, Группировка.ДатаОплаты)) Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), Строка);
		КонецЦикла;
		НоваяСтруктураОбъекта.Вставить("Товары", ТаблицаТоваров);
		
		МассивОбъектов.Добавить(НоваяСтруктураОбъекта);
	КонецЦикла;
	
	Возврат МассивОбъектов;
	
КонецФункции
#КонецОбласти

#Область Общее
Функция ЭтоЭкспрессДоставка(Имя) Экспорт
	
	Возврат Лев(Имя,16) = "ExpressDelivery.";
	
КонецФункции
Функция НоваяТаблицаЗначений(Колонки)
	
	Таблица = Новый ТаблицаЗначений;
	Структура = Новый Структура(Колонки);
	Для Каждого Колонка Из Структура Цикл
		Таблица.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции
Функция СкладыИзТоваров(ТаблицаТоваров)
	
	Таблица = ТаблицаТоваров.Скопировать(, "Склад");
	Таблица.Свернуть("Склад");
	
	Возврат Таблица.ВыгрузитьКолонку("Склад");
	
КонецФункции
Процедура ДополнитьСтроку(Строка, Подстрока, Разделитель)
	
	Строка = Строка + ?(Строка = "", "", Разделитель) + Подстрока;
	
КонецПроцедуры
Функция ОстаткиИРезервыДляРеализации()
КонецФункции


Процедура ПринудительноеПроведениеДОкумента(ОписаниеОшибки,Документ,СтруктураОтчета,МестоВозникновения)
	
	ОписаниеОбрабатываемойОшибки = "Конфликт блокировок при выполнении транзакции";
	
	Если СтрНайти(Врег(ОписаниеОшибки),Врег(ОписаниеОбрабатываемойОшибки)) = 0 тогда
		СтруктураОтчета.Error = Истина;
		ДополнитьСтроку(СтруктураОтчета.Description, ОписаниеОшибки, ";");
		Возврат;
	КонецЕсли;
	
	РубильникВключен = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ПринудительноеПроведениеРТУExpressDeliveryВключить", Ложь);
	
	Если НЕ РубильникВключен тогда
		СтруктураОтчета.Error = Истина;
		ДополнитьСтроку(СтруктураОтчета.Description, ОписаниеОшибки, ";");
		Возврат;
	КонецЕсли;
	
	МаксимальноеКоличествоПопытокЗаписатьДокумент = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ПринудительноеПроведениеРТУExpressDeliveryПопыток", 3);
	СчПопытокЗаписатьДокумент = 0;
	л_ОписаниеОшибки = "";
	Проведено = Ложь;
	
	Пока Не Проведено Цикл
		
		СчПопытокЗаписатьДокумент = СчПопытокЗаписатьДокумент + 1;
		Если СчПопытокЗаписатьДокумент > МаксимальноеКоличествоПопытокЗаписатьДокумент тогда
			Прервать;
		КонецЕсли;
		
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Проведение);
			Проведено = Истина;
		Исключение
			л_ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ Проведено тогда	
		
		// фиксируем факт сбоя
		КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
		Документ.Ссылка, 
		Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаССайтом_ЭД,
		ОписаниеОбрабатываемойОшибки + ": " + ОписаниеОшибки,
		,
		Истина,
		л_ОписаниеОшибки,
		"ОбменПартКом83_Сайт.МодульМенеджера." + МестоВозникновения);
		
		//пытаемся исправить последствия сбоя
		Попытка
			Документ.ОбменДанными.Загрузка = Истина;
			Документ.Проведен = Истина;
			Документ.Записать(РежимЗаписиДокумента.Запись);
			
			за = РегистрыСведений.ОтложеннаяОбработкаОбъектов.СоздатьМенеджерЗаписи();
			за.Объект = Документ.Ссылка;
			за.ДатаДокумента = Документ.Дата;
			за.Приоритет = 4;
			за.Записать(Истина);
			
		Исключение 
			
			КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
			Документ.Ссылка, 
			Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаССайтом_ЭД,
			"Ошибка отложенного проведения",
			,
			Истина,
			ОписаниеОшибки(),
			"ОбменПартКом83_Сайт.МодульМенеджера.ПринудительноеПроведениеДОкумента()");
			
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//Сохранение информации для отчета по загрузке данных
Процедура ЗаписатьОтчетПоЗагрузке(СтруктураОтчета, НомерСообщенияВходящий)
	
	Запись = РегистрыСведений.ЭкспрессДоставкаОбмен.СоздатьМенеджерЗаписи();
	Запись.Период = ТекущаяДата();
	Запись.express_delivery_request_id = СтруктураОтчета.express_delivery_request_id;
	Запись.operation_type = СтруктураОтчета.operation_type;
	Запись.Error = СтруктураОтчета.Error;
	Запись.Description = СтруктураОтчета.Description;
	Запись.НомерПакета_вх = НомерСообщенияВходящий;
	
	//Удалим, что бы не хранить лишние данные(есть в измерениях)
	СтруктураОтчета.Удалить("express_delivery_request_id");
	СтруктураОтчета.Удалить("operation_type");
	СтруктураОтчета.Удалить("Error");
	СтруктураОтчета.Удалить("Description");
	
	Запись.ДанныеПакета = ЗначениеВСтрокуВнутр(СтруктураОтчета);
	
	Запись.Записать();
	
КонецПроцедуры
#Область Выгрузка
Функция ВыгрузитьСообщениеОбменаЭкспрессДоставки(ИдентификаторУзлаОбмена) Экспорт
	
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_Сайт;
	URIПространстваИмен = "http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema";
	
	Отправитель = ПланыОбмена.ОбменПартКом83_Сайт.ЭтотУзел();
	Исходящий = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(МетаданныеПланаОбмена, ИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(Исходящий) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	
	Входящий = ОбменДаннымиКлиентСервер.ПолучитьВходящийУзелОбмена(МетаданныеПланаОбмена, ИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(Входящий) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	НомерПринятого = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Входящий, "НомерПринятого");
	
	ТипОбъекты = ФабрикаXDTO.Тип(URIПространстваИмен, "Объекты");
	ТипСообщениеОбмена = ФабрикаXDTO.Тип(URIПространстваИмен, "СообщениеОбмена");
	
	Пустышка = Новый ЗаписьXML;
	Пустышка.УстановитьСтроку("utf-8");
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(Пустышка, Исходящий);
	
	СообщениеОбмена = ФабрикаXDTO.Создать(ТипСообщениеОбмена);
	СообщениеОбмена.ПланОбмена = "ОбменПартКом83_Сайт";
	СообщениеОбмена.Отправитель = Отправитель.ИдентификаторУзла;
	СообщениеОбмена.Получатель = ИдентификаторУзлаОбмена;
	СообщениеОбмена.НомерСообщения = ЗаписьСообщения.НомерСообщения;
	СообщениеОбмена.НомерПринятого = НомерПринятого;
	
	Объекты = ФабрикаXDTO.Создать(ТипОбъекты);
	СписокОбъектов = Объекты.ПолучитьСписок("Объект");
	
	м = ВидыКодманд1с();
	
	ВыгружаемыеОбъекты = ВыбратьИзмененияЭкспрессДоставки(НомерПринятого);
	Пока ВыгружаемыеОбъекты.Следующий() Цикл
		
		инд = м.Найти(ВыгружаемыеОбъекты.operation_type);
		Если НЕ инд = Неопределено тогда
			// нашли
			Продолжить;
		КонецЕсли;
		
		ОбъектXDTO = ОбъектОтчетаЭкспрессДоставки(ВыгружаемыеОбъекты, URIПространстваИмен);
		СписокОбъектов.Добавить(ОбъектXDTO);
		ОтметитьОтправленныеДанныеЭкспрессДоставки(ВыгружаемыеОбъекты, ЗаписьСообщения.НомерСообщения);
	КонецЦикла;
	
	РубильникВключен = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ВключитьВыгрузкуExpressDelivery1c", Ложь);
	Если РубильникВключен тогда
		ВыгружаемыеОбъекты_2 = ВыбратьИзмененияЭкспрессДоставки(НомерПринятого,Истина);
		Пока ВыгружаемыеОбъекты_2.Следующий() Цикл
			
			инд = м.Найти(ВыгружаемыеОбъекты_2.operation_type);
			Если инд = Неопределено тогда
				// НЕ нашли
				Продолжить;
			КонецЕсли;
			
			ОбъектXDTO = ОбъектОтчетаЭкспрессДоставки_2(ВыгружаемыеОбъекты_2, URIПространстваИмен);
			СписокОбъектов.Добавить(ОбъектXDTO);
			ОтметитьОтправленныеДанныеЭкспрессДоставки(ВыгружаемыеОбъекты_2, ЗаписьСообщения.НомерСообщения);
		КонецЦикла;
	КонецЕсли;
	
	СообщениеОбмена.Объекты = Объекты;
	ЗаписьСообщения.ЗакончитьЗапись();
	
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("utf-8");
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьХМЛ, СообщениеОбмена);
	
	Возврат ЗаписьХМЛ.Закрыть();	
	
КонецФункции
Функция ВыбратьИзмененияЭкспрессДоставки(НомерПринятогоПакета, пар_1с8_web = Ложь)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЭкспрессДоставкаОбмен.Период,
	|	ЭкспрессДоставкаОбмен.express_delivery_request_id,
	|	ЭкспрессДоставкаОбмен.operation_type,
	|	ЭкспрессДоставкаОбмен.Error,
	|	ЭкспрессДоставкаОбмен.Description,
	|	ЭкспрессДоставкаОбмен.ДанныеПакета
	|ИЗ
	|	РегистрСведений.ЭкспрессДоставкаОбмен КАК ЭкспрессДоставкаОбмен
	|ГДЕ
	
	|	" + ?(пар_1с8_web,"","НЕ") + " ЭкспрессДоставкаОбмен.operation_type В (&ВидыКодманд1с)
	
	|	И (ЭкспрессДоставкаОбмен.НомерПакета_исх > &НомерПринятогоПакета
	|			ИЛИ ЭкспрессДоставкаОбмен.НомерПакета_исх = 0)
	|	И НЕ ЭкспрессДоставкаОбмен.ОбработаноСайтом
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭкспрессДоставкаОбмен.Период");
	Запрос.УстановитьПараметр("НомерПринятогоПакета", НомерПринятогоПакета);
	Запрос.УстановитьПараметр("ВидыКодманд1с",ВидыКодманд1с());
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
Функция ОбъектОтчетаЭкспрессДоставки(ВыгружаемыйОбъект, URIПространстваИмен)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен, "ExpressDelivery.Log");
	ТипСписок = ФабрикаXDTO.Тип(URIПространстваИмен, "ExpressDelivery.LogItems");
	ТипДетальнаяЗапись = ФабрикаXDTO.Тип(URIПространстваИмен, "ExpressDelivery.LogItem");
	
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ЗаполнитьЗначенияСвойств(ОбъектXDTO, ВыгружаемыйОбъект, "express_delivery_request_id,operation_type,Description");
	ОбъектXDTO.Error = ?(ВыгружаемыйОбъект.Error, 1, 0);
	
	ДанныеПакета = ЗначениеИзСтрокиВнутр(ВыгружаемыйОбъект.ДанныеПакета);
	Если		ОбъектXDTO.operation_type = "ExpressDelivery.Init" Тогда
		ОбъектXDTO.invoice_number = ДанныеПакета.invoice_number;
		ЗаполнитьДетальныеЗаписиXDTO(ОбъектXDTO, ДанныеПакета.items, ТипСписок, ТипДетальнаяЗапись)
	ИначеЕсли	ОбъектXDTO.operation_type = "ExpressDelivery.Add" Тогда
		ОбъектXDTO.invoice_number = ДанныеПакета.invoice_number;
		ЗаполнитьДетальныеЗаписиXDTO(ОбъектXDTO, ДанныеПакета.items, ТипСписок, ТипДетальнаяЗапись)
	ИначеЕсли	ОбъектXDTO.operation_type = "ExpressDelivery.DeletePart" Тогда
		ОбъектXDTO.Source = ДанныеПакета.Source;
		ОбъектXDTO.invoice_number = ДанныеПакета.invoice_number;
		ЗаполнитьДетальныеЗаписиXDTO(ОбъектXDTO, ДанныеПакета.items, ТипСписок, ТипДетальнаяЗапись)
	ИначеЕсли	ОбъектXDTO.operation_type = "ExpressDelivery.Cancel" Тогда
		ОбъектXDTO.Source = ДанныеПакета.Source;
	ИначеЕсли	ОбъектXDTO.operation_type = "ExpressDelivery.LogistConfirm" Тогда
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции
Функция ОбъектОтчетаЭкспрессДоставки_2(ВыгружаемыйОбъект, URIПространстваИмен)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен, ВыгружаемыйОбъект.operation_type);
	ТипСписок = ФабрикаXDTO.Тип(URIПространстваИмен, "ExpressDelivery.Items");
	ТипДетальнаяЗапись = ФабрикаXDTO.Тип(URIПространстваИмен, "ExpressDelivery.Item");
	
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъекта);    
	
	ЗаполнитьЗначенияСвойств(ОбъектXDTO, ВыгружаемыйОбъект, "express_delivery_request_id");
	
	
	
	Если		ВыгружаемыйОбъект.operation_type = ПолучитьКоманду1сЭД(1) Тогда
		
		ДанныеПакета = ЗначениеИзСтрокиВнутр(ВыгружаемыйОбъект.ДанныеПакета);
		
		ОбъектXDTO.type_cost = ДанныеПакета.type_cost;
		ОбъектXDTO.delivery_cost = ДанныеПакета.delivery_cost;
		ОбъектXDTO.invoice_number = ДанныеПакета.invoice_number;
		
	ИначеЕсли	ВыгружаемыйОбъект.operation_type = ПолучитьКоманду1сЭД(2) Тогда
		
	ИначеЕсли	ВыгружаемыйОбъект.operation_type = ПолучитьКоманду1сЭД(3) Тогда
		
		ДанныеПакета = ЗначениеИзСтрокиВнутр(ВыгружаемыйОбъект.ДанныеПакета);
		
		ОбъектXDTO.type_cost = ДанныеПакета.type_cost;
		ОбъектXDTO.delivery_cost = ДанныеПакета.delivery_cost;
		ОбъектXDTO.invoice_number = ДанныеПакета.invoice_number;
		
		ГруппаXTDO = ФабрикаXDTO.Создать(ТипСписок);
		СписокXDTO = ГруппаXTDO.ПолучитьСписок("item");
		
		тчТовары = ПолучитьДанныеПоЭД_Товары(ВыгружаемыйОбъект.express_delivery_request_id);
		Для каждого ДанныеСтроки из тчТовары цикл
			СтрокаXTDO = ФабрикаXDTO.Создать(ТипДетальнаяЗапись);
			ЗаполнитьЗначенияСвойств(СтрокаXTDO, ДанныеСтроки);
			СписокXDTO.Добавить(СтрокаXTDO);
		КонецЦикла;
		
		ОбъектXDTO.items = ГруппаXTDO;
		
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции
Процедура ЗаполнитьДетальныеЗаписиXDTO(ОбъектXDTO, items, ТипСписок, ТипДетальнаяЗапись)
	
	ГруппаXTDO = ФабрикаXDTO.Создать(ТипСписок);
	СписокXDTO = ГруппаXTDO.ПолучитьСписок("item");
	Для Каждого ДанныеСтроки Из items Цикл
		СтрокаXTDO = ФабрикаXDTO.Создать(ТипДетальнаяЗапись);
		ЗаполнитьЗначенияСвойств(СтрокаXTDO, ДанныеСтроки,,"error");
		СтрокаXTDO.Error = ?(ДанныеСтроки.Error, 1, 0);
		СписокXDTO.Добавить(СтрокаXTDO);
	КонецЦикла;
	ОбъектXDTO.items = ГруппаXTDO;
	
КонецПроцедуры
Процедура ОтметитьОтправленныеДанныеЭкспрессДоставки(Данные, НомерПакета)
	
	Запись = РегистрыСведений.ЭкспрессДоставкаОбмен.СоздатьМенеджерЗаписи();
	Запись.Период = Данные.Период;
	Запись.express_delivery_request_id = Данные.express_delivery_request_id;
	Запись.operation_type = Данные.operation_type;
	Запись.Прочитать();
	
	Запись.ДатаОтправкиСообщения = ТекущаяДата();
	Запись.НомерПакета_исх = НомерПакета;
	Запись.Записать();
	
КонецПроцедуры

#КонецОбласти
Процедура ОтметитьПринятыеСообщенияЭкспрессДоставки(НомерПринятого)
	
	РубильникВключен = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ВключитьВыгрузкуExpressDelivery1c", Ложь);
	м = ВидыКодманд1с();	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЭкспрессДоставкаОбмен.Период,
	|	ЭкспрессДоставкаОбмен.express_delivery_request_id,
	|	ЭкспрессДоставкаОбмен.operation_type
	|ИЗ
	|	РегистрСведений.ЭкспрессДоставкаОбмен КАК ЭкспрессДоставкаОбмен
	|ГДЕ
	|	НЕ ЭкспрессДоставкаОбмен.ОбработаноСайтом
	|	И ЭкспрессДоставкаОбмен.НомерПакета_исх МЕЖДУ 1 И &НомерПринятого");
	Запрос.УстановитьПараметр("НомерПринятого", НомерПринятого);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ РубильникВключен тогда
			инд = м.Найти(Выборка.operation_type);
			Если НЕ инд = Неопределено тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Запись = РегистрыСведений.ЭкспрессДоставкаОбмен.СоздатьМенеджерЗаписи();
		Запись.Период = Выборка.Период;
		Запись.express_delivery_request_id = Выборка.express_delivery_request_id;
		Запись.operation_type = Выборка.operation_type;
		Запись.Прочитать();
		
		Запись.ОбработаноСайтом = Истина;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

//Выгрузка данных на сайт
Функция ВидыКодманд1с()
	
	Команды = Новый Массив;
	Команды.Добавить("ExpressDelivery.1cConfirm");
	Команды.Добавить("ExpressDelivery.1cCancel");
	Команды.Добавить("ExpressDelivery.1cChange");
	
	Возврат Команды;
КонецФункции
Функция ПолучитьКоманду1сЭД(пар_Номер)
	
	имя_команды = "";
	
	м = ВидыКодманд1с();
	к = м.Количество();
	Если НЕ к < пар_Номер тогда
		имя_команды = м[пар_Номер - 1];
	КонецЕсли;
	
	Возврат имя_команды;
КонецФункции
Процедура ExpressDelivery1cConfirm(пар_МассивРТУ) Экспорт
	
	// вызывается из Мегалогист_Партком.ЭкспрессДоставка_logist_confirm(МаршрутныйЛист)
	
	Если пар_МассивРТУ.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	РубильникВключен = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ВключитьExpressDelivery1cConfirm", Ложь);
	Если НЕ РубильникВключен тогда
		Возврат;
	КонецЕсли;
	
	ЗарегисрироватьИзмененияДляОбменаПоЭД(пар_МассивРТУ,ПолучитьКоманду1сЭД(1));
	
КонецПроцедуры

#КонецОбласти
Процедура ExpressDelivery1cCancel(пар_МассивРТУ) Экспорт
	
	// вызывается из SMSоповещение.СформироватьSMS_ОтказПолный & Мегалогист_Партком.ЭкспрессДоставка_cancel
	
	Если пар_МассивРТУ.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	РубильникВключен = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ВключитьExpressDelivery1cCancel", Ложь);
	Если НЕ РубильникВключен тогда
		Возврат;
	КонецЕсли;
	
	ЗарегисрироватьИзмененияДляОбменаПоЭД_2(пар_МассивРТУ,ПолучитьКоманду1сЭД(2));
	
КонецПроцедуры
Процедура ExpressDelivery1cChange(пар_МассивРТУ) Экспорт
	
	// вызывается из SMSоповещение.СформироватьSMS_ОтказГрупногабарит, SMSоповещение.СформироватьSMS_ОтказЧастичный
	
	Если пар_МассивРТУ.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	РубильникВключен = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ВключитьExpressDelivery1cChange", Ложь);
	Если НЕ РубильникВключен тогда
		Возврат;
	КонецЕсли;
	
	ЗарегисрироватьИзмененияДляОбменаПоЭД(пар_МассивРТУ,ПолучитьКоманду1сЭД(3));
	
КонецПроцедуры
Процедура ЗарегисрироватьИзмененияДляОбменаПоЭД(пар_МассивРТУ,пар_Команда)
	
	РезультатРасчета = ПолучитьДанныеПоЭД(пар_МассивРТУ);
	ЭДВ = РезультатРасчета.ЭДВ;
	РТУ = РезультатРасчета.РТУ;
	лТекущаяДата = РезультатРасчета.ДтВрм;
	
	Для каждого эд из ЭДВ цикл
		
		стрномеров = "";
		СтрокиРТУ = РТУ.НайтиСтроки(Новый Структура("express_delivery_request_id",эд.express_delivery_request_id));
		Если СтрокиРТУ.Количество() > 0 Тогда
			Для каждого стррту из СтрокиРТУ цикл
				стрномеров = стрномеров + СокрЛП(стррту.Номер) + ",";
			КонецЦикла;
			стрномеров = Лев(стрномеров, СтрДлина(стрномеров) - 1);
		КонецЕсли;
		
		Попытка 
			//Ответ = SMSоповещение.РассчитатьУслугуЭД(эд.express_delivery_request_id);
			
			Запись = РегистрыСведений.ЭкспрессДоставкаОбмен.СоздатьМенеджерЗаписи();
			Запись.Период = лТекущаяДата;
			Запись.express_delivery_request_id = эд.express_delivery_request_id;
			Запись.operation_type = пар_Команда;
			Запись.ДанныеПакета = ЗначениеВСтрокуВнутр(Новый Структура("type_cost,invoice_number,delivery_cost",эд.ЭД_ВидОплаты,стрномеров,эд.Сумма));
			Запись.Записать();
		Исключение
			// поругаться
		КонецПопытки;
		
		
	КонецЦикла;
	
КонецПроцедуры
Процедура ЗарегисрироватьИзмененияДляОбменаПоЭД_2(пар_МассивРТУ,пар_Команда)
	
	РезультатРасчета = ПолучитьДанныеПоЭД(пар_МассивРТУ);
	ЭДВ = РезультатРасчета.ЭДВ;
	РТУ = РезультатРасчета.РТУ;
	лТекущаяДата = РезультатРасчета.ДтВрм;
	
	Для каждого эд из ЭДВ цикл
		Попытка 
			Запись = РегистрыСведений.ЭкспрессДоставкаОбмен.СоздатьМенеджерЗаписи();
			Запись.Период = лТекущаяДата;
			Запись.express_delivery_request_id = эд.express_delivery_request_id;
			Запись.operation_type = пар_Команда;
			Запись.ДанныеПакета = "";
			Запись.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьДанныеПоЭД(пар_МассивРТУ)
	
	Запрос_Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.express_delivery_request_id,
	|	РеализацияТоваровУслуг.ЭД_init,
	|	РеализацияТоваровУслуг.ЭД_ВидОплаты,
	|	РеализацияТоваровУслуг.ЭД_СтоимостьУслугиЭДбонусы
	|ПОМЕСТИТЬ Корни
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В (&РТУ)
	|	И РеализацияТоваровУслуг.Контрагент = &Покупатель
	|	И РеализацияТоваровУслуг.Контрагент.ОсновнаяТорговаяТочка.Регион = &Регион
	|	И РеализацияТоваровУслуг.ТипДоставки = &ТипДоставки
	|	И НЕ РеализацияТоваровУслуг.express_delivery_request_id = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Ссылка,
	|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма
	|ПОМЕСТИТЬ Услуги
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка В
	|			(ВЫБРАТЬ
	|				Корни.Ссылка
	|			ИЗ
	|				Корни
	|			ГДЕ
	|				Корни.ЭД_init = ИСТИНА)
	|   И РеализацияТоваровУслугУслуги.Номенклатура В (&ЭД_Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугУслуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	СУММА(РеализацияТоваровУслугТовары.ЭД_Сумма_Услуга) КАК ЭД_Сумма_Услуга
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				Корни.Ссылка
	|			ИЗ
	|				Корни
	|			ГДЕ
	|				Корни.ЭД_init = ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Корни.express_delivery_request_id,
	|	ВЫБОР
	|		КОГДА Корни.ЭД_ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплатыЭД.Рубли)
	|			ТОГДА 1
	|		КОГДА Корни.ЭД_ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплатыЭД.ВЦенеТовара)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ЭД_ВидОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА Корни.ЭД_ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплатыЭД.Рубли)
	|				ТОГДА ЕСТЬNULL(Услуги.Сумма, 0)
	|			КОГДА Корни.ЭД_ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплатыЭД.ВЦенеТовара)
	|				ТОГДА ЕСТЬNULL(Товары.ЭД_Сумма_Услуга, 0)
	|			ИНАЧЕ Корни.ЭД_СтоимостьУслугиЭДбонусы
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		Корни.Ссылка КАК Ссылка,
	|		Корни.Номер КАК Номер,
	|		Корни.express_delivery_request_id КАК express_delivery_request_id,
	|		Корни.ЭД_init КАК ЭД_init,
	|		Корни.ЭД_ВидОплаты КАК ЭД_ВидОплаты,
	|		Корни.ЭД_СтоимостьУслугиЭДбонусы КАК ЭД_СтоимостьУслугиЭДбонусы
	|	ИЗ
	|		Корни КАК Корни
	|	ГДЕ
	|		Корни.ЭД_init = ИСТИНА) КАК Корни
	|		ЛЕВОЕ СОЕДИНЕНИЕ Услуги КАК Услуги
	|		ПО Корни.Ссылка = Услуги.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО Корни.Ссылка = Товары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Корни.express_delivery_request_id,
	|	ВЫБОР
	|		КОГДА Корни.ЭД_ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплатыЭД.Рубли)
	|			ТОГДА 1
	|		КОГДА Корни.ЭД_ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыОплатыЭД.ВЦенеТовара)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Корни.express_delivery_request_id,
	|	Корни.Номер
	|ИЗ
	|	Корни КАК Корни";
	
	РегионОтбора = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "РегионExpressDelivery1c", Справочники.Регионы.ПустаяСсылка());
	КонтрагентОтбора = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ПокупательExpressDelivery1c", Справочники.Контрагенты.ПустаяСсылка());
	
	Если КонтрагентОтбора = Справочники.Контрагенты.ПустаяСсылка() тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,"И РеализацияТоваровУслуг.Контрагент = &Покупатель","");
	КонецЕсли;
	Если РегионОтбора = Справочники.Регионы.ПустаяСсылка() тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,"И РеализацияТоваровУслуг.Контрагент.ОсновнаяТорговаяТочка.Регион = &Регион","");
	КонецЕсли;
	
	у_м = новый Массив;
	ИмяПараметраУслугаДоставки = "Услуга экспресс-доставки (Безнал)";
	у_м.Добавить(РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", ИмяПараметраУслугаДоставки, Константы.УслугаЭкспрессДоставка.Получить()));
	ИмяПараметраУслугаДоставки = "Услуга экспресс-доставки (Нал)";
	у_м.Добавить(РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", ИмяПараметраУслугаДоставки, Константы.УслугаЭкспрессДоставка.Получить()));
	
	Запрос = Новый Запрос;
	Запрос.Текст = Запрос_Текст;
	Запрос.УстановитьПараметр("РТУ", пар_МассивРТУ);
	Запрос.УстановитьПараметр("ТипДоставки", Справочники.ТипыДоставки.ЭкспрессДоставка);
	Запрос.УстановитьПараметр("ЭД_Услуга", у_м);
	
	Если НЕ КонтрагентОтбора = Справочники.Контрагенты.ПустаяСсылка() тогда
		Запрос.УстановитьПараметр("Покупатель", КонтрагентОтбора);
	КонецЕсли;
	Если НЕ РегионОтбора = Справочники.Регионы.ПустаяСсылка() тогда
		Запрос.УстановитьПараметр("Регион", РегионОтбора);
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакет();
	Результат_Количество = Результат.Количество();
	РТУ = Результат[Результат_Количество - 1].Выгрузить();
	ЭДВ = Результат[Результат_Количество - 2].Выгрузить();
	
	Возврат Новый Структура("РТУ,ЭДВ,ДтВрм",РТУ,ЭДВ,ТекущаяДата());
КонецФункции
Функция ПолучитьДанныеПоЭД_Товары(пар_id)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ПОМЕСТИТЬ Шапки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.express_delivery_request_id = &express_delivery_request_id
	|	И РеализацияТоваровУслуг.ТипДоставки = &ТипДоставки
	|	И РеализацияТоваровУслуг.Источник = &Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугПричиныОтказов.Ссылка,
	|	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество,
	|	РеализацияТоваровУслугПричиныОтказов.КлючСвязи
	|ПОМЕСТИТЬ ОтказыПоКрупногабариту
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
	|ГДЕ
	|	РеализацияТоваровУслугПричиныОтказов.Ссылка В
	|			(ВЫБРАТЬ
	|				Шапки.Ссылка
	|			ИЗ
	|				Шапки)
	|	И РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены = &ПричинаОтмены
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугПричиныОтказов.Ссылка,
	|	РеализацияТоваровУслугПричиныОтказов.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК quantity,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РеализацияТоваровУслугТовары.ЭД_Цена_Номенклатура > 0
	|				ТОГДА РеализацияТоваровУслугТовары.ЭД_Цена_Номенклатура
	|			ИНАЧЕ РеализацияТоваровУслугТовары.ЦенаСоСкидкой
	|		КОНЕЦ) КАК price,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК number,
	|	РеализацияТоваровУслугТовары.Номенклатура.Изготовитель.КодСайта КАК maker_id,
	|	РеализацияТоваровУслугТовары.IDSite КАК motion_id,
	|	СУММА(ЕСТЬNULL(ОтказыПоКрупногабариту.Количество, 0)) КАК КоличествоОтказаПоКрупногоабариту,
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ОтказыПоКрупногабариту.Количество, 0)) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК typeError
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтказыПоКрупногабариту КАК ОтказыПоКрупногабариту
	|		ПО РеализацияТоваровУслугТовары.Ссылка = ОтказыПоКрупногабариту.Ссылка
	|			И РеализацияТоваровУслугТовары.КлючСвязи = ОтказыПоКрупногабариту.КлючСвязи
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				Шапки.Ссылка
	|			ИЗ
	|				Шапки)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
	|	РеализацияТоваровУслугТовары.Номенклатура.Изготовитель.КодСайта,
	|	РеализацияТоваровУслугТовары.IDSite";
	
	Запрос.УстановитьПараметр("express_delivery_request_id", пар_id);
	Запрос.УстановитьПараметр("Источник", Перечисления.ИсточникиРеализаций.Сайт);
	Запрос.УстановитьПараметр("ТипДоставки", Справочники.ТипыДоставки.ЭкспрессДоставка);
	Запрос.УстановитьПараметр("ПричинаОтмены", Справочники.СостоянияСтрокДокументов.КрупногабаритувЭД);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции