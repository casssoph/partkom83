Функция ПолучитьМетаданные() Экспорт
	
	Возврат Метаданные.ПланыОбмена.ОбменПартКом83_Сайт;
	
КонецФункции
Функция URIПространстваИмен() Экспорт
	Возврат "http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema";	
КонецФункции
Функция ИмяТипаПоОбъектуМетаданных(вхОбъектМетаданных) 
	Возврат	ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(вхОбъектМетаданных) + "." + вхОбъектМетаданных.Имя;
КонецФункции
Функция ИмяТипаПоСсылке(вхСсылкаНаОбъект)
	
	Результат = "";
	лОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(вхСсылкаНаОбъект));
	Если (лОбъектМетаданных <> Неопределено) тогда
		Результат = ИмяТипаПоОбъектуМетаданных(лОбъектМетаданных);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции
Функция ТипПоСсылке(вхСсылкаНаОбъект) Экспорт
	
	Результат = Неопределено;
	лИмяТипа = ИмяТипаПоСсылке(вхСсылкаНаОбъект);
	Если НЕ ПустаяСтрока(лИмяТипа) тогда
		Результат = ФабрикаXDTO.Тип(URIПространстваИмен(), лИмяТипа);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции
Функция ТипПоОбъектуМетаданных(вхОбъектМетаданных) Экспорт
	
	Результат = Неопределено;
	лИмяТипа = ИмяТипаПоОбъектуМетаданных(вхОбъектМетаданных);
	Если НЕ ПустаяСтрока(лИмяТипа) тогда
		Результат = ФабрикаXDTO.Тип(URIПространстваИмен(), лИмяТипа);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции
Функция ЗарегистрироватьВОбмен(РегистрируемыйОбъект) Экспорт
	
	ИсходящийУзел = ИсходящийУзел();
	Если ЗначениеЗаполнено(ИсходящийУзел) Тогда
		Если ТипЗнч(РегистрируемыйОбъект) = Тип("Массив") Тогда
			Для Каждого Объект Из РегистрируемыйОбъект Цикл
				ЗарегистрироватьОбъект(ИсходящийУзел, Объект);
			КонецЦикла;
		Иначе
			ЗарегистрироватьОбъект(ИсходящийУзел, РегистрируемыйОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
Процедура ЗарегистрироватьОбъект(Узел, РегистрируемыйОбъект)
	
	ПланыОбмена.ЗарегистрироватьИзменения(Узел, РегистрируемыйОбъект);
	
КонецПроцедуры
Функция ИсходящийУзел() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбменПартКом83_Сайт.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.ОбменПартКом83_Сайт КАК ОбменПартКом83_Сайт
	                      |ГДЕ
	                      |	НЕ ОбменПартКом83_Сайт.ЭтотУзел
	                      |	И ОбменПартКом83_Сайт.Исходящий");
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции
Функция ВходящийУзел() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбменПартКом83_Сайт.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.ОбменПартКом83_Сайт КАК ОбменПартКом83_Сайт
	                      |ГДЕ
	                      |	НЕ ОбменПартКом83_Сайт.ЭтотУзел
	                      |	И ОбменПартКом83_Сайт.Входящий");
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции
Функция XDTOСообщение(Сообщение, СообщениеЗапаковано) Экспорт
	
	Если СообщениеЗапаковано Тогда
		ТекстСообщения = ОбменДаннымиСервер.РаспаковатьСообщениеОбмена(Сообщение);
	Иначе
		ТекстСообщения = Сообщение;
	КонецЕсли;
	
	//29.11.18 Строганов Роман > XX-953 Добавить проверку XML при получении с сайта
	Если Константы.УдалятьНедопустимыеСимволыФайлаОбмена.Получить() = Истина Тогда
		ТекстСообщения = ОбменДаннымиСервер.ЗаменитьНедопустимыеСимволыXML(ТекстСообщения);
	КонецЕсли;
	//29.11.18 Строганов Роман < XX-953 Добавить проверку XML при получении с сайта 

	ТипСообщениеОбмена = ФабрикаXDTO.Тип(URIПространстваИмен(), "СообщениеОбмена");
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТекстСообщения);
	
	Возврат ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ, ТипСообщениеОбмена);
	
КонецФункции


Процедура ОбработатьСообщениеССайта() Экспорт
	
	Настройка = Справочники.НастройкиРеквизитовДляОбменов.Обмен_1С_Сайт;
	АдресВебСервиса = ?(ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза(), Настройка.СтрокаДляРабочейБазы, Настройка.СтрокаДляТестовойБазы);
			
	Получатель = ЭтотУзел();
	Исходящий = ИсходящийУзел();
	Входящий = ВходящийУзел();
	
	Определения = Новый WSОпределения(АдресВебСервиса);
	Прокси = Новый WSПрокси(Определения, Определения.Сервисы[0].URIПространстваИмен, Определения.Сервисы[0].Имя, Определения.Сервисы[0].ТочкиПодключения[0].Имя);
	ОтветСервера = Прокси.GetExchangeMessage("ОбменПартКом83_Сайт", Получатель.ИдентификаторУзла, Входящий.НомерПринятого);
		
	ДанныеХДТО = XDTOСообщение(ОтветСервера, Истина);
	
	НомерСообщения = Формат(ДанныеХДТО.НомерСообщения, "ЧГ=");
	НомерПринятого = Мин(ДанныеХДТО.НомерПринятого, Исходящий.НомерОтправленного);
	ПланыОбмена.УдалитьРегистрациюИзменений(Исходящий, НомерПринятого);
	ОтметитьПринятыеСообщенияЭкспрессДоставки(НомерПринятого);
	
	ТекстШаблона = ПолучитьОбщийМакет("ЗаголовокСообщенияОбмена").ПолучитьТекст();
	ТекстПустышки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, "ОбменПартКом83_Сайт", Получатель.Код, Входящий.Код, НомерСообщения, "0");
	Пустышка = Новый ЧтениеXML;
	Пустышка.УстановитьСтроку(ТекстПустышки);
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(Пустышка, ДопустимыйНомерСообщения.Больший);
	
	Попытка
		СписокОбъектов = ДанныеХДТО.Объекты.ПолучитьСписок("Объект");
		Если СписокОбъектов.Количество() > 0 Тогда
			ОбменДаннымиВызовСервера.ЗарегистрироватьСообщениеВИсторииОбменаССайтом(Исходящий.ИдентификаторУзла, Получатель.ИдентификаторУзла, ОтветСервера, НомерСообщения);
			ЗагрузитьСообщениеОбмена(СписокОбъектов, Исходящий, НомерСообщения);
		КонецЕсли;
		ЧтениеСообщения.ЗакончитьЧтение();
	Исключение
		ЧтениеСообщения.ПрерватьЧтение();
		ВызватьИсключение ;
	КонецПопытки;
		
КонецПроцедуры
Процедура ЗагрузитьСообщениеОбмена(СписокОбъектов, ИсходящийУзел, НомерСообщения) Экспорт
	
	Для Каждого Объект Из СписокОбъектов цикл
		ИмяТипа = Объект.Тип().Имя;
		Если ЭтоЭкспрессДоставка(ИмяТипа) Тогда
			ЗагрузитьЭлементЭкспрессДоставки(Объект, НомерСообщения);
		Иначе
			МенеджерОбъекта =  Вычислить(ИмяТипа);
			МенеджерОбъекта.ЗагрузитьЭлемент(Объект, ИсходящийУзел);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьУдаленияЭлементов(вхМассивСсылок, вхОбъектМетаданных) Экспорт
	
	лИмяТипа = ИмяТипаПоОбъектуМетаданных(вхОбъектМетаданных);
	лТипУдалениеОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен(), "УдалениеОбъекта");
	
	Результат = Новый Массив;
	
	Для Каждого лСсылкаНаОбъект Из вхМассивСсылок цикл
		
		лОбъект = ФабрикаXDTO.Создать(лТипУдалениеОбъекта);
		лОбъект.ТипОбъекта = лИмяТипа;
		лОбъект.Ссылка = лСсылкаНаОбъект.УникальныйИдентификатор();
		Результат.Добавить(лОбъект);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
Функция ВыгрузитьСообщениеОбмена(вхИдентификаторУзлаОбмена, ReceivedNo, НеСжиматьСообщение = Ложь) Экспорт
	
	лОтправитель = ЭтотУзел();
	лИсходящий = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(ПолучитьМетаданные(), вхИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(лИсходящий) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	
	лВходящий = ОбменДаннымиКлиентСервер.ПолучитьВходящийУзелОбмена(ПолучитьМетаданные(), вхИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(лВходящий) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	лНомерПринятого = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(лВходящий, "НомерПринятого");
	
	лТипОбъекты = ФабрикаXDTO.Тип(URIПространстваИмен(), "Объекты");
	лТипСообщениеОбмена = ФабрикаXDTO.Тип(URIПространстваИмен(), "СообщениеОбмена");
	
	РегистрироватьВыгрузкуОбъектов = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт","Регистрировать выгрузку объектов", Ложь);
	лПустышка = Новый ЗаписьXML;
	лПустышка.УстановитьСтроку("utf-8");
	лЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	лЗаписьСообщения.НачатьЗапись(лПустышка, лИсходящий);
	Попытка
		
		лСообщениеОбмена = ФабрикаXDTO.Создать(лТипСообщениеОбмена);
		лСообщениеОбмена.ПланОбмена = "ОбменПартКом83_Сайт";
		лСообщениеОбмена.Отправитель = лОтправитель.ИдентификаторУзла;
		лСообщениеОбмена.Получатель = вхИдентификаторУзлаОбмена;
		лСообщениеОбмена.НомерСообщения = лЗаписьСообщения.НомерСообщения;
		лСообщениеОбмена.НомерПринятого = лНомерПринятого;
		
		лОбъекты = ФабрикаXDTO.Создать(лТипОбъекты);
		лСписокОбъектов = лОбъекты.ПолучитьСписок("Объект");
		ОбъектыРегистрации = Новый Массив;
		
		лВыгружаемыеОбъекты = ОбменДаннымиКлиентСервер.ВыбратьПакетИзмененийДляУзлаОбменаНовое(лИсходящий, лСообщениеОбмена.НомерСообщения, 1000);
		Для Каждого лЭлементСоответствия Из лВыгружаемыеОбъекты цикл
			лМенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лЭлементСоответствия.Ключ);
			лВыгруженныеОбъекты = лМенеджерОбъекта.ВыгрузитьЭлементы(лЭлементСоответствия.Значение, ПолучитьМетаданные(), ОбъектыРегистрации);
			Для Каждого лВыгруженныйОбъект Из лВыгруженныеОбъекты цикл
				лСписокОбъектов.Добавить(лВыгруженныйОбъект);
			КонецЦикла;
		КонецЦикла;
		
		//Добавляем данные экспресс-доставки
		ВыгружаемыеОбъекты = ВыбратьИзмененияЭкспрессДоставки(ReceivedNo);
		Пока ВыгружаемыеОбъекты.Следующий() Цикл
			ОбъектXDTO = ОбъектОтчетаЭкспрессДоставки(ВыгружаемыеОбъекты, URIПространстваИмен());
			лСписокОбъектов.Добавить(ОбъектXDTO);
			ОтметитьОтправленныеДанныеЭкспрессДоставки(ВыгружаемыеОбъекты, лЗаписьСообщения.НомерСообщения);
		КонецЦикла;
		
		лСообщениеОбмена.Объекты = лОбъекты;
		ЕстьОбъектыОбмена = лСписокОбъектов.Количество() > 0;
		
		Если РегистрироватьВыгрузкуОбъектов Тогда
			DataExchangeModule.ОтметитьОтправкуОбъектов(ОбъектыРегистрации, Перечисления.ВидыОбменов.Обмен1C_Сайт, лЗаписьСообщения.НомерСообщения);
		КонецЕсли;
		
		//Увеличение счетчика сообщений//
		лЗаписьСообщения.ЗакончитьЗапись();
		
	Исключение
		лЗаписьСообщения.ПрерватьЗапись();
		ВызватьИсключение ;
	КонецПопытки;
	
	лЗаписьХМЛ = Новый ЗаписьXML;
	лЗаписьХМЛ.УстановитьСтроку("utf-8");
	лЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(лЗаписьХМЛ, лСообщениеОбмена);
	
	НесжатоеСообщение = лЗаписьХМЛ.Закрыть();
	УпакованноеСообщение = ОбщегоНазначенияВызовСервера.ЗапаковатьСообщение(НесжатоеСообщение);
	Если ЕстьОбъектыОбмена Тогда
		ОбменДаннымиВызовСервера.ЗарегистрироватьСообщениеВИсторииОбменаССайтом(лОтправитель.ИдентификаторУзла, вхИдентификаторУзлаОбмена, УпакованноеСообщение, ReceivedNo); 
	КонецЕсли;
	
	Возврат ?(НеСжиматьСообщение, НесжатоеСообщение, УпакованноеСообщение);
	
КонецФункции



//Экспресс доставка
#Область Загрузка
Процедура ЗагрузитьЭлементЭкспрессДоставки(ОбъектXDTO, НомерСообщенияВходящий) Экспорт
	
	ИмяКоманды = ОбъектXDTO.Тип().Имя;
	СтруктураОбъекта = СтруктураОбъекта(ИмяКоманды, ОбъектXDTO);
	СтруктураОтчета = Новый Структура("express_delivery_request_id,operation_type,Error,Description", СтруктураОбъекта.RequestID, СтруктураОбъекта.Команда, Ложь, "");
	
	Если		ИмяКоманды = "ExpressDelivery.Init" Тогда
		ЭкспрессДоставка_init(СтруктураОбъекта, СтруктураОтчета);
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.Add" Тогда
		ЭкспрессДоставка_add(СтруктураОбъекта, СтруктураОтчета);
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.DeletePart" Тогда
		ЭкспрессДоставка_delete_part(СтруктураОбъекта, СтруктураОтчета);
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.Cancel" Тогда
		ЭкспрессДоставка_cancel(СтруктураОбъекта, СтруктураОтчета);
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.LogistConfirm" Тогда
		ЭкспрессДоставка_logist_confirm(СтруктураОбъекта, СтруктураОтчета);
	КонецЕсли;
	
	ЗаписатьОтчетПоЗагрузке(СтруктураОтчета, НомерСообщенияВходящий);
	
КонецПроцедуры

#Область init
Процедура ЭкспрессДоставка_init(СтруктураОбъекта, СтруктураОтчета)
	
	СтруктураОтчета.Вставить("invoice_number", "");
	СтруктураОтчета.Вставить("items", Новый Массив);
	
	УстановитьДатыОплаты(СтруктураОбъекта);
	
	ЗагружаемыеОбъекты = ЗагружаемыеОбъектыРеализации(СтруктураОбъекта);
	КонтрольСуществующихДокументов(СтруктураОбъекта, СтруктураОтчета);
	//Временый затык проблемы эд 
	Если СтруктураОтчета.Error тогда 
		СтруктураОтчета.Error = Ложь;
		Возврат
	КонецЕсли;	
	
	РеализацияБылаСформирована = Ложь;
	
	Если НЕ СтруктураОтчета.Error Тогда
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Для Каждого СтруктураРеализации Из ЗагружаемыеОбъекты Цикл
			Если НЕ СтруктураОтчета.Error Тогда
				ЗагрузитьРеализацию(СтруктураРеализации, СтруктураОтчета, РеализацияБылаСформирована);
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураОтчета.Error Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтчета.error = СтруктураОтчета.error ИЛИ НЕ РеализацияБылаСформирована;
	
КонецПроцедуры

Процедура КонтрольСуществующихДокументов(СтруктураОбъекта, СтруктураОтчета)
	
	СписокДокументов = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Реализация.Ссылка,
	                      |	Реализация.Склад,
	                      |	Реализация.Номер,
	                      |	Реализация.Дата,
	                      |	Реализация.Склад.Код КАК КодСклада
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК Реализация
	                      |ГДЕ
	                      |	Реализация.express_delivery_request_id = &RequestID
	                      |	И НЕ Реализация.ПометкаУдаления");
	Запрос.УстановитьПараметр("RequestID", СтруктураОбъекта.RequestID);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДополнитьСтроку(СписокДокументов, СокрЛП(Выборка.Номер), ",");
		СтруктураОтчета.Error = Истина;
	КонецЦикла;
	
	Если СтруктураОтчета.Error Тогда
		ТекстОшибки = "Документ (RequestID: " + СтруктураОбъекта.RequestID + ") уже существует. Документы - " + СписокДокументов;
		СтруктураОтчета.Description = ТекстОшибки;
		СтруктураОтчета.invoice_number = СписокДокументов;
		ДобавитьВОтчетОшибочныеСтроки(СтруктураОтчета.items, СтруктураОбъекта.Товары);
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗагрузитьРеализацию(СтруктураДокумента, СтруктураОтчета, РеализацияБылаСформирована)
	
	БылоДобавлениеСтроки = Ложь;
	
	Документ = ДокументРеализация(СтруктураДокумента);
	ЗаполнитьРеквизитыДокументаРеализации(Документ, СтруктураДокумента);
	Документ.Комментарий = "Экспресс-доставка, дата оплаты:" + СтруктураДокумента.ДатаОплаты;
	ДобавитьТоварыВРеализацию(Документ, СтруктураДокумента, СтруктураОтчета, БылоДобавлениеСтроки, Документ.Дата);
	Если НЕ СтруктураОтчета.Error И БылоДобавлениеСтроки Тогда
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Проведение);
			РеализацияБылаСформирована = Истина;
			ДополнитьСтроку(СтруктураОтчета.invoice_number, Документ.Номер, ",");
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			СтруктураОтчета.Error = Истина;
			ДополнитьСтроку(СтруктураОтчета.Description, ОписаниеОшибки, ";");
		КонецПопытки;
	КонецЕсли;
	
	//Мегалогист++
	Если НЕ СтруктураОтчета.Error тогда
		ЗагрузитьМаршрутноеЗадание(Документ,СтруктураОтчета);
	КонецЕсли;
	//Мегалогист--
	
КонецПроцедуры
Процедура ЗаполнитьРеквизитыДокументаРеализации(Документ, СтруктураДокумента)
	
	Документ.ПометкаУдаления = Ложь;
	Документ.Дата = ТекущаяДата();//СтруктураДокумента.Дата;
	Документ.ДополнительныеСвойства.Вставить("ОперативноеПроведение", Истина);

	Документ.express_delivery_request_id = СтруктураДокумента.RequestID;
	ЗаполнитьЗначенияСвойств(Документ, СтруктураДокумента, "Контрагент,Склад,ДатаДоставки");
	Документ.ДоговорКонтрагента = Документ.Контрагент.ОсновнойДоговорКонтрагента;
	Документ.Организация = Документ.ДоговорКонтрагента.Организация;
	Документ.Филиал = Документ.Склад.Филиал;
	Документ.Статус = Перечисления.СтатусыРеализацииЭкспрессДоставки.Оформляется;
	Документ.АдресДоставки = СтруктураДокумента.АдресДоставки;
	Документ.ТорговаяТочка = СтруктураДокумента.ТорговаяТочка;
	Документ.Менеджер = СтруктураДокумента.Менеджер;
	Документ.ТипДоставки = Справочники.ТипыДоставки.ЭкспрессДоставка;
	Документ.флНеВыгружатьВТопЛог = Истина;
	Документ.Источник = Перечисления.ИсточникиРеализаций.Сайт;
	Документ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Документ.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка;
	Документ.ВалютаДокумента = Константы.ВалютаРубль.Получить();
	Документ.КурсВзаиморасчетов = 1;
	Документ.УчитыватьНДС = УчетНДСПовтИсп.УчитыватьНДСПоВариантуУчета(Документ.Организация.ВариантУчетаНДС, Документ.ДоговорКонтрагента.ВидОплаты);//Документ.Организация.УчитыватьНДС;
	Документ.СуммаВключаетНДС = Истина;
	Документ.КратностьВзаиморасчетов = 1;
	
	// + Пушкин 20181114 XX-1345
	Документ.ВремяДоставкиС = СтруктураДокумента.ВремяДоставкиС;
	Документ.ВремяДоставкиПо = СтруктураДокумента.ВремяДоставкиПо;
	// - Пушкин 20181114 XX-1345
	// + Пушкин 20181204 XX-1445
	Документ.Телефон = СтруктураДокумента.Телефон;
	Документ.Заказчик = СтруктураДокумента.Заказчик;
	// - Пушкин 20181204 XX-1445
КонецПроцедуры
Процедура ДобавитьТоварыВРеализацию(Документ, СтруктураДокумента, СтруктураОтчета, БылоДобавление, ПериодОстатков)
	
	ИдентификаторыСтрокЗаявок = СтруктураДокумента.Товары.ВыгрузитьКолонку("ИдентификаторСтрокиЗаявки");
	СвободныеОстатки = СвободныеОстаткиНоменклатуры(ПериодОстатков, Документ.Склад, СтруктураДокумента.Товары.ВыгрузитьКолонку("Номенклатура"), ИдентификаторыСтрокЗаявок);
	РезервыПоIDSite = РезервыПоIDSite(СтруктураДокумента, ПериодОстатков, Документ.Склад);
	
	ИспользоватьЦенуСоСкидкой = Ценообразование.ИспользоватьЦенуСоСкидкойВДокументах();
	Для Каждого Строка Из СтруктураДокумента.Товары Цикл
		
		ОтчетПоЗагрузкеСтроки = Новый Структура("motion_id,quantity_site,quantity,error,description", Строка.IDSite, Строка.Количество, Строка.Количество, Строка.error, Строка.description);

		Если НЕ ОтчетПоЗагрузкеСтроки.error Тогда
			
			ДанныеРезерва = РезервыПоIDSite[Строка.ИдентификаторСтрокиЗаявки];
			Если ДанныеРезерва = Неопределено Тогда
				ОтчетПоЗагрузкеСтроки.error = Истина;
				ОтчетПоЗагрузкеСтроки.description = "Нет остатков по резервам";
			ИначеЕсли НЕ ДанныеРезерва.ДостаточноРезерва Тогда
				ОтчетПоЗагрузкеСтроки.error = Истина;
				ОтчетПоЗагрузкеСтроки.description = ДанныеРезерва.ТекстОшибки;
			Иначе
				Если Документ.Товары.Найти(Строка.ИдентификаторСтрокиЗаявки, "СтрокаЗаявки") = Неопределено Тогда
					Количество = КоличествоСУчетомОстатков(Строка.Количество, Строка.Номенклатура, СвободныеОстатки);
					Если Количество > 0 Тогда
						
						НоваяСтрока = Документ.Товары.Добавить();
						НоваяСтрока.Номенклатура = Строка.Номенклатура;
						НоваяСтрока.Качество = Справочники.Качество.Новый;
						НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
						НоваяСтрока.СтрокаЗаявки = Строка.ИдентификаторСтрокиЗаявки;
						НоваяСтрока.IDSite = Строка.IDSite;
						НоваяСтрока.ОрганизацияПриVMI = Строка.ОрганизацияПриVMI;
						НоваяСтрока.Коэффициент = 1;
						НоваяСтрока.КлючСвязи = НоваяСтрока.НомерСтроки;
						НоваяСтрока.Количество = Количество;
						НоваяСтрока.КоличествоПлан = Количество;
						НоваяСтрока.Цена = Строка.Цена;
						НоваяСтрока.ЦенаСоСкидкой = ?(ИспользоватьЦенуСоСкидкой, Строка.Цена, 0); 
						НоваяСтрока.Сумма = Строка.Цена * Количество;
						НоваяСтрока.СтавкаНДС = ?(Документ.СуммаВключаетНДС, НоваяСтрока.Номенклатура.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Документ);
						
						БылоДобавление = Истина;
						
					КонецЕсли;
					ОтчетПоЗагрузкеСтроки.quantity = Количество;
					ОтчетПоЗагрузкеСтроки.error = ?(Количество = 0, 1, 0);
					ОтчетПоЗагрузкеСтроки.description = ?(Количество = Строка.Количество, "", "Недостаточно остатков на складах");
				Иначе
					ОтчетПоЗагрузкеСтроки.error = Истина;
					ОтчетПоЗагрузкеСтроки.description = "Строка уже существует";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураОтчета.items.Добавить(ОтчетПоЗагрузкеСтроки);
	КонецЦикла;
	
КонецПроцедуры
Процедура ДобавитьВОтчетОшибочныеСтроки(items, ТаблицаТоваров, description = "")
	
	Для Каждого Товар Из ТаблицаТоваров Цикл
		Структура = Новый Структура("motion_id,quantity,quantity_site,error,description", Товар.ИдентификаторСтрокиЗаявки.IDSite, Товар.Количество, Товар.Количество, Истина, description);
		items.Добавить(Структура);
	КонецЦикла;
	
КонецПроцедуры
Процедура УстановитьДатыОплаты(СтруктураОбъекта)
	
	Договор = СтруктураОбъекта.Контрагент.ОсновнойДоговорКонтрагента;
	ОбщаяДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(СтруктураОбъекта.Дата, 1, Перечисления.ВидыРасчетаДней.ПоКалендарнымДням, Истина);
	ОбщаяДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(ОбщаяДатаОплаты, Договор.ДопустимоеЧислоДнейЗадолженности, Договор.ВидРасчетаДней, Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОсобыеУсловияОтсрочки.Изготовитель,
	                      |	ОсобыеУсловияОтсрочки.ТипПоставки,
	                      |	ОсобыеУсловияОтсрочки.ДопустимоеЧислоДнейЗадолженности,
	                      |	ОсобыеУсловияОтсрочки.ВидРасчетаДней
	                      |ИЗ
	                      |	РегистрСведений.ОсобыеУсловияОтсрочки КАК ОсобыеУсловияОтсрочки
	                      |ГДЕ
	                      |	ОсобыеУсловияОтсрочки.ДоговорКонтрагента = &ДоговорКонтрагента
	                      |	И ОсобыеУсловияОтсрочки.ДатаОкончания >= &ДатаОкончания");
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	Запрос.УстановитьПараметр("ДатаОкончания", СтруктураОбъекта.Дата);
	ОсобыеУсловия = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из СтруктураОбъекта.Товары Цикл
		
		ДнейДоставкиДоДомашнегоСклада = Строка.ИдентификаторСтрокиЗаявки.ДнейДоставкиДоДомашнегоСклада;
		ДопустимоеЧислоДнейЗадолженности = 0;
		ВидРасчетаДней = 0;
		СтрокиОсобыхУсловий = ОсобыеУсловия.НайтиСтроки(Новый Структура("Изготовитель,ТипПоставки", Строка.Номенклатура.Изготовитель, Строка.ИдентификаторСтрокиЗаявки.ТипПоставки));
		Если СтрокиОсобыхУсловий.Количество() > 0 Тогда
			ДопустимоеЧислоДнейЗадолженности = СтрокиОсобыхУсловий[0].ДопустимоеЧислоДнейЗадолженности;
			ВидРасчетаДней = СтрокиОсобыхУсловий[0].ВидРасчетаДней;
		КонецЕсли;
		
		ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(ОбщаяДатаОплаты, ДнейДоставкиДоДомашнегоСклада, Перечисления.ВидыРасчетаДней.ПоБанковскимДням, Истина);
		Строка.ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(ДатаОплаты, ДопустимоеЧислоДнейЗадолженности, ВидРасчетаДней, Договор.ОплатаВЛюбойДень);
		
	КонецЦикла;
	
КонецПроцедуры

//Мегалогист++
Функция ДокументМаршрутноеЗадание(Реализация)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МегаЛогист_МаршрутноеЗадание.Ссылка
	                      |ИЗ
	                      |	Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
	                      |ГДЕ
	                      |	МегаЛогист_МаршрутноеЗадание.ЗаказПокупателя = &Реализация");
	Запрос.УстановитьПараметр("Реализация", Реализация.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Документ = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Документ = Документы.МегаЛогист_МаршрутноеЗадание.СоздатьДокумент();
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции
Процедура ЗагрузитьМаршрутноеЗадание(Реализация,СтруктураОтчета)
	
		МЗ = ДокументМаршрутноеЗадание(Реализация);
		//МЗ=Документы.МегаЛогист_МаршрутноеЗадание.СоздатьДокумент();
		
		МЗ.Дата=ТекущаяДата();
		ЗаполнитьЗначенияСвойств(МЗ, Реализация, "АдресДоставки,ДатаДоставки,Контрагент,express_delivery_request_id,Организация,Филиал,МаршрутДоставки");
		МЗ.ЗаказПокупателя=Реализация.Ссылка;
		МЗ.Статус = Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.КРаспределению;
		МЗ.Ответственный  = ПараметрыСеанса.ТекущийПользователь;
		МЗ.ТипЗадания=Справочники.МегаЛогист_ТипыМаршрутныхЗаданий.ДоставкаДоКлиента;
		МЗ.ЭкспрессДоставка=Истина;
		МЗ.ВремяДоставкиС=ПроверкаРазницыВремени.ПолучитьРегиональноеВремя(Реализация.ВремяДоставкиС,Реализация.Склад);
		МЗ.ВремяДоставкиПо=ПроверкаРазницыВремени.ПолучитьРегиональноеВремя(Реализация.ВремяДоставкиПо,Реализация.Склад);
		
		Попытка
			МЗ.Записать(РежимЗаписиДокумента.Проведение);
			Мегалогист_Партком.ЭкспрессДоставка_add(МЗ.Ссылка);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			СтруктураОтчета.Error = Истина;
			ДополнитьСтроку(СтруктураОтчета.Description, ОписаниеОшибки, ";");
		КонецПопытки;	
	
КонецПроцедуры
//Мегалогист--

#Область КонтрольОстатковИРезервов
Функция СвободныеОстаткиНоменклатуры(Период, Склад, СписокНоменклатуры, ИдентификаторыСтрокЗаявок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВложенныйЗапрос.Номенклатура,
	                      |	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	                      |		ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	                      |	ИЗ
	                      |		РегистрНакопления.ТоварыНаСкладах.Остатки(
	                      |				&Период,
	                      |				Номенклатура В (&СписокНоменклатуры)
	                      |					И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	                      |	
	                      |	ОБЪЕДИНИТЬ ВСЕ
	                      |	
	                      |	ВЫБРАТЬ
	                      |		РезервыТоваровОстатки.Номенклатура,
	                      |		-РезервыТоваровОстатки.КоличествоОстаток
	                      |	ИЗ
	                      |		РегистрНакопления.РезервыТоваров.Остатки(
	                      |				&Период,
	                      |				Номенклатура В (&СписокНоменклатуры)
	                      |					И Склад = &Склад
	                      |					И НЕ СтрокаЗаявки В (&ИдентификаторыСтрокЗаявок)) КАК РезервыТоваровОстатки) КАК ВложенныйЗапрос
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВложенныйЗапрос.Номенклатура");
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ИдентификаторыСтрокЗаявок", ИдентификаторыСтрокЗаявок);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция РезервыПоIDSite(СтруктураДокумента, Период, Склад)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ВнешняяТаблица.ИдентификаторСтрокиЗаявки КАК Справочник.ИдентификаторыСтрокЗаявок) КАК ИдентификаторСтрокиЗаявки,
	                      |	ВЫРАЗИТЬ(ВнешняяТаблица.Количество КАК ЧИСЛО(10, 3)) КАК Количество
	                      |ПОМЕСТИТЬ Товары
	                      |ИЗ
	                      |	&ВнешняяТаблица КАК ВнешняяТаблица
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Товары.ИдентификаторСтрокиЗаявки,
	                      |	Товары.Количество,
	                      |	РезервыТоваровОстатки.КоличествоОстаток КАК КоличествоРезерв,
	                      |	Товары.Количество <= РезервыТоваровОстатки.КоличествоОстаток КАК ДостаточноРезерва
	                      |ИЗ
	                      |	Товары КАК Товары
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваров.Остатки(
	                      |				&Период,
	                      |				Склад = &Склад
	                      |					И СтрокаЗаявки В
	                      |						(ВЫБРАТЬ
	                      |							Товары.ИдентификаторСтрокиЗаявки
	                      |						ИЗ
	                      |							Товары КАК Товары)) КАК РезервыТоваровОстатки
	                      |		ПО Товары.ИдентификаторСтрокиЗаявки = РезервыТоваровОстатки.СтрокаЗаявки");
	Запрос.УстановитьПараметр("ВнешняяТаблица", СтруктураДокумента.Товары);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Склад", Склад);
	Соответствие = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("ДостаточноРезерва,ТекстОшибки", Выборка.ДостаточноРезерва, "");
		Если НЕ Структура.ДостаточноРезерва Тогда
			Структура.ТекстОшибки = "Недостаточно резерва. Нужно:" + Выборка.Количество + ", имеется:" + Выборка.КоличествоРезерв;
		КонецЕсли;
		Соответствие.Вставить(Выборка.ИдентификаторСтрокиЗаявки, Структура);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции
Функция КоличествоСУчетомОстатков(quantity_site, Номенклатура, СвободныеОстатки)
	
	ОстатокКРаспределению = quantity_site;
	СтрокиОстатков = СвободныеОстатки.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	
	Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
		
		КоличествоСписание = Мин(ОстатокКРаспределению, СтрокаОстатков.Количество);
		
		Если КоличествоСписание > 0 Тогда
			ОстатокКРаспределению = ОстатокКРаспределению - КоличествоСписание;
			СтрокаОстатков.Количество = СтрокаОстатков.Количество - КоличествоСписание;
		КонецЕсли;
		
		Если ОстатокКРаспределению = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат quantity_site - ОстатокКРаспределению;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область add
Процедура ЭкспрессДоставка_add(СтруктураОбъекта, СтруктураОтчета)
	
	СтруктураОтчета.Вставить("items", Новый Массив);
	УстановитьРеквизитыСуществующейРеализации(СтруктураОбъекта, СтруктураОтчета);
	БылоДобавление = Ложь;
	
	Если НЕ СтруктураОтчета.Error Тогда

		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		УстановитьДатыОплаты(СтруктураОбъекта);
		ЗагружаемыеОбъекты = ЗагружаемыеОбъектыРеализации(СтруктураОбъекта);
		Для Каждого СтруктураРеализации Из ЗагружаемыеОбъекты Цикл
			Если НЕ СтруктураОтчета.Error Тогда
				ЗагрузитьРеализацию(СтруктураРеализации, СтруктураОтчета, БылоДобавление);
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураОтчета.Error Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтчета.Error = СтруктураОтчета.Error ИЛИ НЕ БылоДобавление;
	
КонецПроцедуры
#КонецОбласти

#Область delete_part
Процедура ЭкспрессДоставка_delete_part(СтруктураОбъекта, СтруктураОтчета)
	
	СтруктураОтчета.Вставить("invoice_number", "");
	СтруктураОтчета.Вставить("Source", СтруктураОбъекта.Source);
	СтруктураОтчета.Вставить("items", Новый Массив);
	
	ЗагружаемыеОбъекты = ЗагружаемыеОбъекты_delete_part(СтруктураОбъекта);
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Для Каждого СтруктураРеализации Из ЗагружаемыеОбъекты Цикл
		Документ = СтруктураРеализации.Документ.ПолучитьОбъект();
		
		УдаляемыеСтроки = Новый Массив;
		Для Каждого Строка Из СтруктураРеализации.Товары Цикл
			УдаляемыеСтроки.Добавить(Документ.Товары[Строка.НомерСтроки-1]);
		КонецЦикла;
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			Документ.Товары.Удалить(Строка);
		КонецЦикла;
		
		Документ.ПометкаУдаления = Документ.Товары.Количество() = 0;

		Попытка
			Документ.Записать(?(Документ.ПометкаУдаления, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Проведение));
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			СтруктураОтчета.Error = Истина;
			ДополнитьСтроку(СтруктураОтчета.Description, ОписаниеОшибки, ";");
		КонецПопытки;
		
	КонецЦикла;
	
	Если СтруктураОтчета.error Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	СформироватьОтчет_detele_part(СтруктураОбъекта, СтруктураОтчета);

КонецПроцедуры
Функция ЗагружаемыеОбъекты_delete_part(СтруктураОбъекта)
	
	МассивОбъектов = Новый Массив;
	УдаляемыеДокументы = Новый Массив;
	ЗагружаемыеSiteID = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслугТовары.Ссылка КАК Документ,
	                      |	РеализацияТоваровУслугТовары.НомерСтроки,
	                      |	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК ИдентификаторСтрокиЗаявки
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                      |ГДЕ
	                      |	РеализацияТоваровУслугТовары.Ссылка.express_delivery_request_id = &RequestID
	                      |	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
	                      |	И РеализацияТоваровУслугТовары.СтрокаЗаявки В(&ИдентификаторыСтрокЗаявок)
	                      |ИТОГИ ПО
	                      |	Документ");
	Запрос.УстановитьПараметр("RequestID", СтруктураОбъекта.RequestID);
	Запрос.УстановитьПараметр("ИдентификаторыСтрокЗаявок", СтруктураОбъекта.Товары.ВыгрузитьКолонку("ИдентификаторСтрокиЗаявки"));
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		Структура = Новый Структура;
		Структура.Вставить("Документ", ВыборкаПоДокументам.Документ);
		ТаблицаТовары = НоваяТаблицаЗначений("НомерСтроки,ИдентификаторСтрокиЗаявки");
		ВыборкаПоСтрокам = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(), ВыборкаПоСтрокам);
			ЗагружаемыеSiteID.Добавить(ВыборкаПоСтрокам.ИдентификаторСтрокиЗаявки);
		КонецЦикла;
		Структура.Вставить("Товары", ТаблицаТовары);
		Структура.Вставить("УдаленыВсеСтроки", ТаблицаТовары.Количество() = ВыборкаПоДокументам.Документ.Товары.Количество());
		
		Если Структура.УдаленыВсеСтроки Тогда
			УдаляемыеДокументы.Добавить(ВыборкаПоДокументам.Документ);
		КонецЕсли;
		
		МассивОбъектов.Добавить(Структура);
	КонецЦикла;
	
	СтруктураОбъекта.Вставить("УдаляемыеДокументы", УдаляемыеДокументы);
	СтруктураОбъекта.Вставить("ЗагружаемыеSiteID", ЗагружаемыеSiteID);
	
	Возврат МассивОбъектов;
	
КонецФункции
Процедура СформироватьОтчет_detele_part(СтруктураОбъекта, СтруктураОтчета)
	
	ОбщаяОшибка = Истина;
	
	//Отмечаем удаление строк
	Для Каждого Строка Из СтруктураОбъекта.Товары Цикл
		СтрокаНеУдалена = СтруктураОбъекта.ЗагружаемыеSiteID.Найти(Строка.ИдентификаторСтрокиЗаявки) = Неопределено;
		description = ?(СтрокаНеУдалена, "Актуальная строка не найдена", "");
		Структура = Новый Структура("motion_id,error,description,",Строка.IDSite, СтрокаНеУдалена, description);
		СтруктураОтчета.items.Добавить(Структура);
		ОбщаяОшибка = ?(СтрокаНеУдалена, ОбщаяОшибка, Ложь);
	КонецЦикла;
	СтруктураОтчета.error = СтруктураОтчета.error ИЛИ ОбщаяОшибка;
	
	//Формируем актуальный список документов реализации
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Ссылка,
	                      |	РеализацияТоваровУслуг.Номер
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	                      |	И РеализацияТоваровУслуг.express_delivery_request_id = &express_delivery_request_id");
	Запрос.УстановитьПараметр("express_delivery_request_id", СтруктураОбъекта.RequestID);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДополнитьСтроку(СтруктураОтчета.invoice_number, Выборка.Номер, ",");
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область cancel
Процедура ЭкспрессДоставка_cancel(СтруктураОбъекта, СтруктураОтчета)
	
	СтруктураОтчета.Вставить("Source", СтруктураОбъекта.Source);
	
	ЗагружаемыеОбъекты = ЗагружаемыеОбъекты_cancel(СтруктураОбъекта, СтруктураОтчета);
	Пока ЗагружаемыеОбъекты.Следующий() Цикл
		Документ = ЗагружаемыеОбъекты.Документ.ПолучитьОбъект();
		Документ.ПометкаУдаления = Истина;
		Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
		//Мегалогист++
		Документ=ДокументМаршрутноеЗадание(Документ);
		Документ.ПометкаУдаления = Истина;
		Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//Мегалогист--
		
	КонецЦикла;
	
КонецПроцедуры
Функция ЗагружаемыеОбъекты_cancel(СтруктураОбъекта, СтруктураОтчета)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Ссылка КАК Документ
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	                      |	И РеализацияТоваровУслуг.express_delivery_request_id = &RequestID
	                      |	И РеализацияТоваровУслуг.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацииЭкспрессДоставки.ВыписанаРеализация)");
	Запрос.УстановитьПараметр("RequestID", СтруктураОбъекта.RequestID);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураОтчета.error = Истина;
		СтруктураОтчета.description = "Нет актуальных реализаций с указанным ReqiestID";
	КонецЕсли;
		
	Возврат Результат.Выбрать();
	
КонецФункции
#КонецОбласти

#Область confirm
Процедура ЭкспрессДоставка_logist_confirm(СтруктураОбъекта, СтруктураОтчета)
	
	УстановитьСтоимостьДоставки = Истина;
	ВыборкаПоСкладам = ЗагружаемыеОбъекты_confirm(СтруктураОбъекта, СтруктураОтчета);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Пока ВыборкаПоСкладам.Следующий() Цикл
		Документ = Документы.СлужебноеЗадание.СоздатьДокумент();
		ЗаполнитьДокументСлужебноеЗадание(Документ, СтруктураОбъекта, ВыборкаПоСкладам);
		ВыборкаПоРеализациям = ВыборкаПоСкладам.Выбрать();
		Пока ВыборкаПоРеализациям.Следующий() Цикл
			НоваяСтрока = Документ.Покупатели.Добавить();
			НоваяСтрока.Реализация = ВыборкаПоРеализациям.ДокументРеализации;
			НоваяСтрока.ОрганизацияОплаты = НоваяСтрока.Реализация.Организация;
			НоваяСтрока.ТорговаяТочка = НоваяСтрока.Реализация.ТорговаяТочка;
			НоваяСтрока.Регион = НоваяСтрока.ТорговаяТочка.Регион;
			ПровестиДокументРеализацииКакПодтвержденный(ВыборкаПоРеализациям.ДокументРеализации, УстановитьСтоимостьДоставки, СтруктураОбъекта, СтруктураОтчета);
		КонецЦикла;

		Если НЕ СтруктураОтчета.Error Тогда
			Документ.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураОтчета.Error Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры
Функция ЗагружаемыеОбъекты_confirm(СтруктураОбъекта, СтруктураОтчета)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Склад КАК Склад,
	                      |	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализации,
	                      |	РеализацияТоваровУслуг.Организация КАК Организация,
	                      |	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	                      |	РеализацияТоваровУслуг.ТорговаяТочка КАК ТорговаяТочка,
	                      |	РеализацияТоваровУслуг.Филиал КАК Филиал,
	                      |	РеализацияТоваровУслуг.Дата КАК ДатаОтгрузки
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.express_delivery_request_id = &RequestID
	                      |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	                      |ИТОГИ
	                      |	МАКСИМУМ(ДокументРеализации),
	                      |	МАКСИМУМ(Организация),
	                      |	МАКСИМУМ(Контрагент),
	                      |	МАКСИМУМ(ТорговаяТочка),
	                      |	МАКСИМУМ(Филиал),
	                      |	МИНИМУМ(ДатаОтгрузки)
	                      |ПО
	                      |	Склад");
	Запрос.УстановитьПараметр("RequestID", СтруктураОбъекта.RequestID);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтруктураОтчета.error = Истина;
		СтруктураОтчета.description = "Нет актуальных реализаций с указанным ReqiestID";
	КонецЕсли;
	
	Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции
Процедура ЗаполнитьДокументСлужебноеЗадание(Документ, СтруктураОбъекта, ВыборкаПоСкладам)
	
	Документ.Дата = ТекущаяДата();
	Документ.Авто = Истина;
	Документ.express_delivery_request_id = СтруктураОбъекта.RequestID;
	Документ.Организация = ВыборкаПоСкладам.Организация;
	Документ.Филиал = ВыборкаПоСкладам.Филиал;
	Документ.Склад = ВыборкаПоСкладам.Склад;
	Документ.МаршрутДоставки = СтруктураОбъекта.МаршрутДоставки;
	Документ.Водитель = СтруктураОбъекта.Водитель;
	Документ.ТранспортнаяКомпания = Документ.Водитель.ТранспортнаяКомпания;
	Документ.ТипДоставки = Справочники.ТипыДоставки.ЭкспрессДоставка;
	Документ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Документ.ДатаОтгрузки = ВыборкаПоСкладам.ДатаОтгрузки;
	Документ.ВремяОтгрузки =  ВремяОтгрузкиПоМаршруту(Документ.МаршрутДоставки, Документ.ДатаОтгрузки);
	Документ.ДатаСдачиЗадания = ДатаСдачиЗадания(Документ.ДатаОтгрузки, Документ.МаршрутДоставки);
	
КонецПроцедуры

Процедура ПровестиДокументРеализацииКакПодтвержденный(ДокументРеализации, УстановитьСтоимостьДоставки, СтруктураОбъекта, СтруктураОтчета)
	
	Документ = ДокументРеализации.ПолучитьОбъект();
	Документ.Статус = Перечисления.СтатусыРеализацииЭкспрессДоставки.ВыписанаРеализация;
	Документ.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка;
	Документ.МаршрутДоставки = СтруктураОбъекта.МаршрутДоставки;
	Документ.флНеВыгружатьВТопЛог = Ложь;
	
	Если УстановитьСтоимостьДоставки И СтруктураОбъекта.СтоимостьДоставки > 0 Тогда
		ИзменитьСтоимостьДоставки(Документ, СтруктураОбъекта.СтоимостьДоставки);
		УстановитьСтоимостьДоставки = Ложь;
	КонецЕсли;
	
	Попытка
		Документ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Документ.Записать(РежимЗаписиДокумента.Запись);
		СтруктураОтчета.Error = Истина;
		ДополнитьСтроку(СтруктураОтчета.Description, ОписаниеОшибки, ";");
	КонецПопытки;	
	
КонецПроцедуры
Процедура ИзменитьСтоимостьДоставки(Документ, СтоимостьДоставки)
	
	Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента) И Документ.ДоговорКонтрагента.ВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		ИмяПараметраУслугаДоставки = "Услуга экспресс-доставки (Безнал)";
	Иначе
		ИмяПараметраУслугаДоставки = "Услуга экспресс-доставки (Нал)";
	КонецЕсли;
	УслугаДоставки = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", ИмяПараметраУслугаДоставки, Константы.УслугаЭкспрессДоставка.Получить());
	
	СтрокаСтоимостиДоставки = Документ.Услуги.Найти(УслугаДоставки, "Номенклатура");
	
	Если СтоимостьДоставки = 0 И СтрокаСтоимостиДоставки <> Неопределено Тогда
		Документ.Услуги.Удалить(СтрокаСтоимостиДоставки);
	ИначеЕсли СтоимостьДоставки <> 0 Тогда
		Если СтрокаСтоимостиДоставки = Неопределено Тогда
			СтрокаСтоимостиДоставки = Документ.Услуги.Добавить();
			СтрокаСтоимостиДоставки.Номенклатура = УслугаДоставки;
			СтрокаСтоимостиДоставки.Содержание = УслугаДоставки.НаименованиеПолное;
			СтрокаСтоимостиДоставки.Количество = 1;
			СтрокаСтоимостиДоставки.СтавкаНДС = УслугаДоставки.СтавкаНДС;
		КонецЕсли;
		Если СтрокаСтоимостиДоставки.Цена <> СтоимостьДоставки Тогда
			СтрокаСтоимостиДоставки.Цена = СтоимостьДоставки;
			СтрокаСтоимостиДоставки.Сумма = СтоимостьДоставки;
		КонецЕсли;
		СтрокаСтоимостиДоставки.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаСтоимостиДоставки.Сумма, Документ.УчитыватьНДС, Документ.СуммаВключаетНДС, СтрокаСтоимостиДоставки.СтавкаНДС);
	КонецЕсли;			

КонецПроцедуры

#КонецОбласти

#Область ПриведениеТипов
Функция СтруктураОбъекта(ИмяКоманды, Объект)
	
	Структура = Новый Структура;
	Структура.Вставить("Команда", ИмяКоманды);
	Структура.Вставить("RequestID", Объект.express_delivery_request_id);
	Структура.Вставить("Отказ", Ложь);
	Структура.Вставить("ТекстОшибки", "");
	Если		ИмяКоманды = "ExpressDelivery.Init" Тогда
					Структура.Вставить("Контрагент", КонтрагентПоЛогину(Объект.login));
					Структура.Вставить("ТорговаяТочка", ТорговаяТочкаКонтрагента(Структура.Контрагент));
					Структура.Вставить("Менеджер", МенеджерТорговойТочки(Структура.ТорговаяТочка));
					Структура.Вставить("Дата", Объект.date_created);
					Структура.Вставить("ДатаДоставки", Объект.delivery_date);
					// + Пушкин 20181114 XX-1345
					Структура.Вставить("ВремяДоставкиС", Объект.date_statement);
					Структура.Вставить("ВремяДоставкиПо", Объект.date_arrival);
					// - Пушкин 20181114 XX-1345
					Структура.Вставить("Телефон", Объект.client_phone);
					// + Пушкин 20181204 XX-1445
					Структура.Вставить("Заказчик", Объект.client_name);
					// - Пушкин 20181204 XX-1445
					Структура.Вставить("АдресДоставки", Объект.delivery_address);
					Структура.Вставить("Товары", ТаблицаТоваров(Объект.items));
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.Add" Тогда
					Структура.Вставить("Товары", ТаблицаТоваров(Объект.items));
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.DeletePart" Тогда
					Структура.Вставить("Source", Объект.source);
					Структура.Вставить("Товары", ТаблицаТоваров(Объект.items, Истина));
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.Cancel" Тогда
					Структура.Вставить("Source", Объект.source);
	ИначеЕсли	ИмяКоманды = "ExpressDelivery.LogistConfirm" Тогда
					Структура.Вставить("МаршрутДоставки", МаршрутДоставкиПоКоду(Объект.route_code));
					Структура.Вставить("Водитель", ВодительПоUUID(Объект.driver_code));
					Структура.Вставить("СтоимостьДоставки", Объект.delivery_cost);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции
Функция КонтрагентПоЛогину(login)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УчетныеЗаписиСайта.Владелец.Владелец КАК Ссылка
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиСайта КАК УчетныеЗаписиСайта
	                      |ГДЕ
	                      |	УчетныеЗаписиСайта.Код = &login");
	Запрос.УстановитьПараметр("login", login);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
	
КонецФункции
Функция НоменклатураПоАртикулуИКодуИзготовителя(Строка, СтрокаОтчета)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Артикул = &Артикул
	                      |	И Номенклатура.Изготовитель.КодСайта = &КодИзготовителя");
	Запрос.УстановитьПараметр("Артикул", Строка.number);
	Запрос.УстановитьПараметр("КодИзготовителя", Строка.maker_id);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Номенклатура = Выборка.Ссылка;
	Иначе
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаОтчета.error = Истина;
		СтрокаОтчета.description = "Не найдена номенклатура";
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции
Функция ИдентификаторСтрокиЗаявкиПоКоду(Строка, СтрокаОтчета)
	
	IDSite = Строка.motion_id;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИдентификаторыСтрокЗаявок.Ссылка
	                      |ИЗ
	                      |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                      |ГДЕ
	                      |	ИдентификаторыСтрокЗаявок.IDSite = &IDSite");
	Запрос.УстановитьПараметр("IDSite", IDSite);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Идентификатор = Выборка.Ссылка;
	Иначе
		Идентификатор = Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка();
		СтрокаОтчета.error = Истина;
		СтрокаОтчета.description = "Не найден IDSite";
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции
Функция СкладПоКодуСайта(Строка, СтрокаОтчета)
	
	КодСайта = Строка.store_placement;
	КодСтрокой = Формат(КодСайта, "ЧЦ=9; ЧВН=; ЧГ=");
	
	Склад = Справочники.Склады.НайтиПоКоду(КодСтрокой);
	Если Склад.Пустая() Тогда
		СтрокаОтчета.error = Истина;
		СтрокаОтчета.description = "Не определен склад";
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции
Функция МаршрутДоставкиПоКоду(Код)
	
	КодСтрокой = Формат(Код, "ЧЦ=9; ЧВН=; ЧГ=");
	Возврат Справочники.МаршрутыДоставки.НайтиПоКоду(КодСтрокой);
	
КонецФункции
Функция ВодительПоUUID(UUID)
	
	Возврат Справочники.Водители.ПолучитьСсылку(UUID);
	
КонецФункции
Функция ТаблицаТоваров(items, ЭтоУдаление = Ложь)
	
	Если ЭтоУдаление Тогда
		Таблица = НоваяТаблицаЗначений("ИдентификаторСтрокиЗаявки,IDSite,error,description");
	Иначе
		Таблица = НоваяТаблицаЗначений("Номенклатура,ИдентификаторСтрокиЗаявки,IDSite,Количество,Цена,Склад,ОрганизацияПриVMI,error,description,ДатаОплаты");
	КонецЕсли;
	
	Для Каждого Строка Из items.item Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.error = Ложь;
		НоваяСтрока.description = "";
		НоваяСтрока.IDSite = Строка.motion_id;
		НоваяСтрока.ИдентификаторСтрокиЗаявки = ИдентификаторСтрокиЗаявкиПоКоду(Строка, НоваяСтрока);
		Если НЕ ЭтоУдаление Тогда
			НоваяСтрока.Количество = Строка.quantity;
			НоваяСтрока.Цена = Строка.price;
			НоваяСтрока.Номенклатура = НоменклатураПоАртикулуИКодуИзготовителя(Строка, НоваяСтрока);
			НоваяСтрока.Склад = СкладПоКодуСайта(Строка, НоваяСтрока);
			Если НоваяСтрока.Склад.СкладVMI Тогда
				НоваяСтрока.ОрганизацияПриVMI = ОрганизацияПриVMI(НоваяСтрока.ИдентификаторСтрокиЗаявки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции
Функция ДокументРеализация(СтруктураДокумента)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Реализация.Ссылка
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК Реализация
	                      |ГДЕ
	                      |	Реализация.express_delivery_request_id = &RequestID
	                      |	И Реализация.Склад = &Склад
	                      |	И Реализация.ДатаОплаты = &ДатаОплаты");
	Запрос.УстановитьПараметр("RequestID", СтруктураДокумента.RequestID);
	Запрос.УстановитьПараметр("Склад", СтруктураДокумента.Склад);
	Запрос.УстановитьПараметр("ДатаОплаты", СтруктураДокумента.ДатаОплаты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Документ = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Документ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции
Функция ОрганизацияПриVMI(ИдентификаторСтрокиЗаявки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДоговорыКонтрагентов.Организация
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                      |ГДЕ
	                      |	ДоговорыКонтрагентов.Владелец В
	                      |			(ВЫБРАТЬ
	                      |				ИдентификаторыСтрокЗаявок.ПрайсПоставщика.Владелец.Владелец КАК Контрагент
	                      |			ИЗ
	                      |				Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                      |			ГДЕ
	                      |				ИдентификаторыСтрокЗаявок.Ссылка = &ИдентификаторСтрокиЗаявки)
	                      |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	                      |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ОтветХранение)");
	Запрос.УстановитьПараметр("ИдентификаторСтрокиЗаявки", ИдентификаторСтрокиЗаявки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Организация, Справочники.Организации.ПустаяСсылка());
	
КонецФункции
Функция ТорговаяТочкаКонтрагента(Контрагент)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТорговыеТочки.Ссылка КАК ТорговаяТочка
	                      |ИЗ
	                      |	Справочник.ТорговыеТочки КАК ТорговыеТочки
	                      |ГДЕ
	                      |	ТорговыеТочки.Владелец = &Контрагент
	                      |	И НЕ ТорговыеТочки.ПометкаУдаления");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ТорговаяТочка, Справочники.ТорговыеТочки.ПустаяСсылка());
	
КонецФункции
Функция ВремяОтгрузкиПоМаршруту(МаршрутДоставки, ДатаОтгрузки)
	
	Если ЗначениеЗаполнено(МаршрутДоставки) Тогда
		ДеньНедели = ДеньНедели(ДатаОтгрузки);
		Если ДеньНедели = 6 Тогда
			ВремяОтгрузки = МаршрутДоставки.ВремяОтгрузкиСуббота;
		ИначеЕсли ДеньНедели = 7 Тогда
			ВремяОтгрузки = МаршрутДоставки.ВремяОтгрузкиВоскресенье;
		Иначе
			ВремяОтгрузки = МаршрутДоставки.ВремяОтгрузкиБудни;
		КонецЕсли;
	Иначе
		ВремяОтгрузки = Неопределено;
	КонецЕсли;
	
	Возврат ВремяОтгрузки;
	
КонецФункции
Функция ДатаСдачиЗадания(ВремяОтгрузки, МаршрутДоставки)
	
	Если ЗначениеЗаполнено(МаршрутДоставки) Тогда
		ДатаСдачиЗадания = ВремяОтгрузки + МаршрутДоставки.КоличествоДнейДоставки*60*60*24;
	Иначе
		ДатаСдачиЗадания = ВремяОтгрузки + 1;
	КонецЕсли;
	
	Возврат ДатаСдачиЗадания;
	
КонецФункции
Функция МенеджерТорговойТочки(ТорговаяТочка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МенеджерыТорговыхТочекСрезПоследних.Менеджер
	                      |ИЗ
	                      |	РегистрСведений.МенеджерыТорговыхТочек.СрезПоследних КАК МенеджерыТорговыхТочекСрезПоследних
	                      |ГДЕ
	                      |	МенеджерыТорговыхТочекСрезПоследних.ТорговаяТочка = &ТорговаяТочка
	                      |	И МенеджерыТорговыхТочекСрезПоследних.ВидМенеджера = &ВидМенеджера");
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	Запрос.УстановитьПараметр("ВидМенеджера", Перечисления.ВидыМенеджеров.Продажи);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Менеджер, Справочники.Менеджеры.ПустаяСсылка());
	
КонецФункции
Процедура УстановитьРеквизитыСуществующейРеализации(Структура, СтруктураОтчета)
	
	СтруктураОтчета.Вставить("invoice_number", "");
	
	Структура.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Структура.Вставить("ТорговаяТочка", Справочники.ТорговыеТочки.ПустаяСсылка());
	Структура.Вставить("Менеджер", Справочники.Менеджеры.ПустаяСсылка());
	Структура.Вставить("ДатаДоставки", '00010101');
	Структура.Вставить("Дата", ТекущаяДата());
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Номер,
	                      |	РеализацияТоваровУслуг.Контрагент,
	                      |	РеализацияТоваровУслуг.ТорговаяТочка,
	                      |	РеализацияТоваровУслуг.Менеджер,
	                      |	РеализацияТоваровУслуг.ДатаДоставки
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.express_delivery_request_id = &express_delivery_request_id
	                      |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления");
	Запрос.УстановитьПараметр("express_delivery_request_id", Структура.RequestID);
	Результат = Запрос.Выполнить();
	РеализацияСуществует = НЕ Результат.Пустой();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДополнитьСтроку(СтруктураОтчета.invoice_number, Выборка.Номер, ",");
	КонецЦикла;
	
	Если РеализацияСуществует Тогда
		Структура.Вставить("Контрагент", Выборка.Контрагент);
		Структура.Вставить("ТорговаяТочка", Выборка.ТорговаяТочка);
		Структура.Вставить("Менеджер", Выборка.Менеджер);
		Структура.Вставить("ДатаДоставки", Выборка.ДатаДоставки);
	Иначе
		СтруктураОтчета.Error = Истина;
		СтруктураОтчета.Description = "Не существуют экспресс-доставки, доступной для добавления товаров";
	КонецЕсли;
	
КонецПроцедуры
Функция ЗагружаемыеОбъектыРеализации(СтруктураОбъекта)
	
	МассивОбъектов = Новый Массив;
	
	ВыборкаПоГруппировкам = СтруктураОбъекта.Товары.Скопировать(,"Склад,ДатаОплаты");
	ВыборкаПоГруппировкам.Свернуть("Склад,ДатаОплаты");
	Для Каждого Группировка Из ВыборкаПоГруппировкам Цикл
		// + Пушкин 20181114 XX-1345 
		НоваяСтруктураОбъекта = Новый Структура("RequestID,Контрагент,Дата,ДатаДоставки,ВремяДоставкиС,ВремяДоставкиПо,Телефон,Заказчик,АдресДоставки,ТорговаяТочка,Менеджер");
		//НоваяСтруктураОбъекта = Новый Структура("RequestID,Контрагент,Дата,ДатаДоставки,Телефон,АдресДоставки,ТорговаяТочка,Менеджер");
		// - Пушкин 20181114 XX-1345
		ЗаполнитьЗначенияСвойств(НоваяСтруктураОбъекта, СтруктураОбъекта);
		НоваяСтруктураОбъекта.Вставить("Склад", Группировка.Склад);
		НоваяСтруктураОбъекта.Вставить("ДатаОплаты", Группировка.ДатаОплаты);
		
		ТаблицаТоваров = НоваяТаблицаЗначений("Номенклатура,IDSite,Цена,ОрганизацияПриVMI,error,description");
		ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтрокиЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
		ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		Для Каждого Строка Из СтруктураОбъекта.Товары.НайтиСтроки(Новый Структура("Склад,ДатаОплаты", Группировка.Склад, Группировка.ДатаОплаты)) Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), Строка);
		КонецЦикла;
		НоваяСтруктураОбъекта.Вставить("Товары", ТаблицаТоваров);
		
		МассивОбъектов.Добавить(НоваяСтруктураОбъекта);
	КонецЦикла;
	
	Возврат МассивОбъектов;
	
КонецФункции
#КонецОбласти

#Область Общее
Функция ЭтоЭкспрессДоставка(Имя) Экспорт
	
	Возврат Лев(Имя,16) = "ExpressDelivery.";
	
КонецФункции
Функция НоваяТаблицаЗначений(Колонки)
	
	Таблица = Новый ТаблицаЗначений;
	Структура = Новый Структура(Колонки);
	Для Каждого Колонка Из Структура Цикл
		Таблица.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции
Функция СкладыИзТоваров(ТаблицаТоваров)
	
	Таблица = ТаблицаТоваров.Скопировать(, "Склад");
	Таблица.Свернуть("Склад");
	
	Возврат Таблица.ВыгрузитьКолонку("Склад");
	
КонецФункции
Процедура ДополнитьСтроку(Строка, Подстрока, Разделитель)
	
	Строка = Строка + ?(Строка = "", "", Разделитель) + Подстрока;
	
КонецПроцедуры
Функция ОстаткиИРезервыДляРеализации()
КонецФункции
#КонецОбласти

//Сохранение информации для отчета по загрузке данных
Процедура ЗаписатьОтчетПоЗагрузке(СтруктураОтчета, НомерСообщенияВходящий)
	
	Запись = РегистрыСведений.ЭкспрессДоставкаОбмен.СоздатьМенеджерЗаписи();
	Запись.Период = ТекущаяДата();
	Запись.express_delivery_request_id = СтруктураОтчета.express_delivery_request_id;
	Запись.operation_type = СтруктураОтчета.operation_type;
	Запись.Error = СтруктураОтчета.Error;
	Запись.Description = СтруктураОтчета.Description;
	Запись.НомерПакета_вх = НомерСообщенияВходящий;
	
	//Удалим, что бы не хранить лишние данные(есть в измерениях)
	СтруктураОтчета.Удалить("express_delivery_request_id");
	СтруктураОтчета.Удалить("operation_type");
	СтруктураОтчета.Удалить("Error");
	СтруктураОтчета.Удалить("Description");
	
	Запись.ДанныеПакета = ЗначениеВСтрокуВнутр(СтруктураОтчета);
	
	Запись.Записать();

КонецПроцедуры

#КонецОбласти
#Область Выгрузка
Функция ВыгрузитьСообщениеОбменаЭкспрессДоставки(ИдентификаторУзлаОбмена) Экспорт
	
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_Сайт;
	URIПространстваИмен = "http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema";
	
	Отправитель = ПланыОбмена.ОбменПартКом83_Сайт.ЭтотУзел();
	Исходящий = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(МетаданныеПланаОбмена, ИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(Исходящий) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	
	Входящий = ОбменДаннымиКлиентСервер.ПолучитьВходящийУзелОбмена(МетаданныеПланаОбмена, ИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(Входящий) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	НомерПринятого = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Входящий, "НомерПринятого");
	
	ТипОбъекты = ФабрикаXDTO.Тип(URIПространстваИмен, "Объекты");
	ТипСообщениеОбмена = ФабрикаXDTO.Тип(URIПространстваИмен, "СообщениеОбмена");
	
	Пустышка = Новый ЗаписьXML;
	Пустышка.УстановитьСтроку("utf-8");
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(Пустышка, Исходящий);
		
	СообщениеОбмена = ФабрикаXDTO.Создать(ТипСообщениеОбмена);
	СообщениеОбмена.ПланОбмена = "ОбменПартКом83_Сайт";
	СообщениеОбмена.Отправитель = Отправитель.ИдентификаторУзла;
	СообщениеОбмена.Получатель = ИдентификаторУзлаОбмена;
	СообщениеОбмена.НомерСообщения = ЗаписьСообщения.НомерСообщения;
	СообщениеОбмена.НомерПринятого = НомерПринятого;
	
	Объекты = ФабрикаXDTO.Создать(ТипОбъекты);
	СписокОбъектов = Объекты.ПолучитьСписок("Объект");
	
	ВыгружаемыеОбъекты = ВыбратьИзмененияЭкспрессДоставки(НомерПринятого);
	Пока ВыгружаемыеОбъекты.Следующий() Цикл
		ОбъектXDTO = ОбъектОтчетаЭкспрессДоставки(ВыгружаемыеОбъекты, URIПространстваИмен);
		СписокОбъектов.Добавить(ОбъектXDTO);
		ОтметитьОтправленныеДанныеЭкспрессДоставки(ВыгружаемыеОбъекты, ЗаписьСообщения.НомерСообщения);
	КонецЦикла;
	
	СообщениеОбмена.Объекты = Объекты;
	ЗаписьСообщения.ЗакончитьЗапись();
	
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("utf-8");
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьХМЛ, СообщениеОбмена);
	
	Возврат ЗаписьХМЛ.Закрыть();	
	
КонецФункции
Функция ВыбратьИзмененияЭкспрессДоставки(НомерПринятогоПакета)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭкспрессДоставкаОбмен.Период,
	                      |	ЭкспрессДоставкаОбмен.express_delivery_request_id,
	                      |	ЭкспрессДоставкаОбмен.operation_type,
	                      |	ЭкспрессДоставкаОбмен.Error,
	                      |	ЭкспрессДоставкаОбмен.Description,
	                      |	ЭкспрессДоставкаОбмен.ДанныеПакета
	                      |ИЗ
	                      |	РегистрСведений.ЭкспрессДоставкаОбмен КАК ЭкспрессДоставкаОбмен
	                      |ГДЕ
	                      |	(ЭкспрессДоставкаОбмен.НомерПакета_исх > &НомерПринятогоПакета
	                      |			ИЛИ ЭкспрессДоставкаОбмен.НомерПакета_исх = 0)
	                      |	И НЕ ЭкспрессДоставкаОбмен.ОбработаноСайтом
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ЭкспрессДоставкаОбмен.Период");
	Запрос.УстановитьПараметр("НомерПринятогоПакета", НомерПринятогоПакета);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
Функция ОбъектОтчетаЭкспрессДоставки(ВыгружаемыйОбъект, URIПространстваИмен)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен, "ExpressDelivery.Log");
	ТипСписок = ФабрикаXDTO.Тип(URIПространстваИмен, "ExpressDelivery.LogItems");
	ТипДетальнаяЗапись = ФабрикаXDTO.Тип(URIПространстваИмен, "ExpressDelivery.LogItem");

	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ЗаполнитьЗначенияСвойств(ОбъектXDTO, ВыгружаемыйОбъект, "express_delivery_request_id,operation_type,Description");
	ОбъектXDTO.Error = ?(ВыгружаемыйОбъект.Error, 1, 0);
	
	ДанныеПакета = ЗначениеИзСтрокиВнутр(ВыгружаемыйОбъект.ДанныеПакета);
	Если		ОбъектXDTO.operation_type = "ExpressDelivery.Init" Тогда
		ОбъектXDTO.invoice_number = ДанныеПакета.invoice_number;
		ЗаполнитьДетальныеЗаписиXDTO(ОбъектXDTO, ДанныеПакета.items, ТипСписок, ТипДетальнаяЗапись)
	ИначеЕсли	ОбъектXDTO.operation_type = "ExpressDelivery.Add" Тогда
		ОбъектXDTO.invoice_number = ДанныеПакета.invoice_number;
		ЗаполнитьДетальныеЗаписиXDTO(ОбъектXDTO, ДанныеПакета.items, ТипСписок, ТипДетальнаяЗапись)
	ИначеЕсли	ОбъектXDTO.operation_type = "ExpressDelivery.DeletePart" Тогда
		ОбъектXDTO.Source = ДанныеПакета.Source;
		ОбъектXDTO.invoice_number = ДанныеПакета.invoice_number;
		ЗаполнитьДетальныеЗаписиXDTO(ОбъектXDTO, ДанныеПакета.items, ТипСписок, ТипДетальнаяЗапись)
	ИначеЕсли	ОбъектXDTO.operation_type = "ExpressDelivery.Cancel" Тогда
		ОбъектXDTO.Source = ДанныеПакета.Source;
	ИначеЕсли	ОбъектXDTO.operation_type = "ExpressDelivery.LogistConfirm" Тогда
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции
Процедура ЗаполнитьДетальныеЗаписиXDTO(ОбъектXDTO, items, ТипСписок, ТипДетальнаяЗапись)
	
	ГруппаXTDO = ФабрикаXDTO.Создать(ТипСписок);
	СписокXDTO = ГруппаXTDO.ПолучитьСписок("item");
	Для Каждого ДанныеСтроки Из items Цикл
		СтрокаXTDO = ФабрикаXDTO.Создать(ТипДетальнаяЗапись);
		ЗаполнитьЗначенияСвойств(СтрокаXTDO, ДанныеСтроки,,"error");
		СтрокаXTDO.Error = ?(ДанныеСтроки.Error, 1, 0);
		СписокXDTO.Добавить(СтрокаXTDO);
	КонецЦикла;
	ОбъектXDTO.items = ГруппаXTDO;
	
КонецПроцедуры
Процедура ОтметитьОтправленныеДанныеЭкспрессДоставки(Данные, НомерПакета)
	
	Запись = РегистрыСведений.ЭкспрессДоставкаОбмен.СоздатьМенеджерЗаписи();
	Запись.Период = Данные.Период;
	Запись.express_delivery_request_id = Данные.express_delivery_request_id;
	Запись.operation_type = Данные.operation_type;
	Запись.Прочитать();
	
	Запись.ДатаОтправкиСообщения = ТекущаяДата();
	Запись.НомерПакета_исх = НомерПакета;
	Запись.Записать();
	
КонецПроцедуры
#КонецОбласти
Процедура ОтметитьПринятыеСообщенияЭкспрессДоставки(НомерПринятого)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭкспрессДоставкаОбмен.Период,
	                      |	ЭкспрессДоставкаОбмен.express_delivery_request_id,
	                      |	ЭкспрессДоставкаОбмен.operation_type
	                      |ИЗ
	                      |	РегистрСведений.ЭкспрессДоставкаОбмен КАК ЭкспрессДоставкаОбмен
	                      |ГДЕ
	                      |	НЕ ЭкспрессДоставкаОбмен.ОбработаноСайтом
	                      |	И ЭкспрессДоставкаОбмен.НомерПакета_исх МЕЖДУ 1 И &НомерПринятого");
	Запрос.УстановитьПараметр("НомерПринятого", НомерПринятого);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ЭкспрессДоставкаОбмен.СоздатьМенеджерЗаписи();
		Запись.Период = Выборка.Период;
		Запись.express_delivery_request_id = Выборка.express_delivery_request_id;
		Запись.operation_type = Выборка.operation_type;
		Запись.Прочитать();
		
		Запись.ОбработаноСайтом = Истина;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры