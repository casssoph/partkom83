Процедура ЗагрузитьИзмененияОтУзла(IDОтправителя)Экспорт
	
	Настройка = Справочники.НастройкиРеквизитовДляОбменов.Обмен_1С_ОП_ПрайсыVMI;
	АдресВебСервиса = ?(ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза(), Настройка.СтрокаДляРабочейБазы, Настройка.СтрокаДляТестовойБазы);
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщикаПрайсыVMI;
	МенеджерПланаОбмена = ПланыОбмена.ОбменПартКом83_ОкноПоставщикаПрайсыVMI;;
	
	IDПолучателя = МенеджерПланаОбмена.ЭтотУзел().ИдентификаторУзла;
	Отправитель = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(МетаданныеПланаОбмена, IDОтправителя);
	НомерПринятого = Отправитель.НомерПринятого;
	
	Определения = Новый WSОпределения(АдресВебСервиса);
	Прокси = Новый WSПрокси(Определения, Определения.Сервисы[0].URIПространстваИмен, Определения.Сервисы[0].Имя, Определения.Сервисы[0].ТочкиПодключения[0].Имя);
	
	ОтветСервера = Прокси.GetExchangeMessage("ОбменПартКом83_VMI", IDПолучателя, НомерПринятого);
	СообщениеОбмена = ОбменДаннымиСервер.РаспаковатьСообщениеОбмена(ОтветСервера);
	
	ТипСообщениеОбмена = ФабрикаXDTO.Тип("http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema", "СообщениеОбмена");
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(СообщениеОбмена);
	ДанныеХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ, ТипСообщениеОбмена);
	НомерСообщения = ДанныеХДТО.НомерСообщения;

	СписокОбъектов = ДанныеХДТО.Объекты.ПолучитьСписок("Объект");
	Отказ = МенеджерПланаОбмена.ЗагрузитьСообщениеОбмена(СписокОбъектов, НомерСообщения);
	
	Если НЕ Отказ Тогда
		Объект = Отправитель.ПолучитьОбъект();
		Объект.НомерПринятого = НомерСообщения;
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

//Загрузка прайсов и запросов на отчет
Функция ЗагрузитьСообщениеОбмена(СписокОбъектов, НомерСообщения) Экспорт
	
	Отказ = Ложь;
	Для Каждого Объект Из СписокОбъектов цикл
		ЗагрузитьЭлемент(Объект, НомерСообщения, Отказ);
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции
Процедура ЗагрузитьЭлемент(ОбъектXDTO, НомерСообщения, Отказ) Экспорт
	
	ИмяКоманды = ОбъектXDTO.Тип().Имя;
	Если ИмяКоманды = "ПрайсыПоставщикаVMI" Тогда
		ЗагрузитьПрайсVMI(ОбъектXDTO, НомерСообщения);
	ИначеЕсли ИмяКоманды = "ОтчетПоПродажамVMIЗапрос" Тогда
		ЗагрузитьЗапросОтчетаVMI(ОбъектXDTO, НомерСообщения);
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗагрузитьПрайсVMI(ОбъектXDTO, НомерСообщения)
	
	Параметры = Новый Структура("Поставщик", ОбъектXDTO.Поставщик);
	Параметры.Вставить("ДатаЗагрузки", ОбъектXDTO.ДатаЗагрузки);
	
	Запись = РегистрыСведений.ОкноПоставщикаОбменVMI.СоздатьМенеджерЗаписи();
	Запись.ВидОбмена = Перечисления.ВидыОбменов.ОбменVMI_ОП_1С_ПрайсVMI;
	Запись.НомерСообщения = НомерСообщения;
	Запись.ID = ОбъектXDTO.ID;
	Запись.Base64 = ОбъектXDTO.ПрайсыПоставщика;
	Запись.Параметры = ЗначениеВСтрокуВнутр(Параметры);
	Запись.ДатаСоздания = ТекущаяДата();
	Запись.Записать();
	
КонецПроцедуры
Процедура ЗагрузитьЗапросОтчетаVMI(ОбъектXDTO, НомерСообщения)
	
	Параметры = Новый Структура("Поставщик", ОбъектXDTO.Поставщик);
	Параметры.Вставить("Склад", ОбъектXDTO.Склад);
	Параметры.Вставить("НачалоПериода", ОбъектXDTO.НачалоПериода);
	Параметры.Вставить("КонецПериода", ОбъектXDTO.КонецПериода);
	
	Запись = РегистрыСведений.ОкноПоставщикаОбменVMI.СоздатьМенеджерЗаписи();
	Запись.ВидОбмена = Перечисления.ВидыОбменов.ОбменVMI_ОП_1С_ЗапросОтчетVMI;
	Запись.НомерСообщения = НомерСообщения;
	Запись.ID = ОбъектXDTO.ID;
	Запись.Параметры = ЗначениеВСтрокуВнутр(Параметры);
	Запись.ДатаСоздания = ТекущаяДата();
	Запись.Записать();	
	
КонецПроцедуры

//Обработка загруженных прайсов и запросов на отчет
Процедура ОбработатьЗагруженныеОбъекты()Экспорт
	
	УдалятьОбработанныеЗаписи = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-ОП(VMI)", "Удалять обработаные записи", Ложь);
	
	Выборка = НеобработанныеОбъекты();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидОбмена = Перечисления.ВидыОбменов.ОбменVMI_ОП_1С_ПрайсVMI Тогда
			ОбработатьПрайсVMI(Выборка, УдалятьОбработанныеЗаписи);
		ИначеЕсли Выборка.ВидОбмена = Перечисления.ВидыОбменов.ОбменVMI_ОП_1С_ЗапросОтчетVMI Тогда
			ОбработатьЗапросОтчетаVMI(Выборка, УдалятьОбработанныеЗаписи);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Функция НеобработанныеОбъекты()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОкноПоставщикаОбменVMI.ВидОбмена,
	                      |	ОкноПоставщикаОбменVMI.ID,
	                      |	ОкноПоставщикаОбменVMI.Base64,
	                      |	ОкноПоставщикаОбменVMI.Параметры
	                      |ИЗ
	                      |	РегистрСведений.ОкноПоставщикаОбменVMI КАК ОкноПоставщикаОбменVMI
	                      |ГДЕ
	                      |	НЕ ОкноПоставщикаОбменVMI.Обработан
	                      |	И ОкноПоставщикаОбменVMI.ВидОбмена В (ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменVMI_ОП_1С_ПрайсVMI), ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменVMI_ОП_1С_ЗапросОтчетVMI))
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ОкноПоставщикаОбменVMI.ДатаСоздания");
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
Процедура ОбработатьПрайсVMI(ОбрабатываемыйОбъект, УдалятьОбработанныеЗаписи)
	
	Ошибка = Ложь;
	ОписаниеОшибкиСистема = "";
	ОписаниеОшибкиДляКлиента = "";
	
	Параметры = ЗначениеИзСтрокиВнутр(ОбрабатываемыйОбъект.Параметры);
	ЛимитТабличнойЧастиПрайса = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-ОП(VMI)", "Лимит табличной части прайса", 10000);
	
	Поставщик = ПоставщикПоUUID(Параметры.Поставщик, Ошибка, ОписаниеОшибкиСистема);
	ДатаЗагрузки = Параметры.ДатаЗагрузки;
	Если НЕ Ошибка Тогда
		Попытка
			Таблица = ПолучитьТаблицуИзBASE64(ОбрабатываемыйОбъект.Base64);
			КоличествоСтрокПрайса = Таблица.Количество();
			Если КоличествоСтрокПрайса > ЛимитТабличнойЧастиПрайса Тогда
				Ошибка = Истина;
				ОписаниеОшибкиСистема = "Количество строк прайса(" + КоличествоСтрокПрайса + ") превышает максимально допустимое(" + ЛимитТабличнойЧастиПрайса + ")";
				ОписаниеОшибкиДляКлиента = "Количество строк прайса(" + КоличествоСтрокПрайса + ") превышает максимально допустимое(" + ЛимитТабличнойЧастиПрайса + ")";
			Иначе
				РезультатЗагрузки = ЭлектронныеДокументы.ЗагрузитьПрайсПоставщикаИзОП(Поставщик, ДатаЗагрузки, Таблица);
				Если РезультатЗагрузки.Результат Тогда
					ОписаниеОшибкиСистема = "Создан документ:" + РезультатЗагрузки.СсылкаНаДокумент;
					ОписаниеОшибкиДляКлиента = "Прайс загружен";
					Параметры.Вставить("Документ", РезультатЗагрузки.СсылкаНаДокумент);
				Иначе
					Ошибка = НЕ РезультатЗагрузки.Результат;
					ОписаниеОшибкиСистема = РезультатЗагрузки.ОписаниеОшибкиСистема;
					ОписаниеОшибкиДляКлиента = РезультатЗагрузки.ОписаниеОшибкиДляКлиента;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Ошибка = Истина;
			ОписаниеОшибкиСистема =	"Не удалось загрузить прайс поставщика VMI(Окно поставщика)" + Символы.ПС +
								"Поставщик: " + Поставщик + "(Код:" + Поставщик.Код + ")" + Символы.ПС +
								ОписаниеОшибки();
			РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиПрайсаПоставщика, ОписаниеОшибкиСистема, "Ошибка загрузки прайса VMI(Окно поставщика)");
		КонецПопытки;
	КонецЕсли;

	Параметры.Вставить("Ошибка", Ошибка);
	Параметры.Вставить("ОписаниеОшибкиСистема", ОписаниеОшибкиСистема);
	Параметры.Вставить("ОписаниеОшибкиДляКлиента", ОписаниеОшибкиДляКлиента);
	
	//Отмечаем обработанный прайс//
	Запись = РегистрыСведений.ОкноПоставщикаОбменVMI.СоздатьМенеджерЗаписи();
	Запись.ВидОбмена = Перечисления.ВидыОбменов.ОбменVMI_ОП_1С_ПрайсVMI;
	Запись.ID = ОбрабатываемыйОбъект.ID;
	Если УдалятьОбработанныеЗаписи Тогда
		Запись.Удалить();
	Иначе
		Запись.Прочитать();
		Запись.Параметры = ЗначениеВСтрокуВнутр(Параметры);
		Запись.ДатаОбработки = ТекущаяДата();
		Запись.Обработан = Истина;
		Запись.Записать();
	КонецЕсли;
	
	//Создаем отчет о загрузке//
	Запись = РегистрыСведений.ОкноПоставщикаОбменVMI.СоздатьМенеджерЗаписи();
	Запись.ВидОбмена = Перечисления.ВидыОбменов.ОбменVMI_1С_ОП_ПрайсVMI;
	Запись.ID = ОбрабатываемыйОбъект.ID;
	Запись.Параметры = ЗначениеВСтрокуВнутр(Параметры);
	Запись.ДатаСоздания = ТекущаяДата();
	Запись.Записать();
	
КонецПроцедуры
Процедура ОбработатьЗапросОтчетаVMI(ОбрабатываемыйОбъект, УдалятьОбработанныеЗаписи)
	
	Ошибка = Ложь;
	ТекстОшибки = "";
	Параметры = ЗначениеИзСтрокиВнутр(ОбрабатываемыйОбъект.Параметры);
	Поставщик = ПоставщикПоUUID(Параметры.Поставщик, Ошибка, ТекстОшибки);
	Склад = Справочники.Склады.ПолучитьСсылку(Параметры.Склад);
	НачалоПериода = Параметры.НачалоПериода;
	КонецПериода = Параметры.КонецПериода;
	ID = ОбрабатываемыйОбъект.ID;
	
	Если НЕ Ошибка Тогда
		Попытка
			Отчет = Отчеты.ОтчетVMI_ОкноПоставщика.Создать();
			ТабличныйДокумент = Отчет.СформироватьОтчет(Поставщик, Склад, НачалоПериода, КонецДня(КонецПериода));
			
			ИмяФайла = ПолучитьИмяВременногоФайла("xls");
			ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			Значение = Base64Строка(ДвоичныеДанные);
			
			Ошибка = Ложь;
			ТекстОшибки = "Отчет сформирован";
		Исключение
			Ошибка = Истина;
			ТекстОшибки = ОписаниеОшибки();
			Значение = "";
		КонецПопытки;
		
		Параметры.Вставить("Ошибка", Ошибка);
		Параметры.Вставить("ТекстОшибки", ТекстОшибки);
		
		Запись = РегистрыСведений.ОкноПоставщикаОбменVMI.СоздатьМенеджерЗаписи();
		Запись.ВидОбмена = Перечисления.ВидыОбменов.ОбменVMI_1С_ОП_ОтчетVMI;
		Запись.ID = ID;
		Запись.Base64 = Значение;
		Запись.Параметры = ЗначениеВСтрокуВнутр(Параметры);
		Запись.ДатаСоздания = ТекущаяДата();
		Запись.Записать();
	Иначе
		Параметры.Вставить("Ошибка", Ошибка);
		Параметры.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Запись = РегистрыСведений.ОкноПоставщикаОбменVMI.СоздатьМенеджерЗаписи();
	Запись.ВидОбмена = Перечисления.ВидыОбменов.ОбменVMI_ОП_1С_ЗапросОтчетVMI;
	Запись.ID = ОбрабатываемыйОбъект.ID;
	Если УдалятьОбработанныеЗаписи Тогда
		Запись.Удалить();
	Иначе
		Запись.Прочитать();
		Запись.Обработан = Истина;
		Запись.ДатаОбработки = ТекущаяДата();
		Запись.Параметры = ЗначениеВСтрокуВнутр(Параметры);
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьСообщениеОбмена(ИдентификаторПолучателя, НомерПринятого, НеСжиматьСообщение = Ложь) Экспорт
	
	Отправитель = ЭтотУзел();
	Получатель = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщикаПрайсыVMI, ИдентификаторПолучателя);
	Если НЕ ЗначениеЗаполнено(Получатель) тогда
		ВызватьИсключение "[ВыгрузитьСообщениеОбмена]: неправильный параметр номер 1.";	
	КонецЕсли;
	
	НомерСообщения = Получатель.НомерОтправленного + 1;
	
	ТипОбъекты = ФабрикаXDTO.Тип("http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema", "Объекты");
	ТипСообщениеОбмена = ФабрикаXDTO.Тип("http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema", "СообщениеОбмена");
	
		
	СообщениеОбмена = ФабрикаXDTO.Создать(ТипСообщениеОбмена);
	СообщениеОбмена.ПланОбмена = "ОбменПартКом83_ОкноПоставщикаПрайсыVMI";
	СообщениеОбмена.Отправитель = Отправитель.ИдентификаторУзла;
	СообщениеОбмена.Получатель = ИдентификаторПолучателя;
	СообщениеОбмена.НомерСообщения = НомерСообщения;
	СообщениеОбмена.НомерПринятого = Получатель.НомерПринятого;
	
	Объекты = ФабрикаXDTO.Создать(ТипОбъекты);
	СписокОбъектов = Объекты.ПолучитьСписок("Объект");
	
	ОтметитьПринятыеОбъекты(НомерПринятого);
	ВыгрузитьНовыеОтчеты(СписокОбъектов, НомерСообщения, НомерПринятого);
	ВыгрузитьЛогЗагрузкиПрайсов(СписокОбъектов, НомерСообщения, НомерПринятого);
	
	СообщениеОбмена.Объекты = Объекты;
	
	ЕстьОбъектыОбмена = СписокОбъектов.Количество() > 0;
	
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("utf-8");
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьХМЛ, СообщениеОбмена);
	
	Объект = Получатель.ПолучитьОбъект();
	Объект.НомерОтправленного = НомерСообщения;
	Объект.Записать();
	
	НесжатоеСообщение = ЗаписьХМЛ.Закрыть();
	УпакованноеСообщение = ОбщегоНазначенияВызовСервера.ЗапаковатьСообщение(НесжатоеСообщение);
	Если ЕстьОбъектыОбмена Тогда
		ОбменДаннымиВызовСервера.ЗарегистрироватьСообщениеВИсторииОбменаССайтом(Отправитель.ИдентификаторУзла, ИдентификаторПолучателя, УпакованноеСообщение, НомерПринятого); 
	КонецЕсли;
	
	Возврат ?(НеСжиматьСообщение, НесжатоеСообщение, УпакованноеСообщение);
	
КонецФункции
Процедура ОтметитьПринятыеОбъекты(НомерПринятого)
	
	УдалятьОбработанныеЗаписи = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-ОП(VMI)", "Удалять обработаные записи", Ложь);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОкноПоставщикаОбменVMI.ВидОбмена,
	                      |	ОкноПоставщикаОбменVMI.ID
	                      |ИЗ
	                      |	РегистрСведений.ОкноПоставщикаОбменVMI КАК ОкноПоставщикаОбменVMI
	                      |ГДЕ
	                      |	ОкноПоставщикаОбменVMI.ВидОбмена В (ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменVMI_1С_ОП_ОтчетVMI), ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменVMI_1С_ОП_ПрайсVMI))
	                      |	И НЕ ОкноПоставщикаОбменVMI.Обработан
	                      |	И ОкноПоставщикаОбменVMI.НомерСообщения <= &НомерПринятого
	                      |	И ОкноПоставщикаОбменVMI.ДатаОбработки <> ДАТАВРЕМЯ(1, 1, 1)
	                      |	И ОкноПоставщикаОбменVMI.НомерСообщения <> 0");
	
	Запрос.УстановитьПараметр("НомерПринятого", НомерПринятого);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ОкноПоставщикаОбменVMI.СоздатьМенеджерЗаписи();
		Запись.ВидОбмена = Выборка.ВидОбмена;
		Запись.ID = Выборка.ID;
		Если УдалятьОбработанныеЗаписи Тогда
			Запись.Удалить();
		Иначе
			Запись.Прочитать();
			Запись.Обработан = Истина;
			Запись.ДатаОбработки = ТекущаяДата();
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Процедура ВыгрузитьНовыеОтчеты(МассивОбъектов, НомерСообщения, НомерПринятого)
	
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema", "ОтчетПоПродажамVMI");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОкноПоставщикаОбменVMI.ВидОбмена,
	                      |	ОкноПоставщикаОбменVMI.ID КАК ID,
	                      |	ОкноПоставщикаОбменVMI.Base64 КАК ОтчетBase64,
	                      |	ОкноПоставщикаОбменVMI.Параметры
	                      |ИЗ
	                      |	РегистрСведений.ОкноПоставщикаОбменVMI КАК ОкноПоставщикаОбменVMI
	                      |ГДЕ
	                      |	ОкноПоставщикаОбменVMI.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменVMI_1С_ОП_ОтчетVMI)
	                      |	И НЕ ОкноПоставщикаОбменVMI.Обработан
	                      |	И (ОкноПоставщикаОбменVMI.НомерСообщения > &НомерПринятого
	                      |			ИЛИ ОкноПоставщикаОбменVMI.НомерСообщения = 0)");
	Запрос.УстановитьПараметр("НомерПринятого", НомерПринятого);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			Параметры = ЗначениеИзСтрокиВнутр(Выборка.Параметры);
			ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
			ЗаполнитьЗначенияСвойств(ОбъектXDTO, Выборка, "ID,ОтчетBase64");
			ЗаполнитьЗначенияСвойств(ОбъектXDTO, Параметры, "Ошибка,ТекстОшибки");
			
			МассивОбъектов.Добавить(ОбъектXDTO);
			
			Запись = РегистрыСведений.ОкноПоставщикаОбменVMI.СоздатьМенеджерЗаписи();
			Запись.ID = Выборка.ID;
			Запись.ВидОбмена = Выборка.ВидОбмена;
			Запись.Прочитать();
			Запись.ДатаОбработки = ТекущаяДата();
			Запись.НомерСообщения = НомерСообщения;
			Запись.Записать();
		Исключение
			ТекстСообщения =	"Не удалось сформировать пакет для сайта с отчетом VMI ID:" + Выборка.ID + Символы.ПС +
								ОписаниеОшибки();
			РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиПрайсаПоставщика, ТекстСообщения, "Ошибка загрузки прайса VMI(Окно поставщика)");
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры
Процедура ВыгрузитьЛогЗагрузкиПрайсов(МассивОбъектов, НомерСообщения, НомерПринятого)
	
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema", "ПрайсыПоставщикаVMIЗагрузка");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОкноПоставщикаОбменVMI.ВидОбмена,
	                      |	ОкноПоставщикаОбменVMI.ID КАК ID,
	                      |	ОкноПоставщикаОбменVMI.Параметры
	                      |ИЗ
	                      |	РегистрСведений.ОкноПоставщикаОбменVMI КАК ОкноПоставщикаОбменVMI
	                      |ГДЕ
	                      |	ОкноПоставщикаОбменVMI.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменVMI_1С_ОП_ПрайсVMI)
	                      |	И НЕ ОкноПоставщикаОбменVMI.Обработан
	                      |	И (ОкноПоставщикаОбменVMI.НомерСообщения > &НомерПринятого
	                      |			ИЛИ ОкноПоставщикаОбменVMI.НомерСообщения = 0)");
	Запрос.УстановитьПараметр("НомерПринятого", НомерПринятого);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			Параметры = ЗначениеИзСтрокиВнутр(Выборка.Параметры);
			ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
			ЗаполнитьЗначенияСвойств(ОбъектXDTO, Выборка, "ID");
			ЗаполнитьЗначенияСвойств(ОбъектXDTO, Параметры, "Ошибка");
			ОбъектXDTO.ТекстОшибки = Параметры.ОписаниеОшибкиДляКлиента;
			
			МассивОбъектов.Добавить(ОбъектXDTO);
			
			Запись = РегистрыСведений.ОкноПоставщикаОбменVMI.СоздатьМенеджерЗаписи();
			Запись.ID = Выборка.ID;
			Запись.ВидОбмена = Выборка.ВидОбмена;
			Запись.Прочитать();
			Запись.ДатаОбработки = ТекущаяДата();
			Запись.НомерСообщения = НомерСообщения;
			Запись.Записать();
		Исключение
			ТекстСообщения =	"Не удалось сформировать пакет для сайта с логом загрузки прайса VMI:" + Выборка.ID + Символы.ПС +
								ОписаниеОшибки();
			РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиПрайсаПоставщика, ТекстСообщения, "Ошибка загрузки прайса VMI(Окно поставщика)");
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//Служебные процедуры
Функция ПоставщикПоUUID(UUID, Ошибка, ТекстОшибки)
	
	Поставщик = Справочники.Контрагенты.ПолучитьСсылку(UUID);
	Если Поставщик.Пустая() Тогда
		Ошибка = Истина;
		ТекстОшибки = "Не определен поставщик по коду: " + UUID;
	КонецЕсли;
	Возврат Поставщик;
	
КонецФункции
Функция ПолучитьТаблицуИзBASE64(СтрокаBase64, Разделитель = ";") Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТипаСтрока = Новый ОписаниеТипов(Массив,,Новый КвалификаторыСтроки(100));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("АртикулПоставщика", ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("ИзготовительПоставщика", ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("Артикул", ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("Изготовитель", ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("МинимальныйОстаток", Новый ОписаниеТипов("Число"));
	
	ДвоичныеДанные = Base64Значение(СтрокаBase64);
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	Чтение = Новый ЧтениеДанных(Поток);
	Чтение.КодировкаТекста = КодировкаТекста.ANSI;
	Строка = Чтение.ПрочитатьСтроку();
	Пока ЗначениеЗаполнено(Строка) Цикл
		МногострочнаяСтрока = СтрЗаменить(Строка, Разделитель, Символы.ПС);
		Если СтрЧислоСтрок(МногострочнаяСтрока) >= 5 Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Артикул = СтрПолучитьСтроку(МногострочнаяСтрока, 1);
			НоваяСтрока.Изготовитель = СтрЗаменить(СтрПолучитьСтроку(МногострочнаяСтрока , 2), """", "");
			НоваяСтрока.Цена = Число(СтрПолучитьСтроку(МногострочнаяСтрока, 3));
			НоваяСтрока.АртикулПоставщика = СтрЗаменить(СтрПолучитьСтроку(МногострочнаяСтрока, 4), """", "");
			НоваяСтрока.ИзготовительПоставщика = СтрЗаменить(СтрПолучитьСтроку(МногострочнаяСтрока, 5), """", "");
			Если СтрЧислоСтрок(МногострочнаяСтрока) >= 6 Тогда
				НоваяСтрока.МинимальныйОстаток = Число(СтрПолучитьСтроку(МногострочнаяСтрока, 6));
			КонецЕсли;
		КонецЕсли;
		Строка = Чтение.ПрочитатьСтроку();
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции
