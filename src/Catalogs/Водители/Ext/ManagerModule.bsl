Функция ПолучитьРеквизитыКонтроля(МетаданныеОтбора) Экспорт
	
	СтруктураПроверяемыхРеквизитов = Новый Структура;
	
	Если МетаданныеОтбора = Метаданные.ПланыОбмена.ОбменПартКом83_Сайт Тогда
		СтруктураПроверяемыхРеквизитов.Вставить("Шапка", "Наименование,Код,ТранспортнаяКомпания,ГосударственныйНомер,Автомобиль,ФизЛицо,Родитель");
	КонецЕсли;
	
	Возврат СтруктураПроверяемыхРеквизитов;
	
КонецФункции

Функция ПолучитьЗначенияРеквизитовКонтроля(СсылкаНаОбъект, МетаданныеОтбора) Экспорт
	
	Возврат	РаботаСПоследовательностямиКлиентСервер.ПолучитьЗначенияРеквизитовКонтроля(СсылкаНаОбъект, МетаданныеОтбора);
	
КонецФункции

Функция ВыгрузитьЭлементы(ТаблицаСсылокНаОбъекты, МетаданныеПланаОбмена, ВыгружаемыеОбъекты = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	ОбъектыОбмена = ДанныеЗарегистрированныхОбъектов(ТаблицаСсылокНаОбъекты);
	Если МетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog Тогда
		//Добавлено Валиахметов А.А. 07.03.2018 Закомментировал
		//ВыгрузитьДанныеПланаОбменПартКом83_TopLog(Результат, ОбъектыОбмена)	
		//Конец Добавлено Валиахметов А.А. 07.03.2018
	ИначеЕсли МетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_Сайт Тогда 
		ВыгрузитьДанныеПланаОбменаОбменПартКом83_Сайт(Результат, ОбъектыОбмена)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьЭлемент(ОбъектXDTO, Отправитель, Отказ, Параметры) Экспорт
	
	лКлючАлгоритма = "Справочник_Водители_МодульМенеджера_ЗагрузитьЭлемент";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	лМетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(Отправитель));
	Если (лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog
		Или лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog_РТУ) тогда
		Попытка
			лСсылкаНаОбъект = ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
			лОбъект = лСсылкаНаОбъект.ПолучитьОбъект();
			
			Если (лОбъект = Неопределено) тогда
				Если ОбъектXDTO.ЭтоГруппа Тогда 
					лОбъект = СоздатьГруппу();
				Иначе
					лОбъект = СоздатьЭлемент();
				КонецЕсли;
				лОбъект.УстановитьСсылкуНового(лСсылкаНаОбъект);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(лОбъект, ОбъектXDTO, "Наименование,ПометкаУдаления");
			Если Не лОбъект.ЭтоГруппа Тогда 
				ЗаполнитьЗначенияСвойств(лОбъект, ОбъектXDTO, "Телефон,ДатаУвольнения,ID,Служебный,МаркаАвтомобиля");
				Если Не ПустаяСтрока(ОбъектXDTO.ТранспортнаяКомпания) Тогда 
					лОбъект.ТранспортнаяКомпания = Справочники.ТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ТранспортнаяКомпания)).Владелец;
				Иначе
					лОбъект.ТранспортнаяКомпания = Неопределено;
				КонецЕсли;
				лОбъект.ГосударственныйНомер = ОбъектXDTO.ГосНомер;
			КонецЕсли;
			Если Не ПустаяСтрока(ОбъектXDTO.Родитель) Тогда 
				лОбъект.Родитель = ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Родитель));
			Иначе
				лОбъект.Родитель = Неопределено;	
			КонецЕсли;
			лОбъект.Записать();
			//Семенов И.П. 07.02.2019 XX-1768(
			ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(лОбъект.Ссылка, ОбъектXDTO);
			//)Семенов И.П.
		Исключение
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
			СтруктураОшибки.Вставить("GUID", ОбъектXDTO.Ссылка);
			СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "Водители");
			СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
			СтруктураОшибки.Вставить("НомерСообщения", Параметры.НомерСообщения);
			СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
			СтруктураОшибки.Вставить("НомерПотока", ?(лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 0, 1));
			ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
			//Семенов И.П. 07.02.2019 XX-1768(
			лСсылкаНаОбъект = ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
			ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(лСсылкаНаОбъект, ОбъектXDTO,,Истина,СтруктураОшибки.СообщениеОбОшибке);
			//)Семенов И.П.
		КонецПопытки;
					
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДанныеПланаОбменаОбменПартКом83_Сайт(МассивОбъектов, ОбъектыОбмена)
	
	URI = ПланыОбмена.ОбменПартКом83_Сайт.URIПространстваИмен();
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(URI, "Справочники.Водители");
	ТипУдалениеОбъекта = ФабрикаXDTO.Тип(URI, "УдалениеОбъекта");
	
	Выборка = ОбъектыОбмена[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
		ОбъектXDTO.Ссылка = Выборка.Ссылка.УникальныйИдентификатор();
		ОбъектXDTO.parent_uuid = Выборка.Ссылка.Родитель.УникальныйИдентификатор();
		ЗаполнитьЗначенияСвойств(ОбъектXDTO, Выборка,,"Ссылка");
		//Семенов И.П. 07.02.2019 XX-1768(
		ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(Выборка.Ссылка, ОбъектXDTO);
		//)Семенов И.П.
		МассивОбъектов.Добавить(ОбъектXDTO);
	КонецЦикла;	
		
	Выборка = ОбъектыОбмена[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектXDTO = ФабрикаXDTO.Создать(ТипУдалениеОбъекта);
		ОбъектXDTO.ТипОбъекта = "Справочники.Водители";
		ОбъектXDTO.Ссылка = Выборка.Ссылка.УникальныйИдентификатор();
		//Семенов И.П. 07.02.2019 XX-1768(
		ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(Выборка.Ссылка, ОбъектXDTO);
		//)Семенов И.П.
		МассивОбъектов.Добавить(ОбъектXDTO);
	КонецЦикла;

	
КонецПроцедуры

Процедура ВыгрузитьДанныеПланаОбменПартКом83_TopLog(МассивОбъектов, ОбъектыОбмена)
	
	URI = ПланыОбмена.ОбменПартКом83_TopLog.URIПространстваИмен();
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(URI, "Справочники.Водители");
	ТипУдалениеОбъекта = ФабрикаXDTO.Тип(URI, "УдалениеОбъекта");
	
	Выборка = ОбъектыОбмена[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
		ОбъектXDTO.Ссылка = XMLСтрока(Выборка.Ссылка);
		ЗаполнитьЗначенияСвойств(ОбъектXDTO, Выборка,,"Ссылка");
		//Семенов И.П. 12.02.2019 XX-1768(
		ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(Выборка.Ссылка, ОбъектXDTO);
		//)Семенов И.П.
		МассивОбъектов.Добавить(ОбъектXDTO);
	КонецЦикла;	
		
	Выборка = ОбъектыОбмена[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектXDTO = ФабрикаXDTO.Создать(ТипУдалениеОбъекта);
		ОбъектXDTO.ТипОбъекта = "Справочники.Водители";
		ОбъектXDTO.Ссылка = XMLСтрока(Выборка.Ссылка);
		//Семенов И.П. 12.02.2019 XX-1768(
		ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(Выборка.Ссылка, ОбъектXDTO);
		//)Семенов И.П
		МассивОбъектов.Добавить(ОбъектXDTO);
	КонецЦикла;

	
КонецПроцедуры

Функция ДанныеЗарегистрированныхОбъектов(ТаблицаСсылокНаОбъекты)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВнешняяТаблица.Ссылка
	                      |ПОМЕСТИТЬ ЗарегистрированныеОбъекты
	                      |ИЗ
	                      |	&ТаблицаСсылокНаОбъекты КАК ВнешняяТаблица
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ЗарегистрированныеОбъекты.Ссылка КАК Справочник.Водители) КАК Ссылка,
	                      |	ВЫБОР
	                      |		КОГДА ВЫРАЗИТЬ(ЗарегистрированныеОбъекты.Ссылка КАК Справочник.Водители).ВерсияДанных ЕСТЬ NULL
	                      |				И (ВЫРАЗИТЬ(ЗарегистрированныеОбъекты.Ссылка КАК Справочник.Водители)) <> ЗНАЧЕНИЕ(Справочник.Водители.ПустаяСсылка)
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ЭтоУдаление
	                      |ПОМЕСТИТЬ Объекты
	                      |ИЗ
	                      |	ЗарегистрированныеОбъекты КАК ЗарегистрированныеОбъекты
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Объекты.Ссылка,
	                      |	Объекты.Ссылка.Наименование КАК Наименование,
	                      |	Объекты.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	                      |	ЕСТЬNULL(Объекты.Ссылка.Автомобиль.Наименование, """") КАК Автомобиль,
	                      |	ЕСТЬNULL(Объекты.Ссылка.ГосударственныйНомер, """") КАК ГосударственныйНомер,
	                      |	ЕСТЬNULL(Объекты.Ссылка.ТранспортнаяКомпания.ОсновнаяТорговаяТочка.Наименование, """") КАК ТранспортнаяКомпания,
	                      |	Объекты.Ссылка.Код КАК driver_code,
	                      |	ЕСТЬNULL(Объекты.Ссылка.Телефон, """") КАК phone_number,
	                      |	Объекты.Ссылка.Наименование КАК name,
	                      |	ЕСТЬNULL(Объекты.Ссылка.МаркаАвтомобиля, """") КАК vehicle,
	                      |	ЕСТЬNULL(Объекты.Ссылка.ГосударственныйНомер, """") КАК vehicle_number,
	                      |	ВЫБОР
	                      |		КОГДА Объекты.Ссылка.ЭтоГруппа
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК is_folder,
	                      |	ЕСТЬNULL(Объекты.Ссылка.Родитель.Код, 0) КАК parent_code,
	                      |	ВЫБОР
	                      |		КОГДА Объекты.Ссылка.ПометкаУдаления
	                      |			ТОГДА ""delete""
	                      |		ИНАЧЕ ""change""
	                      |	КОНЕЦ КАК operation_type
	                      |ИЗ
	                      |	Объекты КАК Объекты
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |		ПО Объекты.Ссылка.ФизЛицо.Ссылка = КонтактнаяИнформация.Объект
	                      |			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	                      |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний))
	                      |ГДЕ
	                      |	НЕ Объекты.ЭтоУдаление
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Объекты.Ссылка
	                      |ИЗ
	                      |	Объекты КАК Объекты
	                      |ГДЕ
	                      |	Объекты.ЭтоУдаление");
	Запрос.УстановитьПараметр("ТаблицаСсылокНаОбъекты", ТаблицаСсылокНаОбъекты);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// + Пушкин 2019032019 XX-1991
Функция НазначитьПароль(л_НомерТелефона) Экспорт
	
	л_Пароль = 
				Сред(л_НомерТелефона,5,1) +
				Сред(л_НомерТелефона,7,1) +
				Сред(л_НомерТелефона,9,1) ;
	
	Возврат л_Пароль;	
КонецФункции

Функция СоздатьПользователяИБ(л_НомерТелефона, л_Пароль)  Экспорт
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(л_НомерТелефона);	
	
	Если ПользовательИБ = Неопределено Тогда
		
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			
			ПользовательИБ.Имя       = л_НомерТелефона;
			ПользовательИБ.ПолноеИмя = ПользовательИБ.Имя;
			ПользовательИБ.Пароль = л_Пароль;
			ПользовательИБ.ПоказыватьВСпискеВыбора = Истина;
			ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
			ПользовательИБ.АутентификацияОС = Ложь;
			ПользовательИБ.АутентификацияСтандартная = Истина;
			
			ПользовательИБ.Роли.Очистить();
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.Пользователь);
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.Мегалогист);
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.МегаЛогист_ПодключениеМобильноеПриложение);
			
			ПользовательИБ.Записать();
		
	КонецЕсли;
	
	Возврат ПользовательИБ;
КонецФункции	

Функция СоздатьПользователяСпр(л_НомерТелефона, л_ПользовательИБ, л_ФИО) Экспорт
	
	л_Пользователь = Справочники.Пользователи.ПустаяСсылка();
	Если л_ПользовательИБ  = Неопределено Тогда
		Возврат л_Пользователь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
				    "ВЫБРАТЬ
				    |	Пользователи.Ссылка,
				    |	Пользователи.ИдентификаторПользователяИБ,
				    |	Пользователи.ФизЛицо,
				    |	Пользователи.Родитель
				    |ИЗ
				    |	Справочник.Пользователи КАК Пользователи
				    |ГДЕ
				    |	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", л_ПользовательИБ.УникальныйИдентификатор);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		
        Попытка
				н_Пользователь = Справочники.Пользователи.СоздатьЭлемент();
				н_Пользователь.Код = л_НомерТелефона;
				н_Пользователь.Наименование = л_НомерТелефона;
				н_Пользователь.ИдентификаторПользователяИБ = л_ПользовательИБ.УникальныйИдентификатор;
				н_Пользователь.ФизЛицо = СоздатьФизика(л_НомерТелефона, л_ФИО);
				н_Пользователь.Родитель = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Справочник.Пользователи", "ГруппаПользователей_МегаЛогист_ПодключениеМобильноеПриложение", Справочники.Пользователи.ПустаяСсылка());
		
                н_Пользователь.Записать();
				л_Пользователь = н_Пользователь.Ссылка;
				
				МенеджерЗаписи = РегистрыСведений.ЗначенияДополнительныхПравПользователя.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Пользователь = л_Пользователь;
				МенеджерЗаписи.Право = ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРаботуВБазе;
				МенеджерЗаписи.Значение = Истина;
				МенеджерЗаписи.Записать();
				
        Исключение
                Возврат л_Пользователь;
        КонецПопытки;
		

	Иначе
		л_Пользователь = Результат[0].Ссылка;
		
		н_Пользователь = л_Пользователь.ПолучитьОбъект();
		
		н_Пользователь.Код = л_НомерТелефона;
		н_Пользователь.Наименование = л_НомерТелефона;
		н_Пользователь.ИдентификаторПользователяИБ = л_ПользовательИБ.УникальныйИдентификатор;
		н_Пользователь.ФизЛицо = СоздатьФизика(л_НомерТелефона, л_ФИО);
		н_Пользователь.Родитель = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Справочник.Пользователи", "ГруппаПользователей_МегаЛогист_ПодключениеМобильноеПриложение", Справочники.Пользователи.ПустаяСсылка());
		
        Попытка
                н_Пользователь.Записать();
        Исключение
                Возврат Справочники.Пользователи.ПустаяСсылка();
        КонецПопытки;
		
	КонецЕсли;
		
	Возврат л_Пользователь;
КонецФункции	

Функция СоздатьФизика(л_НомерТелефона, л_ФИО)  Экспорт
	
	л_Физик = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛица.Ссылка,
				|	ФизическиеЛица.Родитель,
				|	ФизическиеЛица.Наименование
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|ГДЕ
				|	ФизическиеЛица.Наименование = &Наименование";	
	Запрос.УстановитьПараметр("Наименование", л_ФИО);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
	
		Попытка
			
			ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ФизЛицо.Наименование = л_ФИО;
			ФизЛицо.Комментарий = л_НомерТелефона;
			ФизЛицо.Записать();
			
			л_Физик = ФизЛицо.Ссылка;
		Исключение
			Возврат л_Физик;	
		КонецПопытки;
	
	Иначе
		л_Физик = Результат[0].Ссылка;
	КонецЕсли;
	
	Возврат л_Физик;
	
КонецФункции
// - Пушкин 2019032019 XX-1991

// + Пушкин 20190321 XX-2193
Функция ОтправитьSMSводителю(пар_Структура) Экспорт
	
	отправить_послание = Истина;
	
	Если пар_Структура.Повтор = Ложь Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналSMSоповещенияСрезПоследних.Период,
		|	ЖурналSMSоповещенияСрезПоследних.Отправлено,
		|	ЖурналSMSоповещенияСрезПоследних.Статус,
		|	ЖурналSMSоповещенияСрезПоследних.id,
		|	ЖурналSMSоповещенияСрезПоследних.Источник,
		|	ЖурналSMSоповещенияСрезПоследних.ВидSMSоповещения,
		|	ЖурналSMSоповещенияСрезПоследних.Получатель_КА,
		|	ЖурналSMSоповещенияСрезПоследних.Получатель_НомерТелефона,
		|	ЖурналSMSоповещенияСрезПоследних.ТекстSMSоповещения,
		|	ЖурналSMSоповещенияСрезПоследних.Дата_Формирования,
		|	ЖурналSMSоповещенияСрезПоследних.Дата_Отправки,
		|	ЖурналSMSоповещенияСрезПоследних.id_web,
		|	ЖурналSMSоповещенияСрезПоследних.Ошибка,
		|	ЖурналSMSоповещенияСрезПоследних.ОписаниеОшибки,
		|	ЖурналSMSоповещенияСрезПоследних.Расшифровка
		|ИЗ
		|	РегистрСведений.ЖурналSMSоповещения.СрезПоследних КАК ЖурналSMSоповещенияСрезПоследних
		|ГДЕ
		|	ЖурналSMSоповещенияСрезПоследних.Получатель_КА = &Получатель_КА
		|	И ЖурналSMSоповещенияСрезПоследних.ВидSMSоповещения = &Триггер_01
		|	И ЖурналSMSоповещенияСрезПоследних.Отправлено = Истина";

		Запрос.УстановитьПараметр("Получатель_КА", пар_Структура.Водятел);
		Запрос.УстановитьПараметр("Триггер_01", Справочники.НастройкаSMSоповещения.Триггер_01);

		тчр = Запрос.Выполнить().Выгрузить();
		
		Если тчр.Количество() > 0 Тогда
			отправить_послание = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если отправить_послание Тогда
		СтруктураДанныхДляСМС = Новый Структура;
		СтруктураДанныхДляСМС.Вставить("Источник",пар_Структура.Водятел);
		СтруктураДанныхДляСМС.Вставить("Получатель_Пароль",пар_Структура.Пароль);
		СтруктураДанныхДляСМС.Вставить("Получатель_НомерТелефона","7" + пар_Структура.НомерТелефона);
		СтруктураДанныхДляСМС.Вставить("Получатель_Имя",пар_Структура.Имя);
		
		пар_Источник = Новый Массив;
		пар_Источник.Добавить(СтруктураДанныхДляСМС);
		
		SMSоповещение.ЛаунчерSMS(Новый Структура("Триггер,Источник",Справочники.НастройкаSMSоповещения.Триггер_01,пар_Источник));
	КонецЕсли;

	Возврат отправить_послание;
КонецФункции
// - Пушкин 2019032019 XX-1991


//		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
//			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
