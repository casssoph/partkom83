Перем глСерверТО;
Перем мКлиентOnline;

Перем глОбщиеЗначения Экспорт;

Перем глЗапрашиватьПодтверждениеПриЗакрытии Экспорт;
Перем АдресРесурсовОбозревателя Экспорт; // В переменной содержится значение 
										 // адреса ресурса данной конфигурации
Перем ФормаОповещенияЗадачОткрыта Экспорт;

// СтандартныеПодсистемы

// СтандартныеПодсистемы.БазоваяФункциональность
// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике.
Перем СообщенияДляЖурналаРегистрации Экспорт; 
// Признак того, что в данном сеансе не нужно повторно предлагать установку
Перем ПредлагатьУстановкуРасширенияРаботыСФайлами Экспорт;
// Признак того, что в данном сеансе не нужно запрашивать стандартное подтверждение при выходе
Перем ПропуститьПредупреждениеПередЗавершениемРаботыСистемы Экспорт;
// Структура параметров для клиентской логики по завершению работы в программе.
Перем ПараметрыРаботыКлиентаПриЗавершении Экспорт;
// Признак того, что при запуске в сеансе администратора нужно вывести форму описаний изменений.
Перем ВывестиОписаниеИзмененийДляАдминистратора Экспорт;
// Структура, содержащая в себе время начала и окончания обновления программы.
Перем ПараметрыРаботыКлиентаПриОбновлении Экспорт;
// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.ФайловыеФункции
// Признак того, что в данном сеансе не нужно повторно делать проверку доступа к каталогу на диске
Перем ПроверкаДоступаКРабочемуКаталогуВыполнена Экспорт;
// Конец СтандартныеПодсистемы.ФайловыеФункции

// Конец СтандартныеПодсистемы

// ЭлектронныеДокументы
Перем глWSОпределениеСбербанк Экспорт;
Перем глКриптоДЛЛСбербанк Экспорт;
Перем глПинКодСбербанк Экспорт;
Перем глНомерКонтейнераСбербанк Экспорт;
Перем глТекущееСоглашениеСбербанк Экспорт;
Перем глУстановленКаналСоСбербанком Экспорт;
Перем глВыполненаАвторизацияСбербанк Экспорт;
Перем ПараметрыПодсистемыОбменСБанками Экспорт;
Перем СоответствиеСертификатаИПароля Экспорт;

Перем мВременныеФайлыКартинок Экспорт;

Перем мОграничениеДоступа Экспорт;

// функция вызова формы редактирования настройки файла обновления конфигурации
Процедура ОткрытьФормуРедактированияНастройкиФайлаОбновления() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		Предупреждение("Нет прав на чтение данных константы ""Настройка файла обновления конфигурации""", 30, "Настройка файла обновления конфигурации");		
		Возврат;
		
	КонецЕсли;

	ФормаРедактирования = ПолучитьОбщуюФорму("НастройкаФайлаОбновленияКонфигурации");
	ФормаРедактирования.СтруктураПараметров = ПроцедурыОбменаДанными.ПолучитьНастройкиДляФайлаОбновленияКонфигурации(); 
	ФормаРедактирования.Открыть();
	
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы(Отказ)	
	
	УправлениеПользователями.ПроверитьВозможностьРаботыПользователя(Отказ);	
	
	#Если Клиент Тогда
		
		Если Не РольДоступна("ПолныеПрава") И Не НастройкаПравДоступа.ПолучитьЗначениеПраваПользователя(УправлениеПользователями.ОпределитьТекущегоПользователя(), ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРаботуВБазе) Тогда
			
			Отказ = Истина;
			
			Предупреждение("Для текущего пользователя установлен запрет работы в базе (см. регистр сведений ""Значения дополнительных прав пользователя"")");
			
		КонецЕсли;
		
	#КонецЕсли
	
	Если Не Отказ Тогда
		// СтандартныеПодсистемы
		СтандартныеПодсистемыКлиент.ДействияПередНачаломРаботыСистемы(Отказ);
		// Конец СтандартныеПодсистемы
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	внЖурналРегистрацииКлиент.ПриНачалеРаботыСистемы();
	
	ИнициализироватьКартинки();
	ПолучитьОграничениеДоступаКЭлементамФорм();
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ДействияПриНачалеРаботыСистемы(,Ложь);
	// Конец СтандартныеПодсистемы
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	Если НЕ ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
		ЗаголовокСистемы = ЗаголовокСистемы + " (КОПИЯ)";
	КонецЕсли;
	
	Если НЕ Пустаястрока(ЗаголовокСистемы) Тогда
		УстановитьЗаголовокСистемы(ЗаголовокСистемы);
	КонецЕсли; 
	
	ФормаОповещенияЗадачОткрыта = Ложь;
	
	мТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;

	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить() = "");

	Если ОбновлениеИнформационнойБазы.ОбновитьИнформационнуюБазу() Тогда
		Возврат;
	КонецЕсли;
	
	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	// Выполнить проверку разницы времени с сервером приложения
	Если НЕ ПроверкаРазницыВремениКлиент.ВыполнитьПроверку() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеСоединениямиИБКлиент.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	
	СформироватьОтчеты();
	
	ПроверитьПодключениеОбработчикаОжидания();
	
	// Проверка заполнения констант валют учетов
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаРегламентированногоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты регламентированного учета!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаУправленческогоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты управленческого учета!");

	КонецЕсли;
	//
	//// Открытие встроенного почтового клиента при запуске системы, если это задано в настройках
	//Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "АвтооткрытиеЭлектроннойПочтыПриЗапускеПрограммы") = Истина
	//   И Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() 
	//   И (Не ПервыйЗапуск) Тогда
	//	Обработки.МенеджерКонтактов.ПолучитьФорму().Открыть();
	//КонецЕсли;

	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
		
	Если ЭтоФайловаяИБ Тогда
					
		ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		
		Если мТекущийПользователь = ПользовательДляВыполненияРеглЗаданий Тогда
			
			// с интервалом секунд вызываем процедуру работы с регламентными заданиями
			ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
			
			ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	//ОткрытьПанельФункций = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОткрыватьПриЗапускеПанельФункций");
	//
	//Если ОткрытьПанельФункций 
	//	Или ПервыйЗапуск Тогда
	//	ФормаПанели = Обработки.ПанельФункций.ПолучитьФорму();
	//	ФормаПанели.ПервыйЗапуск = ПервыйЗапуск;
	//	ФормаПанели.Открыть();
	//КонецЕсли;
	
	
	//// Открытие Быстрого освоения
	//ПоказыватьБыстроеОсвоение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ПоказыватьБыстроеОсвоениеПриНачалеРаботыСистемы");
	//Если ПоказыватьБыстроеОсвоение 
	//   И (Не ПервыйЗапуск) Тогда
	//	Обработки.БыстроеОсвоение.ПолучитьФорму().Открыть();
	//КонецЕсли;
	
	//// Открытие списка задач
	ПоказыватьСписокЗадач = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ПоказыватьСписокЗадачПриЗапуске");
	Если ПоказыватьСписокЗадач
	   И (Не ПервыйЗапуск) Тогда
		РаботаСДиалогами.ОткрытьЗадачиТекущегоПользователя();
	КонецЕсли;
	
	// Начнем проверку динамического обновления конфигурации
	НачатьПроверкуДинамическогоОбновленияИБ();

	//Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ЗагружатьАктуальныеКурсыВалютПриЗапускеСистемы") = Истина 
	//   И (Не ПервыйЗапуск) Тогда
	//	ОбработкаЗагрузкиКурсовВалют = Обработки.КурсыВалютРБК.Создать();
	//	ОбработкаЗагрузкиКурсовВалют.НачДата = ТекущаяДата();
	//	ОбработкаЗагрузкиКурсовВалют.КонДата = ТекущаяДата();
	//	ОбработкаЗагрузкиКурсовВалют.ЗаполнитьВалюты(Истина);
	//	ОбработкаЗагрузкиКурсовВалют.ЗагрузитьКурсыСРБК();
	//КонецЕсли;
	// Открытие формы помощника обновления конфигурации
	//Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
	//	ОбработкаОбновлениеКонфигурации = Обработки.ОбновлениеКонфигурации.Создать();
	//	ОбработкаОбновлениеКонфигурации.ПроверитьНаличиеОбновлений();
	//КонецЕсли;
	Если ПолучитьСерверТО().ПолучитьСписокУстройств(
	   Перечисления.ВидыТорговогоОборудования.ККМOnLine).Количество() > 0 Тогда
		мКлиентOnline = Обработки.ТОКлиентККМOnline.Создать();
		мКлиентOnline.НачатьРаботу();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьНаличиеОповещений", 10);
	
КонецПроцедуры // ПриНачалеРаботыСистемы()

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	Если мКлиентOnline <> Неопределено Тогда
		мКлиентOnline.ВнешнееСобытие(Источник, Событие, Данные);
	КонецЕсли;

	ПолучитьСерверТО().ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные);

КонецПроцедуры // ОбработкаВнешнегоСобытия()

Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
		ЗапрашиватьПотверждение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	    													  "ЗапрашиватьПодтверждениеПриЗакрытии");
		Если ЗапрашиватьПотверждение Тогда
			Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// процедура служит для поддержки работы регламентных заданий в файловой версии
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

Процедура ПроверитьНаличиеОповещений() Экспорт
	ОбработкаОповещенияПользователей.ОтобразитьОповещенияТекущемуПользователю();
	
КонецПроцедуры

Функция ПолучитьСерверТО() Экспорт

	Если глСерверТО = Неопределено Тогда
		глСерверТО = Обработки.ТОСервер.Создать();
	КонецЕсли;

	Возврат глСерверТО;

КонецФункции // ПолучитьСерверТО()

// Процедура выполняет запуск отчетов, у которых установлен
// признак "Формировать при входе в систему"
//
Процедура СформироватьОтчеты()

	ВыбраннаяНастройка = ВосстановитьЗначение( "ОбработкаРапортРуководителю_Настройки");
	Если Не ВыбраннаяНастройка = Неопределено Тогда

		Параметры = Неопределено;
		Если ВыбраннаяНастройка.Свойство("_ДанныеФормы", Параметры) Тогда
			АвтоЗапуск = Неопределено;
			Параметры.Свойство("ФормироватьПриСтартеСистемы", АвтоЗапуск);
			Если Не АвтоЗапуск = Неопределено И АвтоЗапуск Тогда
				НовыйОтчет = Отчеты.РапортРуководителю.Создать();
				НовыйОтчетФорма = НовыйОтчет.ПолучитьФорму("ФормаГлавная");
				НовыйОтчетФорма.НачальноеЗначениеВыбора = Истина;
				НовыйОтчетФорма.Открыть();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура проверяет и при необходимости подключает обработчик ожидания
// на запуск процедуры ПроверитьНапоминания()
//
// Параметры:
//  Нет.
//
Процедура ПроверитьПодключениеОбработчикаОжидания() Экспорт

	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Если глЗначениеПеременной("глТекущийПользователь") <> Неопределено
		 И ТипЗнч(глЗначениеПеременной("глТекущийПользователь")) = Тип("СправочникСсылка.Пользователи")
		 И НЕ глЗначениеПеременной("глТекущийПользователь").Пустая()
		 И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
		 
		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);

		УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));

	Иначе

		ОтключитьОбработчикОжидания("ПроверитьНапоминания");

	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет Напоминания
//
Процедура ПроверитьНапоминания() Экспорт

	УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры

// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан текущий пользователь.");
	Иначе
		Форма = глЗначениеПеременной("глТекущийПользователь").ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()

// Функция возвращает объект для взаимодействия с торговым оборудованием.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <ОбработкаОбъект> - Объект для взаимодействия с торговым оборудованием.
//
// Функция возвращает значение экспортных переменных модуля приложенийа
//
// Параметры
//  Имя - строка, содержит имя переменной целиком 
//
// Возвращаемое значение:
//   значение соответствующей экспортной переменной
Функция глЗначениеПеременной(Имя) Экспорт

	Возврат ОбщегоНазначения.ПолучитьЗначениеПеременной(Имя, глОбщиеЗначения);
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	ОбщегоНазначения.УстановитьЗначениеПеременной(Имя, глОбщиеЗначения, Значение, ОбновлятьВоВсехКэшах);
	
КонецПроцедуры

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//								с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	// есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	Результат = УправлениеСоединениямиИБ.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	Возврат Результат;

КонецФункции

// Проверка установленного у организации признака "Розничная торговля облагается ЕНВД"
//
Функция УстановленЕНВДОрганизации(Организация)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РозничнаяТорговляОблагаетсяЕНВД
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&Дата, Организация = &Ссылка) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|");

	Запрос.УстановитьПараметр("Ссылка", Организация);
	Запрос.УстановитьПараметр("Дата"  , ТекущаяДата());

	Выборка = Запрос.Выполнить().Выбрать();
	ОрганизацияОблагаетсяЕНВД = ?(Выборка.Следующий(), Выборка.РозничнаяТорговляОблагаетсяЕНВД, Ложь);

	Возврат ОрганизацияОблагаетсяЕНВД;

КонецФункции

Процедура ПриЗавершенииРаботыСистемы()
	ДеинициализироватьКартинки();
	
	внЖурналРегистрацииКлиент.ПриЗавершенииРаботыСистемы(); 
КонецПроцедуры

Процедура ИнициализироватьКартинки()
	
	мВременныеФайлыКартинок = Новый Структура("Кирпич16,Кирпич32,Кирпич48,Кирпич64");
	Для Каждого лЭлементСтруктуры Из мВременныеФайлыКартинок цикл
		лИмяВременногоФайла = ПолучитьИмяВременногоФайла("png");
		БиблиотекаКартинок[лЭлементСтруктуры.Ключ].Записать(лИмяВременногоФайла);
		мВременныеФайлыКартинок[лЭлементСтруктуры.Ключ] = лИмяВременногоФайла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДеинициализироватьКартинки()
	
	Для Каждого лЭлементСтруктуры Из мВременныеФайлыКартинок цикл
		УдалитьФайлы(лЭлементСтруктуры.Значение);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПолучитьОграничениеДоступаКЭлементамФорм()
	мОграничениеДоступа = Новый ТаблицаЗначений;
	мОграничениеДоступа = НастройкаПравДоступа.ПолучитьОграничениеДоступаКЭлементамФорм();
КонецПроцедуры

// Не допускается изменять значение данной переменной
Если Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0 Тогда
	АдресРесурсовОбозревателя = "TradeBase";
Иначе
	АдресРесурсовОбозревателя = "Trade";
КонецЕсли;

глНомерКонтейнераСбербанк = 0;
глУстановленКаналСоСбербанком = Ложь;
