Процедура ДобавитьДанныеИсторияЗаявокПокупателя(Список, НомерСообщения, СтруктураХранения) Экспорт
	
	Если НЕ РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт","Выгружать историю строк заявок", Ложь) Тогда
		Возврат;
	КонецЕсли;

	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema", "ИсторияСтрокЗаявок");
	ВыборкаИсторииСтрокЗаявок = ВыборкаИсторииСтрокЗаявок();
	ТаблицаОтбора = "";
	
	Пока ВыборкаИсторииСтрокЗаявок.Следующий() Цикл
		
		ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
		ЗаполнитьЗначенияСвойств(ОбъектXDTO, ВыборкаИсторииСтрокЗаявок, "IDSite,Количество,НомерЗаявки,Артикул,Цена,ЗакупочнаяЦена");
		ОбъектXDTO.Состояние = ВыборкаИсторииСтрокЗаявок.Состояние.УникальныйИдентификатор();
		ОбъектXDTO.ВерсияДанных = ВыборкаИсторииСтрокЗаявок.Период;
		ОбъектXDTO.Склад = ВыборкаИсторииСтрокЗаявок.Склад.УникальныйИдентификатор();
		Список.Добавить(ОбъектXDTO);
		
		//Текст для отбора//
		xПериод = "dateadd(year,2000, '" + Формат(ВыборкаИсторииСтрокЗаявок.Период, "ДФ='yyyy-MM-dd HH:mm:ss'") + "')";
		xРегистратор =  ОбщегоНазначения.ПреобразоватьGUIDВФорматHEX(ВыборкаИсторииСтрокЗаявок.Регистратор.УникальныйИдентификатор());
		xНомерСтроки = Формат(ВыборкаИсторииСтрокЗаявок.НомерСтроки, "ЧН=; ЧГ=");
		xСтрокаЗаявки = ОбщегоНазначения.ПреобразоватьGUIDВФорматHEX(ВыборкаИсторииСтрокЗаявок.СтрокаЗаявки.УникальныйИдентификатор());
		xСтрокаПрихода = ОбщегоНазначения.ПреобразоватьGUIDВФорматHEX(ВыборкаИсторииСтрокЗаявок.СтрокаПрихода.УникальныйИдентификатор());
		xОтказ = ?(ВыборкаИсторииСтрокЗаявок.Отказ, "1", "0");
		xПорядок = Формат(ВыборкаИсторииСтрокЗаявок.Порядок, "ЧН=; ЧГ=");
		ТаблицаОтбора = ТаблицаОтбора + ?(ТаблицаОтбора = "", "", ",") + "(" + xПериод + "," + xРегистратор + "," + xНомерСтроки + "," + xСтрокаЗаявки + "," + xСтрокаПрихода + "," + xОтказ + "," + xПорядок + ")";
		
	КонецЦикла;
	
	ТаблицаОтбора = "(values" + ТаблицаОтбора + ") t (p,r,n,sz,sp,o,pr)";
	
	ТекстЗапросаSQL = ТекстЗапросаОтметкиОтправленного(НомерСообщения, ТаблицаОтбора, СтруктураХранения);
	ОписаниеОшибки = DataExchangeModule.ВыполнитьЗапросSQL(ТекстЗапросаSQL);
	
КонецПроцедуры
Функция ВыборкаИсторииСтрокЗаявок()
	
	КоличествоОбъектов = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен (Общее)","Количество объектов в обмене", 1000);
	ОбратныйПорядокВыборки = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен (Общее)","Обратный порядок выборки", Истина);
	УсловиеОтбора = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен (Общее)","Условие запроса истории строк заявок", "");
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1234
	                      |	ИсторияЗаявокПокупателя.IDSite,
	                      |	ИсторияЗаявокПокупателя.Период КАК Период,
	                      |	ИсторияЗаявокПокупателя.СтрокаЗаявки.Заявка.Номер КАК НомерЗаявки,
	                      |	ИсторияЗаявокПокупателя.Склад,
	                      |	ИсторияЗаявокПокупателя.Количество,
	                      |	ИсторияЗаявокПокупателя.СтрокаЗаявки.Цена КАК Цена,
	                      |	ИсторияЗаявокПокупателя.СтрокаЗаявки,
	                      |	ИсторияЗаявокПокупателя.СтрокаЗаявки.ЦенаЗакупки КАК ЗакупочнаяЦена,
	                      |	ИсторияЗаявокПокупателя.Состояние,
	                      |	ИсторияЗаявокПокупателя.СтрокаПрихода,
	                      |	ИсторияЗаявокПокупателя.Отказ,
	                      |	ИсторияЗаявокПокупателя.Порядок,
	                      |	ИсторияЗаявокПокупателя.ДатаСобытия КАК ДатаСобытия,
	                      |	ИсторияЗаявокПокупателя.Номенклатура,
	                      |	ИсторияЗаявокПокупателя.Регистратор,
	                      |	ИсторияЗаявокПокупателя.НомерСтроки,
	                      |	ЕСТЬNULL(ИсторияЗаявокПокупателя.Номенклатура.Артикул, """") КАК Артикул
	                      |ИЗ
	                      |	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	                      |ГДЕ
	                      |	НЕ ИсторияЗаявокПокупателя.ПолученоСайтом
	                      |	И ИСТИНА
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаСобытия УБЫВ");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1234", Формат(КоличествоОбъектов, "ЧГ="));
	Если НЕ ОбратныйПорядокВыборки Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " УБЫВ", "");
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И " + УсловиеОтбора);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
Функция ТекстЗапросаОтметкиОтправленного(НомерСообщения, ТаблицаОтбора, СтруктураХранения)
	
	Отказ = Ложь;
	ТекстЗапроса = "";
	ОписаниеТаблицы = СтруктураХранения.Найти("РегистрСведений.ИсторияЗаявокПокупателя", "ИмяТаблицы");
	Если ОписаниеТаблицы = Неопределено Тогда
		ВызватьИсключение("Ошибка определения таблицы <РегистрСведений.ИсторияЗаявокПокупателя> в SQL");
	Иначе
		ИмяТаблицыХранения = "_" + ОписаниеТаблицы.ИмяТаблицыХранения;
		ОписаниеПолей = ОписаниеТаблицы.Поля;
		
		ПолеСтрокаПериод = "_" + ИмяПоляТаблицы(ОписаниеПолей, "Период", Отказ);
		ПолеСтрокаРегистратор = "_" + ИмяПоляТаблицы(ОписаниеПолей, "Регистратор", Отказ) + "RRef";
		ПолеНомерСтроки = "_" + ИмяПоляТаблицы(ОписаниеПолей, "НомерСтроки", Отказ);
		ПолеСтрокаЗаявки = "_" + ИмяПоляТаблицы(ОписаниеПолей, "СтрокаЗаявки", Отказ) + "RRef";
		ПолеСтрокаПрихода = "_" + ИмяПоляТаблицы(ОписаниеПолей, "СтрокаПрихода", Отказ) + "RRef";
		ПолеОтказ = "_" + ИмяПоляТаблицы(ОписаниеПолей, "Отказ", Отказ);
		ПолеПорядок = "_" + ИмяПоляТаблицы(ОписаниеПолей, "Порядок", Отказ);
		ПолеНомерСообщенияОтправленного = "_" + ИмяПоляТаблицы(ОписаниеПолей, "НомерСообщенияОтправленного", Отказ);
		ПолеДатаОтправки = "_" + ИмяПоляТаблицы(ОписаниеПолей, "ДатаОтправки", Отказ);
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ДатаОтправкиПакета = "dateadd(year,2000, '" + Формат(ТекущаяДата(), "ДФ='yyyy-MM-dd HH:mm:ss'") + "')";
		Set = " set " + ПолеНомерСообщенияОтправленного + " = " + Формат(НомерСообщения, "ЧГ=") + ", " + ПолеДатаОтправки + " = " + ДатаОтправкиПакета + Символы.ПС;
		СтрокаСоединения = " on " + ПолеСтрокаПериод + " = t.p and " +
									ПолеСтрокаРегистратор + " = t.r and " +
									ПолеНомерСтроки + " = t.n and " +
									ПолеСтрокаЗаявки + " = t.sz and " +
									ПолеСтрокаПрихода + " = t.sp and " +
									ПолеОтказ + " = t.o and " +
									ПолеПорядок + " = t.pr";
									
		
		ТекстЗапроса =	"update " + ИмяТаблицыХранения + Set + "from " + ИмяТаблицыХранения + " inner join" + Символы.ПС + ТаблицаОтбора + Символы.ПС + СтрокаСоединения;
	Иначе
		ВызватьИсключение("Ошибка формирования текста запроса SQL");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ФиксацияПринятогоСообщения(НомерСообщения, СтруктураХранения) Экспорт
	
	ТекстЗапросаSQL = ТекстЗапросаФиксацииСообщения(НомерСообщения, СтруктураХранения);
	ОписаниеОшибки = DataExchangeModule.ВыполнитьЗапросSQL(ТекстЗапросаSQL);
	
КонецПроцедуры
Функция ТекстЗапросаФиксацииСообщения(НомерСообщения, СтруктураХранения)
	
	Отказ = Ложь;
	ТекстЗапроса = "";
	ОписаниеТаблицы = СтруктураХранения.Найти("РегистрСведений.ИсторияЗаявокПокупателя", "ИмяТаблицы");
	Если ОписаниеТаблицы = Неопределено Тогда
		ВызватьИсключение("Ошибка определения таблицы <РегистрСведений.ИсторияЗаявокПокупателя> в SQL");
	Иначе
		ИмяТаблицыХранения = "_" + ОписаниеТаблицы.ИмяТаблицыХранения;
		ОписаниеПолей = ОписаниеТаблицы.Поля;
		ПолеПолученоСайтом = "_" + ИмяПоляТаблицы(ОписаниеПолей, "ПолученоСайтом", Отказ);
		ПолеНомерСообщенияОтправленного = "_" + ИмяПоляТаблицы(ОписаниеПолей, "НомерСообщенияОтправленного", Отказ);
		ПолеДатаОбработкиСайтом = "_" + ИмяПоляТаблицы(ОписаниеПолей, "ДатаОбработкиСайтом", Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Дата = "DATEADD(YEAR,2000, '" + Формат(ТекущаяДата(), "ДФ='yyyy-MM-dd HH:mm:ss'") + "')";
		ТекстЗапроса =	"UPDATE " + ИмяТаблицыХранения + " set " + ПолеПолученоСайтом + " = 1, " + ПолеДатаОбработкиСайтом + " = " + Дата + " " +
						"WHERE " + ПолеПолученоСайтом + " =  0 and (" +ПолеНомерСообщенияОтправленного + " between 1 and " + Формат(НомерСообщения, "ЧН=; ЧГ=") + ")";
	Иначе
		ВызватьИсключение("Ошибка формирования текста запроса SQL");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СнятьРегистрациюСЗаписей(Выборка) Экспорт
	
	ТаблицаОтбора = "";
	
	Пока Выборка.Следующий() Цикл
		
		xПериод = "dateadd(year,2000, '" + Формат(Выборка.Период, "ДФ='yyyy-MM-dd HH:mm:ss'") + "')";
		xРегистратор =  ОбщегоНазначения.ПреобразоватьGUIDВФорматHEX(Выборка.Регистратор.УникальныйИдентификатор());
		xНомерСтроки = Формат(Выборка.НомерСтроки, "ЧН=; ЧГ=");
		xСтрокаЗаявки = ОбщегоНазначения.ПреобразоватьGUIDВФорматHEX(Выборка.СтрокаЗаявки.УникальныйИдентификатор());
		xСтрокаПрихода = ОбщегоНазначения.ПреобразоватьGUIDВФорматHEX(Выборка.СтрокаПрихода.УникальныйИдентификатор());
		xОтказ = ?(Выборка.Отказ, "1", "0");
		xПорядок = Формат(Выборка.Порядок, "ЧН=; ЧГ=");
		ТаблицаОтбора = ТаблицаОтбора + ?(ТаблицаОтбора = "", "", ",") + "(" + xПериод + "," + xРегистратор + "," + xНомерСтроки + "," + xСтрокаЗаявки + "," + xСтрокаПрихода + "," + xОтказ + "," + xПорядок + ")";
		
	КонецЦикла;
	
	ТаблицаОтбора = "(values" + ТаблицаОтбора + ") t (p,r,n,sz,sp,o,pr)";

	ТекстЗапросаSQL = ТекстЗапросаСнятияРегистрации(ТаблицаОтбора);
	ОписаниеОшибки = DataExchangeModule.ВыполнитьЗапросSQL(ТекстЗапросаSQL)
	
КонецПроцедуры
Функция ТекстЗапросаСнятияРегистрации(ТаблицаОтбора)
	
	Отказ = Ложь;
	ТекстЗапроса = "";
	СтруктураХранения = ПолучитьСтруктуруХраненияБазыДанных();
	ОписаниеТаблицы = СтруктураХранения.Найти("РегистрСведений.ИсторияЗаявокПокупателя", "ИмяТаблицы");
	Если ОписаниеТаблицы = Неопределено Тогда
		ВызватьИсключение("Ошибка определения таблицы <РегистрСведений.ИсторияЗаявокПокупателя> в SQL");
	Иначе
		ИмяТаблицыХранения = "_" + ОписаниеТаблицы.ИмяТаблицыХранения;
		ОписаниеПолей = ОписаниеТаблицы.Поля;
		
		ПолеСтрокаПериод = "_" + ИмяПоляТаблицы(ОписаниеПолей, "Период", Отказ);
		ПолеСтрокаРегистратор = "_" + ИмяПоляТаблицы(ОписаниеПолей, "Регистратор", Отказ) + "RRef";
		ПолеНомерСтроки = "_" + ИмяПоляТаблицы(ОписаниеПолей, "НомерСтроки", Отказ);
		ПолеСтрокаЗаявки = "_" + ИмяПоляТаблицы(ОписаниеПолей, "СтрокаЗаявки", Отказ) + "RRef";
		ПолеСтрокаПрихода = "_" + ИмяПоляТаблицы(ОписаниеПолей, "СтрокаПрихода", Отказ) + "RRef";
		ПолеОтказ = "_" + ИмяПоляТаблицы(ОписаниеПолей, "Отказ", Отказ);
		ПолеПорядок = "_" + ИмяПоляТаблицы(ОписаниеПолей, "Порядок", Отказ);
		ПолеНомерСообщенияОтправленного = "_" + ИмяПоляТаблицы(ОписаниеПолей, "НомерСообщенияОтправленного", Отказ);
		ПолеДатаОтправки = "_" + ИмяПоляТаблицы(ОписаниеПолей, "ДатаОтправки", Отказ);
		ПолеПолученоСайтом = "_" + ИмяПоляТаблицы(ОписаниеПолей, "ПолученоСайтом", Отказ);
		ПолеДатаОбработкиСайтом = "_" + ИмяПоляТаблицы(ОписаниеПолей, "ДатаОбработкиСайтом", Отказ);

	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ДатаОтправкиПакета = "dateadd(year,2000, '" + Формат(ТекущаяДата(), "ДФ='yyyy-MM-dd HH:mm:ss'") + "')";
		Set = " set " + ПолеНомерСообщенияОтправленного + " = 0, " +
						ПолеДатаОтправки + " = '2001-01-01 00:00:00.000', " + 
						ПолеПолученоСайтом + " =  0, "+
						ПолеДатаОбработкиСайтом + " = '2001-01-01 00:00:00.000'" + Символы.ПС;
		СтрокаСоединения = " on " + ПолеСтрокаПериод + " = t.p and " +
									ПолеСтрокаРегистратор + " = t.r and " +
									ПолеНомерСтроки + " = t.n and " +
									ПолеСтрокаЗаявки + " = t.sz and " +
									ПолеСтрокаПрихода + " = t.sp and " +
									ПолеОтказ + " = t.o and " +
									ПолеПорядок + " = t.pr";
									
		
		ТекстЗапроса =	"update " + ИмяТаблицыХранения + Set + "from " + ИмяТаблицыХранения + " inner join" + Символы.ПС + ТаблицаОтбора + Символы.ПС + СтрокаСоединения;
	Иначе
		ВызватьИсключение("Ошибка формирования текста запроса SQL");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

	
КонецФункции

Функция ИмяПоляТаблицы(ОписаниеПолей, ИмяПоля, Отказ)
	
	ИмяПоляХранения = "";	
	Строка = ОписаниеПолей.Найти(ИмяПоля, "ИмяПоля");
	Если Строка = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ИмяПоляХранения = Строка.ИмяПоляХранения;
	КонецЕсли;
	
	Возврат ИмяПоляХранения;
	
КонецФункции