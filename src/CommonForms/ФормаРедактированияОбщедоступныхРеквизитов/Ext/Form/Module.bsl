
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	лКлючАлгоритма = "ОбщаяФорма_ФормаРедактированияОбщедоступныхРеквизитов_ПриСозданииНаСервере";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	ОбъектСсылка = Параметры.ОбъектСсылка;	
	Если ЗначениеЗаполнено(ОбъектСсылка) тогда
		Попытка		
			ОбъектМетаданные =  ОбъектСсылка.Метаданные();
			ИмяМетаданных =ОбъектМетаданные.ПолноеИмя();
			
			ПВХ = ПолучитьПланВидовХарактеристик(ОбъектСсылка,ИмяМетаданных);
			Если не ПВХ = Неопределено тогда 
				Перепроводить = ПВХ.Перепроводить;
			//ПВХ  = ПредопределенноеЗначение("ПланВидовХарактеристик.ОбщедоступныеРеквизиты."+СтрЗаменить(ИмяМетаданных,".","_"));
			//Если ДокументСоотвестуетОтбору(ПВХ,ОбъектСсылка) тогда 
				СоздатьЭлемементыФормы(ПВХ,ОбъектМетаданные);
			КонецЕсли;	
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;	
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьПланВидовХарактеристик(ОбъектСсылка,ИмяМетаданных)
	лКлючАлгоритма = "ОбщаяФорма_ФормаРедактированияОбщедоступныхРеквизитов_ПолучитьПланВидовХарактеристик";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбщедоступныеРеквизитыПользователи.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ОбщедоступныеРеквизиты.Пользователи КАК ОбщедоступныеРеквизитыПользователи
		|ГДЕ
		|	ОбщедоступныеРеквизитыПользователи.Пользователь = &ТекущийПользователь
		|	И ОбщедоступныеРеквизитыПользователи.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ОбщедоступныеРеквизитыПользователи.Ссылка.ИмяМетаданных = &ИмяМетаданных";
	
	Запрос.УстановитьПараметр("ИмяМетаданных", ИмяМетаданных);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Не стал убирать пока запрос в цикле ибо в старой реализации эта функция норм работала.
		//Запрос по кластерному индексу тармозить не должен да и вызовов тут максимум 2-3 будет 
		  ПВХ = ВыборкаДетальныеЗаписи.Ссылка;
		Если ДокументСоотвестуетОтбору(ПВХ,ОбъектСсылка) тогда 
			Возврат  ПВХ ;
		 КонецЕсли;
	КонецЦикла;
	
	возврат Неопределено ;
КонецФункции	



Функция ДокументСоотвестуетОтбору(ПВХ,ОбъектСсылка)
	лКлючАлгоритма = "ОбщаяФорма_ФормаРедактированияОбщедоступныхРеквизитов_ДокументСоотвестуетОтбору";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
	
	если не ПВХ.Отбор.Количество() тогда 
		возврат Истина;
	КонецЕсли;	
	
	
	ЗапросОтбора = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ Первые 1
		|	Документ.Ссылка
		|ИЗ
		|	"+ПВХ.ИмяМетаданных +" КАК Документ
		|ГДЕ
		|	Документ.Ссылка = &ОбъектСсылка ";

		ЗапросОтбора.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
 	
	Для каждого ЭлементОтбора из ПВХ.Отбор цикл
	 	  ЗапросОтбора.УстановитьПараметр(ЭлементОтбора.Реквизит,ЭлементОтбора.Значение) ;
		  ТекстЗапроса = ТекстЗапроса + ПолучитьТекстУсловияОтбора(ЭлементОтбора); 
	КонецЦикла;	
	
	ЗапросОтбора.Текст = ТекстЗапроса;
	
	
	РезультатЗапроса = ЗапросОтбора.Выполнить();

	Возврат не РезультатЗапроса.Пустой();

КонецФункции	

Функция ПолучитьТекстУсловияОтбора(ЭлементОтбора)
	лКлючАлгоритма = "ОбщаяФорма_ФормаРедактированияОбщедоступныхРеквизитов_ПолучитьТекстУсловияОтбора";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	

	
	
	
	ТекстУсловия  = "";
	  
	  Если  ЭлементОтбора.ВидСравнения  = "Равно" тогда 
		 ТекстУсловия  = ТекстУсловия +" 
		  |	И Документ."+ЭлементОтбора.Реквизит+" = &"+ЭлементОтбора.Реквизит ;
	 ИначеЕсли ЭлементОтбора.ВидСравнения  = "НеРавно" тогда  
		 ТекстУсловия  = ТекстУсловия +" 
		  |	И  НЕ Документ."+ЭлементОтбора.Реквизит+" = &"+ЭлементОтбора.Реквизит ;
       ИначеЕсли ЭлементОтбора.ВидСравнения  = "ВСписке" тогда  
		 ТекстУсловия  = ТекстУсловия +" 
		  |	И  Документ."+ЭлементОтбора.Реквизит+" в (&"+ЭлементОтбора.Реквизит +")";
      ИначеЕсли  ЭлементОтбора.ВидСравнения  = "НеВСписке" тогда  
		 ТекстУсловия  = ТекстУсловия +" 
		  |	И Не Документ."+ЭлементОтбора.Реквизит+" в (&"+ЭлементОтбора.Реквизит +")";	
	 КонецЕсли; 
	 
	 возврат ТекстУсловия;
	
КонецФункции	

&НаСервере 
Процедура СоздатьЭлемементыФормы(ПВХ,ОбъектМетаданные)
	лКлючАлгоритма = "ОбщаяФорма_ФормаРедактированияОбщедоступныхРеквизитов_СоздатьЭлемементыФормы";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	
	
	//
	//Если не ЗначениеЗаполнено(ПВХ.ОбщедоступныеРеквизиты) тогда
	//	возврат
	//КонецЕсли;	
	
	СписокРеквизитов.ЗагрузитьЗначения(ПВХ.Реквизиты.ВыгрузитьКолонку("ИмяРеквизита"));
	
	//СписокРеквизитов.ЗагрузитьЗначения(пвх.Реквизиты.);

	СоздатьРекцизитыФормы(ОбъектМетаданные);
	
	Для Каждого Реквизит из СписокРеквизитов цикл 
		ИмяРеквизита = ИмяРеквизита(Реквизит);
		Если ЭтоТабличнаяЧасть(ОбъектМетаданные,ИмяРеквизита) тогда 
			
			ПолеТаблицы = Элементы.Добавить(
			ИмяРеквизита,   
			Тип("ТаблицаФормы"),
			ЭтаФорма);	
			
			ПолеТаблицы.ПутьКДанным = ИмяРеквизита;
			
			ТаблицаДокумента  = ОбъектСсылка[ИмяРеквизита].Выгрузить() ;
			
			ЗначениеВРеквизитФормы(ТаблицаДокумента,ИмяРеквизита);
			
			Для Каждого Колонка из ОбъектМетаданные.ТабличныеЧасти[ИмяРеквизита].Реквизиты цикл 
				НоваяКолонка = Элементы.Добавить(ИмяРеквизита + Колонка.Имя, Тип("ПолеФормы"), ПолеТаблицы);       
				НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
				НоваяКолонка.ПутьКДанным = ИмяРеквизита+"."+Колонка.Имя;
				НоваяКолонка.Заголовок = Колонка.Имя;	
				НоваяКолонка.Видимость = Истина;				
			КонецЦикла;	
			
			Команда			= ЭтаФорма.Команды.Добавить("ЗаполнитьЗначение_"+ИмяРеквизита);
			Команда.Действие	= "ЗаполнитьЗначение";
			
			Кнопка			= ЭтаФорма.Элементы.Добавить("ВыполнитьМоюКоманду", Тип("КнопкаФормы"), ПолеТаблицы.КоманднаяПанель);
			Кнопка.Заголовок	= "Заполнить значение";
			Кнопка.ИмяКоманды	= "ЗаполнитьЗначение_"+ИмяРеквизита;
			
		Иначе 	
			
			ПолеВвода = Элементы.Добавить(
			Реквизит,   
			Тип("ПолеФормы"),
			ЭтаФорма);	      		
			ПолеВвода.Заголовок = Реквизит;
			ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
			
			ПолеВвода.ПутьКДанным = ИмяРеквизита;	
			
			Этаформа[СокрЛП(Реквизит)]  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка,ИмяРеквизита);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
КонецПроцедуры	


&НаКлиенте
Процедура ЗаполнитьЗначение(Команда)
	лКлючАлгоритма = "ОбщаяФорма_ФормаРедактированияОбщедоступныхРеквизитов_ЗаполнитьЗначение";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	ЗначениеЗаполнения = Неопределено;	
	ИмяТабличнойЧасти = Сред(Команда.Имя,СтрНайти(Команда.Имя,"_")+1);
	Колонка = Элементы[ИмяТабличнойЧасти].ТекущийЭлемент.Заголовок;
	Если не Этотобъект[ИмяТабличнойЧасти].Количество() тогда 
		Возврат;
	Конецесли;	
	ПерваяСтрока = Этотобъект[ИмяТабличнойЧасти].Получить(0);
	ВвестиЗначение(ЗначениеЗаполнения,"Введите значение",ТипЗнч(ПерваяСтрока[Колонка]));
	
	ЗаполнитьЗначениеНаСервере(ИмяТабличнойЧасти,Колонка,ЗначениеЗаполнения);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеНаСервере(ИмяТабличнойЧасти,ИмяКолонки,Значение)
	лКлючАлгоритма = "ОбщаяФорма_ФормаРедактированияОбщедоступныхРеквизитов_ЗаполнитьЗначениеНаСервере";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////		
	
	ТаблицаЗаполнения = Этотобъект[ИмяТабличнойЧасти].Выгрузить();
	ТаблицаЗаполнения.ЗаполнитьЗначения(Значение,ИмяКолонки);
	ЗначениеВРеквизитФормы(ТаблицаЗаполнения,ИмяТабличнойЧасти);
КонецПроцедуры
&НаСервере 
Процедура СоздатьРекцизитыФормы(ОбъектМетаданные)
	лКлючАлгоритма = "ОбщаяФорма_ФормаРедактированияОбщедоступныхРеквизитов_СоздатьРекцизитыФормы";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	
	
	
	// Массив для новых реквизитов
	ДобавляемыеРеквизиты	= Новый Массив;
	
	Для Каждого Реквизит из СписокРеквизитов цикл 
		
		ИмяРеквизита = ИмяРеквизита(Реквизит);
		
		Если ЭтоТабличнаяЧасть(ОбъектМетаданные,ИмяРеквизита) тогда 
			Если не ДобавляемыеРеквизиты.Найти(ИмяРеквизита) = Неопределено	тогда 
				Продолжить;
			КонецЕсли;
			
			МассивТипов = новый Массив;
			МассивТипов.Добавить(Тип("ТаблицаЗначений"));
			
			
			Для Каждого Колонка из ОбъектМетаданные.ТабличныеЧасти[ИмяРеквизита].Реквизиты цикл 
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя,
				Колонка.Тип,
				ИмяРеквизита));			
			КонецЦикла;	
			
			
		иначе 
			МассивТипов = новый Массив;
			МассивТипов.Добавить(ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка,ИмяРеквизита)));
		КонецЕсли;
		
		НовыйРеквизит  =  Новый РеквизитФормы(ИмяРеквизита,	Новый ОписаниеТипов(МассивТипов),,ИмяРеквизита);
		
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);	
	КонецЦикла;	
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Функция ЭтоТабличнаяЧасть(ОбъектМетаданные,ИмяРеквизита)
	Возврат Не ОбъектМетаданные.ТабличныеЧасти.Найти(ИмяРеквизита) = Неопределено ;		
КонецФункции	

&НаСервере
Функция ИмяРеквизита(ЭлеменСписка)
	//ЕСли Не СтрНайти(ЭлеменСписка.Значение,".") = 0 тогда 
	//	ИмяРеквизита = Сред(ЭлеменСписка.Значение,СтрНайти(ЭлеменСписка.Значение,"."));
	//Иначе 
	ИмяРеквизита =ЭлеменСписка.Значение; 
	//КонецЕсли;
	
	Возврат ИмяРеквизита;	
КонецФункции	



&НаСервере
Процедура СохранитьИзмененияНаСервере(СтруктураРеквизитов)
	лКлючАлгоритма = "ОбщаяФорма_ФормаРедактированияОбщедоступныхРеквизитов_СохранитьИзмененияНаСервере";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	
	Если СтруктураРеквизитов.Количество() тогда 	
		УстановитьПривилегированныйРежим(Истина);
		
		Объект = ОбъектСсылка.ПолучитьОбъект();
		Для каждого РеквизитСтруктуры из СтруктураРеквизитов цикл
			Если ТипЗнч(РеквизитСтруктуры.Значение) = тип("ДанныеФормыКоллекция") тогда 
				Объект[РеквизитСтруктуры.Ключ].Загрузить(ДанныеФормыВЗначение(РеквизитСтруктуры.Значение,Тип("ТаблицаЗначений")));
			иначе 
				Объект[РеквизитСтруктуры.Ключ] = РеквизитСтруктуры.Значение;
			КонецЕсли;	
		КонецЦикла;	
		ЗаполнитьЗначенияСвойств(Объект,СтруктураРеквизитов);
		Объект.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета",Истина);
		Объект.ДополнительныеСвойства.Вставить("РежимБога",Истина);
		Если Перепроводить тогда 
			Объект.записать(РежимЗаписиДокумента.Проведение);
		иначе 
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект,Истина);
		КонецЕсли;
	Конецесли;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	СтруктураРеквизитов = новый Структура;
	Для каждого ЭлементСписка из СписокРеквизитов цикл
		СтруктураРеквизитов.Вставить(СокрЛП(ЭлементСписка), Этаформа[СокрЛП(ЭлементСписка)]); 
	КонецЦикла;
	
	СохранитьИзмененияНаСервере(СтруктураРеквизитов);
	ЭтаФорма.Закрыть();
КонецПроцедуры
