Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  ИмяМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "МаршрутныйЛист" тогда

		ТабДокумент = ПечатьМаршрутныйЛист(0);
		
	ИначеЕсли ИмяМакета = "МаршрутныйЛистБезТоваров" тогда

		ТабДокумент = ПечатьМаршрутныйЛист(1);	
		
	ИначеЕсли ИмяМакета = "УниверсальныйПередаточныйДокумент" тогда

		ПечатьУниверсальныхПередаточныхДокументов(ИмяМакета, КоличествоЭкземпляров, НаПринтер);		
				
	ИначеЕсли ИмяМакета = "ПКО" Тогда
		
		 ПечатьПКО(ИмяМакета, КоличествоЭкземпляров, НаПринтер);
			
	ИначеЕсли ИмяМакета = "ПутевойЛист" тогда

		ТабДокумент = ПечатьПутевойЛист();	
        		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), ЭтотОбъект.Ссылка);

КонецПроцедуры // Печать

Функция ПечатьМаршрутныйЛист(БезТоваров=0)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МегаЛогист_МаршрутныйЛист.Номер КАК НомерМаршрутногоЛиста,
	|	МегаЛогист_МаршрутныйЛист.Дата КАК ДатаМаршрутногоЛиста,
	|	МегаЛогист_МаршрутныйЛист.Курьер,
	|	МегаЛогист_МаршрутныйЛист.Комментарий
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист КАК МегаЛогист_МаршрутныйЛист
	|ГДЕ
	|	МегаЛогист_МаршрутныйЛист.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.МаршрутноеЗадание.ЗаказПокупателя.Номер КАК НомерЗаказа,
	|	ВложенныйЗапрос.МаршрутноеЗадание.ДатаДоставки КАК ДатаДоставки,
	|	ВложенныйЗапрос.МаршрутноеЗадание.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ВложенныйЗапрос.МаршрутноеЗадание.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ВложенныйЗапрос.МаршрутноеЗадание.АдресДоставки КАК АдресДоставки,
	|	ВложенныйЗапрос.МаршрутноеЗадание.КонтактноеЛицоКонтрагента КАК КонтактноеЛицо,
	|	ВложенныйЗапрос.МаршрутноеЗадание.Телефон КАК КонтактныйТелефон,
	|	ВложенныйЗапрос.Стоимость,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ЗаказПокупателя,
	|	ВложенныйЗапрос.МаршрутноеЗадание.ДополнениеКАдресуДоставки КАК Примечание,
	|	ВложенныйЗапрос.ЗаказПокупателя.Комментарий КАК КомментарийКСоставу
	|ИЗ
	|	(ВЫБРАТЬ
	|		МаршрутныйЛистМаршрутныеЗадания.НомерСтроки КАК НомерСтроки,
	|		МаршрутныйЛистМаршрутныеЗадания.Ссылка.Курьер КАК Курьер,
	|		МаршрутныйЛистМаршрутныеЗадания.ДокументСсылка КАК МаршрутноеЗадание,
	|		СУММА(МегаЛогист_ДокументыМаршрутныхЗаданий.Документ.СуммаДокумента) КАК Стоимость,
	|		МаршрутныйЛистМаршрутныеЗадания.ДокументСсылка.ЗаказПокупателя.Контрагент КАК Контрагент,
	|		МаршрутныйЛистМаршрутныеЗадания.ДокументСсылка.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания КАК МаршрутныйЛистМаршрутныеЗадания
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МегаЛогист_ДокументыМаршрутныхЗаданий КАК МегаЛогист_ДокументыМаршрутныхЗаданий
	|			ПО МаршрутныйЛистМаршрутныеЗадания.ДокументСсылка = МегаЛогист_ДокументыМаршрутныхЗаданий.Регистратор
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей КАК МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей
	|			ПО МаршрутныйЛистМаршрутныеЗадания.ДокументСсылка.ЗаказПокупателя = МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ
	|	ГДЕ
	|		МаршрутныйЛистМаршрутныеЗадания.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МаршрутныйЛистМаршрутныеЗадания.ДокументСсылка,
	|		МаршрутныйЛистМаршрутныеЗадания.Ссылка.Курьер,
	|		МаршрутныйЛистМаршрутныеЗадания.НомерСтроки,	
	|		МаршрутныйЛистМаршрутныеЗадания.ДокументСсылка.ЗаказПокупателя.Контрагент,
	|		МаршрутныйЛистМаршрутныеЗадания.ДокументСсылка.ЗаказПокупателя) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ТаблицаЗаданий = Запрос.Выполнить().Выгрузить();
		
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛист";
	
	Макет = ПолучитьМакет("МаршрутныйЛист");

	ОбластьЗаголовокНачалаСтроки	= Макет.ПолучитьОбласть("Заголовок|НачалоСтроки");
	ОбластьЗаголовок				= Макет.ПолучитьОбласть("Заголовок|Товар");
	ОбластьЗаголовокОкончаниеСтроки	= Макет.ПолучитьОбласть("Заголовок|ОкончаниеСтроки");
	
	ОбластьШапкаНачалаСтроки		= Макет.ПолучитьОбласть("Шапка|НачалоСтроки");
	ОбластьШапка					= Макет.ПолучитьОбласть("Шапка|Товар");
	ОбластьШапкаОкончаниеСтроки		= Макет.ПолучитьОбласть("Шапка|ОкончаниеСтроки");
	
	ОбластьНачалаСтроки				= Макет.ПолучитьОбласть("Строка|НачалоСтроки");
	ОбластьТовар					= Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьОкончаниеСтроки			= Макет.ПолучитьОбласть("Строка|ОкончаниеСтроки");
	
	ОбластьПодвалНачалаСтроки		= Макет.ПолучитьОбласть("Подвал|НачалоСтроки");
	ОбластьПодвал					= Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьПодвалОкончаниеСтроки	= Макет.ПолучитьОбласть("Подвал|ОкончаниеСтроки");
	
	ОбластьПодвалСтрокиНачалаСтроки		= Макет.ПолучитьОбласть("ПодвалСтроки|НачалоСтроки");
	ОбластьПодвалСтроки					= Макет.ПолучитьОбласть("ПодвалСтроки|Товар");
	ОбластьПодвалСтрокиОкончаниеСтроки	= Макет.ПолучитьОбласть("ПодвалСтроки|ОкончаниеСтроки");

	ОбластьЗаголовокНачалаСтроки.Параметры.НомерМаршрутногоЛиста	= Шапка.НомерМаршрутногоЛиста;
	ОбластьЗаголовокНачалаСтроки.Параметры.ДатаМаршрутногоЛиста		= Формат( Шапка.ДатаМаршрутногоЛиста, "ДФ=dd.MM.yyyy");
	ОбластьЗаголовокНачалаСтроки.Параметры.Курьер					= Шапка.Курьер;
	//Заголовок
	ТабДокумент.Вывести(ОбластьЗаголовокНачалаСтроки);
	Если БезТоваров=0 тогда
		ТабДокумент.Присоединить(ОбластьЗаголовок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьЗаголовокОкончаниеСтроки);
	
	//Шапка
	ТабДокумент.Вывести(ОбластьШапкаНачалаСтроки); 	
	Если БезТоваров=0 тогда
		ТабДокумент.Присоединить(ОбластьШапка);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьШапкаОкончаниеСтроки);
	
	Для каждого тСтрока Из ТаблицаЗаданий Цикл 
		ОбластьСтрока = Новый ТабличныйДокумент; 
		ЗаполнитьЗначенияСвойств(ОбластьНачалаСтроки.Параметры, тСтрока);
		//////////////////// вывод состава
		Если БезТоваров=0 тогда
			ОбластьТовар = Новый ТабличныйДокумент;
			Для Каждого ттСтрока Из тСтрока.ЗаказПокупателя.Товары Цикл
				ОбластьСтрокаТовар	= Макет.ПолучитьОбласть("Строка|Товар");
				ОбластьСтрокаТовар.Параметры.ТоварНомерСтроки		= ттСтрока.НомерСтроки;
				ОбластьСтрокаТовар.Параметры.ТоварНаименование	= "" + ттСтрока.Номенклатура;// + ттСтрока.ХарактеристикаНоменклатуры;
				ОбластьСтрокаТовар.Параметры.ТоварКоличество		= Формат(ттСтрока.Количество,"ЧЦ=15; ЧДЦ=2");
				ОбластьТовар.Вывести(ОбластьСтрокаТовар);
			КонецЦикла;
			Если тСтрока.ЗаказПокупателя.Товары.Количество() = 0 Тогда
				ОбластьСтрокаТовар	= Макет.ПолучитьОбласть("Строка|Товар");
				ОбластьТовар.Вывести(ОбластьСтрокаТовар);
			КонецЕсли;
		КонецЕсли;
		//////////////////// вывод состава
		
		// Получим телефон
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидОсновногоТелефона	= ПолучитьВидКИ(Перечисления.ТипыКонтактнойИнформации.Телефон, "Основной телефон");
		ЗаписьОсновногоТелефона = ПолучитьЗаписьКИ(ТипКИ, ВидОсновногоТелефона, тСтрока.Контрагент);
				
		ОбластьОкончаниеСтроки.Параметры.Заказчик						= ""+тСтрока.Контрагент+Символы.ПС+тСтрока.КонтактноеЛицо;
		ОбластьОкончаниеСтроки.Параметры.КонтактныйТелефонКонтрагента	= ЗаписьОсновногоТелефона.Представление;
				
		ЗаполнитьЗначенияСвойств(ОбластьОкончаниеСтроки.Параметры, тСтрока);
		//Spoon++
		МетаданныеДокумента = тСтрока.ЗаказПокупателя.Метаданные();
		Если НЕ ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента) Тогда
			ВидОплаты = "";
		иначе	
			Если ТипЗнч(тСтрока.ЗаказПокупателя.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
				ВидОплаты = "Наличная";
			Иначе
				ВидОплаты = "Безналичная";
			КонецЕсли;
		КонецЕсли;	
        ОбластьОкончаниеСтроки.Параметры.ВидОплаты	= ВидОплаты;
		//ОбластьОкончаниеСтроки.Параметры.СтатусОплаты	= УправлениеЗаказамиКлиентов.ПолучитьСтатусОплатыЗаказаПокупателя(тСтрока.ЗаказПокупателя);
		//ОбластьОкончаниеСтроки.Параметры.СуммаКПолучению	= УправлениеЗаказамиКлиентов.ПолучитьСуммуОплатыЗаказаПокупателя(тСтрока.ЗаказПокупателя);
		ОбластьОкончаниеСтроки.Параметры.СтатусОплаты	= "";
		ОбластьОкончаниеСтроки.Параметры.Сумма	= тСтрока.ЗаказПокупателя.СуммаДокумента;
		//Spoon--
		мВысота = ОбластьТовар.ВысотаТаблицы;
		
		тОбласть = ОбластьНачалаСтроки.Область(1,1,мВысота,1);
		тОбласть.Объединить();
		тОбласть = ОбластьНачалаСтроки.Область(1,2,мВысота,2);
		тОбласть.Объединить();
		тОбласть = ОбластьНачалаСтроки.Область(1,3,мВысота,3);
		тОбласть.Объединить();
		тОбласть = ОбластьНачалаСтроки.Область(1,4,мВысота,4);
		тОбласть.Объединить();
		тОбласть = ОбластьНачалаСтроки.Область(1,5,мВысота,5);
		тОбласть.Объединить();
		тОбласть = ОбластьНачалаСтроки.Область(1,6,мВысота,6);
		тОбласть.Объединить();
		
		тОбласть = ОбластьОкончаниеСтроки.Область(1,1,мВысота,1);
		тОбласть.Объединить();
		тОбласть = ОбластьОкончаниеСтроки.Область(1,2,мВысота,2);
		тОбласть.Объединить();
		тОбласть = ОбластьОкончаниеСтроки.Область(1,3,мВысота,4);
		тОбласть.Объединить();
		тОбласть = ОбластьОкончаниеСтроки.Область(1,5,мВысота,5);
		тОбласть.Объединить();
		тОбласть = ОбластьОкончаниеСтроки.Область(1,6,мВысота,6);
		тОбласть.Объединить();
		тОбласть = ОбластьОкончаниеСтроки.Область(1,7,мВысота,7);
		тОбласть.Объединить();
		тОбласть = ОбластьОкончаниеСтроки.Область(1,8,мВысота,8);
		тОбласть.Объединить();
		тОбласть = ОбластьОкончаниеСтроки.Область(1,9,мВысота,9);
		тОбласть.Объединить();
		тОбласть = ОбластьОкончаниеСтроки.Область(1,10,мВысота,10);
		тОбласть.Объединить();

		ОбластьСтрока.Вывести(ОбластьНачалаСтроки);
		Если БезТоваров=0 тогда
			ОбластьСтрока.Присоединить(ОбластьТовар,1,"Товар", Истина);
		КонецЕсли;	
		ОбластьСтрока.Присоединить(ОбластьОкончаниеСтроки);
		ОбластьСтрока.АвтоМасштаб = Истина;
		ТабДокумент.Вывести(ОбластьСтрока);
		
		ТабДокумент.Вывести(ОбластьПодвалСтрокиНачалаСтроки); 	
		Если БезТоваров=0 тогда
			ТабДокумент.Присоединить(ОбластьПодвалСтроки);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьПодвалСтрокиОкончаниеСтроки);
	
	КонецЦикла;
		
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;   	
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДокументыРеализации(МассивЗаказов)
	
	МассивРеализаций=Новый Массив;
	
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("МассивЗаказов",МассивЗаказов);
	Запрос.Текст="ВЫБРАТЬ
	             |	РеализацияТоваровУслуг.Ссылка
	             |ИЗ
	             |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	             |ГДЕ
	             |	РеализацияТоваровУслуг.Проведен = Истина
	             |	И РеализацияТоваровУслуг.Сделка В(&МассивЗаказов)";
	Результат=Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		МассивРеализаций.Добавить(Результат.Ссылка);
	КонецЦикла;
	
	Возврат МассивРеализаций
	
КонецФункции

// Функция формирует табличный документ с печатной формой универсального передаточного документа
Процедура ПечатьУниверсальныхПередаточныхДокументов(ИмяМакета, КоличествоЭкземпляров, НаПринтер)
	
	МассивОбъектов=Новый Массив;
	МассивЗаказов=Новый Массив;
	
	ОбъектыПечати = Новый СписокЗначений;
	
	Для Каждого СтрокаМЗ из МаршрутныеЗадания цикл
		ЗаказПокупателя=СтрокаМЗ.ДокументСсылка.ЗаказПокупателя;
		Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда
			Если ТипЗнч(ЗаказПокупателя.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				МассивЗаказов.Добавить(ЗаказПокупателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивОбъектов=ПолучитьДокументыРеализации(МассивЗаказов);
		
	Для каждого СсылкаОбъекта Из МассивОбъектов Цикл
		
		СсылкаОбъекта.ПолучитьОбъект().Печать(ИмяМакета, КоличествоЭкземпляров, НаПринтер);		
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПечатьПутевойЛист() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МегаЛогист_МаршрутныйЛист.Номер КАК НомерМаршрутногоЛиста,
	|	МегаЛогист_МаршрутныйЛист.Дата КАК ДатаМаршрутногоЛиста,
	|	МегаЛогист_МаршрутныйЛист.Курьер,
	|	МегаЛогист_МаршрутныйЛист.Комментарий,
	|	МегаЛогист_МаршрутныйЛист.Транспорт
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист КАК МегаЛогист_МаршрутныйЛист
	|ГДЕ
	|	МегаЛогист_МаршрутныйЛист.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Результат = Запрос.Выполнить();

	Шапка = Результат.Выбрать();	
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ГрузовогоАвтомобиля";
		
	Макет = ПолучитьМакет("ПутевойЛист");
	ТекОбласть = Макет.ПолучитьОбласть("ПервыйЛист");
	ТекОбласть.Параметры.Заполнить(Шапка);
	
	// данные об организации
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	СведенияОбОрганизации     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	ТекОбласть.Параметры.ПараметрыОрганизации	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	
	ТекОбласть.Параметры.ТССерия=Транспорт.ЛицензионнаяКарточкаСерия;
	ТекОбласть.Параметры.ТСНомер=Транспорт.ЛицензионнаяКарточкаНомер;
	ТекОбласть.Параметры.ТСМарка=Транспорт.Марка;
	ТекОбласть.Параметры.ТСГосНомер=Транспорт.Код;
	
	ТекОбласть.Параметры.ПрицепМарка=Транспорт.Прицеп;
	ТекОбласть.Параметры.ПрицепГосНомер=Транспорт.ГосударственныйНомерПрицепа;
	
	ТекОбласть.Параметры.ПечОрганизация=СокрЛП(Организация.Наименование);;
			
	ТабДокумент.Вывести(ТекОбласть);

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	ТекОбласть = Макет.ПолучитьОбласть("ВторойЛистЧасть1");
	ТабДокумент.Вывести(ТекОбласть);
	
	ТекОбласть = Макет.ПолучитьОбласть("Маршрут");
	НС=0;
	Для Каждого СтрокаМЗ из МаршрутныеЗадания цикл
		НС=НС+1;
		ТекОбласть.Параметры.ПунктРазгрузки = СтрокаМЗ.ДокументСсылка.АдресДоставки;
		ТекОбласть.Параметры.НС = НС;
		ТекОбласть.Параметры.ДатаДоставки = ДатаДоставки;
		ТекОбласть.Параметры.Контрагент=СтрокаМЗ.ДокументСсылка.Контрагент;
		//ТекОбласть.Параметры.ПунктПогрузки  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ФактическийАдрес");;
		ТабДокумент.Вывести(ТекОбласть);
	КонецЦикла;	

	ТекОбласть = Макет.ПолучитьОбласть("ВторойЛистЧасть2");
	ТабДокумент.Вывести(ТекОбласть);
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДокументыПКО(МассивЗаказов)
	
	МассивПКО=Новый Массив;
	
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("МассивЗаказов",МассивЗаказов);
	Запрос.Текст="ВЫБРАТЬ
	             |	ПриходныйКассовыйОрдер.Ссылка
	             |ИЗ
	             |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	             |ГДЕ
	             |	ПриходныйКассовыйОрдер.Проведен = ИСТИНА
	             |	И ПриходныйКассовыйОрдер.ДокументОснование В(&МассивЗаказов)";
	Результат=Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		МассивПКО.Добавить(Результат.Ссылка);
	КонецЦикла;
	
	Возврат МассивПКО
	
КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Процедура ПечатьПКО(ИмяМакета, КоличествоЭкземпляров, НаПринтер)

	МассивОбъектов=Новый Массив;
	МассивЗаказов=Новый Массив;
	
	ОбъектыПечати = Новый СписокЗначений;
	
	Для Каждого СтрокаМЗ из МаршрутныеЗадания цикл
		ЗаказПокупателя=СтрокаМЗ.ДокументСсылка.ЗаказПокупателя;
		Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда
			Если ТипЗнч(ЗаказПокупателя.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
				МассивЗаказов.Добавить(ЗаказПокупателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивОбъектов=ПолучитьДокументыПКО(МассивЗаказов);
	
	Для каждого СсылкаОбъекта Из МассивОбъектов Цикл
		
		СсылкаОбъекта.ПолучитьОбъект().Печать(ИмяМакета, КоличествоЭкземпляров, НаПринтер);		
		
	КонецЦикла;
	
КонецПроцедуры // ПечатьПКО()

#КонецЕсли
 
// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	СтруктураМакетов.Вставить("МаршрутныйЛист", "Маршрутный лист");
	СтруктураМакетов.Вставить("МаршрутныйЛистБезТоваров", "Маршрутный лист (без товаров)");
	
	//СтруктураМакетов.Вставить("УниверсальныйПередаточныйДокумент", 
	//															"Универсальный передаточный документ (УПД)");
	//СтруктураМакетов.Вставить("ПКО", "Приходный кассовый ордер");
	//
	//СтруктураМакетов.Вставить("ПутевойЛист", "Путевой лист");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()
 
Функция ПолучитьВидКИ(ТипКИ, ВидКИ) Экспорт
	
	СправочникВКИ = Справочники.ВидыКонтактнойИнформации;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Ссылка
	               |ИЗ
	               |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |ГДЕ
	               //|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	               |	ВидыКонтактнойИнформации.Тип = &Тип
	               |	И ВидыКонтактнойИнформации.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации",Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	Запрос.УстановитьПараметр("Тип",ТипКИ);
	Запрос.УстановитьПараметр("Наименование",ВидКИ);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВидКонтактнойИнформации = Выборка.Ссылка;
	Иначе
	//НайденныйЭлемент = СправочникВКИ.НайтиПоНаименованию(ВидКИ, Истина);
	//Если НайденныйЭлемент.Пустая() Тогда
		//НовыйЭлемент = СправочникВКИ.СоздатьЭлемент();
		//НовыйЭлемент.Наименование = ВидКИ;
		//НовыйЭлемент.Тип = ТипКИ;
		//НовыйЭлемент.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов;
		//НовыйЭлемент.Записать();
		//
		//ВидКонтактнойИнформации = НовыйЭлемент.Ссылка;
	//Иначе
	//	ВидКонтактнойИнформации = НайденныйЭлемент;	
	КонецЕсли;
	
	Возврат ВидКонтактнойИнформации;
	
КонецФункции

// Функция возвращает запись об адресе из регистра сведений "КонтактнаяИнформация"
Функция ПолучитьЗаписьКИ(ТипКИ, ВидКИ, Клиент) Экспорт
	
	НаборЗаписейКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписейКИ.Отбор.Объект.Установить(Клиент);
	НаборЗаписейКИ.Отбор.Тип.Установить(ТипКИ);
	НаборЗаписейКИ.Отбор.Вид.Установить(ВидКИ);
	НаборЗаписейКИ.Прочитать();
	
	Если НаборЗаписейКИ.Количество()=1 Тогда
		ЗаписьКИ = НаборЗаписейКИ[0];
	Иначе
		ЗаписьКИ = НаборЗаписейКИ.Добавить();
		ЗаписьКИ.Объект = Клиент;
		ЗаписьКИ.Тип = ТипКИ;
		ЗаписьКИ.Вид = ВидКИ;
	КонецЕсли;
	
	Возврат ЗаписьКИ;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДвиженияПоРегиструДокументыМаршрутныхЛистов(СтруктураШапкиДокумента, ТаблицаПоДокументам, Отказ, Заголовок)

	НаборДвижений	= Движения.МегаЛогист_ДокументыМаршрутныхЛистов;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументам, ТаблицаДвижений);
	Для Каждого тСтрока Из ТаблицаДвижений Цикл
		тСтрока.Регистратор = Ссылка;
	КонецЦикла;

	НаборДвижений.мПериод          	= Дата;
	НаборДвижений.мТаблицаДвижений	= ТаблицаДвижений;
	НаборДвижений.Записывать		= Истина;

	Если Не Отказ Тогда
		Движения.МегаЛогист_ДокументыМаршрутныхЛистов.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструДокументыМаршрутныхЗаданий()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция ПолучитьТаблицуМаршрутныхЗаданий() Экспорт
	
	мМаршрутныеЗадания = Новый Массив;
	Для Каждого тСтрока Из МаршрутныеЗадания Цикл
		Если ЗначениеЗаполнено(тСтрока.ДокументСсылка) Тогда
			мМаршрутныеЗадания.Добавить(тСтрока.ДокументСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МегаЛогист_МаршрутноеЗадание.Ссылка КАК ДокументСсылка,
	|	МегаЛогист_МаршрутноеЗадание.ПометкаУдаления,
	|	МегаЛогист_МаршрутноеЗадание.Номер,
	|	МегаЛогист_МаршрутноеЗадание.Дата,
	|	МегаЛогист_МаршрутноеЗадание.Проведен,
	|	МегаЛогист_МаршрутноеЗадание.АдресДоставки,
	|	МегаЛогист_МаршрутноеЗадание.ВремяДоставкиПо,
	|	МегаЛогист_МаршрутноеЗадание.ВремяДоставкиС,
	|	МегаЛогист_МаршрутноеЗадание.ДатаДоставки,
	|	МегаЛогист_МаршрутноеЗадание.ДополнениеКАдресуДоставки,
	|	МегаЛогист_МаршрутноеЗадание.Задание,
	|	МегаЛогист_МаршрутноеЗадание.ЗаказПокупателя,
	|	МегаЛогист_МаршрутноеЗадание.Комментарий,
	|	МегаЛогист_МаршрутноеЗадание.КонтактноеЛицоКонтрагента,
	|	МегаЛогист_МаршрутноеЗадание.Контрагент,
	|	МегаЛогист_МаршрутноеЗадание.Курьер,
	|	МегаЛогист_МаршрутноеЗадание.Ответственный,
	|	МегаЛогист_МаршрутноеЗадание.Статус,
	|	МегаЛогист_МаршрутноеЗадание.СтоимостьДоставки,
	|	МегаЛогист_МаршрутноеЗадание.СуммаНаличныхКВозврату,
	|	МегаЛогист_МаршрутноеЗадание.СуммаНаличныхКПолучению,
	|	ЛОЖЬ КАК Флаг
	|ИЗ
	|	Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
	|ГДЕ
	|	МегаЛогист_МаршрутноеЗадание.Ссылка В(&тбзМаршрутныеЗадания)";
	Запрос.УстановитьПараметр("тбзМаршрутныеЗадания"	, мМаршрутныеЗадания);
	тбзМаршрутныеЗадания = Запрос.Выполнить().Выгрузить();
	
	Возврат тбзМаршрутныеЗадания;
	
КонецФункции

Процедура ПересчитатьИтоги() Экспорт
	
	мМаршрутныеЗадания = Новый Массив;
	Для Каждого тСтрока Из МаршрутныеЗадания Цикл
		мМаршрутныеЗадания.Добавить(тСтрока.ДокументСсылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ВложенныйЗапрос.СтоимостьДоставкиПлан, 0) КАК СтоимостьДоставкиПлан,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СуммаНаличныхКВозврату, 0) КАК СуммаНаличныхКВозврату,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СуммаНаличныхКПолучению, 0) КАК СуммаНаличныхКПолучению,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СтоимостьДоставки, 0) КАК СтоимостьДоставки,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СуммаВозвращенныхНаличных, 0) КАК СуммаВозвращенныхНаличных,
	               |	ЕСТЬNULL(ВложенныйЗапрос.СуммаПолученныхНаличных, 0) КАК СуммаПолученныхНаличных
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СУММА(ВЫБОР
	               |				КОГДА МегаЛогист_МаршрутноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.КРаспределению)
	               |						ИЛИ МегаЛогист_МаршрутноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполняется)
	               |					ТОГДА МегаЛогист_МаршрутноеЗадание.СтоимостьДоставки
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК СтоимостьДоставкиПлан,
	               |		СУММА(ВЫБОР
	               |				КОГДА МегаЛогист_МаршрутноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.КРаспределению)
	               |						ИЛИ МегаЛогист_МаршрутноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполняется)
	               |					ТОГДА МегаЛогист_МаршрутноеЗадание.СуммаНаличныхКВозврату
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК СуммаНаличныхКВозврату,
	               |		СУММА(ВЫБОР
	               |				КОГДА МегаЛогист_МаршрутноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.КРаспределению)
	               |						ИЛИ МегаЛогист_МаршрутноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполняется)
	               |					ТОГДА МегаЛогист_МаршрутноеЗадание.СуммаНаличныхКПолучению
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК СуммаНаличныхКПолучению,
	               |		СУММА(ВЫБОР
	               |				КОГДА МегаЛогист_МаршрутноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполнен)
	               |					ТОГДА МегаЛогист_МаршрутноеЗадание.СтоимостьДоставки
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК СтоимостьДоставки,
	               |		СУММА(ВЫБОР
	               |				КОГДА МегаЛогист_МаршрутноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполнен)
	               |					ТОГДА МегаЛогист_МаршрутноеЗадание.СуммаНаличныхКВозврату
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК СуммаВозвращенныхНаличных,
	               |		СУММА(ВЫБОР
	               |				КОГДА МегаЛогист_МаршрутноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполнен)
	               |					ТОГДА МегаЛогист_МаршрутноеЗадание.СуммаНаличныхКПолучению
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК СуммаПолученныхНаличных
	               |	ИЗ
	               |		Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
	               |	ГДЕ
	               |		МегаЛогист_МаршрутноеЗадание.Ссылка В(&тбзМаршрутныеЗадания)) КАК ВложенныйЗапрос";
	Запрос.УстановитьПараметр("тбзМаршрутныеЗадания"	, мМаршрутныеЗадания);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//Модифицируем документ только в случае действительного изменения сумм
		СуммаБыла  = СуммаНаличныхКВозврату+СуммаНаличныхКПолучению+СтоимостьДоставкиПлан;
		СуммаСтала = Выборка.СуммаНаличныхКВозврату+Выборка.СуммаНаличныхКПолучению+Выборка.СтоимостьДоставкиПлан;
		Если СуммаБыла <> СуммаСтала Тогда
			СуммаНаличныхКВозврату 		= Выборка.СуммаНаличныхКВозврату;
			СуммаНаличныхКПолучению		= Выборка.СуммаНаличныхКПолучению;
			СтоимостьДоставкиПлан 		= Выборка.СтоимостьДоставкиПлан;
		КонецЕсли;
		СуммаБыла  = СуммаВозвращенныхНаличных+СуммаПолученныхНаличных+СтоимостьДоставки;
		СуммаСтала = Выборка.СуммаВозвращенныхНаличных+Выборка.СуммаПолученныхНаличных+Выборка.СтоимостьДоставки;
		Если СуммаБыла <> СуммаСтала Тогда
			СуммаВозвращенныхНаличных 	= Выборка.СуммаВозвращенныхНаличных;
			СуммаПолученныхНаличных		= Выборка.СуммаПолученныхНаличных;
			СтоимостьДоставки 			= Выборка.СтоимостьДоставки;
		КонецЕсли;
	Иначе
		СуммаНаличныхКВозврату 		= 0;
		СуммаНаличныхКПолучению		= 0;
		СтоимостьДоставкиПлан 		= 0;
		СуммаВозвращенныхНаличных 	= 0;
		СуммаПолученныхНаличных		= 0;
		СтоимостьДоставки 			= 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусВыполнения()
	
	Если Статус <> Перечисления.МегаЛогист_СтатусыМаршрутныхЛистов.Выполняется Тогда
		Возврат;
	КонецЕсли;
	
	мМаршрутныеЗадания = Новый Массив;
	Для Каждого тСтрока Из МаршрутныеЗадания Цикл
		мМаршрутныеЗадания.Добавить(тСтрока.ДокументСсылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	МегаЛогист_МаршрутноеЗадание.Ссылка
	               |ИЗ
	               |	Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
	               |ГДЕ
	               |	МегаЛогист_МаршрутноеЗадание.Ссылка В(&тбзМаршрутныеЗадания)
	               |	И МегаЛогист_МаршрутноеЗадание.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполняется)";
	Запрос.УстановитьПараметр("тбзМаршрутныеЗадания"	, мМаршрутныеЗадания);
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Статус = Перечисления.МегаЛогист_СтатусыМаршрутныхЛистов.Выполнен;
	КонецЕсли;
	
КонецПроцедуры

Функция ПулучитьДокументыДляИсправленияКурьеров() Экспорт
	
	мДокументыДляИсправления = Новый Массив;
	Для Каждого тСтрока Из МаршрутныеЗадания Цикл
		Если тСтрока.ДокументСсылка.Курьер <> Курьер И ЗначениеЗаполнено(тСтрока.ДокументСсылка) Тогда
			мДокументыДляИсправления.Добавить(тСтрока.ДокументСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мДокументыДляИсправления;
	
КонецФункции

Процедура ИсправитьКурьеровВДокументах(мДокументыДляИсправления, Отказ = Ложь)
	
	Для Каждого тЭл Из мДокументыДляИсправления Цикл
		тДок = тЭл.ПолучитьОбъект();
		тДок.Курьер = Курьер;
		Попытка
			тДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ДвиженияПоРегиструВзаиморасчетыСКурьером()
	
	Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Записывать = Истина;
	
	//Приход по операциям
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.ВыданоКурьеру;
	Движение.Сумма=СуммаВыдано;	
	//***
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.ОплатаОтКлиентов;
	Движение.Сумма=СуммаКПолучению;
	
	//Расход по операциям
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.ПолученоОтКурьера;
	Движение.Сумма=СуммаПолучено;
	//***
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.ВозвратТовара;
	Движение.Сумма=СуммаВозврат;
	//***
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.ПодтвержденныеРасходы;
	Движение.Сумма=СуммаПотрачено;
	//***
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.Прочее;
	Движение.Сумма=СуммаПрочее;	
	//***
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.НевыполненныеЗадания;
	Движение.Сумма=СуммаНевыполненно;
	
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Документ"              , "ДокументСсылка");
	
	РезультатЗапросаПоДокументам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МаршрутныеЗадания", СтруктураПолей);
	ТаблицаПоДокументам = РезультатЗапросаПоДокументам.Выгрузить();
	
	ДвиженияПоРегиструДокументыМаршрутныхЛистов(СтруктураШапкиДокумента, ТаблицаПоДокументам, Отказ, Заголовок);
	
	ДвиженияПоРегиструВзаиморасчетыСКурьером();

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение и Статус = Перечисления.МегаЛогист_СтатусыМаршрутныхЛистов.Выполняется Тогда
		Если Не ЗначениеЗаполнено(Курьер) Тогда
			Сообщить("Не заполнен курьер!", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		мДокументыДляИсправления = ПулучитьДокументыДляИсправленияКурьеров();
		ИсправитьКурьеровВДокументах(мДокументыДляИсправления, Отказ);
		Для Каждого тСтрока Из МаршрутныеЗадания Цикл
			Если ЗначениеЗаполнено(тСтрока.ДокументСсылка) и тСтрока.ДокументСсылка.Статус = Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.КРаспределению Тогда
				МегаЛогист_УправлениеДоставкой.УстановитьСтатусМаршрутногоЗадания(тСтрока.ДокументСсылка, Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполняется, Отказ);
			КонецЕсли;
		КонецЦикла;
		УстановитьСтатусВыполнения();
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Статус = Перечисления.МегаЛогист_СтатусыМаршрутныхЛистов.Создан;
		Для Каждого тСтрока Из МаршрутныеЗадания Цикл
			Если ЗначениеЗаполнено(тСтрока.ДокументСсылка) Тогда
				МегаЛогист_УправлениеДоставкой.УстановитьСтатусМаршрутногоЗадания(тСтрока.ДокументСсылка, Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.КРаспределению, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура Последовательность()Экспорт
	
	МЗ = МаршрутныеЗадания.Выгрузить();
	
	МЗ.Колонки.Добавить("ДокументОснование");
	МЗ.Колонки.Добавить("ВремяДоставкиС");
	МЗ.Колонки.Добавить("ВремяДоставкиПо");
	МЗ.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число"));
	
	ПустаяДата = Дата(1,1,1);
	Для Каждого СтрокаМЗ из МЗ цикл
		
		СтрокаМЗ.ДокументОснование=СтрокаМЗ.ДокументСсылка.ЗаказПокупателя;
		СтрокаМЗ.ВремяДоставкиС=?(СтрокаМЗ.ДокументСсылка.ВремяДоставкиС=ПустаяДата,Дата(1,1,1,23,59,59),СтрокаМЗ.ДокументСсылка.ВремяДоставкиС);
		СтрокаМЗ.ВремяДоставкиПо=?(СтрокаМЗ.ДокументСсылка.ВремяДоставкиПо=ПустаяДата,Дата(1,1,1,23,59,59),СтрокаМЗ.ДокументСсылка.ВремяДоставкиПо);
		
	КонецЦикла;
	
	Для Каждого СтрокаМЗ из МЗ цикл
		Если ТипЗнч(СтрокаМЗ.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") тогда
			Для Каждого СтрокаОснование из СтрокаМЗ.ДокументОснование.Товары цикл
				Если ТипЗнч(СтрокаОснование.Заказ)=Тип("ДокументСсылка.ЗаявкаПокупателя") тогда
					
					НайденныеСтроки=МЗ.НайтиСтроки(Новый Структура("ДокументОснование",СтрокаОснование.Назначение.Заказ));
					Для Каждого НайденнаяСтрока из НайденныеСтроки цикл
						НайденнаяСтрока.Приоритет=2;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;	
	
	//МЗ.Сортировать("Приоритет,ВремяДоставкиПо,ВремяДоставкиС");
	МЗ.Сортировать("ПорядкаОбъезда,Приоритет,ВремяДоставкиПо,ВремяДоставкиС");
	
	МаршрутныеЗадания.Загрузить(МЗ);
	
КонецПроцедуры

Функция РасчитатьСуммуКПолучению() Экспорт
	
	СуммаПлан=0;
	Для Каждого СтрокаМЗ из МаршрутныеЗадания цикл		
								
		МЗ=СтрокаМЗ.ДокументСсылка;
		ДокументОснование=МЗ.ЗаказПокупателя;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаПокупателя") или
			ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда			
			
			СуммаПлан=СуммаПлан+ДокументОснование.СуммаДокумента;					
			
		КонецЕсли;				
		
	КонецЦикла;
	
	Возврат СуммаПлан;
	
КонецФункции

Функция РасчитатьСуммуНевыполненных() Экспорт
	
	СуммаНевыполненных=0;
	Для Каждого СтрокаМЗ из МаршрутныеЗадания цикл
		
		Если СтрокаМЗ.ДокументСсылка.Статус=Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.НеВыполнено или
			СтрокаМЗ.ДокументСсылка.Статус=Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.Отменен тогда
		иначе
			Продолжить;
		КонецЕсли;	
		
		МЗ=СтрокаМЗ.ДокументСсылка;
		ДокументОснование=МЗ.ЗаказПокупателя;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаПокупателя") или
			ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда			
			
			СуммаНевыполненных=СуммаНевыполненных+ДокументОснование.СуммаДокумента;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаНевыполненных;
	
КонецФункции

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");