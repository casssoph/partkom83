
Функция ПолучитьМассивАдресов(ДокументСсылка)

	Обработка = Обработки.МегаЛогист_РаботаСКартамиОСМ.Создать();
	СписокАдресов = Новый СписокЗначений;
	Для каждого СтрокаТЧ Из ДокументСсылка.МаршрутныеЗадания Цикл
		
		Если НачалоДня(ДокументСсылка.ДатаДоставки) = НачалоДня(СтрокаТЧ.ДокументСсылка.ДатаДоставки) 
			И СтрокаТЧ.ДокументСсылка.Статус <> Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.Отменен
			И Не СтрокаТЧ.ДокументСсылка.ПометкаУдаления  Тогда
			
			//Если МегаЛогист_Общий.ЭтоПроблемноеМЗ(СтрокаТЧ.МаршрутноеЗадание) тогда
			//	Продолжить;
			//КонецЕсли;	
			
			СписокАдресов.Добавить(СтрокаТЧ.НомерСтроки, Обработка.ПривестиАдресДляПоиска(СтрокаТЧ.ДокументСсылка.АдресДоставки));
		
		КонецЕсли;
	
	КонецЦикла;

	Возврат СписокАдресов;
КонецФункции // ПолучитьМассивАдресов()

&НаСервере
Функция ПолучитьСтрокуКоординат(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Мегалогист_Автограф_ТочкиМаршрута.НомерТочки КАК Номер,
	               |	Мегалогист_Автограф_ТочкиМаршрута.Лат КАК Широта,
	               |	Мегалогист_Автограф_ТочкиМаршрута.Лон КАК Долгота
	               |ИЗ
	               |	РегистрСведений.Мегалогист_Автограф_ТочкиМаршрута КАК Мегалогист_Автограф_ТочкиМаршрута
	               |ГДЕ
	               |	Мегалогист_Автограф_ТочкиМаршрута.МаршрутныйЛист = &МаршрутныйЛист
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номер";
	
	Запрос.УстановитьПараметр("МаршрутныйЛист", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	//ТаблицаПереносаНакарту.Загрузить(Результат.Выгрузить());
	СтрокаКоординат = "";
	Пока Выборка.Следующий() Цикл
	
		СтрокаКоординат = СтрокаКоординат + СтрЗаменить(Выборка.Широта, ",", ".") + "," + СтрЗаменить(Выборка.Долгота, ",", ".") + ";";
	
	КонецЦикла;
	
	Возврат СтрокаКоординат;
КонецФункции // ПолучитьМассивАдресов()

&НаКлиенте
Процедура ПечатьДокумента(Команда) //печать по кнопке в режиме отладки
	
	//КартаHTML.Печать();
	Элементы.ПолеКарты.Документ.parentWindow.print();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактнуюИнформацию(Объект, ТипИнформации = Неопределено, ВидИнформации = Неопределено)
	
	текКонструктор = Новый ПостроительЗапроса;
	текКонструктор.Текст =
	"ВЫБРАТЬ
	|	тбИнформация.Представление,
	|	тбИнформация.Ссылка Как КонтИнформация,
	|   тбИнформация.Вид,
	|	тбИнформация.Тип.Порядок КАК ТипПорядок
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК тбИнформация
	|ГДЕ
	|	тбИнформация.Ссылка = &Ссылка
	|	И тбИнформация.Тип В(&Типы)
	|{ГДЕ
	|	тбИнформация.Вид.*}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тбИнформация.Представление,
	|	тбИнформация.Ссылка Как КонтИнформация,
	|   тбИнформация.Вид,
	|	тбИнформация.Тип.Порядок
	|ИЗ
	|	Справочник.усКонтрагенты.КонтактнаяИнформация КАК тбИнформация
	|ГДЕ
	|	тбИнформация.Ссылка = &Ссылка
	|	И тбИнформация.Тип В(&Типы)
	|{ГДЕ
	|	тбИнформация.Вид.*}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипПорядок
	|";
	
	мсвТипыКИ = Новый Массив;
	Если ЗначениеЗаполнено(ТипИнформации) тогда
		мсвТипыКИ.Добавить(ТипИнформации);
	Иначе	
		мсвТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		//мсвТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		//мсвТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Факс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидИнформации) тогда
		текЭлемент = текКонструктор.Отбор.Добавить("Вид");
		текЭлемент.ВидСравнения  = ВидСравнения.ВСписке;
		текЭлемент.Значение      = ВидИнформации;
		текЭлемент.Использование = Истина;
	КонецЕсли;
	
	текКонструктор.Параметры.Вставить("Ссылка", Объект);
	текКонструктор.Параметры.Вставить("Типы", мсвТипыКИ);
	
	текКонструктор.Выполнить();
	текВыборка = текКонструктор.Результат.Выбрать();
	
	текПредставление = "";
	Пока текВыборка.Следующий() Цикл
		текПредставление = текПредставление +?(ПустаяСтрока(текПредставление), "", ", ") + СокрЛП(текВыборка.Представление);
	КонецЦикла;
	
	Возврат текПредставление;
	
КонецФункции

// Функция формирует печатную форму документа.
//
// Параметры:
//  Тип - Строка - тип печатной формы: Рейс
//  МассивОбъектов - Массив - массив документов для печати
//  ОбъектыПечати - СписокЗначений
//
// Возвращаемое значение:
//  ТабличныйДокумент
//
&НаСервере
Функция СформироватьПечатнуюФормуЗагрузочныйЛист(МассивОбъектов, ОбъектыПечати,Макет)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Возврат ТабДок;	
	
КонецФункции // СформироватьПечатнуюФорму()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Если Не ВебКлиент Тогда
	///////////////////////////////////////////
	//Мироненко Д.С 25.10.2016 11:18:10 НАЧАЛО
	//Комментарий: Отключение получения на сервере
	
	////получим архив
	//Каталог = КаталогВременныхФайлов();
	//Архив = Обработки.МегаЛогист_РабочееМестоЛогиста.ПолучитьМакет("Исходники");
	//Архив.Записать(Каталог + "arj.zip");
	//ЧтениеАрхива = Новый ЧтениеZipФайла(Каталог + "arj.zip");
	//ЧтениеАрхива.ИзвлечьВсе(Каталог+"source2");
	//КартаHTML = Каталог+"source2\leaflet.html";
	//
	////Запишем маркера по-умолчанию
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//               |	Маркеры.Ссылка
	//               |ИЗ
	//               |	Справочник.МегаЛогист_Маркеры КАК Маркеры
	//               |ГДЕ
	//               |	Маркеры.ПоУмолчанию = ИСТИНА";
	//	
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//	
	//	Маркер = Выборка.Ссылка.ПолучитьОбъект();
	//	Картинка = Маркер.Маркер1.Получить();
	//	Картинка.Записать(КаталогВременныхФайлов() + "source2\" + "default1.png");
	//	Картинка = Маркер.Маркер2.Получить();
	//	Картинка.Записать(КаталогВременныхФайлов() + "source2\" + "default2.png");
	//
	//КонецЕсли;
	
	//Мироненко Д.С 25.10.2016 11:18:19 КОНЕЦ
	///////////////////////////////////////////	
	#КонецЕсли
	ЗадержкаОтправкиЗапроса = 0.1;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияКарты()

	#Если Не ВебКлиент Тогда
	//получим архив
	Каталог = КаталогВременныхФайлов();
	Архив = Обработки.МегаЛогист_РабочееМестоЛогиста.ПолучитьМакет("Исходники");
	Архив.Записать(Каталог + "arj.zip");
	ЧтениеАрхива = Новый ЧтениеZipФайла(Каталог + "arj.zip");
	ЧтениеАрхива.ИзвлечьВсе(Каталог+"source2");
	КартаHTML = Каталог+"source2\leaflet.html";
	
	//Запишем маркера по-умолчанию
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Маркеры.Ссылка
	|ИЗ
	|	Справочник.МегаЛогист_Маркеры КАК Маркеры
	|ГДЕ
	|	Маркеры.ПоУмолчанию = ИСТИНА";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Маркер = Выборка.Ссылка.ПолучитьОбъект();
		Картинка = Маркер.Маркер1.Получить();
		Картинка.Записать(КаталогВременныхФайлов() + "source2\" + "default1.png");
		Картинка = Маркер.Маркер2.Получить();
		Картинка.Записать(КаталогВременныхФайлов() + "source2\" + "default2.png");
	
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуИнициализацииСервер()

	Обработка = Обработки.МегаЛогист_РаботаСКартамиОСМ.Создать();
	Возврат Обработка.ПолучитьСтрокуИнициализации();

КонецФункции

// Убирает из строки адреса не нужные данные: индекс, дом, №, г
//
// Параметры
//  СтрокаАдреса  - Строка - исходная строка
//
// Возвращаемое значение:
//   Строка   - Очищенная строка
//
Функция ПривестиАдресДляПоиска(Знач СтрокаАдреса)

	ВозможноИндекс = Лев(СтрокаАдреса, 6);
	Попытка
	
		ВремПеременная = Число(ВозможноИндекс);
		//Если отработало то это число
		СтрокаАдреса = Прав(СтрокаАдреса, СтрДлина(СтрокаАдреса) - 6);
	Исключение
	
	КонецПопытки;
	СтрокаАдреса = СтрЗаменить(СтрокаАдреса, "г,", "");
	СтрокаАдреса = СтрЗаменить(СтрокаАдреса, ",", "");
	СтрокаАдреса = СтрЗаменить(СтрокаАдреса, "№", "");
	СтрокаАдреса = СтрЗаменить(СтрокаАдреса, "дом", "");
	СтрокаАдреса = СтрЗаменить(СтрокаАдреса, "г.", "");
	Возврат СтрокаАдреса;

КонецФункции // ПривестиАдресДляПоиска()

&НаКлиенте 
Процедура ЦиклПереносаНаКарту()

	Если СписокКПереносуНаКарту.Количество() > 0 Тогда
		
		Стр = Число(СписокКПереносуНаКарту[0].Значение);
		СтрокаТаблицы = СписокКПереносуНаКарту[0].Представление;
		СписокКПереносуНаКарту.Удалить(0);
	
	Иначе
	
		Возврат;
	
	КонецЕсли;
	
	Попытка
		
		//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForAddr(
		//Стр, 
		//"" + СтрокаТаблицы, 
		//"Доставка до клиента", 
		//"default1.png");
		//Элементы.КартаHTML.Документ.parentWindow.map_addMarkerForAddr(
		//		Стр,
		//		"" + Стр,
		//		"",
		//		"",
		//		"" + СтрокаТаблицы, 
		//		"Доставка до клиента", 
		//		"default1.png");
		
		СтрокаТаблицы = Новый Структура("АдресДоставки, ТипЗадания", СтрокаТаблицы, "Доставка до клиента");
		СтруктураВозврата = ПроверитьВнесениеАдреса(СтрокаТаблицы.АдресДоставки);
		Если СтруктураВозврата = Неопределено Тогда
			МегаЛогист_Служебный.ДобавитьМаркерАдрес(	Элементы, 
												СтрокаТаблицы, 
												Стр, 
												"default1.png");
		Иначе
			МегаЛогист_Служебный.ДобавитьМаркерЛокация(	Элементы, 
														СтруктураВозврата, 
														СтрокаТаблицы, 
														Стр);
												
		КонецЕсли;									
		//Сообщить("Вывод");
	Исключение
		
		Сообщить("Ошибка: " + ОписаниеОшибки());
		
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ЦиклПереносаНаКарту", ЗадержкаОтправкиЗапроса, Истина);

КонецПроцедуры

&НаКлиенте 
Процедура ЦиклПереносаНаКартуФактТрек()

	Если ТаблицаПереносаНакарту.Количество() > 0 Тогда
		
		Стр = Число(ТаблицаПереносаНакарту[0].Номер) + 9000;
		СтрокаТаблицы = "";
		СтруктураВозврата = Новый Структура("Широта, Долгота", ТаблицаПереносаНакарту[0].Широта, ТаблицаПереносаНакарту[0].Долгота);
		СтрокаКоординат = СтрокаКоординат + СтрЗаменить(ТаблицаПереносаНакарту[0].Широта, ",", ".") + "," + СтрЗаменить(ТаблицаПереносаНакарту[0].Долгота, ",", ".") + ";";
		ТаблицаПереносаНакарту.Удалить(0);
	Иначе
		СтрокаКоординат = Лев(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);
		МегаЛогист_Служебный.НарисоватьПолиЛинию(Элементы, СтрокаКоординат, "black");
		ПодключитьОбработчикОжидания("ЦиклПереносаНаКарту", ЗадержкаОтправкиЗапроса, Истина);
		Возврат;
	
	КонецЕсли;
	
	Попытка
		
		//СтрокаТаблицы = Новый Структура("АдресДоставки, ТипЗадания", СтрокаТаблицы, "Доставка до клиента");
		//МегаЛогист_Служебный.ДобавитьМаркерЛокация(	Элементы, 
		//											СтруктураВозврата, 
		//											СтрокаТаблицы, 
		//											Стр,
		//											,
		//											"");
	Исключение
		
		Сообщить("Ошибка: " + ОписаниеОшибки());
		
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ЦиклПереносаНаКартуФактТрек", ЗадержкаОтправкиЗапроса, Истина);

КонецПроцедуры

&НаСервере 
// производится проверка переданного адреса по регистру "Сохраненные адреса"
//
// Параметры
//  Адрес - Строка
//
// Возвращаемое значение:
//   Структура   - структура возврата
//
Функция ПроверитьВнесениеАдреса(Адрес)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МегаЛогист_СохраненныеАдреса.Широта,
	|	МегаЛогист_СохраненныеАдреса.Долгота
	|ИЗ
	|	РегистрСведений.МегаЛогист_СохраненныеАдреса КАК МегаЛогист_СохраненныеАдреса
	|ГДЕ
	|	МегаЛогист_СохраненныеАдреса.ПредставлениеАдреса = &ПредставлениеАдреса";
	
	Запрос.УстановитьПараметр("ПредставлениеАдреса", Адрес);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура("Широта, Долгота", Выборка.Широта, Выборка.Долгота)
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли; 	

КонецФункции // ПроверитьВнесениеАдреса()

&НаСервере
Функция ПолучитьСтатус(ДокументОснование)

	Возврат ?(	ДокументОснование.Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Выполнено 
				ИЛИ ДокументОснование.Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.НеВыполнено
				ИЛИ ДокументОснование.Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено, "" + ДокументОснование.Статус, "");

КонецФункции // ПолучитьСтатус()

&НаСервере
Функция ПолучитьЦветМаркераСервер(ДокументОснование)
	
	Статус = ДокументОснование.Статус;
	Если Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.НеВыполнено ИЛИ Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено Тогда
		Возврат "cancel";
	Иначе
		Возврат "done";
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура КартаHTMLДокументСформирован(Элемент)
	
	Если Не ПервыйВызов Тогда
	
		ПервыйВызов = Истина;
		Возврат;
	
	КонецЕсли; 
	
	//Попытка
		Если Не КартаИнициализирована Тогда
			
			Если 	Не ЗначениеЗаполнено(Константы.МегаЛогист_ЦентрШирота.Получить())
				ИЛИ Не ЗначениеЗаполнено(Константы.МегаЛогист_ЦентрДолгота.Получить())
				ИЛИ Не ЗначениеЗаполнено(Константы.МегаЛогист_Зум.Получить())
				ИЛИ Не ЗначениеЗаполнено(Константы.МегаЛогист_ОграничительныйПрямоугольникТочка1Широта.Получить())
				ИЛИ Не ЗначениеЗаполнено(Константы.МегаЛогист_ОграничительныйПрямоугольникТочка1Долгота.Получить())
				ИЛИ Не ЗначениеЗаполнено(Константы.МегаЛогист_ОграничительныйПрямоугольникТочка2Широта.Получить())
				ИЛИ Не ЗначениеЗаполнено(Константы.МегаЛогист_ОграничительныйПрямоугольникТочка2Долгота.Получить())
				ИЛИ Не ЗначениеЗаполнено(Константы.МегаЛогист_СлойДляКартыOSM.Получить()) Тогда
				
			Сообщить("Параметры карты не инициализированы");
			Возврат;
			
			КонецЕсли;
							
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Формат(Константы.МегаЛогист_ЦентрШирота.Получить(),"ЧРД=.; ЧГ=0")); 
			МассивСтрок.Добавить(Формат(Константы.МегаЛогист_ЦентрДолгота.Получить(),"ЧРД=.; ЧГ=0")); 
			МассивСтрок.Добавить(Формат(Константы.МегаЛогист_Зум.Получить(),"ЧРД=.; ЧГ=0")); 
			МассивСтрок.Добавить(Формат(Константы.МегаЛогист_ОграничительныйПрямоугольникТочка1Широта.Получить() ,"ЧРД=.; ЧГ=0")); 
			МассивСтрок.Добавить(Формат(Константы.МегаЛогист_ОграничительныйПрямоугольникТочка1Долгота.Получить(),"ЧРД=.; ЧГ=0")); 
			МассивСтрок.Добавить(Формат(Константы.МегаЛогист_ОграничительныйПрямоугольникТочка2Широта.Получить(),"ЧРД=.; ЧГ=0"));
			МассивСтрок.Добавить(Формат(Константы.МегаЛогист_ОграничительныйПрямоугольникТочка2Долгота.Получить(),"ЧРД=.; ЧГ=0"));
			МассивСтрок.Добавить(Константы.МегаЛогист_СлойДляКартыOSM.Получить().URL);
			МассивСтрок.Добавить(Константы.МегаЛогист_СлойДляКартыOSM.Получить().Copyright);
			МассивСтрок.Добавить(Константы.МегаЛогист_МаркерРазмерX.Получить());
			МассивСтрок.Добавить(Константы.МегаЛогист_МаркерРазмерY.Получить());
			МассивСтрок.Добавить(Константы.МегаЛогист_МаркерЯкорьX.Получить());
			МассивСтрок.Добавить(Константы.МегаЛогист_МаркерЯкорьY.Получить());
			МассивСтрок.Добавить(Константы.МегаЛогист_МаркерОкноЯкорьX.Получить());
			МассивСтрок.Добавить(Константы.МегаЛогист_МаркерОкноЯкорьY.Получить());
			МассивСтрок.Добавить(36);
			МассивСтрок.Добавить(-24);
			МассивСтрок.Добавить(Формат(Константы.МегаЛогист_МаркерНомерX.Получить(),"ЧРД=.; ЧГ=0"));
			МассивСтрок.Добавить(Формат(Константы.МегаЛогист_МаркерНомерY.Получить(),"ЧРД=.; ЧГ=0"));
			МассивСтрок.Добавить(Константы.МегаЛогист_МаркерНомерРазмерШрифта.Получить());
			МассивСтрок.Добавить(13);
			МассивСтрок.Добавить(0);
			МассивСтрок.Добавить(0);
			МассивСтрок.Добавить(0);
			МассивСтрок.Добавить(0);
			МегаЛогист_Служебный.Инициализация(Элементы, МассивСтрок, МегаЛогист_Служебный.ПолучитьИмяГеокодера(), МегаЛогист_Служебный.ПолучитьКлючАПИ());
			КартаИнициализирована = Истина;

			//Вместо массива вернем список
			//МассивАдресов = ПолучитьМассивАдресов(МаршрутныйЛист);
			//Если РежимОтображения = "ФактТрек" Тогда
				
				СтрокаКоординат = ПолучитьСтрокуКоординат(МаршрутныйЛист);
				//ПодключитьОбработчикОжидания("ЦиклПереносаНаКартуФактТрек", ЗадержкаОтправкиЗапроса, Истина);
				СтрокаКоординат = Лев(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);
				Если СтрДлина(СтрокаКоординат) > 5 Тогда
					МегаЛогист_Служебный.НарисоватьПолиЛинию(Элементы, СтрокаКоординат, "black");
				КонецЕсли;

			
			//Иначе
			
				СписокКПереносуНаКарту = ПолучитьМассивАдресов(МаршрутныйЛист);
				
				ПодключитьОбработчикОжидания("ЦиклПереносаНаКарту", ЗадержкаОтправкиЗапроса, Истина);
			
			//КонецЕсли;
			
		КонецЕсли;
	//Исключение
	//
	//КонецПопытки;
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьИмяГеокодера()
	
	Обработка = Обработки.МегаЛогист_РабочееМестоЛогиста.Создать();
	Возврат Обработка.ПолучитьИмяГеокодера()

КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		
		КартаHTML = "<!DOCTYPE html>
                     |<html>
                     |<head>
                     |	<title>Map Leaflet</title>
                     |	<meta charset=""utf-8"" />
                     |	<meta http-equiv=""X-UA-Compatible"" content=""IE=8"" >
                     |
                     |
                     |	<script type=''text/javascript''>
					 |		window.onload = function(){ window.open('" + ПолучитьАдресПубликации() + "/leaflet_web_2.html', '_self'); }
                     |
                     |	</script>
                     |</head>
                     |<body>
                     |
                     |</body>
                     |</html>";
					 
	#Иначе
		//получим архив
		Каталог = КаталогВременныхФайлов();
		
		//Архив = Обработка.ПолучитьМакет("Исходники");
		//Архив.Записать(Каталог + "arj.zip");
		
		Адрес = ПолучитьФайлНаСервере("Исходники", ЭтаФорма.УникальныйИдентификатор,,Отказ);
		Если Отказ тогда
			Возврат;
		КонецЕсли;	
		Описание=Новый ОписаниеПередаваемогоФайла(Каталог + "arj.zip", Адрес);
		МассивОписаний=Новый Массив;
		МассивОписаний.Добавить(Описание);
		ПолучитьФайлы(МассивОписаний,,,Ложь);
		ЧтениеАрхива = Новый ЧтениеZipФайла(Каталог + "arj.zip");
		ЧтениеАрхива.ИзвлечьВсе(Каталог+"source");
		КартаHTML = Каталог+"source\leaflet.html";
		
		Адрес = ПолучитьФайлНаСервере("МаркерыПоУмолчанию", ЭтаФорма.УникальныйИдентификатор, "Маркер1",Отказ);
		Если Отказ тогда
			Возврат;
		КонецЕсли;	
		Описание=Новый ОписаниеПередаваемогоФайла(Каталог + "source\" + "default1.png", Адрес);
		МассивОписаний=Новый Массив;
		МассивОписаний.Добавить(Описание);
		ПолучитьФайлы(МассивОписаний,,,Ложь);

		Адрес = ПолучитьФайлНаСервере("МаркерыПоУмолчанию", ЭтаФорма.УникальныйИдентификатор, "Маркер2",Отказ);
		Если Отказ тогда
			Возврат;
		КонецЕсли;
		Описание=Новый ОписаниеПередаваемогоФайла(Каталог + "source\" + "default2.png", Адрес);
		МассивОписаний=Новый Массив;
		МассивОписаний.Добавить(Описание);
		ПолучитьФайлы(МассивОписаний,,,Ложь);
		
	#КонецЕсли

КонецПроцедуры

&НаСервере
Функция ПолучитьФайлНаСервере(СтрокаПоиска, Идентификатор, ИмяРеквизита = "",Отказ)
	
	Возврат ВернутьФайл(СтрокаПоиска, Идентификатор, ИмяРеквизита,Отказ);
	
КонецФункции

#Область СлужебныеПроцедуры
// Получает имя файла в зависимости от переданного параметра
//
&НаСервере
Функция ВернутьФайл(Файл, Идентификатор, ИмяРеквизита = "",Отказ) Экспорт 
	
	#Если Вебклиент Тогда
		ПодключитьРасширениеРаботыСФайлами();
	#КонецЕсли
	
	Каталог 	= КаталогВременныхФайлов();
	Если Файл = "Исходники" Тогда
		
		//Если МегаЛогист_Служебный.Проверка() тогда
		//	Отказ=Истина;
		//	Возврат "";
		//КонецЕсли;

		Архив 		=  Обработки.МегаЛогист_РаботаСКартамиОСМ.ПолучитьМакет("Исходники");
		Архив.Записать("" + Каталог + "arj.zip");
		Двоичное 	= Новый ДвоичныеДанные(Каталог + "arj.zip");
		Адрес 		= ПоместитьВоВременноеХранилище(Двоичное, Идентификатор);
		Возврат Адрес;
	
	ИначеЕсли Файл = "МаркерыПоУмолчанию" Тогда
	
		//Запишем маркера по-умолчанию
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	МегаЛогист_Маркеры.Ссылка
		|ИЗ
		|	Справочник.МегаЛогист_Маркеры КАК МегаЛогист_Маркеры
		|ГДЕ
		|	МегаЛогист_Маркеры.ПоУмолчанию = ИСТИНА";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Маркер = Выборка.Ссылка.ПолучитьОбъект();
			Картинка = Маркер[ИмяРеквизита].Получить();
			Если Картинка=Неопределено тогда
				Сообщить("Некорректно заполнен маркер по ""По умолчанию""");
				Отказ=Истина;
				Возврат "";		
			КонецЕсли;	
			Картинка.Записать("" + Каталог + "default.png");
			Двоичное 	= Новый ДвоичныеДанные(Каталог + "default.png");
			Адрес 		= ПоместитьВоВременноеХранилище(Двоичное, Идентификатор);
			Возврат Адрес;
			
		иначе
			Сообщить("Назначьте одному из элементов справочника ""Маркеры"" признак ""По умолчанию""");
			Отказ=Истина;
			Возврат "";	
		КонецЕсли;
	
	КонецЕсли;
	

КонецФункции // ПолучитьФайл()

#КонецОбласти

&НаСервере 
Функция ПолучитьАдресПубликации()
	Возврат Константы.МегаЛогист_АдресВебПубликации.Получить();
КонецФункции

&НаКлиенте
Процедура Обновить(Команда)
	МегаЛогист_Служебный.ОчиститьКарту(Элементы);
	СписокКПереносуНаКарту = ПолучитьМассивАдресов(МаршрутныйЛист);
	ПодключитьОбработчикОжидания("ЦиклПереносаНаКарту", ЗадержкаОтправкиЗапроса, Истина);
КонецПроцедуры