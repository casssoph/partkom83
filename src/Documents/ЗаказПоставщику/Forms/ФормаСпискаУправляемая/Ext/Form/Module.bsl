
//Калинин PK83-475 170518
//В идеале надо бы это переписать , чтобы все навигационные кнопки создавались ПриСозданииНаСервере, БСП-ми функциями, как в типовых. 
#Область КомандыНавигации
&НаКлиенте
Процедура СтруктураПодчинености(Команда)
	 лКлючАлгоритма = "Документ_ЗаказПоставщику_ФормаСпискаУправляемая_СтруктураПодчинености";
	 лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	 Если Не лЗамена = Неопределено Тогда
	 	Выполнить(лЗамена);
	 	Возврат;
	 КонецЕсли;
	 //////////////////////////////////////////////////////////////////////////
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		//РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(Элементы.Список.ТекущаяСтрока));
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ДвиженияДокумента(Команда)
	 лКлючАлгоритма = "Документ_ЗаказПоставщику_ФормаСпискаУправляемая_ДвиженияДокумента";
	 лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	 Если Не лЗамена = Неопределено Тогда
	 	Выполнить(лЗамена);
	 	Возврат;
	 КонецЕсли;
	 //////////////////////////////////////////////////////////////////////////
	
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		ОткрытьФорму("Отчет.ОтчетПоДвижениямДокумента.Форма", Новый Структура("Документ,СпособВыводаОтчета", Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(Элементы.Список.ТекущаяСтрока), "ПоВертикали"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияДокумента(Команда)
	 лКлючАлгоритма = "Документ_ЗаказПоставщику_ФормаСпискаУправляемая_ИсторияДокумента";
	 лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	 Если Не лЗамена = Неопределено Тогда
	 	Выполнить(лЗамена);
	 	Возврат;
	 КонецЕсли;
	 //////////////////////////////////////////////////////////////////////////
	
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		ФормаСравненияКорректировок = Обработки.ИсторияДокумента.ПолучитьФорму("ФормаСравненияКорректировок");
		ФормаСравненияКорректировок.Документ = Элементы.Список.ТекущаяСтрока;
		ФормаСравненияКорректировок.ТолькоИзменения = Истина;
		ФормаСравненияКорректировок.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНомеру(Команда)
	 лКлючАлгоритма = "Документ_ЗаказПоставщику_ФормаСпискаУправляемая_ПоискПоНомеру";
	 лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	 Если Не лЗамена = Неопределено Тогда
	 	Выполнить(лЗамена);
	 	Возврат;
	 КонецЕсли;
	 //////////////////////////////////////////////////////////////////////////
	
	Номер = "";
	Если Не ВвестиЗначение(Номер, "Введите номер заявки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная))) Тогда
		Возврат;
	КонецЕсли;
	Если СтрДлина(Номер) < 11 Тогда 
		Номер=Лев(Номер,4)+"0"+Сред(Номер,5);
	КонецЕсли;	
	Если СтрДлина(Номер) < 11 Тогда 
		Предупреждение("Введите 11-значный номер", 5);
		Возврат;
	КонецЕсли;
	
	ИскомыйЭлементОтбора = Неопределено;
	
	Для Каждого ЭлтОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл 
		Если ТипЗнч(ЭлтОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлтОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номер") Тогда
			ИскомыйЭлементОтбора = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлтОтбора.ИдентификаторПользовательскойНастройки);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИскомыйЭлементОтбора = Неопределено Тогда 
		ИскомыйЭлементОтбора = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИскомыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номер");
	КонецЕсли;
	
	ИскомыйЭлементОтбора.ПравоеЗначение = Номер;
	ИскомыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ИскомыйЭлементОтбора.Использование = Истина;
	Для Каждого Стр Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Попытка
			Для Каждого СТРР Из Стр.Элементы Цикл
				СТРР.Использование=ЛОжь;
			КонецЦикла;
		Исключение
		КонецПопытки;	
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	 лКлючАлгоритма = "Документ_ЗаказПоставщику_ФормаСпискаУправляемая_ПриСозданииНаСервере";
	 лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	 Если Не лЗамена = Неопределено Тогда
	 	Выполнить(лЗамена);
	 	Возврат;
	 КонецЕсли;
	 //////////////////////////////////////////////////////////////////////////
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 лКлючАлгоритма = "Документ_ЗаказПоставщику_ФормаСпискаУправляемая_ПриОткрытии";
	 лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	 Если Не лЗамена = Неопределено Тогда
	 	Выполнить(лЗамена);
	 	Возврат;
	 КонецЕсли;
	 //////////////////////////////////////////////////////////////////////////
	// ЛНА, Замер  APDEX ++(
	Попытка		
		APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ЗаказПоставщику_ОткрытиеФормыСписка");
	Исключение
	КонецПопытки;
	//)--
	
	//// ЛНА, Альтернатива проблемной форме
	//Если ПараметрыСеанса.ТекущийПользователь.ОтладкаФормы = Истина Тогда
	//	Отказ = Истина;
	//	
	//	ПолучитьФорму("Документ.ЗаказПоставщику.Форма.ФормаСписка").Открыть();
	//КонецЕсли;
	
КонецПроцедуры
