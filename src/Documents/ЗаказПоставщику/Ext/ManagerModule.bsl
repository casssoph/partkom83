Функция РегистрыНакопления_ЗаказыПоставщикам(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов");
	
	ТабТоваров = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ЗаказыПоставщикам", ТабТоваров);
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТабТоваров;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("Период", вхСсылкаНаДокумент.МоментВремени());
		
	СтатусДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "СтатусДокумента");
	
	//Если СтатусДокумента = Справочники.СтатусыДокументов.ПроведенЗаказПоставщику Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ЗаказПоставщикуТовары.Ссылка КАК Регистратор,
		|	ЗаказПоставщикуТовары.Ссылка.Дата КАК Период,
		|	ЗаказПоставщикуТовары.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщикуТовары.Ссылка.ТорговаяТочка = &ПустаяТТ
		|			ТОГДА ЗаказПоставщикуТовары.Ссылка.Контрагент.ОсновнаяТорговаяТочка
		|		ИНАЧЕ ЗаказПоставщикуТовары.Ссылка.ТорговаяТочка
		|	КОНЕЦ КАК ТорговаяТочка,
		|	ЗаказПоставщикуТовары.Ссылка.Склад КАК Склад,
		|	ЗаказПоставщикуТовары.Номенклатура,
		|	ЗаказПоставщикуТовары.СтрокаЗаявки,
		|	ЗаказПоставщикуТовары.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщикуТовары.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ЗаказПоставщикуТовары.Сумма
		|		ИНАЧЕ ЗаказПоставщикуТовары.Сумма * ЗаказПоставщикуТовары.Ссылка.КурсВзаиморасчетов / ЗаказПоставщикуТовары.Ссылка.КратностьВзаиморасчетов
		|	КОНЕЦ КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщикуТовары.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|			ТОГДА ЗаказПоставщикуТовары.Сумма
		|		ИНАЧЕ ЗаказПоставщикуТовары.Сумма * ЗаказПоставщикуТовары.Ссылка.КурсВзаиморасчетов / ЗаказПоставщикуТовары.Ссылка.КратностьВзаиморасчетов
		|	КОНЕЦ КАК СуммаУпр
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
		|	И ЗаказПоставщикуТовары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки";
		
		Запрос.УстановитьПараметр("ПустаяТТ", Справочники.ТорговыеТочки.ПустаяСсылка());
		Запрос.УстановитьПараметр("ВалютаРеглУчета",  глЗначениеПеременной("ВалютаРегламентированногоУчета"));
		Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
		
		Выборка = Запрос.Выполнить().Выгрузить();
		//
		//ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
		//
		//Для Каждого СтрокаТЧ Из Выборка Цикл 
		//	Если Не Реквизиты.ВалютаДокумента = ВалютаУправленческогоУчета Тогда
		//		КурсВалютыУправленческогоУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУправленческогоУчета, Реквизиты.Дата);
		//		
		//		СтрокаТЧ.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпр, Реквизиты.ВалютаДокумента,
		//		ВалютаУправленческогоУчета, Реквизиты.КурсВзаиморасчетов, КурсВалютыУправленческогоУчета.Курс, Реквизиты.КратностьВзаиморасчетов, КурсВалютыУправленческогоУчета.Кратность);
		//	КонецЕсли;
		//КонецЦикла;
		//
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Выборка, ТабТоваров);
		
	//КонецЕсли;
	
	Возврат ТабТоваров;
	
КонецФункции

Функция РегистрыСведений_ВозможныеЗаменыНоменклатуры(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабЗамен = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраСведений("ВозможныеЗаменыНоменклатуры", ТабЗамен);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТабЗамен;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Ссылка КАК Регистратор,
	|	ЗаказПоставщикуТовары.Ссылка.Дата КАК Период,
	|	ЗаказПоставщикуТовары.СтрокаЗаявки,
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.НоменклатураЗамена
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.НоменклатураЗамена <> &ПустаяСсылка
	|	И ЗаказПоставщикуТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Номенклатура.ПустаяСсылка());
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабЗамен);
	
	Возврат ТабЗамен;
		
КонецФункции

Процедура ВыполнитьПроведение(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	//Если НЕ ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
		Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ЗаказыПоставщикам") тогда
			ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ЗаказыПоставщикам",
			РегистрыНакопления_ЗаказыПоставщикам(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		КонецЕсли;
		
		Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ВозможныеЗаменыНоменклатуры") тогда
			ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ВозможныеЗаменыНоменклатуры",
			РегистрыСведений_ВозможныеЗаменыНоменклатуры(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		КонецЕсли;
		
	//КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьОтменуПроведения(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент);	
		
КонецПроцедуры

//--------------------------------------

Функция ПолучитьМакетДляОкнаПоставщика(вхСсылкаНаДокумент) Экспорт
	НПФ=0;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорректировкаЗаказаПоставщику.Ссылка
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику КАК КорректировкаЗаказаПоставщику
	|ГДЕ
	|	КорректировкаЗаказаПоставщику.ДокументОснование = &ДокументОснование
	|	И КорректировкаЗаказаПоставщику.Проведен
	|	И КорректировкаЗаказаПоставщику.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ОтправленПоставщику)"
	);
	Запрос.УстановитьПараметр("ДокументОснование", вхСсылкаНаДокумент);
	
	ВыполнитьЗапросПоОбъекту = Ложь;
	Р = Запрос.Выполнить();
	Если Р.Пустой() Тогда
		ВыполнитьЗапросПоОбъекту = Истина;
		
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если ЗначениеЗаполнено(вхСсылкаНаДокумент.Контрагент)Тогда 
		Если вхСсылкаНаДокумент.Контрагент.ПечатнаяФорма="Основная форма" Тогда
			Макет = Документы.ЗаказПоставщику.ПолучитьМакет("ДляОкнаПоставщика");
		ИначеЕсли вхСсылкаНаДокумент.Контрагент.ПечатнаяФорма="DENSO" Тогда 
			Макет = Документы.ЗаказПоставщику.ПолучитьМакет("Денсо");
			НПФ=1;
		ИначеЕсли вхСсылкаНаДокумент.Контрагент.ПечатнаяФорма="KOMPA" Тогда 
			Макет = Документы.ЗаказПоставщику.ПолучитьМакет("Комра");
			НПФ=2;
		Иначе
			Макет = Документы.ЗаказПоставщику.ПолучитьМакет("ДляОкнаПоставщика");
		КонецЕсли;
	Иначе	
		Макет = Документы.ЗаказПоставщику.ПолучитьМакет("ДляОкнаПоставщика");
	КонецЕсли;	
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	РеквизитыШапки = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхСсылкаНаДокумент, 
	"Номер,Дата,Организация,Контрагент,СуммаДокумента,Склад");
	Если НПФ=0 Тогда  
		Область.Параметры.ТекстЗаголовка = "Заказ №" + РеквизитыШапки.Номер + " от " 
		+ Формат(РеквизитыШапки.Дата, "ДЛФ=DD");
	ИначеЕсли НПФ=2 Тогда 
		Область.Параметры.ТекстЗаголовка = РеквизитыШапки.Номер;
		Область.Параметры.Дата = Формат(РеквизитыШапки.Дата, "ДЛФ=D");
	Иначе
		Область.Параметры.ТекстЗаголовка = "Заказ №" + РеквизитыШапки.Номер + " от " 
		+ Формат(РеквизитыШапки.Дата, "ДЛФ=DD");
	КонецЕсли;	
	
	ТабДокумент.Вывести(Область);                             
	
	Область = Макет.ПолучитьОбласть("Поставщик");
	Область.Параметры.Поставщик = Строка(РеквизитыШапки.Контрагент);
	ТабДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Покупатель");
	Область.Параметры.Покупатель = Строка(РеквизитыШапки.Организация) + " / " + Строка(РеквизитыШапки.Склад);
	ТабДокумент.Вывести(Область);
	
	//#PK83-747 Kalinin V.A. ( 2018-06-04 )
	если НПФ = 0 тогда 
	КонтрагентОП = вхСсылкаНаДокумент.Контрагент.РаботатьСОкномПоставщика;
	ИмяОбластиОП = ?(КонтрагентОП," ОП"," НЕОП");
	Область = Макет.ПолучитьОбласть("ШапкаТаблицы | Общая");
	ТабДокумент.Вывести(Область);
	ДопОбласть = Макет.ПолучитьОбласть("ШапкаТаблицы |"+ИмяОбластиОП);
	ТабДокумент.Присоединить(ДопОбласть);
	Иначе
	Область = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(Область);
	КонецЕсли;

	Запрос = Новый Запрос;
	Если ВыполнитьЗапросПоОбъекту Тогда
		 //#XX-93 Kalinin V.A. ( 2018-06-14 )
		 //Незнаю зачем лезьть в цены, но не стал убирать запросам к ним, т.к может есть сокральный смысл
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура.Наименование КАК Номенклатура,
		|	Товары.Номенклатура.Артикул КАК Артикул,
		|	ЕСТЬNULL(Товары.СтрокаЗаявки.АртикулПоставщика, """") КАК АртикулПоставщика,
		|	ЕСТЬNULL(Товары.СтрокаЗаявки.ИзготовительПоставщика, """") КАК Изготовитель,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СтрокаЗаявки.ПрайсПоставщика.Наименование КАК ПрайсПоставщика,
		|	Товары.СтрокаЗаявки.ПрайсПоставщика.Код КАК КодПрайсПоставщика,
		|	Товары.Количество КАК КоличествоОтвет,
		|	Товары.СрокГарантированныйЗаказа,
		|	Товары.Ссылка.Филиал.Наименование КАК Регион,
		|	Товары.СтрокаЗаявки.IDSite КАК IDSite,
		|	Товары.Номенклатура.Изготовитель
		|ПОМЕСТИТЬ ДанныеТоваров
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ПрайсПоставщика.Владелец,
		|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена) КАК Цена
		|ПОМЕСТИТЬ ВТЧЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
		|			,
		|			ПрайсПоставщика ССЫЛКА Справочник.ПрайсыПоставщиковVMI
		|				И ВЫРАЗИТЬ(ПрайсПоставщика КАК Справочник.ПрайсыПоставщиковVMI).Владелец = &Контрагент
		|				И Номенклатура.Номенклатура В
		|					(ВЫБРАТЬ
		|						ДанныеТоваров.Номенклатура
		|					ИЗ
		|						ДанныеТоваров)) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ПрайсПоставщика.Владелец,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеТоваров.НомерСтроки,
		|	ДанныеТоваров.Номенклатура,
		|	ДанныеТоваров.Артикул,
		|	ДанныеТоваров.АртикулПоставщика,
		|	ДанныеТоваров.Изготовитель,
		|	ДанныеТоваров.Количество,
		|	ДанныеТоваров.Цена,
		|	ДанныеТоваров.Сумма,
		|	ДанныеТоваров.ПрайсПоставщика,
		|	ДанныеТоваров.КодПрайсПоставщика,
		|	ДанныеТоваров.КоличествоОтвет,
		|	ДанныеТоваров.СрокГарантированныйЗаказа,
		|	ДанныеТоваров.Регион,
		|	ДанныеТоваров.IDSite,
		|	ДанныеТоваров.НоменклатураИзготовитель,
		|	ЕСТЬNULL(ВТЧЦены.Номенклатура.МинКолПартии, 1) КАК МинКолПартии
		|ИЗ
		|	ДанныеТоваров КАК ДанныеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЧЦены КАК ВТЧЦены
		|		ПО ДанныеТоваров.Номенклатура = ВТЧЦены.Номенклатура.Номенклатура";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Корректировки.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ Корректировки
		|ИЗ
		|	Документ.КорректировкаЗаказаПоставщику КАК Корректировки
		|ГДЕ
		|	Корректировки.ДокументОснование = &Ссылка
		|	И Корректировки.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ОтправленПоставщику)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ПрайсПоставщика.Владелец,
		|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена) КАК Цена
		|ПОМЕСТИТЬ ВТЧЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
		|			,
		|			ПрайсПоставщика ССЫЛКА Справочник.ПрайсыПоставщиковVMI
		|				И ВЫРАЗИТЬ(ПрайсПоставщика КАК Справочник.ПрайсыПоставщиковVMI).Владелец = &Контрагент) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ПрайсПоставщика.Владелец,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура.Наименование КАК Номенклатура,
		|	Товары.Номенклатура.Артикул КАК Артикул,
		|	ЕСТЬNULL(Товары.СтрокаЗаявки.АртикулПоставщика, """") КАК АртикулПоставщика,
		|	ЕСТЬNULL(Товары.СтрокаЗаявки.ИзготовительПоставщика, """") КАК Изготовитель,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СтрокаЗаявки.ПрайсПоставщика.Наименование КАК ПрайсПоставщика,
		|	Товары.СтрокаЗаявки.ПрайсПоставщика.Код КАК КодПрайсПоставщика,
		|	Товары.Количество КАК КоличествоОтвет,
		|	Товары.СрокГарантированныйЗаказа,
		|	Товары.Ссылка.Филиал.Наименование КАК Регион,
		|	Товары.СтрокаЗаявки.IDSite КАК IDSite,
		|	ЕСТЬNULL(ВТЧЦены.Номенклатура.МинКолПартии, 1) КАК МинКолПартии,
		|	Товары.Номенклатура.Изготовитель
		|ИЗ
		|	Документ.КорректировкаЗаказаПоставщику.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЧЦены КАК ВТЧЦены
		|		ПО (ВТЧЦены.Номенклатура = Товары.Номенклатура)
		|			И (ВТЧЦены.ПрайсПоставщикаВладелец = Товары.Ссылка.Контрагент)
		|ГДЕ
		|	Товары.Ссылка В
		|			(ВЫБРАТЬ
		|				Корректировки.Ссылка
		|			ИЗ
		|				Корректировки КАК Корректировки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Номенклатура";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("Контрагент", ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "Контрагент"));
	ТабЗ = Запрос.Выполнить().Выгрузить();
	Если НПФ=1 Или Нпф=2 Тогда 
		ТабЗ.Свернуть("Номенклатура,НоменклатураИзготовитель,Изготовитель,Артикул,АртикулПоставщика, ПрайсПоставщика,IDSite,Регион,Цена", "Количество, Сумма");
	КонецЕсли;	
	
	НС=1;
	если НПФ = 0 тогда 
		Область = Макет.ПолучитьОбласть("Строка| Общая");  
		ДопОбласть = Макет.ПолучитьОбласть("Строка |"+ ИмяОбластиОП);
	иначе
		Область = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;

	Для Каждого Товар Из ТабЗ Цикл
		Производитель=СокрЛП(Товар.ПрайсПоставщика);
		Производитель=Сред(Производитель,8);
		ПечПоставщик=Лев(Производитель, Найти(Производитель,"_")-1);
		ПечТипПоставки=Сред(Производитель,Найти(Производитель,"_")+1);
		
		Область.Параметры.Заполнить(Товар);
		Если Не НПФ=1 Тогда 
			Если Строка(область.Параметры.Изготовитель)="" Тогда 
				область.Параметры.Изготовитель=Товар.НоменклатураИзготовитель;
			КонецЕсли;	
		КонецЕсли;	
		Если Не НПФ=1 Тогда 
			Если Строка(область.Параметры.Изготовитель)="" Тогда 
				область.Параметры.Изготовитель=Товар.НоменклатураИзготовитель;
			КонецЕсли;	
		КонецЕсли;	
		Если НПФ=1 Тогда 
			//#PK83-569 Kalinin V.A. ( 2018-05-31 )
			область.Параметры.НомерЗаказа=СтроковыеФункцииКлиентСервер.УбратьЛидирующиеНули(Прав(РеквизитыШапки.Номер,8));
		КонецЕсли;
		Если НПФ=2 Тогда 
			область.Параметры.ТипПоставки=ПечТипПоставки;
			область.Параметры.ИзготовительПоставщика=ПечПоставщик;
			область.Параметры.НомерСтроки=НС;
			Нс=Нс+1;
		КонецЕсли;
		
		ТабДокумент.Вывести(Область);
		
		если НПФ = 0  тогда 
			 ДопОбласть.Параметры.Заполнить(Товар);
			ТабДокумент.Присоединить(ДопОбласть);

		КонецЕсли;	
		
	КонецЦикла;
	
	Если НПФ=0 И Товар <> Неопределено Тогда
		Область = Макет.ПолучитьОбласть("Итого| Общая");
		Область.Параметры.КоличествоСтрок = ТабЗ.Количество();
		Область.Параметры.ИтогСумма = Формат(РеквизитыШапки.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРГ=");
		ТабДокумент.Вывести(Область);
		ДопОбласть = Макет.ПолучитьОбласть("Итого |"+ ИмяОбластиОП);
		ДопОбласть.Параметры.Заполнить(Товар);
		ТабДокумент.Присоединить(ДопОбласть);

	КонецЕсли;
	
	Возврат ТабДокумент;
			
КонецФункции

Функция ПолучитьМетаданные()
	Возврат Метаданные.Документы.ЗаказПоставщику;
КонецФункции

//--------------------------------------
//24.06.16
// СтруктураДокумента - фиксированная структура (СтруктураШапки, ТабЧастьТовары, ТабЧастьПричинОтказов)
// СтруктураШапки - структура с новыми значениями реквизитов шапки (любых, которые нужно изменить)
// если в структуре шапки передается новый статус, то двигаем документ на него. если только это движение будет последовательным
// не передавая в структуре документа ТабЧастьТовары, обновить причины отказов нельзя
Процедура ЗаполнитьДокументНовымиЗначениями(новСтатусДокумента = Неопределено, вхСсылкаНаДокумент = Неопределено, СтруктураДокумента = Неопределено) Экспорт
	Если вхСсылкаНаДокумент = Неопределено
		ИЛИ новСтатусДокумента = Неопределено
		ИЛИ СтруктураДокумента = Неопределено
		ИЛИ ТипЗнч(вхСсылкаНаДокумент) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = вхСсылкаНаДокумент.ПолучитьОбъект();
	
	Если СтруктураДокумента.Свойство("СтруктураШапки") Тогда
		СтруктураШапки = СтруктураДокумента.СтруктураШапки;
		
		текСтатус = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "СтатусДокумента");
		новСтатус = РаботаСоСтатусамиДокументов.ПолучитьСледующийСтатус(текСтатус);//пробуем толкнуть вперед
			
		Если новСтатус <> новСтатусДокумента Тогда
			новСтатус = РаботаСоСтатусамиДокументов.ПолучитьПредыдущийСтатус(текСтатус);//пробуем толкнуть назад
				
			Если новСтатус <> новСтатусДокумента Тогда
				//некуда идти
				Возврат;
			КонецЕсли;
				
		КонецЕсли;
			
		Если новСтатус = Неопределено Тогда
			//некуда идти, перестраховались и вернулись без изменений
			Возврат;
				
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураШапки Цикл
			ДокументОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			
		КонецЦикла;
		ДокументОбъект.СтатусДокумента = новСтатусДокумента;
		
	КонецЕсли;
	
	
	Если СтруктураДокумента.Свойство("ТабЧастьТовары") Тогда
		Для Каждого ТекСтр Из СтруктураДокумента.ТабЧастьТовары Цикл
			ТекСтр.СтрокаЗаказа = РаботаСоСтатусамиДокументов.ОбновитьЗаписьСтрокЗаказа(вхСсылкаНаДокумент, ТекСтр.СтрокаЗаказа, 
			ТекСтр.СтавкаНДС, ТекСтр.Комментарий, ТекСтр.СрокГарантированныйЗаказа, 
			ТекСтр.СрокОжидаемыйЗаказа, ТекСтр.СтрокаЗаявки, ТекСтр.Количество, ТекСтр.НомерСтроки);
			
			Если СтруктураДокумента.Свойство("ТабЧастьПричинОтказов") Тогда
				Для Каждого Причина Из СтруктураДокумента.ТабЧастьПричинОтказов.НайтиСтроки(Новый Структура("КлючСвязи", текСтр.КлючСвязи)) Цикл
					Причина.СтрокаЗаказа = ТекСтр.СтрокаЗаказа;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.Товары.Загрузить(СтруктураДокумента.ТабЧастьТовары);
		
		Если СтруктураДокумента.Свойство("ТабЧастьПричинОтказов") Тогда
			ТабПричинОтказов = СтруктураДокумента.ТабЧастьПричинОтказов;
			ТабПричинОтказов.Свернуть("СтрокаЗаказа,СтрокаЗаявки,ПричинаОтказа,КлючСвязи,ЗагруженИзОП","Количество");
			ДокументОбъект.ПричиныОтказов.Загрузить(ТабПричинОтказов);
			
		КонецЕсли;
		
		Если новСтатусдокумента = Справочники.СтатусыДокументов.НовыйЗаказПоставщику Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		ИначеЕсли новСтатусдокумента = Справочники.СтатусыДокументов.ПроведенЗаказПоставщику Тогда
			 ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			 
		Иначе
			//почему то если документ уже проведен он не перепроводится
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Документы.ЗаказПоставщику.ВыполнитьПроведение(вхСсылкаНаДокумент, Ложь);
			
		КонецЕсли;
		
		//Если ДокументОбъект.Проведен Тогда
		//	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
		//Иначе
			//ДокументОбъект.Дата = ТекущаяДата();
			//Попытка
				//ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			//Исключение
			//	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//КонецПопытки;
			
		//КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьНовуюКорректировкуЗаказа(новСтатусДокумента = Неопределено, вхСсылкаНаДокумент = Неопределено) Экспорт
	Если вхСсылкаНаДокумент = Неопределено
		ИЛИ новСтатусДокумента = Неопределено
		ИЛИ ТипЗнч(вхСсылкаНаДокумент) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	текСтатус = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "СтатусДокумента");
	новСтатус = РаботаСоСтатусамиДокументов.ПолучитьСледующийСтатус(текСтатус);//пробуем толкнуть вперед
			
	Если новСтатус <> новСтатусДокумента Тогда
		новСтатус = РаботаСоСтатусамиДокументов.ПолучитьПредыдущийСтатус(текСтатус);//пробуем толкнуть назад
				
		Если новСтатус <> новСтатусДокумента Тогда
				//некуда идти
			Возврат Ложь;
		КонецЕсли;
				
	КонецЕсли;
			
	Если новСтатус = Неопределено Тогда
		//некуда идти, перестраховались и вернулись без изменений
		Возврат Ложь;
				
	КонецЕсли;
	
	Если новСтатус = Справочники.СтатусыДокументов.НовыйЗаказПоставщику Тогда
		Попытка
			ДокументОбъект = вхСсылкаНаДокумент.ПолучитьОбъект();
			ДокументОбъект.СтатусДокумента = новСтатусДокумента;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Возврат Истина;
			
		Исключение
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если новСтатус = Справочники.СтатусыДокументов.ПроведенЗаказПоставщику Тогда
		Попытка
			ДокументОбъект = вхСсылкаНаДокумент.ПолучитьОбъект();
			ДокументОбъект.СтатусДокумента = новСтатусДокумента;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Возврат Истина;
			
		Исключение
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
		
	НачатьТранзакцию();
	Попытка
		ДокументОбъект = вхСсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.СтатусДокумента = новСтатусДокумента;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
		НовКорректировка = Документы.КорректировкаЗаказаПоставщику.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовКорректировка, вхСсылкаНадокумент);
		НовКорректировка.Дата = ТекущаяДата();
		НовКорректировка.ДокументОснование = вхСсылкаНаДокумент;
		НовКорректировка.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		Возврат Истина;
		
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьРеквизитыКонтроля(вхМетаданныеОтбора) Экспорт
	
	СтруктураВозврат = Новый Структура;
	Если вхМетаданныеОтбора = Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщика тогда
		
		СтруктураВозврат = Новый Структура("Шапка, ТабличныеЧасти");
		СтруктураВозврат.Шапка = "Контрагент,ДоговорКонтрагента,Организация,Склад,ТорговаяТочка,СтатусДокумента";
		Соответствие = Новый Соответствие;
		Соответствие.Вставить("Товары", "Номенклатура, Количество, ЕдиницаИзмерения, КоличествоОтказ");
		Соответствие.Вставить("ПричиныОтказов", "ПричинаОтказа, Количество");
		СтруктураВозврат.ТабличныеЧасти = Соответствие;
		
	ИначеЕсли вхМетаданныеОтбора = Метаданные.ПланыОбмена.ОбменПартКом83_77 тогда
		Результат = ОбменДаннымиКлиентСервер.РеквизитыКонтроляПоДокументу(ПолучитьМетаданные(), ИсключаемыеРеквизитыКонтроляРегистрации());
	КонецЕсли;
	
	Возврат СтруктураВозврат

КонецФункции

Функция ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхМетаданныеОтбора) Экспорт
	Возврат	РаботаСПоследовательностямиКлиентСервер.ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхМетаданныеОтбора);
КонецФункции

Функция ИсключаемыеРеквизитыКонтроляРегистрации() Экспорт
	
	ИсключаемыеРеквизиты = ОбменДаннымиКлиентСервер.ИнициализироватьТаблицуИсключаемыхРеквизитовКонтроля();
	ОбменДаннымиКлиентСервер.ДобавитьВИсключаемыеРевизиты(ИсключаемыеРеквизиты, "Ссылка");
	
	Возврат ИсключаемыеРеквизиты;
	
КонецФункции



//PaSe_09.03.2017 - Обмен заказами с окном поставщика
//Выгрузка - Инициализация ОП через WS DataExchange(GetExchangeMessage)
Функция ВыгрузитьЭлементы(вхТаблицаСсылокНаОбъекты, вхПланОбмена) Экспорт
	
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если лТип = Тип("Строка") тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли лТип = Тип("ОбъектМетаданных") И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если лМетаданныеПланаОбмена = Неопределено тогда
		ВызватьИсключение "[ВыгрузитьЭлементы]: неправильный параметр номер 2.";
	КонецЕсли;
	
	
	Результат = Новый Массив;
	МассивЗаказов = вхТаблицаСсылокНаОбъекты.ВыгрузитьКолонку("Ссылка");

	Если лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщика тогда
		
		Запрос = ДанныеДляВыгрузкиВОКПоЗаказам(МассивЗаказов);

		МенеджерПланаОбмена = ПланыОбмена[лМетаданныеПланаОбмена.Имя];
		ТипОбъектаЗаказ		= МенеджерПланаОбмена.ТипПоОбъектуМетаданных(ПолучитьМетаданные());
		ТипТовары			= ФабрикаXDTO.Тип(МенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказПоставщику.Товары");
		ТипСтрокиТовары	= ФабрикаXDTO.Тип(МенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказПоставщику.Товары.Строка");
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			ОбъектЗаказ = ФабрикаXDTO.Создать(ТипОбъектаЗаказ);
			ОбъектТЧТовары = ФабрикаXDTO.Создать(ТипТовары);
			ОбъектСписокСтрок = ОбъектТЧТовары.ПолучитьСписок("item");
			
			УстановитьРеквизитыШапкиЗаказа(ОбъектЗаказ, ВыборкаПоЗаказам);
			
			ВыборкаПоСтрокам = ВыборкаПоЗаказам.Выбрать();
			Пока ВыборкаПоСтрокам.Следующий() Цикл
				
				ОбъектСтрокаТовары = ФабрикаXDTO.Создать(ТипСтрокиТовары);
				УстановитьЗначенияСтрокиЗаказа(ОбъектСтрокаТовары,  ОбъектЗаказ, ВыборкаПоСтрокам);
				ОбъектСписокСтрок.Добавить(ОбъектСтрокаТовары);
				
			КонецЦикла;
			
			ОбъектЗаказ.items = ОбъектТЧТовары;
			Результат.Добавить(ОбъектЗаказ);
			
		КонецЦикла;
		
	КонецЕсли;

	
	Возврат Результат;
	
КонецФункции
Функция ДанныеДляВыгрузкиВОКПоЗаказам(МассивЗаказов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказПоставщику.Ссылка КАК Заказ,
	                      |	ЕСТЬNULL(КорректировкаЗаказаПоставщику.Ссылка, ЗаказПоставщику.Ссылка) КАК ДокументЗаказа,
	                      |	ЕСТЬNULL(КорректировкаЗаказаПоставщику.Дата, ЗаказПоставщику.Дата) КАК ДатаДокумента
	                      |ПОМЕСТИТЬ ВТ_ЗаказыСКорректировками
	                      |ИЗ
	                      |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаказаПоставщику КАК КорректировкаЗаказаПоставщику
	                      |		ПО ЗаказПоставщику.Ссылка = КорректировкаЗаказаПоставщику.ДокументОснование
	                      |ГДЕ
	                      |	ЗаказПоставщику.Ссылка В(&МассивСсылок)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ЗаказыСКорректировками.Заказ,
	                      |	МАКСИМУМ(ВТ_ЗаказыСКорректировками.ДатаДокумента) КАК ДатаДокумента
	                      |ПОМЕСТИТЬ ВТ_ДатыПоследнихДокументов
	                      |ИЗ
	                      |	ВТ_ЗаказыСКорректировками КАК ВТ_ЗаказыСКорректировками
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_ЗаказыСКорректировками.Заказ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ЗаказыСКорректировками.Заказ,
	                      |	МАКСИМУМ(ВТ_ЗаказыСКорректировками.ДокументЗаказа) КАК ДокументЗаказа
	                      |ПОМЕСТИТЬ ВТ_Заказы
	                      |ИЗ
	                      |	ВТ_ЗаказыСКорректировками КАК ВТ_ЗаказыСКорректировками
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыПоследнихДокументов КАК ВТ_ДатыПоследнихДокументов
	                      |		ПО ВТ_ЗаказыСКорректировками.Заказ = ВТ_ДатыПоследнихДокументов.Заказ
	                      |			И ВТ_ЗаказыСКорректировками.ДатаДокумента = ВТ_ДатыПоследнихДокументов.ДатаДокумента
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_ЗаказыСКорректировками.Заказ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗаказПоставщикуТовары.Ссылка КАК Заказ,
	                      |	ЗаказПоставщикуТовары.СтрокаЗаявки,
	                      |	ЗаказПоставщикуТовары.Номенклатура,
	                      |	ЗаказПоставщикуТовары.Количество,
	                      |	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
	                      |	ЗаказПоставщикуТовары.НоменклатураЗамена,
	                      |	ЗаказПоставщикуТовары.ЕдиницаИзмеренияЗамена,
	                      |	ЗаказПоставщикуТовары.Цена,
	                      |	ЗаказПоставщикуТовары.Сумма,
	                      |	ЗаказПоставщикуТовары.СрокГарантированныйЗаказа,
	                      |	ЗаказПоставщикуТовары.СрокОжидаемыйЗаказа,
	                      |	ЗаказПоставщикуТовары.КлючСвязи КАК НомерСтроки
	                      |ПОМЕСТИТЬ ВТ_ДанныеЗаказов
	                      |ИЗ
	                      |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	                      |ГДЕ
	                      |	ЗаказПоставщикуТовары.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_Заказы.ДокументЗаказа
	                      |			ИЗ
	                      |				ВТ_Заказы КАК ВТ_Заказы)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	КорректировкаЗаказаПоставщикуТовары.Ссылка.ДокументОснование,
	                      |	КорректировкаЗаказаПоставщикуТовары.СтрокаЗаявки,
	                      |	КорректировкаЗаказаПоставщикуТовары.Номенклатура,
	                      |	КорректировкаЗаказаПоставщикуТовары.Количество,
	                      |	КорректировкаЗаказаПоставщикуТовары.ЕдиницаИзмерения,
	                      |	КорректировкаЗаказаПоставщикуТовары.НоменклатураЗамена,
	                      |	КорректировкаЗаказаПоставщикуТовары.ЕдиницаИзмеренияЗамена,
	                      |	КорректировкаЗаказаПоставщикуТовары.Цена,
	                      |	КорректировкаЗаказаПоставщикуТовары.Сумма,
	                      |	КорректировкаЗаказаПоставщикуТовары.СрокГарантированныйЗаказа,
	                      |	КорректировкаЗаказаПоставщикуТовары.СрокОжидаемыйЗаказа,
	                      |	КорректировкаЗаказаПоставщикуТовары.КлючСвязи
	                      |ИЗ
	                      |	Документ.КорректировкаЗаказаПоставщику.Товары КАК КорректировкаЗаказаПоставщикуТовары
	                      |ГДЕ
	                      |	КорректировкаЗаказаПоставщикуТовары.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_Заказы.ДокументЗаказа
	                      |			ИЗ
	                      |				ВТ_Заказы КАК ВТ_Заказы)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗаказПоставщикуПричиныОтказов.Ссылка КАК Заказ,
	                      |	ЗаказПоставщикуПричиныОтказов.СтрокаЗаявки,
	                      |	ЗаказПоставщикуПричиныОтказов.ПричинаОтказа,
	                      |	ЗаказПоставщикуПричиныОтказов.Количество
	                      |ПОМЕСТИТЬ ВТ_ОтказыПоЗаказам
	                      |ИЗ
	                      |	Документ.ЗаказПоставщику.ПричиныОтказов КАК ЗаказПоставщикуПричиныОтказов
	                      |ГДЕ
	                      |	ЗаказПоставщикуПричиныОтказов.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_Заказы.ДокументЗаказа
	                      |			ИЗ
	                      |				ВТ_Заказы КАК ВТ_Заказы)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	КорректировкаЗаказаПоставщикуПричиныОтказов.Ссылка.ДокументОснование,
	                      |	КорректировкаЗаказаПоставщикуПричиныОтказов.СтрокаЗаявки,
	                      |	КорректировкаЗаказаПоставщикуПричиныОтказов.ПричинаОтказа,
	                      |	КорректировкаЗаказаПоставщикуПричиныОтказов.Количество
	                      |ИЗ
	                      |	Документ.КорректировкаЗаказаПоставщику.ПричиныОтказов КАК КорректировкаЗаказаПоставщикуПричиныОтказов
	                      |ГДЕ
	                      |	КорректировкаЗаказаПоставщикуПричиныОтказов.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_Заказы.ДокументЗаказа
	                      |			ИЗ
	                      |				ВТ_Заказы КАК ВТ_Заказы)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ОтказыПоЗаказам.Заказ,
	                      |	ВТ_ОтказыПоЗаказам.СтрокаЗаявки,
	                      |	СУММА(ВЫБОР
	                      |			КОГДА ВТ_ОтказыПоЗаказам.ПричинаОтказа В (ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ЗаказаноБольшеЧемВПрайсе), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ЗакрытаРаботаСПоставщиком), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.НеНайденоПриСборке), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ОтсутствиеОплатыПоставщику), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ОтсутствуетНаСкладеПартком), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ПревышенСрокРезерва), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.СнятоПоСрокуПК), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ОтказОтДетали), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ОтказПоСроку), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ОтказССайта))
	                      |				ТОГДА ВТ_ОтказыПоЗаказам.Количество
	                      |			ИНАЧЕ 0
	                      |		КОНЕЦ) КАК client_reject_amount,
	                      |	СУММА(ВЫБОР
	                      |			КОГДА ВТ_ОтказыПоЗаказам.ПричинаОтказа В (ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ОтказПоставщикаБрак), ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ОтказПоставщикаБракПриПриемке))
	                      |				ТОГДА ВТ_ОтказыПоЗаказам.Количество
	                      |			ИНАЧЕ 0
	                      |		КОНЕЦ) КАК scrapped_amount,
	                      |	СУММА(ВЫБОР
	                      |			КОГДА ВТ_ОтказыПоЗаказам.ПричинаОтказа В (ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ОтказПоставщикаНедостача))
	                      |				ТОГДА ВТ_ОтказыПоЗаказам.Количество
	                      |			ИНАЧЕ 0
	                      |		КОНЕЦ) КАК missing_amount
	                      |ПОМЕСТИТЬ ВТ_ДанныеОтказов
	                      |ИЗ
	                      |	ВТ_ОтказыПоЗаказам КАК ВТ_ОтказыПоЗаказам
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_ОтказыПоЗаказам.Заказ,
	                      |	ВТ_ОтказыПоЗаказам.СтрокаЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РазмещенияСтрокЗаказовОбороты.СтрокаЗаявки,
	                      |	СУММА(РазмещенияСтрокЗаказовОбороты.КоличествоПриход) КАК shipped_amount
	                      |ПОМЕСТИТЬ ВТ_РазмещениеСтрокЗаказов
	                      |ИЗ
	                      |	РегистрНакопления.РазмещенияСтрокЗаказов.Обороты(
	                      |			,
	                      |			,
	                      |			,
	                      |			СтрокаЗаявки В
	                      |				(ВЫБРАТЬ
	                      |					ВТ_ДанныеЗаказов.СтрокаЗаявки
	                      |				ИЗ
	                      |					ВТ_ДанныеЗаказов КАК ВТ_ДанныеЗаказов)) КАК РазмещенияСтрокЗаказовОбороты
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	РазмещенияСтрокЗаказовОбороты.СтрокаЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТоварыКРезервированиюОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	                      |	СУММА(ТоварыКРезервированиюОбороты.КоличествоПриход) КАК arrived_amount
	                      |ПОМЕСТИТЬ ВТ_ПриемкаПоступления
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыКРезервированию.Обороты(
	                      |			,
	                      |			,
	                      |			,
	                      |			СтрокаЗаявки В
	                      |				(ВЫБРАТЬ
	                      |					ВТ_ДанныеЗаказов.СтрокаЗаявки
	                      |				ИЗ
	                      |					ВТ_ДанныеЗаказов КАК ВТ_ДанныеЗаказов)) КАК ТоварыКРезервированиюОбороты
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТоварыКРезервированиюОбороты.СтрокаЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ДанныеЗаказов.Заказ КАК Заказ,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_ДанныеЗаказов.Заказ.Аукцион = ЗНАЧЕНИЕ(Справочник.АукционПоставщиков.ПустаяСсылка)
	                      |			ТОГДА 0
	                      |		ИНАЧЕ 1
	                      |	КОНЕЦ КАК auction,
	                      |	ВТ_ДанныеЗаказов.СтрокаЗаявки,
	                      |	ВТ_ДанныеЗаказов.ЕдиницаИзмерения,
	                      |	ВТ_ДанныеЗаказов.НоменклатураЗамена,
	                      |	ВТ_ДанныеЗаказов.ЕдиницаИзмеренияЗамена,
	                      |	ВТ_ДанныеЗаказов.СрокГарантированныйЗаказа,
	                      |	ВТ_ДанныеЗаказов.СрокОжидаемыйЗаказа,
	                      |	ВТ_ДанныеЗаказов.Заказ.Номер КАК ЗаказНомер,
	                      |	ВТ_ДанныеЗаказов.Заказ.Дата КАК date_order,
	                      |	ВТ_ДанныеЗаказов.Заказ.Склад.Код КАК partkom_warehouse,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_ДанныеЗаказов.Заказ.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.НовыйЗаказПоставщику)
	                      |			ТОГДА ""new""
	                      |		КОГДА ВТ_ДанныеЗаказов.Заказ.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаказПоставщикуЗакрыт)
	                      |			ТОГДА ""closed""
	                      |		ИНАЧЕ ""work""
	                      |	КОНЕЦ КАК status,
	                      |	ВТ_ДанныеЗаказов.Заказ.Организация.ИНН КАК buyer_inn,
	                      |	ВЫРАЗИТЬ(ВТ_ДанныеЗаказов.Заказ.Организация.НаименованиеПолное КАК СТРОКА(255)) КАК buyer,
	                      |	ВТ_ДанныеЗаказов.Заказ.Контрагент КАК ЗаказКонтрагент,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_ДанныеЗаказов.Заказ.Контрагент.ЗаказРавенПриходу
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК auto_zeroing,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_ДанныеЗаказов.Заказ.Контрагент.АвтоОтказВОкнеПоставщика
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК single_invoice,
	                      |	ВТ_ДанныеЗаказов.Заказ.Контрагент.Код КАК supplier_code,
	                      |	ВЫБОР
	                      |		КОГДА ВТ_ДанныеЗаказов.Заказ.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаказПоставщикуЗакрыт)
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК closed,
	                      |	ВТ_ДанныеЗаказов.НомерСтроки КАК order_no,
	                      |	ЕСТЬNULL(ВТ_ДанныеЗаказов.СтрокаЗаявки.IDSite, """") КАК item_id,
	                      |	ВТ_ДанныеЗаказов.Номенклатура,
	                      |	ЕСТЬNULL(ВТ_ДанныеЗаказов.Номенклатура.Код, """") КАК product_code,
	                      |	ЕСТЬNULL(ВТ_ДанныеЗаказов.Номенклатура.Наименование, """") КАК product_name,
	                      |	ЕСТЬNULL(ВТ_ДанныеЗаказов.Номенклатура.Артикул, """") КАК articul,
	                      |	ЕСТЬNULL(ВТ_ДанныеЗаказов.Номенклатура.Изготовитель.Наименование, """") КАК brand,
	                      |	ВТ_ДанныеЗаказов.Количество КАК amount,
	                      |	ЕСТЬNULL(ВТ_ДанныеОтказов.client_reject_amount, 0) КАК client_reject_amount,
	                      |	ЕСТЬNULL(ВТ_ДанныеОтказов.scrapped_amount, 0) КАК scrapped_amount,
	                      |	ЕСТЬNULL(ВТ_ДанныеОтказов.missing_amount, 0) КАК missing_amount,
	                      |	ВТ_ДанныеЗаказов.Сумма КАК price,
	                      |	ВТ_ДанныеЗаказов.Цена КАК item_price,
	                      |	ЕСТЬNULL(ВТ_ДанныеЗаказов.СтрокаЗаявки.ПрайсПоставщика.Код, 0) КАК warehouse_code,
	                      |	ЕСТЬNULL(ВТ_ДанныеЗаказов.СтрокаЗаявки.АртикулПоставщика, """") КАК supplier_articul,
	                      |	ЕСТЬNULL(ВТ_ДанныеЗаказов.СтрокаЗаявки.ИзготовительПоставщика, """") КАК supplier_brand,
	                      |	ЕСТЬNULL(ВТ_ДанныеЗаказов.СтрокаЗаявки.ПрайсПоставщика.Наименование, """") КАК warehouse_name,
	                      |	ВТ_ДанныеЗаказов.СрокГарантированныйЗаказа КАК date_guaranteed,
	                      |	ВТ_ДанныеЗаказов.СрокОжидаемыйЗаказа КАК date_expected,
	                      |	ЕСТЬNULL(ВТ_РазмещениеСтрокЗаказов.shipped_amount, 0) КАК shipped_amount,
	                      |	ЕСТЬNULL(ВТ_ПриемкаПоступления.arrived_amount, 0) КАК arrived_amount
	                      |ИЗ
	                      |	ВТ_ДанныеЗаказов КАК ВТ_ДанныеЗаказов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеОтказов КАК ВТ_ДанныеОтказов
	                      |		ПО ВТ_ДанныеЗаказов.Заказ = ВТ_ДанныеОтказов.Заказ
	                      |			И ВТ_ДанныеЗаказов.СтрокаЗаявки = ВТ_ДанныеОтказов.СтрокаЗаявки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмещениеСтрокЗаказов КАК ВТ_РазмещениеСтрокЗаказов
	                      |		ПО ВТ_ДанныеЗаказов.СтрокаЗаявки = ВТ_РазмещениеСтрокЗаказов.СтрокаЗаявки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриемкаПоступления КАК ВТ_ПриемкаПоступления
	                      |		ПО ВТ_ДанныеЗаказов.СтрокаЗаявки = ВТ_ПриемкаПоступления.СтрокаЗаявки
	                      |ИТОГИ
	                      |	МАКСИМУМ(auction),
	                      |	МАКСИМУМ(ЗаказНомер),
	                      |	МАКСИМУМ(date_order),
	                      |	МАКСИМУМ(partkom_warehouse),
	                      |	МАКСИМУМ(status),
	                      |	МАКСИМУМ(buyer_inn),
	                      |	МАКСИМУМ(buyer),
	                      |	МАКСИМУМ(ЗаказКонтрагент),
	                      |	МАКСИМУМ(auto_zeroing),
	                      |	МАКСИМУМ(single_invoice),
	                      |	МАКСИМУМ(supplier_code),
	                      |	МАКСИМУМ(closed)
	                      |ПО
	                      |	Заказ");
	Запрос.УстановитьПараметр("МассивСсылок", МассивЗаказов);
	
	Возврат Запрос;
	
КонецФункции
Процедура УстановитьРеквизитыШапкиЗаказа(ОбъектЗаказ, Выборка)
	
	ЗаполнитьЗначенияСвойств(ОбъектЗаказ, Выборка, "partkom_warehouse,status,buyer_inn,buyer,auto_zeroing,single_invoice,supplier_code,closed,date_order,auction");
	ОбъектЗаказ.supplier_uuid = Выборка.ЗаказКонтрагент.УникальныйИдентификатор();
	ОбъектЗаказ.order_uuid = Выборка.Заказ.УникальныйИдентификатор();
	//ОбъектЗаказ.number = Выборка.ЗаказНомер + Прав(Год(Выборка.date_order),2);
	//PaSe - Сейчас хотят номер без года//11.04.2018//
	//ОбъектЗаказ.number = Выборка.ЗаказНомер;
	//PaSe - а теперь выяснилось, что 4й символ вырезать нужно//02.06.2018//
	//ОбъектЗаказ.number = (Лев(Выборка.ЗаказНомер, 3) + Прав(Выборка.ЗаказНомер, 7));
	//PaSe - а теперь, что нужно вырезать только для старых//24.07.2018//
	Если Выборка.date_order < '20180801' Тогда
		ОбъектЗаказ.number = (Лев(Выборка.ЗаказНомер, 3) + Прав(Выборка.ЗаказНомер, 7));
	Иначе
		ОбъектЗаказ.number = Выборка.ЗаказНомер;
	КонецЕсли;

	ОбъектЗаказ.auto_reject = 0;
	
КонецПроцедуры
Процедура УстановитьЗначенияСтрокиЗаказа(ОбъектСтрока,  ОбъектЗаказ, Выборка)
	
	ЗаполнитьЗначенияСвойств(ОбъектСтрока, Выборка);
	ОбъектСтрока.order_number = ОбъектЗаказ.number;
	ОбъектСтрока.product_uuid = Выборка.Номенклатура.УникальныйИдентификатор();
	ОбъектСтрока.minimum_party = 0;
	ОбъектСтрока.warehouse_date = '00010101';
	
КонецПроцедуры

//Загрузка - Инициализация регламентым заданием из обработки "ОбменДаннымиСОкномПоставщика_Регламент"
Процедура ЗагрузитьЭлемент(ОбъектXDTO, Отправитель, ОшибкаЗагрузкиПакета = Ложь, МассивДокументов = Неопределено, НомерСообщения = 0) Экспорт
	
	
	Отказ = Ложь;
	МетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(Отправитель));
	
	Если МетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщика тогда
		
		ПараметрыЗагрузки = Новый Структура("Отказ,Изменен,ТекстОшибки", Отказ, Истина, "");
		GUIDЗаказа = ОбъектXDTO.order_uuid;
		ПараметрыЗагрузки.Вставить("GUIDЗаказа", GUIDЗаказа);
		ПараметрыЗагрузки.Вставить("НомерЗаказа", ОбъектXDTO.number);
		
		ДокументЗаказа = Документы.ЗаказПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(GUIDЗаказа));
		Если НЕ ЗначениеЗаполнено(ДокументЗаказа.ВерсияДанных) Тогда
			СообщитьОбОшибкеОбменаСОкномПоставщика(ПараметрыЗагрузки, "ЗаказПоставщикуМодульМенеджера.ЗагрузитьЭлемент(): не найден документ с GUID <" + GUIDЗаказа + ">");
		ИначеЕсли ДокументЗаказа.ПометкаУдаления Тогда
			СообщитьОбОшибкеОбменаСОкномПоставщика(ПараметрыЗагрузки, "ЗаказПоставщикуМодульМенеджера.ЗагрузитьЭлемент(): заказ с GUID <" + GUIDЗаказа + "> помечен на удаление");
		ИначеЕсли ДокументЗаказа.СтатусДокумента = Справочники.СтатусыДокументов.ЗаказПоставщикуЗакрыт Тогда
			ОбменДаннымиКлиентСервер.ЗарегистрироватьОбъектВУзлах(ДокументЗаказа, Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщика);
			СообщитьОбОшибкеОбменаСОкномПоставщика(ПараметрыЗагрузки, "ЗаказПоставщикуМодульМенеджера.ЗагрузитьЭлемент(): ошибка загрузки из окна поставщика, заказ закрыт <" + ДокументЗаказа + ">");
		Иначе
			СформироватьДокументЗаказа(СтрокиДокументаЗаказа(ДокументЗаказа), ОбъектXDTO, ПараметрыЗагрузки);
			МассивДокументов.Добавить(ДокументЗаказа);
		КонецЕсли;
		
		ОповещениеОбОтказах(ПараметрыЗагрузки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры
Функция СтрокиДокументаЗаказа(ДокументЗаказа)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЕСТЬNULL(КорректировкаЗаказаПоставщику.Ссылка, ЗаказПоставщику.Ссылка) КАК Документ,
	                      |	ЕСТЬNULL(КорректировкаЗаказаПоставщику.Дата, ЗаказПоставщику.Дата) КАК Дата
	                      |ПОМЕСТИТЬ ВТ_Документы
	                      |ИЗ
	                      |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаказаПоставщику КАК КорректировкаЗаказаПоставщику
	                      |		ПО ЗаказПоставщику.Ссылка = КорректировкаЗаказаПоставщику.ДокументОснование
	                      |			И (КорректировкаЗаказаПоставщику.Проведен)
	                      |			И (НЕ КорректировкаЗаказаПоставщику.ПометкаУдаления)
	                      |ГДЕ
	                      |	ЗаказПоставщику.Ссылка = &ДокументЗаказа
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ВТ_Документы.Документ
	                      |ПОМЕСТИТЬ ВТ_ПоследняяВерсияЗаказа
	                      |ИЗ
	                      |	ВТ_Документы КАК ВТ_Документы
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВТ_Документы.Дата УБЫВ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗаказПоставщикуТовары.Ссылка КАК Документ,
	                      |	ЗаказПоставщикуТовары.НомерСтроки,
	                      |	ЗаказПоставщикуТовары.СтрокаЗаявки,
	                      |	ЗаказПоставщикуТовары.Номенклатура,
	                      |	ЗаказПоставщикуТовары.Количество,
	                      |	ЗаказПоставщикуТовары.Цена,
	                      |	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
	                      |	ЗаказПоставщикуТовары.НоменклатураЗамена,
	                      |	ЗаказПоставщикуТовары.ЕдиницаИзмеренияЗамена,
	                      |	ЗаказПоставщикуТовары.Коэффициент,
	                      |	ЗаказПоставщикуТовары.СтавкаНДС,
	                      |	ЗаказПоставщикуТовары.Комментарий,
	                      |	ЗаказПоставщикуТовары.СрокГарантированныйЗаказа,
	                      |	ЗаказПоставщикуТовары.СрокОжидаемыйЗаказа,
	                      |	ЗаказПоставщикуТовары.КлючСвязи
	                      |ПОМЕСТИТЬ ВТ_СтрокиДокумента
	                      |ИЗ
	                      |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	                      |ГДЕ
	                      |	ЗаказПоставщикуТовары.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_ПоследняяВерсияЗаказа.Документ
	                      |			ИЗ
	                      |				ВТ_ПоследняяВерсияЗаказа КАК ВТ_ПоследняяВерсияЗаказа)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	КорректировкаЗаказаПоставщикуТовары.Ссылка,
	                      |	КорректировкаЗаказаПоставщикуТовары.НомерСтроки,
	                      |	КорректировкаЗаказаПоставщикуТовары.СтрокаЗаявки,
	                      |	КорректировкаЗаказаПоставщикуТовары.Номенклатура,
	                      |	КорректировкаЗаказаПоставщикуТовары.Количество,
	                      |	КорректировкаЗаказаПоставщикуТовары.Цена,
	                      |	КорректировкаЗаказаПоставщикуТовары.ЕдиницаИзмерения,
	                      |	КорректировкаЗаказаПоставщикуТовары.НоменклатураЗамена,
	                      |	КорректировкаЗаказаПоставщикуТовары.ЕдиницаИзмеренияЗамена,
	                      |	КорректировкаЗаказаПоставщикуТовары.Коэффициент,
	                      |	КорректировкаЗаказаПоставщикуТовары.СтавкаНДС,
	                      |	КорректировкаЗаказаПоставщикуТовары.Комментарий,
	                      |	КорректировкаЗаказаПоставщикуТовары.СрокГарантированныйЗаказа,
	                      |	КорректировкаЗаказаПоставщикуТовары.СрокОжидаемыйЗаказа,
	                      |	КорректировкаЗаказаПоставщикуТовары.КлючСвязи
	                      |ИЗ
	                      |	Документ.КорректировкаЗаказаПоставщику.Товары КАК КорректировкаЗаказаПоставщикуТовары
	                      |ГДЕ
	                      |	КорректировкаЗаказаПоставщикуТовары.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_ПоследняяВерсияЗаказа.Документ
	                      |			ИЗ
	                      |				ВТ_ПоследняяВерсияЗаказа КАК ВТ_ПоследняяВерсияЗаказа)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗаказПоставщикуПричиныОтказов.СтрокаЗаявки,
	                      |	ЗаказПоставщикуПричиныОтказов.ПричинаОтказа,
	                      |	ЗаказПоставщикуПричиныОтказов.Количество
	                      |ПОМЕСТИТЬ ВТ_ОтказыПоЗаказам
	                      |ИЗ
	                      |	Документ.ЗаказПоставщику.ПричиныОтказов КАК ЗаказПоставщикуПричиныОтказов
	                      |ГДЕ
	                      |	ЗаказПоставщикуПричиныОтказов.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_ПоследняяВерсияЗаказа.Документ
	                      |			ИЗ
	                      |				ВТ_ПоследняяВерсияЗаказа КАК ВТ_ПоследняяВерсияЗаказа)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	КорректировкаЗаказаПоставщикуПричиныОтказов.СтрокаЗаявки,
	                      |	КорректировкаЗаказаПоставщикуПричиныОтказов.ПричинаОтказа,
	                      |	КорректировкаЗаказаПоставщикуПричиныОтказов.Количество
	                      |ИЗ
	                      |	Документ.КорректировкаЗаказаПоставщику.ПричиныОтказов КАК КорректировкаЗаказаПоставщикуПричиныОтказов
	                      |ГДЕ
	                      |	КорректировкаЗаказаПоставщикуПричиныОтказов.Ссылка В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_ПоследняяВерсияЗаказа.Документ
	                      |			ИЗ
	                      |				ВТ_ПоследняяВерсияЗаказа КАК ВТ_ПоследняяВерсияЗаказа)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ОтказыПоЗаказам.СтрокаЗаявки,
	                      |	СУММА(ВЫБОР
	                      |			КОГДА ВТ_ОтказыПоЗаказам.ПричинаОтказа.Родитель = ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ОтказыОтказПартком)
	                      |				ТОГДА ВТ_ОтказыПоЗаказам.Количество
	                      |			ИНАЧЕ 0
	                      |		КОНЕЦ) КАК ОтказыПартком,
	                      |	СУММА(ВЫБОР
	                      |			КОГДА ВТ_ОтказыПоЗаказам.ПричинаОтказа.Родитель = ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ОтказыОтказПоставщика)
	                      |				ТОГДА ВТ_ОтказыПоЗаказам.Количество
	                      |			ИНАЧЕ 0
	                      |		КОНЕЦ) КАК ОтказыПоставщика
	                      |ПОМЕСТИТЬ ВТ_Отказы
	                      |ИЗ
	                      |	ВТ_ОтказыПоЗаказам КАК ВТ_ОтказыПоЗаказам
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_ОтказыПоЗаказам.СтрокаЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_СтрокиДокумента.Документ,
	                      |	ВТ_СтрокиДокумента.НомерСтроки,
	                      |	ВТ_СтрокиДокумента.КлючСвязи,
	                      |	ВТ_СтрокиДокумента.СтрокаЗаявки,
	                      |	ВТ_СтрокиДокумента.Номенклатура,
	                      |	ВТ_СтрокиДокумента.Цена,
	                      |	ВТ_СтрокиДокумента.Количество,
	                      |	ВТ_СтрокиДокумента.ЕдиницаИзмерения,
	                      |	ВТ_СтрокиДокумента.НоменклатураЗамена,
	                      |	ВТ_СтрокиДокумента.ЕдиницаИзмеренияЗамена,
	                      |	ВТ_СтрокиДокумента.Коэффициент,
	                      |	ВТ_СтрокиДокумента.СтавкаНДС,
	                      |	ВТ_СтрокиДокумента.Комментарий,
	                      |	ВТ_СтрокиДокумента.СрокГарантированныйЗаказа,
	                      |	ВТ_СтрокиДокумента.СрокОжидаемыйЗаказа,
	                      |	ВТ_СтрокиДокумента.СтрокаЗаявки.IDSite КАК IDSite,
	                      |	ЕСТЬNULL(ВТ_Отказы.ОтказыПартком, 0) КАК ОтказПартком,
	                      |	ЕСТЬNULL(ВТ_Отказы.ОтказыПоставщика, 0) КАК ОтказПоставщика,
	                      |	0 КАК shipping_amount,
	                      |	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК replacement_articul,
	                      |	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК replacement_brand,
	                      |	0 КАК КоличествоОтказ,
	                      |	0 КАК _ChkSum
	                      |ИЗ
	                      |	ВТ_СтрокиДокумента КАК ВТ_СтрокиДокумента
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отказы КАК ВТ_Отказы
	                      |		ПО ВТ_СтрокиДокумента.СтрокаЗаявки = ВТ_Отказы.СтрокаЗаявки");
	Запрос.УстановитьПараметр("ДокументЗаказа", ДокументЗаказа);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Процедура СформироватьДокументЗаказа(СтрокиДокументаЗаказа, ОбъектXDTO, ПараметрыЗагрузки)
	
	Для Каждого Строка Из ОбъектXDTO.items.ПолучитьСписок("item") Цикл
		КлючСвязи = Строка.order_no;
		СтрокаЗаказа = СтрокиДокументаЗаказа.Найти(КлючСвязи, "КлючСвязи");
		Если СтрокаЗаказа = Неопределено Тогда
			//PaSe - Обрабатываем что есть//03.06.2018//
			//СообщитьОбОшибкеОбменаСОкномПоставщика(ПараметрыЗагрузки, "ЗаказПоставщикуМодульМенеджера.ЗагрузитьЭлемент(): в табличной части ""Товары"" не найдена строка с ключом связи """ + КлючСвязи + """");
		ИначеЕсли СтрокаЗаказа.IDSite <> Строка.item_id Тогда
			СообщитьОбОшибкеОбменаСОкномПоставщика(ПараметрыЗагрузки, "ЗаказПоставщикуМодульМенеджера.ЗагрузитьЭлемент(): в табличной части ""Товары"" в строке с с ключом связи <" + КлючСвязи + "> идентификатор заявки <" + СтрокаЗаказа.IDSite + "> не соответствует загруженному с сайта <" + Строка.item_id + ">");
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаЗаказа, Строка, "shipping_amount,replacement_articul,replacement_brand");
			УстановитьИзмененноеЗначение(СтрокаЗаказа.СрокОжидаемыйЗаказа, ?(ЗначениеЗаполнено(ОбъектXDTO.delivery_date), ОбъектXDTO.delivery_date, СтрокаЗаказа.СрокОжидаемыйЗаказа), ПараметрыЗагрузки);
			УстановитьИзмененноеЗначение(СтрокаЗаказа.Цена, ?(ЗначениеЗаполнено(Строка.item_price_response), Строка.item_price_response, СтрокаЗаказа.Цена), ПараметрыЗагрузки);
			СтрокаЗаказа._ChkSum = СтрокаЗаказа._ChkSum + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрокВПоследнемДокументеКорректировки = СтрокиДокументаЗаказа.Количество();
	Если КоличествоСтрокВПоследнемДокументеКорректировки > 0 Тогда
		ПоследнийДокументЗаказа = СтрокиДокументаЗаказа[0].Документ;
		УстановитьАналогиНоменклатуры(ПоследнийДокументЗаказа, СтрокиДокументаЗаказа, ПараметрыЗагрузки);
		ТаблицаОтказов = СформироватьТаблицуОтказов(ПоследнийДокументЗаказа, СтрокиДокументаЗаказа, ПараметрыЗагрузки);
		
		Если НЕ ПараметрыЗагрузки.Отказ И ПараметрыЗагрузки.Изменен Тогда
			ЗаписатьКорректировкуЗаказа(ПоследнийДокументЗаказа, СтрокиДокументаЗаказа, ТаблицаОтказов);
		КонецЕсли;
	Иначе
		СообщитьОбОшибкеОбменаСОкномПоставщика(ПараметрыЗагрузки, "ЗаказПоставщикуМодульМенеджера.ЗагрузитьЭлемент(): в последней корректировки отсутствуют строки>");
	КонецЕсли;
		
КонецПроцедуры
Процедура УстановитьАналогиНоменклатуры(ДокументЗаказа, СтрокиДокументаЗаказа, ПараметрыЗагрузки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВТ_ВнешняяТаблица.НомерСтроки,
	                      |	ВЫРАЗИТЬ(ВТ_ВнешняяТаблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	                      |	ВЫРАЗИТЬ(ВТ_ВнешняяТаблица.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения,
	                      |	ВТ_ВнешняяТаблица.replacement_articul,
	                      |	ВТ_ВнешняяТаблица.replacement_brand
	                      |ПОМЕСТИТЬ ВТ_ДанныеВнешнейТаблицы
	                      |ИЗ
	                      |	&ВнешняяТаблица КАК ВТ_ВнешняяТаблица
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ДанныеВнешнейТаблицы.НомерСтроки,
	                      |	ВТ_ДанныеВнешнейТаблицы.Номенклатура КАК Номенклатура,
	                      |	ВТ_ДанныеВнешнейТаблицы.ЕдиницаИзмерения,
	                      |	ВТ_ДанныеВнешнейТаблицы.replacement_articul,
	                      |	ВТ_ДанныеВнешнейТаблицы.replacement_brand,
	                      |	МАКСИМУМ(ЕСТЬNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК НоменклатураЗамена
	                      |ИЗ
	                      |	ВТ_ДанныеВнешнейТаблицы КАК ВТ_ДанныеВнешнейТаблицы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	                      |		ПО ВТ_ДанныеВнешнейТаблицы.replacement_articul = СправочникНоменклатура.Артикул
	                      |			И ВТ_ДанныеВнешнейТаблицы.replacement_brand = СправочникНоменклатура.Изготовитель.Наименование
	                      |ГДЕ
	                      |	ВТ_ДанныеВнешнейТаблицы.replacement_articul <> """"
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_ДанныеВнешнейТаблицы.НомерСтроки,
	                      |	ВТ_ДанныеВнешнейТаблицы.replacement_articul,
	                      |	ВТ_ДанныеВнешнейТаблицы.replacement_brand,
	                      |	ВТ_ДанныеВнешнейТаблицы.Номенклатура,
	                      |	ВТ_ДанныеВнешнейТаблицы.ЕдиницаИзмерения");
	Запрос.УстановитьПараметр("ВнешняяТаблица", СтрокиДокументаЗаказа);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.replacement_brand) Тогда
			НоменклатураЗамена = Выборка.НоменклатураЗамена;
			Если НЕ ЗначениеЗаполнено(НоменклатураЗамена) Тогда
				НоменклатураЗамена = ПолучитьНоменалатуруССайта(Выборка.replacement_articul, Выборка.replacement_brand, Выборка.Номенклатура, Выборка.ЕдиницаИзмерения, ПараметрыЗагрузки);
			КонецЕсли;
			УстановитьИзмененноеЗначение(СтрокиДокументаЗаказа[Выборка.НомерСтроки-1].НоменклатураЗамена, НоменклатураЗамена, ПараметрыЗагрузки);
			УстановитьИзмененноеЗначение(СтрокиДокументаЗаказа[Выборка.НомерСтроки-1].ЕдиницаИзмеренияЗамена, НоменклатураЗамена.ЕдиницаХраненияОстатков, ПараметрыЗагрузки);
		Иначе
			СообщитьОбОшибкеОбменаСОкномПоставщика(ПараметрыЗагрузки, "ЗаказПоставщикуМодульМенеджера.ЗагрузитьЭлемент(): в табличной части ""Товары"" в строке с номером """ + Выборка.НомерСтроки + """ не заполнен изготовитель замены");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Процедура ЗаписатьКорректировкуЗаказа(ПоследнийДокументЗаказа, СтрокиДокументаЗаказа, ТаблицаОтказов)
	
	СтатусОбработанПоставщиком = Справочники.СтатусыДокументов.ОбработанПоставщиком;
	ДокументОснование = ?(ТипЗнч(ПоследнийДокументЗаказа) = Тип("ДокументСсылка.ЗаказПоставщику"), ПоследнийДокументЗаказа, ПоследнийДокументЗаказа.ДокументОснование);
	
	НовыйДокумент = Документы.КорректировкаЗаказаПоставщику.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент, ПоследнийДокументЗаказа, ,"Номер,Дата,ДокументОснование,ПометкаУдаления");
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.ДокументОснование = ДокументОснование;
	НовыйДокумент.СтатусДокумента = СтатусОбработанПоставщиком;
	НовыйДокумент.Товары.Загрузить(СтрокиДокументаЗаказа);
	НовыйДокумент.ПричиныОтказов.Загрузить(ТаблицаОтказов);
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.ДополнительныеСвойства.Вставить("ЗагруженоИзОП", Истина);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Если ДокументОснование.СтатусДокумента <> СтатусОбработанПоставщиком Тогда
		обДокумент = ДокументОснование.ПолучитьОбъект();
		обДокумент.СтатусДокумента = СтатусОбработанПоставщиком;
		НовыйДокумент.ДополнительныеСвойства.Вставить("ЗагруженоИзОП", Истина);
		обДокумент.Записать();
	КонецЕсли;
	
КонецПроцедуры
Функция СформироватьТаблицуОтказов(ДокументЗаказа, СтрокиДокументаЗаказа, ПараметрыЗагрузки)
	
	ТекущаяТаблицаОтказов = ДокументЗаказа.ПричиныОтказов;
	ТаблицаОтказов = ТекущаяТаблицаОтказов.ВыгрузитьКолонки("СтрокаЗаявки,ПричинаОтказа,Количество,ЗагруженИзОП");
	Для Каждого Строка Из ТекущаяТаблицаОтказов Цикл
		Если Строка.ПричинаОтказа.Родитель = Справочники.СостоянияСтрокДокументов.ОтказыОтказПартком Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаОтказов.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиДокументаЗаказа Цикл
		КоличествоОтказПоставщик = Строка.Количество - Строка.ОтказПартком - Строка.shipping_amount;
		Если КоличествоОтказПоставщик > 0 Тогда
			СтрокаОтказа = ТаблицаОтказов.Добавить();
			СтрокаОтказа.СтрокаЗаявки = Строка.СтрокаЗаявки;
			СтрокаОтказа.ПричинаОтказа = Справочники.СостоянияСтрокДокументов.НетНаСкладе;
			СтрокаОтказа.Количество = КоличествоОтказПоставщик;
			СтрокаОтказа.ЗагруженИзОП = Истина;
		КонецЕсли;
		Строка.КоличествоОтказ = Строка.Количество - Строка.shipping_amount;
		ПараметрыЗагрузки.Изменен = ?(Строка.ОтказПоставщика = КоличествоОтказПоставщик, ПараметрыЗагрузки.Изменен, Истина);
	КонецЦикла;
	
	Возврат ТаблицаОтказов;
	
КонецФункции
Функция ПолучитьНоменалатуруССайта(Артикул, Брэнд, Номенклатура, ЕдиницаИзмерения, ПараметрыЗагрузки)
	
	Обработка = Обработки.ПолучениеДанныхОтВебСервиса.Создать();
	ПрефиксУзла = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	НоменклатураЗамена = Справочники.Номенклатура.ПустаяСсылка();
	Изготовитель = Справочники.Изготовители.НайтиПоНаименованию(Брэнд, Истина);
	
	Если Изготовитель.Пустая() Тогда
		ОтветСервера = Обработка.ПолучитьИзготовителя(Брэнд);
		Если ЗначениеЗаполнено(ОтветСервера.УИД) Тогда
			НовыйЭлемент = Справочники.Изготовители.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод(ПрефиксУзла);
			НовыйЭлемент.Наименование = Брэнд;
			НовыйЭлемент.УстановитьСсылкуНового(Справочники.Изготовители.ПолучитьСсылку(Новый УникальныйИдентификатор(ОтветСервера.УИД)));
			НовыйЭлемент.ОбменДанными.Загрузка = Истина;
			НовыйЭлемент.Записать();
			Изготовитель = НовыйЭлемент.Ссылка;
		Иначе
			СообщитьОбОшибкеОбменаСОкномПоставщика(ПараметрыЗагрузки, "ЗаказПоставщикуМодульОбъекта.ПолучитьНоменалатуруССайта(): ошибка получения данных изготовителя с сайта """ + ОтветСервера + """");
		КонецЕсли;
	КонецЕсли;
		
	ОтветСервера = Обработка.ПолучитьНоменклатуру(Новый Структура("Бренд, Артикул, Имя", Изготовитель.УникальныйИдентификатор(), Артикул, Номенклатура.Наименование));
	Если ЗначениеЗаполнено(ОтветСервера.УИД) Тогда
		НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
		НоменклатураСсылкаНового = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ОтветСервера.УИД));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Номенклатура,,"Владелец, Код");
		НовыйЭлемент.УстановитьНовыйКод(ПрефиксУзла);
		НовыйЭлемент.Наименование = Номенклатура.Наименование;
		НовыйЭлемент.УстановитьСсылкуНового(НоменклатураСсылкаНового);
		НовыйЭлемент.Артикул = Артикул;
		НовыйЭлемент.Изготовитель = Изготовитель;
		
		ЕдиницаИзмеренияЗамена = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ЕдиницаИзмеренияЗамена, ЕдиницаИзмерения,,"Родитель, Код");
		ЕдиницаИзмеренияЗамена.УстановитьНовыйКод(ПрефиксУзла);
		ЕдиницаИзмеренияЗамена.Владелец = НоменклатураСсылкаНового;
		ЕдиницаИзмеренияЗамена.ОбменДанными.Загрузка = Истина;
		ЕдиницаИзмеренияЗамена.Записать();
		
		НовыйЭлемент.ЕдиницаХраненияОстатков = ЕдиницаИзмеренияЗамена.Ссылка;
		НовыйЭлемент.ОбменДанными.Загрузка = Истина;
		НовыйЭлемент.Записать();
		
		НоменклатураЗамена = НовыйЭлемент.Ссылка;
	Иначе
		СообщитьОбОшибкеОбменаСОкномПоставщика(ПараметрыЗагрузки, "ЗаказПоставщикуМодульОбъекта.ПолучитьНоменалатуруССайта(): ошибка получения данных номенклатуры с сайта """ + ОтветСервера + """");
	КонецЕсли;
	
	Возврат НоменклатураЗамена;
	
КонецФункции
Процедура УстановитьИзмененноеЗначение(Приемник, Источник, ПараметрыЗагрузки)
	
	Если Приемник <> Источник Тогда
		ПараметрыЗагрузки.Изменен = Истина;
		Приемник = Источник;
	КонецЕсли;
	
КонецПроцедуры
Процедура СообщитьОбОшибкеОбменаСОкномПоставщика(ПараметрыЗагрузки, СообщениеОбОшибке)
	
	ПараметрыЗагрузки.ТекстОшибки = ПараметрыЗагрузки.ТекстОшибки + ?(ЗначениеЗаполнено(ПараметрыЗагрузки.ТекстОшибки), Символы.ПС, "") + СообщениеОбОшибке;
	ПараметрыЗагрузки.Отказ = Истина;
	
КонецПроцедуры
Процедура ОповещениеОбОтказах(ПараметрыЗагрузки, Отказ)
	
	Если ПараметрыЗагрузки.Отказ = Истина Тогда
		СообщениеОбОшибке = ПараметрыЗагрузки.ТекстОшибки;
		Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
			РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщикуОП, СообщениеОбОшибке, "Ошибка загрузки заказа поставщика из Окна Поставщика: № " + ПараметрыЗагрузки.НомерЗаказа);
		Иначе
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = ПараметрыЗагрузки.Отказ;
	
КонецПроцедуры


//Структура("Артикул, Изготовитель, ЕдиницаИзмерения")
Функция НайтиСоздатьНоменклатуру(вхСтруктура)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Артикул = &Артикул
	                      |	И Номенклатура.Изготовитель.Наименование = &Наименование");
	Запрос.УстановитьПараметр("Артикул", СокрЛП(вхСтруктура.Артикул));
	Запрос.УстановитьПараметр("Наименование", СокрЛП(вхСтруктура.Изготовитель));
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Обработка = Обработки.ПолучениеДанныхОтВебСервиса.Создать();
		
		Если ТипЗнч(вхСтруктура.Изготовитель) = Тип("СправочникСсылка.Изготовители") Тогда
			Изготовитель = вхСтруктура.Изготовитель;
		Иначе
			Изготовитель = Справочники.Изготовители.НайтиПоНаименованию(СокрЛП(вхСтруктура.Изготовитель), Истина);
		КонецЕсли;
		Если Изготовитель.Пустая() Тогда
			
			ОтветСервера = Обработка.ПолучитьИзготовителя(вхСтруктура.Изготовитель);
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				НовыйЭлемент = Справочники.Изготовители.СоздатьЭлемент();
				НовыйЭлемент.УстановитьНовыйКод(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить());
				НовыйЭлемент.Наименование = СокрЛП(вхСтруктура.Изготовитель);
				НовыйЭлемент.УстановитьСсылкуНового(Справочники.Изготовители.ПолучитьСсылку(Новый УникальныйИдентификатор(ОтветСервера.УИД)));
				НовыйЭлемент.ОбменДанными.Загрузка = Истина;
				НовыйЭлемент.Записать();
				Изготовитель = НовыйЭлемент.Ссылка;
			Иначе
				ВызватьИсключение "ЗаказПоставщикуМодульОбъекта.НайтиСоздатьНоменклатуру(): ошибка получения данных изготовителя с сайта """ + ОтветСервера + """";
			КонецЕсли;
		КонецЕсли;
		
		ОтветСервера = Обработка.ПолучитьНоменклатуру(Новый Структура("Бренд, Артикул, Имя", Изготовитель.УникальныйИдентификатор(), СокрЛП(вхСтруктура.Артикул), СокрЛП(вхСтруктура.Наименование)));
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			СсылкаНового = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ОтветСервера.УИД));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, вхСтруктура.ЕдиницаИзмерения.Владелец,,"Владелец, Код");
			НовыйЭлемент.УстановитьНовыйКод(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить());
			НовыйЭлемент.Наименование = СокрЛП(вхСтруктура.Наименование);
			НовыйЭлемент.УстановитьСсылкуНового(СсылкаНового);
			НовыйЭлемент.Артикул = вхСтруктура.Артикул;
			НовыйЭлемент.Изготовитель = Изготовитель;
			
			ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ЕдиницаИзмерения, вхСтруктура.ЕдиницаИзмерения,,"Родитель, Код");
			ЕдиницаИзмерения.УстановитьНовыйКод(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить());
			ЕдиницаИзмерения.Владелец = СсылкаНового;
			ЕдиницаИзмерения.ОбменДанными.Загрузка = Истина;
			ЕдиницаИзмерения.Записать();
			
			НовыйЭлемент.ЕдиницаХраненияОстатков = ЕдиницаИзмерения.Ссылка;
			НовыйЭлемент.ОбменДанными.Загрузка = Истина;
			НовыйЭлемент.Записать();
			Возврат НовыйЭлемент.Ссылка
		Иначе
			ВызватьИсключение "ЗаказПоставщикуМодульОбъекта.НайтиСоздатьНоменклатуру(): ошибка получения данных номенклатуры с сайта """ + ОтветСервера + """";
		КонецЕсли;
		
		
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции
