
#Область ФормированиеСообщенийДляСайта

//Сообщение ЖдемТовар, говорим клиенту везти товар

//WS обмен
Функция ТекстСообщенияЖдемТовар(АктСсылка) Экспорт
	
	 лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ТекстСообщенияЖдемТовар";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель.Наименование КАК ИзготовительНаименование,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование КАК ТоварНаименование,
	|	АктРассмотренияВозвратаТовары.Ссылка.КодВозврата КАК КодВозврата,
	|	АктРассмотренияВозвратаТовары.Ссылка.СуммаДокументаПлан КАК СуммаДокумента,
	|	АктРассмотренияВозвратаТовары.Ссылка.КодВозврата.Код КАК КодВозвратаКод,
	|	АктРассмотренияВозвратаТовары.Ссылка.СрокВозвратаКлиента КАК СрокВозвратаКлиента,
	|	СУММА(АктРассмотренияВозвратаТовары.КоличествоПлан) КАК КоличествоПлан,
	|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
	|ИЗ
	|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
	|ГДЕ
	|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул,
	|	АктРассмотренияВозвратаТовары.Ссылка.КодВозврата,
	|	АктРассмотренияВозвратаТовары.Ссылка.СрокВозвратаКлиента,
	|	АктРассмотренияВозвратаТовары.Ссылка.СуммаДокументаПлан,
	|	АктРассмотренияВозвратаТовары.Ссылка.КодВозврата.Код,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель.Наименование,
	|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", АктСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ПредставлениеНоменклатурыДляСайта = ВозвратыОтПокупателяСервер.ПредставлениеНоменклатурыДляСайта(
	Выборка.ИзготовительНаименование,
	Выборка.ТоварАртикул,
	Выборка.ИзготовительНаименование,
	Выборка.ЕдиницаИзмеренияНаименование,
	Выборка.КоличествоПлан,
	,
	Истина,
	Ложь);
	
	Если Выборка.КодВозврата = Справочники.КодыВозврата.НаЭкспертизу
		ИЛИ Выборка.КодВозврата = Справочники.КодыВозврата.НаЭкспертизуГПРК Тогда 
		//06,07
		СтрокаОписанияТовара = "Мы готовы принять на ПРОВЕРКУ (осмотр) "+ПредставлениеНоменклатурыДляСайта+" Ответ с окончательным решением о возврате товара будет предоставлен после проведения проверки.";
	Иначе
		СтрокаОписанияТовара = "Мы готовы принять к возврату "+ПредставлениеНоменклатурыДляСайта;
	КонецЕсли;
	
	Возврат СтрокаОписанияТовара;
	
КонецФункции

//WS обмен
Функция ЗаписатьСообщениеЖдемТовар(АктСсылка) Экспорт
	
	 лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ЗаписатьСообщениеЖдемТовар";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ТекстСообщенияЖдемТовар = ТекстСообщенияЖдемТовар(АктСсылка);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктСсылка, "Штрихкод");
	
	СтруктураПараметровСообщения = РегистрыСведений.СообщенияПроцессаВозвратаОтПокупателяДляСайта.СтруктураПараметровСообщения();
	СтруктураПараметровСообщения.Штрихкод 				= Реквизиты.Штрихкод;
	СтруктураПараметровСообщения.АктРассмотренияВозврата = АктСсылка;
	СтруктураПараметровСообщения.Сообщение 				= ТекстСообщенияЖдемТовар;
	
	РегистрыСведений.СообщенияПроцессаВозвратаОтПокупателяДляСайта.Добавить(СтруктураПараметровСообщения, Истина);
	
	Возврат ТекстСообщенияЖдемТовар;
	
КонецФункции
//////////////

//Создание ФайлаАктаПП  //WS обмен
Функция СоздатьФайлАктаПП(АктСсылка, ТекстОшибки = "", СообщатьОбОшибке = Истина, ВызыватьИсключение = Истина) Экспорт
	
	 лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_СоздатьФайлАктаПП";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ВозвращаемоеЗначение = Неопределено;
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктСсылка, 
	"Штрихкод, ФайлАктаПП");
	
	//Записываем файл с печформой
	ИмяФайла 	= КаталогВременныхФайлов + "akt.pdf";
	ТабДок = ТабличныйДокументПечатнойФормы("АктПриемаПередачи", АктСсылка);
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	//Отправляем во внешнее хранилище
	СтруктураПараметров = РаботаСВнешнимФайловымХранилищем.СтруктураПараметровДляОтправкиФайла(ИмяФайла,,ТекстОшибки);
	ИдентификаторВоВнешнемХранилище = РаботаСВнешнимФайловымХранилищем.ОтправитьФайлВоВнешнееХранилище(СтруктураПараметров, ТекстОшибки,,); 
	
	//Создаем элемент справочника для хранения ссылки на внешнее хранилище
	Если ТипЗнч(ИдентификаторВоВнешнемХранилище) = Тип("Число") И НЕ ИдентификаторВоВнешнемХранилище = 0 Тогда
		НовыйОбъект = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		НовыйОбъект.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
		НовыйОбъект.Объект = АктСсылка;
		НовыйОбъект.ИмяФайла = РаботаСФайлами.ПолучитьИмяФайлаИзПолногоПути(ИмяФайла);
		НовыйОбъект.ИдентификаторВоВнешнемХранилище = ИдентификаторВоВнешнемХранилище;
		НовыйОбъект.Наименование = "Акт приема-передачи для сайта";
		НовыйОбъект.Записать();
		ВозвращаемоеЗначение = НовыйОбъект.Ссылка;
	КонецЕсли;
	
	Если СообщатьОбОшибке И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
	КонецЕсли;
	Если ВызыватьИсключение И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

//Создание Файла Претензии //WS обмен
Функция СоздатьФайлПретензии(АктСсылка, ТекстОшибки = "", СообщатьОбОшибке = Истина, ВызыватьИсключение = Истина) Экспорт
	
	 лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_СоздатьФайлПретензии";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ВозвращаемоеЗначение = Неопределено;
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктСсылка, 
	"Штрихкод, ФайлАктаПП");
	
	//Записываем файл с печформой
	ИмяФайла 	= КаталогВременныхФайлов + "pretenziya.pdf";
	ТабДок = ТабличныйДокументПечатнойФормы("Претензия", АктСсылка);
	Если ТабДок <> Неопределено Тогда
		ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	КонецЕсли;
	
	Если ТабДок = Неопределено Тогда
		//Это не ошибка, претензия формируется только при определенных условиях
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	//Отправляем во внешнее хранилище
	СтруктураПараметров = РаботаСВнешнимФайловымХранилищем.СтруктураПараметровДляОтправкиФайла(ИмяФайла,,ТекстОшибки);
	ИдентификаторВоВнешнемХранилище = РаботаСВнешнимФайловымХранилищем.ОтправитьФайлВоВнешнееХранилище(СтруктураПараметров, ТекстОшибки,,); 
	
	//Создаем элемент справочника для хранения ссылки на внешнее хранилище
	Если ТипЗнч(ИдентификаторВоВнешнемХранилище) = Тип("Число") И НЕ ИдентификаторВоВнешнемХранилище = 0 Тогда
		НовыйОбъект = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		НовыйОбъект.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
		НовыйОбъект.Объект = АктСсылка;
		НовыйОбъект.ИмяФайла = РаботаСФайлами.ПолучитьИмяФайлаИзПолногоПути(ИмяФайла);
		НовыйОбъект.ИдентификаторВоВнешнемХранилище = ИдентификаторВоВнешнемХранилище;
		НовыйОбъект.Наименование = "Претензия для сайта";
		НовыйОбъект.Записать();
		ВозвращаемоеЗначение = НовыйОбъект.Ссылка;
	КонецЕсли;
	
	Если СообщатьОбОшибке И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
	КонецЕсли;
	Если ВызыватьИсключение И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

//WS обмен
Функция ЗаписатьСообщениеФайлАктПП(Акт) Экспорт
	
	 лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ЗаписатьСообщениеФайлАктПП";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ЗаписьДобавлена = Ложь;
	
	ИдентификаторВоВнешнемХранилище = 0;
	
	Если Типзнч(Акт) = Тип("ДокументСсылка.АктРассмотренияВозврата") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Акт, 
		"Штрихкод, ФайлАктаПП, ФайлАктаПП.ИмяФайла, ФайлАктаПП.ИдентификаторВоВнешнемХранилище");
		
		Штрихкод 						= Реквизиты.Штрихкод;
		АктСсылка 						= Акт;
		ИдентификаторВоВнешнемХранилище = Реквизиты.ФайлАктаППИдентификаторВоВнешнемХранилище;
		
	Иначе //Объект
		
		Штрихкод 	= Акт.Штрихкод;
		АктСсылка 	= Акт.Ссылка;
		Если ЗначениеЗаполнено(Акт.ФайлАктаПП) Тогда
			ИдентификаторВоВнешнемХранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Акт.ФайлАктаПП, "ИдентификаторВоВнешнемХранилище"); 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторВоВнешнемХранилище) = Тип("Число") И ИдентификаторВоВнешнемХранилище <> 0 Тогда
		
		СтруктураПараметровСообщения 									= РегистрыСведений.СообщенияПроцессаВозвратаОтПокупателяДляСайта.СтруктураПараметровСообщения();
		СтруктураПараметровСообщения.ТипСообщения 						= Перечисления.ТипыСообщенийПроцессаВозвратовДляСайта.ОтправкаФайла;
		СтруктураПараметровСообщения.Штрихкод 							= Штрихкод;
		СтруктураПараметровСообщения.АктРассмотренияВозврата 			= АктСсылка;
		СтруктураПараметровСообщения.Сообщение 							= "АктПриемаПередачи";
		
		СтруктураПараметровСообщения.ДопСведения.Вставить("ИдентификаторВоВнешнемХранилище", ИдентификаторВоВнешнемХранилище);
		
		РегистрыСведений.СообщенияПроцессаВозвратаОтПокупателяДляСайта.Добавить(СтруктураПараметровСообщения, Истина);
		
		ЗаписьДобавлена = Истина;
	КонецЕсли;
	
	Возврат ЗаписьДобавлена;
	
КонецФункции

//WS обмен
Функция ЗаписатьСообщениеФайлПретензия(Акт) Экспорт
	
	 лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ЗаписатьСообщениеФайлПретензия";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ЗаписьДобавлена = Ложь;
	
	ИдентификаторВоВнешнемХранилище = 0;
	
	Если Типзнч(Акт) = Тип("ДокументСсылка.АктРассмотренияВозврата") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Акт, 
		"Штрихкод, ФайлПретензии, ФайлПретензии.ИмяФайла, ФайлПретензии.ИдентификаторВоВнешнемХранилище");
		
		Штрихкод 						= Реквизиты.Штрихкод;
		АктСсылка 						= Акт;
		ИдентификаторВоВнешнемХранилище = Реквизиты.ФайлПретензииИдентификаторВоВнешнемХранилище;
		
	Иначе //Объект
		
		Штрихкод 	= Акт.Штрихкод;
		АктСсылка 	= Акт.Ссылка;
		Если ЗначениеЗаполнено(Акт.ФайлАктаПП) Тогда
			ИдентификаторВоВнешнемХранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Акт.ФайлПретензии, "ИдентификаторВоВнешнемХранилище"); 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторВоВнешнемХранилище) = Тип("Число") И ИдентификаторВоВнешнемХранилище <> 0 Тогда
		
		СтруктураПараметровСообщения 									= РегистрыСведений.СообщенияПроцессаВозвратаОтПокупателяДляСайта.СтруктураПараметровСообщения();
		СтруктураПараметровСообщения.ТипСообщения 						= Перечисления.ТипыСообщенийПроцессаВозвратовДляСайта.ОтправкаФайла;
		СтруктураПараметровСообщения.Штрихкод 							= Штрихкод;
		СтруктураПараметровСообщения.АктРассмотренияВозврата 			= АктСсылка;
		СтруктураПараметровСообщения.Сообщение 							= "Претензия";
		
		СтруктураПараметровСообщения.ДопСведения.Вставить("ИдентификаторВоВнешнемХранилище", ИдентификаторВоВнешнемХранилище);
		
		РегистрыСведений.СообщенияПроцессаВозвратаОтПокупателяДляСайта.Добавить(СтруктураПараметровСообщения, Истина);
		
		ЗаписьДобавлена = Истина;
	КонецЕсли;
	
	Возврат ЗаписьДобавлена;
	
КонецФункции

#КонецОбласти

#Область ФормированиеАктаПриемаПередачиДляСайта

//Файловый обмен
Процедура ВыгрузитьАктПриемаПередачиНаСайт(АктСсылка) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ВыгрузитьАктПриемаПередачиНаСайт";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	КаталогОбменаССайтом = ВозвратыОтПокупателяСервер.КаталогОбменаССайтом(Ложь, Истина, 2);
	
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктСсылка, 
	"Штрихкод, Контрагент.Код, ДокументПродажи.ДоговорКонтрагента.ВидОплаты, Контрагент.РаботаетСНДС, СуммаДокумента, КодВозврата.Код, СрокВозвратаКлиента");
	
	КаталогСохранения = КаталогОбменаССайтом + РеквизитыАРВ.Штрихкод +"\";
	СоздатьКаталог(КаталогСохранения);
	
	ИмяФайла 	= КаталогСохранения + "akt.pdf";
	ТабДок = ТабличныйДокументПечатнойФормы("АктПриемаПередачи", АктСсылка);
	ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	ИмяФайла 	= КаталогСохранения + "pretenziya.pdf";
	ТабДок = ТабличныйДокументПечатнойФормы("Претензия", АктСсылка);
	Если ТабДок <> Неопределено Тогда
		ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	КонецЕсли;
	
	//Выгружем сообщение для клиента
	//ТекстСообщенияДляСайта = ТекстСообщенияПоАктуПриемуПередачи(АктСсылка);
	//ИмяФайла = "Readme.txt";
	//ЗаписьТекста = Новый ЗаписьТекста(КаталогСохранения + ИмяФайла, КодировкаТекста.ANSI);
	//ЗаписьТекста.ЗаписатьСтроку(ТекстСообщенияДляСайта);
	//ЗаписьТекста.Закрыть();	
	
	ВыгрузитьТекстСообщенияПоАктуППНаСайт(АктСсылка);
	
КонецПроцедуры

//Файловый обмен
Функция ВыгрузитьТекстСообщенияПоАктуППНаСайт(АктСсылка) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ВыгрузитьТекстСообщенияПоАктуППНаСайт";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктСсылка, "Штрихкод");
	
	КаталогОбменаССайтом = ВозвратыОтПокупателяСервер.КаталогОбменаССайтом(Ложь, Истина, 2);
	КаталогСохранения = КаталогОбменаССайтом + РеквизитыАРВ.Штрихкод +"\";
	СоздатьКаталог(КаталогСохранения);
	
	//Выгружем сообщение для клиента, временно схраняем старый формат
	ТекстСообщенияДляСайта = ТекстСообщенияПоАктуПриемуПередачи(АктСсылка, 1);
	ИмяФайла = "Readme.txt";
	ЗаписьТекста = Новый ЗаписьТекста(КаталогСохранения + ИмяФайла, КодировкаТекста.ANSI);
	ЗаписьТекста.ЗаписатьСтроку(ТекстСообщенияДляСайта);
	ЗаписьТекста.Закрыть();	
	
	//Выгружем сообщение для клиента, новый формат
	ТекстСообщенияДляСайта = ТекстСообщенияПоАктуПриемуПередачи(АктСсылка, 2);
	ИмяФайла = "Readme2.txt";
	ЗаписьТекста = Новый ЗаписьТекста(КаталогСохранения + ИмяФайла, КодировкаТекста.ANSI);
	ЗаписьТекста.ЗаписатьСтроку(ТекстСообщенияДляСайта);
	ЗаписьТекста.Закрыть();	
	
КонецФункции

//Файловый и WS обмен
Функция ТекстСообщенияПоАктуПриемуПередачи(АктСсылка, ВерсияФормата = 1)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ТекстСообщенияПоАктуПриемуПередачи";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель.Наименование КАК ИзготовительНаименование,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование КАК ТоварНаименование,
	|	АктРассмотренияВозвратаТовары.Ссылка.КодВозврата КАК КодВозврата,
	|	АктРассмотренияВозвратаТовары.Ссылка.СуммаДокументаПлан КАК СуммаДокумента,
	|	АктРассмотренияВозвратаТовары.Ссылка.КодВозврата.Код КАК КодВозвратаКод,
	|	АктРассмотренияВозвратаТовары.Ссылка.СрокВозвратаКлиента КАК СрокВозвратаКлиента,
	|	СУММА(АктРассмотренияВозвратаТовары.КоличествоПлан) КАК КоличествоПлан,
	|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
	|ИЗ
	|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
	|ГДЕ
	|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул,
	|	АктРассмотренияВозвратаТовары.Ссылка.КодВозврата,
	|	АктРассмотренияВозвратаТовары.Ссылка.СрокВозвратаКлиента,
	|	АктРассмотренияВозвратаТовары.Ссылка.СуммаДокументаПлан,
	|	АктРассмотренияВозвратаТовары.Ссылка.КодВозврата.Код,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель.Наименование,
	|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", АктСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СтрокаОписанияТовара = Выборка.ТоварАртикул+"||"+Выборка.ИзготовительНаименование+"||"+Выборка.ТоварНаименование;
	Если ВерсияФормата = 2 Тогда
		
		ПредставлениеНоменклатурыДляСайта = ВозвратыОтПокупателяСервер.ПредставлениеНоменклатурыДляСайта(
		Выборка.ИзготовительНаименование,
		Выборка.ТоварАртикул,
		Выборка.ИзготовительНаименование,
		Выборка.ЕдиницаИзмеренияНаименование,
		Выборка.КоличествоПлан,
		,
		Истина,
		Ложь);
		
		Если Выборка.КодВозврата = Справочники.КодыВозврата.НаЭкспертизу
			ИЛИ Выборка.КодВозврата = Справочники.КодыВозврата.НаЭкспертизуГПРК Тогда 
			//06,07
			СтрокаОписанияТовара = "Мы готовы принять на ПРОВЕРКУ (осмотр) "+ПредставлениеНоменклатурыДляСайта+" Ответ с окончательным решением о возврате товара будет предоставлен после проведения проверки.";
		Иначе
			СтрокаОписанияТовара = "Мы готовы принять к возврату "+ПредставлениеНоменклатурыДляСайта;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСообщенияДляСайта = ""+КонецДня(Выборка.СрокВозвратаКлиента)
	+Символы.ПС+Выборка.КодВозвратаКод
	+Символы.ПС+Выборка.СуммаДокумента
	+Символы.ПС+СтрокаОписанияТовара
	+Символы.ПС+Выборка.КоличествоПлан;

	Возврат ТекстСообщенияДляСайта;
	
КонецФункции

#КонецОбласти

#Область ОтправкаАктаПриемаПередачиПоПочте

Функция ОтправитьАктПриемаПередачиПоПочте(АктВозврата) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ОтправитьАктПриемаПередачиПоПочте";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//Запишем письмо
	ЭП = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	ЭП.Заполнить(АктВозврата);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктВозврата, "Контрагент, Номер, Штрихкод, Ответственный, Поставщик, ДоговорКонтрагента.ВидОплаты");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование КАК Наименование,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул КАК Артикул,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель КАК Изготовитель,
	|	СУММА(АктРассмотренияВозвратаТовары.КоличествоПлан) КАК Количество,
	|	АктРассмотренияВозвратаТовары.Ссылка.ПричинаВозврата КАК ПричинаВозврата,
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода.Приход.Контрагент КАК Контрагент,
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода.Приход.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода.Приход.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ИЗ
	|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
	|ГДЕ
	|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель,
	|	АктРассмотренияВозвратаТовары.Ссылка.ПричинаВозврата,
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода.Приход.Контрагент,
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода.Приход.НомерВходящегоДокумента,
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода.Приход.ДатаВходящегоДокумента";
	
	Запрос.УстановитьПараметр("Ссылка", АктВозврата);
	
	ТоварыАкта = Запрос.Выполнить().Выгрузить();
	
	//Тема письма
	СтрокаТовараТемы = "";
	Если ТоварыАкта.Количество() > 0 Тогда
		СтрокаТовараТемы = ТоварыАкта[0].Наименование + " / " 
		+ ТоварыАкта[0].Изготовитель + " / " 
		+ ТоварыАкта[0].Артикул 
		+ " в количестве " + ТоварыАкта[0].Количество + " шт. "; 
	КонецЕсли;
	
	ЭП.Тема = "Компания ПартКом. Акт приема-передачи возврата: " + СтрокаТовараТемы + " #"+РеквизитыДокумента.Штрихкод+"#";
	
	ЭП.ТекстПисьма = ТекстПисьмаАктаПриемаПередачи(АктВозврата);
	
	Если ПустаяСтрока(ЭП.Кому) Тогда
		ТекстОшибки = "Не определен адрес электронной почты для контрагента "+РеквизитыДокумента.Контрагент;
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		//ВызватьИсключение ТекстОшибки;
		Возврат Ложь;
	КонецЕсли;
	
	ЭП.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
	Если НЕ ЗначениеЗаполнено(ЭП.Ответственный) Тогда
		ЭП.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	ЭП.Дата = ТекущаяДата();
	ЭП.КодировкаПисьма = "utf-8";
	ЭП.ЕстьВложения = Истина;
	ЭП.Записать();
	
	//Добавим вложение
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	КаталогВременныхФайлов = ВозвратыОтПокупателяСервер.КаталогОбменаССайтом(Ложь, Истина, 2);
	
	ИмяФайла = "akt_"+РеквизитыДокумента.Штрихкод+".pdf";
	ПолноеИмяФайла 	= КаталогВременныхФайлов + ИмяФайла;
	ТабДок = ТабличныйДокументПечатнойФормы("АктПриемаПередачи", АктВозврата);
	ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
	НовыйФайл.Объект = ЭП.Ссылка;
	НовыйФайл.ИмяФайла = ИмяФайла;
	НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый СжатиеДанных());
	НовыйФайл.Записать();
	
	УдалитьФайлы(ПолноеИмяФайла);
	
	//Добавим претензию
	ТабДок = ТабличныйДокументПечатнойФормы("Претензия", АктВозврата);
	Если ТабДок <> Неопределено Тогда
		ИмяФайла = "pretenziya_"+РеквизитыДокумента.Штрихкод+".pdf";
		ПолноеИмяФайла 	= КаталогВременныхФайлов + ИмяФайла;
		
		ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
		НовыйФайл = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
		НовыйФайл.Объект = ЭП.Ссылка;
		НовыйФайл.ИмяФайла = ИмяФайла;
		НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый СжатиеДанных());
		НовыйФайл.Записать();
		
		УдалитьФайлы(ПолноеИмяФайла);
	КонецЕсли;
	
	//Отправим
	Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
		
		УчетныеЗаписи = Новый Массив;
		УчетныеЗаписи.Добавить(ВозвратыОтПокупателяСервер.УчетнаяЗаписьЭлектроннойПочтыВозвраты());
		Письма = Новый Соответствие;
		Письма.Вставить(ЭП.Ссылка, ЭП);
		УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"), УчетныеЗаписи, Письма, Истина);
	Иначе
		Сообщить("Тестовая база. Письмо записано, но не отправлено.");
		ЭП = ЭП.Ссылка.ПолучитьОбъект();
		ЭП.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное;
		ЭП.ОбменДанными.Загрузка = Истина;
		ЭП.Записать();
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭП.Ссылка, "СтатусПисьма") = Перечисления.СтатусыПисем.Отправленное Тогда
		//ВызватьИсключение "Не удалось отправить электронное письмо "+ЭП;
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось отправить электронное письмо "+ЭП);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТекстПисьмаАктаПриемаПередачи(АктВозврата)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ТекстПисьмаАктаПриемаПередачи";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ШаблонТекста = ШаблонТекстаПисьмаАктаПриемаПередачи();
	
	ОписаниеТоваровАкта = ОписаниеТоваровАкта(АктВозврата);
	
	ШаблонТекста = СтрЗаменить(ШаблонТекста, "[АртикулНаименование]", 
		ОписаниеТоваровАкта[0].НоменклатураНаименование + " / " 
		+ ОписаниеТоваровАкта[0].Изготовитель + " / " 
		+ ОписаниеТоваровАкта[0].Артикул );
	ШаблонТекста = СтрЗаменить(ШаблонТекста, "[Количество]", 					ОписаниеТоваровАкта.Итог("Количество"));
	ШаблонТекста = СтрЗаменить(ШаблонТекста, "[СрокВозвратаКлиента]", 			КонецДня(АктВозврата.СрокВозвратаКлиента));
	ШаблонТекста = СтрЗаменить(ШаблонТекста, "[ИнформацияОбУпаковке]", 			ОписаниеТоваровАкта[0].ИнформацияОбУпаковке);
	ШаблонТекста = СтрЗаменить(ШаблонТекста, "[ИнформацияОСледахУстановки]", 	ОписаниеТоваровАкта[0].ИнформацияОСледахУстановки);

	Возврат ШаблонТекста;	
	
КонецФункции

Функция ШаблонТекстаПисьмаАктаПриемаПередачи()
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ШаблонТекстаПисьмаАктаПриемаПередачи";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ШаблонТекста = "Здравствуйте!
	|
	|Мы готовы принять к возврату товар [АртикулНаименование] в количестве [Количество] шт.
	|Для осуществления возврата Вам необходимо:
	|	
	|	1. Распечатать в 2-х экземплярах ""Акт приема-передачи"", который находится во вложении к данному письму;
	|	 
	|		- Экземпляр Грузополучателя (Партком): поставить подпись и печать организации грузоотправителя (если она имеется), передать его представителю нашей компании (водителю, сотруднику склада, менеджеру);
	|		- Экземпляр Грузоотправителя (Клиент): экземпляр необходимо подписать у нашего представителя (обязательно попросите заполнить корректно и разборчиво должность, ФИО, подпись и дату в разделе «Подпись представителя грузополучателя»).
	|	
	|	2. Распечатать и подписать «Претензию» на возмещение суммы, потраченной на установку, в одном экземпляре и передать вместе с товаром и «Актом приема-передачи» в случае, если вы получили ее по программе «Компенсация ремонта».
	|
	|	3. Доставить товар на склад грузополучателя в срок до [СрокВозвратаКлиента];
	|	
	|		- Предоставить товар в том виде, который Вы указали при оформлении запроса на сайте:
	|		[ИнформацияОбУпаковке]
	|		[ИнформацияОСледахУстановки]
	|	
	|Внимание: товар без заполненного ""Акта приема-передачи"" в 2-х экземплярах к возврату приниматься не будет.
	|		
	|	4. После приемки товара на нашем складе Вам будет:
	|		
	|		- Выписан документ ""Универсальный корректировочный документ"", который подтверждает возврат товара и необходим для бухгалтерской отчетности;
	|		- Документ будет передан с водителем или отправлен по почте.
	|
	|С уважением,
	|компания ""Партком"".
	|http://www.part-kom.ru";
				
	Возврат ШаблонТекста;			
				
КонецФункции

#КонецОбласти

#Область ОтправкаЭлмаподобногоСообщения

//Файловый обмен
Процедура ОтправитьЭлмаподобноеСообщениеНаСайт(Акт, Строка2 = "", Строка3 = "", Строка4 = "0", Строка5, ТипКаталога = 3, ИмяФайла = "") Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ОтправитьЭлмаподобноеСообщениеНаСайт";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	КаталогОбменаССайтом = ВозвратыОтПокупателяСервер.КаталогОбменаССайтом(Ложь, Истина, ТипКаталога);
	//Если ТипЗнч(Акт) = Тип("ДокументСсылка.АктРассмотренияВозврата") Тогда
	//	Штрихкод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Акт, "Штрихкод");
	//	Если Не ЗначениеЗаполнено(Строка3) Тогда
	//		Строка3 = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Акт, "КодВозврата.Код"));
	//	КонецЕсли;
	//Иначе
	Штрихкод = (Акт.Штрихкод);
	Если Не ЗначениеЗаполнено(Строка3) И ЗначениеЗаполнено(Акт.КодВозврата) Тогда
		Строка3 = Строка(Акт.КодВозврата.Код);
	КонецЕсли;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = "send_"+Штрихкод+".txt";
	КонецЕсли;
	ТекстСообщенияДляСайта = Штрихкод+"
	|"+?(НЕ ЗначениеЗаполнено(Строка2), ПараметрыСеанса.ТекущийПользователь, Строка2) +"
	|"+Строка3+"
	|"+Строка4+"
	|---
	|"+Строка5+"
	|---";
	
	ЗаписьТекста = Новый ЗаписьТекста(КаталогОбменаССайтом + ИмяФайла, КодировкаТекста.ANSI);
	ЗаписьТекста.ЗаписатьСтроку(ТекстСообщенияДляСайта);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

//Файловый обмен
Функция ОтправитьТекстОтказаНаСайт(Акт) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ОтправитьТекстОтказаНаСайт";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ОтправитьЭлмаподобноеСообщениеНаСайт(Акт, "robot", Строка(Акт.КодВозврата.Код), "0", ТекстОтказаДляСайта(Акт));
	
КонецФункции

//Файловый и WS обмен
Функция ТекстОтказаДляСайта(Акт) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ТекстОтказаДляСайта";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//4015305986986
	//Bezrukova-AV
	//2
	//1
	//---
	//Ваш запрос на возврат отклонен по причине:
	//Здравствуйте! Просим Вас приложить фотографии всех маркировок на детали (производитель, артикул, дата выпуска детали). Пожалуйста, оформите повторный запрос с необходимой информацией. Спасибо!
	
	//Автор ответа: Специалист по претензионной работе Безрукова Анастасия Валерьевна.
	//По всем вопросам, связанным с данным ответом, просим обращаться в Группу поддержки Клиентов по телефону:
	//(831) 233-22-07 — многоканальный (10 линий).
	//---
	
	//Если ТипЗнч(Акт) = Тип("ДокументСсылка.АктРассмотренияВозврата") Тогда
	//	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Акт, "ПричинаОтказаВВозврате, МенеджерОтказаВВозврате");
	//	ПричинаОтказаВВозврате 	= Реквизиты.ПричинаОтказаВВозврате;
	//	МенеджерОтказаВВозврате = Реквизиты.МенеджерОтказаВВозврате;
	//Иначе
	//	ПричинаОтказаВВозврате 	= Акт.ПричинаОтказаВВозврате;
	//	МенеджерОтказаВВозврате = Акт.МенеджерОтказаВВозврате;
	//КонецЕсли;
	
	ПричинаОтказаВВозврате 	= Акт.ПричинаОтказаВВозврате;
	МенеджерОтказаВВозврате = Акт.МенеджерОтказаВВозврате;
	
	Если не ЗначениеЗаполнено(ПричинаОтказаВВозврате) Тогда
		ВызватьИсключение "Не указана причина возврата";
	КонецЕсли;
	
	ТекстСообщения = ШаблонТекстаОтказаВВозврате();
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "ПричинаОтказаВВозврате",  ПричинаОтказаВВозврате);
	
	//ХудинВВ XX-2599 14062019 Исключаем персонификацию КРО
	Если ЗначениеЗаполнено(МенеджерОтказаВВозврате) И НЕ Акт.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_КРООтказ Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "МенеджерОтказаВВозврате", "Автор ответа: Специалист по претензионной работе "+МенеджерОтказаВВозврате+".");
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "МенеджерОтказаВВозврате", "");
	КонецЕсли;
	
	Возврат ТекстСообщения;	
	
КонецФункции

//Файловый и WS обмен
Функция ШаблонТекстаОтказаВВозврате()
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ШаблонТекстаОтказаВВозврате";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ШаблонТекстаОтказаВВозврате = "Ваш запрос на возврат отклонен по причине:
	|
	| ПричинаОтказаВВозврате
	|
	|МенеджерОтказаВВозврате
	|По всем вопросам, связанным с данным ответом, просим обращаться в Группу поддержки Клиентов по телефону:
	|(831) 233-22-07 — многоканальный (10 линий).";
	
	Возврат ШаблонТекстаОтказаВВозврате;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПечатныхФормаДляСайта
//Устарело

Процедура ВыгрузитьПечатныеФормыНаСайт(АктСсылка) Экспорт
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	КаталогОбменаССайтом = ВозвратыОтПокупателяСервер.КаталогОбменаССайтом(Ложь, Истина, 2);
	
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктСсылка, "Штрихкод, Контрагент.Код, ДокументПродажи.ДоговорКонтрагента.ВидОплаты, Контрагент.РаботаетСНДС");
	
	КаталогСохранения = КаталогОбменаССайтом +"docs\"+ РеквизитыАРВ.Штрихкод +"\";
	СоздатьКаталог(КаталогСохранения);
	
	Если  РеквизитыАРВ.ДокументПродажиДоговорКонтрагентаВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда
		Возврат;		
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив; 
	
	//Торг-12
	ИмяФайлаТорг12 	= КаталогВременныхФайлов + "" + РеквизитыАРВ.КонтрагентКод + "_ТОРГ12.xls";
	Торг12 			= ПечатьТОРГ12(АктСсылка);
	Торг12.Записать(ИмяФайлаТорг12, ТипФайлаТабличногоДокумента.XLS);
	МассивИменФайлов.Добавить(ИмяФайлаТорг12);
	
	//СФ
	Если РеквизитыАРВ.КонтрагентРаботаетСНДС Тогда
		ИмяФайлаСФ 		= КаталогВременныхФайлов + "" + РеквизитыАРВ.КонтрагентКод + "_СФ.xls";
		СФ 				= ПечатьСчетаФактуры(АктСсылка);
		СФ.Записать(ИмяФайлаСФ, ТипФайлаТабличногоДокумента.XLS);
		МассивИменФайлов.Добавить(ИмяФайлаСФ);
	КонецЕсли;
	
	ИмяАрхива	= КаталогСохранения+"arc.zip";
	ЗапаковатьВZipФайл(ИмяАрхива, МассивИменФайлов);
	
	УдалитьФайлы(ИмяФайлаТорг12);
	Если РеквизитыАРВ.КонтрагентРаботаетСНДС Тогда
		УдалитьФайлы(ИмяФайлаСФ);
	КонецЕсли;
	
КонецПроцедуры

// Запаковывает указанный каталог в файл архива ZIP
//
// Параметры:
//  ПолноеИмяФайлаАрхива  - Строка - имя файла архива, в который необходимо запаковать
//  МаскаУпаковкиФайлов    - Строка - имя файла, помещаемого в архив, или маска.
//			Недопустимо использование в именах файлов и папок букв национальных алфавитов, которые при 
//			преобразовании из символов UNICODE в узкие символы могут быть преобразованы с потерей информации. 
//			Рекомендуется использовать в именах файлов и папок символы латинского алфавита. 
//  ПарольАрхива          - Строка - пароль для архива. По умолчанию пустая строка
// 
// Возвращаемое значение:
//  Результат - Булево - Истина, если успешно, Ложь, если нет.
//
Функция ЗапаковатьВZipФайл(Знач ПолноеИмяФайлаАрхива, Знач МассивИменФайлов, Знач ПарольАрхива = "") Экспорт
	
	Архиватор = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива, ПарольАрхива);
	
	Для каждого ИмяФайла Из МассивИменФайлов Цикл
		Архиватор.Добавить(ИмяФайла, РежимСохраненияПутейZIP.НеСохранятьПути);
	КонецЦикла;	
	Архиватор.Записать();
	
КонецФункции  

#КонецОбласти

#Область ФормированиеБланкаВозврата

Функция ВыгрузитьБланкВозвратаНаСайт(АктСсылка) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ВыгрузитьБланкВозвратаНаСайт";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ТекстСообщенияДляСайта = ТекстСообщенияДляСайта(АктСсылка);
	
	КаталогОбменаССайтом = ВозвратыОтПокупателяСервер.КаталогОбменаССайтом(Ложь, Истина, 2);
	
	Штрихкод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктСсылка, "Штрихкод");
	
	ИмяФайла = "send_"+Штрихкод+".txt";

	ЗаписьТекста = Новый ЗаписьТекста(КаталогОбменаССайтом + ИмяФайла, КодировкаТекста.ANSI);
	ЗаписьТекста.ЗаписатьСтроку(ТекстСообщенияДляСайта);
	ЗаписьТекста.Закрыть();	
	
КонецФункции

Функция ТекстСообщенияДляСайта(АктСсылка) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ТекстСообщенияДляСайта";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	
	ТаблицаОписание = ОписаниеТоваровАкта(АктСсылка);
	
	ЧастьСообщения1 = ЧастьСообщения1(АктСсылка);
	
	ЧастьСообщения2 = ЧастьСообщения2(АктСсылка, ТаблицаОписание);
	
	ЧастьСообщения3 = БланкВозврата(АктСсылка, ТаблицаОписание);
	
	ИтоговоеСообщение = ЧастьСообщения1 + ЧастьСообщения2 + ЧастьСообщения3;
	
	Возврат ИтоговоеСообщение;
	
КонецФункции

Функция ЧастьСообщения1(АктСсылка)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ЧастьСообщения1";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ЧастьСообщения1 = ""+АктСсылка.Штрихкод+"
	|"+ПараметрыСеанса.ТекущийПользователь+"
	|1
	|0
	|---
	|";
	
	Возврат ЧастьСообщения1;

КонецФункции

Функция ЧастьСообщения2(АктСсылка, ТаблицаОписание)
	
	ТекстСообщения = "Здравствуйте!
	|
	| В ответ на Ваш запрос сообщаем:
	|
	| %Префикс%
	| %ИнформацияОТоварах%
	|
	| Для осуществления возврата перейдите по ссылке и следуйте инструкции.
	|
	|
	|---
	|";
	
	Если АктСсылка.КодВозврата = Справочники.КодыВозврата.НаЭкспертизу Тогда
		Префикс = "Мы готовы принять на ЭКСПЕРТИЗУ (осмотр): ";
	Иначе
		Префикс = "Мы готовы принять к возврату: ";
	КонецЕсли;
	
	ИнформацияОТоварах = "";
	Для каждого СтрокаТаблицы Из ТаблицаОписание Цикл
		ИнформацияОТоварах = ИнформацияОТоварах + Символы.ПС + СтрокаТаблицы.НоменклатураНаименование + ", " + СтрокаТаблицы.Изготовитель + " " + СтрокаТаблицы.Артикул + " в кол-ве " + СтрокаТаблицы.Количество + " шт."
	КонецЦикла;
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Префикс%", Префикс);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОТоварах%", ИнформацияОТоварах);
	
	Возврат ТекстСообщения;

КонецФункции

//ЧастьСообщения3
Функция БланкВозврата(АктСсылка, ТаблицаОписание)
	
	БланкВозврата = "
	| Решение по запросу %Контрагент% № %Штрихкод% от %Дата%:
	|
	| %Префикс%
	| %ИнформацияОТоварах%
	|
	| Описание в запросе покупателя: %Описание%
	| Служебные данные: %Логин%
	| ===================================================================================
	| \n
	| Уважаемый Партнер!
	|
	| %ПринятоРешение%
	|
	| Просим Вас:
	| <b>1. Распечатать данный бланк возврата - 1 экз., подписать и поставить печать Вашей организации.</b>
	| %ИнформацияОДокументе%
	| В документах должен быть указан товар:
	| %ИнформацияОТоваре%
	|
	| <b>Внимание!</b>
	| Для исключения ошибок при оформлении документов, предлагаем получить на почту готовые документы на возврат. Для этого перейдите в раздел ""Сообщения"" к запросу о возврате товара и нажмите «Получить».
	| <big><b>3. Привезти товар на %Склад% склад с пакетом документов (п. 2) и бланком возврата в срок до %СрокВозвратаКлиента%.</b></big>
	| 4. Предоставить товар в том виде, который был указан при формировании Вами запроса на нашем сайте
	| -
	| %УпаковкаСледыУстановки%
	| \n
	| Обращаем Ваше внимание!
	| Мы не сможем принять товар к возврату без соблюдения условий, указанных в данном бланке.
	| Выражаем надежду на дальнейшее продуктивное сотрудничество!
	| ===================================================================================
	| <b>Комментарий сотрудника компании ""ПартКом"":
	| Срок возврата товара на склад Компании до: %СрокВозвратаКлиента%.
	| Ваш запрос одобрен.
	| Пожалуйста, изучите информацию, содержащуюся в бланке возврата.
	| При соблюдении всех условий, мы гарантируем успешный возврат детали.
	| Спасибо!
	|
	| ВНИМАНИЕ!!!
	| Деталь принимается только при условии сохранности товарного вида и целостности упаковки.
	| </b>
	|
	| По всем вопросам, связанным с данным ответом, просим обращаться в Группу поддержки Клиентов по телефону:
	|(831) 233-22-07 — многоканальный (10 линий).
	|---
	| %КодВозврата%
	|---
	| %СуммаДокумента%";

	
	НомерРТУ = АктСсылка.ДокументПродажи.Номер;
	ДатаРТУ  = АктСсылка.ДокументПродажи.Дата;
	УчетнаяЗапись = Справочники.УчетныеЗаписиСайта.ДанныеУчетнойЗаписиКонтрагента(АктСсылка.Контрагент);
	
	БланкВозврата = СтрЗаменить(БланкВозврата, "%Контрагент%",  		АктСсылка.Контрагент);
	БланкВозврата = СтрЗаменить(БланкВозврата, "%Штрихкод%",  			АктСсылка.Штрихкод);
	БланкВозврата = СтрЗаменить(БланкВозврата, "%Дата%",  				АктСсылка.Дата);
	БланкВозврата = СтрЗаменить(БланкВозврата, "%Описание%",  			АктСсылка.КомментарийСайт);
	БланкВозврата = СтрЗаменить(БланкВозврата, "%Логин%",  				УчетнаяЗапись.Логин);
	БланкВозврата = СтрЗаменить(БланкВозврата, "%КодВозврата%",			АктСсылка.КодВозврата.Код);
	БланкВозврата = СтрЗаменить(БланкВозврата, "%СуммаДокумента%",		АктСсылка.СуммаДокумента);
	БланкВозврата = СтрЗаменить(БланкВозврата, "%Склад%", 				АктСсылка.Склад);
	БланкВозврата = СтрЗаменить(БланкВозврата, "%СрокВозвратаКлиента%", Формат(АктСсылка.СрокВозвратаКлиента, "ДФ=dd.MM.yyyy"));
	
	ИнформацияОДокументе = "";	
	Если Не АктСсылка.ДоговорКонтрагента.ВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда
		ИнформацияОДокументе = "Оформить пакет документов: накладная ТОРГ-12, счет-фактура с НДС 18%, оформленные в 2-х экземплярах на " + АктСсылка.Организация + ".";
		СтрокиСБраком = ТаблицаОписание.НайтиСтроки(Новый Структура("ПричинаВозврата", Справочники.ПричиныВозврата.БракВыявленныйПослеУстановки));
		Если СтрокиСБраком.Количество() > 0 Тогда //"«Причина возврата» = «брак, СТО»"
			ИнформацияОДокументе = ИнформацияОДокументе + " Акт рекламации СТО, Заказ-наряд СТО с подтверждением оплаты работ.";
		КонецЕсли;
	КонецЕсли;
	БланкВозврата = СтрЗаменить(БланкВозврата, "%ИнформацияОДокументе%", "2." + ИнформацияОДокументе);
	
	Если АктСсылка.КодВозврата = Справочники.КодыВозврата.НаЭкспертизу Тогда
		Префикс = "Принять на экспертизу (осмотр): ";
	Иначе
		Префикс = "Принять к возврату товар: ";
	КонецЕсли;
	БланкВозврата = СтрЗаменить(БланкВозврата, "%Префикс%",  			Префикс);
	
	ИнформацияОТоварах = "";
	Для каждого СтрокаТаблицы Из ТаблицаОписание Цикл
		ИнформацияОТоварах = ИнформацияОТоварах + Символы.ПС + СтрокаТаблицы.НоменклатураНаименование + ", " + СтрокаТаблицы.Изготовитель + " " + СтрокаТаблицы.Артикул + " в количестве " + СтрокаТаблицы.Количество + " шт."+ ", отгруженный со склада по накладной № " + НомерРТУ + " от " + ДатаРТУ + ".";
		ИнформацияОТоварах = ИнформацияОТоварах + Символы.ПС + "Причина возврата: "+СтрокаТаблицы.ПричинаВозврата;
	КонецЦикла; 
	БланкВозврата = СтрЗаменить(БланкВозврата, "%ИнформацияОТоварах%",  ИнформацияОТоварах);
	
	ПринятоРешение = "Принято решение удовлетворить Ваш запрос о возврате товара:";
	Для каждого СтрокаТаблицы Из ТаблицаОписание Цикл
		
		СтрокаУценки = "";
		Если СтрокаТаблицы.ПроцентУценки > 0 Тогда
			СтрокаУценки = ", с уценкой " + СтрокаТаблицы.ПроцентУценки + "%";
		КонецЕсли;
		СтрокаКомпенсации = "";
		Если СтрокаТаблицы.СуммаКомпенсации > 0 Тогда
			СтрокаКомпенсации = ", с компенсацией работ за проведённую установку " + СтрокаТаблицы.СуммаКомпенсации + " руб.";
		КонецЕсли;
		
		Стр = СтрокаТаблицы.НоменклатураНаименование + ", " + СтрокаТаблицы.Изготовитель + " " + СтрокаТаблицы.Артикул + СтрокаУценки + СтрокаКомпенсации;
		ПринятоРешение = ПринятоРешение + Символы.ПС + Стр;
		
	КонецЦикла;
	БланкВозврата = СтрЗаменить(БланкВозврата, "%ПринятоРешение%", ПринятоРешение);
	
	//ИнформацияОДокументе = "";
	//Для каждого СтрокаТаблицы Из ТаблицаОписание Цикл
	//	ИнформацияОДокументе = ИнформацияОДокументе + ?(ЗначениеЗаполнено(ИнформацияОДокументе), Символы.ПС, "") + СтрокаТаблицы.ИнформацияОДокументе;
	//КонецЦикла;
	//БланкВозврата = СтрЗаменить(БланкВозврата, "%ИнформацияОДокументе%", ИнформацияОДокументе);
	
	ИнформацияОТоваре = "";
	Для каждого СтрокаТаблицы Из ТаблицаОписание Цикл
		ИнформацияОТоваре = ИнформацияОТоваре + ?(ЗначениеЗаполнено(ИнформацияОТоваре), Символы.ПС, "") + СтрокаТаблицы.ИнформацияОТоваре;
		ИнформацияОТоваре = ИнформацияОТоваре + ?(ЗначениеЗаполнено(ИнформацияОТоваре), Символы.ПС, "") + СтрокаТаблицы.ИнформацияСчетФактура;
	КонецЦикла;
	БланкВозврата = СтрЗаменить(БланкВозврата, "%ИнформацияОТоваре%", ИнформацияОТоваре);
	
	//Упаковка = "";
	//Для каждого СтрокаТаблицы Из ТаблицаОписание Цикл
	//	Упаковка = Упаковка + ?(ЗначениеЗаполнено(Упаковка), Символы.ПС, "") + СтрокаТаблицы.НоменклатураНаименование + ", " + СтрокаТаблицы.Изготовитель + " " + СтрокаТаблицы.Артикул + " " + СтрокаТаблицы.ИнформацияОбУпаковке;
	//КонецЦикла;
	//БланкВозврата = СтрЗаменить(БланкВозврата, "%Упаковка%", Упаковка);
	//
	//СледыУстановки = "";
	//Для каждого СтрокаТаблицы Из ТаблицаОписание Цикл
	//	СледыУстановки = СледыУстановки + ?(ЗначениеЗаполнено(СледыУстановки), Символы.ПС, "") + СтрокаТаблицы.НоменклатураНаименование + ", " + СтрокаТаблицы.Изготовитель + " " + СтрокаТаблицы.Артикул + " " + СтрокаТаблицы.ИнформацияОСледахУстановки;
	//КонецЦикла;
	//БланкВозврата = СтрЗаменить(БланкВозврата, "%СледыУстановки%", СледыУстановки);
	
	УпаковкаСледыУстановки = "";
	Для каждого СтрокаТаблицы Из ТаблицаОписание Цикл
		УпаковкаСледыУстановки = УпаковкаСледыУстановки + ?(ЗначениеЗаполнено(УпаковкаСледыУстановки), Символы.ПС, "") + СтрокаТаблицы.НоменклатураНаименование + ", " + СтрокаТаблицы.Изготовитель + " " + СтрокаТаблицы.Артикул+ " " + СтрокаТаблицы.ИнформацияОбУпаковке + " " + СтрокаТаблицы.ИнформацияОСледахУстановки;
	КонецЦикла;
	БланкВозврата = СтрЗаменить(БланкВозврата, "%УпаковкаСледыУстановки%", УпаковкаСледыУстановки);
	
	
	Возврат БланкВозврата;

Конецфункции

Функция ОписаниеТоваровАкта(АктСсылка)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ОписаниеТоваровАкта";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктРассмотренияВозвратаТовары.Номенклатура,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель КАК Изготовитель,
	|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул КАК Артикул,
	|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения,
	|	АктРассмотренияВозвратаТовары.КоличествоПлан КАК Количество,
	|	АктРассмотренияВозвратаТовары.Цена,
	|	АктРассмотренияВозвратаТовары.СтавкаНДС,
	|	АктРассмотренияВозвратаТовары.СуммаНДСПлан КАК СуммаНДС,
	|	АктРассмотренияВозвратаТовары.СуммаПлан КАК Сумма,
	|	АктРассмотренияВозвратаТовары.ПроцентУценки,
	|	АктРассмотренияВозвратаТовары.СуммаУценки,
	|	АктРассмотренияВозвратаТовары.ЦенаПослеУценки,
	|	АктРассмотренияВозвратаТовары.ВидУценки,
	|	АктРассмотренияВозвратаТовары.СуммаКомпенсации,
	|	АктРассмотренияВозвратаТовары.Ссылка.ПричинаВозврата КАК ПричинаВозврата,
	|	АктРассмотренияВозвратаТовары.ЦелостностьУпаковки,
	|	АктРассмотренияВозвратаТовары.ОтсутствуютСледыУстановки,
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода.НомерГТД КАК НомерГТД,
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода.СтранаПроисхождения КАК СтранаПроисхождения,
	|	АктРассмотренияВозвратаТовары.СтавкаНДС
	|ИЗ
	|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
	|ГДЕ
	|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", АктСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОписание = РезультатЗапроса.Выгрузить();
	ТаблицаОписание.Колонки.Добавить("ИнформацияОТоваре");
	ТаблицаОписание.Колонки.Добавить("ИнформацияОДокументе");
	ТаблицаОписание.Колонки.Добавить("ИнформацияОбУпаковке");
	ТаблицаОписание.Колонки.Добавить("ИнформацияОСледахУстановки");
	ТаблицаОписание.Колонки.Добавить("ИнформацияСчетФактура");
	
	Наличные = АктСсылка.ДоговорКонтрагента.ВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные;	
	
	Для Каждого Выборка ИЗ  ТаблицаОписание Цикл
		
		//ИнфТовар
		Сумма = Выборка.Сумма + Выборка.СуммаКомпенсации;
		СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Сумма,
		АктСсылка.УчитыватьНДС, АктСсылка.СуммаВключаетНДС,
		УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));
		
		СтрокаУценки = "по цене - ";
		Если  Выборка.ПроцентУценки > 0 Тогда
			СтрокаУценки = "по цене с учётом уценки " + Выборка.ПроцентУценки + "% - ";
		КонецЕсли;
		
		СтрокаНДС = 0;
		Если Не Наличные Тогда
			СтрокаНДС = " в том числе НДС - " + СуммаНДС + " руб. ";
		КонецЕсли;
		
		ИнфТовар = Выборка.НоменклатураНаименование + ", "+Выборка.Изготовитель+", "+Выборка.Артикул+", в кол-ве " + Выборка.Количество + "шт., " + СтрокаУценки + Выборка.ЦенаПослеУценки+ " руб. на общую сумму- " + Выборка.Сумма + " руб." + СтрокаНДС;
		
		Если Выборка.ВидУценки = Перечисления.ВидыУценки.ОбработкаОднойДетали И Выборка.СуммаУценки > 0 Тогда //«Вид уценки» = "Обработка одной детали"
			ИнфТовар = ИнфТовар + " Стоимость обработки 1 детали составила " + Формат(Выборка.СуммаУценки, "ЧДЦ=2") + " руб.";
		КонецЕсли;
		
		//ИнфДок
		//Если Не Наличные Тогда
		//	ИнфДок = "Оформить пакет документов: накладная ТОРГ-12, счет-фактура с НДС 18%, оформленные в 2-х экземплярах на " + АктСсылка.Организация + ".";
		//КонецЕсли;
		//
		//Если Выборка.ПричинаВозврата = Перечисления.ПричиныВозврата.Брак Тогда //"«Причина возврата» = «брак, СТО»"
		//	ИнфДок = ИнфДок + ", акт рекламации СТО, Заказ-наряд СТО с подтверждением оплаты работ";
		//КонецЕсли;
		
		//Упаковка
		Если Выборка.ЦелостностьУпаковки Тогда
			Упаковка = "- Сохранена упаковка и её товарный вид.";
		Иначе
			Упаковка = "- Упаковка отсутствует или потерян её товарный вид.";
		КонецЕсли;
		
		//СледыУст
		Если Выборка.ОтсутствуютСледыУстановки Тогда
			СледыУст = "- Товар не имеет признаков использования, отсутствуют следы установки, сохранен товарный вид.";
		Иначе
			СледыУст = "- Товар имеет следы установки.";
		КонецЕсли;
		
		ГТД = Выборка.НомерГТД;
		Страна = Выборка.СтранаПроисхождения;
		СчетФактура = "";
		Если НЕ Наличные Тогда
			СчетФактура = "Счет-фактура должна содержать данные о ГТД и стране происхождения: номер ГТД: " + ГТД + ", страна происхождения: " + Страна + "."
		КонецЕсли;
		
		Выборка.ИнформацияОТоваре 			= ИнфТовар;
		//Выборка.ИнформацияОДокументе 		= ИнфДок;
		Выборка.ИнформацияОбУпаковке 		= Упаковка;
		Выборка.ИнформацияОСледахУстановки 	= СледыУст;
		Выборка.ИнформацияСчетФактура 		= СчетФактура;
		
	КонецЦикла;
	
	Возврат ТаблицаОписание;
	
КонецФункции

#КонецОбласти

#Область Прочее

//Контроль ручного изменения реквизитов
Функция ИменаРеквизитовДляКонтроляИстории() Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ИменаРеквизитовДляКонтроляИстории";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ИменаРеквизитов = Новый СписокЗначений;	
	ИменаРеквизитов.Добавить("КодВозврата", 						"Код возврата"); 
	ИменаРеквизитов.Добавить("ВариантСписания", 					"Вариант списания"); 
	ИменаРеквизитов.Добавить("ВиновноеЛицоДляСписания", 			"Виновное лицо для списания"); 
	ИменаРеквизитов.Добавить("КодСписания", 						"Код списания"); 
	ИменаРеквизитов.Добавить("Организация", 						"Организация"); 
	ИменаРеквизитов.Добавить("Контрагент", 							"Контрагент"); 
	ИменаРеквизитов.Добавить("ДоговорКонтрагента", 					"Договор контрагента"); 
	ИменаРеквизитов.Добавить("БезоговорочныйВозврат", 				"Безоговорочный возврат"); 
	ИменаРеквизитов.Добавить("СуммаДокумента", 						"Сумма документа"); 
	ИменаРеквизитов.Добавить("СтатусДокумента", 					"Статус документа"); 
	ИменаРеквизитов.Добавить("Ответственный", 						"Ответственный"); 
	ИменаРеквизитов.Добавить("ДокументПродажи", 					"Документ продажи");
	ИменаРеквизитов.Добавить("ПричинаВозврата", 					"Причина возврата");
	ИменаРеквизитов.Добавить("ПодпричинаВозврата", 					"Подпричина возврата");	
	ИменаРеквизитов.Добавить("СрокВозвратаКлиента", 				"Срок возврата клиента");
	ИменаРеквизитов.Добавить("ПолитическоеРешение", 				"Политическое решение");	
	ИменаРеквизитов.Добавить("СтатусПроверкиДокументовПокупателя", 	"Статус проверки документов покупателя");
	ИменаРеквизитов.Добавить("СтатусПроверкиДокументовПоставщика", 	"Статус проверки документов поставщика");
	
	//Только числовые реквизиты табчасти!
	ИменаРеквизитов.Добавить("СуммаКомпенсацииУтв", 			"Утвержденная сумма компенсации");

	Возврат ИменаРеквизитов;
	
КонецФункции

Функция СтруктураРеквизитовДляКонтроляИстории() Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	ИменаРеквизитов = ИменаРеквизитовДляКонтроляИстории();
	Для каждого ЭлСписка Из ИменаРеквизитов цикл
		СтруктураРеквизитов.Вставить(ЭлСписка.Значение, Неопределено);
	КонецЦикла;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Проверка уникальности 
Функция АРВУникаленПоШтрихкоду(СсылкаНаДокумент) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_АРВУникаленПоШтрихкоду";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктРассмотренияВозврата.Ссылка
		|ИЗ
		|	Документ.АктРассмотренияВозврата КАК АктРассмотренияВозврата
		|ГДЕ
		|	НЕ АктРассмотренияВозврата.Ссылка = &Ссылка
		|	И АктРассмотренияВозврата.Штрихкод = &Штрихкод";
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, "Штрихкод, Дата");
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("Штрихкод", Реквизиты.Штрихкод);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПрефиксШтрихкодаДляРучногоСозданияАРВ() Экспорт
	
	Возврат "hm";
	
КонецФункции

Функция ПрефиксШтрихкодаПретензии() Экспорт
	
	Возврат "pr";
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ЭтоРучнойВвод(Документ) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ЭтоРучнойВвод";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Если Не ЗначениеЗаполнено(Документ.Штрихкод) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Префикс = Документы.АктРассмотренияВозврата.ПрефиксШтрихкодаДляРучногоСозданияАРВ();
	
	Возврат СтрНайти(Документ.Штрихкод, Префикс) > 0; 
	
КонецФункции

#Область ДокументыПоАкту

Функция ДокументыВозвратаОтПокупателяПоАРВ(СсылкаНаДокумент, ТекстУсловия = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ДокументыВозвратаОтПокупателяПоАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка,
		|	ВозвратТоваровОтПокупателя.Номер,
		|	ВозвратТоваровОтПокупателя.Дата,
		|	ВозвратТоваровОтПокупателя.Проведен,
		|	ВозвратТоваровОтПокупателя.ПометкаУдаления,
		|	ВозвратТоваровОтПокупателя.Склад,
		|	ВозвратТоваровОтПокупателя.СтатусДокумента,
		|	ВозвратТоваровОтПокупателя.СостояниеОтменыВТоплог
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И НЕ ВозвратТоваровОтПокупателя.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|	И НЕ ВозвратТоваровОтПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратаОтПокупателя.МФП)
		|	И &ТекстУсловия";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ?(ЗначениеЗаполнено(ТекстУсловия), ТекстУсловия, "Истина")); 
	
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СтатусВозвратаОтПокупателяПоАРВ(СсылкаНаДокумент) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_СтатусВозвратаОтПокупателяПоАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтатусВозвратаОтПокупателяПоАРВ = Неопределено;
	
	ТаблицаВозвратов = Документы.АктРассмотренияВозврата.ДокументыВозвратаОтПокупателяПоАРВ(СсылкаНаДокумент, "Проведен");
	
	Если ТаблицаВозвратов.Количество() > 0 Тогда
		СтатусВозвратаОтПокупателяПоАРВ = ТаблицаВозвратов[0].СтатусДокумента;
	КонецЕсли;
	
	Возврат СтатусВозвратаОтПокупателяПоАРВ;
	
КонецФункции

Функция ДокументыПеремещенияТоваровПоАРВ(СсылкаНаДокумент, ТекстУсловия = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ДокументыПеремещенияТоваровПоАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка,
		|	ПеремещениеТоваров.Номер,
		|	ПеремещениеТоваров.Дата,
		|	ПеремещениеТоваров.Проведен,
		|	ПеремещениеТоваров.ПометкаУдаления,
		|	ПеремещениеТоваров.СкладОтправитель,
		|	ПеремещениеТоваров.СкладПолучатель,
		|	ПеремещениеТоваров.СтатусДокумента
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И НЕ ПеремещениеТоваров.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|	И &ТекстУсловия";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ?(ЗначениеЗаполнено(ТекстУсловия), ТекстУсловия, "Истина")); 
	
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДокументыСписанияПоАРВ(СсылкаНаДокумент, ТекстУсловия = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ДокументыСписанияПоАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеТоваров.Ссылка,
		|	СписаниеТоваров.Номер,
		|	СписаниеТоваров.Дата,
		|	СписаниеТоваров.Проведен,
		|	СписаниеТоваров.ПометкаУдаления,
		|	СписаниеТоваров.Склад,
		|	СписаниеТоваров.СтатусДокумента
		|ИЗ
		|	Документ.СписаниеТоваров КАК СписаниеТоваров
		|ГДЕ
		|	СписаниеТоваров.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И НЕ СписаниеТоваров.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|	И &ТекстУсловия";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ?(ЗначениеЗаполнено(ТекстУсловия), ТекстУсловия, "Истина")); 
	
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДокументыРТУПоАРВ(СсылкаНаДокумент, ТекстУсловия = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ДокументыРТУПоАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.Проведен,
		|	РеализацияТоваровУслуг.ПометкаУдаления,
		|	РеализацияТоваровУслуг.Склад,
		|	РеализацияТоваровУслуг.СтатусДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И НЕ РеализацияТоваровУслуг.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|	И &ТекстУсловия";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ?(ЗначениеЗаполнено(ТекстУсловия), ТекстУсловия, "Истина")); 
	
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДокументыПереоценкиПоАРВ(СсылкаНаДокумент, ТекстУсловия = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ДокументыПереоценкиПоАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПерестикеровкаПереоценка.Ссылка,
		|	ПерестикеровкаПереоценка.Номер,
		|	ПерестикеровкаПереоценка.Дата,
		|	ПерестикеровкаПереоценка.Проведен,
		|	ПерестикеровкаПереоценка.ПометкаУдаления,
		|	ПерестикеровкаПереоценка.ВидОперации,
		|	ПерестикеровкаПереоценка.Склад,
		|	ПерестикеровкаПереоценка.СкладОприходования,
		|	ПерестикеровкаПереоценка.СтатусДокумента
		|ИЗ
		|	Документ.ПерестикеровкаПереоценка КАК ПерестикеровкаПереоценка
		|ГДЕ
		|	ПерестикеровкаПереоценка.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И НЕ ПерестикеровкаПереоценка.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|	И &ТекстУсловия";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ?(ЗначениеЗаполнено(ТекстУсловия), ТекстУсловия, "Истина")); 
	
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДокументыЭППоАРВ(СсылкаНаДокумент, ТекстУсловия = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ДокументыЭППоАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронноеПисьмо.Ссылка,
		|	ЭлектронноеПисьмо.Номер,
		|	ЭлектронноеПисьмо.Дата,
		|	ЭлектронноеПисьмо.Проведен,
		|	ЭлектронноеПисьмо.ПометкаУдаления,
		|	ЭлектронноеПисьмо.Тема,
		|	ЭлектронноеПисьмо.Кому,
		|	ЭлектронноеПисьмо.СтатусПисьма,
		|	ЭлектронноеПисьмо.ДатаТранспорта
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И НЕ ЭлектронноеПисьмо.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|	И &ТекстУсловия";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ?(ЗначениеЗаполнено(ТекстУсловия), ТекстУсловия, "Истина")); 
	
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДокументыВозвратаПоставщикуПоАРВ(СсылкаНаДокумент, ТекстУсловия = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ДокументыВозвратаПоставщикуПоАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка,
		|	ВозвратТоваровПоставщику.Номер,
		|	ВозвратТоваровПоставщику.Дата,
		|	ВозвратТоваровПоставщику.Проведен,
		|	ВозвратТоваровПоставщику.ПометкаУдаления,
		|	ВозвратТоваровПоставщику.Склад,
		|	ВозвратТоваровПоставщику.СтатусДокумента
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ГДЕ
		|	ВозвратТоваровПоставщику.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И НЕ ВозвратТоваровПоставщику.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|	И НЕ ВозвратТоваровПоставщику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратПоставщику.МФП)
		|	И &ТекстУсловия";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ?(ЗначениеЗаполнено(ТекстУсловия), ТекстУсловия, "Истина")); 
	
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДокументыКорректировкиДолгаПоАРВ(СсылкаНаДокумент, ТекстУсловия = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ДокументыКорректировкиДолгаПоАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаДолга.Ссылка,
		|	КорректировкаДолга.Номер,
		|	КорректировкаДолга.Дата,
		|	КорректировкаДолга.Проведен,
		|	КорректировкаДолга.ПометкаУдаления,
		|	КорректировкаДолга.СуммаОборота
		|ПОМЕСТИТЬ втДокументы
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И НЕ КорректировкаДолга.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|	И &ТекстУсловия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаДолгаСуммыДолга.Ссылка КАК Ссылка,
		|	СУММА(КорректировкаДолгаСуммыДолга.Сумма) КАК Сумма
		|ПОМЕСТИТЬ втСуммыДолга
		|ИЗ
		|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолгаСуммыДолга
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументы КАК втДокументы
		|		ПО (втДокументы.Ссылка = КорректировкаДолгаСуммыДолга.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаДолгаСуммыДолга.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаДолга.Ссылка,
		|	КорректировкаДолга.Номер,
		|	КорректировкаДолга.Дата,
		|	КорректировкаДолга.Проведен,
		|	КорректировкаДолга.ПометкаУдаления,
		|	ЕСТЬNULL(втСуммыДолга.Сумма, 0) КАК Сумма
		|ИЗ
		|	втДокументы КАК КорректировкаДолга
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыДолга КАК втСуммыДолга
		|		ПО (втСуммыДолга.Ссылка = КорректировкаДолга.Ссылка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ?(ЗначениеЗаполнено(ТекстУсловия), ТекстУсловия, "Истина")); 
	
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДокументыПоАРВ(СсылкаНаДокумент, ТекстУсловия = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ДокументыПоАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ИменаТаблиц = Новый Массив;
	Для каждого МД ИЗ Метаданные.Документы Цикл
		Если МД.Реквизиты.Найти("АктРассмотренияВозврата") <> Неопределено Тогда
			ИменаТаблиц.Добавить(МД.Имя);
		КонецЕсли;		
	КонецЦикла;
	
	Шаблон = "Выбрать Ссылка Из Документ.&ИмяТаблицы Где АктРассмотренияВозврата = &СсылкаНаДокумент И &ТекстУсловия";
	Шаблон = СтрЗаменить(Шаблон, "&ТекстУсловия", ?(ЗначениеЗаполнено(ТекстУсловия), ТекстУсловия, "Истина")); 
	
	ТекстЗапроса = "";
	Для каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		Кусок = СтрЗаменить(Шаблон, "&ИмяТаблицы",ИмяТаблицы);
		
		ТекстЗапроса = ТекстЗапроса + Кусок +Символы.ПС;
		
		Если ИменаТаблиц.Найти(ИмяТаблицы) <> ИменаТаблиц.Количество() - 1 Тогда
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + " Объединить все " + Символы.ПС;
		КонецЕсли; 
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

#КонецОбласти

Функция СкладВозвратовОстаткаПартииНоменклатуры(Номенклатура, СтрокаПрихода, Дата, СкладыОтбор = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_СкладВозвратовОстаткаПартииНоменклатуры";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СкладВозвратов = Неопределено;
	
	Если Не ЗначениеЗаполнено(СкладыОтбор) Тогда
		МассивСкладов = Новый Массив;
	ИначеЕсли ТипЗнч(СкладыОтбор) = Тип("СправочникСсылка.Склады") Тогда
		МассивСкладов = Новый Массив;
	    МассивСкладов.Добавить(СкладыОтбор);
	ИначеЕсли ТипЗнч(СкладыОтбор) = Тип("Массив") Тогда
		МассивСкладов = СкладыОтбор;
	Иначе
		Возврат СкладВозвратов;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартииТоваровОстатки.Склад
		|ИЗ
		|	РегистрНакопления.ПартииТоваров.Остатки(
		|			&Дата,
		|			СтрокаПрихода = &СтрокаПрихода
		|				И Номенклатура = &Номенклатура
		|				И (Склад В (&МассивСкладов)
		|					ИЛИ &ВсеСклады)) КАК ПартииТоваровОстатки
		|ГДЕ
		|	ПартииТоваровОстатки.Склад.Возвраты";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СтрокаПрихода", СтрокаПрихода);
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	Запрос.УстановитьПараметр("ВсеСклады", МассивСкладов.Количество() = 0);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СкладВозвратов = Выборка.Склад;
	КонецЕсли;
	
	Возврат СкладВозвратов;
	
КонецФункции

Функция СкладПриходаПоДокументам(СсылкаНаДокумент, ДатаПроверки = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_СкладПриходаПоДокументам";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СкладПриходаПоДокументам = Неопределено;
	
	Если Не ЗначениеЗаполнено(ДатаПроверки) Тогда
		ДатаПроверки = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВозвратТоваровОтПокупателя.Склад,
		|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка,
		|	ВозвратТоваровОтПокупателя.Дата КАК ДатаДокумента
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И ВозвратТоваровОтПокупателя.Дата < &Дата
		|	И ВозвратТоваровОтПокупателя.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеТоваров.СкладПолучатель,
		|	ПеремещениеТоваров.Ссылка,
		|	ПеремещениеТоваров.Дата
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И НЕ ПеремещениеТоваров.СкладПолучатель.ТоварыВПути
		|	И ПеремещениеТоваров.Дата < &Дата
		|	И ПеремещениеТоваров.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДокумента УБЫВ";
	
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СкладПриходаПоДокументам = Выборка.Склад;		
	КонецЕсли;
	
	Возврат СкладПриходаПоДокументам;	
	
КонецФункции

Функция ОрганизацияОстаткаПартииНоменклатуры(Номенклатура, СтрокаПрихода, Дата, СкладыОтбор = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ОрганизацияОстаткаПартииНоменклатуры";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Организация = Неопределено;
	
	Если Не ЗначениеЗаполнено(СкладыОтбор) Тогда
		МассивСкладов = Новый Массив;
	ИначеЕсли ТипЗнч(СкладыОтбор) = Тип("СправочникСсылка.Склады") Тогда
		МассивСкладов = Новый Массив;
	    МассивСкладов.Добавить(СкладыОтбор);
	ИначеЕсли ТипЗнч(СкладыОтбор) = Тип("Массив") Тогда
		МассивСкладов = СкладыОтбор;
	Иначе
		Возврат Организация;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартииТоваровОстатки.Организация
		|ИЗ
		|	РегистрНакопления.ПартииТоваров.Остатки(
		|			&Дата,
		|			СтрокаПрихода = &СтрокаПрихода
		|				И Номенклатура = &Номенклатура
		|				И (Склад В (&МассивСкладов)
		|					ИЛИ &ВсеСклады)) КАК ПартииТоваровОстатки
		|ГДЕ
		|	ПартииТоваровОстатки.Склад.Возвраты";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СтрокаПрихода", СтрокаПрихода);
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	Запрос.УстановитьПараметр("ВсеСклады", МассивСкладов.Количество() = 0);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Организация;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция СтатусПроверкиБухгалтерией(СтатусПроверкиДокументовПокупателя, СтатусПроверкиДокументовПоставщика) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_СтатусПроверкиБухгалтерией";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтатусПроверкиБухгалтерией = Неопределено;
	
	Если Не ЗначениеЗаполнено(СтатусПроверкиДокументовПокупателя)
		И (Не ЗначениеЗаполнено(СтатусПроверкиДокументовПоставщика)
		ИЛИ СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.ПроверкаНеНужна) Тогда
		
		СтатусПроверкиБухгалтерией = Перечисления.АРВ_СтатусыПроверкиБухгалтерией.ПроверкаНеЗапущена;
		
	ИначеЕсли СтатусПроверкиДокументовПокупателя = Перечисления.АРВ_СтатусыПроверкиДокументовПокупателя.НеПроверены
		ИЛИ  СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.НеПроверены Тогда
		
		СтатусПроверкиБухгалтерией = Перечисления.АРВ_СтатусыПроверкиБухгалтерией.НеобходимоПроверить;
		
	ИначеЕсли СтатусПроверкиДокументовПокупателя = Перечисления.АРВ_СтатусыПроверкиДокументовПокупателя.Запрос
		ИЛИ  СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.Запрос Тогда
		
		СтатусПроверкиБухгалтерией = Перечисления.АРВ_СтатусыПроверкиБухгалтерией.ПроисходитПроверка;
		
	ИначеЕсли СтатусПроверкиДокументовПокупателя = Перечисления.АРВ_СтатусыПроверкиДокументовПокупателя.Проверены
		И  (СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.Проверены
		ИЛИ  СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.ПроверкаНеНужна) Тогда
		
		СтатусПроверкиБухгалтерией = Перечисления.АРВ_СтатусыПроверкиБухгалтерией.Выполнено;
		
	КонецЕсли;
	
	Возврат СтатусПроверкиБухгалтерией;
	

КонецФункции

Функция ПродолжительностьНахожденияВСтатусе(СсылкаНаДокумент) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ПродолжительностьНахожденияВСтатусе";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	
	ПродолжительностьНахожденияВСтатусе = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(РАЗНОСТЬДАТ(МАКСИМУМ(СобытияАктовРассмотренияВозвратаСрезПоследних.Период), &ТекущаяДата, МИНУТА), 0) КАК ПродолжительностьНахожденияВСтатусе
		|ИЗ
		|	РегистрСведений.СобытияАктовРассмотренияВозврата.СрезПоследних(
		|			,
		|			АктРассмотренияВозврата = &АктРассмотренияВозврата
		|				И СтатусДокумента = &СтатусДокумента
		|				И НЕ ИдентификаторСобытияПрошлойСменыСтатуса = &ПустаяСтрока) КАК СобытияАктовРассмотренияВозвратаСрезПоследних";
	
	Запрос.УстановитьПараметр("СтатусДокумента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "СтатусДокумента"));
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПродолжительностьНахожденияВСтатусе = Выборка.ПродолжительностьНахожденияВСтатусе;
	КонецЕсли;
	
	Возврат ПродолжительностьНахожденияВСтатусе;
	
КонецФункции

Функция ПоставщикПоДаннымПартий(Документ) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ПоставщикПоДаннымПартий";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ПоставщикПоДаннымПартий = Неопределено;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктРассмотренияВозврата") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	isnull(АктРассмотренияВозвратаТовары.СтрокаПрихода.Приход.Контрагент, СтрокаПрихода.ТорговаяТочка.Владелец) КАК Контрагент
		|ИЗ
		|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
		|ГДЕ
		|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
		|	И АктРассмотренияВозвратаТовары.НомерСтроки = 1";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПоставщикПоДаннымПартий = Выборка.Контрагент;
		КонецЦикла;
		
	ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументОбъект.АктРассмотренияВозврата")
		И Документ.Товары.Количество() > 0 И ЗначениеЗаполнено(Документ.Товары[0].СтрокаПрихода) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Товары[0].СтрокаПрихода, "Приход.Контрагент, ТорговаяТочка.Владелец");
		
		ПоставщикПоДаннымПартий = ?(ЗначениеЗаполнено(Реквизиты.ПриходКонтрагент), Реквизиты.ПриходКонтрагент, Реквизиты.ТорговаяТочкаВладелец);
		
	КонецЕсли;
		
		
	Возврат ПоставщикПоДаннымПартий;
	
КонецФункции

Функция СтатусПройденАРВ(СсылкаНаДокумент, СтатусДокумента) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_СтатусПройденАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Первые 1
		|	СобытияАктовРассмотренияВозврата.АктРассмотренияВозврата
		|ИЗ
		|	РегистрСведений.СобытияАктовРассмотренияВозврата КАК СобытияАктовРассмотренияВозврата
		|ГДЕ
		|	СобытияАктовРассмотренияВозврата.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И СобытияАктовРассмотренияВозврата.СтатусДокумента = &СтатусДокумента";
	
	Запрос.УстановитьПараметр("АктРассмотренияВозврата", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("СтатусДокумента", СтатусДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция ТекстОшибкиЕстьЛогинКонтрагента() Экспорт
	Возврат "Для выбранного контрагента задан логин. Для покупателей с логинами необходимо создавать акты на сайте.";	
КонецФункции

Функция ДоговорКонтрагента(Контрагент, Организация, ВидДоговора, ТекстУсловия = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ДоговорКонтрагента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И &ТекстУсловия"
	);
	Запрос.УстановитьПараметр("Владелец", 	 Контрагент);
	Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ?(ЗначениеЗаполнено(ТекстУсловия), ТекстУсловия, "Истина")); 
	
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//ХудинВВ XX-2346 23052019
Функция АктВЗонеОтветственностиКРО(Ответственный) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_АктВЗонеОтветственностиКРО";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ГруппаДоступа = Неопределено;
	Если ЗначениеЗаполнено(Ответственный) И ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
		ГруппаДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ответственный, "ГруппаДоступаКСтатусамПроцессаВозвратаОтПокупателя");												
	ИначеЕсли ЗначениеЗаполнено(Ответственный) И ТипЗнч(Ответственный) = Тип("СправочникСсылка.ГруппыДоступаКСтатусамПроцессаВозвратаОтПокупателя") Тогда
		ГруппаДоступа = Ответственный;
	КонецЕсли;
	
	ОтветственныйКРО = ГруппаДоступа = Справочники.ГруппыДоступаКСтатусамПроцессаВозвратаОтПокупателя.КРО;
	
	Возврат ОтветственныйКРО;
	
КонецФункции

//ХудинВВ XX-2346 23052019
Функция МожноРедактироватьАРВВЗонеОтветственностиКРО(АктСсылка) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_МожноРедактироватьАРВВЗонеОтветственностиКРО";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	МожноРедактировать = Истина;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктСсылка, "Ответственный");
	
	Если АктВЗонеОтветственностиКРО(Реквизиты.Ответственный) Тогда
		
		ТекГруппаДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "ГруппаДоступаКСтатусамПроцессаВозвратаОтПокупателя");		
		
		Если ТекГруппаДоступа = Справочники.ГруппыДоступаКСтатусамПроцессаВозвратаОтПокупателя.КРО
			ИЛИ РольДоступна("ПолныеПрава") Тогда
			МожноРедактировать = Истина;
		Иначе
			МожноРедактировать = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат МожноРедактировать;
	
КонецФункции

#КонецОбласти

#Область Печать

Функция ТабличныйДокументПечатнойФормы(ИмяМакета, АктСсылка) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ТабличныйДокументПечатнойФормы";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	//////////////////////////////////////////////////////////////////////////
	
	РасшифровкаВПФ =  ЗаменяющаяВПФ(ИмяМакета, Документы.АктРассмотренияВозврата.ПустаяСсылка());
	
	ТабДокумент = Неопределено;
	Если РасшифровкаВПФ = Неопределено Тогда
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "АктПриемаПередачи" Тогда
			ТабДокумент = Документы.АктРассмотренияВозврата.ПечатьАктаПриемаПередачиВозврата(АктСсылка);
		ИначеЕсли ИмяМакета = "АктПриемаПередачиРозничный" Тогда
			//ХудинВВ XX-2635 05072019
			ТабДокумент = Документы.АктРассмотренияВозврата.ПечатьАктаПриемаПередачиВозврата(АктСсылка, 2);
		ИначеЕсли  ИмяМакета = "Претензия" Тогда
			ТабДокумент = Документы.АктРассмотренияВозврата.ПечатьПретензии(АктСсылка);
		КонецЕсли;
		
	Иначе
		
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(АктСсылка, РасшифровкаВПФ);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ЗаменяющаяВПФ(ИмяПФ, ПустаяСсылкаДокумента)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ЗаменяющаяВПФ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	//////////////////////////////////////////////////////////////////////////
	
	ЗаменяющаяВПФ = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
	|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
	|	ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки КАК ВидОбработки,
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработкиПечатнаяФорма
	|	И НЕ ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма ССЫЛКА Справочник.ВнешниеОбработки
	|	И ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма = &ЗаменяемаяПечатнаяФорма";
	Запрос.УстановитьПараметр("Ссылка", ПустаяСсылкаДокумента);
	Запрос.УстановитьПараметр("ЗаменяемаяПечатнаяФорма", ИмяПФ);
	Запрос.УстановитьПараметр("ВидОбработкиПечатнаяФорма", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаменяющаяВПФ = Новый Структура("ВидПечатнойФормы, СсылкаНаВнешнююОбработку, ЗаменяемаяПечатнаяФорма, НомерСтроки", Выборка.ВидОбработки,Выборка.Ссылка, Выборка.ЗаменяемаяПечатнаяФорма, Выборка.НомерСтроки);
	КонецЕсли;
	
	Возврат ЗаменяющаяВПФ;
	
КонецФункции


Функция ПечатьТОРГ12(вхСсылкаНаДокумент, Макет = Неопределено) Экспорт
	
	мВалютаРегламентированногоУчета = константы.ВалютаРегламентированногоУчета.Получить();	
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          вхСсылкаНаДокумент.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", вхСсылкаНаДокумент.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктРассмотренияВозврата.удалитьНомерНакладнойКлиента КАК Номер,
	|	АктРассмотренияВозврата.ДатаНакладнойКлиента КАК ДатаДокумента,
	|	АктРассмотренияВозврата.Организация,
	|	АктРассмотренияВозврата.Контрагент КАК ЮрФизЛицо,
	|	АктРассмотренияВозврата.Контрагент КАК Поставщик,
	|	АктРассмотренияВозврата.Контрагент КАК Контрагент,
	|	АктРассмотренияВозврата.Контрагент КАК Руководители,
	|	АктРассмотренияВозврата.Контрагент КАК Грузоотправитель,
	|	АктРассмотренияВозврата.Организация КАК Грузополучатель,
	|	АктРассмотренияВозврата.Контрагент.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	АктРассмотренияВозврата.Организация КАК Покупатель,
	|	АктРассмотренияВозврата.Контрагент.Код КАК КодКлиента,
	|	АктРассмотренияВозврата.Организация КАК Плательщик,
	|	NULL КАК Сделка,
	|	NULL КАК СделкаНомер,
	|	NULL КАК СделкаДата,
	|	АктРассмотренияВозврата.ДокументПродажи КАК Основание,
	|	АктРассмотренияВозврата.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ВедениеВзаиморасчетовПоДокументам,
	|	АктРассмотренияВозврата.ДокументПродажи.Номер КАК ОснованиеНомер,
	|	АктРассмотренияВозврата.ДокументПродажи.Дата КАК ОснованиеДата,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	АктРассмотренияВозврата.Склад.Подразделение КАК Подразделение,
	|	"""" КАК ВалютаДокумента,
	|	1 КАК Курс,
	|	1 КАК Кратность,
	|	АктРассмотренияВозврата.Контрагент.РаботаетСНДС КАК УчитыватьНДС,
	|	АктРассмотренияВозврата.Контрагент.РаботаетСНДС КАК СуммаВключаетНДС,
	|	"""" КАК ОтпускРазрешил,
	|	"""" КАК ОтпускПроизвел,
	|	"""" КАК ДоверенностьНомер,
	|	"""" КАК ДоверенностьДата,
	|	"""" КАК ДоверенностьВыдана,
	|	"""" КАК ДоверенностьЧерезКого,
	|	"""" КАК АдресДоставки,
	|	АктРассмотренияВозврата.Контрагент.РаботаетСНДС КАК КонтрагентУчитыватьНДС
	|ИЗ
	|	Документ.АктРассмотренияВозврата КАК АктРассмотренияВозврата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО (ОтветственныеЛица.СтруктурнаяЕдиница = АктРассмотренияВозврата.Склад)
	|ГДЕ
	|	АктРассмотренияВозврата.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("УчитыватьНДС"   , Шапка.КонтрагентУчитыватьНДС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК ТоварНаименованиеКраткое,
	|	"""" КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВложенныйЗапрос.Номенклатура.Изготовитель.Наименование КАК ТоварПроизводительНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ВидУпаковки,
	|	1 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0
	|			ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	ВложенныйЗапрос.Комм_с_Сайта КАК Комм_с_Сайта,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ЛОЖЬ КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка КАК Метка,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки + ВложенныйЗапрос.ПроцентАвтоматическихСкидок КАК Скидка
	|ИЗ
	|	(ВЫБРАТЬ
	|		АктРассмотренияВозврата.Номенклатура КАК Номенклатура,
	|		АктРассмотренияВозврата.Коэффициент КАК Коэффициент,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения КАК ЕдиницаИзмеренияМест,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения.Коэффициент КАК КоэффициентМест,
	|		NULL КАК Характеристика,
	|		NULL КАК Серия,
	|		ЕСТЬNULL(ЗаявкаПокупателя.КомментарийИзСайта, """") КАК Комм_с_Сайта,
	|		ВЫБОР
	|			КОГДА &УчитыватьНДС
	|				ТОГДА АктРассмотренияВозврата.Номенклатура.СтавкаНДС
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОНЕЦ КАК СтавкаНДС,
	|		АктРассмотренияВозврата.Цена КАК Цена,
	|		0 КАК ПроцентСкидкиНаценки,
	|		0 КАК ПроцентАвтоматическихСкидок,
	|		СУММА(АктРассмотренияВозврата.КоличествоПлан) КАК Количество,
	|		СУММА(АктРассмотренияВозврата.КоличествоПлан) КАК КоличествоМест,
	|		СУММА(АктРассмотренияВозврата.СуммаПлан) КАК Сумма,
	|		СУММА(ВЫБОР
	|				КОГДА &УчитыватьНДС
	|					ТОГДА АктРассмотренияВозврата.СуммаНДСПлан
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаНДС,
	|		МИНИМУМ(АктРассмотренияВозврата.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозврата
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателя
	|			ПО АктРассмотренияВозврата.СтрокаЗаявки = ЗаявкаПокупателя.СтрокаЗаявки
	|				И (НЕ АктРассмотренияВозврата.СтрокаЗаявки = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.ПустаяСсылка))
	|	ГДЕ
	|		АктРассмотренияВозврата.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		АктРассмотренияВозврата.Номенклатура,
	|		АктРассмотренияВозврата.Коэффициент,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения,
	|		ЕСТЬNULL(ЗаявкаПокупателя.КомментарийИзСайта, """"),
	|		АктРассмотренияВозврата.СтавкаНДС,
	|		АктРассмотренияВозврата.Цена,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения.Коэффициент,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения) КАК ВложенныйЗапрос";
	
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабДокумент.ТолькоПросмотр          = Истина;
	ТабДокумент.КоличествоЭкземпляров   = 2;
	
	Макет = ПолучитьОбщийМакет("ТОРГ12");
	ОбластьМакета = Макет.ПолучитьОбласть("КодКлиента");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Попытка
		ОбластьМакета = Макет.ПолучитьОбласть("ШК");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	Исключение
	КонецПопытки;
	
	Попытка
		ОбластьМакета = Макет.ПолучитьОбласть("НомерДок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	Исключение
	КонецПопытки;	
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Рисунки.Очистить();
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		ОбластьМакета.Параметры.АдресДоставки = СокрЛП(Шапка.АдресДоставки);
	Иначе
		ОбластьМакета.Параметры.АдресДоставки = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	
	ОснованиеДатаПечать = Формат(Шапка.ОснованиеДата, "ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.Основание 		=  "возврат по накладной № "+Шапка.ОснованиеНомер + " от " + ОснованиеДатаПечать;
	ОбластьМакета.Параметры.ОснованиеНомер = Шапка.ОснованиеНомер;
	ОбластьМакета.Параметры.ОснованиеДата  = ОснованиеДатаПечать;
	
	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОГрузоотправитель.КодПоОКПО;
	ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
	ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПоставщикПоОКПО       = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО      = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	НомерСтраницы   = 1;
	
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;
	
	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСуммаСНДС   = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	Ном              = 0;
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Ном           = Ном + 1;
		
		Если Шапка.КонтрагентУчитыватьНДС Тогда
			//Пеерсчитаем сумму ндс, тк в документе она может быть не заполнена
			ВыборкаСтрок.СуммаНДС =  УчетНДС.РассчитатьСуммуНДС(ВыборкаСтрок.Сумма, Истина, Истина, ВыборкаСтрок.СтавкаНДС);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
		
		Если НЕ ПустаяСтрока(СокрЛП(ВыборкаСтрок.ТоварНаименование)) Тогда
			ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		Иначе
			ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименованиеКраткое);
		КонецЕсли;	
		Если ВыборкаСтрок.Номенклатура.Услуга Тогда 
			ВыборкаСтрок.ТоварНаименование = ВыборкаСтрок.Номенклатура.Наименование;
			ВыборкаСтрок.ТоварНаименованиеКраткое = ВыборкаСтрок.Номенклатура.Наименование;
			ВыборкаСтрок.БазоваяЕдиницаКодПоОКЕИ = "--";
			ВыборкаСтрок.ЕдиницаИзмерения = "--";
			ВыборкаСтрок.БазоваяЕдиницаНаименование = "--";
			ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.Номенклатура.Наименование; 
		Иначе 	
			ОбластьМакета.Параметры.ТоварНаименование = ?(ПустаяСтрока(ВыборкаСтрок.ТоварАртикул), "", ВыборкаСтрок.ТоварАртикул + " || ") + ТоварНаименование + ?(ПустаяСтрока(ВыборкаСтрок.ТоварПроизводительНаименование), "", " || " + ВыборкаСтрок.ТоварПроизводительНаименование);
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			МассаБрутто = 0;
		Иначе
			МассаБрутто = ВыборкаСтрок.МассаБрутто;
			МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
		КонецЕсли;
		
		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
		
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС  - СуммаНДС;
		
		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
		
		Если Шапка.СуммаВключаетНДС
			Или ВыборкаСтрок.ЕстьСкидкиПоСтроке Тогда
			ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		Иначе
			ОбластьМакета.Параметры.Цена = ВыборкаСтрок.Цена;
		КонецЕсли;
		
		Если Ном = 1 Тогда // первая срока
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;		
			
			Если Ном <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// очистим итоги по странице
				ИтогоМассаБруттоНаСтранице = 0;
				ИтогоМестНаСтранице        = 0;
				ИтогоКоличествоНаСтранице  = 0;
				ИтогоСуммаНаСтранице       = 0;
				ИтогоНДСНаСтранице         = 0;
				ИтогоСуммаСНДСНаСтранице   = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;		
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;
		
		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
	
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
	ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень     = """"+Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1)+"""";
	ОбластьМакета.Параметры.ДатаДокументаМесяц    = Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1);
	ОбластьМакета.Параметры.ДатаДокументаГод      = Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель);	
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
	// Главный бухгалтер
	ОбластьМакета.Параметры.ФИОГлавБухгалтера = Бухгалтер;
	
	// Отпуск товара разрешил
	Если НЕ ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
		ФИООтпускРазрешил       = Руководитель;
		ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	Иначе
		ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица    = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента, вхСсылкаНаДокумент.Организация);
		ФамилияИмяОтчествоОтпускРазрешил = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускРазрешил                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
		ДолжностьОтпускРазрешил          = ПодразделениеДолжностьФизЛица.Должность;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ФИОРуководителя       = ФИООтпускРазрешил;
	ОбластьМакета.Параметры.ДолжностьРуководителя = ДолжностьОтпускРазрешил;
	
	// Отпуск товара произвел
	Если НЕ ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, вхСсылкаНаДокумент.Организация);
	Иначе
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента, вхСсылкаНаДокумент.Организация);
	КонецЕсли;
	
	ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
	ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
	
	ОбластьМакета.Параметры.ФИОКладовщика       = ФИООтпускПроизвел;
	ОбластьМакета.Параметры.ДолжностьКладовщика = ДолжностьОтпускПроизвел;
	
	// Доверенность
	ОбластьМакета.Параметры.ДоверенностьНомер     = Шапка.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДоверенностьДата      = Формат(Шапка.ДоверенностьДата, "ДФ='дд ММММ гггг'");
	ОбластьМакета.Параметры.ДоверенностьВыдана    = Шапка.ДоверенностьВыдана;
	ОбластьМакета.Параметры.ДоверенностьЧерезКого = Шапка.ДоверенностьЧерезКого;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
	КонецЕсли;
	
	Если ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;
	
	ПоследняяЦифра = Прав(Строка(НомерСтраницы), 1);
	Суффикс = ?(ПоследняяЦифра = "1", " листе", " листах"); 
	ОбластьМакета.Параметры.КоличествоЛистовВПриложении = Строка(НомерСтраницы) + Суффикс;
	
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьСчетаФактуры(вхСсылкаНаДокумент, Макет = Неопределено) Экспорт

	мВалютаРегламентированногоУчета = константы.ВалютаРегламентированногоУчета.Получить();	
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          вхСсылкаНаДокумент.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", вхСсылкаНаДокумент.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаДокумента"   , ПараметрыСеанса.ВалютаРубль);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктРассмотренияВозврата.ДатаНакладнойКлиента КАК Дата,
	|	АктРассмотренияВозврата.НомерНакладнойКлиента КАК Номер,
	|	АктРассмотренияВозврата.ДатаНакладнойКлиента КАК ДатаДокумента,
	|	АктРассмотренияВозврата.Организация,
	|	АктРассмотренияВозврата.Организация.КПП КАК ОрганизацияКПП,
	|	АктРассмотренияВозврата.Контрагент КАК ЮрФизЛицо,
	|	АктРассмотренияВозврата.Контрагент КАК Поставщик,
	|	АктРассмотренияВозврата.Контрагент КАК Контрагент,
	|	АктРассмотренияВозврата.Контрагент КАК Руководители,
	|	АктРассмотренияВозврата.Контрагент КАК Грузоотправитель,
	|	АктРассмотренияВозврата.Организация КАК Грузополучатель,
	|	АктРассмотренияВозврата.Контрагент.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	АктРассмотренияВозврата.Организация КАК Покупатель,
	|	АктРассмотренияВозврата.Контрагент.Код КАК КодКлиента,
	|	АктРассмотренияВозврата.Организация КАК Плательщик,
	|	NULL КАК Сделка,
	|	NULL КАК СделкаНомер,
	|	NULL КАК СделкаДата,
	|	АктРассмотренияВозврата.ДокументПродажи КАК Основание,
	|	АктРассмотренияВозврата.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ВедениеВзаиморасчетовПоДокументам,
	|	АктРассмотренияВозврата.ДокументПродажи.Номер КАК ОснованиеНомер,
	|	АктРассмотренияВозврата.ДокументПродажи.Дата КАК ОснованиеДата,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	АктРассмотренияВозврата.Склад.Подразделение КАК Подразделение,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|	&ВалютаДокумента КАК Валюта,
	|	1 КАК Курс,
	|	1 КАК Кратность,
	|	АктРассмотренияВозврата.Контрагент.РаботаетСНДС КАК УчитыватьНДС,
	|	АктРассмотренияВозврата.Контрагент.РаботаетСНДС КАК СуммаВключаетНДС,
	|	"""" КАК ОтпускРазрешил,
	|	"""" КАК ОтпускПроизвел,
	|	"""" КАК ДоверенностьНомер,
	|	"""" КАК ДоверенностьДата,
	|	"""" КАК ДоверенностьВыдана,
	|	"""" КАК ДоверенностьЧерезКого,
	|	"""" КАК АдресДоставки,
	|	АктРассмотренияВозврата.Контрагент.РаботаетСНДС КАК КонтрагентУчитыватьНДС
	|ИЗ
	|	Документ.АктРассмотренияВозврата КАК АктРассмотренияВозврата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО (ОтветственныеЛица.СтруктурнаяЕдиница = АктРассмотренияВозврата.Склад)
	|ГДЕ
	|	АктРассмотренияВозврата.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("УчитыватьНДС"   , Шапка.КонтрагентУчитыватьНДС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК ТоварНаименованиеКраткое,
	|	"""" КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВложенныйЗапрос.Номенклатура.Изготовитель.Наименование КАК ТоварПроизводительНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ВидУпаковки,
	|	1 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0
	|			ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	ВложенныйЗапрос.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапрос.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ВложенныйЗапрос.НомерГТД КАК НомерГТД,
	|	Представление(ВложенныйЗапрос.НомерГТД) КАК ПредставлениеГТД,
	|	ВложенныйЗапрос.СтранаПроисхождения.Наименование КАК ПредставлениеСтраны,
	|	ВложенныйЗапрос.Комм_с_Сайта КАК Комм_с_Сайта,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ЛОЖЬ КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка КАК Метка,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки + ВложенныйЗапрос.ПроцентАвтоматическихСкидок КАК Скидка
	|ИЗ
	|	(ВЫБРАТЬ
	|		АктРассмотренияВозврата.Номенклатура КАК Номенклатура,
	|		АктРассмотренияВозврата.Коэффициент КАК Коэффициент,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения КАК ЕдиницаИзмеренияМест,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения.Коэффициент КАК КоэффициентМест,
	|		NULL КАК Характеристика,
	|		NULL КАК Серия,
	|		АктРассмотренияВозврата.СтрокаПрихода.СтранаПроисхождения КАК СтранаПроисхождения,
	|		АктРассмотренияВозврата.СтрокаПрихода.НомерГТД КАК НомерГТД,
	|		ЕСТЬNULL(ЗаявкаПокупателя.КомментарийИзСайта, """") КАК Комм_с_Сайта,
	|		ВЫБОР
	|			КОГДА &УчитыватьНДС
	|				ТОГДА АктРассмотренияВозврата.Номенклатура.СтавкаНДС
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОНЕЦ КАК СтавкаНДС,
	|		АктРассмотренияВозврата.Цена КАК Цена,
	|		0 КАК ПроцентСкидкиНаценки,
	|		0 КАК ПроцентАвтоматическихСкидок,
	|		СУММА(АктРассмотренияВозврата.КоличествоПлан) КАК Количество,
	|		СУММА(АктРассмотренияВозврата.КоличествоПлан) КАК КоличествоМест,
	|		СУММА(АктРассмотренияВозврата.СуммаПлан) КАК Сумма,
	|		СУММА(ВЫБОР
	|				КОГДА &УчитыватьНДС
	|					ТОГДА АктРассмотренияВозврата.СуммаНДСПлан
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаНДС,
	|		МИНИМУМ(АктРассмотренияВозврата.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозврата
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателя
	|			ПО АктРассмотренияВозврата.СтрокаЗаявки = ЗаявкаПокупателя.СтрокаЗаявки
	|				И (НЕ АктРассмотренияВозврата.СтрокаЗаявки = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.ПустаяСсылка))
	|	ГДЕ
	|		АктРассмотренияВозврата.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		АктРассмотренияВозврата.Номенклатура,
	|		АктРассмотренияВозврата.Коэффициент,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения,
	|		ЕСТЬNULL(ЗаявкаПокупателя.КомментарийИзСайта, """"),
	|		АктРассмотренияВозврата.СтавкаНДС,
	|		АктРассмотренияВозврата.Цена,
	|		АктРассмотренияВозврата.СтрокаПрихода.СтранаПроисхождения,
	|		АктРассмотренияВозврата.СтрокаПрихода.НомерГТД,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения.Коэффициент,
	|		АктРассмотренияВозврата.ЕдиницаИзмерения) КАК ВложенныйЗапрос";
	
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0; //13;
	ТабДокумент.ПолеСлева  	= 0;
	ТабДокумент.ПолеСнизу  	= 13; //0;
	ТабДокумент.ПолеСправа 	= 0;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.АвтоМасштаб	= Истина;
	
	Макет = ?(Макет <> Неопределено, Макет, ПолучитьОбщийМакет("СчетФактура1137"));
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ТипЗнч(Шапка.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Шапка.Покупатель) Тогда
		РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Шапка.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
		Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
			СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, Шапка.Дата);
			СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата);
		КонецЕсли;
	КонецЕсли;
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Рисунки.Очистить();
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
	
	// Поставщик
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		
	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: "	+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	
	ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет-фактура");
	ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
		
		
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
	?(Шапка.Грузоотправитель = "он же", Неопределено, Шапка.Грузоотправитель), Шапка.Дата);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель, Шапка.Дата);
	
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "
	+ ?(НЕ ЗначениеЗаполнено(Шапка.Грузоотправитель), 
	"--", 
	?(Шапка.Грузоотправитель = "он же", 
	Шапка.Грузоотправитель, 
	ФормированиеПечатныхФорм.ОписаниеОрганизации(
	СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,")));
	
	ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
	+ ?(НЕ ЗначениеЗаполнено(Шапка.Грузополучатель), 
	"--",
	ФормированиеПечатныхФорм.ОписаниеОрганизации(
	СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;

	СтрокаПоДокументу = "К платежно-расчетному документу №           от";
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	// Покупатель
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
	
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) 
		+ ?(ЗначениеЗаполнено(Шапка.ОрганизацияКПП), "/" + Шапка.ОрганизацияКПП, "");;
	
	ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код: "+ ?(ЗначениеЗаполнено(Шапка.Валюта), 
		Шапка.Валюта.НаименованиеПолное + ", " + Шапка.Валюта.Код, 
		"");		
			
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим строки таблицы
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросТовары.Количество();
	
	ЗапросТовары.Колонки.Добавить("СуммаБезНДС");
	ЗапросТовары.Колонки.Добавить("СуммаСНДС");

	Для Каждого Строчка Из ЗапросТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если Шапка.КонтрагентУчитыватьНДС Тогда
			//Пересчитаем сумму ндс, тк в документе она может быть не заполнена
			Строчка.СуммаНДС =  УчетНДС.РассчитатьСуммуНДС(Строчка.Сумма, Истина, Истина, Строчка.СтавкаНДС);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		//Если Шапка.Дата >= УчетНДС.НачалоДействияПостановления981() Тогда
		//	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ТоварКодТНВЭД)
		//		ИЛИ Строчка.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
		//		ОбластьМакета.Параметры.ТоварКодТНВЭД = "--";
		//	КонецЕсли;
		//КонецЕсли;
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Шапка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
		
		ОбластьМакета.Параметры.ТоварНаименование = ?(ПустаяСтрока(Строчка.ТоварАртикул), "", Строчка.ТоварАртикул + " ") + Строчка.ТоварНаименование;
		
		ОбластьМакета.Параметры.Стоимость = Строчка.СуммаСНДС - Строчка.СуммаНДС;
		ОбластьМакета.Параметры.Цена   	  = Строчка.Цена;
		
		ОбластьМакета.Параметры.Всего     = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
		
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Акциз = "без акциза";
		
		Если ВРег(Строка(Строчка.ПредставлениеСтраны)) = "РОССИЯ" 
			ИЛИ ВРег(Строка(Строчка.ПредставлениеСтраны)) = "РОССИЙСКАЯ ФЕДЕРАЦИЯ"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.СтраныМира.Россия Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		Иначе
			Если ЗначениеЗаполнено(Строчка.СтранаПроисхождения) Тогда
				ОбластьМакета.Параметры.ПредставлениеСтраны  = СокрЛП(Строчка.СтранаПроисхождения.Наименование);
			КонецЕсли;
		КонецЕсли; 
	
		// Проставляем прочерки в незаполненные графы в соответствии с Постановлением
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
			ОбластьМакета.Параметры.Количество = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
			ОбластьМакета.Параметры.Цена = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеСтраны) Тогда
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
		
	// Выводим строку "Всего к оплате"
	ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ЗапросТовары.Итог("СуммаБезНДС");
	Если НЕ Шапка.КонтрагентУчитыватьНДС Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ЗапросТовары.Итог("СуммаНДС");
	КонецЕсли;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ЗапросТовары.Итог("СуммаСНДС");
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	ТабДокумент.ВерхнийКолонтитул.Выводить          = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 1;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	//ТабДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаголовокДляПечати;
	//ТабДокумент.ВерхнийКолонтитул.ТекстСправа  = "Лист [&НомерСтраницы]";
	ТабДокумент.НижнийКолонтитул.ТекстСправа           = ЗаголовокДляПечати + ".Страница [&НомерСтраницы] из [&СтраницВсего]";

	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьАктРассмотренияВозврата(вхСсылкаНаДокумент) Экспорт
	
	Шапка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Штрихкод, Номер, Дата, Контрагент, Штрихкод, СуммаДокумента, ДокументПродажи.Номер, ДокументПродажи.Дата");
	
	Склад = Неопределено;
	Возвраты = Документы.АктРассмотренияВозврата.ДокументыВозвратаОтПокупателяПоАРВ(вхСсылкаНаДокумент);
	Если Возвраты.Количество() > 0 Тогда
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Возвраты[0].Склад, "ФизическийСклад");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктРассмотренияВозвратаТовары.Номенклатура,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование КАК Наименование,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул КАК Артикул,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Код,
		|	АктРассмотренияВозвратаТовары.КоличествоПлан КАК Количество,
		|	АктРассмотренияВозвратаТовары.Цена,
		|	АктРассмотренияВозвратаТовары.СуммаПлан КАК Сумма
		|ИЗ
		|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
		|ГДЕ
		|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаТовары = РезультатЗапроса.Выбрать();
	
	Макет 					= ПолучитьМакет("АктРассмотренияВозврата");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьИтого 			= Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");

	ТабДокумент  = Новый ТабличныйДокумент;
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ТолькоПросмотр          = Истина;
	ТабДокумент.КоличествоЭкземпляров   = 1;
	ТабДокумент.ОтображатьСетку			= Ложь;
	ТабДокумент.ОтображатьЗаголовки		= Ложь;
	
	ОснованиеДатаПечать = Формат(Шапка.Дата, "ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.Заголовок = "Акт рассмотрения возврата № "+Шапка.Номер + " от " + ОснованиеДатаПечать+"г.";
	ОбластьШапка.Параметры.Контрагент = Шапка.Контрагент;
	
	//Штрихкод
	Эталон = ПолучитьОбщийМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",          Окр(ОбластьШапка.Рисунки.КартинкаШтрихкода.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",          Окр(ОбластьШапка.Рисунки.КартинкаШтрихкода.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",        Шапка.Штрихкод);
	ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",    12);
	
	ОбластьШапка.Рисунки.КартинкаШтрихкода.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);

	ТабДокумент.Вывести(ОбластьШапка);
	
	//Таблица
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);
	НомерСтроки = 1;
	Пока ВыборкаТовары.Следующий() Цикл
		
		ОбластьСтрокаТаблицы.Параметры.НомерСтроки 	= НомерСтроки;
		ОбластьСтрокаТаблицы.Параметры.Артикул 		= ВыборкаТовары.Артикул;
		ОбластьСтрокаТаблицы.Параметры.Наименование = ВыборкаТовары.Наименование;
		ОбластьСтрокаТаблицы.Параметры.Цена 		= ВыборкаТовары.Цена;
		ОбластьСтрокаТаблицы.Параметры.Сумма 		= ВыборкаТовары.Сумма;
		ОбластьСтрокаТаблицы.Параметры.Количество 	= ВыборкаТовары.Количество;
		ОбластьСтрокаТаблицы.Параметры.Склад 		= Склад;
		ОбластьСтрокаТаблицы.Параметры.НомерРТУ 	= Шапка.ДокументПродажиНомер;
		ОбластьСтрокаТаблицы.Параметры.ДатаРТУ 		= Формат(Шапка.ДокументПродажиДата, "ДФ=dd.MM.yyyy");
		ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ОбластьИтого.Параметры.СуммаДокумента = Формат(Шапка.СуммаДокумента, "ЧДЦ=2");
	ТабДокумент.Вывести(ОбластьИтого);
	
	ОбластьПодвал.Параметры.Автор 		= ПараметрыСеанса.ТекущийПользователь;
	ОбластьПодвал.Параметры.Контрагент 	= Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьПодвал);
		
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьАктаПриемаПередачиВозврата(вхСсылкаНаДокумент, Тип = 1) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ПечатьАктаПриемаПередачиВозврата";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//Тип = 1 - полный
	//Тип = 2 - розничный
	
	Шапка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, 
	"СрокВозвратаКлиента, Штрихкод, Номер, Дата, Организация, Контрагент, СуммаКомпенсацииУтв,
	| КодВозврата.Код, СуммаДокумента, ДокументПродажи.Номер, ДокументПродажи.Дата, ДоговорКонтрагента.Наименование, КомментарийГПРК, КомментарийСайт, ПричинаВозврата.Наименование, Контрагент.ОбратнаяРеализацияПриВозвратеОтКлиента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктРассмотренияВозвратаТовары.Номенклатура,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование КАК Наименование,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул КАК Артикул,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Код КАК Код,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель.Наименование КАК ИзготовительНаименование,
		|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	СУММА(АктРассмотренияВозвратаТовары.КоличествоПлан) КАК Количество,
		|	АктРассмотренияВозвратаТовары.Цена КАК Цена,
		|	АктРассмотренияВозвратаТовары.ЦенаПослеУценки КАК ЦенаПослеУценки,
		|	ВЫБОР
		|		КОГДА АктРассмотренияВозвратаТовары.СуммаУценки > 0
		|				И АктРассмотренияВозвратаТовары.Цена > 0
		|			ТОГДА ВЫРАЗИТЬ(100 * АктРассмотренияВозвратаТовары.СуммаУценки / АктРассмотренияВозвратаТовары.Цена КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ АктРассмотренияВозвратаТовары.ПроцентУценки
		|	КОНЕЦ КАК ПроцентУценки,
		|	СУММА(АктРассмотренияВозвратаТовары.СуммаПлан) КАК Сумма
		|ИЗ
		|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
		|ГДЕ
		|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	АктРассмотренияВозвратаТовары.Номенклатура,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Код,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель.Наименование,
		|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения.Наименование,
		|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код,
		|	АктРассмотренияВозвратаТовары.Цена,
		|	АктРассмотренияВозвратаТовары.ЦенаПослеУценки,
		|	ВЫБОР
		|		КОГДА АктРассмотренияВозвратаТовары.СуммаУценки > 0
		|				И АктРассмотренияВозвратаТовары.Цена > 0
		|			ТОГДА ВЫРАЗИТЬ(100 * АктРассмотренияВозвратаТовары.СуммаУценки / АктРассмотренияВозвратаТовары.Цена КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ АктРассмотренияВозвратаТовары.ПроцентУценки
		|	КОНЕЦ";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаТовары = РезультатЗапроса.Выбрать();
	
	Макет 					= ПолучитьМакет("АктПриемаПередачиВозврата");
	ОбластьШапка1_1 		= Макет.ПолучитьОбласть("Шапка1_1");
	ОбластьШапка1_2 		= Макет.ПолучитьОбласть("Шапка1_2");
	ОбластьШапка1_3 		= Макет.ПолучитьОбласть("Шапка1_3");
	ОбластьШапка2 			= Макет.ПолучитьОбласть("Шапка2");
	ОбластьШапка3 			= Макет.ПолучитьОбласть("Шапка3");
	ОбластьШапка3_Розничный	= Макет.ПолучитьОбласть("Шапка3_Розничный");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьИтого 			= Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал1 			= Макет.ПолучитьОбласть("Подвал1");
	ОбластьПодвал1_Розничный= Макет.ПолучитьОбласть("Подвал1_Розничный");
	ОбластьПодвал2_1 		= Макет.ПолучитьОбласть("Подвал2_1");
	ОбластьПодвал2_2 		= Макет.ПолучитьОбласть("Подвал2_2");
	ОбластьПодвал3 			= Макет.ПолучитьОбласть("Подвал3");
	
	ТабДокумент  = Новый ТабличныйДокумент;
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабДокумент.ТолькоПросмотр          = Истина;
	ТабДокумент.КоличествоЭкземпляров   = 1;
	ТабДокумент.ОтображатьСетку			= Ложь;
	ТабДокумент.ОтображатьЗаголовки		= Ложь;
	ТабДокумент.Защита					= НЕ РольДоступна("ПолныеПрава"); 
	
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация,  	Шапка.Дата);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, 	Шапка.Дата);
	
	//ШАПКА
	Если Тип = 1 Тогда
		
		ОбластьШапка1_1.Параметры.ОписаниеТовара = "";
		ОписаниеТоваровАкта = ОписаниеТоваровАкта(вхСсылкаНаДокумент);
		Для каждого СтрокаОписания Из ОписаниеТоваровАкта Цикл
			ОбластьШапка1_1.Параметры.ОписаниеТовара = ОбластьШапка1_1.Параметры.ОписаниеТовара +  СтрокаОписания.ИнформацияОбУпаковке + Символы.ПС;
			ОбластьШапка1_1.Параметры.ОписаниеТовара = ОбластьШапка1_1.Параметры.ОписаниеТовара +  СтрокаОписания.ИнформацияОСледахУстановки;
			Прервать;
		КонецЦикла;
		
		
		ДополнительныйКомментарий = "";
		Если ЗначениеЗаполнено(СокрЛП(Шапка.КомментарийСайт)) Тогда
			ДополнительныйКомментарий = "Комментарий грузоотправителя: " + Шапка.КомментарийСайт;
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(Шапка.КомментарийГПРК)) Тогда
			Если ЗначениеЗаполнено(ДополнительныйКомментарий) Тогда
				ДополнительныйКомментарий = ДополнительныйКомментарий+Символы.ПС+Символы.ПС;
			КонецЕсли;
			ДополнительныйКомментарий = ДополнительныйКомментарий+"Дополнительный комментарий: " + Шапка.КомментарийГПРК;
		КонецЕсли;
		ОбластьШапка1_3.Параметры.ДополнительныйКомментарий = ДополнительныйКомментарий;
		
		// Выводим общие реквизиты шапки
		
		ОбластьШапка1_3.Параметры.ПредставлениеГрузополучателя 	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьШапка1_3.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьШапка1_3.Параметры.Основание						= "Соглашение о возврате";
		
		ОбластьШапка1_1.Параметры.КодВозврата 		= "0"+Шапка.КодВозвратаКод;
		ОбластьШапка1_1.Параметры.СрокДоставки 		= КонецДня(Шапка.СрокВозвратаКлиента);
		ОбластьШапка1_1.Параметры.ПричинаВозврата	= Шапка.ПричинаВозвратаНаименование;
		
		//Штрихкод
		Эталон = ПолучитьОбщийМакет("Эталон");
		КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
		
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(ОбластьШапка1_1.Рисунки.КартинкаШтрихкода.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",          Окр(ОбластьШапка1_1.Рисунки.КартинкаШтрихкода.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",        Шапка.Штрихкод);
		ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    12);
		
		ОбластьШапка1_1.Рисунки.КартинкаШтрихкода.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		ТабДокумент.Вывести(ОбластьШапка1_1);
		Если Шапка.СуммаКомпенсацииУтв > 0 Тогда
			ТабДокумент.Вывести(ОбластьШапка1_2);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьШапка1_3);
		//////
		НомерСФ="";
		ДатаСФ="";
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Номер = &Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияТоваровУслуг.Дата УБЫВ";
		Запрос.УстановитьПараметр("Номер",Шапка.ДокументПродажиНомер);
		Рез=Запрос.Выполнить().Выгрузить();
		Если Не рез.Количество()=0 Тогда 
			СсылкаР=Рез[0].Ссылка;
			СФ=УчетНДС.НайтиПодчиненныйДокумент(СсылкаР, "СчетФактураВыданный");
			Если Не СФ=Неопределено Тогда 
				НомерСФ=СФ.Номер;
				ДатаСФ=СФ.Дата;
			КонецЕсли;	
		КонецЕсли;	
		Если НЕ Шапка.КонтрагентОбратнаяРеализацияПриВозвратеОтКлиента Тогда
			ОбластьШапка2.Параметры.ДопТекст1 = "Стороны пришли к соглашению о возврате излишнепоставленного товара и корректировке поставки по документу:";
			ОбластьШапка2.Параметры.ДопТекст2 = "Указанный ниже товар не является обратной реализацией (поставкой) и подтверждает возврат товара.";
			ОбластьШапка2.Параметры.ДопТекст3 = "Грузополучатель предоставляет Грузоотправителю корректировочную счет-фактуру."; //#XX-2436 Kalinin V.A. ( 2019-05-08 )  /*
			Если НомерСФ="" Тогда 
				КонечнаяСтрока = "";
				Для й = 1 По СтрДлина(Шапка.ДокументПродажиНомер) Цикл
					ТекущийСимвол = Сред(Шапка.ДокументПродажиНомер, й, 1);
					Если Найти("0123456789", ТекущийСимвол) > 0 Тогда
						КонечнаяСтрока = КонечнаяСтрока + ТекущийСимвол; 
					КонецЕсли;	
				КонецЦикла;
				
				// - удаление ведущих нулей
				Пока Лев(КонечнаяСтрока, 1) = "0" Цикл
					КонечнаяСтрока = Сред(КонечнаяСтрока, 2);
				КонецЦикла;
				НД=КонечнаяСтрока + " от " + Формат(Шапка.ДокументПродажиДата, "ДФ='дд ММММ гггг'") + " г.";
				//ОбластьШапка2.Параметры.ДанныеДокументаПродажи = " № "+Шапка.ДокументПродажиНомер+" от "+Формат(Шапка.ДокументПродажиДата, "ДФ=dd.MM.yyyy")+"г.";
				ОбластьШапка2.Параметры.ДанныеДокументаПродажи = " № "+ НД;
			Иначе 
				ОбластьШапка2.Параметры.ДанныеДокументаПродажи = " № "+НомерСФ+" от "+Формат(ДатаСФ, "ДФ=dd.MM.yyyy")+"г.";
			КонецЕсли;	
			ТабДокумент.Вывести(ОбластьШапка2);
		КонецЕсли;
		/////
		ОбластьШапка3.Параметры.ДатаДокумента 	= Формат(Шапка.Дата, "ДФ=dd.MM.yyyy");
		ТабДокумент.Вывести(ОбластьШапка3);
		
	ИначеЕсли Тип = 2 Тогда
		
		//ХудинВВ XX-2635 05072019
		ОбластьШапка3_Розничный.Параметры.НомерДокумента 	= Шапка.Номер;
		ОбластьШапка3_Розничный.Параметры.ДатаДокумента 	= Формат(Шапка.Дата, "ДФ=dd.MM.yyyy");
		ОбластьШапка3_Розничный.Параметры.ПредставлениеГрузополучателя 	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьШапка3_Розничный.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ТабДокумент.Вывести(ОбластьШапка3_Розничный);
		
	КонецЕсли;

	//Таблица
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);
	НомерСтроки 		= 1;
	СуммаИтого 			= 0;
	КоличествоИтого		= 0;
	Пока ВыборкаТовары.Следующий() Цикл
		
		ОбластьСтрокаТаблицы.Параметры.НомерСтроки 	= НомерСтроки;
		ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаТовары);
		
		ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		СуммаИтого 			= СуммаИтого + ВыборкаТовары.Сумма;
		КоличествоИтого 	= КоличествоИтого + ВыборкаТовары.Количество;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ОбластьИтого.Параметры.СуммаИтого 		= Формат(СуммаИтого, "ЧДЦ=2");
	ОбластьИтого.Параметры.КоличествоИтого 	= КоличествоИтого;
	ТабДокумент.Вывести(ОбластьИтого);
	
	Если Тип = 1 Тогда
		
		ТабДокумент.Вывести(ОбластьПодвал1);
		Если Шапка.СуммаКомпенсацииУтв > 0 Тогда
			ТабДокумент.Вывести(ОбластьПодвал2_1);
		Иначе
			ТабДокумент.Вывести(ОбластьПодвал2_2);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьПодвал3);
		
	ИначеЕсли Тип = 2 Тогда
		
		//ХудинВВ XX-2635 05072019
		ТабДокумент.Вывести(ОбластьПодвал1_Розничный);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПретензии(вхСсылкаНаДокумент) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульМенеджера_ПечатьПретензии";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Шапка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "СуммаКомпенсацииУтв, Штрихкод, Номер, Дата, ДоговорКонтрагента.Дата, ДоговорКонтрагента.Номер, ДоговорКонтрагента.ВидОплаты, Организация, Контрагент");
	
	Если Шапка.ДоговорКонтрагентаВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда
		Сообщить("Претензия не печатается для наличного типа оплаты в договоре!");
		Возврат Неопределено;		
	КонецЕсли;

	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СУММА(АктРассмотренияВозвратаТовары.СуммаКомпенсацииУтв) КАК СуммаКомпенсации
	//	|ИЗ
	//	|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
	//	|ГДЕ
	//	|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//ВыборкаСумма = Запрос.Выполнить().Выбрать();
	//ВыборкаСумма.Следующий();
	
	Если Шапка.СуммаКомпенсацииУтв <= 0 Тогда
		Сообщить("Утвержденная сумма компенсации не указана!");
		Возврат Неопределено;		
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктРассмотренияВозвратаТовары.Номенклатура,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование КАК Наименование,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул КАК Артикул,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель.Наименование КАК Изготовитель,
		|	СУММА(АктРассмотренияВозвратаТовары.КоличествоПлан) КАК Количество,
		|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения.Наименование  КАК ЕдиницаИзмерения
		|ИЗ
		|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
		|ГДЕ
		|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	АктРассмотренияВозвратаТовары.Номенклатура,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель.Наименование,
		|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	СтрокаНоменклатура = "";
	Пока ВыборкаТовары.Следующий() Цикл
		
		СтрокаНоменклатура = СтрокаНоменклатура + "" + ВозвратыОтПокупателяСервер.ПредставлениеНоменклатурыДляСайта(
		ВыборкаТовары.Изготовитель,
		ВыборкаТовары.Артикул,
		ВыборкаТовары.Наименование,
		ВыборкаТовары.ЕдиницаИзмерения,
		ВыборкаТовары.Количество,,Ложь)  + "" + 
		" в количестве "+ВыборкаТовары.Количество+" "+ВыборкаТовары.ЕдиницаИзмерения + Символы.ПС;
		
	КонецЦикла;
	
	ТабДокумент  = Новый ТабличныйДокумент;
		
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабДокумент.КоличествоЭкземпляров   = 1;
	ТабДокумент.ТолькоПросмотр          = Истина;
	
	Макет = ПолучитьМакет("Претензия");
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент,  Шапка.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечати");
	ОбластьМакета.Параметры.ПредставлениеПоставщика		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ЮридическийАдрес,Телефоны");
	ОбластьМакета.Параметры.ПредставлениеПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ЮридическийАдрес,Телефоны");		
	ОбластьМакета.Параметры.Номенклатура 				= СтрокаНоменклатура;
	ОбластьМакета.Параметры.Дата 						= Формат(Шапка.Дата, "ДФ='dd MMMM yyyy'")+"г.";
	ОбластьМакета.Параметры.НомерДоговора 				= ?(ЗначениеЗаполнено(Шапка.ДоговорКонтрагентаНомер), Шапка.ДоговорКонтрагентаНомер, "__________");
	ОбластьМакета.Параметры.ДатаДоговора 				= ?(ЗначениеЗаполнено(Шапка.ДоговорКонтрагентаДата), Формат(Шапка.ДоговорКонтрагентаДата, "ДФ='dd.MM.yyyy'"), "__________")+"г.";
	ОбластьМакета.Параметры.СуммаКомпенсации			= ""+Формат(Шапка.СуммаКомпенсацииУтв,"ЧДЦ=2")+ " руб. ("+ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаКомпенсацииУтв, мВалютаРегламентированногоУчета)+")";
	ОбластьМакета.Параметры.НомерДокумента 				= Шапка.Штрихкод;
	
	//Штрихкод
	ПрефиксШтрихкодаПретензии = Документы.АктРассмотренияВозврата.ПрефиксШтрихкодаПретензии();
	
	Эталон = ПолучитьОбщийМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",          Окр(ОбластьМакета.Рисунки.КартинкаШтрихкода.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",          Окр(ОбластьМакета.Рисунки.КартинкаШтрихкода.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",        ПрефиксШтрихкодаПретензии+Шапка.Штрихкод);
	ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",    12);
	
	ОбластьМакета.Рисунки.КартинкаШтрихкода.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
	ТабДокумент.Вывести(ОбластьМакета);
		
	Возврат ТабДокумент;

	
КонецФункции

#КонецОбласти
