
#Область События

Процедура ЗаполнитьСтруктуруРеквизитовКонтроляИсторииПоСсылке(СтруктураРеквизитов, ДокументСсылка)
	
	СтрокаПолейШапки = "";
	СтрокаПолейТовары = "";
	Для каждого КлючЗначение Из СтруктураРеквизитов Цикл
		Если  Лев(КлючЗначение.Ключ, 6) = "Товары" Тогда
			ИмяПоля = СтрЗаменить(КлючЗначение.Ключ, "Товары", "");
			СтрокаПолейТовары = СтрокаПолейТовары + "Сумма("+ИмяПоля+") КАК "+ИмяПоля+", ";
		Иначе
			СтрокаПолейШапки = СтрокаПолейШапки + КлючЗначение.Ключ+", ";
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(СтрокаПолейШапки) Тогда
		СтрокаПолейШапки = Лев(СтрокаПолейШапки, СтрДлина(СтрокаПолейШапки)-2)
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаПолейТовары) Тогда
		СтрокаПолейТовары = Лев(СтрокаПолейТовары, СтрДлина(СтрокаПолейТовары)-2)
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&СтрокаПолейШапки
		|ИЗ
		|	Документ.АктРассмотренияВозврата КАК АктРассмотренияВозврата
		|ГДЕ
		|	АктРассмотренияВозврата.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаПолейШапки", СтрокаПолейШапки);	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	
	Если ЗначениеЗаполнено(СтрокаПолейТовары) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&СтрокаПолейТовары
		|ИЗ
		|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозврата
		|ГДЕ
		|	АктРассмотренияВозврата.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	АктРассмотренияВозврата.Ссылка";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаПолейТовары", СтрокаПолейТовары);	
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Для каждого КлючЗначение Из СтруктураРеквизитов Цикл
			Если  Лев(КлючЗначение.Ключ, 6) = "Товары" Тогда
				ИмяПоля = СтрЗаменить(КлючЗначение.Ключ, "Товары", "");
				СтруктураРеквизитов[КлючЗначение.Ключ] = Выборка[ИмяПоля];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ПередЗаписью";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	//Сохраним старые Значения
	СтруктураРеквизитов = Документы.АктРассмотренияВозврата.СтруктураРеквизитовДляКонтроляИстории();
	Если Не ЭтоНовый() Тогда
		ЗаполнитьСтруктуруРеквизитовКонтроляИсторииПоСсылке(СтруктураРеквизитов, Ссылка);
		//ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Ссылка);
	КонецЕсли;
	ДополнительныеСвойства.Вставить("РеквизитыСсылкиПередЗаписью", СтруктураРеквизитов);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//25032018 Акт не делает движений, его можно менять в закрытом периоде
	ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета", Истина);
	ДополнительныеСвойства.Вставить("РежимБога", Истина);

	Обновлен = ТекущаяДатаСеанса();
	
	УстановитьСтатусПроверкиДокументовПоставщика();	
	УстановитьСтатусПроверкиБухгалтерией();
	
	//Составной тип
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Неопределено;
	КонецЕсли;
	
	//Качество по умолчанию
	КачествоНовый = Справочники.Качество.Новый;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Качество) Тогда
			СтрокаТабличнойЧасти.Качество = КачествоНовый;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Филиал) Тогда
		Филиал = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ОсновнаяТорговаяТочка.Регион.Филиал");
	КонецЕсли;
	
	
	УчитыватьНДС 		= УчетНДСПовтИсп.УчитыватьНДСПоВариантуУчета(Организация.ВариантУчетаНДС, ДоговорКонтрагента.ВидОплаты);
	СуммаВключаетНДС 	= УчитыватьНДС;
	
	СуммаНДС = Товары.Итог("СуммаНДСПлан");
	Если (УчитыватьНДС И СуммаНДС = 0) 
		ИЛИ (НЕ УчитыватьНДС И СуммаНДС > 0) Тогда
		ПересчитатьСуммуНДС();		
	КонецЕсли;
	
	//Для возвратов по документам РТУ до 2018г, ставим НДС 18%
	РеквизитыДокументаПродажи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПродажи, "Дата");
	ОбратнаяРеализацияПриВозвратеОтКлиента =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ГоловнойКонтрагент.ОбратнаяРеализацияПриВозвратеОтКлиента");
	МенятьНаНДС18 = РеквизитыДокументаПродажи.Дата < Дата(2019,1,1) И ОбратнаяРеализацияПриВозвратеОтКлиента = Ложь;
	МенятьНаНДС20 = РеквизитыДокументаПродажи.Дата < Дата(2019,1,1) И ОбратнаяРеализацияПриВозвратеОтКлиента = ИСТИНА;
	Если УчитыватьНДС Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл 
			Если МенятьНаНДС18 И СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда 
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("РассчитатьСуммуНДС", Новый Структура("УчитыватьНДС, СуммаВключаетНДС", УчитыватьНДС, СуммаВключаетНДС));			
				СтруктураДействий.Вставить("РассчитатьСуммуНДСПлан", Новый Структура("УчитыватьНДС, СуммаВключаетНДС", УчитыватьНДС, СуммаВключаетНДС));			
				ОбработкаТабличныхЧастей.ПересчитатьСтрокуТабличнойЧасти(СтрокаТЧ, СтруктураДействий, Неопределено); 
			ИначеЕсли МенятьНаНДС20 И СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("РассчитатьСуммуНДС", Новый Структура("УчитыватьНДС, СуммаВключаетНДС", УчитыватьНДС, СуммаВключаетНДС));			
				СтруктураДействий.Вставить("РассчитатьСуммуНДСПлан", Новый Структура("УчитыватьНДС, СуммаВключаетНДС", УчитыватьНДС, СуммаВключаетНДС));			
				ОбработкаТабличныхЧастей.ПересчитатьСтрокуТабличнойЧасти(СтрокаТЧ, СтруктураДействий, Неопределено); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента 		= ПолучитьСуммуСНДС("Сумма");
	СуммаДокументаПлан 	= ПолучитьСуммуСНДС("СуммаПлан");
	
	УстановитьНовыйШтрихкод();
	
	ЗаполнитьДанныеПрайсаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения);

	
	//Срок возврата
	Если Не ЗначениеЗаполнено(СрокВозвратаКлиента) Тогда
		СрокВозвратаКлиента = НачалоДня(Дата)+ВозвратыОтПокупателяСервер.СрокВозвратаТовараКлиентомДней()*86400;
	КонецЕсли;
	
	//Если записывает пользователь текущей группы, то переведем на него
	ГруппаДоступностиПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "ГруппаДоступаКСтатусамПроцессаВозвратаОтПокупателя");
	Если ЗначениеЗаполнено(ГруппаДоступностиПользователя) И ТипЗнч(Ответственный) = Тип("СправочникСсылка.ГруппыДоступаКСтатусамПроцессаВозвратаОтПокупателя")
		И ГруппаДоступностиПользователя = Ответственный Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;		
	КонецЕсли;
	
	
	ПроверкиПередЗаписью(Отказ, РежимЗаписи, РежимПроведения);
	
	//Поставщик
	Если НЕ Отказ Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ЗначениеЗаполнено(Поставщик) Тогда
			Поставщик = Документы.АктРассмотренияВозврата.ПоставщикПоДаннымПартий(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПрайсаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ЗаполнитьДанныеПрайсаПередЗаписью";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////

	//http://jira.part-kom.ru/browse/XX-1969
	Если СтатусДокумента = Справочники.СтатусыДокументов.АРВ_Новый
		И Товары.Количество() > 0 Тогда
		
		  СтрокаЗаявки = Товары[0].СтрокаЗаявки;
		  ПериодУстановкиПараметровПрайсаПоставщикаВАРВДней = 7;  //Переделать на константу как освободится корень
		  
		  РеквизитыСЗ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗаявки, "ТипПоставки, ПрайсПоставщика, ПрайсПоставщика.ДоставкаДоКлиента, ПрайсПоставщика.БезДосмотра, ПрайсПоставщика.ВозвратНевозможенПоПричинеОшибкиЗаказа");
		  ДатаРТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи, "Дата");
		  
		  //ХудинВВ 20032019 XX-2164
		  ВозвратПоставщикуНевозможенПоПричинеОшибкиЗаказа = РеквизитыСЗ.ПрайсПоставщикаВозвратНевозможенПоПричинеОшибкиЗаказа;
		  
		  Если РеквизитыСЗ.ТипПоставки = Перечисления.ТипПоставки.Кросс
			  И ПричинаВозврата = Справочники.ПричиныВозврата.ОтказОтДетали Тогда
			  БезоговорочныйВозвратПоставщика = РегистрыСведений.БезоговорочныйВозвратПрайсовПоставщика.ДействуетБезоговорочныйВозвратПоставщика(РеквизитыСЗ.ПрайсПоставщика, Дата);
		  КонецЕсли;
		  
		  Если РеквизитыСЗ.ТипПоставки = Перечисления.ТипПоставки.Кросс
			  И Дата - ДатаРТУ <= 86400*ПериодУстановкиПараметровПрайсаПоставщикаВАРВДней Тогда
			  ДоставкаДоКлиента = РеквизитыСЗ.ПрайсПоставщикаДоставкаДоКлиента;
			  БезДосмотра 		= РеквизитыСЗ.ПрайсПоставщикаБезДосмотра;
		  Иначе
			  ДоставкаДоКлиента = Ложь;
			  БезДосмотра		= Ложь;
		  КонецЕсли;
		  
		  Если РеквизитыСЗ.ТипПоставки = Перечисления.ТипПоставки.Кросс
			  И (БезДосмотра или БезоговорочныйВозвратПоставщика)
			  И ПричинаВозврата = Справочники.ПричиныВозврата.БракВыявленныйПриПолученииТовара
			  И НЕ Документы.АктРассмотренияВозврата.ЭтоРучнойВвод(ЭтотОбъект)  Тогда
			  КодВозврата = Справочники.КодыВозврата.ВозвратПоставщику;
		  КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусПроверкиДокументовПоставщика()
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_УстановитьСтатусПроверкиДокументовПоставщика";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	
	Если (Не ЗначениеЗаполнено(СтатусПроверкиДокументовПоставщика)
		ИЛИ  СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.НеПроверены
		ИЛИ  СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.ПроверкаНеНужна)
		И ЗначениеЗаполнено(Ссылка) Тогда
		
		КодВозвратаСтарый = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "КодВозврата");
		
		// код изменился на 01
		Если КодВозврата = Справочники.КодыВозврата.ВозвратПоставщику
			И КодВозвратаСтарый <> КодВозврата Тогда
			СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.НеПроверены;
		КонецЕсли;
		
		// код изменился с 01 на другой
		Если КодВозвратаСтарый = Справочники.КодыВозврата.ВозвратПоставщику
			И КодВозвратаСтарый <> КодВозврата Тогда
			СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.ПроверкаНеНужна;
		КонецЕсли;

	КонецЕсли;
	

КонецПроцедуры

Функция ПолучитьСуммуСНДС(ИмяПоля = "Сумма") Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ПолучитьСуммуСНДС";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Сумма = Товары.Итог(ИмяПоля);
	
	ИмяПоляНДС = ?(ИмяПоля = "Сумма", "СуммаНДС", "СуммаНДСПлан");
	
	Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
		
		Сумма = Сумма + Товары.Итог(ИмяПоляНДС);
		
	КонецЕсли;
	
	Возврат Сумма;

КонецФункции // ПолучитьСуммуСНДС()

Процедура ПересчитатьСуммуНДС() Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ПересчитатьСуммуНДС";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	ДатаНакладной =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи, "Дата");
	ОбратнаяРеализацияПриВозвратеОтКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ГоловнойКонтрагент.ОбратнаяРеализацияПриВозвратеОтКлиента");
	МенятьНаНДС18 = Ложь;
	МенятьНаНДС20 = Ложь;
	Если ЗначениеЗаполнено(ДатаНакладной) Тогда
		МенятьНаНДС18 = ДатаНакладной < Дата(2019,1,1) И ОбратнаяРеализацияПриВозвратеОтКлиента = Ложь;
		МенятьНаНДС20 = ДатаНакладной < Дата(2019,1,1) И ОбратнаяРеализацияПриВозвратеОтКлиента = Истина;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Товары Цикл
		
		Если УчитыватьНДС И НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
			СтрокаТЧ.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "СтавкаНДС");
			Если МенятьНаНДС18 И СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			КонецЕсли;	
			Если МенятьНаНДС20 И СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			КонецЕсли;	
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("РассчитатьСуммуНДС", Новый Структура("УчитыватьНДС, СуммаВключаетНДС", УчитыватьНДС, СуммаВключаетНДС));			
		СтруктураДействий.Вставить("РассчитатьСуммуНДСПлан", Новый Структура("УчитыватьНДС, СуммаВключаетНДС", УчитыватьНДС, СуммаВключаетНДС));			
		ОбработкаТабличныхЧастей.ПересчитатьСтрокуТабличнойЧасти(СтрокаТЧ, СтруктураДействий, Неопределено); 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНовыйШтрихкод()
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_УстановитьНовыйШтрихкод";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	//Устанавливаем штриход, если АРВ вводят руками. 
	//если АРВ приходит с сайта, то штрихкод уже должен быть заполнен 
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		
		ПрефиксШК = Документы.АктРассмотренияВозврата.ПрефиксШтрихкодаДляРучногоСозданияАРВ();
		
		ДлинаШКСПрефиксом = Метаданные.Документы.АктРассмотренияВозврата.Реквизиты.Штрихкод.Тип.КвалификаторыСтроки.Длина;
		
		НомерЧисло = 1;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.АктРассмотренияВозврата");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();	
		
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|    ПОДСТРОКА(Документ.Штрихкод, &НачальныйСимволЧисла, &КонечныйСимволЧисла) КАК Штрихкод
		|ИЗ
		|    Документ.АктРассмотренияВозврата КАК Документ
		|ГДЕ
		|    ПОДСТРОКА(Документ.Штрихкод, 1, 2) = &Префикс
	//	|    И Документ.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ГОД) И КОНЕЦПЕРИОДА(&Дата, ГОД)
		|    И НЕ ПОДСТРОКА(Документ.Штрихкод, &НачальныйСимволЧисла, &КонечныйСимволЧисла) ПОДОБНО ""%[^0-9]%""
		|
		|УПОРЯДОЧИТЬ ПО
		|    Штрихкод УБЫВ";
		
		Запрос.УстановитьПараметр("Префикс",ПрефиксШК);
		Запрос.УстановитьПараметр("НачальныйСимволЧисла",СтрДлина(ПрефиксШК)+1);
		Запрос.УстановитьПараметр("КонечныйСимволЧисла", ДлинаШКСПрефиксом);
		Запрос.УстановитьПараметр("Дата",	Дата);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Попытка
				ШтрихкодЧисло = Число(Выборка.Штрихкод)+1;
				Штрихкод = ПрефиксШК+Формат(ШтрихкодЧисло,"ЧЦ="+Строка(ДлинаШКСПрефиксом-СтрДлина(ПрефиксШК))+"; ЧВН=; ЧГ=");    
			Исключение
			КонецПопытки;
		Иначе    
			ШтрихкодЧисло = 1;
			Штрихкод = ПрефиксШК+Формат(ШтрихкодЧисло,"ЧЦ="+Строка(ДлинаШКСПрефиксом-СтрДлина(ПрефиксШК))+"; ЧВН=; ЧГ=");    
		КОнецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПроверкиПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ПроверкиПередЗаписью";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если СтатусДокумента = Справочники.СтатусыДокументов.АРВ_Новый Тогда
			
			//Проверим что партии заполнены корректно
			ПроверитьЗаполнитьПартииВТабличнойЧасти(,,,Ложь);
			
		КонецЕсли;
		
		Если Справочники.Организации.ОрганизацияЗакрыта(Организация, Дата) Тогда
			ВызватьИсключение "Организация "+Организация+" закрыта. Создание возврата невозможно.";
		КонецЕсли;
		
		Если КодВозврата = Справочники.КодыВозврата.ВозвратПоставщику
			И Не ЗначениеЗаполнено(Поставщик) Тогда
			ВызватьИсключение "Для выбранного кода возврата необходимо указать поставщика товара!";
		КонецЕсли;
		
		//Пока разрешаем создавать Акт только на один товар. Каждый товар отдельным актом.
		Если Не РазрешитьБолееОдногоТовара Тогда
			ТЗНоменклатура = Товары.Выгрузить(,"Номенклатура");
			ТЗНоменклатура.Свернуть("Номенклатура");
			Если ТЗНоменклатура.Количество() > 1 Тогда
				ВызватьИсключение "Выбрано более одного товара. На каждый возвращаемый товар необходимо оформлять отдельный Акт возврата";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Если ВариантСписания = Перечисления.ВариантыСписанияВозврата.ПродажаНаВиновноеЛицо
	//	И НЕ ЗначениеЗаполнено(ВиновноеЛицоДляСписания) Тогда
	//	ВызватьИсключение "Не заполнено виновное лицо для списания";
	//КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		 РазрешитьРучноеРедактированиеАРВ 	= ВозвратыОтПокупателяСервер.РазрешитьРучноеРедактированиеАРВ();
		 РазрешитьОтменуПроведенияАРВ 		= НастройкаПравДоступа.ПолучитьЗначениеПраваПользователя(ПараметрыСеанса.ТекущийПользователь, 
																			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтменуПроведенияАРВ);
		 РольПП = РольДоступна("ПолныеПрава");
		 Если НЕ (РазрешитьРучноеРедактированиеАРВ ИЛИ РольПП ИЛИ РазрешитьОтменуПроведенияАРВ) Тогда
			 ВызватьИсключение "Отмена проведения акта возврата запрещена!";
		КонецЕсли;
		
	КонецЕсли;
	
	//Если ЭтоНовый() Тогда
	//	
	//	Если НЕ ВозвратыОтПокупателяСервер.РазрешитьРучноеРедактированиеАРВ()
	//		И Справочники.УчетныеЗаписиСайта.ДанныеУчетнойЗаписиКонтрагента(Контрагент).УчетнаяЗапись <> Неопределено Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке(Документы.АктРассмотренияВозврата.ТекстОшибкиЕстьЛогинКонтрагента(), Отказ,,СтатусСообщения.Важное);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ПриЗаписи";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	
	//Изменение статуса нужно записывать всегда!!
	ОтразитьИзменениеСтатусаПриЗаписи();
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Документы.АктРассмотренияВозврата.АРВУникаленПоШтрихкоду(Ссылка) Тогда
		ВызватьИсключение "Штрихкод АРВ не уникален!";		
	КонецЕсли;
	
	//Отразить изменение реквизитов
	СохранитьВИсториюИзмененияПриЗаписи();
	
	//Если склад закрыл, и теперь бухгалтерия ставит отметку о проверке
	Если СтатусПроверкиБухгалтерией = Перечисления.АРВ_СтатусыПроверкиБухгалтерией.Выполнено
		И СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ЗакрытоСкладом Тогда
		РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(
		Ссылка, 
		Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьПереходВСледующийСтатус, 
		СтатусДокумента);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ОбработкаПроведения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	//Стартуем процесс
	Если СтатусДокумента = Справочники.СтатусыДокументов.АРВ_Новый Тогда
		РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(
		Ссылка,
		Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьПереходВСледующийСтатус,
		СтатусДокумента);
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ОбработкаПроверкиЗаполнения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("Контрагент");
	ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
	ПроверяемыеРеквизиты.Добавить("Штрихкод");
	ПроверяемыеРеквизиты.Добавить("ПричинаВозврата");
	//ПроверяемыеРеквизиты.Добавить("КодВозврата");
	ПроверяемыеРеквизиты.Добавить("Товары.Номенклатура");
	ПроверяемыеРеквизиты.Добавить("Товары.КоличествоПлан");
	ПроверяемыеРеквизиты.Добавить("Товары.СебестоимостьЦена");
	ПроверяемыеРеквизиты.Добавить("Товары.Себестоимость");
	ПроверяемыеРеквизиты.Добавить("Товары.СтрокаПрихода");
	ПроверяемыеРеквизиты.Добавить("Товары.СтрокаЗаявки");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоРТУ

Процедура ЗаполнитьПартииДокументаПродажиИз77(вхДокументПродажи)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ЗаполнитьПартииДокументаПродажиИз77";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхДокументПродажи, "Дата, Номер");
	
	Если Реквизиты.Дата > Дата(2018,6,2) Тогда
		//Это документ после перехода
		Возврат;
	КонецЕсли;
	
	ПерваяБуква = Лев(Реквизиты.Номер, 1);
	Если НЕ (ПерваяБуква = "N" ИЛИ ПерваяБуква = "O" ИЛИ ПерваяБуква = "D") Тогда
		//Выбрана реализация не из базы 7.7 НН;
		Возврат;
	КонецЕсли;

	//Не надо затирать движения, если они уже есть
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ первые 1
		|	ПартииТоваров.Регистратор
		|ИЗ
		|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
		|ГДЕ
		|	ПартииТоваров.Регистратор = &Регистратор
		|	";
	
	Запрос.УстановитьПараметр("Регистратор", вхДокументПродажи);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиВызовСервера.ПолучитьДокументИз77(Новый Структура("РеализацияТоваров_НН", вхДокументПродажи));
	
КонецПроцедуры

Функция ПроверитьЗаполнитьПартииВТабличнойЧасти(СообщатьОбОшибке = Истина, ТекстОшибки = "", ВызыватьИсключение = Истина, ЗаполнитьТЧ = Истина) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ПроверитьЗаполнитьПартииВТабличнойЧасти";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Если НЕ ЗначениеЗаполнено(ДокументПродажи) Тогда
		
		ТекстОшибки = ТекстОшибки + Символы.ПС +"Не указан документ продажи!";
		Если  ВызыватьИсключение Тогда
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли СообщатьОбОшибке Тогда
			Сообщить(ТекстОшибки);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ЗаполнитьПартииДокументаПродажиИз77(ДокументПродажи);
	
	БылиОшибки = Ложь;
	лТекстОшибки = "";
	
	ОстаткиПартийСтруктура = ОстаткиПартийОтгрузки();
	
	ОстаткиПоНоменклатуре 	= ОстаткиПартийСтруктура.ОстаткиПоНоменклатуре;
	ОстаткиПартийПоРТУ 		= ОстаткиПартийСтруктура.ОстаткиПартий;
	ОстаткиПоТипу		 	= ОстаткиПартийСтруктура.ОстаткиПоТипу;
	
	ТаблицаРаспределения = Товары.Выгрузить().СкопироватьКолонки();
	
	Для каждого СтрокаРаспределить Из Товары Цикл
		
		//фактическое количество = 0
		Если СтрокаРаспределить.КоличествоПлан = 0 Тогда
			НоваяСтрока = ТаблицаРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределить);
		   	Продолжить;
		КонецЕсли;
		
		Распределить = СтрокаРаспределить.КоличествоПлан;
		
		СтрокиОстатков = ОстаткиПартийПоРТУ.НайтиСтроки(Новый структура("Номенклатура", СтрокаРаспределить.Номенклатура));
		СтрокиОстатковНоменклатуры = ОстаткиПоНоменклатуре.НайтиСтроки(Новый структура("Номенклатура", СтрокаРаспределить.Номенклатура));
		
		НовыеСтроки = Новый Массив;
		МассивКоэф = Новый Массив;
		ОбщийОстатокПоСтроке = ?(СтрокиОстатковНоменклатуры.Количество() > 0,
								СтрокиОстатковНоменклатуры[0].Количество,
								0);
								
		Для каждого СтрокаОстатка Из СтрокиОстатков Цикл
			
			Распределено = Мин(Распределить, СтрокаОстатка.Количество);
			
			Если Распределено <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокиОстатковНоменклатуры.Количество() = 0
				ИЛИ СтрокиОстатковНоменклатуры[0].Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределить,,"КоличествоПлан");
			НоваяСтрока.СтрокаПрихода 		= СтрокаОстатка.СтрокаПрихода;
			НоваяСтрока.СебестоимостьЦена 	= СтрокаОстатка.ЦенаСебестоимости;
			НоваяСтрока.КоличествоПлан 	  	= Распределено;
			
			Распределить = Распределить - Распределено;
			СтрокаОстатка.Количество = СтрокаОстатка.Количество - Распределено;
			СтрокиОстатковНоменклатуры[0].Количество = СтрокиОстатковНоменклатуры[0].Количество - Распределено;
			
			
			//Для распределения суммы компенсации
			НовыеСтроки.Добавить(НоваяСтрока);
			МассивКоэф.Добавить(НоваяСтрока.КоличествоПлан);
			
		КонецЦикла;
		
		//Распределим сумму компенсации
		Если НовыеСтроки.Количество() > 0 Тогда
			
			СуммыКомпенсации = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаРаспределить.СуммаКомпенсации, МассивКоэф); 
			
			Если СуммыКомпенсации <> Неопределено Тогда
				Для каждого НоваяСтрока Из НовыеСтроки Цикл
					НоваяСтрока.СуммаКомпенсации = СуммыКомпенсации[НовыеСтроки.Найти(НоваяСтрока)];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Распределить > 0 Тогда
			
			СтрокиКоличествоВРТУ = ОстаткиПоТипу.НайтиСтроки(Новый структура("Тип, Номенклатура", "КоличествоВРТУ", СтрокаРаспределить.Номенклатура));
			КоличествоВРТУ = ?(СтрокиКоличествоВРТУ.Количество() = 0,0, СтрокиКоличествоВРТУ[0].Количество);
			
			СтрокиКоличествоВозвращено = ОстаткиПоТипу.НайтиСтроки(Новый структура("Тип, Номенклатура", "КоличествоВозвращено", СтрокаРаспределить.Номенклатура));
			КоличествоВозвращено = ?(СтрокиКоличествоВозвращено.Количество() = 0,0, -СтрокиКоличествоВозвращено[0].Количество);
			
			лТекстОшибки = лТекстОшибки + "
			|
			| "+СтрокаРаспределить.Номенклатура+" (артикул: "+
						СтрокаРаспределить.Номенклатура.Артикул + 
						", изготовитель: "+СтрокаРаспределить.Номенклатура.Изготовитель+")"+"
			| К возврату: "+СтрокаРаспределить.КоличествоПлан +"
			| В документе продажи: "+КоличествоВРТУ +"
			| В ранее созданных возвратах: "+КоличествоВозвращено +"
			| Доступно для возврата: "+ОбщийОстатокПоСтроке +"
			| Превышение: "+Распределить;
						
			БылиОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БылиОшибки Тогда
		
		ТекстОшибки = ТекстОшибки +
		"
		|В реализации " + ДокументПродажи.Номер + " от " + ДокументПродажи.Дата + " недостаточно товаров для возврата: 
		| " + лТекстОшибки;
		
	КонецЕсли;
	
	Если БылиОшибки И СообщатьОбОшибке Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
	Если БылиОшибки И ВызыватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не БылиОшибки Тогда
		
		Товары.Загрузить(ТаблицаРаспределения);
		
		//Если Не ЗначениеЗаполнено(Поставщик) Тогда
		//	Поставщик = Документы.АктРассмотренияВозврата.ПоставщикПоДаннымПартий(ЭтотОбъект);
		//КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Товары Цикл
			
			//ХудинВВ 13032019
			//РТУ могла быть списана пустая строка прихода,
			//В таком случае создадим новую
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтрокаПрихода) ТОгда
				
				СтрокаПриходаОбъект = Справочники.ИдентификаторыСтрокПриходов.СоздатьЭлемент();
				СсылкаНаЭлемент = Справочники.ИдентификаторыСтрокПриходов.ПолучитьСсылку();
				СтрокаПриходаОбъект.УстановитьСсылкуНового(СсылкаНаЭлемент);
				СтрокаПриходаОбъект.Наименование = Строка(СсылкаНаЭлемент.УникальныйИдентификатор());
				СтрокаПриходаОбъект.Записать();
				
				СтрокаТабличнойЧасти.СтрокаПрихода = СтрокаПриходаОбъект.Ссылка;
				
			КонецЕсли;
			
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуАРВ");
			СтруктураДействий.Вставить("РассчитатьСуммуНДС", ЭтотОбъект);
			СтруктураДействий.Вставить("РассчитатьСуммуНДСПлан", ЭтотОбъект);
			СтруктураДействий.Вставить("ПересчитатьСебестоимость", ?(СтрокаТабличнойЧасти.Количество >0, "Количество", "КоличествоПлан"));
			СтруктураДействий.Вставить("ПересчитатьЦенуПоставщикуПослеУценки");
			ОбработкаТабличныхЧастей.ПересчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий, Неопределено); 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Не БылиОшибки;	
	
КонецФункции

Функция ЗаполнитьЦеныПоДокументуРеализации(СообщатьОбОшибке = Истина, ТекстОшибки = "", ВызыватьИсключение = Истина) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ЗаполнитьЦеныПоДокументуРеализации";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Если НЕ ЗначениеЗаполнено(ДокументПродажи) Тогда
		
		ТекстОшибки = ТекстОшибки + Символы.ПС +"Не указан документ продажи!";
		Если  ВызыватьИсключение Тогда
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли СообщатьОбОшибке Тогда
			Сообщить(ТекстОшибки);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	БылиОшибки = Ложь;
	лТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.СтрокаЗаявки,
		|	РеализацияТоваровУслугТовары.Количество,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.ЦенаСоСкидкой = 0
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ РеализацияТоваровУслугТовары.ЦенаСоСкидкой
		|	КОНЕЦ КАК Цена,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &ДокументПродажи";
	
	Запрос.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	
	ТоварыРТУ = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		СтрокиРТУ = ТоварыРТУ.НайтиСтроки(Новый Структура("Номенклатура, СтрокаЗаявки", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.СтрокаЗаявки));
		Если СтрокиРТУ.Количество() = 0 Тогда
			СтрокиРТУ = ТоварыРТУ.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТабличнойЧасти.Номенклатура));
		КонецЕсли;
		
		Если СтрокиРТУ.Количество() > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиРТУ[0], "Цена");
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьЦенуПослеУценки");
			СтруктураДействий.Вставить("ПересчитатьСуммуАРВ");
			СтруктураДействий.Вставить("РассчитатьСуммуНДС", ЭтотОбъект);
			СтруктураДействий.Вставить("РассчитатьСуммуНДСПлан", ЭтотОбъект);
			ОбработкаТабличныхЧастей.ПересчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий, Неопределено); 
			
		Иначе
			
			лТекстОшибки = лТекстОшибки + "
			|
			| "+СтрокаТабличнойЧасти.Номенклатура+" (артикул: "+
			СтрокаТабличнойЧасти.Номенклатура.Артикул + 
			", изготовитель: "+СтрокаТабличнойЧасти.Номенклатура.Изготовитель+")";
			
			БылиОшибки = Истина;
		Конецесли;
		
	КонецЦикла;
	
	Если БылиОшибки Тогда
		
		ТекстОшибки = ТекстОшибки +
		"
		|Невозможно заполнить цены. В реализации " + ДокументПродажи.Номер + " от " + ДокументПродажи.Дата + " не найдены товары: 
		| " + лТекстОшибки;
		
	КонецЕсли;
	
	Если БылиОшибки И СообщатьОбОшибке Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
	Если БылиОшибки И ВызыватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат НЕ БылиОшибки;
	
КонецФункции

Функция ЗаполнитьСтрокиЗаявкиПоДокументуПродажи(ПерезаполнятьЗаполненные = Ложь) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ЗаполнитьСтрокиЗаявкиПоДокументуПродажи";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	
	
	Если ЗначениеЗаполнено(ДокументПродажи) тогда 
		ТаблицаРеализации  =  ОбщегоНазначения.ЗначенияРеквизитовТабличнойЧастиОбъекта(ДокументПродажи,"Товары","СтрокаЗаявки,Номенклатура");
		Для каждого СтрокаВозврата из Товары цикл 
			НайденнаяСтрока = ТаблицаРеализации.Найти(СтрокаВозврата.Номенклатура,"Номенклатура");
			Если НЕ НайденнаяСтрока = Неопределено тогда
				Если Не ЗначениеЗаполнено(СтрокаВозврата.СтрокаЗаявки) Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СтрокаЗаявки) Тогда
						ЗаполнитьЗначенияСвойств(СтрокаВозврата,НайденнаяСтрока,"СтрокаЗаявки");
					Иначе
						//В РТУ не заполнена строка заявки
						СтрокаВозврата.СтрокаЗаявки = ОбщегоНазначенияКлиентСервер.ВиртуальнаяСтрокаЗаявки();						
					КонецЕсли;
				ИначеЕсли ПерезаполнятьЗаполненные Тогда
					ЗаполнитьЗначенияСвойств(СтрокаВозврата,НайденнаяСтрока,"СтрокаЗаявки");
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецФункции


Функция ОстаткиПартийОтгрузки() Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ОстаткиПартийОтгрузки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ПодбиратьПартииПоРазмещениям = ВозвратыОтПокупателяСервер.ПодбиратьПартииПоРазмещениям(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
	
	Если ПодбиратьПартииПоРазмещениям Тогда
		ОстаткиПартийСтруктура = ОстаткиПартийПоРазмещениям();
		Если ОстаткиПартийСтруктура.ОстаткиПартий.Итог("Количество") = 0 Тогда
			ОстаткиПартийСтруктура = ОстаткиПартийПоРТУ(); 
		Иначе
			//Сообщить("По размещениям");
		КонецЕсли;
	Иначе
		ОстаткиПартийСтруктура = ОстаткиПартийПоРТУ();  
	КонецЕсли;
	
	Возврат ОстаткиПартийСтруктура;
	
КонецФункции

//Определяем сколько осталось по партиям из размещений ПТУ по строке заявки
Функция ОстаткиПартийПоРазмещениям() Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ОстаткиПартийПоРазмещениям";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧТовары.Номенклатура,
	|	ТЧТовары.СтрокаПрихода,
	|	ТЧТовары.СтрокаЗаявки,
	|	ТЧТовары.Количество
	|ПОМЕСТИТЬ ТЧТовары
	|ИЗ
	|	&ТЧТовары КАК ТЧТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктРассмотренияВозвратаТовары.Номенклатура,
	|	АктРассмотренияВозвратаТовары.СтрокаЗаявки,
	|	МАКСИМУМ(ИдентификаторыСтрокЗаявок.Поставщик) КАК Поставщик,
	|	СУММА(АктРассмотренияВозвратаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	ТЧТовары КАК АктРассмотренияВозвратаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	|		ПО (ИдентификаторыСтрокЗаявок.Ссылка = АктРассмотренияВозвратаТовары.СтрокаЗаявки)
	|
	|СГРУППИРОВАТЬ ПО
	|	АктРассмотренияВозвратаТовары.Номенклатура,
	|	АктРассмотренияВозвратаТовары.СтрокаЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТовары.СтрокаЗаявки
	|ПОМЕСТИТЬ втСтрокиЗаявки
	|ИЗ
	|	втТовары КАК втТовары
	|ГДЕ
	|	втТовары.СтрокаЗаявки <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТовары.Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	втТовары КАК втТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
	|	СУММА(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Количество) КАК Количество
	|ПОМЕСТИТЬ РазмещениеСтрокПрихода
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтрокиЗаявки КАК втСтрокиЗаявки
	|		ПО (втСтрокиЗаявки.СтрокаЗаявки = ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки)
	|		Левое Соединение Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ПоступлениеТоваровУслугТовары.Ссылка = ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка
	|			И ПоступлениеТоваровУслугТовары.СтрокаПрихода = ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
	|	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазмещениеСтрокПрихода.Ссылка
	|ПОМЕСТИТЬ ДокументыПриходаРазмещений
	|ИЗ
	|	РазмещениеСтрокПрихода КАК РазмещениеСтрокПрихода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода,
	|	СУММА(ПоступлениеТоваровУслугПричиныОтказов.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТОтказы
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ПричиныОтказов КАК ПоступлениеТоваровУслугПричиныОтказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПриходаРазмещений КАК ДокументыПриходаРазмещений
	|		ПО (ДокументыПриходаРазмещений.Ссылка = ПоступлениеТоваровУслугПричиныОтказов.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазмещениеСтрокПрихода.Ссылка,
	|	РазмещениеСтрокПрихода.Номенклатура,
	|	РазмещениеСтрокПрихода.СтрокаПрихода,
	|	РазмещениеСтрокПрихода.Количество - ЕСТЬNULL(ВТОтказы.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Цена, 0) КАК ЦенаСебестоимости
	|ПОМЕСТИТЬ РазмещенныеПартии
	|ИЗ
	|	РазмещениеСтрокПрихода КАК РазмещениеСтрокПрихода
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО РазмещениеСтрокПрихода.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
	|			И (ПоступлениеТоваровУслугТовары.Ссылка = РазмещениеСтрокПрихода.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтказы КАК ВТОтказы
	|		ПО (ВТОтказы.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода)
	|ГДЕ
	|	РазмещениеСтрокПрихода.Количество - ЕСТЬNULL(ВТОтказы.Количество, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииТоваров.Номенклатура,
	|	СУММА(ПартииТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ СписанныеПартии
	|ИЗ
	|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (втНоменклатура.Номенклатура = ПартииТоваров.Номенклатура)
	|ГДЕ
	|	ПартииТоваров.Регистратор = &ДокументПродажи
	|	И ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	|	И НЕ ПартииТоваров.ВнутреннееПеремещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваров.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СобытияАктовРассмотренияВозврата.АктРассмотренияВозврата
	|ПОМЕСТИТЬ втОтказныеАкты
	|ИЗ
	|	РегистрСведений.СобытияАктовРассмотренияВозврата КАК СобытияАктовРассмотренияВозврата
	|ГДЕ
	|	СобытияАктовРассмотренияВозврата.СтатусДокумента В(&СтатусыАРВОтказ)
	|	И СобытияАктовРассмотренияВозврата.АктРассмотренияВозврата.СтатусДокумента = &РаботаЗавершена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтказныеАкты.АктРассмотренияВозврата
	|ПОМЕСТИТЬ втОтказныеАктыБезВозвратов
	|ИЗ
	|	втОтказныеАкты КАК ОтказныеАкты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО (ВозвратТоваровОтПокупателя.АктРассмотренияВозврата = ОтказныеАкты.АктРассмотренияВозврата)
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.АктРассмотренияВозврата ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""КоличествоВРТУ"" КАК Тип,
	|	СписанныеПартии.Номенклатура,
	|	СписанныеПартии.Количество
	|ПОМЕСТИТЬ ОстаткиПартийПоТипу
	|ИЗ
	|	СписанныеПартии КАК СписанныеПартии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоВозвращено"",
	|	АктРассмотренияВозвратаТовары.Номенклатура,
	|	-ВЫБОР
	|		КОГДА АктРассмотренияВозвратаТовары.Количество = 0
	|			ТОГДА АктРассмотренияВозвратаТовары.КоличествоПлан
	|		ИНАЧЕ АктРассмотренияВозвратаТовары.Количество
	|	КОНЕЦ
	|ИЗ
	|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (втНоменклатура.Номенклатура = АктРассмотренияВозвратаТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО (ВозвратТоваровОтПокупателя.АктРассмотренияВозврата = АктРассмотренияВозвратаТовары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтказныеАктыБезВозвратов КАК втОтказныеАктыБезВозвратов
	|		ПО (втОтказныеАктыБезВозвратов.АктРассмотренияВозврата = АктРассмотренияВозвратаТовары.Ссылка)
	|ГДЕ
	|	АктРассмотренияВозвратаТовары.Ссылка.Дата < &Дата
	|	И АктРассмотренияВозвратаТовары.Ссылка.Проведен
	|	И НЕ АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
	|	И АктРассмотренияВозвратаТовары.Ссылка.ДокументПродажи = &ДокументПродажи
	|	И НЕ АктРассмотренияВозвратаТовары.Ссылка.СтатусДокумента В (&СтатусыАРВОтказ)
	|	И НЕ ЕСТЬNULL(ВозвратТоваровОтПокупателя.СтатусДокумента, ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый)) В (&СтатусВозвратОтказ)
	|	И втОтказныеАктыБезВозвратов.АктРассмотренияВозврата ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоВозвращено"",
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	-ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.Количество = 0
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.КоличествоПлан
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Количество
	|	КОНЕЦ
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (втНоменклатура.Номенклатура = ВозвратТоваровОтПокупателяТовары.Номенклатура)
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата < &Дата
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка.ДокументОснование = &ДокументПродажи
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
	|	И НЕ ВозвратТоваровОтПокупателяТовары.СтрокаПрихода = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазмещенныеПартии.Номенклатура,
	|	РазмещенныеПартии.СтрокаПрихода,
	|	РазмещенныеПартии.Количество
	|ПОМЕСТИТЬ ОстаткиРазмещенныхПартий
	|ИЗ
	|	РазмещенныеПартии КАК РазмещенныеПартии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктРассмотренияВозвратаТовары.Номенклатура,
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода,
	|	-ВЫБОР
	|		КОГДА АктРассмотренияВозвратаТовары.Количество = 0
	|			ТОГДА АктРассмотренияВозвратаТовары.КоличествоПлан
	|		ИНАЧЕ АктРассмотренияВозвратаТовары.Количество
	|	КОНЕЦ
	|ИЗ
	|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (втНоменклатура.Номенклатура = АктРассмотренияВозвратаТовары.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтрокиЗаявки КАК втСтрокиЗаявки
	|		ПО (втСтрокиЗаявки.СтрокаЗаявки = АктРассмотренияВозвратаТовары.СтрокаЗаявки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО (ВозвратТоваровОтПокупателя.АктРассмотренияВозврата = АктРассмотренияВозвратаТовары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтказныеАктыБезВозвратов КАК втОтказныеАктыБезВозвратов
	|		ПО (втОтказныеАктыБезВозвратов.АктРассмотренияВозврата = АктРассмотренияВозвратаТовары.Ссылка)
	|ГДЕ
	|	АктРассмотренияВозвратаТовары.Ссылка.Дата < &Дата
	|	И АктРассмотренияВозвратаТовары.Ссылка.Проведен
	|	И НЕ АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
	|	И НЕ АктРассмотренияВозвратаТовары.Ссылка.СтатусДокумента В (&СтатусыАРВОтказ)
	|	И НЕ ЕСТЬNULL(ВозвратТоваровОтПокупателя.СтатусДокумента, ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый)) В (&СтатусВозвратОтказ)
	|	И втОтказныеАктыБезВозвратов.АктРассмотренияВозврата ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода,
	|	-ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.Количество = 0
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.КоличествоПлан
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Количество
	|	КОНЕЦ
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (втНоменклатура.Номенклатура = ВозвратТоваровОтПокупателяТовары.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтрокиЗаявки КАК втСтрокиЗаявки
	|		ПО (втСтрокиЗаявки.СтрокаЗаявки = ВозвратТоваровОтПокупателяТовары.СтрокаЗаявки)
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата < &Дата
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
	|	И НЕ ВозвратТоваровОтПокупателяТовары.СтрокаПрихода = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиРазмещенныхПартий.Номенклатура,
	|	ОстаткиРазмещенныхПартий.СтрокаПрихода,
	|	СУММА(ОстаткиРазмещенныхПартий.Количество) КАК Количество
	|ПОМЕСТИТЬ ОстаткиПартий
	|ИЗ
	|	ОстаткиРазмещенныхПартий КАК ОстаткиРазмещенныхПартий
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиРазмещенныхПартий.Номенклатура,
	|	ОстаткиРазмещенныхПартий.СтрокаПрихода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПартийПоТипу.Номенклатура,
	|	СУММА(ОстаткиПартийПоТипу.Количество) КАК Количество
	|ИЗ
	|	ОстаткиПартийПоТипу КАК ОстаткиПартийПоТипу
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартийПоТипу.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиПартийПоТипу.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПартийПоТипу.Тип,
	|	ОстаткиПартийПоТипу.Номенклатура,
	|	СУММА(ОстаткиПартийПоТипу.Количество) КАК Количество
	|ИЗ
	|	ОстаткиПартийПоТипу КАК ОстаткиПартийПоТипу
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартийПоТипу.Тип,
	|	ОстаткиПартийПоТипу.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПартий.Номенклатура,
	|	ОстаткиПартий.СтрокаПрихода.ТорговаяТочка.Владелец КАК Поставщик,
	|	ОстаткиПартий.СтрокаПрихода,
	|	ВЫБОР
	|		КОГДА втТовары.Поставщик ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокСписания,
	|	МАКСИМУМ(ЕСТЬNULL(РазмещенныеПартии.ЦенаСебестоимости, 0)) КАК ЦенаСебестоимости,
	|	СУММА(ОстаткиПартий.Количество) КАК Количество
	|ИЗ
	|	ОстаткиПартий КАК ОстаткиПартий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РазмещенныеПартии КАК РазмещенныеПартии
	|		ПО ОстаткиПартий.Номенклатура = РазмещенныеПартии.Номенклатура
	|			И ОстаткиПартий.СтрокаПрихода = РазмещенныеПартии.СтрокаПрихода
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО ОстаткиПартий.Номенклатура = втТовары.Номенклатура
	|			И ОстаткиПартий.СтрокаПрихода.ТорговаяТочка.Владелец = втТовары.Поставщик
	|ГДЕ
	|	НЕ ОстаткиПартий.СтрокаПрихода = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартий.Номенклатура,
	|	ОстаткиПартий.СтрокаПрихода,
	|	ВЫБОР
	|		КОГДА втТовары.Поставщик ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ОстаткиПартий.СтрокаПрихода.ТорговаяТочка.Владелец
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиПартий.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА втТовары.Поставщик ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ОстаткиПартий.СтрокаПрихода.Дата";
	
	
	Запрос.УстановитьПараметр("Дата", ?(Не ЗначениеЗаполнено(Дата), ТекущаяДата(), Дата));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	Запрос.УстановитьПараметр("ТЧТовары", Товары.Выгрузить());
	
	СтатусыАРВОтказ = Новый Массив;
	СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_ГВОтказ);
	СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_ГПРКОтказ);
	СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_КРООтказ);
	СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_Отменен);
	Запрос.УстановитьПараметр("СтатусыАРВОтказ", СтатусыАРВОтказ);
	
	Запрос.УстановитьПараметр("РаботаЗавершена", Справочники.СтатусыДокументов.АРВ_РаботаЗавершена);
	
	СтатусВозвратОтказ = Новый Массив;
	СтатусВозвратОтказ.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ);
	СтатусВозвратОтказ.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтменен);
	Запрос.УстановитьПараметр("СтатусВозвратОтказ", СтатусВозвратОтказ);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВозвращаемоеЗначение = Новый структура();
	ВозвращаемоеЗначение.Вставить("ОстаткиПоНоменклатуре", 	РезультатыЗапроса[РезультатыЗапроса.Количество()-3].Выгрузить());
	ВозвращаемоеЗначение.Вставить("ОстаткиПоТипу", 			РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить());
	ВозвращаемоеЗначение.Вставить("ОстаткиПартий", 			РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить());
	
	//В ОстаткиПартий количество больше списанного по рту (сюда попадают строки размещения из разных ПТУ)
	//Списание идет в переделах списанного рту количества(ОстаткиПоНоменклатуре) 	
	
	Возврат ВозвращаемоеЗначение;                                                	
	
КонецФункции   

//Определяем сколько осталось по партиям, по партиям, списанными РТУ
Функция ОстаткиПартийПоРТУ() Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ОстаткиПартийПоРТУ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧТовары.Номенклатура,
	|	ТЧТовары.СтрокаПрихода,
	|	ТЧТовары.СтрокаЗаявки,
	|	ТЧТовары.Количество
	|ПОМЕСТИТЬ ТЧТовары
	|ИЗ
	|	&ТЧТовары КАК ТЧТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктРассмотренияВозвратаТовары.Номенклатура,
	|	АктРассмотренияВозвратаТовары.СтрокаЗаявки,
	|	МАКСИМУМ(ИдентификаторыСтрокЗаявок.Поставщик) КАК Поставщик,
	|	СУММА(АктРассмотренияВозвратаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	ТЧТовары КАК АктРассмотренияВозвратаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	|		ПО (ИдентификаторыСтрокЗаявок.Ссылка = АктРассмотренияВозвратаТовары.СтрокаЗаявки)
	|
	|СГРУППИРОВАТЬ ПО
	|	АктРассмотренияВозвратаТовары.Номенклатура,
	|	АктРассмотренияВозвратаТовары.СтрокаЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.СтрокаПрихода,
	|	СУММА(ПартииТоваров.Количество) КАК Количество,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПартииТоваров.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ПартииТоваров.СуммаРубли / ПартииТоваров.Количество
	|		КОНЕЦ) КАК ЦенаСебестоимости
	|ПОМЕСТИТЬ СписанныеПартии
	|ИЗ
	|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО (втТовары.Номенклатура = ПартииТоваров.Номенклатура)
	|ГДЕ
	|	ПартииТоваров.Регистратор = &ДокументПродажи
	|	И ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	|	И НЕ ПартииТоваров.ВнутреннееПеремещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.СтрокаПрихода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеПартии.Номенклатура,
	|	СписанныеПартии.СтрокаПрихода
	|ПОМЕСТИТЬ СписанныеПартииБезСтоимости
	|ИЗ
	|	СписанныеПартии КАК СписанныеПартии
	|ГДЕ
	|	СписанныеПартии.ЦенаСебестоимости = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПартииТоваров.Период) КАК Период,
	|	ПартииТоваров.СтрокаПрихода,
	|	ПартииТоваров.Номенклатура
	|ПОМЕСТИТЬ ПоследниеПоступления
	|ИЗ
	|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписанныеПартииБезСтоимости КАК СписанныеПартииБезСтоимости
	|		ПО (СписанныеПартииБезСтоимости.Номенклатура = ПартииТоваров.Номенклатура)
	|			И (СписанныеПартииБезСтоимости.СтрокаПрихода = ПартииТоваров.СтрокаПрихода)
	|ГДЕ
	|	ПартииТоваров.Период < &Дата
	|	И НЕ ПартииТоваров.СуммаРубли = 0
	|	И НЕ ПартииТоваров.Количество = 0
	|	И ПартииТоваров.Активность
	|	И ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НЕ ПартииТоваров.СтрокаПрихода = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.СтрокаПрихода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.СтрокаПрихода,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПартииТоваров.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ПартииТоваров.СуммаРубли / ПартииТоваров.Количество КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК Цена
	|ПОМЕСТИТЬ ЦеныПоследнихПоступлений
	|ИЗ
	|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеПоступления КАК ПоследниеПоступления
	|		ПО (ПоследниеПоступления.Период = ПартииТоваров.Период)
	|			И (ПоследниеПоступления.Номенклатура = ПартииТоваров.Номенклатура)
	|			И (ПоследниеПоступления.СтрокаПрихода = ПартииТоваров.СтрокаПрихода)
	|ГДЕ
	|	ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваров.Номенклатура,
	|	ПартииТоваров.СтрокаПрихода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СобытияАктовРассмотренияВозврата.АктРассмотренияВозврата
	|ПОМЕСТИТЬ втОтказныеАкты
	|ИЗ
	|	РегистрСведений.СобытияАктовРассмотренияВозврата КАК СобытияАктовРассмотренияВозврата
	|ГДЕ
	|	СобытияАктовРассмотренияВозврата.СтатусДокумента В(&СтатусыАРВОтказ)
	|	И СобытияАктовРассмотренияВозврата.АктРассмотренияВозврата.СтатусДокумента = &РаботаЗавершена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтказныеАкты.АктРассмотренияВозврата
	|ПОМЕСТИТЬ втОтказныеАктыБезВозвратов
	|ИЗ
	|	втОтказныеАкты КАК ОтказныеАкты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО (ВозвратТоваровОтПокупателя.АктРассмотренияВозврата = ОтказныеАкты.АктРассмотренияВозврата)
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.АктРассмотренияВозврата ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""КоличествоВРТУ"" КАК Тип,
	|	СписанныеПартии.Номенклатура,
	|	СписанныеПартии.СтрокаПрихода,
	|	СписанныеПартии.Количество
	|ПОМЕСТИТЬ ОстаткиПартийПоТипу
	|ИЗ
	|	СписанныеПартии КАК СписанныеПартии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоВозвращено"",
	|	АктРассмотренияВозвратаТовары.Номенклатура,
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода,
	|	-ВЫБОР
	|		КОГДА АктРассмотренияВозвратаТовары.Количество = 0
	|			ТОГДА АктРассмотренияВозвратаТовары.КоличествоПлан
	|		ИНАЧЕ АктРассмотренияВозвратаТовары.Количество
	|	КОНЕЦ
	|ИЗ
	|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО (втТовары.Номенклатура = АктРассмотренияВозвратаТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО (ВозвратТоваровОтПокупателя.АктРассмотренияВозврата = АктРассмотренияВозвратаТовары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтказныеАктыБезВозвратов КАК втОтказныеАктыБезВозвратов
	|		ПО (втОтказныеАктыБезВозвратов.АктРассмотренияВозврата = АктРассмотренияВозвратаТовары.Ссылка)
	|ГДЕ
	|	АктРассмотренияВозвратаТовары.Ссылка.Дата < &Дата
	|	И АктРассмотренияВозвратаТовары.Ссылка.Проведен
	|	И НЕ АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
	|	И АктРассмотренияВозвратаТовары.Ссылка.ДокументПродажи = &ДокументПродажи
	|	И НЕ АктРассмотренияВозвратаТовары.Ссылка.СтатусДокумента В (&СтатусыАРВОтказ)
	|	И НЕ ЕСТЬNULL(ВозвратТоваровОтПокупателя.СтатусДокумента, ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый)) В (&СтатусВозвратОтказ)
	|	И втОтказныеАктыБезВозвратов.АктРассмотренияВозврата ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КоличествоВозвращено"",
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода,
	|	-ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.Количество = 0
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.КоличествоПлан
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Количество
	|	КОНЕЦ
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО (втТовары.Номенклатура = ВозвратТоваровОтПокупателяТовары.Номенклатура)
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата < &Дата
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка.ДокументОснование = &ДокументПродажи
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
	|	И НЕ ВозвратТоваровОтПокупателяТовары.СтрокаПрихода = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПартийПоТипу.Номенклатура,
	|	ОстаткиПартийПоТипу.СтрокаПрихода,
	|	СУММА(ОстаткиПартийПоТипу.Количество) КАК Количество
	|ПОМЕСТИТЬ ОстаткиПартий
	|ИЗ
	|	ОстаткиПартийПоТипу КАК ОстаткиПартийПоТипу
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартийПоТипу.Номенклатура,
	|	ОстаткиПартийПоТипу.СтрокаПрихода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПартийПоТипу.Номенклатура,
	|	СУММА(ОстаткиПартийПоТипу.Количество) КАК Количество
	|ИЗ
	|	ОстаткиПартийПоТипу КАК ОстаткиПартийПоТипу
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартийПоТипу.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиПартийПоТипу.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПартийПоТипу.Тип,
	|	ОстаткиПартийПоТипу.Номенклатура,
	|	СУММА(ОстаткиПартийПоТипу.Количество) КАК Количество
	|ИЗ
	|	ОстаткиПартийПоТипу КАК ОстаткиПартийПоТипу
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартийПоТипу.Тип,
	|	ОстаткиПартийПоТипу.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПартий.Номенклатура,
	|	ОстаткиПартий.СтрокаПрихода,
	|	ОстаткиПартий.СтрокаПрихода.ТорговаяТочка.Владелец КАК Поставщик,
	|	ВЫБОР
	|		КОГДА втТовары.Поставщик ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокСписания,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА ЕСТЬNULL(СписанныеПартии.ЦенаСебестоимости, 0) = 0
	|					ТОГДА ЦеныПоследнихПоступлений.Цена
	|				ИНАЧЕ СписанныеПартии.ЦенаСебестоимости
	|			КОНЕЦ, 0)) КАК ЦенаСебестоимости,
	|	СУММА(ОстаткиПартий.Количество) КАК Количество
	|ИЗ
	|	ОстаткиПартий КАК ОстаткиПартий
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписанныеПартии КАК СписанныеПартии
	|		ПО ОстаткиПартий.Номенклатура = СписанныеПартии.Номенклатура
	|			И ОстаткиПартий.СтрокаПрихода = СписанныеПартии.СтрокаПрихода
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО ОстаткиПартий.Номенклатура = втТовары.Номенклатура
	|			И ОстаткиПартий.СтрокаПрихода.ТорговаяТочка.Владелец = втТовары.Поставщик
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныПоследнихПоступлений КАК ЦеныПоследнихПоступлений
	|		ПО ОстаткиПартий.Номенклатура = ЦеныПоследнихПоступлений.Номенклатура
	|			И ОстаткиПартий.СтрокаПрихода = ЦеныПоследнихПоступлений.СтрокаПрихода
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартий.Номенклатура,
	|	ОстаткиПартий.СтрокаПрихода,
	|	ВЫБОР
	|		КОГДА втТовары.Поставщик ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ОстаткиПартий.СтрокаПрихода.ТорговаяТочка.Владелец
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиПартий.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА втТовары.Поставщик ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	
	Запрос.УстановитьПараметр("Дата", ?(Не ЗначениеЗаполнено(Дата), ТекущаяДата(), Дата));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	Запрос.УстановитьПараметр("ТЧТовары", Товары.Выгрузить());
	
	СтатусыАРВОтказ = Новый Массив;
	СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_ГВОтказ);
	СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_ГПРКОтказ);
	СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_КРООтказ);
	СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_Отменен);
	Запрос.УстановитьПараметр("СтатусыАРВОтказ", СтатусыАРВОтказ);
	
	Запрос.УстановитьПараметр("РаботаЗавершена", Справочники.СтатусыДокументов.АРВ_РаботаЗавершена);
	
	СтатусВозвратОтказ = Новый Массив;
	СтатусВозвратОтказ.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ);
	СтатусВозвратОтказ.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтменен);
	Запрос.УстановитьПараметр("СтатусВозвратОтказ", СтатусВозвратОтказ);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВозвращаемоеЗначение = Новый структура();
	ВозвращаемоеЗначение.Вставить("ОстаткиПоНоменклатуре", 	РезультатыЗапроса[РезультатыЗапроса.Количество()-3].Выгрузить());
	ВозвращаемоеЗначение.Вставить("ОстаткиПоТипу", 			РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить());
	ВозвращаемоеЗначение.Вставить("ОстаткиПартий", 			РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить());
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ОбработкаЗаполнения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	КодВозврата = Справочники.КодыВозврата.ВПродажуНаСклад;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ДокументПродажи = ДанныеЗаполнения;
		Дата = ТекущаяДата();
		СтатусДокумента = Справочники.СтатусыДокументов.АРВ_Новый;
		
		РеквизитыДокументаПродажи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПродажи, "СтатусДокумента, Организация, Контрагент, ДоговорКонтрагента, СуммаВключаетНДС, УчитыватьНДС");
		
		Если НЕ ВозвратыОтПокупателяСервер.РазрешитьРучноеРедактированиеАРВ()
			И РеквизитыДокументаПродажи.СтатусДокумента <> Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен Тогда
			Комментарий = "#НеОткрыватьФорму# "+"Акт возврата можно создавать только для реализации в статусе Отгружен!";
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыДокументаПродажи,, "СтатусДокумента");
		
		//Делаем запрос к табчасти РТУ, тк движений по партиям на данный момент еще может не быть
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ втСписанныеПартии
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &ДокументПродажи
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугТовары.Номенклатура
		|
		|ИМЕЮЩИЕ
		|	СУММА(РеализацияТоваровУслугТовары.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктРассмотренияВозвратаТовары.Номенклатура,
		|	ВЫБОР
		|		КОГДА АктРассмотренияВозвратаТовары.Количество = 0
		|			ТОГДА АктРассмотренияВозвратаТовары.КоличествоПлан
		|		ИНАЧЕ АктРассмотренияВозвратаТовары.Количество
		|	КОНЕЦ КАК Количество
		|ПОМЕСТИТЬ втТоварыПоАРВ
		|ИЗ
		|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписанныеПартии КАК СписанныеПартии
		|		ПО (СписанныеПартии.Номенклатура = АктРассмотренияВозвратаТовары.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|		ПО (ВозвратТоваровОтПокупателя.АктРассмотренияВозврата = АктРассмотренияВозвратаТовары.Ссылка)
		|ГДЕ
		|	АктРассмотренияВозвратаТовары.Ссылка.Дата < &Дата
		|	И АктРассмотренияВозвратаТовары.Ссылка.Проведен
		|	И АктРассмотренияВозвратаТовары.Ссылка.ДокументПродажи = &ДокументПродажи
		|	И НЕ АктРассмотренияВозвратаТовары.Ссылка.СтатусДокумента В (&СтатусыАРВОтказ)
		|	И НЕ ЕСТЬNULL(ВозвратТоваровОтПокупателя.СтатусДокумента, ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый)) В (&СтатусВозвратОтказ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСписанныеПартии.Номенклатура,
		|	втСписанныеПартии.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	втСписанныеПартии.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		|	втСписанныеПартии.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	втСписанныеПартии.Количество - ЕСТЬNULL(втТоварыПоАРВ.Количество, 0) КАК КоличествоПлан
		|ИЗ
		|	втСписанныеПартии КАК втСписанныеПартии
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыПоАРВ КАК втТоварыПоАРВ
		|		ПО втСписанныеПартии.Номенклатура = втТоварыПоАРВ.Номенклатура
		|ГДЕ
		|	втСписанныеПартии.Количество - ЕСТЬNULL(втТоварыПоАРВ.Количество, 0) > 0";
		
		
		Запрос.УстановитьПараметр("Дата", ?(Не ЗначениеЗаполнено(Дата), ТекущаяДата(), Дата));
		Запрос.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
		
		СтатусыАРВОтказ = Новый Массив;
		СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_ГВОтказ);
		СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_ГПРКОтказ);
		СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_КРООтказ);
		СтатусыАРВОтказ.Добавить(Справочники.СтатусыДокументов.АРВ_Отменен);
		Запрос.УстановитьПараметр("СтатусыАРВОтказ", СтатусыАРВОтказ);
		
		СтатусВозвратОтказ = Новый Массив;
		СтатусВозвратОтказ.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ);
		СтатусВозвратОтказ.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтменен);
		Запрос.УстановитьПараметр("СтатусВозвратОтказ", СтатусВозвратОтказ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
		//Для каждого СтрокаОснования Из ДанныеЗаполнения.Товары Цикл
		//	Если СтрокаОснования.Количество <= 0 Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	НоваяСтрока = Товары.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснования,, "Количество");
		//	НоваяСтрока.КоличествоПлан = СтрокаОснования.Количество;
		//	
		//КонецЦикла;
		
		ПроверитьЗаполнитьПартииВТабличнойЧасти(,,Ложь);
		ЗаполнитьЦеныПоДокументуРеализации(,,Ложь);
		ЗаполнитьСтрокиЗаявкиПоДокументуПродажи();
		
		Если НЕ ВозвратыОтПокупателяСервер.РазрешитьРучноеРедактированиеАРВ()
			И Справочники.УчетныеЗаписиСайта.ДанныеУчетнойЗаписиКонтрагента(Контрагент).УчетнаяЗапись <> Неопределено Тогда
			Комментарий = "#НеОткрыватьФорму# "+Документы.АктРассмотренияВозврата.ТекстОшибкиЕстьЛогинКонтрагента();
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры


#КонецОбласти

#Область ЗаполнениеПоВозвратуОтПокупателя

//Тип количества = "Принятое" или "Размещенное"
Функция ОбновитьКоличествоПоВозвратуОтПокупателя(ВозвратОтПокупателяСсылка, ТипКоличества = "Принятое") Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ОбновитьКоличествоПоВозвратуОтПокупателя";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	КоличествоИзменено = Ложь;
	
	ИмяПоля = "";
	Если ТипКоличества = "Принятое" Тогда
		ИмяПоля = "Количество";
	ИначеЕсли ТипКоличества = "Размещенное" Тогда 
		ИмяПоля = "КоличествоРазмещено";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяПоля) Тогда
		ВызватьИсключение "Задан неверный тип количества для пересчета!";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК Количество,
		|	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода";
	
	Запрос.УстановитьПараметр("Ссылка", ВозвратОтПокупателяСсылка);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Количество", ИмяПоля);
	
	ТоварыВозврата = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ ИЗ Товары Цикл
		
		СтрокиВозврата = ТоварыВозврата.НайтиСтроки(Новый Структура("Номенклатура, СтрокаПрихода", СтрокаТЧ.Номенклатура, СтрокаТЧ.СтрокаПрихода));
		
		КоличествоСтарое = СтрокаТЧ[ИмяПоля];
		
		СтрокаТЧ[ИмяПоля] = 0;
		Для каждого СтрокаВозврата Из СтрокиВозврата Цикл
			СтрокаТЧ[ИмяПоля] = СтрокаТЧ[ИмяПоля] + СтрокаВозврата[ИмяПоля];
		КонецЦикла;
		
		Если КоличествоСтарое <> СтрокаТЧ[ИмяПоля] Тогда
			КоличествоИзменено = Истина;			
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуАРВ");
		СтруктураДействий.Вставить("РассчитатьСуммуНДС", Новый Структура("УчитыватьНДС, СуммаВключаетНДС", УчитыватьНДС, СуммаВключаетНДС));			
		СтруктураДействий.Вставить("РассчитатьСуммуНДСПлан", Новый Структура("УчитыватьНДС, СуммаВключаетНДС", УчитыватьНДС, СуммаВключаетНДС));			
		СтруктураДействий.Вставить("ПересчитатьСебестоимость",  ?(СтрокаТЧ.Количество >0, "Количество", "КоличествоПлан"));
		СтруктураДействий.Вставить("ПересчитатьЦенуПоставщикуПослеУценки");
		ОбработкаТабличныхЧастей.ПересчитатьСтрокуТабличнойЧасти(СтрокаТЧ, СтруктураДействий, Неопределено); 
		
	КонецЦикла;
	
	Возврат КоличествоИзменено;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура УстановитьСтатусПроверкиБухгалтерией()
	
	СтатусПроверкиБухгалтерией = Документы.АктРассмотренияВозврата.СтатусПроверкиБухгалтерией(СтатусПроверкиДокументовПокупателя, СтатусПроверкиДокументовПоставщика);
	
КонецПроцедуры



#КонецОбласти


#Область СохранениевРегистрСобытий

Процедура ОтразитьИзменениеСтатусаПриЗаписи() Экспорт
	
	Если ДополнительныеСвойства.РеквизитыСсылкиПередЗаписью.СтатусДокумента
			<> Ссылка.СтатусДокумента Тогда
			
		ПараметрыСобытия = РегистрыСведений.СобытияАктовРассмотренияВозврата.ИнициализироватьСтруктуруПараметровСобытия();
		ПараметрыСобытия.Описание = "Изменение статуса документа";
		ЗаполнитьЗначенияСвойств(ПараметрыСобытия, Ссылка);
		ПараметрыСобытия.ЭтоНовый = ДополнительныеСвойства.ЭтоНовый;
		ПараметрыСобытия.СтарыйСтатус = ДополнительныеСвойства.РеквизитыСсылкиПередЗаписью.СтатусДокумента;
		РегистрыСведений.СобытияАктовРассмотренияВозврата.ДобавитьСобытие(Ссылка, ПараметрыСобытия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьВИсториюИзмененияПриЗаписи() Экспорт
	
	ОписаниеИзменения = "";
	ЭтоНовый = Ложь;
	Если ДополнительныеСвойства.Свойство("СохранитьВИсториюИзменения", ОписаниеИзменения) Тогда
		
		ПараметрыСобытия = РегистрыСведений.СобытияАктовРассмотренияВозврата.ИнициализироватьСтруктуруПараметровСобытия();
		ПараметрыСобытия.Описание = ОписаниеИзменения;
		ЗаполнитьЗначенияСвойств(ПараметрыСобытия, Ссылка);
		
		Если ОписаниеИзменения = "РучноеИзменениеРеквизита" Тогда //Сохраним запись в историю, если реквизиты меняли руками на форме
			
			СтруктураРеквизитов = Документы.АктРассмотренияВозврата.СтруктураРеквизитовДляКонтроляИстории();
			ЗаполнитьСтруктуруРеквизитовКонтроляИсторииПоСсылке(СтруктураРеквизитов, Ссылка);

			//ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Ссылка);
			
			ПараметрыСобытия.Описание = ОписаниеИзмененныхРеквизитовДляИстории(ДополнительныеСвойства.РеквизитыСсылкиПередЗаписью, СтруктураРеквизитов, ПараметрыСобытия);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыСобытия.Описание) Тогда
			РегистрыСведений.СобытияАктовРассмотренияВозврата.ДобавитьСобытие(Ссылка, ПараметрыСобытия);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый) И ЭтоНовый Тогда //Сохраним запись в историю для нового документа
		
		ПараметрыСобытия = РегистрыСведений.СобытияАктовРассмотренияВозврата.ИнициализироватьСтруктуруПараметровСобытия();
		ПараметрыСобытия.Описание = "Создание документа";
		ЗаполнитьЗначенияСвойств(ПараметрыСобытия, Ссылка);
		РегистрыСведений.СобытияАктовРассмотренияВозврата.ДобавитьСобытие(Ссылка, ПараметрыСобытия);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеИзмененныхРеквизитовДляИстории(РеквизитыСтарые, РеквизитыНовые, ПараметрыСобытия)
	
	Описание = "";	
	
	ИменаРеквизитов = Документы.АктРассмотренияВозврата.ИменаРеквизитовДляКонтроляИстории();

	Для каждого ЭлСписка Из ИменаРеквизитов Цикл
		
		Если НЕ РеквизитыСтарые[ЭлСписка.Значение] = РеквизитыНовые[ЭлСписка.Значение] Тогда
			
			Описание = Описание + ?(ЗначениеЗаполнено(Описание), Символы.ПС, "") + 
							"Изменен реквизит: """+ЭлСписка.Представление+""", было: "+РеквизитыСтарые[ЭлСписка.Значение]+", стало: "+РеквизитыНовые[ЭлСписка.Значение];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти


#Область Печать

Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_Печать";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда		
		Выполнить(лЗамена);		
		Возврат;		
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если ЭтоНовый() Тогда
		Сообщить("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Сообщить("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	ТабДокумент = Документы.АктРассмотренияВозврата.ТабличныйДокументПечатнойФормы(ИмяМакета, Ссылка);

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект));
	
КонецПроцедуры // Печать

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
  
	лКлючАлгоритма = "Документ_АктРассмотренияВозврата_МодульОбъекта_ПолучитьСтруктуруПечатныхФорм";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("АктПриемаПередачи", "Акт приема-передачи");
	СтруктураМакетов.Вставить("Претензия", "Претензия");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецОбласти




