Перем мВалютаРегламентированногоУчета Экспорт;

// Валюта курс и кратность для пересчета регламентированных сумм
Перем мВалютаУпрУчета;
Перем мКурсУпрУчета;
Перем мКратностьУпрУчета;

Перем мПорядокСписанияПартий;           // (Общ)

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мУдалятьДвижения;

Перем мТекущийВидСклада Экспорт;

Перем мРазрешитьНулевыеЦеныВРознице Экспорт;

Перем мОтражатьВРегламентированномУчете Экспорт;

Перем мМенеджерОбъекта;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьОприходованияТоваров и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиОприходованияТоваров() Экспорт
	
	ПараметрыПечати = Новый Структура;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Артикул");
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Код");
		ТекстКодАртикул = "Код";
	Иначе
		ПараметрыПечати.Вставить("ВыводитьКоды", Ложь);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "");
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ВыводитьКоличествоМест", Товары.Итог("КоличествоМест") > 0); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК Склад,
	|	Основание,
	|	Константы.ВалютаУправленческогоУчета КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК СкладНТТ,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное  КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
	|			ИНАЧЕ Цена
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице
	|			ИНАЧЕ Сумма
	|		КОНЕЦ КАК Сумма,
	|		ХарактеристикаНоменклатуры       КАК Характеристика,
	|		СерияНоменклатуры                КАК Серия
	|	)
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров,
	|	Константы
	|ГДЕ
	|	ОприходованиеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	// Выводим шапку накладной
	ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Оприходование товаров"));

	ПараметрыПечати.Вставить("ПредставлениеПолучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("Получатель", Шапка.Организация);
	ПараметрыПечати.Вставить("ПредставлениеСклада", Шапка.Склад);
	ПараметрыПечати.Вставить("ПредставлениеОснования", Шапка.Основание);
	
	// Вывести табличную часть
	Позиции = Новый Массив;
	СуммаИтого    = 0;

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		
		
		ПараметрыПозиции.Вставить("НомерСтроки", ВыборкаСтрокТовары.НомерСтроки);
		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары));
		ПараметрыПозиции.Вставить("КоличествоМест", ВыборкаСтрокТовары.КоличествоМест);
		ПараметрыПозиции.Вставить("ЕдиницаИзмеренияМест", ВыборкаСтрокТовары.ЕдиницаИзмеренияМест);
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТовары.Цена);
		ПараметрыПозиции.Вставить("Сумма", ВыборкаСтрокТовары.Сумма);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ПараметрыПозиции.Вставить("КодАртикул", ВыборкаСтрокТовары.КодАртикул);
		КонецЕсли;
		
		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		Позиции.Добавить(ПараметрыПозиции);
		
		СуммаИтого = СуммаИтого + ВыборкаСтрокТовары.Сумма;
	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	// Вывести Итого
	ПараметрыПечати.Вставить("Всего", ОбщегоНазначения.ФорматСумм(СуммаИтого));

	// Вывести Сумму прописью
	ПараметрыПечати.Вставить("ИтоговаяСтрока", "Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаИтого, ?(Шапка.СкладНТТ, ПолучитьВалютуРегламентированногоУчета(), Шапка.ВалютаДокумента)));
	ПараметрыПечати.Вставить("СуммаПрописью", ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого,  ?(Шапка.СкладНТТ, ПолучитьВалютуРегламентированногоУчета(), Шапка.ВалютаДокумента)));

	#Если ВнешнееСоединение Тогда
	WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПечати);
	#КонецЕсли
	
	Возврат ПараметрыПечати;

КонецФункции //ПолучитьДанныеДляПечатиОприходованияТоваров()

#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОприходованияТоваров()
	
	ПараметрыПечати = ПолучитьДанныеДляПечатиОприходованияТоваров();	

	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Если ПараметрыПечати.ВыводитьКоличествоМест Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОприходованиеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = ПараметрыПечати.ИмяКолонкиКодов;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);

		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОприходованияТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Ведомость" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОприходованияТоваров();
		
	ИначеЕсли ИмяМакета = "ПриходНаРозничныеСкладыВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, ПолучитьВалютуРегламентированногоУчета(), Истина);
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Ведомость", "Накладная на оприходование товаров");
	СтруктураМакетов.Вставить("Ценники", "Ценники на товары");
	СтруктураМакетов.Вставить("Этикетки", "Этикетки");
	СтруктураМакетов.Вставить("СерийныеНомера", "Список серийных номеров");
	СтруктураМакетов.Вставить("ПриходНаРозничныеСкладыВЦенахАТТ", "Приход на розничные склады в ценах АТТ");
	СтруктураМакетов.Вставить("ЗаписьВRFIDМетки", "Запись в RFID метки");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части по инвентаризации Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров).
//
//  ПодтверждатьОчисткуСтрок	– булево – Истина, если необходимо запрашивать 
//								  подтверждение пользователя на очистку текущего содержимого
//								  таб.части, иначе Ложь
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(ДокументОснование, ПодтверждатьОчисткуСтрок) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
		ПредставлениеИнвентаризацияТоваровНаСкладе = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе.Представление();
		ТекстПредупреждения = "Документ """ + ПредставлениеИнвентаризацияТоваровНаСкладе + """ не выбран.
		                      |Заполнение невозможно.";
	#Если Клиент Тогда
        Предупреждение(ТекстПредупреждения, , );
		Возврат;                                                  		
	#Иначе
		ВызватьИсключение ТекстПредупреждения;
	#КонецЕсли	
	
	КонецЕсли;	

	Если Товары.Количество() > 0 Тогда
		
		Если ПодтверждатьОчисткуСтрок Тогда			
	#Если Клиент Тогда			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
	#КонецЕсли
		КонецЕсли;
	
		Товары.Очистить();
		
	КонецЕсли;

	ВалютаУпрУчета    = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка",                     Ссылка);
	Запрос.УстановитьПараметр("НТТ", (ПолучитьТекущийВидСклада() = Перечисления.ВидыСкладов.НТТ));
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка",            ДокументОснование);

	// Заполняем выявленными излишками по инвентраизации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентраизации. 
	// Если розница – заполняем розничную цену.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Качество,
	|	Док.Коэффициент                                   КАК КоэффициентЕдиницыИнвентаризации,
	|	МАКСИМУМ(Док.Количество - Док.КоличествоУчет)     КАК КоличествоОтклонениеИнвентаризации, // в единицах инвентаризации
	|	СУММА(ВЫБОР
	|		КОГДА ДокОприходование.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ДокОприходование.Количество
	|	КОНЕЦ)                                            КАК КоличествоОприходованное,
	|	Док.Цена,
	|	ВЫБОР
	|		КОГДА &НТТ ТОГДА
	|			Док.ЦенаВРознице
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ                                             КАК ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
	|ПО                                       
	|	  Док.Номенклатура                                      = ДокОприходование.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры                        = ДокОприходование.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры                                 = ДокОприходование.СерияНоменклатуры
	|	И Док.Ссылка.Склад                                      = ДокОприходование.Ссылка.Склад
	|	И ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|	И ДокОприходование.Ссылка.Проведен
	|	И ДокОприходование.Ссылка                              <> &ДокументСсылка
	|	И ДокОприходование.ЦенаВРознице                         = Док.ЦенаВРознице
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.Количество - Док.КоличествоУчет > 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	Док.Номенклатура,
	|	Док.Качество,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.Цена,
	|	Док.ЦенаВРознице
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;
	ПриИзмененииСклада();

	Выборка = РезультатЗапроса.Выбрать();

	СтрокиДобавлены = Ложь;
	Пока Выборка.Следующий() Цикл

		КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;
		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокиДобавлены = Истина;
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.КоэффициентЕдиницыИнвентаризации;
		СтрокаТабличнойЧасти.Количество                 = КоличествоОприходовать;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;
		СтрокаТабличнойЧасти.ЦенаВРознице               = Выборка.ЦенаВРознице;
		СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;

		// Рассчитаем и заполним процент розничной наценки.
		ЦенаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ВалютаУпрУчета,
		           ПолучитьВалютуРегламентированногоУчета(), КурсУпрУчета, 1, КратностьУпрУчета, 1);

		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена), 0,
		                                               100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаРегл) / ЦенаРегл);

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ВалютаУпрУчета,
		                                 ПолучитьВалютуРегламентированногоУчета(), КурсУпрУчета, 1, КратностьУпрУчета, 1);

	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары фактическое количество которых превышает учетное.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Возвращает значение переменной мВалютаУпрУчета. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты – значение переменной мВалютаУпрУчета
//
Функция ПолучитьВалютуУпрУчета() Экспорт

	Если мВалютаУпрУчета = Неопределено Тогда
		мВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	КонецЕсли;

	Возврат мВалютаУпрУчета;

КонецФункции // ПолучитьВалютуУпрУчета()

// Возвращает значение переменной мВалютаРегламентированногоУчета. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты – значение переменной мВалютаРегламентированногоУчета
//
Функция ПолучитьВалютуРегламентированногоУчета() Экспорт

	Если мВалютаРегламентированногоУчета = Неопределено Тогда
		мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	Возврат мВалютаРегламентированногоУчета;

КонецФункции // ПолучитьВалютуРегламентированногоУчета()

// Возвращает значение переменной мРазрешитьНулевыеЦеныВРознице. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   Булево.
//
Функция ПолучитьРазрешитьНулевыеЦеныВРознице() Экспорт

	Если мРазрешитьНулевыеЦеныВРознице = Неопределено Тогда
		мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();
	КонецЕсли;

	Возврат мРазрешитьНулевыеЦеныВРознице;

КонецФункции // ПолучитьРазрешитьНулевыеЦеныВРознице()

// Возвращает значение переменной мТекущийВидСклада. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыСкладов – значение переменной мТекущийВидСклада
//
Функция ПолучитьТекущийВидСклада() Экспорт

	Если мТекущийВидСклада = Неопределено Тогда	
		мТекущийВидСклада = Склад.ВидСклада;	
	КонецЕсли; 
	
	Возврат мТекущийВидСклада; 

КонецФункции // ПолучитьТекущийВидСклада()

// Инициализирует курс и кратность упр. учета
//
Процедура ИнициализироватьКурсИКратностьУпрУчета()
 
	СтруктураКурса     = МодульВалютногоУчета.ПолучитьКурсВалюты(ПолучитьВалютуУпрУчета(), Дата);
	мКурсУпрУчета      = СтруктураКурса.Курс;
	мКратностьУпрУчета = СтруктураКурса.Кратность;
	
КонецПроцедуры // ИнициализироватьКурсИКратностьУпрУчета()

// Возвращает значение переменной мКурсУпрУчета. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   Число – значение переменной мКурсУпрУчета
//
Функция ПолучитьКурсУпрУчета() Экспорт

	Если мКурсУпрУчета = Неопределено Тогда	
		ИнициализироватьКурсИКратностьУпрУчета()
	КонецЕсли; 
	
	Возврат мКурсУпрУчета; 

КонецФункции // ПолучитьКурсУпрУчета()

// Возвращает значение переменной мКратностьУпрУчета. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   Число – значение переменной мКратностьУпрУчета
//
Функция ПолучитьКратностьУпрУчета() Экспорт

	Если мКратностьУпрУчета = Неопределено Тогда	
		ИнициализироватьКурсИКратностьУпрУчета()
	КонецЕсли; 
	
	Возврат мКратностьУпрУчета; 

КонецФункции // ПолучитьКратностьУпрУчета()

// Выполняет необходимые действия при изменении реквизита Склад
//
Процедура ПриИзмененииСклада() Экспорт

	мТекущийВидСклада = Склад.ВидСклада;	

КонецПроцедуры // ПриИзмененииОрганизации()

// Выполняет необходимые действия при изменении реквизита ИнвентаризацияТоваровНаСкладе
//
Процедура ПриИзмененииИнвентаризацииТоваровНаСкладе() Экспорт
	
	Если ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ИнвентаризацияТоваровНаСкладе.Организация;
			ПриИзмененииОрганизации();	
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = ИнвентаризацияТоваровНаСкладе.Склад;
			ПриИзмененииСклада();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииИнвентаризацииТоваровНаСкладе()

// Выполняет необходимые действия при изменении реквизита Организация
//
Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;

	ОбщегоНазначения.ОбработатьПризнакОтраженияВреглУчете(ЭтотОбъект, ,,мОтражатьВРегламентированномУчете,истина);

КонецПроцедуры // ПриИзмененииОрганизации()

// Заполняет реквизиты значениями по умолчанию
//
// Параметры: 
//  ПараметрОбъектКопирования	- содержкит ссылку на документ копирования в случае, 
//								  если новый документ создается копированием.
//  ПараметрОснование			- содержкит ссылку на документ-основание в случае, 
//								  если новый документ создается на основании другого.
//
Процедура ИнициализироватьНовыйДокумент(ПараметрОбъектКопирования, ПараметрОснование) Экспорт
	
	#Если Клиент Или ВнешнееСоединение Тогда
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), ПолучитьВалютуРегламентированногоУчета(), "Продажа", ПараметрОбъектКопирования, ПараметрОснование);
	#КонецЕсли
	
	ПриИзмененииОрганизации();
	ПриИзмененииСклада();
	
КонецПроцедуры // ИнициализироватьНовыйДокумент()	

// Пересчитывает значения реквизитов табличной части Товары.
//	Вызывается из веб-приложения "Удаленный склад"
//
Процедура ПересчитатьТабличнуюЧастьТовары() Экспорт

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
	
		ОбработкаТабличныхЧастей.РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ПолучитьВалютуРегламентированногоУчета());
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ПолучитьВалютуУпрУчета(), 
								ПолучитьВалютуРегламентированногоУчета(), ПолучитьКурсУпрУчета(), 1, ПолучитьКратностьУпрУчета(), 1);
	
	КонецЦикла; 

КонецПроцедуры // ПересчитатьТабличнуюЧастьТовары()
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаТЧ, ТаблицаДвижений,СтруктураШапкиДокумента)

	ТаблицаТЧ.Индексы.Добавить("НомерСтроки");
	
	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		// Партионный учет по складам
		Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам = Истина Тогда
			СтрокаДвижений.Склад       = Неопределено;
		КонецЕсли;
		СтрокаДвижений.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
		Если Не мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней Тогда
			СтрокаДвижений.ДокументОприходования = Ссылка;
		КонецЕсли;

		// Если партионный учет по сериям не ведется, то надо очистить серию
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		Если НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
			СтрокаДвижений.СерияНоменклатуры = Неопределено;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Сумма.Имя = "Стоимость";

	ВалютаРег = ПолучитьВалютуРегламентированногоУчета();
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл


		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость;
		Сумма                   = СтрокаТаблицы.Стоимость;

	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, Качество");

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ
	   И Не ПолучитьРазрешитьНулевыеЦеныВРознице() Тогда
		СтруктураОбязательныхПолей.Вставить("ЦенаВРознице");
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("ЦенаВРознице"              , "ЦенаВРознице");

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок)

	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(Дата);

	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");


КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА СТРУКТУРЫ ШАПКИ ДОКУМЕНТА И ТАБЛИЦ ДОКУМЕНТА
// (кроме таблицы по таре)

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",       "ВалютаУправленческогоУчета",                 "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",       "КурсВалютыУправленческогоУчета",             "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",           "ВидСклада",                                  "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",     "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, ПолучитьВалютуРегламентированногоУчета());

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"               , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                 , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                      , "Сумма");
	СтруктураПолей.Вставить("Качество"                   , "Качество");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры" , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"          , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям", "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Услуга"                     , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                      , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                   , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Склад"                      , "Ссылка.Склад");
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);
	
	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	УчетНДС.ПереименованиеКолонок(ТаблицаПоТоварам, Новый Структура("СуммаРегл","Сумма"));
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Ложь);

КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СуммаРегл"                  , "СуммаРегл");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
			
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(глЗначениеПеременной("ВалютаУправленческогоУчета"), Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
		Иначе

			КурсДокумента      = 1;
			КратностьДокумента = 1;
			
		КонецЕсли;

		ИнвентаризацияТоваровНаСкладе = Основание;

		ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(Основание, Ложь);

	КонецЕсли;	
		
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтоНовый() Тогда
		СсылкаНаДокумент = ЭтотОбъект.ПолучитьСсылкуНового();
		Если СсылкаНаДокумент.Пустая() Тогда 
			СсылкаНаДокумент = Документы.ОприходованиеТоваров.ПолучитьСсылку();
			ЭтотОбъект.УстановитьСсылкуНового(СсылкаНаДокумент);
		КонецЕсли;
	Иначе
		СсылкаНаДокумент = Ссылка;
	КонецЕсли;

	СтруктураПоиска = Новый Структура("СтрокаПрихода", Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка());
	НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		
		СсылкаНаОбъект = Справочники.ИдентификаторыСтрокПриходов.ПолучитьСсылку();

		НоваяСтрокаПрихода = Справочники.ИдентификаторыСтрокПриходов.СоздатьЭлемент();
		НоваяСтрокаПрихода.Дата = ЭтотОбъект.Дата;
		НоваяСтрокаПрихода.Приход = СсылкаНаДокумент;
		НоваяСтрокаПрихода.УстановитьСсылкуНового(СсылкаНаОбъект);
		НоваяСтрокаПрихода.Наименование = СсылкаНаОбъект.УникальныйИдентификатор();
		НоваяСтрокаПрихода.Записать();
		
		ТекСтрока.СтрокаПрихода = НоваяСтрокаПрихода.Ссылка;
		
	КонецЦикла;

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
	//    Сообщить("Изменить документ вручную пока невозможно.");
	//	Отказ = Истина;
	//	Возврат;
	//	
	//КонецЕсли;
	

	// ado_return
	//Для Каждого Товар Из Товары Цикл
	//	Товар.СтрокаПрихода = РаботаСоСтатусамиДокументов.ОбновитьЗаписьСтрокПрихода(СсылкаНаДокумент, Товар.СтрокаПрихода);
	//	
	//КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	ЭтотОбъект.ДополнительныеСвойства.Очистить();
	ЭтотОбъект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	Если (РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения) тогда
		ЭтотОбъект.ДополнительныеСвойства.Вставить("Контроль", Новый Структура);
		Если НЕ ЭтоНовый() тогда
			ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("СтарыеЗначения", Новый Соответствие);
			ЭтотОбъект.ДополнительныеСвойства.Контроль.СтарыеЗначения.Вставить(
			Метаданные.Последовательности.ПартионныйУчет, мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(
			ЭтотОбъект.Ссылка, Метаданные.Последовательности.ПартионныйУчет));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) тогда
		ВалютаДокумента = Константы.ВалютаРубль.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		Если ВалютаДокумента = Константы.ВалютаРубль.Получить() Тогда
			ТипЦен = Константы.ЗакупочныйТипЦенРуб.Получить();
		КонецЕсли;
		Если ВалютаДокумента = Константы.ВалютаДоллар.Получить() Тогда
			ТипЦен = Константы.ЗакупочныйТипЦенДолл.Получить();
		КонецЕсли;
		Если ВалютаДокумента = Константы.ВалютаЕвро.Получить() Тогда
			ТипЦен = Константы.ЗакупочныйТипЦенЕвро.Получить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("НовыеЗначения",
	//Новый Соответствие);
	//ЭтотОбъект.ДополнительныеСвойства.Контроль.НовыеЗначения.Вставить(
	//Метаданные.Последовательности.ПартионныйУчет, 
	//мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(ЭтотОбъект.Ссылка,
	//Метаданные.Последовательности.ПартионныйУчет));

	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьПроведение(Ссылка, Отказ, лПараметры);
	
	//РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПартионныйУчет");
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьОтменуПроведения(Ссылка, Отказ, лПараметры);
	
	//РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПартионныйУчет");
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	//ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	//ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	СозданВ77 = Ложь;
	Для Каждого СтрокаТЧ Из Товары Цикл 
		СтрокаТЧ.СтрокаПрихода = Неопределено;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЗаписиПоследовательности(вхПоследовательность) Экспорт
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лЭтоОтменаПроведения = Ложь;
	лРежимЗаписи = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи", лРежимЗаписи) тогда
		лЭтоОтменаПроведения = (лРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) тогда
		Если НЕ лЭтоОтменаПроведения И ЭтотОбъект.Дата >= ПараметрыСеанса.ДатаНачалаРаботыТовары 
			И ЭтотОбъект.Дата >= глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
			лВремТаблица = ЭтотОбъект.Товары.Выгрузить(,"Номенклатура");
			лВремТаблица.Свернуть("Номенклатура");
			Для Каждого лСтрокаТЧ Из лВремТаблица Цикл 
				лСтрокаРезультат = лРезультат.Добавить();
				лСтрокаРезультат.Номенклатура = лСтрокаТЧ.Номенклатура;
				лСтрокаРезультат.Период = ЭтотОбъект.Дата;
				лСтрокаРезультат.Регистратор = ЭтотОбъект.Ссылка;
			КонецЦикла;
		КонецЕсли;
		
		Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
		
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мМенеджерОбъекта = Документы[Метаданные().Имя];
