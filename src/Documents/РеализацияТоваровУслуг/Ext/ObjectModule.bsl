Перем мВалютаРегламентированногоУчета;
Перем мМенеджерОбъекта;

#Область Печать

		
Функция ПечатьТОРГ12(БезУслуг = Ложь, Макет = Неопределено) Экспорт
		
		ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ТоварКод = "Артикул";
		Иначе
			ТоварКод = "Код";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза",          Дата);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
		Запрос.УстановитьПараметр("ТекущийДокумент",    ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
		|	РеализацияТоваровУслуг.Организация,
		|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
		|	РеализацияТоваровУслуг.Организация КАК Поставщик,
		|	РеализацияТоваровУслуг.Организация КАК Контрагент,
		|	РеализацияТоваровУслуг.Организация КАК Руководители,
		|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
		|			ТОГДА РеализацияТоваровУслуг.Контрагент
		|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
		|	КОНЕЦ КАК Грузополучатель,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
		|			ТОГДА РеализацияТоваровУслуг.Организация
		|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель,
		|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
		|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
		|	РеализацияТоваровУслуг.Контрагент.Код КАК КодКлиента,
		|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
		|	NULL КАК Сделка,
		|	NULL КАК СделкаНомер,
		|	NULL КАК СделкаДата,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ВедениеВзаиморасчетовПоДокументам,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
		
		// + 20180829 Пушкин XX-622
		//|	РеализацияТоваровУслуг.ДоговорКонтрагента.Дата КАК ОснованиеДата,
		|	ВЫБОР
		|		КОГДА естьNULL(РеализацияТоваровУслуг.ДоговорКонтрагента.ДоговорНаОферту,ЛОЖЬ) = ИСТИНА ТОГДА естьNULL(РеализацияТоваровУслуг.ДоговорКонтрагента.ДатаДоговораОферты,ДАТАВРЕМЯ(1,1,1,0,0,0))
		|       ИНАЧЕ РеализацияТоваровУслуг.ДоговорКонтрагента.Дата
		|	КОНЕЦ КАК ОснованиеДата,
		// - 20180829 Пушкин XX-622
		
		|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
		|	РеализацияТоваровУслуг.Склад.Подразделение КАК Подразделение,
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
		|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
		|	РеализацияТоваровУслуг.УчитыватьНДС,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС,
		|	РеализацияТоваровУслуг.ОтпускРазрешил КАК ОтпускРазрешил,
		|	РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел,
		|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
		|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
		|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
		|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
		|	РеализацияТоваровУслуг.Организация.УчитыватьНДС КАК ОрганизацияУчитыватьНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
		|		ПО (ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад)
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		// +++ Карпычев (30.01.18)
		Запрос.УстановитьПараметр("УчитыватьНДС"   , Шапка.ОрганизацияУчитыватьНДС);
		// -- Карпычев (30.01.18)
		
		УниверсальныеМеханизмы.ОпределитьКурсыДокументаДляПечати(ЭтотОбъект, Запрос);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
		// +++ Карпычев (30.01.18)
		|	ВложенныйЗапрос.Номенклатура.Наименование                     КАК ТоварНаименованиеКраткое,
		//|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК ТоварКод,
		|	""""                                                          КАК ТоварКод,
		|	ВложенныйЗапрос.Номенклатура.Артикул                          КАК ТоварАртикул,
		|	ВложенныйЗапрос.Номенклатура.Изготовитель.Наименование        КАК ТоварПроизводительНаименование,
		// --- Карпычев (30.01.18)
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
		|	ВложенныйЗапрос.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
		|	1                                                             КАК КоличествоВОдномМесте,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 
		|			ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
		|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
		|	КОНЕЦ                                КАК МассаБрутто,
		|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
		|	ВложенныйЗапрос.Серия                КАК Серия,
		|	ВложенныйЗапрос.Комм_с_Сайта		 КАК Комм_с_Сайта,
		|	ВложенныйЗапрос.СтавкаНДС            КАК СтавкаНДС,
		|	ВложенныйЗапрос.Цена                 КАК Цена,
		|	ВЫБОР
		|		КОГДА((ВложенныйЗапрос.ПроцентСкидкиНаценки = 0) И 
		|		      (ВложенныйЗапрос.ПроцентАвтоматическихСкидок = 0))
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ Истина
		|	КОНЕЦ                                КАК ЕстьСкидкиПоСтроке,
		|	ВложенныйЗапрос.Количество           КАК Количество,
		|	ВложенныйЗапрос.КоличествоМест       КАК КоличествоМест,
		|	ВложенныйЗапрос.Сумма                КАК Сумма,
		|	ВложенныйЗапрос.СуммаНДС             КАК СуммаНДС,
		|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка                КАК Метка,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
		|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка
		|ИЗ
		|
		|	(
		|	ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Номенклатура,
		|		РеализацияТоваровУслуг.Коэффициент,
		|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
		|		РеализацияТоваровУслуг.ЕдиницаИзмерения                     КАК ЕдиницаИзмеренияМест,
		|		РеализацияТоваровУслуг.ЕдиницаИзмерения.Коэффициент         КАК КоэффициентМест,
		|		NULL                                                        КАК Характеристика,
		|		NULL                                                        КАК Серия,
		|		ЕСТЬNULL(ЗаявкаПокупателя.КомментарийИзСайта, """") 		КАК Комм_с_Сайта,
		// +++ Карпычев (30.01.18)
		//|		РеализацияТоваровУслуг.СтавкаНДС,
		|		ВЫБОР
		|			КОГДА &УчитыватьНДС
		|				ТОГДА РеализацияТоваровУслуг.СтавкаНДС
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|		КОНЕЦ                                                       КАК СтавкаНДС,
		// --- Карпычев (30.01.18)
		|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность            КАК Цена,
		|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
		|		0                                                           КАК ПроцентАвтоматическихСкидок,
		|		СУММА(РеализацияТоваровУслуг.Количество)                    КАК Количество,
		|		СУММА(РеализацияТоваровУслуг.Количество)                    КАК КоличествоМест,
		|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность) КАК Сумма,
		// +++ Карпычев (30.01.18)
		//|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
		|		СУММА(ВЫБОР
		|			КОГДА &УчитыватьНДС
		|				ТОГДА РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность
		|			ИНАЧЕ 0
		|		КОНЕЦ)                                                      КАК СуммаНДС,
		// --- Карпычев (30.01.18)
		|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                 КАК НомерСтроки,
		|		0                                                           КАК Метка
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПокупателя.Товары Как ЗаявкаПокупателя
		|			ПО РеализацияТоваровУслуг.СтрокаЗаявки = ЗаявкаПокупателя.СтрокаЗаявки 
		|	ГДЕ
		|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|		РеализацияТоваровУслуг.Номенклатура,
		|		РеализацияТоваровУслуг.Коэффициент,
		|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
		|		ЕСТЬNULL(ЗаявкаПокупателя.КомментарийИзСайта, """"),
		|		РеализацияТоваровУслуг.СтавкаНДС,
		|		РеализацияТоваровУслуг.Цена,
		|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки
		|	) КАК ВложенныйЗапрос
		|";
		
		// +++ Карпычев (02.03.18)
		СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
		
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслуг.Номенклатура                  КАК Номенклатура,
			|	" + СтрокаВыборкиПоляСодержания + "                  КАК ТоварНаименование,
			|	" + СтрокаВыборкиПоляСодержания + "                  КАК ТоварНаименованиеКраткое,
			|	""""                                                 КАК ТоварКод,
			|	РеализацияТоваровУслуг.Номенклатура.Артикул          КАК ТоварАртикул,
			|	NULL                                                 КАК ТоварПроизводительНаименование,
			|	""шт""                                               КАК БазоваяЕдиницаНаименование,
			|	""796""                                              КАК БазоваяЕдиницаКодПоОКЕИ,
			|	""шт""                                               КАК ЕдиницаИзмерения,
			|	NULL                                                 КАК ВидУпаковки,
			|	NULL                                                 КАК КоличествоВОдномМесте,
			|	0                                                    КАК МассаБрутто,
			|	NULL                                                 КАК Характеристика,
			|	NULL                                                 КАК Серия,
			|	"""",
			|	ВЫБОР
		    |		КОГДА &УчитыватьНДС
		    |			ТОГДА РеализацияТоваровУслуг.СтавкаНДС
		    |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		    |	КОНЕЦ                                                КАК СтавкаНДС,
			|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
			|	ЛОЖЬ                                                 КАК ЕстьСкидкиПоСтроке,
			|	РеализацияТоваровУслуг.Количество                    КАК Количество,
			|	NULL                                                 КАК КоличествоМест,
			|	РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность КАК Сумма,
			|	ВЫБОР
			|		КОГДА &УчитыватьНДС
			|			ТОГДА РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность
			|		ИНАЧЕ 0
			|	КОНЕЦ                                                КАК СуммаНДС,
			|	РеализацияТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
			|	1                                                    КАК Метка,
			|	0                                                    КАК Скидка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
			|
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
			|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
			|";
		
		// --- Карпычев (02.03.18)
		
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		ТабДокумент  = Новый ТабличныйДокумент;
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху              = 0;
		ТабДокумент.ПолеСлева               = 0;
		ТабДокумент.ПолеСнизу               = 0;
		ТабДокумент.ПолеСправа              = 0;
		ТабДокумент.РазмерКолонтитулаСверху = 0;
		ТабДокумент.РазмерКолонтитулаСнизу  = 0;
		ТабДокумент.АвтоМасштаб             = Истина;
		ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
		ТабДокумент.ТолькоПросмотр          = Истина;
		ТабДокумент.КоличествоЭкземпляров   = 2;
		
		// +++ Карпычев (30.01.18)
		//Макет = ПолучитьОбщийМакет("ТОРГ12");
		//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
		ПечатьИзВнешнейОбработки = Макет <> Неопределено;
		Если НЕ ПечатьИзВнешнейОбработки Тогда
			Если Контрагент.ИНН = "6167131724" Тогда   // - для контрагента "Партторг ООО, г. Лыткарино б/н" печатаем типовую форму ТОРГ-12 без дополнительных подписей в разделе Груз принял/Груз получил (Карпычев 21.11.16)
				Макет = ПолучитьОбщийМакет("ТОРГ12_типовая");
			Иначе	
				Макет = ПолучитьОбщийМакет("ТОРГ12");
			КонецЕсли;
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("КодКлиента");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		Попытка
			ОбластьМакета = Макет.ПолучитьОбласть("ШК");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабДокумент.Вывести(ОбластьМакета);
		Исключение
		КонецПопытки;	
		Попытка
			ОбластьМакета = Макет.ПолучитьОбласть("НомерДок");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабДокумент.Вывести(ОбластьМакета);
		Исключение
		КонецПопытки;	
		// --- Карпычев (30.01.18)
		
		// Выводим общие реквизиты шапки
		СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
		СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
		СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
		СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
		ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
		
		Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		Иначе
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
		Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
			ОбластьМакета.Параметры.АдресДоставки = СокрЛП(Шапка.АдресДоставки);
		Иначе
			ОбластьМакета.Параметры.АдресДоставки = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
		
		// + 20180829 Пушкин XX-622
		//Если Шапка.ВедениеВзаиморасчетовПоДокументам Тогда
			ОбластьМакета.Параметры.Основание 	   = Шапка.Основание;
			ОбластьМакета.Параметры.ОснованиеНомер = Шапка.ОснованиеНомер;
			ОбластьМакета.Параметры.ОснованиеДата  = Шапка.ОснованиеДата;
		//Иначе
		//	Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
		//		ОбластьМакета.Параметры.Основание      = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.Сделка, Строка(Шапка.Сделка.Метаданные().Синоним));
		//		ОбластьМакета.Параметры.ОснованиеНомер = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.Сделка);
		//		ОбластьМакета.Параметры.ОснованиеДата  = Шапка.СделкаДата;
		//	КонецЕсли;
		//КонецЕсли;
		// - 20180829 Пушкин XX-622
		
		// Выводим всевозможные коды
		ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОГрузоотправитель.КодПоОКПО;
		ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
		ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакета.Параметры.ПоставщикПоОКПО       = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ПлательщикПоОКПО      = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы   = 1;
		
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// инициализация итогов по странице
		ИтогоМассаБруттоНаСтранице = 0;
		ИтогоМестНаСтранице        = 0;
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаНаСтранице       = 0;
		ИтогоНДСНаСтранице         = 0;
		ИтогоСуммаСНДСНаСтранице   = 0;
		
		// инициализация итогов по документу
		ИтогоМассаБрутто = 0;
		ИтогоМест        = 0;
		ИтогоКоличество  = 0;
		ИтогоСуммаСНДС   = 0;
		ИтогоСумма       = 0;
		ИтогоНДС         = 0;
		Ном              = 0;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
			
			//Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			//	Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			//	Продолжить;
			//КонецЕсли;
			
			Ном           = Ном + 1;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
			// +++ Карпычев (30.01.18)
			//ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
			//+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрок)
			//+ ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");
			Если НЕ ПустаяСтрока(СокрЛП(ВыборкаСтрок.ТоварНаименование)) Тогда
				ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
			Иначе
				ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименованиеКраткое);
			КонецЕсли;	
			Если ВыборкаСтрок.Номенклатура.Услуга Тогда 
				ВыборкаСтрок.ТоварНаименование = ВыборкаСтрок.Номенклатура.Наименование;
				ВыборкаСтрок.ТоварНаименованиеКраткое = ВыборкаСтрок.Номенклатура.Наименование;
				ВыборкаСтрок.БазоваяЕдиницаКодПоОКЕИ = "--";
				ВыборкаСтрок.ЕдиницаИзмерения = "--";
				ВыборкаСтрок.БазоваяЕдиницаНаименование = "--";
				ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.Номенклатура.Наименование; 
			Иначе 	
				ОбластьМакета.Параметры.ТоварНаименование = ?(ПустаяСтрока(ВыборкаСтрок.ТоварАртикул), "", ВыборкаСтрок.ТоварАртикул + " || ") + ТоварНаименование + ?(ПустаяСтрока(ВыборкаСтрок.ТоварПроизводительНаименование), "", " || " + ВыборкаСтрок.ТоварПроизводительНаименование);
			КонецЕсли;	
			// --- Карпычев (30.01.18)
			
			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
				МассаБрутто = 0;
			Иначе
				МассаБрутто = ВыборкаСтрок.МассаБрутто;
				МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
			КонецЕсли;
			
			Мест        = ВыборкаСтрок.КоличествоМест;
			Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
			
			Количество  = ВыборкаСтрок.Количество;
			СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
			СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
			СуммаБезНДС = СуммаСНДС  - СуммаНДС;
			
			ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
			ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
			ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
			ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
			ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
			
			Если Шапка.СуммаВключаетНДС
				Или ВыборкаСтрок.ЕстьСкидкиПоСтроке Тогда
				ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);
			Иначе
				ОбластьМакета.Параметры.Цена = ВыборкаСтрок.Цена;
			КонецЕсли;
			
			Если Ном = 1 Тогда // первая срока
				
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			Иначе
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				Если Ном = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
				КонецЕсли;		
				
				Если Ном <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
					
					ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// очистим итоги по странице
					ИтогоМассаБруттоНаСтранице = 0;
					ИтогоМестНаСтранице        = 0;
					ИтогоКоличествоНаСтранице  = 0;
					ИтогоСуммаНаСтранице       = 0;
					ИтогоНДСНаСтранице         = 0;
					ИтогоСуммаСНДСНаСтранице   = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;		
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// увеличим итоги по странице
			ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
			ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
			ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;
			
			// увеличим итоги по дукументу
			ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
			ИтогоМест        = ИтогоМест        + Мест;
			ИтогоКоличество  = ИтогоКоличество  + Количество;
			ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
			ИтогоНДС         = ИтогоНДС         + СуммаНДС;
			ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
		
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
		ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
		ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
		ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
		ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
		ОбластьМакета.Параметры.ДатаДокументаДень     = """"+Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1)+"""";
		ОбластьМакета.Параметры.ДатаДокументаМесяц    = Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1);
		ОбластьМакета.Параметры.ДатаДокументаГод      = Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель);	
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		// Главный бухгалтер
		ОбластьМакета.Параметры.ФИОГлавБухгалтера = Бухгалтер;
		
		// Отпуск товара разрешил
		Если НЕ ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
			ФИООтпускРазрешил       = Руководитель;
			ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
		Иначе
			ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица    = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента, Организация);
			ФамилияИмяОтчествоОтпускРазрешил = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтпускРазрешил                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
			ДолжностьОтпускРазрешил          = ПодразделениеДолжностьФизЛица.Должность;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ФИОРуководителя       = ФИООтпускРазрешил;
		ОбластьМакета.Параметры.ДолжностьРуководителя = ДолжностьОтпускРазрешил;
		
		// Отпуск товара произвел
		Если НЕ ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
			ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, Организация);
		Иначе
			ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента, Организация);
		КонецЕсли;
		
		ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
		ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
		
		ОбластьМакета.Параметры.ФИОКладовщика       = ФИООтпускПроизвел;
		ОбластьМакета.Параметры.ДолжностьКладовщика = ДолжностьОтпускПроизвел;
		
		// Доверенность
		ОбластьМакета.Параметры.ДоверенностьНомер     = Шапка.ДоверенностьНомер;
		ОбластьМакета.Параметры.ДоверенностьДата      = Формат(Шапка.ДоверенностьДата, "ДФ='дд ММММ гггг'");
		ОбластьМакета.Параметры.ДоверенностьВыдана    = Шапка.ДоверенностьВыдана;
		ОбластьМакета.Параметры.ДоверенностьЧерезКого = Шапка.ДоверенностьЧерезКого;
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
			ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
		КонецЕсли;
		
		Если ИтогоМест > 0 Тогда
			ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
		КонецЕсли;
		
		// +++ Карпычев (30.01.18)
		ПоследняяЦифра = Прав(Строка(НомерСтраницы), 1);
		Суффикс = ?(ПоследняяЦифра = "1", " листе", " листах"); 
		ОбластьМакета.Параметры.КоличествоЛистовВПриложении = Строка(НомерСтраницы) + Суффикс;
	    // --- Карпычев (30.01.18)
		
		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
КонецФункции
	
// +++ Карпычев (31.01.18)
Функция ПечатьТоварногоЧека(Макет = Неопределено) Экспорт
		
	Если Ссылка.Услуги.Количество()>0 Тогда 
		Если Ссылка.Услуги[0].Номенклатура=Справочники.Номенклатура.НайтиПоНаименованию("Логистические услуги (с НДС)") Тогда 
			Сообщить("Нельзя печатать Товарный чек, если в документе присутствует Логистическая услуга");
			Отказ=Истина;
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",    ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент.Код КАК КодКлиента,
	|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
	|	NULL КАК Сделка,
	|	NULL КАК СделкаНомер,
	|	NULL КАК СделкаДата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ВедениеВзаиморасчетовПоДокументам,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	РеализацияТоваровУслуг.Склад.Подразделение КАК Подразделение,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ОтпускРазрешил КАК ОтпускРазрешил,
	|	РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел,
	|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
	|	РеализацияТоваровУслуг.Организация.УчитыватьНДС КАК ОрганизацияУчитыватьНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФизЛицо
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("УчитыватьНДС"   , Шапка.ОрганизацияУчитыватьНДС);
	
	УниверсальныеМеханизмы.ОпределитьКурсыДокументаДляПечати(ЭтотОбъект, Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Наименование                     КАК ТоварНаименованиеКраткое,
	|	""""                                                          КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.Артикул                          КАК ТоварАртикул,
	|	ВложенныйЗапрос.Номенклатура.Изготовитель.Наименование        КАК ТоварПроизводительНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	1                                                             КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 
	|			ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ                                КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС            КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                 КАК Цена,
	|	ВЫБОР
	|		КОГДА((ВложенныйЗапрос.ПроцентСкидкиНаценки = 0) И 
	|		      (ВложенныйЗапрос.ПроцентАвтоматическихСкидок = 0))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ Истина
	|	КОНЕЦ                                КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест       КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма                КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС             КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                КАК Метка,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения                     КАК ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения.Коэффициент         КАК КоэффициентМест,
	|		NULL                                                        КАК Характеристика,
	|		NULL                                                        КАК Серия,
	|		ВЫБОР
	|			КОГДА &УчитыватьНДС
	|				ТОГДА РеализацияТоваровУслуг.СтавкаНДС
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОНЕЦ                                                       КАК СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность            КАК Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		0                                                           КАК ПроцентАвтоматическихСкидок,
	|		СУММА(РеализацияТоваровУслуг.Количество)                    КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.Количество)                    КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность) КАК Сумма,
	|		СУММА(ВЫБОР
	|			КОГДА &УчитыватьНДС
	|				ТОГДА РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность
	|			ИНАЧЕ 0
	|		КОНЕЦ)                                                      КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                 КАК НомерСтроки,
	|		0                                                           КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки
	|	) КАК ВложенныйЗапрос
	|";
	
	// +++ Карпычев (02.03.18)
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номенклатура                  КАК Номенклатура,
		|	" + СтрокаВыборкиПоляСодержания + "                  КАК ТоварНаименование,
		|	" + СтрокаВыборкиПоляСодержания + "                  КАК ТоварНаименованиеКраткое,
		|	""""                                                 КАК ТоварКод,
		|	РеализацияТоваровУслуг.Номенклатура.Артикул          КАК ТоварАртикул,
		|	NULL                                                 КАК ТоварПроизводительНаименование,
		|	""шт""                                               КАК БазоваяЕдиницаНаименование,
		|	""796""                                              КАК БазоваяЕдиницаКодПоОКЕИ,
		|	""шт""                                               КАК ЕдиницаИзмерения,
		|	NULL                                                 КАК ВидУпаковки,
		|	NULL                                                 КАК КоличествоВОдномМесте,
		|	0                                                    КАК МассаБрутто,
		|	NULL                                                 КАК Характеристика,
		|	NULL                                                 КАК Серия,
		|	ВЫБОР
	    |		КОГДА &УчитыватьНДС
	    |			ТОГДА РеализацияТоваровУслуг.СтавкаНДС
	    |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	    |	КОНЕЦ                                                КАК СтавкаНДС,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
		|	ЛОЖЬ                                                 КАК ЕстьСкидкиПоСтроке,
		|	РеализацияТоваровУслуг.Количество                    КАК Количество,
		|	NULL                                                 КАК КоличествоМест,
		|	РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность КАК Сумма,
		|	ВЫБОР
		|		КОГДА &УчитыватьНДС
		|			ТОГДА РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                КАК СуммаНДС,
		|	РеализацияТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
		|	1                                                    КАК Метка,
		|	0                                                    КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
		|";
	
	// --- Карпычев (02.03.18)
		
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабДокумент.КоличествоЭкземпляров   = 1;
	ТабДокумент.ТолькоПросмотр          = Истина;
	
	ПечатьИзВнешнейОбработки = Макет <> Неопределено;
	Если НЕ ПечатьИзВнешнейОбработки Тогда
		Макет = ПолучитьОбщийМакет("ТовЧек");
	КонецЕсли;
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	
	ОбластиВторогоЭкземпляра = Новый Массив;
	ОбластиВторогоЭкземпляра.Добавить(Макет.ПолучитьОбласть("Разделитель"));
	
	Если Найти(СведенияОПоставщике.ПолноеНаименование, "Бородич") > 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЛоготип");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Номер = "Товарный чек № " + ПреобразоватьНомерДокумента(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка)) + " от " + Формат(Шапка.ДатаДокумента, "ДФ='дд ММММ гггг'") + " г.";
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ФактическийАдрес");
	
	Попытка
		НомШК=ОбщегоНазначения.СформироватьШК_дляДок(ЭтотОбъект.Ссылка);
		ОбластьМакета.Области["Barcode"].Объект.СодержитКС = Ложь;
		ОбластьМакета.Области["Barcode"].Объект.Сообщение  = НомШК;
		ОбластьМакета.Области["Barcode"].Объект.ТекстКода  = НомШК;
	Исключение	
	КонецПопытки;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ЕстьKAYABA      = Ложь;
	
	НомерСтраницы   = 1;
	
	КоличествоСтрок = ЗапросТовары.Количество();
		
	ЕстьСкидки = Ложь;
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрок.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	// инициализация итогов по документу
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСуммаСНДС   = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	Ном              = 0;
	ИтогоСкидок      = 0;
	ИтогоБезСкидок   = 0;
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьЗаголовокТаблицы = ?(ЕстьСкидки, Макет.ПолучитьОбласть("ЗаголовокТаблицыСоСкидкой"),Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
	ОбластьМакета           = ?(ЕстьСкидки, Макет.ПолучитьОбласть("СтрокаСоСкидкой"), Макет.ПолучитьОбласть("Строка"));
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		//Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
		//	Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
		//	Продолжить;
		//КонецЕсли;
		
		Ном           = Ном + 1;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.НомерСтроки  = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
		
		Если ВыборкаСтрок.Номенклатура.Услуга Тогда 
			ВыборкаСтрок.ТоварНаименование = ВыборкаСтрок.Номенклатура.Наименование;
			ВыборкаСтрок.ТоварНаименованиеКраткое = ВыборкаСтрок.Номенклатура.Наименование;
			ВыборкаСтрок.БазоваяЕдиницаКодПоОКЕИ = "--";
			ВыборкаСтрок.ЕдиницаИзмерения = "--";
			ВыборкаСтрок.БазоваяЕдиницаНаименование = "--";
			//#Не понял нафига тут ГТД , убрал т.к его даже в макете нет Kalinin V.A. ( 2018-08-13 )
			//ВыборкаСтрок.НомерГТД = "-----";
			//	
		КонецЕсли;	
		Если НЕ ПустаяСтрока(СокрЛП(ВыборкаСтрок.ТоварНаименование)) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		Иначе
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименованиеКраткое);
		КонецЕсли;
		
		Если НЕ ЕстьKAYABA Тогда
			Если Найти(ВРег(ВыборкаСтрок.ТоварПроизводительНаименование), "KAYABA") > 0 Тогда
				ЕстьKAYABA = Истина;
			КонецЕсли;	
		КонецЕсли;
			
		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрок.Сумма, ВыборкаСтрок.Скидка);
		
		Если ЕстьСкидки Тогда
			ОбластьМакета.Параметры.Скидка         = ВыборкаСтрок.Скидка;
			ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрок.Сумма + Скидка;
		КонецЕсли;
		
		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
		
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС  - СуммаНДС;
		
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.Цена        = ВыборкаСтрок.Цена;
		
		Если Ном = 1 Тогда // первая срока
			
			ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			
			Если Ном <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;		
		
		ТабДокумент.Вывести(ОбластьМакета);
			
		// увеличим итоги по дукументу
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
		
		ИтогоСкидок      = ИтогоСкидок + Скидка;
		ИтогоБезСкидок   = ИтогоСуммаСНДС + ИтогоСкидок;
		
	КонецЦикла;
	
	// Выводим итоги по документу в целом
	ОбластьМакета = ?(ЕстьСкидки, Макет.ПолучитьОбласть("ИтогоСоСкидкой"), Макет.ПолучитьОбласть("Итого"));
	ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;
	Если ЕстьСкидки Тогда
		ОбластьМакета.Параметры.ИтогСуммыБезСкидки = ИтогоБезСкидок;
	КонецЕсли;
	ОбластьМакета.Параметры.ВсегоНаименованийНаСумму = "Всего наименований " + Формат(Ном) + ", на сумму " + Формат(ИтогоСуммаСНДС, "ЧЦ=15; ЧДЦ=2") + " руб.";
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если Шапка.ЭтоФизЛицо Тогда
		ОбластьМакетаГарантия = Макет.ПолучитьОбласть("Гарантия");
		ТабДокумент.Вывести(ОбластьМакетаГарантия);
		Если ЕстьKAYABA Тогда
			ОбластьМакетаГарантияKAYABA = Макет.ПолучитьОбласть("ГарантияKAYABA");
			ТабДокумент.Вывести(ОбластьМакетаГарантияKAYABA);
		КонецЕсли;	
	КонецЕсли;
	
	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.КолМест               = ИтогоМест;
	ОбластьМакета.Параметры.Покупатель            = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование");;
	ОбластьМакета.Параметры.ПокупательРасшифровка = Шапка.Покупатель;
	ОбластьМакета.Параметры.КодКлиента            = Шапка.КодКлиента;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим рекламу
	ОбластьМакета = Макет.ПолучитьОбласть("Реклама");
	ТабДокумент.Вывести(ОбластьМакета);
		
	// - выводим второй экземпляр товарного чека на этой странице, если убирается;
	// - иначе выводим второй экземпляр товарного чека на новом листе
	ОбластиВторогоЭкземпляра.Добавить(ТабДокумент);
	Если ТабДокумент.ПроверитьВывод(ОбластиВторогоЭкземпляра) Тогда
		Для Каждого ЭлементМассива Из ОбластиВторогоЭкземпляра Цикл
			ТабДокумент.Вывести(ЭлементМассива);
		КонецЦикла
	Иначе
		ТабДокумент.КоличествоЭкземпляров = 2;
	КонецЕсли;
	
	Возврат ТабДокумент;
		
КонецФункции  // +++ ПечатьТоварногоЧека()   (Карпычев 31.01.18)
	
// +++ Карпычев (31.01.18)
Функция ПечатьСчетаНаОплату(Макет = Неопределено) Экспорт
	
	ПараметрыПечати = ПолучитьПараметрыПечатиСчетаЗаказа();
	
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабДокумент.КоличествоЭкземпляров   = 1;
	ТабДокумент.ТолькоПросмотр          = Истина;
	
	ПечатьИзВнешнейОбработки = Макет <> Неопределено;
	Если НЕ ПечатьИзВнешнейОбработки Тогда
		Макет = ПолучитьОбщийМакет("СчетНаОплату");
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	//Попытка
	//	Для Каждого Стр Из ПараметрыПечати Цикл
	//		Если Строка(Стр.Ключ)="Основание" Тогда 
	//			Дог="";
	//			Если НЕ ЗначениеЗаполнено(Контрагент.ГоловнойКонтрагент) Тогда 
	//				Если ДоговорКонтрагента.ДоговорНаОферту Тогда 
	//					Дог="Оферта №"+ДоговорКонтрагента.Номер+" от "+ДоговорКонтрагента.ДатаДоговораОферты;
	//				Иначе
	//					Дог="договор купли продажи №"+ДоговорКонтрагента.Номер+" от "+ДоговорКонтрагента.Дата;
	//				КонецЕсли;
	//			Иначе
	//				Догт=Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента;
	//				Если Догт.ДоговорНаОферту Тогда 
	//					Дог="Оферта №"+Догт.Номер+" от "+Догт.ДатаДоговораОферты;
	//				Иначе
	//					Дог="договор купли продажи №"+Догт.Номер+" от "+Догт.Дата;
	//				КонецЕсли;
	//			КонецЕсли;	
	//			Стр.Значениее=Дог;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//Исключение
	//КонецПопытки;
	
	Если ПараметрыПечати.Свойство("Основание") Тогда
		
		Если Контрагент <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ГоловнойКонтрагент") Тогда
			ДоговорИсточник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ГоловнойКонтрагент.ОсновнойДоговорКонтрагента");
		Иначе
			ДоговорИсточник = ДоговорКонтрагента;
		КонецЕсли;
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорИсточник, "ДоговорНаОферту, Номер, Дата, ДатаДоговораОферты");
		
		Если ЗначениеЗаполнено(ДоговорИсточник) И РеквизитыДоговора.ДоговорНаОферту Тогда 
			ТекстОснования = "Оферта №"+РеквизитыДоговора.Номер+" от "+Формат(РеквизитыДоговора.ДатаДоговораОферты, "ДФ=dd.MM.yyyy")+"г.";
		Иначе
			ТекстОснования = "Договор купли продажи №"+РеквизитыДоговора.Номер+" от "+Формат(РеквизитыДоговора.Дата, "ДФ=dd.MM.yyyy")+"г.";
		КонецЕсли;
		
		ПараметрыПечати.Основание = ТекстОснования;
		
	КонецЕсли;
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакетаШапкатаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаШапкатаблицы);
	
	КоличествоСтрок = ПараметрыПечати.Позиции.Количество();
	
	// - Выводим строки таблицы
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
	Для Каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл 

		//Если Не ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
		//	Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
		//	Продолжить;
		//КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// - Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// - Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаШапкатаблицы);
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	// Выводим итоги
	ОбластьМакета  = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);	
	
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакетаРеклама = Макет.ПолучитьОбласть("Реклама");
	ТабДокумент.Вывести(ОбластьМакетаРеклама);

	Возврат ТабДокумент;
	
КонецФункции  // ПечатьСчетаНаОплату()  (Карпычев 31.01.18) 	
	
// +++ Карпычев (31.01.18)	
Функция ПолучитьПараметрыПечатиСчетаЗаказа() Экспорт
	
	ПараметрыПечати = Новый Структура;
	Позиции = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",    ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ДоговорКонтрагентаНомер,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Дата КАК ДоговорКонтрагентаДата,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	РеализацияТоваровУслуг.Контрагент.Код КАК КодКлиента,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС_,
	|	РеализацияТоваровУслуг.Организация.УчитыватьНДС КАК УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФизЛицо
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("УчитыватьНДС"   , Шапка.УчитыватьНДС);
	
	УниверсальныеМеханизмы.ОпределитьКурсыДокументаДляПечати(ЭтотОбъект, Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК ТоварНаименованиеКраткое,
	|	"""" КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВложенныйЗапрос.Номенклатура.Изготовитель.Наименование КАК ТоварПроизводительНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ВидУпаковки,
	|	1 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0
	|			ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА НЕ ВложенныйЗапрос.ЦенаСоСкидкой = 0
	|			ТОГДА ВложенныйЗапрос.ЦенаСоСкидкой
	|		ИНАЧЕ ВложенныйЗапрос.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ПроцентСкидкиНаценки = 0
	|				И ВложенныйЗапрос.ПроцентАвтоматическихСкидок = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка КАК Метка,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки + ВложенныйЗапрос.ПроцентАвтоматическихСкидок КАК Скидка
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент КАК Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения.Коэффициент КАК КоэффициентМест,
	|		NULL КАК Характеристика,
	|		NULL КАК Серия,
	|		ВЫБОР
	|			КОГДА &УчитыватьНДС
	|				ТОГДА РеализацияТоваровУслуг.СтавкаНДС
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОНЕЦ КАК СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		0 КАК ПроцентАвтоматическихСкидок,
	|		СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.Количество) КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма * &Курс / &Кратность) КАК Сумма,
	|		СУММА(ВЫБОР
	|				КОГДА &УчитыватьНДС
	|					ТОГДА РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка,
	|		РеализацияТоваровУслуг.ЦенаСоСкидкой * &Курс / &Кратность КАК ЦенаСоСкидкой
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|		И РеализацияТоваровУслуг.Количество > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения.Коэффициент,
	|		РеализацияТоваровУслуг.ЦенаСоСкидкой,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения) КАК ВложенныйЗапрос";
	
	// +++ Карпычев (02.03.18)
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номенклатура                  КАК Номенклатура,
		|	" + СтрокаВыборкиПоляСодержания + "                  КАК ТоварНаименование,
		|	" + СтрокаВыборкиПоляСодержания + "                  КАК ТоварНаименованиеКраткое,
		|	""""                                                 КАК ТоварКод,
		|	РеализацияТоваровУслуг.Номенклатура.Артикул          КАК ТоварАртикул,
		|	NULL                                                 КАК ТоварПроизводительНаименование,
		|	""шт""                                               КАК БазоваяЕдиницаНаименование,
		|	""796""                                              КАК БазоваяЕдиницаКодПоОКЕИ,
		|	""шт""                                               КАК ЕдиницаИзмерения,
		|	NULL                                                 КАК ВидУпаковки,
		|	NULL                                                 КАК КоличествоВОдномМесте,
		|	0                                                    КАК МассаБрутто,
		|	NULL                                                 КАК Характеристика,
		|	NULL                                                 КАК Серия,
		|	ВЫБОР
	    |		КОГДА &УчитыватьНДС
	    |			ТОГДА РеализацияТоваровУслуг.СтавкаНДС
	    |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	    |	КОНЕЦ                                                КАК СтавкаНДС,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
		|	ЛОЖЬ                                                 КАК ЕстьСкидкиПоСтроке,
		|	РеализацияТоваровУслуг.Количество                    КАК Количество,
		|	NULL                                                 КАК КоличествоМест,
		|	РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность КАК Сумма,
		|	ВЫБОР
		|		КОГДА &УчитыватьНДС
		|			ТОГДА РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                КАК СуммаНДС,
		|	РеализацияТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
		|	1                                                    КАК Метка,
		|	0                                                    КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|	И РеализацияТоваровУслуг.Количество > 0
		|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
		|";
	
	// --- Карпычев (02.03.18)
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
	ПараметрыПечати.Вставить("УчитыватьНДС", Шапка.УчитыватьНДС);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	ПараметрыПечати.Вставить("ИНН", СведенияОПоставщике.ИНН);
	ПараметрыПечати.Вставить("КПП", СведенияОПоставщике.КПП);
	ПредставлениеПоставщикаДляПлатПоручения = "";
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		Банк       = БанковскийСчетОрганизации.Банк;//?(Не ЗначениеЗаполнено(БанковскийСчетОрганизации.БанкДляРасчетов), БанковскийСчетОрганизации.Банк, БанковскийСчетОрганизации.БанкДляРасчетов);
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
	ИначеЕсли ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет) Тогда 
		Банк       = Организация.ОсновнойБанковскийСчет.Банк;
		НомерСчета = Организация.ОсновнойБанковскийСчет.НомерСчета;
	Иначе 	
		Банк       = СведенияОПоставщике.Банк;
		НомерСчета = СведенияОПоставщике.НомерСчета;
	КонецЕсли;	
	БИК        = Банк.Код;
	КоррСчет   = Банк.КоррСчет;
	ГородБанка = Банк.Город;
	
	ПараметрыПечати.Вставить("Покупатель", Шапка.Получатель);
	ПараметрыПечати.Вставить("Поставщик", Шапка.Поставщик);
	Попытка
		Дог="";
		Если НЕ ЗначениеЗаполнено(Шапка.Получатель.ГоловнойКонтрагент) Тогда 
			Если Шапка.ДоговорКонтрагента.ДоговорНаОферту Тогда 
				Дог="Оферта №"+Шапка.ДоговорКонтрагента.НомерЗаявкиОферты+" от "+Шапка.ДоговорКонтрагента.ДатаДоговораОферты;
			Иначе
				Дог="договор купли продажи №"+Шапка.ДоговорКонтрагента.Номер+" от "+Шапка.ДоговорКонтрагента.Дата;
			КонецЕсли;
		Иначе
			Догт=Шапка.Получатель.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента;
			Если Догт.ДоговорНаОферту Тогда 
				Дог="Оферта №"+Догт.НомерЗаявкиОферты+" от "+Догт.ДатаДоговораОферты;
			Иначе
				Дог="договор купли продажи №"+Догт.Номер+" от "+Догт.Дата;
			КонецЕсли;
		КонецЕсли;	
	Исключение
		Дог=Строка(Шапка.ДоговорКонтрагента) + ?(ПустаяСтрока(Шапка.ДоговорКонтрагентаНомер), "", " " + Шапка.ДоговорКонтрагентаНомер + " от " + Формат(Шапка.ДоговорКонтрагентаДата, "ДФ='дд.ММ.гггг'") + " г.");
	КонецПопытки;
	ПараметрыПечати.Вставить("Основание", Дог);
	ПараметрыПечати.Вставить("ДоговорКонтрагента", Шапка.ДоговорКонтрагента);
	ПараметрыПечати.Вставить("БИКБанкаПолучателя", БИК);
	ПараметрыПечати.Вставить("БанкПолучателя", Банк);
	ПараметрыПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Банк) + " " + ГородБанка);
	ПараметрыПечати.Вставить("СчетБанкаПолучателя", КоррСчет);
	ПараметрыПечати.Вставить("СчетБанкаПолучателяПредставление", КоррСчет);
	ПараметрыПечати.Вставить("СчетПолучателяПредставление", НомерСчета);
	ПараметрыПечати.Вставить("СчетПолучателя", НомерСчета);
	ПредставлениеПоставщикаДляПлатПоручения = БанковскийСчетОрганизации.ТекстКорреспондента;
	Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
		ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	КонецЕсли;
	ПараметрыПечати.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
	//ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату"));
	ПараметрыПечати.Вставить("ТекстЗаголовка", "Счет на оплату № " + ПреобразоватьНомерДокумента(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка)) + " от " + Формат(Шапка.Дата, "ДФ='дд ММММ гггг'") + " г.");
	ПараметрыПечати.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПараметрыПечати.Вставить("ПредставлениеПолучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));

	ПараметрыПечати.Вставить("ЕстьСкидки", Ложь);
	ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для Каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		
		ПараметрыПозиции = Новый Структура;

		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
		ПараметрыПозиции.Вставить("НомерСтроки", ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ПараметрыПозиции.Вставить("ТоварАртикул", ВыборкаСтрокТовары.ТоварАртикул);
		КонецЕсли;

		Если ВыборкаСтрокТовары.Номенклатура.Услуга Тогда 
			ВыборкаСтрокТовары.ТоварНаименование = ВыборкаСтрокТовары.Номенклатура.Наименование;
			ВыборкаСтрокТовары.ТоварНаименованиеКраткое = ВыборкаСтрокТовары.Номенклатура.Наименование;
			ВыборкаСтрокТовары.БазоваяЕдиницаКодПоОКЕИ = "--";
			ВыборкаСтрокТовары.ЕдиницаИзмерения = "--";
			ВыборкаСтрокТовары.БазоваяЕдиницаНаименование = "--";
		КонецЕсли;	
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТовары.Цена);
		ПараметрыПозиции.Вставить("ТоварПроизводительНаименование", СокрП(ВыборкаСтрокТовары.ТоварПроизводительНаименование));
		Если НЕ ПустаяСтрока(СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)) Тогда
			ПараметрыПозиции.Вставить("Товар", СокрЛП(ВыборкаСтрокТовары.ТоварНаименование));
		Иначе
			ПараметрыПозиции.Вставить("Товар", СокрЛП(ВыборкаСтрокТовары.ТоварНаименованиеКраткое));
		КонецЕсли;

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);

		Если ПараметрыПечати.ЕстьСкидки Тогда
			ПараметрыПозиции.Вставить("Скидка", Скидка);
			ПараметрыПозиции.Вставить("СуммаБезСкидки", ВыборкаСтрокТовары.Сумма + Скидка);
		КонецЕсли;

		ПараметрыПозиции.Вставить("Сумма", ВыборкаСтрокТовары.Сумма); 
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
		
		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	// Вывести Итого
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ПараметрыПечати.Вставить("ВсегоСкидок", ВсегоСкидок);
		ПараметрыПечати.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
	КонецЕсли;
	ПараметрыПечати.Вставить("Всего", ОбщегоНазначения.ФорматСумм(Сумма));

	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ПараметрыПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
		ПараметрыПечати.Вставить("ВсегоНДС", ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС")));
	КонецЕсли;

	// Вывести Сумму прописью
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ПараметрыПечати.Вставить("ИтоговаяСтрока", "Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
	ПараметрыПечати.Вставить("СуммаПрописью", ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));

	// Вывести подписи
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	ПараметрыПечати.Вставить("ФИОРуководителя", "/" + Руководитель  + "/");
	ПараметрыПечати.Вставить("ФИОБухгалтера", "/" + Бухгалтер     + "/");
	ПараметрыПечати.Вставить("ФИООтветственный", "/" + ПараметрыСеанса.ТекущийПользователь + "/");
	
	ПараметрыПечати.Вставить("КодКлиента", "ID клиента: " + Шапка.КодКлиента);

	Возврат ПараметрыПечати;
	
КонецФункции  // --- ПечатьСчетаНаОплату()   (Карпычев 31.01.18)		

Функция ПечатьУниверсальнойФормы(ВыводитьКомментарийССайта = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",    ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент.Код КАК КодКлиента,
	|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
	|	NULL КАК Сделка,
	|	NULL КАК СделкаНомер,
	|	NULL КАК СделкаДата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ВедениеВзаиморасчетовПоДокументам,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	РеализацияТоваровУслуг.Склад.Подразделение КАК Подразделение,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ОтпускРазрешил КАК ОтпускРазрешил,
	|	РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел,
	|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
	|	РеализацияТоваровУслуг.Организация.УчитыватьНДС КАК ОрганизацияУчитыватьНДС,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФизЛицо
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("УчитыватьНДС"   , Шапка.ОрганизацияУчитыватьНДС);
	
	УниверсальныеМеханизмы.ОпределитьКурсыДокументаДляПечати(ЭтотОбъект, Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	регПартииТоваров.Номенклатура,
	|	МАКСИМУМ(спрИдентификаторыСтрокПриходов.Ссылка) КАК СтрокаПрихода
	|ПОМЕСТИТЬ втПартии
	|ИЗ
	|	РегистрНакопления.ПартииТоваров КАК регПартииТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокПриходов КАК спрИдентификаторыСтрокПриходов
	|		ПО регПартииТоваров.СтрокаПрихода = спрИдентификаторыСтрокПриходов.Ссылка
	|ГДЕ
	|	регПартииТоваров.Регистратор = &ТекущийДокумент
	|	И спрИдентификаторыСтрокПриходов.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И спрИдентификаторыСтрокПриходов.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И спрИдентификаторыСтрокПриходов.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	регПартииТоваров.Номенклатура
	| ;
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Наименование                     КАК ТоварНаименованиеКраткое,
	|	""""                                                          КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.Артикул                          КАК ТоварАртикул,
	|	ВложенныйЗапрос.Номенклатура.Изготовитель.Наименование        КАК ТоварПроизводительНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	1                                                             КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.СтранаПроисхожденияКод                        КАК СтранаПроисхожденияКод,
	|	ВложенныйЗапрос.ПредставлениеСтраны                           КАК ПредставлениеСтраны,
	|	ВложенныйЗапрос.НомерГТД			                          КАК ПредставлениеГТД,
	|	ВложенныйЗапрос.КомментарийСайта                           	  КАК КомментарийСайта,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 
	|			ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ                                КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС            КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                 КАК Цена,
	|	ВложенныйЗапрос.ЦенаСоСкидкой        КАК ЦенаСоСкидкой,
	|	ВЫБОР
	|		КОГДА((ВложенныйЗапрос.ПроцентСкидкиНаценки = 0) И 
	|		      (ВложенныйЗапрос.ПроцентАвтоматическихСкидок = 0))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ Истина
	|	КОНЕЦ                                КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест       КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма                КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС             КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                КАК Метка,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения                     КАК ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения.Коэффициент         КАК КоэффициентМест,
	|		NULL                                                        КАК Характеристика,
	|		NULL                                                        КАК Серия,
	|		втПартии.СтрокаПрихода.СтранаПроисхождения.Код 				КАК СтранаПроисхожденияКод,
	|		втПартии.СтрокаПрихода.СтранаПроисхождения.Наименование 	КАК ПредставлениеСтраны,
	|		втПартии.СтрокаПрихода.НомерГТД							 	КАК НомерГТД,
	|		ЕСТЬNULL(ЗаявкаПокупателя.КомментарийИзСайта, """") 		КАК КомментарийСайта,
	|		ВЫБОР
	|			КОГДА &УчитыватьНДС
	|				ТОГДА РеализацияТоваровУслуг.СтавкаНДС
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОНЕЦ                                                       КАК СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность            КАК Цена,
	|		РеализацияТоваровУслуг.ЦенаСоСкидкой * &Курс / &Кратность   КАК ЦенаСоСкидкой,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		0                                                           КАК ПроцентАвтоматическихСкидок,
	|		СУММА(РеализацияТоваровУслуг.Количество)                    КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.Количество)                    КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность) КАК Сумма,
	|		СУММА(ВЫБОР
	|			КОГДА &УчитыватьНДС
	|				ТОГДА РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность
	|			ИНАЧЕ 0
	|		КОНЕЦ)                                                      КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                 КАК НомерСтроки,
	|		0                                                           КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПокупателя.Товары Как ЗаявкаПокупателя
	|			ПО РеализацияТоваровУслуг.СтрокаЗаявки = ЗаявкаПокупателя.СтрокаЗаявки 
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПартии Как втПартии
	|			ПО РеализацияТоваровУслуг.Номенклатура = втПартии.Номенклатура 
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|       И РеализацияТоваровУслуг.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		втПартии.СтрокаПрихода,
	|       ЕСТЬNULL(ЗаявкаПокупателя.КомментарийИзСайта, """"),
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.ЦенаСоСкидкой,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки
	|	) КАК ВложенныйЗапрос
	|";
	
	// +++ Карпычев (02.03.18)
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номенклатура                  КАК Номенклатура,
		|	" + СтрокаВыборкиПоляСодержания + "                  КАК ТоварНаименование,
		|	" + СтрокаВыборкиПоляСодержания + "                  КАК ТоварНаименованиеКраткое,
		|	""""                                                 КАК ТоварКод,
		|	РеализацияТоваровУслуг.Номенклатура.Артикул          КАК ТоварАртикул,
		|	NULL                                                 КАК ТоварПроизводительНаименование,
		|	""шт""                                               КАК БазоваяЕдиницаНаименование,
		|	""796""                                              КАК БазоваяЕдиницаКодПоОКЕИ,
		|	""шт""                                               КАК ЕдиницаИзмерения,
		|	NULL                                                 КАК ВидУпаковки,
		|	NULL                                                 КАК КоличествоВОдномМесте,
		|	0                                                    КАК МассаБрутто,
		|	NULL                                                 КАК Характеристика,
		|	NULL                                                 КАК Серия,
		|	"""" 												 КАК СтранаПроисхожденияКод,
		|	"""" 												 КАК ПредставлениеСтраны,
		|	"""" 												 КАК НомерГТД,
		|	"""" 												 КАК КомментарийСайта,
		|	ВЫБОР
		|		КОГДА &УчитыватьНДС
		|			ТОГДА РеализацияТоваровУслуг.СтавкаНДС
	    |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	    |	КОНЕЦ                                                КАК СтавкаНДС,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность     КАК ЦенаСоСкидкой,
		|	ЛОЖЬ                                                 КАК ЕстьСкидкиПоСтроке,
		|	РеализацияТоваровУслуг.Количество                    КАК Количество,
		|	NULL                                                 КАК КоличествоМест,
		|	РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность КАК Сумма,
		|	ВЫБОР
		|		КОГДА &УчитыватьНДС
		|			ТОГДА РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                КАК СуммаНДС,
		|	РеализацияТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
		|	1                                                    КАК Метка,
		|	0                                                    КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|   И РеализацияТоваровУслуг.Количество > 0
		|
		|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
		|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.КоличествоЭкземпляров   = 1;
	ТабДокумент.ТолькоПросмотр          = Истина;
	
	Макет = ПолучитьОбщийМакет("УниверсальнаяПечатнаяФорма");
	
	НомерСтраницы   = 1;
	
	КоличествоСтрок = ЗапросТовары.Количество();
		
	//ВыводитьКомментарийССайта

	// инициализация итогов по документу
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСуммаСНДС   = 0;
	ИтогоСуммаБезНДС = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	Ном              = 0;
	ИтогоСкидок      = 0;
	ИтогоБезСкидок   = 0;
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьШапка 				= Макет.ПолучитьОбласть("Шапка|Основное");
	ОбластьШапкаКомментарий		= Макет.ПолучитьОбласть("Шапка|Комментарий");
	
	ОбластьСтрока           	= Макет.ПолучитьОбласть("Строка|Основное");
	ОбластьСтрокаКомментарий	= Макет.ПолучитьОбласть("Строка|Комментарий");
	
	ОбластьИтого           		= Макет.ПолучитьОбласть("Итого|Основное");
	ОбластьИтогоКомментарий     = Макет.ПолучитьОбласть("Итого|Комментарий");
	
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Ном   = Ном + 1;
		
		Если Не ЗначениеЗаполнено(ВыборкаСтрок.ЦенаСоСкидкой) Тогда
			ВыборкаСтрок.ЦенаСоСкидкой = ?(ВыборкаСтрок.Количество = 0, ВыборкаСтрок.Сумма, Окр(ВыборкаСтрок.Сумма/ВыборкаСтрок.Количество, 2));
		КонецЕсли;
		
		СуммаСкидки = ВыборкаСтрок.Количество*ВыборкаСтрок.Цена - ВыборкаСтрок.Сумма;
		
		ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьСтрока.Параметры.НомерСтроки  = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
		ОбластьСтрока.Параметры.СуммаСкидки  = СуммаСкидки;
		
		Если НЕ ПустаяСтрока(СокрЛП(ВыборкаСтрок.ТоварНаименование)) Тогда
			ОбластьСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		Иначе
			ОбластьСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименованиеКраткое);
		КонецЕсли;
		
		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
		
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС  - СуммаНДС;
		
		ОбластьСтрока.Параметры.СуммаСНДС     = СуммаСНДС;
		ОбластьСтрока.Параметры.СуммаНДС   	  = СуммаНДС;
		ОбластьСтрока.Параметры.СуммаБезНДС   = СуммаБезНДС;
		
		Если Шапка.СуммаВключаетНДС Тогда
			ОбластьСтрока.Параметры.Цена = ВыборкаСтрок.Цена;
			ОбластьСтрока.Параметры.ЦенаБезНДС = ?(Количество = 0, СуммаБезНДС, Окр(СуммаБезНДС/Количество,2));
		Иначе
			ОбластьСтрока.Параметры.Цена = ?(Количество = 0, СуммаНДС, Окр(СуммаНДС/Количество,2));
			ОбластьСтрока.Параметры.ЦенаБезНДС = ВыборкаСтрок.Цена;
		КонецЕсли;
		
		Если Ном = 1 Тогда // первая срока
			
			ТабДокумент.Вывести(ОбластьШапка);
			Если ВыводитьКомментарийССайта Тогда
				ТабДокумент.Присоединить(ОбластьШапкаКомментарий);
			КонецЕсли;
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			
			Если Ном <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьШапка);
				Если ВыводитьКомментарийССайта Тогда
					ТабДокумент.Присоединить(ОбластьШапкаКомментарий);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		
		
		ТабДокумент.Вывести(ОбластьСтрока);
		
		Если ВыводитьКомментарийССайта Тогда
			ОбластьСтрокаКомментарий.Параметры.КомментарийСайта = ВыборкаСтрок.КомментарийСайта;
			ТабДокумент.Присоединить(ОбластьСтрокаКомментарий);
		КонецЕсли;

		// увеличим итоги по документу
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
		ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СуммаБезНДС;
		
	КонецЦикла;
	
	// Выводим итоги по документу в целом
	ОбластьИтого.Параметры.ИтогоКоличество 		= ИтогоКоличество;
	ОбластьИтого.Параметры.ИтогоСуммаБезНДС 	= ИтогоСуммаБезНДС;
	ОбластьИтого.Параметры.ИтогоСуммаНДС 		= ИтогоНДС;
	ОбластьИтого.Параметры.ИтогоСуммаСНДС 		= ИтогоСуммаСНДС;
	ТабДокумент.Вывести(ОбластьИтого);
	Если ВыводитьКомментарийССайта Тогда
		ТабДокумент.Присоединить(ОбластьИтогоКомментарий);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьУниверсальногоПередаточногоДокумента() Экспорт
	Если Ссылка.Услуги.Количество()>0 Тогда 
		Если Ссылка.Услуги[0].Номенклатура=Справочники.Номенклатура.НайтиПоНаименованию("Упаковка (Без НДС)") Тогда 
			Сообщить("Нельзя печатать УПД если в документе присутствует услуга упаковки");
			Отказ=Истина;
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("ДокументСсылка",    				Ссылка);
		ДанныеДокумента.Вставить("Номер",             				Номер);
		ДанныеДокумента.Вставить("Дата",              				Дата);
		ДанныеДокумента.Вставить("Ссылка", 			  				Документы.СчетФактураВыданный.ПустаяСсылка());
		ДанныеДокумента.Вставить("ДокументОснование", 				Ссылка);
		ДанныеДокумента.Вставить("Организация",   	  				Организация);
		ДанныеДокумента.Вставить("Контрагент", 		  				Контрагент);
		ДанныеДокумента.Вставить("ДоговорКонтрагента", 		  		ДоговорКонтрагента);
		ДанныеДокумента.Вставить("Руководитель", 	  				ОтпускРазрешил);
		ДанныеДокумента.Вставить("ГлавныйБухгалтер",  				Неопределено);
		ДанныеДокумента.Вставить("ВалютаРегламентированногоУчета",  мВалютаРегламентированногоУчета);
		ДанныеДокумента.Вставить("Подразделение", 	  				Склад.Подразделение);
		
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
		ПередачаНаРеализациюПоКомиссии = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ДанныеДокумента.Вставить("ПередачаНаРеализациюПоКомиссии",  ПередачаНаРеализациюПоКомиссии);
		
		СчетФактураТребуется = УчетНДС.ОпределитьСчетФактураТребуется(ЭтотОбъект);
		
		СтруктураОтбораСчетаФактуры = Новый Структура;
		СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
		
		Возврат УчетНДС.ПечатьУниверсальногоПередаточногоДокумента(ДанныеДокумента, СчетФактураТребуется, СтруктураОтбораСчетаФактуры);
		
	КонецФункции
	
#Если Клиент Тогда
	
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;

		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;

		// Получить экземпляр документа на печать
		Если ИмяМакета = "ТОРГ12" Тогда
			ТабДокумент = ПечатьТОРГ12();
		ИначеЕсли ИмяМакета = "УниверсальныйПередаточныйДокумент" Тогда
			ТабДокумент = ПечатьУниверсальногоПередаточногоДокумента();
		// +++ Карпычев (31.01.18)	
		ИначеЕсли ИмяМакета = "ТоварныйЧек" Тогда	
			ТабДокумент = ПечатьТоварногоЧека();
		ИначеЕсли ИмяМакета = "СчетНаОплату" Тогда	
			ТабДокумент = ПечатьСчетаНаОплату();	
		// +++ Карпычев (31.01.18)
		ИначеЕсли ИмяМакета = "ПечатьУниверсальнойФормы" Тогда	
			ТабДокумент = ПечатьУниверсальнойФормы();
		КонецЕсли;

		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект));

	КонецПроцедуры // Печать

#КонецЕсли

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура;

	// +++ Карпычев (31.01.18)
	Если ПечататьТолькоТовЧек() Тогда
		СтруктураМакетов.Вставить("ТоварныйЧек", "Товарный чек");
	Иначе
		СтруктураМакетов.Вставить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ (УПД)");
		СтруктураМакетов.Вставить("ТОРГ12"                           , "ТОРГ-12 (Товарная накладная)");
		СтруктураМакетов.Вставить("СчетНаОплату"                     , "Счет на оплату");
	КонецЕсли;
	// --- Карпычев (31.01.18)
	
	//СтруктураМакетов.Вставить("ПечатьУниверсальнойФормы"                     , "ПечатьУниверсальнойФормы");
		
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// ЛНА, Замер  APDEX ++(
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РеализацияТоваровУслуг_Проведение");
		
	КонецЕсли;
	//)--
	
	//18.06.2018 Колобок затирает качество
	ОрганизацияУчитыватьНДС = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "УчитыватьНДС");
	Для Каждого СтрокаТЧ Из Товары Цикл 
		СтрокаТЧ.Качество = Справочники.Качество.Новый;
		Если ОрганизацияУчитыватьНДС Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			КонецЕсли;
			СтрокаТЧ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, Истина, Истина, СтрокаТЧ.СтавкаНДС);
		КонецЕсли;
	КонецЦикла;
	Если ОрганизацияУчитыватьНДС Тогда
		Для Каждого СтрокаТЧ Из Услуги Цикл 
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			КонецЕсли;
			СтрокаТЧ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, Истина, Истина, СтрокаТЧ.СтавкаНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентВзаиморасчетов) ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагентаВзаиморасчетов) Тогда
		УстановитьКонтрагентаВзаиморасчетов();
	КонецЕсли;
	
	ПоследнийКлючСвязи = 0;
	Если Товары.Количество() = 0 Тогда
		ПоследнийКлючСвязи = 0
	Иначе
		КопияТовары = Товары.Выгрузить(,"КлючСвязи");
		КопияТовары.Сортировать("КлючСвязи УБЫВ");
		ПоследнийКлючСвязи = КопияТовары.Получить(0).КлючСвязи;
	КонецЕсли;
	Для Каждого ТекСтрока Из Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.КлючСвязи) Тогда
			ПоследнийКлючСвязи = ПоследнийКлючСвязи + 1;
			ТекСтрока.КлючСвязи = ПоследнийКлючСвязи;
		КонецЕсли;
	КонецЦикла;
	
	ПричиныОтказов.Свернуть("ПричинаОтмены, КлючСвязи, СкладПеремещения", "Количество");
	СтруктураПоиска = Новый Структура("Количество", 0);
	НайденныеСтроки = ПричиныОтказов.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		ПричиныОтказов.Удалить(ПричиныОтказов.Индекс(ТекСтрока));
	КонецЦикла;
	
	Если Дата >= Константы.ДатаЗаявкиСоздаютсяВ83.Получить() Тогда
		СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	КонецЕсли;
	
	//{{ХудинВВ 20180629 ХХ-159, временный костыль
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИНН = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН"));
		Если Не ЗначениеЗаполнено(ИНН) Тогда
			Отказ = Истина;
			Сообщить("Выбрана организация с незаполненным ИНН!");
		КонецЕсли;
	КонецЕсли;

	//{{ХудинВВ 20180629 ХХ-256 Запрет на изменение документов VMI
	ПроверитьНаличиеИзмененийVMI(Отказ, РежимЗаписи, РежимПроведения);

	
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияПриСдвигеДаты(ЭтотОбъект, РежимЗаписи, "ТоварыНаСкладах,РезервыТоваров,Услуги");
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И (СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугУпакован
		Или СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче
		Или СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен) Тогда 
		ПолныйОтказ = Товары.Итог("Количество") = 0 И Услуги.Количество() = 0;
	КонецЕсли;
	
	//#XX-100 Kalinin V.A. ( 2018-06-15 )
	Если Не ЗначениеЗаполнено(Менеджер) тогда 
		ЗапросМенеджеров = новый  Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	МенеджерыТорговыхТочекСрезПоследних.Менеджер
		|ИЗ
		|	РегистрСведений.МенеджерыТорговыхТочек.СрезПоследних КАК МенеджерыТорговыхТочекСрезПоследних
		|ГДЕ
		|	МенеджерыТорговыхТочекСрезПоследних.ВидМенеджера = ЗНАЧЕНИЕ(Перечисление.ВидыМенеджеров.Продажи)
		|	И МенеджерыТорговыхТочекСрезПоследних.ТорговаяТочка = &ТорговаяТочка" );
		ЗапросМенеджеров.УстановитьПараметр("ТорговаяТочка",Контрагент.ОсновнаяТорговаяТочка);
		
		Результат = ЗапросМенеджеров.Выполнить();
		Если не Результат.Пустой() тогда 
			Выборка  = Результат.Выбрать();
			Выборка.Следующий();
			Менеджер = Выборка.Менеджер;
		КонецЕсли;
	КонецЕсли;	
	
	// + 20180903 Пушкин XX-660
	Филиал = Документы.ЗаявкаПокупателя.ВернутьФилиал(Контрагент);
	// - 20180903 Пушкин XX-660
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		Если Константы.ПроверятьБлокировкиКонтрагентовПриПроведенииРТУ.Получить() Тогда 
			БлокировкиКлиента=УправлениеВзаиморасчетами.БлокировкиКлиента(Контрагент,ДоговорКонтрагента,Дата,ЭтотОбъект,Ложь);
			Если БлокировкиКлиента Тогда 
				//Если не РольДоступна("ПолныеПрава") Тогда
					Отказ = Истина;
				//КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатусДокумента) Тогда
		СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугНовый;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	//ЭтотОбъект.ДополнительныеСвойства.Очистить();
	ЭтотОбъект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	//Добавлено Валиахметов А.А. PK83-606 11.05.2018
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение //И СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен Тогда 
		Тогда 
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорВзаиморасчетов(ДоговорКонтрагента), "ДопустимоеЧислоДнейЗадолженности, ВидРасчетаДней");
		ДопустимоеЧислоДнейЗадолженности = Справочники.ДоговорыКонтрагентов.ДопустимоеЧислоДнейЗадолженности(ДоговорВзаиморасчетов(ДоговорКонтрагента), Дата);
		// Сергеев не пересчитывать дату оплаты если указана
		Если  ЭтотОбъект.СтатусДокумента=Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен и ДатаОплаты = дата(1,1,1) тогда 
			
			//ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(Дата, ДопустимоеЧислоДнейЗадолженности, Реквизиты.ВидРасчетаДней);
			ДатаОплаты = Документы.РеализацияТоваровУслуг.ДатаОплатыДляДокумента(ЭтотОбъект);
			
		Иначеесли не ЭтотОбъект.СтатусДокумента=Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен и не ДатаОплаты = дата(1,1,1) тогда
			ДатаОплаты=дата(1,1,1);
		КонецЕсли;			
	КонецЕсли;
	//Конец Добавлено Валиахметов А.А. 11.05.2018
	
	Если (РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения) тогда
		ЭтотОбъект.ДополнительныеСвойства.Вставить("Контроль", Новый Структура);
		Если НЕ ЭтоНовый() тогда
			ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("СтарыеЗначения", Новый Соответствие);
			ЭтотОбъект.ДополнительныеСвойства.Контроль.СтарыеЗначения.Вставить(
			Метаданные.Последовательности.ПоРасчетамСКонтрагентами, мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(
			ЭтотОбъект.Ссылка, Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
		КонецЕсли;
	Иначе
		//Если Не РольДоступна("ПолныеПрава") Тогда 
		//	Если Склад.СкладVMI Тогда 
		//		Отказ=Истина;
		//		Сообщить("Запрещено снимать с проведения реализации по складам ответ.хранения");
		//		Возврат;
		//	КонецЕсли;	
		//КонецЕсли;	
		//Если Склад.СкладVMI И СтатусДокумента=Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен Тогда  
		//	Если Не (РольДоступна("ПолныеПрава") Или НастройкаПравДоступа.ПолучитьЗначениеПраваПользователя(УправлениеПользователями.ОпределитьТекущегоПользователя(), ПланыВидовХарактеристик.ПраваПользователей.РедактированиеРеализацииОтветхранения)) Тогда 
		//		Если РежимЗаписиДокумента.ОтменаПроведения Тогда 
		//			Отказ=Истина;
		//			Сообщить("Нельзя снимать с проведения (или удалять), документы в статусе отгружен, со склада ответ.хранения!");
		//			Возврат
		//		КонецЕсли;	
		//	КонецЕсли;	
		//ИначеЕсли Склад.СкладVMI И НЕ РольДоступна("ПолныеПрава") Тогда 
		//	Отказ=Истина;
		//	Сообщить("Запрещено снимать с проведения реализации по складам ответ.хранения");
		//	Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	//XX-1207 1. Запретить распроведение (удаление) РТУ в статусе сборка и выше 
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И СтатусДокумента <> Справочники.СтатусыДокументов.РеализацияТоваровУслугНовый
		И НЕ ТипДоставки = Справочники.ТипыДоставки.ЭкспрессДоставка
		И НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
		Отказ=Истина;
		ТекстОшибки = "Нельзя снимать с проведения (или удалять) документы в статусе ""Сборка"" и выше!";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
		
	//Проверим на корректность Ставка/Сумма НДС   (Рудаков 22.06.18)
	НКачество=Справочники.Качество.Новый;
	УчитыватьНДС=Организация.УчитыватьНДС;
	Если УчитыватьНДС и Товары.Итог("СуммаНДС")=0 Тогда 
		Для Каждого Стр Из Товары Цикл
			Если Стр.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС Тогда 
				Стр.СтавкаНДС=Стр.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			Стр.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Стр.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Стр.СтавкаНДС));
			Если НЕ Стр.Качество=НКачество Тогда 
				Стр.Качество=НКачество;
			КонецЕсли;	
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, ЭтотОбъект);
		КонецЦикла;
	ИначеЕсли Не УчитыватьНДС Тогда 	
		Для Каждого Стр Из Товары Цикл
			ЕСли НЕ стр.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС Тогда 
				Стр.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
				Стр.СуммаНДС = 0;
			КонецЕсли;
			Если НЕ Стр.Качество=НКачество Тогда 
				Стр.Качество=НКачество;
			КонецЕсли;	
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, ЭтотОбъект);
		КонецЦикла;
	Иначе	
		Для Каждого Стр Из Товары Цикл
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;	
	//
	Документы.РеализацияТоваровУслуг.ЗаполнитьСкладыДляПеремещения(ЭтотОбъект, РежимЗаписи);
	
	
	Если Не ЗначениеЗаполнено(ТорговаяТочка) тогда 
		ТорговаяТочка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент,"ОсновнаяТорговаяТочка");
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Филиал) Тогда 
		Филиал = Справочники.Контрагенты.ФилиалКонтрагента(Контрагент);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Источник = Перечисления.ИсточникиРеализаций.Прочее;
	КонецЕсли;

	//Добавлено Валиахметов А.А. 11.09.2018  XX-784 Повторная выгрузка РТУ в Топ Лог
	Если Не ЭтоНовый() И Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		ДополнительныеСвойства.Вставить("СуммаДокументаСтароеЗначение", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СуммаДокумента"));						
	КонецЕсли;
	
	//Конец Добавлено Валиахметов А.А. 11.09.2018  XX-784 Повторная выгрузка РТУ в Топ Лог
	
	//ХудинВВ Проверка разрешения на продажу внешним покупателям согласно политике МФП
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ПроведениеДокументовКлиентСервер.ИспользуютсяМФП(Дата) Тогда
		
		ПараметрыПолитикиМФП = Справочники.ПолитикиМФП.ПолучитьПараметрыПолитикиМФПДляОрганизации(Организация, Дата, Истина);
		СобственыеКонтрагенты = Справочники.ПолитикиМФП.СобственыеКонтрагенты(Дата);
		
		Если НЕ ПараметрыПолитикиМФП.РазрешенаПродажаВнешнимКлиентам И СобственыеКонтрагенты.Найти(Контрагент) = Неопределено Тогда
			ТекстОшибки = "Для организации "+Организация+" запрещена продажа внешним клиентам! Проверьте настройки политики МФП.";
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//ВзаиморасчетыПриСборкеОтгрузки(); Перенесено в Документы.РеализацияТоваровУслуг.ВыполнитьПроведение
	
	ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("НовыеЗначения", Новый Соответствие);
	ЭтотОбъект.ДополнительныеСвойства.Контроль.НовыеЗначения.Вставить(
		Метаданные.Последовательности.ПоРасчетамСКонтрагентами, 
		мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(ЭтотОбъект.Ссылка,
		Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	
	СписокПрав = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.ОтключитьКонтрольОстатков, Ложь);
	
	Если ДополнительныеСвойства.Свойство("ОтключитьКонтрольОстатков") Или СписокПрав.Количество() = 1 И СписокПрав.Получить(0).Значение = Истина Тогда 
		лПараметры.Вставить("ОтключитьКонтрольОстатков");
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ДобавитьВОчередьОтправкиДокументовОтгрузки") Тогда
		лПараметры.Вставить("ДобавитьВОчередьОтправкиДокументовОтгрузки");
	КонецЕсли;
	
	мМенеджерОбъекта.ВыполнитьПроведение(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 	
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;
	
	// ЛНА, Замер  APDEX ++(
	Попытка		
		APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("РеализацияТоваровУслуг_Проведение", "Кол-во строк: "+Товары.Количество(), , Ссылка);
	Исключение
	КонецПопытки;
	//)--
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИспользоватьРазделениеРТУПоДатеОплаты = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ИспользоватьРазделениеРТУПоДатеОплаты");	
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаПокупателя") И ИспользоватьРазделениеРТУПоДатеОплаты Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСоздания = Документы.РеализацияТоваровУслуг.ИнициализироватьПараметрыСозданияДокументовПоЗаявке();
		МассивДокументов = Документы.РеализацияТоваровУслуг.СоздатьДокументыНаОснованииЗаявки(ДанныеЗаполнения, ПараметрыСоздания);
		
		#Если Клиент Тогда
			Для каждого ДокументОбъект Из МассивДокументов Цикл
				ДокументОбъект.ПолучитьФорму().Открыть();
			КонецЦикла;
		#КонецЕсли
		
		ДополнительныеСвойства.Вставить("НеОткрыватьФорму");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда
		
		ДокументЗаполнения = Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(ДанныеЗаполнения);
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаполнения, "СтатусДокумента") = Справочники.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден Тогда 
			Сообщить("Нельзя вводить реализацию на основании неподтвержденной заявки!");
			Возврат;
		КонецЕсли;
		
		Если ДокументЗаполнения.БлокировкаОтгрузки Тогда
			Сообщить("Нельзя вводить реализацию на основании заявки с блокировкой отгрузки!");
			Возврат;
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЗаполнения, "Контрагент,ДоговорКонтрагента,Контрагент.Блокировка_Отгрузок_Дата,Контрагент.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата, ДоговорКонтрагента.ДоговорПриостановлен, Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента.ДоговорПриостановлен, МаршрутДоставки.Склад.АвтоматическоеПеремещение");
		
		ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента;
		Контрагент = Реквизиты.Контрагент;
		УстановитьКонтрагентаВзаиморасчетов();
		
		СуммаДолга = СуммаДолгаПоДоговору(ДоговорКонтрагентаВзаиморасчетов);
		КонтролироватьСуммуЗадолженности = НЕ ДоговорКонтрагентаВзаиморасчетов.НеКонтролироватьЛимит;
			//Ещё была проверка ТорговаяТочка.VIP - не контролировать лимит, но этого реквизита нет на форме и привязка его к торговой точке? оО WTF?
			//И проверка Организация.НеКонтролироватьЛимит - но его тоже нет на форме и не контролировать лимит по всей организации слишком круто, имхо
		ДопустимаяСуммаЗадолженности = ДоговорКонтрагентаВзаиморасчетов.ДопустимаяСуммаЗадолженности;
		ПоГоловномуКонтрагенту = Контрагент <> КонтрагентВзаиморасчетов;
		
		Если КонтрагентВзаиморасчетов.Блокировка И ЗначениеЗаполнено(КонтрагентВзаиморасчетов.Блокировка_Отгрузок_Дата) Тогда
			Сообщить("Невозможно выписать реализацию. Заблокирован контрагент" + ?(ПоГоловномуКонтрагенту, "(Головной)", ""));
			Возврат;
		ИначеЕсли ДоговорКонтрагентаВзаиморасчетов.ДоговорПриостановлен Тогда
			Сообщить("Невозможно выписать реализацию. Договор приостановлен" + ?(ПоГоловномуКонтрагенту, "(Головной)", ""));
			Возврат;
		ИначеЕсли ДоговорКонтрагентаВзаиморасчетов.СлужебныйДоговор Тогда
			Сообщить("Невозможно выписать реализацию. Служебный договор" + ?(ПоГоловномуКонтрагенту, "(Головной)", ""));
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументЗаполнения, , "Номер, Дата, СтатусДокумента,СозданВ77, ДатаОплаты");
		
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Продажа; 
		
		Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда 
			ДокументОснование = ДокументЗаполнения;
		Иначе
			ДокументОснование = ДокументЗаполнения.ДокументОснование;
		КонецЕсли;
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	РезервыТоваровОстатки.Склад
		               |ИЗ
		               |	РегистрНакопления.РезервыТоваров.Остатки(, СтрокаЗаявки.Заявка = &Заявка) КАК РезервыТоваровОстатки
		               |ГДЕ
		               |	РезервыТоваровОстатки.КоличествоОстаток > 0";
					   
		Запрос.УстановитьПараметр("Заявка", ДокументОснование);
		МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0); 
		Если МассивСкладов.Количество() = 0 Тогда 
			//Могут быть услуги без резервов
			Склад = ДокументЗаполнения.Склад;
			//Сообщить("Нет данных для заполнения документа");
			//Возврат;
		ИначеЕсли МассивСкладов.Количество() = 1 Тогда 
			Склад = МассивСкладов.Получить(0);
		Иначе
			#Если Клиент Тогда
				Форма = ПолучитьФорму("ФормаВыбораСклада");
				Форма.МассивСкладов = МассивСкладов;
				Склад = Форма.ОткрытьМодально();
				Если Не ЗначениеЗаполнено(Склад) Тогда 
					Сообщить("Не выбран склад для выписки реализации");
					Возврат;
				КонецЕсли;
			#Иначе
				Склад = МассивСкладов.Получить(0);
			#КонецЕсли
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаявкаПокупателяТовары.Ссылка.Склад КАК Склад,
		               |	ЗаявкаПокупателяТовары.Номенклатура КАК Номенклатура,
		               |	ЗаявкаПокупателяТовары.Качество КАК Качество,
		               |	ЗаявкаПокупателяТовары.СтрокаЗаявки КАК СтрокаЗаявки,
		               |	ЗаявкаПокупателяТовары.ЕдиницаИзмерения,
		               |	ЗаявкаПокупателяТовары.Коэффициент,
		               |	ЗаявкаПокупателяТовары.Цена,
		               |	ЗаявкаПокупателяТовары.Сумма,
		               |	ЗаявкаПокупателяТовары.СтавкаНДС,
		               |	ЗаявкаПокупателяТовары.СуммаНДС,
		               |	ЗаявкаПокупателяТовары.КомментарийИзСайта,
		               |	ЗаявкаПокупателяТовары.IDSite,
		               |	ЗаявкаПокупателяТовары.ПроцентСкидкиНаценки,
		               |	ЗаявкаПокупателяТовары.ЦенаЗакупки,
		               |	ЗаявкаПокупателяТовары.Количество - ЗаявкаПокупателяТовары.Отмена КАК КоличествоИзначальное,
		               |	НЕ ЗаявкаПокупателяТовары.Ссылка.УчитыватьНДС
		               |		ИЛИ ЗаявкаПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
		               |ПОМЕСТИТЬ втТовары
		               |ИЗ
		               |	Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
		               |ГДЕ
		               |	ЗаявкаПокупателяТовары.Количество - ЗаявкаПокупателяТовары.Отмена > 0
		               |	И ЗаявкаПокупателяТовары.Ссылка = &Ссылка
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	СтрокаЗаявки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РезервыТоваровОстатки.Склад КАК Склад,
		               |	РезервыТоваровОстатки.Номенклатура КАК Номенклатура,
		               |	РезервыТоваровОстатки.Качество КАК Качество,
		               |	РезервыТоваровОстатки.СтрокаЗаявки КАК СтрокаЗаявки,
		               |	РезервыТоваровОстатки.СтрокаПрихода,
		               |	РезервыТоваровОстатки.КоличествоОстаток
		               |ПОМЕСТИТЬ втРезерв
		               |ИЗ
		               |	РегистрНакопления.РезервыТоваров.Остатки(
		               |			,
		               |			Склад = &Склад
		               |				И СтрокаЗаявки В
		               |					(ВЫБРАТЬ
		               |						втТовары.СтрокаЗаявки
		               |					ИЗ
		               |						втТовары)) КАК РезервыТоваровОстатки
		               |ГДЕ
		               |	РезервыТоваровОстатки.КоличествоОстаток > 0
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	СтрокаЗаявки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втРезерв.Номенклатура,
		               |	втРезерв.Качество,
		               |	втТовары.СтрокаЗаявки,
		               |	втРезерв.Номенклатура.ЕдиницаХраненияОстатков как ЕдиницаИзмерения ,
		               |	1 КАК Коэффициент,
		               |	втТовары.Цена,
		               |	втТовары.Сумма * втРезерв.КоличествоОстаток / (втТовары.КоличествоИзначальное * втТовары.Коэффициент) КАК Сумма,
		               |	втТовары.СтавкаНДС,
		               |	втТовары.СуммаНДС * втРезерв.КоличествоОстаток / (втТовары.КоличествоИзначальное * втТовары.Коэффициент) КАК СуммаНДС,
		               |	втТовары.КомментарийИзСайта,
		               |	втТовары.IDSite,
		               |	втТовары.ПроцентСкидкиНаценки,
		               |	втТовары.ЦенаЗакупки,
		               |	втРезерв.СтрокаПрихода,
		               |	втРезерв.КоличествоОстаток КАК Количество,
		               |	втРезерв.КоличествоОстаток КАК КоличествоПлан,
		               |	втТовары.СуммаВключаетНДС
		               |ИЗ
		               |	втТовары КАК втТовары
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРезерв КАК втРезерв
		               |		ПО втТовары.СтрокаЗаявки = втРезерв.СтрокаЗаявки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	УслугиОстатки.Номенклатура,
		               |	УслугиОстатки.КоличествоОстаток КАК Количество,
		               |	УслугиОстатки.СуммаОстаток КАК Сумма,
		               |	УслугиОстатки.СуммаОстаток / УслугиОстатки.КоличествоОстаток КАК Цена,
		               |	УслугиОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС
		               |ИЗ
		               |	РегистрНакопления.Услуги.Остатки(, Заявка = &Заявка) КАК УслугиОстатки";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументЗаполнения);
		Запрос.УстановитьПараметр("Заявка", ДокументОснование);
		Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
		Запрос.УстановитьПараметр("Склад", Склад);
		
		Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗаявкаПокупателя.Товары", "Документ.КорректировкаЗаявкиПокупателя.Товары");
			
		КонецЕсли;
		
		Результаты = Запрос.ВыполнитьПакет();
		СуммаОтгрузки = 0;
		
		Если Результаты[2].Пустой() И Результаты[3].Пустой() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "По документу " + ДанныеЗаполнения + " отсутствуют данные для заполнения документа ""Реализация товаров и услуг""";
			Сообщение.Сообщить();
			
			Возврат
		Иначе
			КлючСвязи = 1;
			Выборка = Результаты[2].Выбрать();
			ТребуетсяСФ = УчетНДС.ОпределитьСчетФактураТребуется(ДокументОснование);
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.КлючСвязи = КлючСвязи;
				КлючСвязи = КлючСвязи + 1;
				
				НоваяСтрока.ПроцентСкидкиНаценки = 0;
				
				Если Не ТребуетсяСФ Тогда 
					НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;	
				КонецЕсли;
				
				Если Не Выборка.СуммаВключаетНДС Тогда 	 
					СуммаНДС = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма,
					Истина, Выборка.СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				Иначе
					СуммаНДС = 0;
				КонецЕсли;
				
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + СуммаНДС;
				НоваяСтрока.Цена = НоваяСтрока.Сумма/НоваяСтрока.Количество;
				
				СуммаОтгрузки = СуммаОтгрузки + НоваяСтрока.Сумма;
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			КонецЦикла;
			
			ВыборкаПоУслугам = Результаты[3].Выбрать();
			Пока ВыборкаПоУслугам.Следующий() Цикл 
				НоваяСтрока = Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоУслугам);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				СуммаОтгрузки = СуммаОтгрузки + НоваяСтрока.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		Если КонтролироватьСуммуЗадолженности Тогда 
			Если СуммаОтгрузки + СуммаДолга > ДопустимаяСуммаЗадолженности Тогда 
				Сообщить("Превышен долг контрагента. Допустимая задолженность по договору: " + ДопустимаяСуммаЗадолженности + ". Планируемая сумма отгрузки: " + СуммаОтгрузки + ". Имеющийся долг: " + СуммаДолга);
				Товары.Очистить();
				Услуги.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		ДатаОплаты = Дата(1,1,1);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Строка") Тогда   //По номеру розничной заявки
		ЗаполнитьРТУНаОснованиииНомераРозничнойЗаявки(ДанныеЗаполнения);
	Иначе
		
		СтандартнаяОбработка = Ложь;
		Возврат
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВводНаОсновании");
	
КонецПроцедуры

Процедура ЗаполнитьРТУНаОснованиииНомераРозничнойЗаявки(НомерРозничнойЗаявки)
	Дата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаявкаПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаявкаПокупателя КАК ЗаявкаПокупателя
	|ГДЕ
	|	ЗаявкаПокупателя.НомерРозничнойЗаявки = &НомерРозничнойЗаявки
	|	И ЗаявкаПокупателя.Проведен";
	Запрос.УстановитьПараметр("НомерРозничнойЗаявки", НомерРозничнойЗаявки);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		ВызватьИсключение "Не найдено заявок по номеру розничной заявки" + НомерРозничнойЗаявки;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Заявка = Выборка.Ссылка;
	
	ДокументЗаполнения = Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(Заявка);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЗаполнения, "Контрагент,ДоговорКонтрагента,Контрагент.Блокировка_Отгрузок_Дата,Контрагент.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата, ДоговорКонтрагента.ДоговорПриостановлен, Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента.ДоговорПриостановлен, МаршрутДоставки.Склад.АвтоматическоеПеремещение");
	
	ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента;
	Контрагент = Реквизиты.Контрагент;
	УстановитьКонтрагентаВзаиморасчетов();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументЗаполнения, , "Номер, Дата, СтатусДокумента,СозданВ77, ДатаОплаты, СуммаДокумента");
	
	//Сосчитаем дату оплаты по каждой строке
	ДопустимоеЧислоДнейЗадолженности = Справочники.ДоговорыКонтрагентов.ДопустимоеЧислоДнейЗадолженности(ДоговорКонтрагентаВзаиморасчетов, Дата);
	РеквизитыДоговораВзаиморасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагентаВзаиморасчетов, "ВидРасчетаДней, НеКонтролироватьЛимит, ДопустимаяСуммаЗадолженности");
	//Общие дни по договору
	ДатаОплатыОбщая = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(НачалоДня(Дата), ДопустимоеЧислоДнейЗадолженности, РеквизитыДоговораВзаиморасчетов.ВидРасчетаДней); 	
	ЭтотОбъект.ДатаОплаты = ДатаОплатыОбщая;
	
	Если ДополнительныеСвойства.Свойство("ТоварыКЗаполнению") Тогда 
		Документы.РеализацияТоваровУслуг.СоздатьДокументНаОснованииЗаявки_ЗаполнитьТовары(ЭтотОбъект, ДополнительныеСвойства.ТоварыКЗаполнению);				
		РезультатУслуги = Документы.РеализацияТоваровУслуг.ОстаткиУслугПоЗаявкеКорректировке(ДокументЗаполнения);
		ОстаткиУслуг   = РезультатУслуги.Выгрузить();
		Документы.РеализацияТоваровУслуг.СоздатьДокументНаОснованииЗаявки_ЗаполнитьУслуги(ЭтотОбъект, ОстаткиУслуг)
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("СкладРезерва") Тогда 
		Склад = ДополнительныеСвойства.СкладРезерва;
		Филиал = Склад.Филиал;
	КонецЕсли;
КонецПроцедуры
	
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьОтменуПроведения(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 	
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугНовый;
	ДокументОснование = Неопределено;
	СозданВ77 = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	//Если СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен Тогда 
	//	ПроверяемыеРеквизиты.Добавить("МаршрутДоставки");
	//КонецЕсли;
	
	РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "Бонусный,Сувенирный");
	Если РеквизитыСклада.Бонусный Или РеквизитыСклада.Сувенирный Тогда 
		Индекс =  ПроверяемыеРеквизиты.Найти("Товары.Цена");
		Если Индекс <> Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(Индекс);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
		ПроверяемыеРеквизиты.Добавить("ТипДоставки");
		ПроверяемыеРеквизиты.Добавить("МаршрутДоставки");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Добавлено Валиахметов А.А.  17.02.2018
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	// + Пушкин 2018-04-10
	////////////Если СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка И Организация.УчитыватьНДС Тогда 
	////////////	ПоискСФ = УчетНдс.НайтиПодчиненныйСчетФактуру(Ссылка);
	////////////	Если ТипЗнч(ПоискСФ) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
	////////////		СФ = Документы.СчетФактураВыданный.СоздатьДокумент();
	////////////		СФ.Заполнить(ЭтотОбъект.Ссылка);
	////////////		ЗаполнитьЗначенияСвойств(СФ, ЭтотОбъект, "Контрагент, ДоговорКонтрагента");
	////////////		СФ.Записать(РежимЗаписиДокумента.Проведение);
	////////////	КонецЕсли;
	////////////КонецЕсли;
	
	Если НЕ Отказ тогда
		ОбработатьСчФ();
	КонецЕсли;
	// - Пушкин 2018-04-10
	
	// Конец Добавлено Валиахметов А.А.  17.02.2018
	
	//Добавлено Валиахметов А.А. 11.09.2018  XX-784 Повторная выгрузка РТУ в Топ Лог
	Если ДополнительныеСвойства.Свойство("СуммаДокументаСтароеЗначение") И СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен И 
		ДополнительныеСвойства.СуммаДокументаСтароеЗначение <> СуммаДокумента Тогда
		СтруктураВозврата = ВыгрузитьВОбменТоплог();
	КонецЕсли;
	//Конец Добавлено Валиахметов А.А. 11.09.2018  XX-784 Повторная выгрузка РТУ в Топ Лог
	
	Если ДополнительныеСвойства.Свойство("ЗаписатьВИсториюИзменения") Тогда
		РегистрыСведений.ПричиныИзмененияДокументов.Добавить(Ссылка, ДополнительныеСвойства.КомментарийПричинаИзменения, ДополнительныеСвойства.СуммаДоПричинаИзменения);
	КонецЕсли;
	
КонецПроцедуры

// + Пушкин 2018-04-10
Процедура ПередУдалением(Отказ)
	Если НЕ Отказ тогда
		ОбработатьСчФ(0);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьСчФ(пар_Событие = 1) Экспорт
	
	ПоискСФ = УчетНдс.НайтиПодчиненныйСчетФактуру(Ссылка);	
	
	НовыйСФ = 1;
	Если ЗначениеЗаполнено(ПоискСФ) тогда
		Если ТипЗнч(ПоискСФ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
			НовыйСФ = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если пар_Событие = 0 тогда
		
		Если НовыйСФ = 1 тогда
			Возврат;
		КонецЕсли;
		
		СФ = ПоискСФ.ПолучитьОбъект();
		СФ.УстановитьПометкуУдаления(Истина);
		
	ИначеЕсли пар_Событие = 1 тогда
		
		Если СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугНовый тогда
			
			Если НовыйСФ = 0 тогда
				СФ = ПоискСФ.ПолучитьОбъект();
				СФ.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		Иначе
					
			
			Организация_УчитыватьНДС = УчетНДС.ОпределитьСчетФактураТребуется(ЭтотОбъект); //?(ЗначениеЗаполнено(Организация),ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация,"УчитыватьНДС"),Ложь);
			
			Если Организация_УчитыватьНДС Тогда 
				
				СФ = "";
				Если НовыйСФ = 1 тогда
					СФ = Документы.СчетФактураВыданный.СоздатьДокумент();	
				Иначе
					СФ = ПоискСФ.ПолучитьОбъект();
				КонецЕсли;
				
				СФ.ДокументыОснования.Очистить();
				СФ.ДатаНомерДокументовОплаты.Очистить();
				СФ.Заполнить(ЭтотОбъект.Ссылка);
				ЗаполнитьЗначенияСвойств(СФ, ЭтотОбъект, "Дата,Организация,Контрагент,ДоговорКонтрагента,СуммаДокумента,ВалютаДокумента,Ответственный,ПометкаУдаления","СозданВ77");
				СФ.ДокументОснование = Ссылка;
				СФ.КППКонтрагента = Контрагент.ОсновнаяТорговаяТочка.КПП;
				СФ.Записать(?(Проведен,РежимЗаписиДокумента.Проведение, ?(СФ.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись) ));
			
			Иначе
				
				Если НовыйСФ = 0 тогда
					СФ = ПоискСФ.ПолучитьОбъект();
					СФ.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// - Пушкин 2018-04-10

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗаписиПоследовательности(вхПоследовательность) Экспорт
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лЭтоОтменаПроведения = Ложь;
	лРежимЗаписи = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи", лРежимЗаписи) тогда
		лЭтоОтменаПроведения = (лРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		Если НЕ лЭтоОтменаПроведения И (ЭтотОбъект.СуммаДокумента <> 0) И ЭтотОбъект.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты тогда
			лСтрокаРезультат = лРезультат.Добавить();
			лСтрокаРезультат.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
			лСтрокаРезультат.Период = ЭтотОбъект.Дата;
			лСтрокаРезультат.Регистратор = ЭтотОбъект.Ссылка;
		КонецЕсли;
		
		Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
		
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура КонтрольБлокировокКонтрагента(Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КонтрагентВзаиморасчетов) ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагентаВзаиморасчетов) Тогда
		УстановитьКонтрагентаВзаиморасчетов();
	КонецЕсли;
	
	ТекстОшибки = "";
	ЕстьБлокировки = Ложь;
	НетПравПревышенияЛимита = НЕ НастройкаПравДоступа.ПолучитьЗначениеПраваПользователя(ПараметрыСеанса.ТекущийПользователь, ПланыВидовХарактеристик.ПраваПользователей.РазрешитьИзменятьПриостановкуОтгрузки);
	
	ДанныеБлокировкиКонтрагента = Справочники.Контрагенты.ДанныеБлокировкиКонтрагента(Контрагент);
	Если ДанныеБлокировкиКонтрагента.Заблокирован Тогда
		ТекстОшибки =	"Контрагент заблокирован" + ?(ДанныеБлокировкиКонтрагента.ПоГоловномуКонтрагенту, " (по головному контрагенту)", "") + Символы.ПС +
		?(НетПравПревышенияЛимита, "Документ не будет проведен", "");
		ЕстьБлокировки = Истина;
	КонецЕсли;
	
	ДанныеПревышенияКредита = ДанныеПревышенияКредита();
	Если ДанныеПревышенияКредита.ПревышениеКредита Тогда
		ТекстОшибки = ТекстОшибки + "Превышение кредита контрагента" + ?(ДанныеБлокировкиКонтрагента.ПоГоловномуКонтрагенту, " (по головному контрагенту)", "") + Символы.ПС +
		"Текущая задолженность: " + ДанныеПревышенияКредита.ТекущаяЗадолженность + Символы.ПС +
		"Сумма документа: " + СуммаДокумента + Символы.ПС +
		"Допустимая сумма кредита: " + ДоговорКонтрагентаВзаиморасчетов.ДопустимаяСуммаЗадолженности + Символы.ПС +
		?(НетПравПревышенияЛимита, "Документ не будет проведен", "");
		ЕстьБлокировки = Истина;
	КонецЕсли;
	
	Если ЕстьБлокировки Тогда
		Сообщить(ТекстОшибки);
		Если НетПравПревышенияЛимита Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Функция ДанныеПревышенияКредита()
	
	Структура = Новый Структура("ПревышениеКредита,ПоГоловномуКонтрагенту,ТекущаяЗадолженность,СуммаКредита", Ложь, Ложь,0,0);
	Если НЕ ДоговорКонтрагентаВзаиморасчетов.НеКонтролироватьЛимит Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВзаиморасчетыОстатки.СуммаРеглОстаток КАК Сумма
		                      |ПОМЕСТИТЬ Остатки
		                      |ИЗ
		                      |	РегистрНакопления.Взаиморасчеты.Остатки(&Период, ДоговорКонтрагента = &Договор) КАК ВзаиморасчетыОстатки
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	ВзаиморасчетыПриСборкеОтгрузкиОстатки.СуммаОстаток
		                      |ИЗ
		                      |	РегистрНакопления.ВзаиморасчетыПриСборкеОтгрузки.Остатки(&Период, ДоговорКонтрагента = &Договор) КАК ВзаиморасчетыПриСборкеОтгрузкиОстатки
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	СУММА(Остатки.Сумма) КАК Сумма
		                      |ИЗ
		                      |	Остатки КАК Остатки");
		Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Договор", ДоговорКонтрагентаВзаиморасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		СуммаОстаток = ?(Выборка.Следующий(), Выборка.Сумма, 0);
		Структура.ПревышениеКредита = СуммаОстаток + СуммаДокумента > ДоговорКонтрагентаВзаиморасчетов.ДопустимаяСуммаЗадолженности;
		Структура.ПоГоловномуКонтрагенту = Контрагент <> КонтрагентВзаиморасчетов;
		Структура.ТекущаяЗадолженность = СуммаОстаток;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

// +++ Карпычев (31.01.18)
Функция ПечататьТолькоТовЧек() Экспорт
	
	// +++ Карпычев (07.06.18)
	//Если ДоговорКонтрагента.ВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда
	//	Возврат Истина;
	//ИначеЕсли Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
	//	Если Организация.УчитыватьНДС Тогда
	//		Возврат Ложь;                     // - тогда надо печатать СФ и ТОРГ-12
	//	Иначе
	//		Возврат Истина;
	//	КОнецЕсли;
	//Иначе
	//	Возврат Ложь;                        // - тогда надо печатать СФ и ТОРГ-12
	//КонецЕсли;
	РеквизитыОрг = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ТипОплаты,УчитыватьНДС");
	ВедетсяУчетНДС = УчетНДС.ОпределитьСчетФактураТребуется(ЭтотОбъект);
	Если РеквизитыОрг.ТипОплаты = Справочники.ВидыОплатЧекаККМ.Любой Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагентаВзаиморасчетов, "ВидОплаты") = Перечисления.ВидыДенежныхСредств.Наличные;
	Иначе
		Возврат Не ВедетсяУчетНДС ; //РеквизитыОрг.УчитыватьНДС;
	КонецЕсли;
	
	// --- Карпычев (07.06.18)
	
КонецФункции  // +++ Карпычев (31.01.18)

// +++ функция выкидывает из номера документа все буквы, оставляя только цифры (Карпычев 02.02.18)
Функция ПреобразоватьНомерДокумента(ИсходнаяСтрока)
	
	КонечнаяСтрока = "";
	Для й = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, й, 1);
		Если Найти("0123456789", ТекущийСимвол) > 0 Тогда
			КонечнаяСтрока = КонечнаяСтрока + ТекущийСимвол; 
		КонецЕсли;	
	КонецЦикла;
	
	// - удаление ведущих нулей
	Пока Лев(КонечнаяСтрока, 1) = "0" Цикл
		КонечнаяСтрока = Сред(КонечнаяСтрока, 2);
	КонецЦикла;
	
	Возврат КонечнаяСтрока;	
	
КонецФункции // --- Карпычев (02.02.18)

Процедура ВзаиморасчетыПриСборкеОтгрузки()
	
	ДвиженияПоВзаиморасчетам = Движения.ВзаиморасчетыПриСборкеОтгрузки;
	Если СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка Тогда
		Движение = ДвиженияПоВзаиморасчетам.Добавить();
		Движение.Регистратор = Ссылка;
		Движение.Период = Дата;
		Движение.ДоговорКонтрагента = ДоговорКонтрагентаВзаиморасчетов;
		Движение.Сумма = СуммаДокумента;
	КонецЕсли;
	ДвиженияПоВзаиморасчетам.Записать();
	
КонецПроцедуры

Процедура УстановитьКонтрагентаВзаиморасчетов() Экспорт
	
	Если ЗначениеЗаполнено(Контрагент.ГоловнойКонтрагент) И Контрагент.ГоловнойКонтрагент <> Контрагент Тогда
		ДоговорКонтрагентаВзаиморасчетов = ДоговорВзаиморасчетов(ДоговорКонтрагента);
		КонтрагентВзаиморасчетов = ДоговорКонтрагентаВзаиморасчетов.Владелец;
	Иначе
		КонтрагентВзаиморасчетов = Контрагент;
		ДоговорКонтрагентаВзаиморасчетов = ДоговорКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоговорВзаиморасчетов(Договор)
	     
	текКонтрагент = Договор.Владелец;
	ГоловнойКонтрагент = текКонтрагент.ГоловнойКонтрагент;
	
	ДоговорВзаиморасчетов = Договор;
	Если текКонтрагент <> ГоловнойКонтрагент И ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
		//Запрос = Новый Запрос("ВЫБРАТЬ
		//                      |	ДоговорыКонтрагентов.Ссылка,
		//                      |	ВЫБОР
		//                      |		КОГДА ДоговорыКонтрагентов.ДоговорНаОферту = &ДоговорНаОферту
		//                      |			ТОГДА 0
		//                      |		ИНАЧЕ 1
		//                      |	КОНЕЦ КАК Приоритет
		//                      |ИЗ
		//                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		//                      |ГДЕ
		//                      |	ДоговорыКонтрагентов.Владелец = &ГоловнойКонтрагент
		//                      |	И ДоговорыКонтрагентов.Организация = &Организация
		//                      |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		//                      |	И НЕ ДоговорыКонтрагентов.СлужебныйДоговор
		//                      |	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		//                      |	И ДоговорыКонтрагентов.ВидОплаты = &ВидОплаты
		//                      |	И НЕ ДоговорыКонтрагентов.ДоговорПриостановлен
		//                      |
		//                      |УПОРЯДОЧИТЬ ПО
		//                      |	Приоритет");
		//Запрос.УстановитьПараметр("ГоловнойКонтрагент", ГоловнойКонтрагент);
		//Запрос.УстановитьПараметр("ДоговорНаОферту", Договор.ДоговорНаОферту);
		//Запрос.УстановитьПараметр("Организация", Договор.Организация);
		//Запрос.УстановитьПараметр("ВидДоговора", Договор.ВидДоговора);
		//Запрос.УстановитьПараметр("ВидОплаты", Договор.ВидОплаты);
		//Выборка = Запрос.Выполнить().Выбрать();
		//ДоговорВзаиморасчетов = ?(Выборка.Следующий(), Выборка.Ссылка, Договор);
		
		//ХудинВВ 20180724, XX-356 При расчете даты оплаты для подчиненных контрагентов (головной контрагент не равен контрагенту), 
		//брать количество дней отсрочки оплаты из основного договора головного контрагента. 
		//Если основной договор не установлен берем из договора в документе. 
		ОсновнойДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнойКонтрагент, "ОсновнойДоговорКонтрагента");
		Если ЗначениеЗаполнено(ОсновнойДоговорКонтрагента) Тогда
			 ДоговорВзаиморасчетов = ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорВзаиморасчетов;
	
КонецФункции

Функция СуммаДолгаПоДоговору(Договор)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЕСТЬNULL(ВзаиморасчетыОстатки.ДоговорКонтрагента, ДепозитыКонтрагентовОстатки.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	                      |	ЕСТЬNULL(ВзаиморасчетыОстатки.СуммаУпрОстаток, 0) + ЕСТЬNULL(ДепозитыКонтрагентовОстатки.СуммаУпрОстаток, 0) КАК СуммаДолга
	                      |ИЗ
	                      |	РегистрНакопления.Взаиморасчеты.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыОстатки
	                      |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ДепозитыКонтрагентов.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ДепозитыКонтрагентовОстатки
	                      |		ПО ВзаиморасчетыОстатки.ДоговорКонтрагента = ДепозитыКонтрагентовОстатки.ДоговорКонтрагента");
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	Результат = Запрос.Выполнить().Выбрать();
	Возврат ?(Результат.Следующий(), Результат.СуммаДолга, 0)
	
КонецФункции

//Углев 22.06.2018
Функция ВыгрузитьВОбменТоплог() Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Ошибка = Ложь;
	СообщениеДиагностики = "";
	
	//Проверки
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Если  Не Проведен 	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "Документ не проведен." + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если  ЭтоМФП 	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "Установлен флаг ЭтоМФП." + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если  Не (СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка Или СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугУпакован Или
		СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче Или СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен) 	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "Документ имеет статус " + СтатусДокумента + "должен быть статус Отгружен или Сборка." + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если  флНеВыгружатьВТопЛог	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "Установлен флаг ""Не выгружать в Топлог"". " + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если  Склад.ОбменСTopLog = Ложь	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "У склада в документе не установлен флаг ""Обмен с Топлог""." + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Узел = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(Метаданные.ПланыОбмена.ОбменПартКом83_TopLog_РТУ, 3);
	Если НЕ ЗначениеЗаполнено(Узел) Тогда 
		СообщениеДиагностики = СообщениеДиагностики + "Не найден узел обмена для выгрузки в Топлог." + Символы.ПС;
		Ошибка = Истина;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Если Ошибка = Ложь Тогда  
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Ссылка);
		СообщениеДиагностики = СообщениеДиагностики + "Документ зарегистрирован в обмене с Топ Лог";		
	Иначе
		СообщениеДиагностики = "Не удалось зарегистрировать документ в обмене с Топлог, по причине:" + Символы.ПС + СообщениеДиагностики;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Ошибка", Ошибка);
	СтруктураВозврата.Вставить("СообщениеДиагностики", СообщениеДиагностики);
	Возврат СтруктураВозврата;
	
КонецФункции

//ХудинВВ 20180629 ХХ-256 Запрет на изменение документов VMI
Процедура ПроверитьНаличиеИзмененийVMI(Отказ, РежимЗаписи, РежимПроведения)
	
	//ХХ-256
	//Все проведенные документы РТУ, запретить изменять количество строк в ТЧ товары, количество план и количество ТЧ товары, склад в шапке. 
	//так же запретить распроведение. 
	//Для всех ролей.	
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	СписокПрав = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактироватьРТУНеограниченно, Ложь);
	Если СписокПрав.Количество() = 1 И СписокПрав.Получить(0).Значение = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Шапка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Склад, Проведен,СтатусДокумента");
	
	//Только для проведенных
	Если Не (Шапка.Проведен И Шапка.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен) Тогда
		Возврат;
	КонецЕсли;
	
	//Только если Склад VMI
	Если Не ЗначениеЗаполнено(Шапка.Склад) ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.Склад, "СкладVMI") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ТОгда
		ТекстОшибки = "Отмена проведения документа запрещена!";
	КонецЕсли;
	
	Если Склад <> Шапка.Склад Тогда
		ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "","",Символы.ПС) + "Изменение склада в проведенном документе запрещено!";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТЧНовая = Товары.Выгрузить(,"Номенклатура, КоличествоПлан, Количество");
	ТЧНовая.Свернуть("Номенклатура","КоличествоПлан, Количество");
	Запрос.УстановитьПараметр("ТЧНовая", ТЧНовая);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧНовая.Номенклатура,
		|	ТЧНовая.КоличествоПлан,
		|	ТЧНовая.Количество
		|ПОМЕСТИТЬ ТЧ
		|ИЗ
		|	&ТЧНовая КАК ТЧНовая
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(РеализацияТоваровУслугТовары.КоличествоПлан) КАК КоличествоПлан,
		|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТЧСсылки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТЧ.Номенклатура, ТЧСсылки.Номенклатура) КАК Номенклатура,
		|	ТЧ.КоличествоПлан,
		|	ТЧ.Количество
		|ИЗ
		|	ТЧ КАК ТЧ
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТЧСсылки КАК ТЧСсылки
		|		ПО (ТЧСсылки.Номенклатура = ТЧ.Номенклатура)
		|ГДЕ
		|	ЕСТЬNULL(ТЧ.КоличествоПлан, 0) <> ЕСТЬNULL(ТЧСсылки.КоличествоПлан, 0)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = ТекстОшибки+?(ТекстОшибки = "","",Символы.ПС)+"Изменение количества план в табличной части проведенного документа запрещено!";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Сообщить(ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мМенеджерОбъекта = Документы[Метаданные().Имя];