//// ОБРАБОТЧИКИ МОДУЛЯ ОБЪЕКТА

Процедура ВыполнитьПроведение(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	Если вхПараметры = Неопределено Тогда
		вхПараметры = Новый Структура;
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ОперативноеПроведение(вхПараметры) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") + 20 < ТекущаяДата() Тогда 
		вхПараметры.Вставить("ОперативноеПроведение", Ложь);
	КонецЕсли;
	
	вхПараметры.Вставить("ТаблицыДвижений", Новый Структура("ТоварыНаСкладах, РезервыТоваров"));
	
	лКонтроль = Неопределено;
	лФильтр = Неопределено;
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ДанныеОбъекта.Контроль", лКонтроль);
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "Фильтр", лФильтр);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Источник") = Перечисления.ИсточникиРеализаций.База77 Тогда
		 Сообщить(""+вхСсылкаНаДокумент+" загружен из 77, он не проводится");
		 Возврат;
	КонецЕсли;
	
	//Если Не ПараметрыСеанса.ОпределятьСтратегиюПогашенияПартийТоваровПоСкладу Тогда
	//	ПроведениеДокументовКлиентСервер.ПогашениеПартийТоваров(вхСсылкаНаДокумент, вхПараметры);
	//КонецЕсли;
	//
	Склад =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Склад");
	СкладVMI = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "СкладVMI");
	ИспользованиеСобственногоСписанияПартийДляРТУ = ПроведениеДокументовКлиентСервер.ИспользованиеСобственногоСписанияПартийДляРТУ(вхСсылкаНаДокумент);	
	
	ИспользоватьСвоеСписаниеПартий = ИспользованиеСобственногоСписанияПартийДляРТУ И СкладVMI;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыНаСкладах") тогда
		ПроверитьВозможностьВыпискиКлиенту(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		
		Если НЕ ИспользоватьСвоеСписаниеПартий Тогда //ХудинВВ 20180709 Для складов VMI движения по товарам на складах формируются в проведении по партиям
			КонтрольОстатков(вхСсылкаНаДокумент, вхОтказ, вхПараметры);  //Используется свой контроль остатков (с учетом собственного резерва)
			ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыНаСкладах", РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		КонецЕсли;
		ОбновитьСЗ(вхСсылкаНаДокумент);
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыКОтгрузке") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыКОтгрузке", РегистрыНакопления_ТоварыКОтгрузке(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если вхОтказ Тогда
		Возврат;
	КонецЕсли;
	
	//Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Продажи") тогда
	//	ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "Продажи", РегистрыНакопления_Продажи(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	//КонецЕсли;
	РеквРеал =   ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент,"Дата,ЭтоМФП");
	Если Не РеквРеал.ЭтоМФП и РаботаСоСтатусамиДокументовСервер.НоваяСхемаЗакрытияЗаявок(РеквРеал.Дата) тогда  
		Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ЗаявкиПокупателей") тогда
			ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ЗаявкиПокупателей", РегистрыНакопления_ЗаявкиПокупателей(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		КонецЕсли;
	Иначе 
		ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ЗаявкиПокупателей);
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "РезервыТоваров") тогда
		вхПараметры.ТаблицыДвижений.Вставить("РезервыТоваров", РегистрыНакопления_РезервыТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "РезервыТоваров", вхПараметры.ТаблицыДвижений.РезервыТоваров);
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ОтказыПоЗаявкам") тогда
		ПроверитьКорректностьОтказов(вхСсылкаНаДокумент, вхОтказ);
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ОтказыПоЗаявкам", РегистрыНакопления_ОтказыПоЗаявкам(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Услуги") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "Услуги", РегистрыНакопления_Услуги(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваров") 
		ИЛИ ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Продажи") 
		Тогда
		
		БлокировкаДанных = Новый БлокировкаДанных;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
		               |	РеализацияТоваровУслугТовары.Номенклатура,
		               |	РеализацияТоваровУслугТовары.Качество
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад.ФизическийСклад,
		               |	РеализацияТоваровУслугТовары.Номенклатура,
		               |	РеализацияТоваровУслугТовары.Качество
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |	И РеализацияТоваровУслугТовары.Ссылка.Склад.СкладVMI
		               |	И &ИспользованиеСобственногоСписанияПартийДляРТУ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	РеализацияТоваровУслугТовары.Номенклатура
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Запрос.УстановитьПараметр("ИспользованиеСобственногоСписанияПартийДляРТУ", ИспользованиеСобственногоСписанияПартийДляРТУ);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ПартииТоваров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Результаты.Получить(0);
		
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("Последовательность.ПартионныйУчет");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Результаты.Получить(1);
		
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		
		БлокировкаДанных.Заблокировать();
		
		лОчищать = ПроведениеДокументовКлиентСервер.НеобходимоОчиститьДвиженияПартииТоваров(вхСсылкаНаДокумент, лФильтр);		
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		
		Если лОчищать тогда
			Если лФильтр = Неопределено Тогда 
				ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);
				лБазовая = Неопределено;
				ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", лБазовая);
			Иначе
				// Очищаем только движения по фильтру
				лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
				лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
				ОбщегоНазначения.ЗаписатьДвиженияДокументаБезОбработки(вхСсылкаНаДокумент, РегистрыНакопления.ПартииТоваров, лРазделенныеБазовая.Исключенные, Истина); 
				лБазовая = лРазделенныеБазовая.Исключенные;
			КонецЕсли;
		Иначе
			лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
		КонецЕсли;
		
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
		
		Если ИспользоватьСвоеСписаниеПартий Тогда
			//ХудинВВ 20180709 Для складов VMI движения по партиям формируются в отдельной процедуре
			Структура = РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, лФильтр, вхПараметры); 
		Иначе
			ПараметрыСписания = Новый Структура;
			ПараметрыСписания.Вставить("ОперативноеПроведение", ПроведениеДокументовКлиентСервер.ОперативноеПроведение(вхПараметры));
			
			Структура = ПроведениеДокументовКлиентСервер.ПогашениеПартийТоваровНовое(вхСсылкаНаДокумент, вхОтказ,ПараметрыСписания,лФильтр,вхПараметры);
		КонецЕсли;
		
		Если Не вхОтказ Тогда 
			лТребуемая = Структура.ПартииТоваров;
			
			КопияТребуемая = лТребуемая.Скопировать();
			
			//Удалим служебные колонки 
			ОбщегоНазначения.УдалитьКолонки(лИсходная, лТребуемая);
			
			лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
			ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров,
			лРазностныеДанные, лРазделенныеБазовая.Исключенные);
			
			ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
			Если лФильтр = Неопределено Тогда 
				РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Истина);
				ПроведениеДокументовКлиентСервер.ЗаписатьИзмененныеДвижения(вхСсылкаНаДокумент, лФильтр, Структура.ПартииТоваровVMI, Метаданные.РегистрыНакопления.ПартииТоваровVMI);
			КонецЕсли;		
			
			//ПРОДАЖИ
			лБазоваяПродажи = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Продажи);	
			лРазделенныеБазоваяПродажи = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазоваяПродажи, лФильтр);
			лИсходнаяПродажи = лРазделенныеБазоваяПродажи.Включенные;
			
			лТребуемаяПродажи = РегистрыНакопления_Продажи(вхСсылкаНаДокумент, вхОтказ, КопияТребуемая, лФильтр, вхПараметры);
			
			лРазностныеДанныеПродажи = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходнаяПродажи, лТребуемаяПродажи); 
			ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Продажи,
			лРазностныеДанныеПродажи, лРазделенныеБазоваяПродажи.Исключенные);
			
			//ТОВАРЫ НА СКЛАДАХ
			Если ИспользоватьСвоеСписаниеПартий Тогда
				//{{ХудинВВ 20180709 Для складов VMI движения по товарам на складах формируются на основе списания по партиям
				вхПараметры.ТаблицыДвижений.Вставить("ТоварыНаСкладах", РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
				ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыНаСкладах", вхПараметры.ТаблицыДвижений.ТоварыНаСкладах);
				КонтрольОстатковПослеЗаписи(вхСсылкаНаДокумент, вхОтказ, вхПараметры);  //Используется свой контроль остатков (с учетом собственного резерва)
				ОбновитьСЗ(вхСсылкаНаДокумент);
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
		
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Взаиморасчеты") тогда
		// регистр накопления "Взаиморасчеты"
		ДоговорВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагентаВзаиморасчетов");
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.Взаиморасчеты");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорВзаиморасчетов);
		
		ЭлементБлокировки = БлокировкаДанных.Добавить("Последовательность.ПоРасчетамСКонтрагентами");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорВзаиморасчетов);
		БлокировкаДанных.Заблокировать();

		НовоеПроведениеПоВзаиморасчетам = глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам"); 
		лОчищать = Ложь;
		Если НовоеПроведениеПоВзаиморасчетам Тогда
			лОчищать = ПроведениеДокументовКлиентСервер.НеобходимоОчиститьДвиженияВзаиморасчеты(вхСсылкаНаДокумент);	
		Иначе
			Если (лКонтроль <> Неопределено) тогда
				Если лКонтроль.Свойство("СтарыеЗначения") Тогда
					лСтарыеЗначения = лКонтроль.СтарыеЗначения.Получить(Метаданные.Последовательности.ПоРасчетамСКонтрагентами);
					лНовыеЗначения = лКонтроль.НовыеЗначения.Получить(Метаданные.Последовательности.ПоРасчетамСКонтрагентами);
					Если (лСтарыеЗначения <> Неопределено) И (лНовыеЗначения <> Неопределено) тогда
						лОчищать = (лСтарыеЗначения.Шапка.Дата < лНовыеЗначения.Шапка.Дата)
						И лСтарыеЗначения.Шапка.Проведен;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
		
		Если лОчищать тогда
			ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты);
			лБазовая = Неопределено;
			ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", лБазовая);
			лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		Иначе
			лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
			лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты);	
		КонецЕсли;
		
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
		//лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
		ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты,
		лРазностныеДанные, лРазделенныеБазовая.Исключенные);
		
		ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
		Если НовоеПроведениеПоВзаиморасчетам и лФильтр = Неопределено Тогда 
			РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПоРасчетамСКонтрагентами", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ВзаиморасчетыПриСборкеОтгрузки") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ВзаиморасчетыПриСборкеОтгрузки", РегистрыНакопления_ВзаиморасчетыПриСборкеОтгрузки(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если вхПараметры.Свойство("ДобавитьВОчередьОтправкиДокументовОтгрузки") Тогда
		ДобавитьВОчередьОтправкиДокументовОтгрузки(вхСсылкаНаДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтменуПроведения(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент);
	
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	Если глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПоРасчетамСКонтрагентами", Ложь);
	КонецЕсли;
	
	РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Ложь);
КонецПроцедуры

//// ТАБЛИЦЫ ДВИЖЕНИЙ ДОКУМЕНТОВ
Функция РегистрыНакопления_ЗаявкиПокупателей(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ЗаявкиПокупателей", ТаблицаДвижений);

	РекивзитыДокумента =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент,"Дата,СтатусДокумента, ВидОперации");
	
	Если РекивзитыДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
		 Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если  РекивзитыДокумента.СтатусДокумента
		= Справочники.СтатусыДокументов.РеализацияТоваровУслугНовый Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	
	ЗапросОстатокЗаявок = новый запрос;
	 ЗапросОстатокЗаявок.Текст  = "ВЫБРАТЬ
	                              |	РеализацияТоваровУслугТовары.Ссылка.Склад,
	                              |	РеализацияТоваровУслугТовары.Номенклатура,
	                              |	РеализацияТоваровУслугТовары.Качество,
	                              |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
	                              |	РеализацияТоваровУслугТовары.Ссылка.ТорговаяТочка,
	                              |	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента,
	                              |	РеализацияТоваровУслугТовары.Количество,
	                              |	РеализацияТоваровУслугТовары.Сумма КАК СуммаРегл,
	                              |	РеализацияТоваровУслугТовары.Сумма КАК СуммаУпр,
	                              |	ЛОЖЬ КАК Отказ,
	                              |	&Период,
	                              |	ЗНАЧЕНИЕ(ВИдДвиженияНакопления.Расход) КАК ВидДвижения
	                              |ИЗ
	                              |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                              |ГДЕ
	                              |	РеализацияТоваровУслугТовары.Ссылка = &ДокументСсылка
	                              |	И РеализацияТоваровУслугТовары.Количество > 0
	                              |	И РеализацияТоваровУслугТовары.СтрокаЗаявки <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.ПустаяСсылка)
	                              |
	                              |ОБЪЕДИНИТЬ ВСЕ
	                              |
	                              |ВЫБРАТЬ
	                              |	РеализацияТоваровУслугПричиныОтказов.Ссылка.Склад,
	                              |	РеализацияТоваровУслугТовары.Номенклатура,
	                              |	РеализацияТоваровУслугТовары.Качество,
	                              |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
	                              |	РеализацияТоваровУслугПричиныОтказов.Ссылка.ТорговаяТочка,
	                              |	РеализацияТоваровУслугПричиныОтказов.Ссылка.ДоговорКонтрагента,
	                              |	РеализацияТоваровУслугПричиныОтказов.Количество,
	                              |	РеализацияТоваровУслугПричиныОтказов.Количество * РеализацияТоваровУслугТовары.Цена,
	                              |	РеализацияТоваровУслугПричиныОтказов.Количество * РеализацияТоваровУслугТовары.Цена,
	                              |	ИСТИНА,
	                              |	&Период,
	                              |	ЗНАЧЕНИЕ(ВИдДвиженияНакопления.Расход)
	                              |ИЗ
	                              |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                              |		ПО РеализацияТоваровУслугПричиныОтказов.Ссылка = РеализацияТоваровУслугТовары.Ссылка
	                              |			И РеализацияТоваровУслугПричиныОтказов.КлючСвязи = РеализацияТоваровУслугТовары.КлючСвязи
	                              |			И (РеализацияТоваровУслугПричиныОтказов.Ссылка = &ДокументСсылка)";
	 ЗапросОстатокЗаявок.УстановитьПараметр("ДокументСсылка", вхСсылкаНаДокумент);
	 ЗапросОстатокЗаявок.УстановитьПараметр("Период",РекивзитыДокумента.Дата);
	 ТаблицаДвижений = ЗапросОстатокЗаявок.Выполнить().Выгрузить();
			
	Возврат ТаблицаДвижений;
	
КонецФункции	

Функция РегистрыНакопления_ТоварыКОтгрузке(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыКОтгрузке", ТаблицаДвижений);
	
	РеквизитыДокумента =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент,"Дата,ЭтоМФП,СтатусДокумента, ВидОперации");
	
	Если РеквизитыДокумента.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если РеквизитыДокумента.ЭтоМФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
		 Возврат ТаблицаДвижений;
	КонецЕсли;

	СтатусДокумента = РеквизитыДокумента.СтатусДокумента; 
	Если СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка 
		Или СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугУпакован Или
		СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РеализацияТоваровУслугТовары.Номенклатура,
		                      |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
		                      |	РеализацияТоваровУслугТовары.Ссылка.Склад,
		                      |	РеализацияТоваровУслугТовары.Количество КАК Количество,   //т.к. отказы в статусе сборка тоже пишутся, то факт, а не план  
		                      |	РеализацияТоваровУслугТовары.Ссылка КАК Регистратор,
		                      |	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Период,
		                      |	ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслуг) КАК Статус
		                      |ИЗ
		                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		                      |ГДЕ
		                      |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		                      |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга");
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		//Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());			   
		ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхСсылкаНадокумент, "Дата,СтатусДокумента,ПолныйОтказ,ЭтоМФП,СозданВ77, ВидОперации");
	
	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты	//ИЛИ Реквизиты.ПолныйОтказ 
		ИЛИ НЕ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ЭтоМФП И Реквизиты.СозданВ77 И Реквизиты.Дата >= глЗначениеПеременной("ДатаЗапускаПроведенияПоПартиямРезервам") Тогда 
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	//Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
	//	 Возврат ТаблицаДвижений;
	//КонецЕсли;
	
	СформироватьДвижения = Истина;
	
	//PaSe - Взаиморасчеты при едином счете ведутся по головному контрагенту(и его договору)
	//ДоговорВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагента");
	ДоговорВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагентаВзаиморасчетов");
	
	Если ТипЗнч(вхПараметры) = Тип("Структура") И вхПараметры.Свойство("Фильтр") 
		И ТипЗнч(вхПараметры.Фильтр) = Тип("Структура") И вхПараметры.Фильтр.Свойство("ДоговорКонтрагента") 
		И Не вхПараметры.Фильтр.ДоговорКонтрагента = ДоговорВзаиморасчетов Тогда
		СформироватьДвижения = Ложь;
	КонецЕсли;
	
	Если СформироватьДвижения Тогда
				
		ДоговорКонтрагента = ДоговорВзаиморасчетов;
		ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ВалютаДокумента");
		КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "КурсВзаиморасчетов");
		КратностьВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "КратностьВзаиморасчетов");
		СуммаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СуммаДокумента");
		
		ТаблицаДвижений = УправлениеВзаиморасчетами.ПростоеПроведениеПоВзаиморасчетам(вхСсылкаНаДокумент, ДоговорКонтрагента, 
		Неопределено, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СуммаДокумента, 1);
		
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_РезервыТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("РезервыТоваров", ТаблицаДвижений);
	
	РеквизитыДокумента =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент,"Дата,ЭтоМФП,СтатусДокумента, ВидОперации");
	
	ДатаДокумента = РеквизитыДокумента.Дата;
	
	Если ДатаДокумента < глЗначениеПеременной("ДатаЗапускаПроведенияПоПартиямРезервам") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если РеквизитыДокумента.ЭтоМФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
		 Возврат ТаблицаДвижений;
	КонецЕсли;
	
	СтатусДокумента = РеквизитыДокумента.СтатусДокумента;
	
	Если Не Документы.РеализацияТоваровУслуг.ЭтоСтатусТовароДвижения(СтатусДокумента) Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	ОперативноеПроведение = ПроведениеДокументовКлиентСервер.ОперативноеПроведение(вхПараметры);
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	РеализацияТоваровУслугТовары.Ссылка.Склад,
	//               |	РеализацияТоваровУслугТовары.Номенклатура,
	//               |	РеализацияТоваровУслугТовары.Качество,
	//               |	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК СтрокаЗаявки,
	//               |	РеализацияТоваровУслугТовары.КоличествоПлан КАК КоличествоПлан,
	//               |	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	//               |	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
	//               |ПОМЕСТИТЬ втТЧ
	//               |ИЗ
	//               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//               |ГДЕ
	//               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	//               |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга
	//               |
	//               |ИНДЕКСИРОВАТЬ ПО
	//               |	СтрокаЗаявки
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	втТЧ.Ссылка КАК Регистратор,
	//               |	втТЧ.Ссылка.Дата КАК Период,
	//               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	//               |	РезервыТоваровОстатки.Склад,
	//               |	РезервыТоваровОстатки.Номенклатура,
	//               |	РезервыТоваровОстатки.Качество,
	//               |	РезервыТоваровОстатки.СтрокаЗаявки,
	//               |	ВЫБОР
	//               |		КОГДА РезервыТоваровОстатки.КоличествоОстаток < втТЧ.КоличествоПлан
	//               |			ТОГДА РезервыТоваровОстатки.КоличествоОстаток
	//               |		ИНАЧЕ втТЧ.КоличествоПлан
	//               |	КОНЕЦ КАК Количество
	//               |ИЗ
	//               |	втТЧ КАК втТЧ
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваров.Остатки(
	//               |				&МоментВремени,
	//               |				СтрокаЗаявки В
	//               |					(ВЫБРАТЬ
	//               |						втТЧ.СтрокаЗаявки
	//               |					ИЗ
	//               |						втТЧ КАК втТЧ)) КАК РезервыТоваровОстатки
	//               |		ПО втТЧ.СтрокаЗаявки = РезервыТоваровОстатки.СтрокаЗаявки
	//               |
	//               |ДЛЯ ИЗМЕНЕНИЯ
	//               |	РегистрНакопления.РезервыТоваров.Остатки";
	//Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//лДатаОстатков = Неопределено;
	//Если ТипЗнч(вхПараметры) = Тип("Структура") Тогда
	//	Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ДатыПолученияОстатков.РезервыТоваров", Неопределено) Тогда
	//		лДатаОстатков = вхСсылкаНаДокумент.МоментВремени();
	//	КонецЕсли;
	//КонецЕсли;
	//Запрос.УстановитьПараметр("МоментВремени", лДатаОстатков);
	//ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	//
	//Возврат ТаблицаДвижений;
	
	//БлокировкаДанных = Новый БлокировкаДанных;
	//ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.РезервыТоваров");
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст =  "ВЫБРАТЬ
	//                |	РеализацияТоваровУслугТоварыТовары.Номенклатура,
	//                |	РеализацияТоваровУслугТоварыТовары.Ссылка.Склад КАК Склад,
	//                |	РеализацияТоваровУслугТоварыТовары.Качество
	//                |ИЗ
	//                |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТоварыТовары
	//                |ГДЕ
	//                |	РеализацияТоваровУслугТоварыТовары.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
	//
	//БлокировкаДанных.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
	               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	               |	РеализацияТоваровУслугТовары.Качество КАК Качество,
	               |	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	РеализацияТоваровУслугТовары.СтрокаПрихода КАК СтрокаПрихода,
	               |	РеализацияТоваровУслугТовары.КоличествоПлан КАК Количество
	               |ПОМЕСТИТЬ втТовары
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	               |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Склад,
	               |	Номенклатура,
	               |	Качество,
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РезервыТоваровОстатки.Склад,
	               |	РезервыТоваровОстатки.Номенклатура,
	               |	РезервыТоваровОстатки.Качество,
	               |	РезервыТоваровОстатки.СтрокаЗаявки,
	               |	РезервыТоваровОстатки.СтрокаПрихода,
	               |	РезервыТоваровОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.РезервыТоваров.Остатки(
	               |			&КонПериода,
	               |			(Склад, Номенклатура, Качество, СтрокаЗаявки) В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					втТовары.Склад,
	               |					втТовары.Номенклатура,
	               |					втТовары.Качество,
	               |					втТовары.СтрокаЗаявки
	               |				ИЗ
	               |					втТовары)) КАК РезервыТоваровОстатки
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрНакопления.РезервыТоваров.Остатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТовары.Склад,
	               |	втТовары.Номенклатура,
	               |	втТовары.Качество,
	               |	втТовары.СтрокаЗаявки,
	               |	втТовары.СтрокаПрихода,
	               |	втТовары.Количество
	               |ИЗ
	               |	втТовары КАК втТовары";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("КонПериода", ?(ОперативноеПроведение, Неопределено, вхСсылкаНаДокумент.МоментВремени()));
	
	Результаты = Запрос.ВыполнитьПакет();
	Остатки = Результаты[1].Выгрузить();
	Товары = Результаты[2].Выбрать();
	ТаблицаНеудалосьРаспределить = Остатки.СкопироватьКолонки();
	
	ПроведениеДокументовКлиентСервер.СписатьРезервы(Товары, Остатки, ТаблицаДвижений, вхСсылкаНаДокумент);
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыНаСкладах", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата, ЭтоМФП, СтатусДокумента, Склад, ВидОперации");
	
	Дата = Реквизиты.Дата;
	Если Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.ЭтоМФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	СтатусДокумента = Реквизиты.СтатусДокумента;
	
	Если Не Документы.РеализацияТоваровУслуг.ЭтоСтатусТовароДвижения(СтатусДокумента) Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	//{{ХудинВВ 20180709
	//Для складов VMI движения по товарам на складах формируются на основе списания по партиям
	ИспользованиеСобственногоСписанияПартийДляРТУ = ПроведениеДокументовКлиентСервер.ИспользованиеСобственногоСписанияПартийДляРТУ(вхСсылкаНаДокумент);
	Если ИспользованиеСобственногоСписанияПартийДляРТУ И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Склад, "СкладVMI") Тогда
		ДвиженияПартии = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
		Для каждого СтрокаПартий Из  ДвиженияПартии Цикл
			Движение =  ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаПартий);
		КонецЦикла;
		Возврат  ТаблицаДвижений;
	КонецЕсли;
	//}}
	
	РеализацииВыгружаютсяИз77 = глЗначениеПеременной("РеализацииВыгружаютсяИз77");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка.Склад,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Качество,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СтатусДокумента = &СтатусОтгружен
	|			ТОГДА РеализацияТоваровУслугТовары.Количество
	|		ИНАЧЕ РеализацияТоваровУслугТовары.КоличествоПлан
	|	КОНЕЦ КАК Количество,
	|	РеализацияТоваровУслугТовары.Ссылка КАК Регистратор,
	|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга
	|	И ВЫБОР
	|			КОГДА РеализацияТоваровУслугТовары.Ссылка.СтатусДокумента = &СтатусОтгружен
	|				ТОГДА РеализацияТоваровУслугТовары.Количество
	|			ИНАЧЕ РеализацияТоваровУслугТовары.КоличествоПлан
	|		КОНЕЦ > 0";
	Запрос.УстановитьПараметр("СтатусОтгружен", Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен); 	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		
	КонецЦикла;
	
	Если СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен 
		Или СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугУпакован 
		Или СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче Тогда 
		Если РеализацииВыгружаютсяИз77 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	РеализацияТоваровУслугПричиныОтказов.Количество,
			               |	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены,
			               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
			               |	РеализацияТоваровУслугПричиныОтказов.Ссылка,
			               |	РеализацияТоваровУслугПричиныОтказов.СкладПеремещения КАК Склад
			               |ПОМЕСТИТЬ втОтказы
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
			               |ГДЕ
			               |	РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
			               |	И РеализацияТоваровУслугПричиныОтказов.СкладПеремещения <> Значение(Справочник.Склады.ПустаяСсылка)
			               |    И РеализацияТоваровУслугПричиныОтказов.СкладПеремещения <> РеализацияТоваровУслугПричиныОтказов.Ссылка.Склад
						   | 
			               |ИНДЕКСИРОВАТЬ ПО
			               |	КлючСвязи
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	втОтказы.Количество,
			               |	втОтказы.ПричинаОтмены КАК ПричинаОтказа,
			               |	втОтказы.КлючСвязи,
			               |	РеализацияТоваровУслугТовары.Номенклатура,
			               |	РеализацияТоваровУслугТовары.Качество,
			               |	РеализацияТоваровУслугТовары.Ссылка КАК Регистратор,
			               |	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Период,
			               |	втОтказы.Склад КАК СкладПеремещения,
			               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад
			               |ИЗ
			               |	втОтказы КАК втОтказы
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			               |		ПО втОтказы.Ссылка = РеализацияТоваровУслугТовары.Ссылка
			               |			И втОтказы.КлючСвязи = РеализацияТоваровУслугТовары.КлючСвязи
			               |ГДЕ
			               |	НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга";
						   
			//МассивОтказов = Новый Массив;
			//МассивОтказов.Добавить(Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком);
			//МассивОтказов.Добавить(Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке);
			//Запрос.УстановитьПараметр("МассивОтказов", МассивОтказов);
			
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
								
				Движение = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Выборка);
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				
				Движение = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Выборка);
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Склад = Выборка.СкладПеремещения;
				
			КонецЦикла;
		Иначе
			//Алгоритм движений без выгрузки реализаций из 7.7
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	РеализацияТоваровУслугПричиныОтказов.Количество,
			               |	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены,
			               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
			               |	РеализацияТоваровУслугПричиныОтказов.Ссылка,
			               |	РеализацияТоваровУслугПричиныОтказов.СкладПеремещения КАК Склад
			               |ПОМЕСТИТЬ втОтказы
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
			               |ГДЕ
			               |	РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
			               |	И РеализацияТоваровУслугПричиныОтказов.СкладПеремещения <> Значение(Справочник.Склады.ПустаяСсылка)
			               |    И РеализацияТоваровУслугПричиныОтказов.СкладПеремещения <> РеализацияТоваровУслугПричиныОтказов.Ссылка.Склад
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	КлючСвязи
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	втОтказы.Количество,
			               |	втОтказы.ПричинаОтмены КАК ПричинаОтказа,
			               |	втОтказы.КлючСвязи,
			               |	РеализацияТоваровУслугТовары.Номенклатура,
			               |	РеализацияТоваровУслугТовары.Качество,
			               |	РеализацияТоваровУслугТовары.Ссылка КАК Регистратор,
			               |	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Период,
			               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад
			               |ИЗ
			               |	втОтказы КАК втОтказы
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			               |		ПО втОтказы.Ссылка = РеализацияТоваровУслугТовары.Ссылка
			               |			И втОтказы.КлючСвязи = РеализацияТоваровУслугТовары.КлючСвязи";
			МассивПричинОтмен  = Новый Массив;
			МассивПричинОтмен.Добавить(Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком);
			МассивПричинОтмен.Добавить(Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке);
			
			Запрос.УстановитьПараметр("МассивПричинОтмен", МассивПричинОтмен);
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				//Если это недостача или брак, товар должен быть перемещен на соответствующий склад
				//Если Выборка.СостояниеСтрокиЗаявки = Справочники.СостоянияСтрокДокументов. ИЛИ Выборка.СостояниеСтрокиЗаявки = Справочники.СостоянияСтрокДокументов.ОтказПарткомБрак Тогда
				
				Движение = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Выборка);
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				
				Движение = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Выборка);
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Качество = Справочники.Качество.Недостача;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;	
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_Продажи(вхСсылкаНаДокумент, вхОтказ, Знач вхПартии, вхФильтр, Параметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Продажи", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВалютаДокумента,КратностьВзаиморасчетов,КурсВзаиморасчетов,ЭтоМФП, ВидОперации");	
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
		
	Если Не Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ЭтоМФП Тогда 
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
		 Возврат ТаблицаДвижений;
	КонецЕсли;
	
	вхПартии = вхПартии.Скопировать(вхПартии.НайтиСтроки(Новый Структура("ВидДвижения, ВидСписания", ВидДвиженияНакопления.Расход, "Списание")), "Номенклатура,Склад,Качество,Количество,СуммаРубли");
	вхПартии.Свернуть("Номенклатура,Склад,Качество", "Количество, СуммаРубли");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	вхПартии.Номенклатура,
	                      |	вхПартии.Качество,
	                      |	вхПартии.Склад,
	                      |	ВЫРАЗИТЬ(вхПартии.Количество КАК ЧИСЛО) КАК Количество,
	                      |	ВЫРАЗИТЬ(вхПартии.СуммаРубли КАК ЧИСЛО) КАК СуммаРубли
	                      |ПОМЕСТИТЬ вхПартии
	                      |ИЗ
	                      |	&вхПартии КАК вхПартии
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	вхПартии.Номенклатура,
	                      |	вхПартии.Качество,
	                      |	вхПартии.Склад,
	                      |	СУММА(вхПартии.СуммаРубли) / СУММА(вхПартии.Количество) КАК Цена
	                      |ПОМЕСТИТЬ втПартииСв
	                      |ИЗ
	                      |	вхПартии КАК вхПартии
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	вхПартии.Номенклатура,
	                      |	вхПартии.Качество,
	                      |	вхПартии.Склад
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РеализацияТоваровУслугТовары.Номенклатура,
	                      |	РеализацияТоваровУслугТовары.Качество,
	                      |	РеализацияТоваровУслугТовары.Ссылка.Склад,
	                      |	РеализацияТоваровУслугТовары.Ссылка.ТорговаяТочка,
	                      |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
	                      |	РеализацияТоваровУслугТовары.Количество,
	                      |	РеализацияТоваровУслугТовары.Сумма КАК СуммаРегл,
	                      |	РеализацияТоваровУслугТовары.Сумма КАК СуммаУпр,
	                      |	РеализацияТоваровУслугТовары.Ссылка КАК Регистратор,
	                      |	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Период,
	                      |	РеализацияТоваровУслугТовары.Количество * ЕСТЬNULL(втПартииСв.Цена, 0) КАК СебестоимостьРубли,
	                      |	РеализацияТоваровУслугТовары.Ссылка.Филиал
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ втПартииСв КАК втПартииСв
	                      |		ПО РеализацияТоваровУслугТовары.Номенклатура = втПартииСв.Номенклатура
	                      |			И РеализацияТоваровУслугТовары.Ссылка.Склад = втПартииСв.Склад
	                      |			И РеализацияТоваровУслугТовары.Качество = втПартииСв.Качество
	                      |ГДЕ
	                      |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	РеализацияТоваровУслугУслуги.Номенклатура,
	                      |	ЗНАЧЕНИЕ(Справочник.Качество.Пустаяссылка),
	                      |	ЗНАЧЕНИЕ(Справочник.Склады.Пустаяссылка),
	                      |	РеализацияТоваровУслугУслуги.Ссылка.ТорговаяТочка,
	                      |	РеализацияТоваровУслугУслуги.СтрокаЗаявки,
	                      |	РеализацияТоваровУслугУслуги.Количество,
	                      |	РеализацияТоваровУслугУслуги.Сумма,
	                      |	РеализацияТоваровУслугУслуги.Сумма,
	                      |	РеализацияТоваровУслугУслуги.Ссылка,
	                      |	РеализацияТоваровУслугУслуги.Ссылка.Дата,
	                      |	0,
	                      |	РеализацияТоваровУслугУслуги.Ссылка.Филиал
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	                      |ГДЕ
	                      |	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("МоментВремени", вхСсылкаНаДокумент.МоментВремени());
	//Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());			   
	Запрос.УстановитьПараметр("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("вхПартии", вхПартии);
	
	Если ТипЗнч(вхФильтр) = Тип("Структура") и вхФильтр.Свойство("Номенклатура") Тогда 
		Запрос.Текст = Запрос.Текст + " И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
	КонецЕсли;

	ТаблицаДвиженийНеобр = Запрос.Выполнить().Выгрузить();
	
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");

	Для Каждого СтрокаТЧ Из ТаблицаДвиженийНеобр Цикл 
		Если Не Реквизиты.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			СтрокаТЧ.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаРегл, Реквизиты.ВалютаДокумента,
			ВалютаРегламентированногоУчета, Реквизиты.КурсВзаиморасчетов, 1, Реквизиты.КратностьВзаиморасчетов, 1);
		КонецЕсли;
		Если Не Реквизиты.ВалютаДокумента = ВалютаУправленческогоУчета Тогда
			КурсВалютыУправленческогоУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУправленческогоУчета, Реквизиты.Дата);

			СтрокаТЧ.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпр, Реквизиты.ВалютаДокумента,
			ВалютаУправленческогоУчета, Реквизиты.КурсВзаиморасчетов, КурсВалютыУправленческогоУчета.Курс, Реквизиты.КратностьВзаиморасчетов, КурсВалютыУправленческогоУчета.Кратность);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийНеобр, ТаблицаДвижений);
	
	Возврат ТаблицаДвижений;
КонецФункции

Функция РегистрыНакопления_ОтказыПоЗаявкам(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ОтказыПоЗаявкам", ТаблицаДвижений);
		
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ЭтоМФП") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	СтатусДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,ВидОперации");
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	
	//Если Не (СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка Или СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен) Тогда
	//	Возврат ТаблицаДвижений;
	//КонецЕсли;
	
	//* # Kalinin V.A. ( 2018-07-03 )
	// Закоментил                                    
	//Если Не СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен Тогда
	//	Возврат ТаблицаДвижений;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
////	Запрос.Текст = "ВЫБРАТЬ
////	               |	РеализацияТоваровУслугПричиныОтказов.Ссылка.Дата КАК Период,
////	               |	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК СтрокаЗаявки,
////	               |	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены КАК ПричинаОтказа,
////	               |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество,
////	               |	РеализацияТоваровУслугПричиныОтказов.Ссылка КАК Регистратор,
////	               |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество * РеализацияТоваровУслугТовары.Цена) КАК СуммаРегл,
////// + Пушкин 20180612 XX-1499				   
////				   |	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены.НеСтавитьОтказПриПроведении КАК НеСтавитьОтказПриПроведении,
////				   |    ВЫБОР
////				   |		КОГДА РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены = ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.КрупногабаритувЭД) ТОГДА ИСТИНА
////				   |		ИНАЧЕ ЛОЖЬ
////				   |    КОНЕЦ КАК это_ЭД,
////				   |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи,
////				   |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
////				   |ПОМЕСТИТЬ все_отказы
////// - Пушкин 20180612 XX-1499				   
////	               |ИЗ
////	               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
////	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
////	               |		ПО РеализацияТоваровУслугПричиныОтказов.КлючСвязи = РеализацияТоваровУслугТовары.КлючСвязи
////	               |ГДЕ
////	               |	РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
////	               |	И РеализацияТоваровУслугТовары.Ссылка = &Ссылка
////	               |	И РеализацияТоваровУслугТовары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки
////				   |
////	               |СГРУППИРОВАТЬ ПО
////	               |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
////	               |	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены,
////	               |	РеализацияТоваровУслугПричиныОтказов.Ссылка,
////	               |	РеализацияТоваровУслугПричиныОтказов.Ссылка.Дата,
////// + Пушкин 20180612 XX-1499				   
////				   |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи,
////				   |	РеализацияТоваровУслугТовары.Номенклатура
////				   |;
////				   |/////////////////////////////////////////////////////
////				   |ВЫБРАТЬ *, СтрокаЗаявки.Заявка ИЗ все_отказы ГДЕ это_ЭД = Истина И НеСтавитьОтказПриПроведении = Истина;
////				   |/////////////////////////////////////////////////////
////				   |ВЫБРАТЬ 
////				   |	Период,
////				   |	СтрокаЗаявки,
////				   |	ПричинаОтказа,
////				   |	СУММА(Количество) КАК Количество,
////				   |	Регистратор,
////				   |	СУММА(СуммаРегл) КАК СуммаРегл
////				   |ИЗ 
////				   |	все_отказы 
////				   |ГДЕ 
////				   |	НеСтавитьОтказПриПроведении = ЛОЖЬ
////				   |СГРУППИРОВАТЬ ПО
////				   |	Период,
////				   |	СтрокаЗаявки,
////				   |	ПричинаОтказа,
////				   |	Регистратор
////				   |;
////// - Пушкин 20180612 XX-1499				   
////				   |";
////	Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());	

//+ Пушкин 20181012 XX-1507
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугПричиныОтказов.Ссылка КАК Регистратор,
		|	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены КАК ПричинаОтказа,
		|	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены.НеСтавитьОтказПриПроведении КАК НеСтавитьОтказПриПроведении,
		|	РеализацияТоваровУслугПричиныОтказов.КлючСвязи,
		|	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество
		|ПОМЕСТИТЬ все_отказы
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
		|ГДЕ
		|	РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугПричиныОтказов.Ссылка,
		|	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены,
		|	РеализацияТоваровУслугПричиныОтказов.КлючСвязи,
		|	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены.НеСтавитьОтказПриПроведении
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Регистратор,
		|	РеализацияТоваровУслуг.Дата,
		|	РеализацияТоваровУслуг.Контрагент,
		|	РеализацияТоваровУслуг.Статус,
		|	РеализацияТоваровУслуг.ТипДоставки,
		|	РеализацияТоваровУслуг.Телефон,
		|	РеализацияТоваровУслуг.Заказчик,
		|	РеализацияТоваровУслуг.флНеВыгружатьВТопЛог,
		|	РеализацияТоваровУслуг.Источник
		|ПОМЕСТИТЬ РТУ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество,
		|	РеализацияТоваровУслугТовары.Цена,
		|	РеализацияТоваровУслугТовары.СтрокаЗаявки,
		|	РеализацияТоваровУслугТовары.СтрокаЗаявки.Заявка КАК СтрокаЗаявкиЗаявка,
		|	РеализацияТоваровУслугТовары.КоличествоПлан,
		|	РеализацияТоваровУслугТовары.КлючСвязи
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|	И РеализацияТоваровУслугТовары.КлючСвязи В
		|			(ВЫБРАТЬ
		|				все_отказы.КлючСвязи
		|			ИЗ
		|				все_отказы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	все_отказы.Регистратор,
		|	ЕСТЬNULL(РТУ.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
		|	все_отказы.ПричинаОтказа,
		|	ЕСТЬNULL(Товары.СтрокаЗаявки, ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.ПустаяСсылка)) КАК СтрокаЗаявки,
		|	СУММА(все_отказы.Количество) КАК Количество,
		|	СУММА(ЕСТЬNULL(Товары.Цена, 0) * все_отказы.Количество) КАК СуммаРегл
		//|ПОМЕСТИТЬ Отказы_ТаблицаДвижений
		|ИЗ
		|	все_отказы КАК все_отказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
		|		ПО все_отказы.КлючСвязи = Товары.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РТУ КАК РТУ
		|		ПО все_отказы.Регистратор = РТУ.Регистратор
		|ГДЕ
		|	все_отказы.НеСтавитьОтказПриПроведении = ЛОЖЬ
		|	И НЕ ЕСТЬNULL(Товары.СтрокаЗаявки, ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	все_отказы.Регистратор,
		|	ЕСТЬNULL(РТУ.Дата, ДАТАВРЕМЯ(1, 1, 1)),
		|	все_отказы.ПричинаОтказа,
		|	ЕСТЬNULL(Товары.СтрокаЗаявки, ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	все_отказы.Регистратор,
		|	РТУ.Контрагент,
		|	РТУ.Телефон,
		|	РТУ.Заказчик,
		|	все_отказы.КлючСвязи,
		|	все_отказы.ПричинаОтказа,
		|	Товары.Номенклатура,
		|	Товары.СтрокаЗаявкиЗаявка,
		|	СУММА(все_отказы.Количество) КАК Количество
		//|ПОМЕСТИТЬ ОтказыЭД_КрупноГабарит
		|ИЗ
		|	все_отказы КАК все_отказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РТУ КАК РТУ
		|		ПО все_отказы.Регистратор = РТУ.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
		|		ПО все_отказы.КлючСвязи = Товары.КлючСвязи
		|ГДЕ
		|	РТУ.ТипДоставки = ЗНАЧЕНИЕ(Справочник.ТипыДоставки.ЭкспрессДоставка)
		|	И РТУ.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиРеализаций.Сайт)
		|	И все_отказы.ПричинаОтказа = ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.КрупногабаритувЭД)
		|	И НЕ Товары.СтрокаЗаявкиЗаявка = ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	все_отказы.Регистратор,
		|	РТУ.Контрагент,
		|	РТУ.Телефон,
		|	РТУ.Заказчик,
		|	все_отказы.КлючСвязи,
		|	все_отказы.ПричинаОтказа,
		|	Товары.Номенклатура,
		|	Товары.СтрокаЗаявкиЗаявка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	все_отказы.Регистратор,
		|	РТУ.Контрагент,
		|	РТУ.Телефон,
		|	РТУ.Заказчик,
		|	все_отказы.КлючСвязи,
		|	все_отказы.ПричинаОтказа,
		|	Товары.Номенклатура,
		|	Товары.СтрокаЗаявкиЗаявка,
		|	СУММА(все_отказы.Количество) КАК Количество
		//|ПОМЕСТИТЬ ОтказыЭД_ПоныйОтказ
		|ИЗ
		|	все_отказы КАК все_отказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РТУ КАК РТУ
		|		ПО все_отказы.Регистратор = РТУ.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
		|		ПО все_отказы.КлючСвязи = Товары.КлючСвязи
		|ГДЕ
		|	РТУ.ТипДоставки = ЗНАЧЕНИЕ(Справочник.ТипыДоставки.ЭкспрессДоставка)
		|	И РТУ.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиРеализаций.Сайт)
		|	И НЕ все_отказы.ПричинаОтказа = ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.КрупногабаритувЭД)
		|	И НЕ Товары.СтрокаЗаявкиЗаявка = ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка)
		|	И все_отказы.КлючСвязи В
		|			(ВЫБРАТЬ
		|				Товары.КлючСвязи
		|			ИЗ
		|				Товары
		|			ГДЕ
		|				Товары.Количество = 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	все_отказы.Регистратор,
		|	РТУ.Контрагент,
		|	РТУ.Телефон,
		|	РТУ.Заказчик,
		|	все_отказы.КлючСвязи,
		|	все_отказы.ПричинаОтказа,
		|	Товары.Номенклатура,
		|	Товары.СтрокаЗаявкиЗаявка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	все_отказы.Регистратор,
		|	РТУ.Контрагент,
		|	РТУ.Телефон,
		|	РТУ.Заказчик,
		|	все_отказы.КлючСвязи,
		|	все_отказы.ПричинаОтказа,
		|	Товары.Номенклатура,
		|	Товары.СтрокаЗаявкиЗаявка,
		|	СУММА(все_отказы.Количество) КАК Количество
		//|ПОМЕСТИТЬ ОтказыЭД_ЧастичныйОтказ
		|ИЗ
		|	все_отказы КАК все_отказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РТУ КАК РТУ
		|		ПО все_отказы.Регистратор = РТУ.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
		|		ПО все_отказы.КлючСвязи = Товары.КлючСвязи
		|ГДЕ
		|	РТУ.ТипДоставки = ЗНАЧЕНИЕ(Справочник.ТипыДоставки.ЭкспрессДоставка)
		|	И РТУ.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиРеализаций.Сайт)
		|	И НЕ все_отказы.ПричинаОтказа = ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.КрупногабаритувЭД)
		|	И все_отказы.КлючСвязи В
		|			(ВЫБРАТЬ
		|				Товары.КлючСвязи
		|			ИЗ
		|				Товары
		|			ГДЕ
		|				Товары.Количество > 0)
		|	И НЕ Товары.СтрокаЗаявкиЗаявка = ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	все_отказы.Регистратор,
		|	РТУ.Контрагент,
		|	РТУ.Телефон,
		|	РТУ.Заказчик,
		|	все_отказы.КлючСвязи,
		|	все_отказы.ПричинаОтказа,
		|	Товары.Номенклатура,
		|	Товары.СтрокаЗаявкиЗаявка";

	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);	
	
	//Выборка = Запрос.Выполнить().Выгрузить();
	МассивРезультатов = Запрос.ВыполнитьПакет();	МассивРезультатов_Количество = МассивРезультатов.Количество();
	
	SMSоповещение.СформироватьSMS_ОтказЧастичный(МассивРезультатов[МассивРезультатов_Количество - 1].Выгрузить());
	SMSоповещение.СформироватьSMS_ОтказПолный(МассивРезультатов[МассивРезультатов_Количество - 2].Выгрузить());
	SMSоповещение.СформироватьSMS_ОтказГрупногабарит(МассивРезультатов[МассивРезультатов_Количество - 3].Выгрузить());
	
	Выборка = МассивРезультатов[МассивРезультатов_Количество - 4].Выгрузить();
	
// - Пушкин 20180612 XX-1499				   
// - Пушкин 20181012 XX-1507

	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета"); 
	Если Реквизиты.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		КурсДокумента = Реквизиты.КурсВзаиморасчетов;
		КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
		Для Каждого СтрокаТЧ Из Выборка Цикл 
			СтрокаТЧ.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаРегл, Реквизиты.ВалютаДокумента,
			ВалютаРегламентированногоУчета, КурсДокумента, 1, КратностьДокумента, 1);
		КонецЦикла;
	КонецЕсли;
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Выборка, ТаблицаДвижений);
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_Услуги(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Услуги", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата, ЭтоМФП, СтатусДокумента, Склад, ВидОперации");
	
	Дата = Реквизиты.Дата;
	
	Если Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ЭтоМФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	СтатусДокумента = Реквизиты.СтатусДокумента;
	
	Если Не Документы.РеализацияТоваровУслуг.ЭтоСтатусТовароДвижения(СтатусДокумента) Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;	
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугУслуги.Номенклатура,
	               |	РеализацияТоваровУслугУслуги.Количество
	               |ПОМЕСТИТЬ втУслуги
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	               |ГДЕ
	               |	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втУслуги.Номенклатура,
	               |	втУслуги.Количество
	               |ИЗ
	               |	втУслуги КАК втУслуги";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Услуги = Результат.Выгрузить();
	
	ЗапросБлок = Новый Запрос;
	ЗапросБлок.Текст = "ВЫБРАТЬ
	                   |	РеализацияТоваровУслугТовары.Номенклатура,
	                   |	РеализацияТоваровУслугТовары.СтрокаЗаявки.Заявка КАК Заявка
	                   |ИЗ
	                   |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                   |ГДЕ
	                   |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	ЗапросБлок.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	РезультатЗапроса = ЗапросБлок.Выполнить();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.Услуги");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заявка", "Заявка");
	БлокировкаДанных.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РеализацияТоваровУслугТовары.СтрокаЗаявки.Заявка КАК Заявка
	               |ПОМЕСТИТЬ втЗаявки
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	               |	И ЕСТЬNULL(РеализацияТоваровУслугТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) <> &ПустаяЗаявка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УслугиОстатки.Номенклатура,
	               |	УслугиОстатки.Заявка,
	               |	УслугиОстатки.КоличествоОстаток КАК Количество,
	               |	УслугиОстатки.СуммаОстаток КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.Услуги.Остатки(
	               |			&КонПериода,
	               |			Заявка В
	               |				(ВЫБРАТЬ
	               |					втЗаявки.Заявка
	               |				ИЗ
	               |					втЗаявки)) КАК УслугиОстатки
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрНакопления.Услуги.Остатки";
	УслугиКраспределению = Запрос.Выполнить().Выгрузить();			   
	
	Для Каждого СтрокаТЧ Из Услуги Цикл 
		Строки = УслугиКраспределению.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура));
		КоличествоРаспределить = СтрокаТЧ.Количество;
		Индекс = 0; 
		Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
			СтрокаРаспределить = Строки.Получить(Индекс);			
			СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаРаспределить.Количество);
			Если СписываемоеКоличество > 0 Тогда 
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаРаспределить);
				Если СписываемоеКоличество <> СтрокаРаспределить.Количество Тогда 
					СтрокаДвижений.Количество = СписываемоеКоличество;
					СтрокаДвижений.Сумма = СтрокаДвижений.Количество * СтрокаРаспределить.Сумма/СтрокаРаспределить.Количество;
				КонецЕсли;
				СтрокаДвижений.Период = Дата;
				СтрокаДвижений.Регистратор = вхСсылкаНаДокумент;
				СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
			КонецЕсли;
			
			Индекс = Индекс  + 1;
		КонецЦикла;
	КонецЦикла;
	
	//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ВзаиморасчетыПриСборкеОтгрузки(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт 
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ВзаиморасчетыПриСборкеОтгрузки", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата, ЭтоМФП, СтатусДокумента, Склад, ВидОперации");

	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Дата КАК Период,
	               |	РеализацияТоваровУслуг.Ссылка КАК Регистратор,
	               |	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
	               |	РеализацияТоваровУслуг.ДоговорКонтрагентаВзаиморасчетов КАК ДоговорКонтрагента
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Ссылка = &Ссылка
	               |	И (РеализацияТоваровУслуг.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугСборка)
	               |			ИЛИ РеализацияТоваровУслуг.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугУпакован)
	               |			ИЛИ РеализацияТоваровУслуг.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче))";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Выборка = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Выборка, ТаблицаДвижений);
	
	Возврат ТаблицаДвижений;
	
КонецФункции

//ХудинВВ 20180709 Отдельная процедура списания партий для РТУ
Функция РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхФильтр, вхПараметры = Неопределено) Экспорт 
	
	ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");

	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", ТаблицаДвижений);
	ТаблицаДвижений.Колонки.Добавить("ВидСписания", 			Новый ОписаниеТипов("Строка"));
	ТаблицаДвижений.Колонки.Добавить("СкладПеремещения", 		Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДвижений.Колонки.Добавить("КачествоПеремещения", 	Новый ОписаниеТипов("СправочникСсылка.Качество"));
	ТаблицаДвижений.Колонки.Добавить("СтатусПартииПеремещения", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПартии"));
	ТаблицаДвижений.Колонки.Добавить("ОприходоватьПоVMI",	 	Новый ОписаниеТипов("Булево"));
	
	ТаблицаДвиженийVMI = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваровVMI", ТаблицаДвиженийVMI);
	
	Если ДатаДокумента < ПараметрыСеанса.ДатаНачалаРаботыТовары 
		ИЛИ ДатаДокумента < глЗначениеПеременной("ДатаЗапускаПроведенияПоПартиямРезервам")
		Тогда
		СтруктураТаблиц = Новый Структура;
		
		СтруктураТаблиц.Вставить("ПартииТоваров",    ТаблицаДвижений);
		СтруктураТаблиц.Вставить("ПартииТоваровVMI", ТаблицаДвиженийVMI);
		Возврат СтруктураТаблиц;
	КонецЕсли;
		
	Если Не ПараметрыСеанса.ОпределятьСтратегиюПогашенияПартийТоваровПоСкладу Тогда
		ВызватьИсключение "[ПогашениеПартийТоваров]: Реализовано погашение партий только при использовании стратегии погашения партий товаров по складу";
	КонецЕсли;
	
	//Таблица того, что нужно списать
	ТаблицаСписания = ТаблицыДляРасчетаСписанияПоПартиям(вхСсылкаНаДокумент, вхФильтр);

	//Остатки для списания
	ТаблицаОстатковПартий = ТаблицаОстатковПартий(вхСсылкаНаДокумент, ТаблицаДвижений, ТаблицаСписания, вхПараметры);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата, Организация, Склад");
	РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.Склад, "СкладVMI, ФизическийСклад");
	СтратегияПогашенияПоОрганизации = ПроведениеДокументовКлиентСервер.СтратегияПогашенияПоОрганизации(вхСсылкаНаДокумент, Реквизиты.Дата);
	
	ОтборПоОрганизации = СтратегияПогашенияПоОрганизации.СписыватьТолькоПоСвоейОрганизации;
	
	СтруктураИзмерений = Новый Структура;	
	СтруктураИзмерений.Вставить("Номенклатура");	
	СтруктураИзмерений.Вставить("Склад");	
	СтруктураИзмерений.Вставить("Качество");	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Регистратор", 				вхСсылкаНаДокумент);
	СтруктураПараметров.Вставить("Период", 						Реквизиты.Дата);
	СтруктураПараметров.Вставить("ТаблицаОстатковПартий", 		ТаблицаОстатковПартий);
	СтруктураПараметров.Вставить("ТаблицаДвижений", 			ТаблицаДвижений);
	СтруктураПараметров.Вставить("СтруктураИзмерений", 			СтруктураИзмерений);
	СтруктураПараметров.Вставить("КонтролироватьОстаткиПартий", Ложь);
	СтруктураПараметров.Вставить("Отказ", 						Ложь);
	СтруктураПараметров.Вставить("ПодборПартийПоFIFO", 			РеквизитыСклада.СкладVMI); // Для VMI склада всегда подбираем партии по FIFO, независимо от того какая партия указана в документе

	//Списание по строкам
	Для Каждого СтрокаТаблицыСписания Из ТаблицаСписания Цикл
		СписаниеПартий(СтрокаТаблицыСписания, СтруктураПараметров, вхПараметры);
	КонецЦикла;	
	
	//Нужно досписать несписанное количество с физического склада
	//Сначала нужно списать по указанной строке прихода, если списали не все, далее подбираем строку прихода по FIFO
	Если РеквизитыСклада.СкладVMI Тогда
		
		Для каждого СтрокаТаблицыСписания Из ТаблицаСписания Цикл
			СтрокаТаблицыСписания.Склад = ?(СтрокаТаблицыСписания.ВидСписания = "Перемещение", СтрокаТаблицыСписания.СкладПеремещения, РеквизитыСклада.ФизическийСклад);
		КонецЦикла;
		
		ТаблицаСписания.ЗаполнитьЗначения(Перечисления.СтатусыПартии.Собственный, 	"СтатусПартии");
		ТаблицаСписания.ЗаполнитьЗначения(Ложь, 									"УчитыватьПоставщика");
		ТаблицаСписания.ЗаполнитьЗначения(Ложь, 									"ПоФиксЦене");
		ТаблицаСписания.ЗаполнитьЗначения(Ложь, 									"ОприходоватьПоVMI");
		
		ТаблицаОстатковПартий = ТаблицаОстатковПартий(вхСсылкаНаДокумент, СтруктураПараметров.ТаблицаДвижений, ТаблицаСписания, вхПараметры);
		
		СтруктураПараметров.Вставить("ПодборПартийПоFIFO",	  		Ложь); //Если в таблице списания указана партия, то списывается она
		СтруктураПараметров.Вставить("ТаблицаОстатковПартий", 		ТаблицаОстатковПартий);
		
		//Списание по строкам
		Для Каждого СтрокаТаблицыСписания Из ТаблицаСписания Цикл
			//Для пустых строк прихода нужно контролировать остатки
			СтруктураПараметров.Вставить("КонтролироватьОстаткиПартий", СтрокаТаблицыСписания.ПустаяСтрокаПрихода);
			
			Если СтратегияПогашенияПоОрганизации.ИспользуютсяМФП Тогда
				//Не учитываем организацию, остатки отобраны и отсортированы по организациям согласно политике
				СтруктураИзмерений.Удалить("Организация");
			Иначе
				//Для пустых строк прихода не учитываем организацию
				Если СтрокаТаблицыСписания.ПустаяСтрокаПрихода Тогда
					СтруктураИзмерений.Удалить("Организация");
				Иначе
					СтруктураИзмерений.Вставить("Организация");
				КонецЕсли;
			КонецЕсли;
			СписаниеПартий(СтрокаТаблицыСписания, СтруктураПараметров, вхПараметры);
		КонецЦикла;	
		
		//Теперь спишем непустые строки прихода с подбором партий по FIFO
		ТаблицаСписанияПоFIFO = ТаблицаСписания.Скопировать(ТаблицаСписания.НайтиСтроки(Новый Структура("ПустаяСтрокаПрихода", Ложь)));
		СтруктураПараметров.Вставить("ПодборПартийПоFIFO", 			Истина);
		СтруктураПараметров.Вставить("КонтролироватьОстаткиПартий", Истина);
		//При списании по FIFO организацию не контролируем
		Если СтратегияПогашенияПоОрганизации.ИспользуютсяМФП Тогда
			СтруктураИзмерений.Удалить("Организация");
		ИначеЕсли НЕ ОтборПоОрганизации Тогда
			СтруктураИзмерений.Удалить("Организация");
		КонецЕсли;
		Для Каждого СтрокаТаблицыСписания Из ТаблицаСписанияПоFIFO Цикл
			СписаниеПартий(СтрокаТаблицыСписания, СтруктураПараметров, вхПараметры);
		КонецЦикла;	
		
	КонецЕсли;

	//Оприходование по партиям VMI
	СтрокиVMI = ТаблицаДвижений.НайтиСтроки(Новый Структура("СтатусПартии, ВидДвижения, ОприходоватьПоVMI", Перечисления.СтатусыПартии.ПринятыйНаОтветХранение, ВидДвиженияНакопления.Расход, Истина));
	Если СтрокиVMI.Количество() > 0 Тогда 
		Для Каждого Строка Из СтрокиVMI Цикл 
			ЗаполнитьЗначенияСвойств(ТаблицаДвиженийVMI.Добавить(), Строка);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ТаблицаДвиженийVMI.СтрокаПрихода КАК Справочник.ИдентификаторыСтрокПриходов) КАК СтрокаПрихода
		|ПОМЕСТИТЬ ТаблицаДвиженийVMI
		|ИЗ
		|	&ТаблицаДвиженийVMI КАК ТаблицаДвиженийVMI
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДвиженийVMI.СтрокаПрихода,
		|	ТаблицаДвиженийVMI.СтрокаПрихода.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	ТаблицаДвиженийVMI КАК ТаблицаДвиженийVMI";
		Запрос.УстановитьПараметр("ТаблицаДвиженийVMI", ТаблицаДвиженийVMI);
		ДопТаблица = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаДвижений Из ТаблицаДвиженийVMI Цикл
			СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход;
			СтрокаДопТаблицы = ДопТаблица.Найти(СтрокаДвижений.СтрокаПрихода, "СтрокаПрихода");
			СтрокаДвижений.ДоговорКонтрагента = СтрокаДопТаблицы.ДоговорКонтрагента;
			СтрокаДвижений.КредДокумент = вхСсылкаНаДокумент;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ПартииТоваров",    ТаблицаДвижений);
	СтруктураТаблиц.Вставить("ПартииТоваровVMI", ТаблицаДвиженийVMI);
	
	Если СтруктураПараметров.Отказ Тогда
		вхОтказ = Истина;
	КонецЕсли;
	
	Возврат СтруктураТаблиц;
	
КонецФункции 

Функция ТаблицаОстатковПартий(вхСсылкаНаДокумент, ТаблицаДвижений, ТаблицаСписания, вхПараметры)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата, Организация");
	СтратегияПогашенияПоОрганизации = ПроведениеДокументовКлиентСервер.СтратегияПогашенияПоОрганизации(вхСсылкаНаДокумент, Реквизиты.Дата);
	
	ОтборПоОрганизации = СтратегияПогашенияПоОрганизации.СписыватьТолькоПоСвоейОрганизации;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);			   
	Запрос.УстановитьПараметр("ТаблицаПоСтрокамПрихода", ТаблицаСписания);
	
	ОперативноеПроведение = ПроведениеДокументовКлиентСервер.ОперативноеПроведение(вхПараметры);
	Запрос.УстановитьПараметр("КонПериода", ?(ОперативноеПроведение, Неопределено, вхСсылкаНаДокумент.МоментВремени()));
	
	Если СтратегияПогашенияПоОрганизации.ИспользуютсяМФП Тогда
		
		Запрос.УстановитьПараметр("ТаблицаПриоритетаОрганизаций", СтратегияПогашенияПоОрганизации.ПараметрыПолитикиМФП.ОрганизацииДляЗакупки);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаПриоритетаОрганизаций.Приоритет КАК Приоритет,
		               |	ТаблицаПриоритетаОрганизаций.Организация КАК Организация
		               |ПОМЕСТИТЬ ТаблицаПриоритетаОрганизаций
		               |ИЗ
		               |	&ТаблицаПриоритетаОрганизаций КАК ТаблицаПриоритетаОрганизаций
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ТаблицаПоСтрокамПрихода.Номенклатура КАК Номенклатура,
		               |	ТаблицаПоСтрокамПрихода.Склад КАК Склад,
		               |	ТаблицаПоСтрокамПрихода.Качество КАК Качество,
		               |	ТаблицаПоСтрокамПрихода.СтатусПартии КАК СтатусПартии,
		               |	ТаблицаПоСтрокамПрихода.СтрокаПрихода КАК СтрокаПрихода,
		               |	ТаблицаПоСтрокамПрихода.Организация КАК Организация,
		               |	ТаблицаПоСтрокамПрихода.Поставщик КАК Поставщик
		               |ПОМЕСТИТЬ ТаблицаПоСтрокамПрихода
		               |ИЗ
		               |	&ТаблицаПоСтрокамПрихода КАК ТаблицаПоСтрокамПрихода
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаДвижений.Номенклатура КАК Номенклатура,
		               |	ТаблицаДвижений.Склад КАК Склад,
		               |	ТаблицаДвижений.Качество КАК Качество,
		               |	ТаблицаДвижений.СтатусПартии КАК СтатусПартии,
		               |	ТаблицаДвижений.СтрокаПрихода КАК СтрокаПрихода,
		               |	ТаблицаДвижений.Организация КАК Организация,
		               |	ТаблицаДвижений.Количество КАК Количество,
		               |	ТаблицаДвижений.СуммаРубли КАК СуммаРубли,
		               |	ТаблицаДвижений.СуммаДоллары КАК СуммаДоллары,
		               |	ТаблицаДвижений.СуммаЕвро КАК СуммаЕвро,
		               |	ТаблицаДвижений.СуммаБезНДС КАК СуммаБезНДС
		               |ПОМЕСТИТЬ ТаблицаДвижений
		               |ИЗ
		               |	&ТаблицаДвижений КАК ТаблицаДвижений
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаДвижений.Номенклатура КАК Номенклатура,
		               |	ТаблицаДвижений.Склад КАК Склад,
		               |	ТаблицаДвижений.Качество КАК Качество,
		               |	ТаблицаДвижений.СтатусПартии КАК СтатусПартии,
		               |	ТаблицаДвижений.СтрокаПрихода КАК СтрокаПрихода,
		               |	ТаблицаДвижений.Организация КАК Организация,
		               |	СУММА(ТаблицаДвижений.Количество) КАК Количество,
		               |	СУММА(ТаблицаДвижений.СуммаРубли) КАК СуммаРубли,
		               |	СУММА(ТаблицаДвижений.СуммаДоллары) КАК СуммаДоллары,
		               |	СУММА(ТаблицаДвижений.СуммаЕвро) КАК СуммаЕвро,
		               |	СУММА(ТаблицаДвижений.СуммаБезНДС) КАК СуммаБезНДС
		               |ПОМЕСТИТЬ ТаблицаДвиженийСвернутая
		               |ИЗ
		               |	ТаблицаДвижений КАК ТаблицаДвижений
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТаблицаДвижений.Номенклатура,
		               |	ТаблицаДвижений.Склад,
		               |	ТаблицаДвижений.Качество,
		               |	ТаблицаДвижений.СтатусПартии,
		               |	ТаблицаДвижений.СтрокаПрихода,
		               |	ТаблицаДвижений.Организация
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Склад,
		               |	Качество,
		               |	СтатусПартии,
		               |	СтрокаПрихода,
		               |	Организация
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПартииТоваровОстатки.Номенклатура,
		               |	ПартииТоваровОстатки.Склад,
		               |	ПартииТоваровОстатки.Качество,
		               |	ПартииТоваровОстатки.Организация,
		               |	ПартииТоваровОстатки.СтрокаПрихода,
		               |	ПартииТоваровОстатки.СтатусПартии,
		               |	ПартииТоваровОстатки.СтрокаПрихода.ТорговаяТочка.Владелец КАК Поставщик,
		               |	СУММА(ПартииТоваровОстатки.КоличествоОстаток) КАК Количество,
		               |	СУММА(ПартииТоваровОстатки.СуммаРублиОстаток) КАК СуммаРубли,
		               |	СУММА(ПартииТоваровОстатки.СуммаДолларыОстаток) КАК СуммаДоллары,
		               |	СУММА(ПартииТоваровОстатки.СуммаЕвроОстаток) КАК СуммаЕвро,
		               |	СУММА(ПартииТоваровОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС
		               |ПОМЕСТИТЬ втПартииСвернутые
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваров.Остатки(
		               |			&КонПериода,
		               |			(Номенклатура, Склад, Качество) В
		               |					(ВЫБРАТЬ
		               |						ТаблицаПоСтрокамПрихода.Номенклатура,
		               |						ТаблицаПоСтрокамПрихода.Склад,
		               |						ТаблицаПоСтрокамПрихода.Качество
		               |					ИЗ
		               |						ТаблицаПоСтрокамПрихода)
		               |				И Организация В
		               |					(ВЫБРАТЬ
		               |						ТаблицаПриоритетаОрганизаций.Организация
		               |					ИЗ
		               |						ТаблицаПриоритетаОрганизаций)) КАК ПартииТоваровОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПартииТоваровОстатки.Номенклатура,
		               |	ПартииТоваровОстатки.Склад,
		               |	ПартииТоваровОстатки.Качество,
		               |	ПартииТоваровОстатки.Организация,
		               |	ПартииТоваровОстатки.СтрокаПрихода,
		               |	ПартииТоваровОстатки.СтатусПартии,
		               |	ПартииТоваровОстатки.СтрокаПрихода.ТорговаяТочка.Владелец
		               |
		               |ДЛЯ ИЗМЕНЕНИЯ
		               |	РегистрНакопления.ПартииТоваров.Остатки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПартииТоваровОстатки.Номенклатура,
		               |	ПартииТоваровОстатки.Склад,
		               |	ПартииТоваровОстатки.Качество,
		               |	ПартииТоваровОстатки.Организация,
		               |	ПартииТоваровОстатки.СтрокаПрихода,
		               |	ПартииТоваровОстатки.СтатусПартии,
		               |	ПартииТоваровОстатки.Поставщик КАК Поставщик,
		               |	ПартииТоваровОстатки.Организация.Наименование КАК ОрганизацияНаименование,
		               |	ПартииТоваровОстатки.Количество - ЕСТЬNULL(ТаблицаДвиженийСвернутая.Количество, 0) КАК Количество,
		               |	ПартииТоваровОстатки.СуммаРубли - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаРубли, 0) КАК СуммаРубли,
		               |	ПартииТоваровОстатки.СуммаДоллары - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаДоллары, 0) КАК СуммаДоллары,
		               |	ПартииТоваровОстатки.СуммаЕвро - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаЕвро, 0) КАК СуммаЕвро,
		               |	ПартииТоваровОстатки.СуммаБезНДС - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаБезНДС, 0) КАК СуммаБезНДС
		               |ИЗ
		               |	втПартииСвернутые КАК ПартииТоваровОстатки
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПриоритетаОрганизаций КАК ТаблицаПриоритетаОрганизаций
		               |		ПО (ТаблицаПриоритетаОрганизаций.Организация = ПартииТоваровОстатки.Организация)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДвиженийСвернутая КАК ТаблицаДвиженийСвернутая
		               |		ПО ПартииТоваровОстатки.Номенклатура = ТаблицаДвиженийСвернутая.Номенклатура
		               |			И ПартииТоваровОстатки.Склад = ТаблицаДвиженийСвернутая.Склад
		               |			И ПартииТоваровОстатки.Качество = ТаблицаДвиженийСвернутая.Качество
		               |			И ПартииТоваровОстатки.СтатусПартии = ТаблицаДвиженийСвернутая.СтатусПартии
		               |			И ПартииТоваровОстатки.СтрокаПрихода = ТаблицаДвиженийСвернутая.СтрокаПрихода
		               |			И ПартииТоваровОстатки.Организация = ТаблицаДвиженийСвернутая.Организация
		               |ГДЕ
		               |	ПартииТоваровОстатки.Количество - ЕСТЬNULL(ТаблицаДвиженийСвернутая.Количество, 0) > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТаблицаПриоритетаОрганизаций.Приоритет,
		               |	ПартииТоваровОстатки.СтрокаПрихода.Дата,
		               |	ПартииТоваровОстатки.Организация.Наименование";
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПоСтрокамПрихода.Номенклатура КАК Номенклатура,
		|	ТаблицаПоСтрокамПрихода.Склад КАК Склад,
		|	ТаблицаПоСтрокамПрихода.Качество КАК Качество,
		|	ТаблицаПоСтрокамПрихода.СтатусПартии КАК СтатусПартии,
		|	ТаблицаПоСтрокамПрихода.СтрокаПрихода КАК СтрокаПрихода,
		|	ТаблицаПоСтрокамПрихода.Организация КАК Организация,
		|	ТаблицаПоСтрокамПрихода.Поставщик КАК Поставщик
		|ПОМЕСТИТЬ ТаблицаПоСтрокамПрихода
		|ИЗ
		|	&ТаблицаПоСтрокамПрихода КАК ТаблицаПоСтрокамПрихода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДвижений.Номенклатура КАК Номенклатура,
		|	ТаблицаДвижений.Склад КАК Склад,
		|	ТаблицаДвижений.Качество КАК Качество,
		|	ТаблицаДвижений.СтатусПартии КАК СтатусПартии,
		|	ТаблицаДвижений.СтрокаПрихода КАК СтрокаПрихода,
		|	ТаблицаДвижений.Организация КАК Организация,
		|	ТаблицаДвижений.Количество КАК Количество,
		|	ТаблицаДвижений.СуммаРубли КАК СуммаРубли,
		|	ТаблицаДвижений.СуммаДоллары КАК СуммаДоллары,
		|	ТаблицаДвижений.СуммаЕвро КАК СуммаЕвро,
		|	ТаблицаДвижений.СуммаБезНДС КАК СуммаБезНДС
		|ПОМЕСТИТЬ ТаблицаДвижений
		|ИЗ
		|	&ТаблицаДвижений КАК ТаблицаДвижений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДвижений.Номенклатура КАК Номенклатура,
		|	ТаблицаДвижений.Склад КАК Склад,
		|	ТаблицаДвижений.Качество КАК Качество,
		|	ТаблицаДвижений.СтатусПартии КАК СтатусПартии,
		|	ТаблицаДвижений.СтрокаПрихода КАК СтрокаПрихода,
		|	ТаблицаДвижений.Организация КАК Организация,
		|	СУММА(ТаблицаДвижений.Количество) КАК Количество,
		|	СУММА(ТаблицаДвижений.СуммаРубли) КАК СуммаРубли,
		|	СУММА(ТаблицаДвижений.СуммаДоллары) КАК СуммаДоллары,
		|	СУММА(ТаблицаДвижений.СуммаЕвро) КАК СуммаЕвро,
		|	СУММА(ТаблицаДвижений.СуммаБезНДС) КАК СуммаБезНДС
		|ПОМЕСТИТЬ ТаблицаДвиженийСвернутая
		|ИЗ
		|	ТаблицаДвижений КАК ТаблицаДвижений
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДвижений.Номенклатура,
		|	ТаблицаДвижений.Склад,
		|	ТаблицаДвижений.Качество,
		|	ТаблицаДвижений.СтатусПартии,
		|	ТаблицаДвижений.СтрокаПрихода,
		|	ТаблицаДвижений.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Склад,
		|	Качество,
		|	СтатусПартии,
		|	СтрокаПрихода,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваровОстатки.Номенклатура,
		|	ПартииТоваровОстатки.Склад,
		|	ПартииТоваровОстатки.Качество,
		|	ПартииТоваровОстатки.Организация,
		|	ПартииТоваровОстатки.СтрокаПрихода,
		|	ПартииТоваровОстатки.СтатусПартии,
		|	ПартииТоваровОстатки.СтрокаПрихода.ТорговаяТочка.Владелец КАК Поставщик,
		|	СУММА(ПартииТоваровОстатки.КоличествоОстаток) КАК Количество,
		|	СУММА(ПартииТоваровОстатки.СуммаРублиОстаток) КАК СуммаРубли,
		|	СУММА(ПартииТоваровОстатки.СуммаДолларыОстаток) КАК СуммаДоллары,
		|	СУММА(ПартииТоваровОстатки.СуммаЕвроОстаток) КАК СуммаЕвро,
		|	СУММА(ПартииТоваровОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС
		|ПОМЕСТИТЬ втПартииСвернутые
		|ИЗ
		|	РегистрНакопления.ПартииТоваров.Остатки(
		|			&КонПериода,
		|			(Номенклатура, Склад, Качество "+?(ОтборПоОрганизации, ", Организация ", "") +" ) В
		|				(ВЫБРАТЬ
		|					ТаблицаПоСтрокамПрихода.Номенклатура,
		|					ТаблицаПоСтрокамПрихода.Склад,
		|					ТаблицаПоСтрокамПрихода.Качество" + ?(ОтборПоОрганизации,
		", 					ТаблицаПоСтрокамПрихода.Организация ", "") + "
		|				ИЗ
		|					ТаблицаПоСтрокамПрихода)) КАК ПартииТоваровОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровОстатки.Номенклатура,
		|	ПартииТоваровОстатки.Склад,
		|	ПартииТоваровОстатки.Качество,
		|	ПартииТоваровОстатки.Организация,
		|	ПартииТоваровОстатки.СтрокаПрихода,
		|	ПартииТоваровОстатки.СтатусПартии,
		|	ПартииТоваровОстатки.СтрокаПрихода.ТорговаяТочка.Владелец
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрНакопления.ПартииТоваров.Остатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваровОстатки.Номенклатура,
		|	ПартииТоваровОстатки.Склад,
		|	ПартииТоваровОстатки.Качество,
		|	ПартииТоваровОстатки.Организация,
		|	ПартииТоваровОстатки.СтрокаПрихода,
		|	ПартииТоваровОстатки.СтатусПартии,
		|	ПартииТоваровОстатки.Поставщик КАК Поставщик,
		|	ПартииТоваровОстатки.Организация = &Организация КАК ЭтаОрганизация,
		|	ПартииТоваровОстатки.Организация.Наименование КАК ОрганизацияНаименование,
		|	ПартииТоваровОстатки.Количество - ЕСТЬNULL(ТаблицаДвиженийСвернутая.Количество, 0) КАК Количество,
		|	ПартииТоваровОстатки.СуммаРубли - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаРубли, 0) КАК СуммаРубли,
		|	ПартииТоваровОстатки.СуммаДоллары - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаДоллары, 0) КАК СуммаДоллары,
		|	ПартииТоваровОстатки.СуммаЕвро - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаЕвро, 0) КАК СуммаЕвро,
		|	ПартииТоваровОстатки.СуммаБезНДС - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаБезНДС, 0) КАК СуммаБезНДС
		|ИЗ
		|	втПартииСвернутые КАК ПартииТоваровОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДвиженийСвернутая КАК ТаблицаДвиженийСвернутая
		|		ПО ПартииТоваровОстатки.Номенклатура = ТаблицаДвиженийСвернутая.Номенклатура
		|			И ПартииТоваровОстатки.Склад = ТаблицаДвиженийСвернутая.Склад
		|			И ПартииТоваровОстатки.Качество = ТаблицаДвиженийСвернутая.Качество
		|			И ПартииТоваровОстатки.СтатусПартии = ТаблицаДвиженийСвернутая.СтатусПартии
		|			И ПартииТоваровОстатки.СтрокаПрихода = ТаблицаДвиженийСвернутая.СтрокаПрихода
		|			И ПартииТоваровОстатки.Организация = ТаблицаДвиженийСвернутая.Организация
		|ГДЕ
		|	ПартииТоваровОстатки.Количество - ЕСТЬNULL(ТаблицаДвиженийСвернутая.Количество, 0) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартииТоваровОстатки.СтрокаПрихода.Дата,
		|	ЭтаОрганизация УБЫВ,
		|	ОрганизацияНаименование";	
		
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		Запрос.УстановитьПараметр("ЗапрещенныеОрганизации", ПроведениеДокументовКлиентСервер.ЗапрещенныеОрганизацииПродавцы(Реквизиты.Организация, Реквизиты.Дата));
		
	КонецЕсли;

	ТаблицаОстатковПартий = Запрос.Выполнить().Выгрузить();
	ТаблицаОстатковПартий.Индексы.Добавить("Номенклатура, Склад, Качество, СтрокаПрихода, СтатусПартии, Поставщик, Организация");
	
	Возврат ТаблицаОстатковПартий;

КонецФункции

Процедура СписаниеПартий(СтрокаТовары, СтруктураПараметров, вхПараметры)
	
	Если СтрокаТовары.ВидСписания 	= "Перемещение"
		И СтрокаТовары.Склад 		= СтрокаТовары.СкладПеремещения
		И СтрокаТовары.Качество 	= СтрокаТовары.КачествоПеремещения
		И СтрокаТовары.СтатусПартии = СтрокаТовары.СтатусПартииПеремещения Тогда	
		//Не будем формировать бесполезные движения
		СтрокаТовары.Количество = 0;
		Возврат;
	КонецЕсли;
	
	// Подлежащее погашению при списании количество
	КоличествоРаспределить = СтрокаТовары.Количество;

	Если КоличествоРаспределить <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИзмерений = СтруктураПараметров.СтруктураИзмерений;
	
	Если СтруктураИзмерений.Свойство("СтрокаПрихода") Тогда
		СтруктураИзмерений.Удалить("СтрокаПрихода");
	КонецЕсли;
	Если СтруктураИзмерений.Свойство("СтатусПартии") Тогда
		СтруктураИзмерений.Удалить("СтатусПартии");
	КонецЕсли;
	Если СтруктураИзмерений.Свойство("Поставщик") Тогда
		СтруктураИзмерений.Удалить("Поставщик");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ПодборПартийПоFIFO 
		И НЕ СтрокаТовары.ПустаяСтрокаПрихода 
		И ЗначениеЗаполнено(СтрокаТовары.СтрокаПрихода) Тогда
		СтруктураИзмерений.Вставить("СтрокаПрихода");	
	КонецЕсли;
	Если НЕ СтрокаТовары.ИгнорироватьСтатусПартии Тогда
		СтруктураИзмерений.Вставить("СтатусПартии");	
	КонецЕсли;
	Если СтрокаТовары.УчитыватьПоставщика Тогда
		СтруктураИзмерений.Вставить("Поставщик");	
	КонецЕсли;
	
	ОтборПоОрганизации = СтруктураИзмерений.Свойство("Организация");
	СтратегияПогашенияПоОрганизации = ПроведениеДокументовКлиентСервер.СтратегияПогашенияПоОрганизации(СтруктураПараметров.Регистратор, СтруктураПараметров.Период);
	
	ОтборПоОрганизацииСтратегия = СтратегияПогашенияПоОрганизации.СписыватьТолькоПоСвоейОрганизации;
	
	СтрокаИзмерений = КлючиСтруктурыСтрокой(СтруктураИзмерений);
	
	ТаблицаДвижений = СтруктураПараметров.ТаблицаДвижений;
	
	СтрокиПартий = ПолучитьСтрокиОстатковПартий(СтрокаТовары, СтруктураИзмерений, СтруктураПараметров.ТаблицаОстатковПартий);
	
	Сообщение = "";
	Для каждого СтрокаПартии Из СтрокиПартий Цикл
		
		Если СтрокаПартии.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаПартии.Количество);
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаПартии);
		
		СтрокаДвижений.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		СтрокаДвижений.Количество 	= СписываемоеКоличество;
		СтрокаДвижений.Регистратор 	= СтруктураПараметров.Регистратор;
		СтрокаДвижений.Период 		= СтруктураПараметров.Период;
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТовары, "ОприходоватьПоVMI, НомерСтрокиВДокументе, ВнутреннееПеремещение, ВидСписания");
		
		Если СтрокаДвижений.Количество <> СтрокаПартии.Количество Тогда 
			
			Если СтрокаТовары.ПоФиксЦене Тогда
				СтрокаДвижений.СуммаРубли   = Окр(СтрокаДвижений.Количество * СтрокаТовары.ФиксЦена, 2);
			Иначе //По остаточной стоимости
				СтрокаДвижений.СуммаРубли   = СтрокаДвижений.Количество * СтрокаДвижений.СуммаРубли/СтрокаПартии.Количество;
			КонецЕсли;
			
			СтрокаДвижений.СуммаДоллары = СтрокаДвижений.Количество * СтрокаДвижений.СуммаДоллары/СтрокаПартии.Количество;
			СтрокаДвижений.СуммаЕвро 	= СтрокаДвижений.Количество * СтрокаДвижений.СуммаЕвро/СтрокаПартии.Количество;
			СтрокаДвижений.СуммаБезНДС 	= СтрокаДвижений.Количество * СтрокаДвижений.СуммаБезНДС/СтрокаПартии.Количество;
		Иначе
			Если СтрокаТовары.ПоФиксЦене Тогда
				СтрокаДвижений.СуммаРубли   = Окр(СтрокаДвижений.Количество * СтрокаТовары.ФиксЦена, 2); //Даем зависать остатку рублевой стоимости
			Иначе //По остаточной стоимости
				СтрокаДвижений.СуммаРубли   = СтрокаПартии.СуммаРубли; 
			КонецЕсли;
			СтрокаДвижений.СуммаДоллары = СтрокаПартии.СуммаДоллары;
			СтрокаДвижений.СуммаЕвро 	= СтрокаПартии.СуммаЕвро;
			СтрокаДвижений.СуммаБезНДС 	= СтрокаПартии.СуммаБезНДС;
		КонецЕсли;
		
		СтрокаПартии.Количество   = СтрокаПартии.Количество - СписываемоеКоличество;	
		СтрокаПартии.СуммаРубли   = СтрокаПартии.СуммаРубли - СтрокаДвижений.СуммаРубли;	
		СтрокаПартии.СуммаДоллары = СтрокаПартии.СуммаДоллары - СтрокаДвижений.СуммаДоллары;
		СтрокаПартии.СуммаЕвро    = СтрокаПартии.СуммаЕвро - СтрокаДвижений.СуммаЕвро;
		СтрокаПартии.СуммаБезНДС  = СтрокаПартии.СуммаБезНДС - СтрокаДвижений.СуммаБезНДС;
		
		КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
		
		СтрокаТовары.Количество = СтрокаТовары.Количество - СписываемоеКоличество;
		
		//Обработка прихода
		Если СтрокаТовары.ВидСписания = "Перемещение" Тогда 
			СтрокаДвиженийПриход = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвиженийПриход, СтрокаДвижений);
			СтрокаДвиженийПриход.Склад = СтрокаТовары.СкладПеремещения;
			СтрокаДвиженийПриход.Качество = СтрокаТовары.КачествоПеремещения;
			СтрокаДвиженийПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
			СтрокаДвиженийПриход.СтатусПартии = СтрокаТовары.СтатусПартииПеремещения;	
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПараметров.КонтролироватьОстаткиПартий И КоличествоРаспределить > 0 Тогда
		СтруктураПараметров.Отказ = Истина;
		Сообщение = Сообщение + 
		"[ПогашениеПартийТоваров]: не удалось списать по партиям
		| Номенклатура: " + СтрокаТовары.Номенклатура.Артикул + "/" + СтрокаТовары.Номенклатура + "(" + СтрокаТовары.Номенклатура.Код + ")" + "
		//| Номенклатура: " + СтрокаТовары.Номенклатура + "(" + СтрокаТовары.Номенклатура.Код + ")" + "
		| Склад: " +  СтрокаТовары.Склад + " 
		| Качество: " + СтрокаТовары.Качество + "
		| Количество (недостающее): " + Формат(КоличествоРаспределить, "ЧГ=0") + "
		| Списание по всем орг.: " + Формат(Не (ОтборПоОрганизации ИЛИ ОтборПоОрганизацииСтратегия), "БЛ=Нет; БИ=Да") + "
		| Параметры поиска: " + СтрокаИзмерений + Символы.ПС;
		
		//Напишем список организаций, по которым пробовали списать
		Если СтратегияПогашенияПоОрганизации.ИспользуютсяМФП Тогда
			
			ОрганизацииДляСписания = СтратегияПогашенияПоОрганизации.ПараметрыПолитикиМФП.ОрганизацииДляЗакупки;
			ОрганизацииДляСписанияСтрока = "";
			Для каждого Стр ИЗ ОрганизацииДляСписания Цикл
				ОрганизацииДляСписанияСтрока = ОрганизацииДляСписанияСтрока + ?(ОрганизацииДляСписанияСтрока = "", "", Символы.ПС) + Стр.Организация;
			КонецЦикла;
			Сообщение = Сообщение + 
			" Список доступных организаций для списания партий:
			|"+ОрганизацииДляСписанияСтрока;
			
		КонецЕсли;

		//Сообщить("[ПогашениеПартийТоваров]: не удалось списать по партиям номенклатуру " + СтрокаТовары.Номенклатура + "(" + СтрокаТовары.Номенклатура.Код + ")" + " со склада " + СтрокаТовары.Склад +  " с качеством " + СтрокаТовары.Качество + " в количестве " + КоличествоРаспределить);
		//Если КонтрольНаличияПартий Тогда 
		//	вхОтказ = Истина;
		//КонецЕсли;
	КонецЕсли;
	НеВыводитьОшибкиВОкноСообщений = ?(вхПараметры.ДанныеОбъекта.Свойство("НеВыводитьОшибкиВОкноСообщений"), Истина, Ложь);
	Если СтруктураПараметров.Отказ Тогда
		Если НеВыводитьОшибкиВОкноСообщений Тогда 
			ВызватьИсключение Сообщение;
		Иначе
			#Если Клиент Тогда 
				Сообщить(Сообщение);
			#Иначе
				ВызватьИсключение Сообщение;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция КлючиСтруктурыСтрокой(вхСтруктура)
	
	КлючиСтруктурыСтрокой = "";
	Для Каждого КлючЗначение Из вхСтруктура Цикл
		КлючиСтруктурыСтрокой = КлючиСтруктурыСтрокой + КлючЗначение.Ключ+", ";
	КонецЦикла;
	
	КлючиСтруктурыСтрокой = Лев(КлючиСтруктурыСтрокой, СтрДлина(КлючиСтруктурыСтрокой)-2);	
	
	Возврат КлючиСтруктурыСтрокой;
	
КонецФункции

Функция ПолучитьСтрокиОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий)
	
	ЗаполнитьЗначенияСвойств(СтруктураИзмерений, СтрокаПартииРаспределения);
	Возврат ТаблицаОстатковПартий.НайтиСтроки(СтруктураИзмерений);
		
Конецфункции


//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьМетаданные()
	Возврат Метаданные.Документы.РеализацияТоваровУслуг;	
КонецФункции

Функция ПолучитьРеквизитыКонтроля(вхПараметр = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Если (вхПараметр = Метаданные.ПланыОбмена.ОбменПартКом83_77) тогда
		Результат = ОбменДаннымиКлиентСервер.РеквизитыКонтроляПоДокументу(ПолучитьМетаданные(), ИсключаемыеРеквизитыКонтроляРегистрации());
	Иначе
		Результат.Вставить("Шапка", "Дата,Проведен");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИсключаемыеРеквизитыКонтроляРегистрации() Экспорт
	
	ИсключаемыеРеквизиты = ОбменДаннымиКлиентСервер.ИнициализироватьТаблицуИсключаемыхРеквизитовКонтроля();
	ОбменДаннымиКлиентСервер.ДобавитьВИсключаемыеРевизиты(ИсключаемыеРеквизиты, "Ссылка");
	
	Возврат ИсключаемыеРеквизиты;
	
КонецФункции

Функция ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр = Неопределено) Экспорт
	Возврат	РаботаСПоследовательностямиКлиентСервер.ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр);
КонецФункции

Функция ПолучитьДанныеГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхФильтр = Неопределено) Экспорт
	
	Результат = Неопределено;
	лМетаданныеПоследовательности = Неопределено;
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеГраницПоследовательности]: неправильный параметр номер 2.";	
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.Взаиморасчеты, вхФильтр);
	ИначеЕсли (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) тогда
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.ПартииТоваров, вхФильтр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Процедура ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Функция ПолучитьМассивСтатусовДокумента(Назначение = Неопределено) Экспорт
	
	Если Назначение = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СтатусыДокументов.Ссылка
		|ИЗ
		|	Справочник.СтатусыДокументов КАК СтатусыДокументов
		|ГДЕ
		|	СтатусыДокументов.Родитель = &Родитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыДокументов.Код");
		Запрос.УстановитьПараметр("Родитель", Справочники.СтатусыДокументов.РеализацияТоваровУслуг);
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ИначеЕсли Назначение = "Движение по регистрам" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен);
		Возврат Массив;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
КонецФункции

#Область КонтрольОстатков

//Старая процедура для своих складов и складов ответхранения, не используется
Процедура КонтрольОстатков_Старый(вхСсылкаНаДокумент, вхОтказ, вхПараметры) Экспорт
	
	Если НЕ НеобходимКонтрольОстатков(вхСсылкаНаДокумент, вхПараметры) Тогда
		Возврат;
	КонецЕсли;
	
    ЗаблокироватьДанныеПередКонтролемОстатков(вхСсылкаНаДокумент);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "СтатусДокумента, Дата, Склад");

	Запрос = Новый Запрос;
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка Тогда 
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
		               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		               |	РеализацияТоваровУслугТовары.Качество КАК Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК СтрокаЗаявки,
		               |	0 КАК КоличествоНедостачи,
		               |	СУММА(РеализацияТоваровУслугТовары.КоличествоПлан) КАК Количество
		               |ПОМЕСТИТЬ втТовары
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад,
		               |	РеализацияТоваровУслугТовары.Номенклатура,
		               |	РеализацияТоваровУслугТовары.Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаЗаявки
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Склад,
		               |	Качество";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
		               |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество
		               |ПОМЕСТИТЬ ОтказыПоНедостачам
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
		               |ГДЕ
		               |			 РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены В (&МассивОтказов)
		               |	И РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	КлючСвязи
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
		               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		               |	РеализацияТоваровУслугТовары.Качество КАК Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК СтрокаЗаявки,
		               |	СУММА(ЕСТЬNULL(ОтказыПоНедостачам.Количество, 0)) КАК КоличествоНедостачи,
		               |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
		               |ПОМЕСТИТЬ втТовары
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ОтказыПоНедостачам КАК ОтказыПоНедостачам
		               |		ПО РеализацияТоваровУслугТовары.КлючСвязи = ОтказыПоНедостачам.КлючСвязи
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад,
		               |	РеализацияТоваровУслугТовары.Номенклатура,
		               |	РеализацияТоваровУслугТовары.Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаЗаявки
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Склад,
		               |	Качество";
	КонецЕсли;
	Запрос.Текст =  Запрос.Текст + " ;" + "ВЫБРАТЬ
	                                      |	РезервыТоваровОстатки.Склад КАК Склад,
	                                      |	РезервыТоваровОстатки.Номенклатура КАК Номенклатура,
	                                      |	РезервыТоваровОстатки.Качество КАК Качество,
	                                      |	РезервыТоваровОстатки.КоличествоОстаток
	                                      |ПОМЕСТИТЬ втНашРезерв
	                                      |ИЗ
	                                      |	РегистрНакопления.РезервыТоваров.Остатки(
	                                      |			&КонПериода,
	                                      |			(Склад, Номенклатура, Качество, СтрокаЗаявки) В
	                                      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                      |					втТовары.Склад,
	                                      |					втТовары.Номенклатура,
	                                      |					втТовары.Качество,
	                                      |					втТовары.СтрокаЗаявки
	                                      |				ИЗ
	                                      |					втТовары КАК втТовары)) КАК РезервыТоваровОстатки
	                                      |ГДЕ
	                                      |	РезервыТоваровОстатки.КоличествоОстаток > 0
	                                      |
	                                      |ДЛЯ ИЗМЕНЕНИЯ
	                                      |	РегистрНакопления.РезервыТоваров.Остатки
	                                      |
	                                      |ИНДЕКСИРОВАТЬ ПО
	                                      |	Номенклатура,
	                                      |	Склад,
	                                      |	Качество
	                                      |;
	                                      |
	                                      |////////////////////////////////////////////////////////////////////////////////
	                                      |ВЫБРАТЬ
	                                      |	РезервыТоваровОстатки.Склад КАК Склад,
	                                      |	РезервыТоваровОстатки.Номенклатура КАК Номенклатура,
	                                      |	РезервыТоваровОстатки.Качество КАК Качество,
	                                      |	РезервыТоваровОстатки.КоличествоОстаток
	                                      |ПОМЕСТИТЬ втРезерв
	                                      |ИЗ
	                                      |	РегистрНакопления.РезервыТоваров.Остатки(
	                                      |			&КонПериода,
	                                      |			(Склад, Номенклатура, Качество) В
	                                      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                      |					втТовары.Склад,
	                                      |					втТовары.Номенклатура,
	                                      |					втТовары.Качество
	                                      |				ИЗ
	                                      |					втТовары КАК втТовары)) КАК РезервыТоваровОстатки
	                                      |ГДЕ
	                                      |	РезервыТоваровОстатки.КоличествоОстаток > 0
	                                      |
	                                      |ИНДЕКСИРОВАТЬ ПО
	                                      |	Номенклатура,
	                                      |	Склад,
	                                      |	Качество
	                                      |;
	                                      |
	                                      |////////////////////////////////////////////////////////////////////////////////
	                                      |ВЫБРАТЬ
	                                      |	втТовары.Склад КАК Склад,
	                                      |	втТовары.Номенклатура КАК Номенклатура,
	                                      |	втТовары.Качество КАК Качество,
	                                      |	СУММА(втТовары.КоличествоНедостачи) КАК КоличествоНедостачи,
	                                      |	СУММА(втТовары.Количество) КАК Количество
	                                      |ПОМЕСТИТЬ втТоварыСвернутая
	                                      |ИЗ
	                                      |	втТовары КАК втТовары
	                                      |
	                                      |СГРУППИРОВАТЬ ПО
	                                      |	втТовары.Склад,
	                                      |	втТовары.Номенклатура,
	                                      |	втТовары.Качество
	                                      |
	                                      |ИНДЕКСИРОВАТЬ ПО
	                                      |	Номенклатура,
	                                      |	Склад,
	                                      |	Качество
	                                      |;
	                                      |
	                                      |////////////////////////////////////////////////////////////////////////////////
	                                      |ВЫБРАТЬ
	                                      |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	                                      |	&Склад КАК Склад,
	                                      |	ТоварыНаСкладахОстатки.Качество КАК Качество,
	                                      |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Количество
	                                      |ПОМЕСТИТЬ втТоварыНаСкладахОстатки
	                                      |ИЗ
	                                      |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	                                      |			&КонПериода,
	                                      |			(Склад, Номенклатура, Качество) В
	                                      |				(ВЫБРАТЬ
	                                      |					втТоварыСвернутая.Склад,
	                                      |					втТоварыСвернутая.Номенклатура,
	                                      |					втТоварыСвернутая.Качество
	                                      |				ИЗ
	                                      |					втТоварыСвернутая КАК втТоварыСвернутая)) КАК ТоварыНаСкладахОстатки
	                                      |
	                                      |СГРУППИРОВАТЬ ПО
	                                      |	ТоварыНаСкладахОстатки.Номенклатура,
	                                      |	ТоварыНаСкладахОстатки.Качество
	                                      |
	                                      |ИМЕЮЩИЕ
	                                      |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) > 0
	                                      |
	                                      |ДЛЯ ИЗМЕНЕНИЯ
	                                      |	РегистрНакопления.ТоварыНаСкладах.Остатки
	                                      |
	                                      |ИНДЕКСИРОВАТЬ ПО
	                                      |	Номенклатура,
	                                      |	Склад,
	                                      |	Качество
	                                      |;
	                                      |
	                                      |////////////////////////////////////////////////////////////////////////////////
	                                      |ВЫБРАТЬ
	                                      |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	                                      |	&Склад КАК Склад,
	                                      |	ТоварыНаСкладахОстатки.Качество КАК Качество,
	                                      |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Количество
	                                      |ПОМЕСТИТЬ втТоварыНаСкладахОстаткиДопСклад
	                                      |ИЗ
	                                      |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	                                      |			&КонПериода,
	                                      |			(Склад, Номенклатура, Качество) В
	                                      |				(ВЫБРАТЬ
	                                      |					&ДопСклад,
	                                      |					втТоварыСвернутая.Номенклатура,
	                                      |					втТоварыСвернутая.Качество
	                                      |				ИЗ
	                                      |					втТоварыСвернутая КАК втТоварыСвернутая)) КАК ТоварыНаСкладахОстатки
	                                      |ГДЕ
	                                      |	&ДопСклад <> &Склад
	                                      |
	                                      |СГРУППИРОВАТЬ ПО
	                                      |	ТоварыНаСкладахОстатки.Номенклатура,
	                                      |	ТоварыНаСкладахОстатки.Качество
	                                      |
	                                      |ИМЕЮЩИЕ
	                                      |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) > 0
	                                      |
	                                      |ДЛЯ ИЗМЕНЕНИЯ
	                                      |	РегистрНакопления.ТоварыНаСкладах.Остатки
	                                      |
	                                      |ИНДЕКСИРОВАТЬ ПО
	                                      |	Номенклатура,
	                                      |	Склад,
	                                      |	Качество
	                                      |;
	                                      |
	                                      |////////////////////////////////////////////////////////////////////////////////
	                                      |ВЫБРАТЬ
	                                      |	втТоварыСвернутая.Склад,
	                                      |	втТоварыСвернутая.Номенклатура,
	                                      |	втТоварыСвернутая.Качество,
	                                      |	втТоварыСвернутая.Количество,
	                                      |	втТоварыСвернутая.КоличествоНедостачи,
	                                      |	ЕСТЬNULL(ТоварыНаСкладахОстатки.Количество, 0) КАК ОстаткиКоличество,
	                                      |	ЕСТЬNULL(втТоварыНаСкладахОстаткиДопСклад.Количество, 0) КАК ОстаткиДопКоличество,
	                                      |	ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) КАК втНашРезервКоличество,
	                                      |	ЕСТЬNULL(втРезерв.КоличествоОстаток, 0) КАК втРезервКоличество,
	                                      |	ВЫБОР
	                                      |		КОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.Количество, 0) + ЕСТЬNULL(втРезерв.КоличествоОстаток, 0) - ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) - втТоварыСвернутая.Количество <= 0
	                                      |			ТОГДА втТоварыСвернутая.КоличествоНедостачи
	                                      |		КОГДА втТоварыСвернутая.КоличествоНедостачи - (ЕСТЬNULL(ТоварыНаСкладахОстатки.Количество, 0) + ЕСТЬNULL(втРезерв.КоличествоОстаток, 0) - ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) - втТоварыСвернутая.Количество) <= 0
	                                      |			ТОГДА 0
	                                      |		ИНАЧЕ втТоварыСвернутая.КоличествоНедостачи - (ЕСТЬNULL(ТоварыНаСкладахОстатки.Количество, 0) + ЕСТЬNULL(втРезерв.КоличествоОстаток, 0) - ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) - втТоварыСвернутая.Количество)
	                                      |	КОНЕЦ КАК КПеремещениюСДоп
	                                      |ПОМЕСТИТЬ ИтоговаяТаблица
	                                      |ИЗ
	                                      |	втТоварыСвернутая КАК втТоварыСвернутая
	                                      |		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
	                                      |		ПО втТоварыСвернутая.Склад = ТоварыНаСкладахОстатки.Склад
	                                      |			И втТоварыСвернутая.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	                                      |			И втТоварыСвернутая.Качество = ТоварыНаСкладахОстатки.Качество
	                                      |		ЛЕВОЕ СОЕДИНЕНИЕ втРезерв КАК втРезерв
	                                      |		ПО втТоварыСвернутая.Склад = втРезерв.Склад
	                                      |			И втТоварыСвернутая.Номенклатура = втРезерв.Номенклатура
	                                      |			И втТоварыСвернутая.Качество = втРезерв.Качество
	                                      |		ЛЕВОЕ СОЕДИНЕНИЕ втНашРезерв КАК втНашРезерв
	                                      |		ПО втТоварыСвернутая.Склад = втНашРезерв.Склад
	                                      |			И втТоварыСвернутая.Номенклатура = втНашРезерв.Номенклатура
	                                      |			И втТоварыСвернутая.Качество = втНашРезерв.Качество
	                                      |		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыНаСкладахОстаткиДопСклад КАК втТоварыНаСкладахОстаткиДопСклад
	                                      |		ПО втТоварыСвернутая.Склад = втТоварыНаСкладахОстаткиДопСклад.Склад
	                                      |			И втТоварыСвернутая.Номенклатура = втТоварыНаСкладахОстаткиДопСклад.Номенклатура
	                                      |			И втТоварыСвернутая.Качество = втТоварыНаСкладахОстаткиДопСклад.Качество
	                                      |;
	                                      |
	                                      |////////////////////////////////////////////////////////////////////////////////
	                                      |ВЫБРАТЬ
	                                      |	ИтоговаяТаблица.Склад,
	                                      |	ИтоговаяТаблица.Номенклатура,
	                                      |	ИтоговаяТаблица.Качество,
	                                      |	ИтоговаяТаблица.ОстаткиКоличество,
	                                      |	ИтоговаяТаблица.Количество,
	                                      |	ИтоговаяТаблица.КоличествоНедостачи,
	                                      |	ИтоговаяТаблица.КПеремещениюСДоп,
	                                      |	ВЫБОР
	                                      |		КОГДА &ДопСклад = &Склад
	                                      |			ТОГДА ИтоговаяТаблица.Количество + ИтоговаяТаблица.КоличествоНедостачи - ИтоговаяТаблица.ОстаткиКоличество + ИтоговаяТаблица.втРезервКоличество - ИтоговаяТаблица.втНашРезервКоличество
	                                      |		ИНАЧЕ ИтоговаяТаблица.Количество + ИтоговаяТаблица.КоличествоНедостачи - ИтоговаяТаблица.ОстаткиДопКоличество - ИтоговаяТаблица.ОстаткиКоличество + ИтоговаяТаблица.втРезервКоличество - ИтоговаяТаблица.втНашРезервКоличество - ИтоговаяТаблица.КПеремещениюСДоп
	                                      |	КОНЕЦ КАК Количество
	                                      |ИЗ
	                                      |	ИтоговаяТаблица КАК ИтоговаяТаблица
	                                      |ГДЕ
	                                      |	ВЫБОР
	                                      |			КОГДА &ДопСклад = &Склад
	                                      |				ТОГДА ИтоговаяТаблица.Количество + ИтоговаяТаблица.КоличествоНедостачи - ИтоговаяТаблица.ОстаткиКоличество + ИтоговаяТаблица.втРезервКоличество - ИтоговаяТаблица.втНашРезервКоличество
	                                      |			ИНАЧЕ ИтоговаяТаблица.Количество + ИтоговаяТаблица.КоличествоНедостачи - ИтоговаяТаблица.ОстаткиДопКоличество - ИтоговаяТаблица.ОстаткиКоличество + ИтоговаяТаблица.втРезервКоличество - ИтоговаяТаблица.втНашРезервКоличество - ИтоговаяТаблица.КПеремещениюСДоп
	                                      |		КОНЕЦ > 0";

					 
	МассивОтказов = Новый Массив;
	МассивОтказов.Добавить(Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком);
	МассивОтказов.Добавить(Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке);
	Запрос.УстановитьПараметр("МассивОтказов", МассивОтказов);
	Запрос.УстановитьПараметр("Склад", 		Реквизиты.Склад);
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
	
	//{{ХудинВВ 20180709
	ИспользованиеСобственногоСписанияПартийДляРТУ = ПроведениеДокументовКлиентСервер.ИспользованиеСобственногоСписанияПартийДляРТУ(вхСсылкаНаДокумент);
	РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.Склад, "СкладVMI, ФизическийСклад"); 
	//Для складов VMI для списания должны быть доступны остатки физического склада
	ДопСклад = ?(ИспользованиеСобственногоСписанияПартийДляРТУ И РеквизитыСклада.СкладVMI, РеквизитыСклада.ФизическийСклад, Реквизиты.Склад);
	Запрос.УстановитьПараметр("ДопСклад", 	ДопСклад);
	//}}
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Сообщение = "";
	Успешно = Истина;
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			вхОтказ = Истина;
			Успешно = Ложь;
			
			Если ДопСклад = Выборка.Склад Тогда
				ТекстСклад = ""+ Выборка.Склад;
			Иначе
				ТекстСклад = ""+ Выборка.Склад+" (с учетом остатков на складе "+ДопСклад+")";
			КонецЕсли;
			
				//#PK83-720 Kalinin V.A. ( 2018-06-01 )
			Сообщение = Сообщение + "[КонтрольОстатков]: на складе " + ТекстСклад + " не хватает остатка номенклатуры " +
			УправлениеЗапасами.ПредставлениеНоменклатуры(Выборка.Номенклатура,,ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Номенклатура,"Артикул")) 
			+ " с качеством " + Выборка.Качество + " в количестве " + Выборка.Количество + Символы.ПС;
			//
			//Сообщение = Сообщение + "[КонтрольОстатков]: на складе " + Выборка.Склад + " не хватает остатка номенклатуры "
			//+ Выборка.Номенклатура + " с качеством " + Выборка.Качество + " в количестве " + Выборка.Количество + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	Если Не Успешно Тогда 
		#Если Клиент Тогда 
			Сообщить(Сообщение);
		#Иначе
			ВызватьИсключение Сообщение;
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

//Используется для своих складов
Процедура КонтрольОстатков(вхСсылкаНаДокумент, вхОтказ, вхПараметры) Экспорт
	
	Если НЕ НеобходимКонтрольОстатков(вхСсылкаНаДокумент, вхПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеПередКонтролемОстатков(вхСсылкаНаДокумент);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "СтатусДокумента, Дата, Склад");
	
	ОперативноеПроведение = ПроведениеДокументовКлиентСервер.ОперативноеПроведение(вхПараметры);
	
	Запрос = Новый Запрос;
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка Тогда 
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
		               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		               |	РеализацияТоваровУслугТовары.Качество КАК Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК СтрокаЗаявки,
		               |	СУММА(РеализацияТоваровУслугТовары.КоличествоПлан) КАК Количество
		               |ПОМЕСТИТЬ втТовары
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад,
		               |	РеализацияТоваровУслугТовары.Номенклатура,
		               |	РеализацияТоваровУслугТовары.Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаЗаявки
		               |
		               |ИМЕЮЩИЕ
		               |	СУММА(РеализацияТоваровУслугТовары.КоличествоПлан) > 0
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Склад,
		               |	Качество";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
		               |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество
		               |ПОМЕСТИТЬ ОтказыПоНедостачам
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
		               |ГДЕ
		               |	(РеализацияТоваровУслугПричиныОтказов.Ссылка.Склад.СкладVMI
		               |			ИЛИ (РеализацияТоваровУслугПричиныОтказов.СкладПеремещения <> Значение(Справочник.Склады.ПустаяСсылка)
			           |    				И РеализацияТоваровУслугПричиныОтказов.СкладПеремещения <> РеализацияТоваровУслугПричиныОтказов.Ссылка.Склад))
		               |	И РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	КлючСвязи
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
		               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		               |	РеализацияТоваровУслугТовары.Качество КАК Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК СтрокаЗаявки,
		               |	СУММА(РеализацияТоваровУслугТовары.Количество + ЕСТЬNULL(ОтказыПоНедостачам.Количество, 0)) КАК Количество
		               |ПОМЕСТИТЬ втТовары
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ОтказыПоНедостачам КАК ОтказыПоНедостачам
		               |		ПО РеализацияТоваровУслугТовары.КлючСвязи = ОтказыПоНедостачам.КлючСвязи
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад,
		               |	РеализацияТоваровУслугТовары.Номенклатура,
		               |	РеализацияТоваровУслугТовары.Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаЗаявки
		               |
		               |ИМЕЮЩИЕ
		               |	СУММА(РеализацияТоваровУслугТовары.Количество + ЕСТЬNULL(ОтказыПоНедостачам.Количество, 0)) > 0
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Склад,
		               |	Качество";
	КонецЕсли;
	Запрос.Текст =  Запрос.Текст + " ;" + "ВЫБРАТЬ
	                                      |	РезервыТоваровОстатки.Склад КАК Склад,
	                                      |	РезервыТоваровОстатки.Номенклатура КАК Номенклатура,
	                                      |	РезервыТоваровОстатки.Качество КАК Качество,
	                                      |	РезервыТоваровОстатки.КоличествоОстаток
	                                      |ПОМЕСТИТЬ втНашРезерв
	                                      |ИЗ
	                                      |	РегистрНакопления.РезервыТоваров.Остатки(
	                                      |			&КонПериода,
	                                      |			(Склад, Номенклатура, Качество, СтрокаЗаявки) В
	                                      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                      |					втТовары.Склад,
	                                      |					втТовары.Номенклатура,
	                                      |					втТовары.Качество,
	                                      |					втТовары.СтрокаЗаявки
	                                      |				ИЗ
	                                      |					втТовары КАК втТовары)) КАК РезервыТоваровОстатки
	                                      |
	                                      |ДЛЯ ИЗМЕНЕНИЯ
	                                      |	РегистрНакопления.РезервыТоваров.Остатки
	                                      |
	                                      |ИНДЕКСИРОВАТЬ ПО
	                                      |	Номенклатура,
	                                      |	Склад,
	                                      |	Качество
	                                      |;
	                                      |
	                                      |////////////////////////////////////////////////////////////////////////////////
	                                      |ВЫБРАТЬ
	                                      |	РезервыТоваровОстатки.Склад КАК Склад,
	                                      |	РезервыТоваровОстатки.Номенклатура КАК Номенклатура,
	                                      |	РезервыТоваровОстатки.Качество КАК Качество,
	                                      |	РезервыТоваровОстатки.КоличествоОстаток
	                                      |ПОМЕСТИТЬ втРезерв
	                                      |ИЗ
	                                      |	РегистрНакопления.РезервыТоваров.Остатки(
	                                      |			&КонПериода,
	                                      |			(Склад, Номенклатура, Качество) В
	                                      |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                      |					втТовары.Склад,
	                                      |					втТовары.Номенклатура,
	                                      |					втТовары.Качество
	                                      |				ИЗ
	                                      |					втТовары КАК втТовары)) КАК РезервыТоваровОстатки
	                                      |
	                                      |ИНДЕКСИРОВАТЬ ПО
	                                      |	Номенклатура,
	                                      |	Склад,
	                                      |	Качество
	                                      |;
	                                      |
	                                      |////////////////////////////////////////////////////////////////////////////////
	                                      |ВЫБРАТЬ
	                                      |	втТовары.Склад КАК Склад,
	                                      |	втТовары.Номенклатура КАК Номенклатура,
	                                      |	втТовары.Качество КАК Качество,
	                                      |	СУММА(втТовары.Количество) КАК Количество
	                                      |ПОМЕСТИТЬ втТоварыСвернутая
	                                      |ИЗ
	                                      |	втТовары КАК втТовары
	                                      |
	                                      |СГРУППИРОВАТЬ ПО
	                                      |	втТовары.Склад,
	                                      |	втТовары.Номенклатура,
	                                      |	втТовары.Качество
	                                      |
	                                      |ИНДЕКСИРОВАТЬ ПО
	                                      |	Номенклатура,
	                                      |	Склад,
	                                      |	Качество
	                                      |;
	                                      |
	                                      |////////////////////////////////////////////////////////////////////////////////
	                                      |ВЫБРАТЬ
	                                      |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	                                      |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	                                      |	ТоварыНаСкладахОстатки.Качество КАК Качество,
	                                      |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	                                      |ПОМЕСТИТЬ втТоварыНаСкладахОстатки
	                                      |ИЗ
	                                      |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	                                      |			&КонПериода,
	                                      |			(Склад, Номенклатура, Качество) В
	                                      |				(ВЫБРАТЬ
	                                      |					втТоварыСвернутая.Склад,
	                                      |					втТоварыСвернутая.Номенклатура,
	                                      |					втТоварыСвернутая.Качество
	                                      |				ИЗ
	                                      |					втТоварыСвернутая КАК втТоварыСвернутая)) КАК ТоварыНаСкладахОстатки
	                                      |
	                                      |ДЛЯ ИЗМЕНЕНИЯ
	                                      |	РегистрНакопления.ТоварыНаСкладах.Остатки
	                                      |
	                                      |ИНДЕКСИРОВАТЬ ПО
	                                      |	Номенклатура,
	                                      |	Склад,
	                                      |	Качество
	                                      |;
	                                      |
	                                      |////////////////////////////////////////////////////////////////////////////////
	                                      |ВЫБРАТЬ
	                                      |	втТоварыСвернутая.Склад,
	                                      |	втТоварыСвернутая.Номенклатура,
	                                      |	втТоварыСвернутая.Качество,
	                                      |	втТоварыСвернутая.Количество - ЕСТЬNULL(ТоварыНаСкладахОстатки.Количество, 0) + ЕСТЬNULL(втРезерв.КоличествоОстаток, 0) - ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) КАК Количество
	                                      |ИЗ
	                                      |	втТоварыСвернутая КАК втТоварыСвернутая
	                                      |		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыНаСкладахОстатки КАК ТоварыНаСкладахОстатки
	                                      |		ПО втТоварыСвернутая.Склад = ТоварыНаСкладахОстатки.Склад
	                                      |			И втТоварыСвернутая.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	                                      |			И втТоварыСвернутая.Качество = ТоварыНаСкладахОстатки.Качество
	                                      |		ЛЕВОЕ СОЕДИНЕНИЕ втРезерв КАК втРезерв
	                                      |		ПО втТоварыСвернутая.Склад = втРезерв.Склад
	                                      |			И втТоварыСвернутая.Номенклатура = втРезерв.Номенклатура
	                                      |			И втТоварыСвернутая.Качество = втРезерв.Качество
	                                      |		ЛЕВОЕ СОЕДИНЕНИЕ втНашРезерв КАК втНашРезерв
	                                      |		ПО втТоварыСвернутая.Склад = втНашРезерв.Склад
	                                      |			И втТоварыСвернутая.Номенклатура = втНашРезерв.Номенклатура
	                                      |			И втТоварыСвернутая.Качество = втНашРезерв.Качество
	                                      |ГДЕ
	                                      |	втТоварыСвернутая.Количество - ЕСТЬNULL(ТоварыНаСкладахОстатки.Количество, 0) + ЕСТЬNULL(втРезерв.КоличествоОстаток, 0) - ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) > 0";
					 
	//МассивОтказов = Новый Массив;
	//МассивОтказов.Добавить(Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком);
	//МассивОтказов.Добавить(Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке);
	//Запрос.УстановитьПараметр("МассивОтказов", МассивОтказов);
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("КонПериода", ?(ОперативноеПроведение, Неопределено, вхСсылкаНаДокумент.МоментВремени()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Сообщение = "";
	Успешно = Истина;
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			вхОтказ = Истина;
			Успешно = Ложь;
			Сообщение = Сообщение + "[КонтрольОстатков]: на складе " + Выборка.Склад + " не хватает остатка номенклатуры " + 
			УправлениеЗапасами.ПредставлениеНоменклатуры(Выборка.Номенклатура,,ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Номенклатура, "Артикул")) 
			+ " с качеством " + Выборка.Качество + " в количестве " + Выборка.Количество + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	НеВыводитьОшибкиВОкноСообщений = ?(вхПараметры.ДанныеОбъекта.Свойство("НеВыводитьОшибкиВОкноСообщений"), Истина, Ложь);
	
	Если Не Успешно Тогда 
		Если НеВыводитьОшибкиВОкноСообщений Тогда 
			ВызватьИсключение Сообщение;
		Иначе
			#Если Клиент Тогда 
				Сообщить(Сообщение);
			#Иначе
				ВызватьИсключение Сообщение;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Используется для складов ответ хранения
Процедура КонтрольОстатковПослеЗаписи(вхСсылкаНаДокумент, вхОтказ, вхПараметры) Экспорт
	
	Если НЕ НеобходимКонтрольОстатков(вхСсылкаНаДокумент, вхПараметры) Тогда
		Возврат;
	КонецЕсли;
	
    ЗаблокироватьДанныеПередКонтролемОстатков(вхСсылкаНаДокумент);
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "СтатусДокумента, Дата, Склад");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Движения.Номенклатура,
	|	Движения.Склад,
	|	Движения.Качество,
	|	Движения.Количество
	|ПОМЕСТИТЬ втДвиженияТоварыНаСкладах
	|ИЗ
	|	&ДвиженияТоварыНаСкладах КАК Движения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияРезервыТоваров.Номенклатура,
	|	ДвиженияРезервыТоваров.Склад,
	|	ДвиженияРезервыТоваров.Качество,
	|	ДвиженияРезервыТоваров.СтрокаЗаявки,
	|	ДвиженияРезервыТоваров.Количество
	|ПОМЕСТИТЬ втДвиженияРезервыТоваров
	|ИЗ
	|	&ДвиженияРезервыТоваров КАК ДвиженияРезервыТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Качество,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ втТоварыНаСкладахОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ГраницаОстатков,
	|			(Номенклатура, Склад, Качество) В
	|				(ВЫБРАТЬ
	|					втДвиженияТоварыНаСкладах.Номенклатура,
	|					втДвиженияТоварыНаСкладах.Склад,
	|					втДвиженияТоварыНаСкладах.Качество
	|				ИЗ
	|					втДвиженияТоварыНаСкладах)) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыТоваровОстатки.Склад КАК Склад,
	|	РезервыТоваровОстатки.Номенклатура КАК Номенклатура,
	|	РезервыТоваровОстатки.Качество КАК Качество,
	|	РезервыТоваровОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ втНашРезерв
	|ИЗ
	|	РегистрНакопления.РезервыТоваров.Остатки(
	|			&ГраницаОстатков,
	|			(Склад, Номенклатура, Качество, СтрокаЗаявки) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					втДвиженияРезервыТоваров.Склад,
	|					втДвиженияРезервыТоваров.Номенклатура,
	|					втДвиженияРезервыТоваров.Качество,
	|					втДвиженияРезервыТоваров.СтрокаЗаявки
	|				ИЗ
	|					втДвиженияРезервыТоваров КАК втДвиженияРезервыТоваров)) КАК РезервыТоваровОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.РезервыТоваров.Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад,
	|	Качество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыТоваровОстатки.Склад КАК Склад,
	|	РезервыТоваровОстатки.Номенклатура КАК Номенклатура,
	|	РезервыТоваровОстатки.Качество КАК Качество,
	|	РезервыТоваровОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ втРезерв
	|ИЗ
	|	РегистрНакопления.РезервыТоваров.Остатки(
	|			&ГраницаОстатков,
	|			(Склад, Номенклатура, Качество) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					втДвиженияРезервыТоваров.Склад,
	|					втДвиженияРезервыТоваров.Номенклатура,
	|					втДвиженияРезервыТоваров.Качество
	|				ИЗ
	|					втДвиженияРезервыТоваров КАК втДвиженияРезервыТоваров)) КАК РезервыТоваровОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад,
	|	Качество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыНаСкладахОстатки.Склад,
	|	втТоварыНаСкладахОстатки.Номенклатура,
	|	втТоварыНаСкладахОстатки.Качество,
	|	втТоварыНаСкладахОстатки.КоличествоОстаток,
	|	ЕСТЬNULL(втРезерв.КоличествоОстаток, 0)  КАК втРезерв,
	|	ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) КАК втНашРезерв,	
	|	втТоварыНаСкладахОстатки.КоличествоОстаток - ЕСТЬNULL(втРезерв.КоличествоОстаток, 0) + ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) КАК Количество
	|ИЗ
	|	втТоварыНаСкладахОстатки КАК втТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРезерв КАК втРезерв
	|		ПО втТоварыНаСкладахОстатки.Склад = втРезерв.Склад
	|			И втТоварыНаСкладахОстатки.Номенклатура = втРезерв.Номенклатура
	|			И втТоварыНаСкладахОстатки.Качество = втРезерв.Качество
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНашРезерв КАК втНашРезерв
	|		ПО втТоварыНаСкладахОстатки.Склад = втНашРезерв.Склад
	|			И втТоварыНаСкладахОстатки.Номенклатура = втНашРезерв.Номенклатура
	|			И втТоварыНаСкладахОстатки.Качество = втНашРезерв.Качество
	|ГДЕ
	|	втТоварыНаСкладахОстатки.КоличествоОстаток - ЕСТЬNULL(втРезерв.КоличествоОстаток, 0) + ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) < 0
	|";
	
	//Таблицы движений могли быть не заполнены, в этом случае считываем их из базы
	ПрочитатьТаблицыДвижений(вхПараметры, вхСсылкаНаДокумент);
	
	Запрос.УстановитьПараметр("ДвиженияТоварыНаСкладах", 	вхПараметры.ТаблицыДвижений.ТоварыНаСкладах);
	Запрос.УстановитьПараметр("ДвиженияРезервыТоваров",  	вхПараметры.ТаблицыДвижений.РезервыТоваров);
	Запрос.УстановитьПараметр("ГраницаОстатков", 			Новый Граница(вхСсылкаНаДокумент.МоментВремени(), ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Сообщение = "";
	Успешно = Истина;
	Пока Выборка.Следующий() Цикл 
		вхОтказ = Истина;
		Успешно = Ложь;
		Сообщение = Сообщение + "[КонтрольОстатков]: на складе " + Выборка.Склад + " не хватает остатка номенклатуры " +
		УправлениеЗапасами.ПредставлениеНоменклатуры(Выборка.Номенклатура,,ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Номенклатура, "Артикул")) 
		+ " с качеством " + Выборка.Качество + " в количестве " + (-Выборка.Количество) + Символы.ПС;
	КонецЦикла;
	
	НеВыводитьОшибкиВОкноСообщений = ?(вхПараметры.ДанныеОбъекта.Свойство("НеВыводитьОшибкиВОкноСообщений"), Истина, Ложь);
	
	Если Не Успешно Тогда 
		Если НеВыводитьОшибкиВОкноСообщений Тогда 
			ВызватьИсключение Сообщение;
		Иначе
			#Если Клиент Тогда 
				Сообщить(Сообщение);
			#Иначе
				ВызватьИсключение Сообщение;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрочитатьТаблицыДвижений(вхПараметры, вхСсылкаНаДокумент) Экспорт
	
	Для Каждого КлючЗначение Из вхПараметры.ТаблицыДвижений Цикл
		Если КлючЗначение.Значение = Неопределено Тогда
			НЗ = РегистрыНакопления[КлючЗначение.Ключ].СоздатьНаборЗаписей();
			НЗ.Отбор.Регистратор.Установить(вхСсылкаНаДокумент);
			НЗ.Прочитать();
			КлючЗначение.Значение = НЗ.Выгрузить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаблокироватьДанныеПередКонтролемОстатков(вхСсылкаНаДокумент)
	
	ИспользованиеСобственногоСписанияПартийДляРТУ = ПроведениеДокументовКлиентСервер.ИспользованиеСобственногоСписанияПартийДляРТУ(вхСсылкаНаДокумент);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.РезервыТоваров");
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
	|	РеализацияТоваровУслугТовары.Качество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Ссылка.Склад.ФизическийСклад,
	|	РеализацияТоваровУслугТовары.Качество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|	И РеализацияТоваровУслугТовары.Ссылка.Склад.СкладVMI
	|	И &ИспользованиеСобственногоСписанияПартийДляРТУ";
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ИспользованиеСобственногоСписанияПартийДляРТУ", ИспользованиеСобственногоСписанияПартийДляРТУ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ТоварыНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
	
	БлокировкаДанных.Заблокировать();

КонецПроцедуры

Функция НеобходимКонтрольОстатков(вхСсылкаНаДокумент, вхПараметры) Экспорт
	
	НеобходимКонтрольОстатков = Истина;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		НеобходимКонтрольОстатков = Ложь;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "СтатусДокумента,ЭтоМФП,Дата, Склад, ВидОперации");
	
	СтатусДокумента = Реквизиты.СтатусДокумента;
	ДатаДокумента = Реквизиты.Дата;
	ЭтоМФП = Реквизиты.ЭтоМФП;
	
	Если ЭтоМФП Тогда
		НеобходимКонтрольОстатков = Ложь;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда 
		НеобходимКонтрольОстатков = Ложь;
	КонецЕсли;

	Если Не Документы.РеализацияТоваровУслуг.ЭтоСтатусТовароДвижения(СтатусДокумента) Тогда
		НеобходимКонтрольОстатков = Ложь;
	КонецЕсли;
		
	Если ДатаДокумента < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		НеобходимКонтрольОстатков = Ложь;
	КонецЕсли;
	
	ОтключитьКонтрольОстатков = Неопределено;
	Если ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ОтключитьКонтрольОстатков", ОтключитьКонтрольОстатков) Тогда
		НеобходимКонтрольОстатков = Ложь;
	КонецЕсли;
	
	Возврат НеобходимКонтрольОстатков;
	
КонецФункции

#КонецОбласти

Процедура ПроверитьКорректностьОтказов(вхСсылкаНаДокумент, вхОтказ) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат;
	КонецЕсли;

	СтатусДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента");
	
	Если Не (СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугУпакован 
		Или СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче
		Или СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.НомерСтроки,
	               |	РеализацияТоваровУслугТовары.КлючСвязи КАК КлючСвязи,
	               |	РеализацияТоваровУслугТовары.Количество,
	               |	РеализацияТоваровУслугТовары.КоличествоПлан
	               |ПОМЕСТИТЬ втТовары
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КлючСвязи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
	               |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество
	               |ПОМЕСТИТЬ втОтказы
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
	               |ГДЕ
	               |	РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КлючСвязи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТовары.НомерСтроки
	               |ИЗ
	               |	втТовары КАК втТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
	               |		ПО втТовары.КлючСвязи = втОтказы.КлючСвязи
	               |ГДЕ
	               |	втТовары.КоличествоПлан - втТовары.Количество - ЕСТЬNULL(втОтказы.Количество, 0) <> 0";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			вхОтказ = Истина;
			Сообщить("В строке # " + Выборка.НомерСтроки + " фактическое отгруженное количество + сумма отказов не равна плановому количеству");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСкладыДляПеремещения(ЭтотОбъект, РежимЗаписи) Экспорт
		
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		СкладVMI = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Склад, "СкладVMI");
		Если Не СкладVMI Тогда 
			Если Не ЭтотОбъект.ЭтоНовый() Тогда 
				СтарыйСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Ссылка, "СтатусДокумента");
			Иначе
				Возврат;
			КонецЕсли;
			
			Если СтарыйСтатус = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка Тогда 
				СкладПеремещения = ОбщегоНазначения.СкладНедостач(ЭтотОбъект.Склад);
			ИначеЕсли СтарыйСтатус = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен Тогда 
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	МаршрутыДоставки.Склад КАК Склад
				               |ИЗ
				               |	Справочник.МаршрутыДоставки КАК МаршрутыДоставки
				               |ГДЕ
				               |	МаршрутыДоставки.Ссылка = &Ссылка";
				Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.МаршрутДоставки); 			  
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.Склад) Тогда 
						ВызватьИсключение "Не заполнен склад у маршрута доставки " + ЭтотОбъект.МаршрутДоставки;
					КонецЕсли;
					
					СкладПеремещения = ОбщегоНазначения.СкладНедостач(Выборка.Склад);
				КонецЦикла;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			СкладПеремещения = ОбщегоНазначения.СкладНедостачVMI(ЭтотОбъект.Склад);
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ЭтотОбъект.ПричиныОтказов Цикл 
			Если (СтрокаТЧ.ПричинаОтмены = Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке Или 
				СтрокаТЧ.ПричинаОтмены = Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком) И Не ЗначениеЗаполнено(СтрокаТЧ.СкладПеремещения) Тогда 
				СтрокаТЧ.СкладПеремещения = СкладПеремещения;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицыДляРасчетаСписанияПоПартиям(вхСсылкаНаДокумент, вхФильтр = Неопределено) Экспорт
	
	РеализацииВыгружаютсяИз77 = глЗначениеПеременной("РеализацииВыгружаютсяИз77");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ЭтоМФП,СозданВ77,СтатусДокумента, ВидОперации");
	
	ПеремещатьНаФизическийСкладВсеОтказыVMI = ПроведениеДокументовКлиентСервер.ПеремещатьНаФизическийСкладВсеОтказыVMI(Реквизиты.Дата);
	
	// МФП Не Проводим
	ЗапрещеноПроведение = Реквизиты.ЭтоМФП ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП;
	
	Если Не РеализацииВыгружаютсяИз77 Тогда  
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
		               |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество,
		               |	РеализацияТоваровУслугПричиныОтказов.СкладПеремещения,
		               |	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены
		               |ПОМЕСТИТЬ втПеремещение
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
		               |ГДЕ
		               |	РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
		               |	И РеализацияТоваровУслугПричиныОтказов.Ссылка.СтатусДокумента = &СтатусДокументаОтгружен
		               |	И РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены В(&МассивПричинОтмены)
					   |    И НЕ РеализацияТоваровУслугПричиныОтказов.Ссылка.ЭтоМФП
					   |
		               |СГРУППИРОВАТЬ ПО
		               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи,
		               |	РеализацияТоваровУслугПричиныОтказов.СкладПеремещения,
		               |	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	КлючСвязи
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
		               |	РеализацияТоваровУслугТовары.Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаПрихода КАК СтрокаПрихода,
		               |	РеализацияТоваровУслугТовары.СтрокаПрихода = &ПустаяСтрокаПрихода КАК ПустаяСтрокаПрихода,
		               |	ВЫБОР
		               |		КОГДА РеализацияТоваровУслугТовары.Ссылка.Склад.СкладVMI
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		               |	КОНЕЦ КАК СтатусПартии,
		               |	РеализацияТоваровУслугТовары.Количество КАК Количество,
		               |	""Списание"" КАК ВидСписания,
		               |	NULL КАК СкладПеремещения,
		               |	NULL КАК КачествоПеремещения
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |	И РеализацияТоваровУслугТовары.Ссылка.СтатусДокумента = &СтатусДокументаОтгружен
		               |	И РеализацияТоваровУслугТовары.Количество > 0  %УсловиеПоНоменклатуре%
					   |    И НЕ РеализацияТоваровУслугТовары.Ссылка.ЭтоМФП
					   |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Номенклатура,
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад,
		               |	РеализацияТоваровУслугТовары.Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаПрихода,
		               |	РеализацияТоваровУслугТовары.СтрокаПрихода = &ПустаяСтрокаПрихода,
		               |	ВЫБОР
		               |		КОГДА РеализацияТоваровУслугТовары.Ссылка.Склад.СкладVMI
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		               |	КОНЕЦ,
		               |	втПеремещение.Количество,
		               |	""Перемещение"",
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад,
		               |	ВЫБОР
		               |		КОГДА втПеремещение.ПричинаОтмены = Значение(Справочник.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком)
		               |			ТОГДА &КачествоНедостача
		               |		КОГДА втПеремещение.ПричинаОтмены = Значение(Справочник.СостоянияСтрокДокументов.НеНайденоПриСборке)
		               |			ТОГДА &КачествоБрак
		               |	КОНЕЦ
		               |ИЗ
		               |	втПеремещение КАК втПеремещение
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |		ПО (РеализацияТоваровУслугТовары.КлючСвязи = втПеремещение.КлючСвязи)
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка %УсловиеПоНоменклатуре%
					   |    И НЕ РеализацияТоваровУслугТовары.Ссылка.ЭтоМФП";
		МассивПричинОтмены  = Новый Массив;
		МассивПричинОтмены.Добавить(Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком);
		МассивПричинОтмены.Добавить(Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке);
		Запрос.УстановитьПараметр("МассивПричинОтмены", МассивПричинОтмены);
		Запрос.УстановитьПараметр("ПустаяСтрокаПрихода", Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка());
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Запрос.УстановитьПараметр("СтатусДокументаОтгружен", Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен);
		Запрос.УстановитьПараметр("КачествоНедостача", Справочники.Качество.Недостача);
		Запрос.УстановитьПараметр("КачествоБрак", Справочники.Качество.Недостача);
		
		Запрос.УстановитьПараметр("ЗапрещеноПроведение", ЗапрещеноПроведение);
		
		Если ТипЗнч(вхФильтр) = Тип("Структура") и вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, " %УсловиеПоНоменклатуре%", " И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, " %УсловиеПоНоменклатуре%", "");
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
		               |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество,
					   |	ВЫБОР
					   |		КОГДА Ссылка.Склад.СкладVMI И &ПеремещатьНаФизическийСкладВсеОтказыVMI
					   |			ТОГДА Ссылка.Склад.ФизическийСклад
					   |		ИНАЧЕ РеализацияТоваровУслугПричиныОтказов.СкладПеремещения
					   |	КОНЕЦ  КАК СкладПеремещения
		               |ПОМЕСТИТЬ втПеремещение
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
		               |ГДЕ
		               |	НЕ &ЗапрещеноПроведение
		               |	И РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
		               |	И (РеализацияТоваровУслугПричиныОтказов.Ссылка.СтатусДокумента = &СтатусДокументаОтгружен Или РеализацияТоваровУслугПричиныОтказов.Ссылка.СтатусДокумента = &СтатусДокументаУпакован Или РеализацияТоваровУслугПричиныОтказов.Ссылка.СтатусДокумента = &СтатусДокументаГотовКВыдаче)
					   |	И ВЫБОР
					   |		КОГДА Ссылка.Склад.СкладVMI И &ПеремещатьНаФизическийСкладВсеОтказыVMI
					   |			ТОГДА Истина
					   |		ИНАЧЕ (РеализацияТоваровУслугПричиныОтказов.СкладПеремещения <> Значение(Справочник.Склады.ПустаяСсылка)
			           |    			И РеализацияТоваровУслугПричиныОтказов.СкладПеремещения <> РеализацияТоваровУслугПричиныОтказов.Ссылка.Склад)
					   |	КОНЕЦ 
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи,
		               |	ВЫБОР
					   |		КОГДА Ссылка.Склад.СкладVMI И &ПеремещатьНаФизическийСкладВсеОтказыVMI
					   |			ТОГДА Ссылка.Склад.ФизическийСклад
					   |		ИНАЧЕ РеализацияТоваровУслугПричиныОтказов.СкладПеремещения
					   |	КОНЕЦ
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	КлючСвязи
		               |;
					   |ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
		               |	РеализацияТоваровУслугТовары.Ссылка.Организация КАК Организация,
		               |	РеализацияТоваровУслугТовары.Ссылка.СтатусДокумента КАК СтатусДокумента,
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
		               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		               |	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,					   
		               |	РеализацияТоваровУслугТовары.Номенклатура.Изготовитель КАК Изготовитель,					   
		               |	РеализацияТоваровУслугТовары.СтрокаПрихода КАК СтрокаПрихода,
		               |	РеализацияТоваровУслугТовары.ОрганизацияПриVMI КАК ОрганизацияПриVMI,
		               |	РеализацияТоваровУслугТовары.Качество КАК Качество,
		               |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		               |	РеализацияТоваровУслугТовары.КлючСвязи КАК КлючСвязи,
		               |	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК СтрокаЗаявки,
		               |	РеализацияТоваровУслугТовары.СтрокаЗаявки.Поставщик КАК Поставщик,
		               |	РеализацияТоваровУслугТовары.КоличествоПлан КАК КоличествоПлан,
		               |	РеализацияТоваровУслугТовары.Количество КАК Количество
		               |ПОМЕСТИТЬ втТовары
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |
					   |ГДЕ 
					   |	НЕ &ЗапрещеноПроведение
		               |	И РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |	И (РеализацияТоваровУслугТовары.Ссылка.СтатусДокумента = &СтатусДокументаОтгружен
		               |			ИЛИ РеализацияТоваровУслугТовары.Ссылка.СтатусДокумента = &СтатусДокументаСборка Или РеализацияТоваровУслугТовары.Ссылка.СтатусДокумента = &СтатусДокументаУпакован Или РеализацияТоваровУслугТовары.Ссылка.СтатусДокумента = &СтатусДокументаГотовКВыдаче)
					   |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга %УсловиеПоНоменклатуре%
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |ВЫБРАТЬ
					   |	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.Номенклатура КАК Номенклатура,
					   |	ЦеныНоменклатурыКонтрагентовСрезПоследних.ПрайсПоставщика.Владелец КАК Поставщик,
					   |	МАКСИМУМ(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена) КАК Цена
					   |ПОМЕСТИТЬ ЦеныКонтрагентов
					   |ИЗ
					   |	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
					   |			&Дата,
					   |			(ВЫРАЗИТЬ(ПрайсПоставщика КАК Справочник.ПрайсыПоставщиковVMI).Владелец, Номенклатура.Номенклатура) В
					   |					(ВЫБРАТЬ
					   |						втТовары.Поставщик,
					   |						втТовары.Номенклатура
					   |					ИЗ
					   |						втТовары)
					   |	) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
					   |
					   |СГРУППИРОВАТЬ ПО
					   |	ЦеныНоменклатурыКонтрагентовСрезПоследних.ПрайсПоставщика.Владелец,
					   |	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.Номенклатура
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |ВЫБРАТЬ
					   |	втТовары.Номенклатура КАК Номенклатура,
					   |	втТовары.Склад КАК Склад,
		               |	втТовары.Качество,
		               |	втТовары.СтрокаПрихода КАК СтрокаПрихода,
		               |	втТовары.СтрокаПрихода = &ПустаяСтрокаПрихода КАК ПустаяСтрокаПрихода,
		               |	ВЫБОР
		               |		КОГДА втТовары.Склад.СкладVMI
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		               |	КОНЕЦ КАК СтатусПартии,
		               |	ВЫБОР
		               |		КОГДА втТовары.СтатусДокумента = &СтатусДокументаОтгружен  Или втТовары.СтатусДокумента = &СтатусДокументаУпакован Или втТовары.СтатусДокумента = &СтатусДокументаГотовКВыдаче
					   |			ТОГДА втТовары.Количество
		               |		ИНАЧЕ втТовары.КоличествоПлан
		               |	КОНЕЦ КАК Количество,
		               |	""Списание"" КАК ВидСписания,
		               |	NULL КАК СкладПеремещения,
		               |	NULL КАК КачествоПеремещения,
		               |	NULL КАК СтатусПартииПеремещения,
		               |	ВЫБОР 
					   | 		  КОГДА НЕ втТовары.СтатусДокумента = &СтатусДокументаОтгружен
					   |				ТОГДА Ложь
					   |		  ИНАЧЕ втТовары.Склад.СкладVMI 
					   |	КОНЕЦ КАК ОприходоватьПоVMI,
					   |	втТовары.Склад.ПриРазмещенииИгнорироватьСтатусПартии КАК ИгнорироватьСтатусПартии,
					   |	ВЫБОР
		               |		КОГДА втТовары.ОрганизацияПриVMI = &ПустаяОрганизация
		               |			ТОГДА втТовары.Организация
		               |		ИНАЧЕ втТовары.ОрганизацияПриVMI
		               |	КОНЕЦ КАК Организация,
		               |	втТовары.Склад.СкладVMI КАК УчитыватьПоставщика,
		               |	ВЫБОР
		               |		КОГДА втТовары.Склад.СкладVMI
		               |			ТОГДА втТовары.Поставщик
		               |		ИНАЧЕ NULL
		               |	КОНЕЦ КАК Поставщик,
		               |	ВЫБОР
		               |		КОГДА втТовары.Склад.СкладVMI
		               |			ТОГДА &ВидДоговора1
		               |		ИНАЧЕ &ВидДоговора2
		               |	КОНЕЦ КАК ВидДоговора,
		               |	втТовары.НомерСтроки КАК НомерСтрокиВДокументе,
					   |    ЛОЖЬ как ВнутреннееПеремещение,
					   |    втТовары.Склад.СкладVMI КАК СписыватьВПределахОстатка,
					   |    втТовары.Склад.СкладVMI КАК ПоФиксЦене,
					   |    isnull(ЦеныКонтрагентов.Цена, 0) КАК ФиксЦена
		               |ИЗ
		               |	втТовары КАК втТовары
		               |    ЛЕВОЕ СОЕДИНЕНИЕ ЦеныКонтрагентов КАК ЦеныКонтрагентов
					   |           ПО втТовары.Номенклатура = ЦеныКонтрагентов.Номенклатура
					   |              	И втТовары.Поставщик = ЦеныКонтрагентов.Поставщик
					   |ГДЕ 
					   |	ВЫБОР
					   |		КОГДА втТовары.СтатусДокумента = &СтатусДокументаОтгружен
					   |			ТОГДА втТовары.Количество
					   |		ИНАЧЕ втТовары.КоличествоПлан
					   |	КОНЕЦ > 0
					   |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.Номенклатура,
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад,
		               |	РеализацияТоваровУслугТовары.Качество,
		               |	РеализацияТоваровУслугТовары.СтрокаПрихода,
		               |	РеализацияТоваровУслугТовары.СтрокаПрихода = &ПустаяСтрокаПрихода,
		               |	ВЫБОР
		               |		КОГДА РеализацияТоваровУслугТовары.Ссылка.Склад.СкладVMI
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		               |	КОНЕЦ,
		               |	втПеремещение.Количество,
		               |	""Перемещение"",
		               |	втПеремещение.СкладПеремещения,
		               |	РеализацияТоваровУслугТовары.Качество,
		               |	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный),
		               |	ВЫБОР 
					   | 		  КОГДА НЕ РеализацияТоваровУслугТовары.Ссылка.СтатусДокумента = &СтатусДокументаОтгружен
					   |				ТОГДА Ложь
					   |		  ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Склад.СкладVMI 
					   |	КОНЕЦ КАК ОприходоватьПоVMI,
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад.ПриРазмещенииИгнорироватьСтатусПартии,
		               |	ВЫБОР
		               |		КОГДА РеализацияТоваровУслугТовары.ОрганизацияПриVMI = &ПустаяОрганизация
		               |			ТОГДА РеализацияТоваровУслугТовары.Ссылка.Организация
		               |		ИНАЧЕ РеализацияТоваровУслугТовары.ОрганизацияПриVMI
		               |	КОНЕЦ,
		               |	РеализацияТоваровУслугТовары.Ссылка.Склад.СкладVMI,
		               |	ВЫБОР
		               |		КОГДА РеализацияТоваровУслугТовары.Ссылка.Склад.СкладVMI
		               |			ТОГДА РеализацияТоваровУслугТовары.СтрокаЗаявки.Поставщик
		               |		ИНАЧЕ NULL
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА РеализацияТоваровУслугТовары.Ссылка.Склад.СкладVMI
		               |			ТОГДА &ВидДоговора1
		               |		ИНАЧЕ &ВидДоговора2
		               |	КОНЕЦ,
					   | 	РеализацияТоваровУслугТовары.НомерСтроки,
					   |    ИСТИНА,
					   |	ИСТИНА,
					   |    РеализацияТоваровУслугТовары.Ссылка.Склад.СкладVMI КАК ПоФиксЦене,
					   |    isnull(ЦеныКонтрагентов.Цена, 0) КАК ФиксЦена
					   |ИЗ
					   |	втПеремещение КАК втПеремещение
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
					   |		ПО (РеализацияТоваровУслугТовары.КлючСвязи = втПеремещение.КлючСвязи)
					   |    		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныКонтрагентов КАК ЦеныКонтрагентов
					   |          		 ПО РеализацияТоваровУслугТовары.Номенклатура = ЦеныКонтрагентов.Номенклатура
					   |             		 И РеализацияТоваровУслугТовары.СтрокаЗаявки.Поставщик = ЦеныКонтрагентов.Поставщик
					   |ГДЕ
		               |	НЕ &ЗапрещеноПроведение
		               |	И РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		               |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга %УсловиеПоНоменклатуре%";
				   
		//МассивОтказов = Новый Массив;
		//МассивОтказов.Добавить(Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком);
		//МассивОтказов.Добавить(Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке);
		
		Запрос.УстановитьПараметр("ЗапрещеноПроведение", ЗапрещеноПроведение);
		Запрос.УстановитьПараметр("Дата", 			Реквизиты.Дата);
		//Запрос.УстановитьПараметр("МассивОтказов", МассивОтказов);
		Запрос.УстановитьПараметр("ПустаяСтрокаПрихода", Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Запрос.УстановитьПараметр("СтатусДокументаОтгружен", Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен);
		Запрос.УстановитьПараметр("СтатусДокументаСборка", Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка);
		Запрос.УстановитьПараметр("СтатусДокументаУпакован", Справочники.СтатусыДокументов.РеализацияТоваровУслугУпакован);
		Запрос.УстановитьПараметр("СтатусДокументаГотовКВыдаче", Справочники.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче);
		Запрос.УстановитьПараметр("ВидДоговора1", Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение);
		Запрос.УстановитьПараметр("ВидДоговора2", Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
		Если ТипЗнч(вхФильтр) = Тип("Структура") и вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, " %УсловиеПоНоменклатуре%", " И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, " %УсловиеПоНоменклатуре%", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПеремещатьНаФизическийСкладВсеОтказыVMI", ПеремещатьНаФизическийСкладВсеОтказыVMI);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьЗаписиПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, Проведение) Экспорт 
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = вхСсылкаНаДокумент.Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СуммаДокумента,ДоговорКонтрагентаВзаиморасчетов");
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) тогда
		Если Проведение 
			И Реквизиты.Дата >= глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Период,
			               |	РеализацияТоваровУслугТовары.Ссылка КАК Регистратор,
			               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			               |ГДЕ
			               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
			               |	И НЕ РеализацияТоваровУслугТовары.Ссылка.ЭтоМФП
			               |	И НЕ РеализацияТоваровУслугТовары.Номенклатура.Услуга";
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ЗаполнитьЗначенияСвойств(лРезультат.Добавить(), Выборка); 
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		Если Проведение И (Реквизиты.СуммаДокумента <> 0) И Реквизиты.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты тогда
			лСтрокаРезультат = лРезультат.Добавить();
			лСтрокаРезультат.ДоговорКонтрагента = Реквизиты.ДоговорКонтрагентаВзаиморасчетов;
			лСтрокаРезультат.Период = Реквизиты.Дата;
			лСтрокаРезультат.Регистратор = вхСсылкаНаДокумент;
		КонецЕсли;
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
	Возврат Результат;

КонецФункции

//Выгрузка при обмене
Функция ВыгрузитьЭлементы(вхТаблицаСсылокНаОбъекты, вхПланОбмена) Экспорт
	
	Результат = Новый Массив;
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[ВыгрузитьЭлементы]: неправильный параметр номер 2.";
	КонецЕсли;
	
	Если лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog 
		Или лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog_РТУ Тогда 
		
		лМенеджерПланаОбмена = ПланыОбмена[лМетаданныеПланаОбмена.Имя];

		лЗапрос = Новый Запрос;
		лЗапрос.УстановитьПараметр("ТаблицаСсылок", вхТаблицаСсылокНаОбъекты);
		лЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		лЗапрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	&ТаблицаСсылок КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СлужебноеЗаданиеПокупатели.Реализация КАК Реализация,
		|	МАКСИМУМ(СлужебноеЗаданиеПокупатели.Ссылка.Дата) КАК Дата
		|ПОМЕСТИТЬ вт1
		|ИЗ
		|	Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
		|ГДЕ
		|	СлужебноеЗаданиеПокупатели.Реализация В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|
		|СГРУППИРОВАТЬ ПО
		|	СлужебноеЗаданиеПокупатели.Реализация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Реализация,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваров.Регистратор,
		|	ПартииТоваров.НомерСтрокиВДокументе,
		|	МАКСИМУМ(ПартииТоваров.СтрокаПрихода) КАК СтрокаПрихода
		|ПОМЕСТИТЬ втПартии
		|ИЗ
		|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
		|ГДЕ
		|	ПартииТоваров.Регистратор В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И ПартииТоваров.СтрокаПрихода.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
		|	И ПартииТоваров.СтрокаПрихода.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваров.Регистратор,
		|	ПартииТоваров.НомерСтрокиВДокументе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПартии.Регистратор,
		|	втПартии.НомерСтрокиВДокументе,
		|	втПартии.СтрокаПрихода.НомерГТД.Код КАК ГТД,
		|	втПартии.СтрокаПрихода.СтранаПроисхождения.Код КАК СтранаКод,
		|	втПартии.СтрокаПрихода.СтранаПроисхождения.Наименование КАК СтранаНаименование
		|ПОМЕСТИТЬ втПартии2
		|ИЗ
		|	втПартии КАК втПартии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугПричиныОтказов.Ссылка,
		|	РеализацияТоваровУслугПричиныОтказов.КлючСвязи,
		|	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество
		|ПОМЕСТИТЬ втОтказы
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
		|ГДЕ
		|	РеализацияТоваровУслугПричиныОтказов.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены.ИспользуетсяВРеализацияхДоВыгрузкиВТопЛог
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугПричиныОтказов.Ссылка,
		|	РеализацияТоваровУслугПричиныОтказов.КлючСвязи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Ссылка,
		|	РеализацияТоваровУслугУслуги.Номенклатура.Ссылка КАК Номенклатура,
		|	РеализацияТоваровУслугУслуги.Номенклатура.Наименование,
		|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул,
		|	РеализацияТоваровУслугУслуги.Количество,
		|	РеализацияТоваровУслугУслуги.Цена
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт1.Реализация КАК Реализация,
		|	СлужебноеЗаданиеПокупатели.Ссылка
		|ИЗ
		|	вт1 КАК вт1
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
		|		ПО вт1.Реализация = СлужебноеЗаданиеПокупатели.Реализация
		|			И вт1.Дата = СлужебноеЗаданиеПокупатели.Ссылка.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Номер КАК Номер,
		|	РеализацияТоваровУслуг.Дата КАК Дата,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.Склад.ФизическийСклад КАК Склад,
		|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	РеализацияТоваровУслуг.Контрагент.ОсновнаяТорговаяТочка КАК Контрагент,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.ТипДоставки.Наименование, """") КАК ТипДоставки,
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.Наименование, """") КАК НоменклатураНаименование,
		|	ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.Артикул, """") КАК НоменклатураАртикул,
		|	ЕСТЬNULL(РеализацияТоваровУслугТовары.СтрокаЗаявки.IDSite, """") КАК SSID,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.СтрокаЗаявки.ПрайсПоставщика.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КроссСток,
		|	РеализацияТоваровУслугТовары.КоличествоПлан - ЕСТЬNULL(втОтказы.Количество, 0) КАК Количество,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.ЦенаСоСкидкой = 0
		|			ТОГДА РеализацияТоваровУслугТовары.Цена - РеализацияТоваровУслугТовары.Цена * РеализацияТоваровУслугТовары.ПроцентСкидкиНаценки / 100
		|		ИНАЧЕ РеализацияТоваровУслугТовары.ЦенаСоСкидкой
		|	КОНЕЦ КАК Цена,
		|	РеализацияТоваровУслуг.Контрагент.ОсновнаяТорговаяТочка КАК Клиент,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.Контрагент.ОсновнаяТорговаяТочка.Наименование, """") КАК КлиентНаименование,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.Контрагент.ЮрФизЛицо.Порядок, 0) = 0 КАК ЭтоЮридическоеЛицо,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.МаршрутДоставки.Код, """") КАК МаршрутДоставкиКод,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.МаршрутДоставки.Наименование, """") КАК МаршрутДоставкиНаименование,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ДатаДоставки = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|		ИНАЧЕ РеализацияТоваровУслуг.ДатаДоставки
		|	КОНЕЦ КАК ДатаОтгрузки,
		|	ЕСТЬNULL(РеализацияТоваровУслугТовары.СтрокаЗаявки.Заявка.ТорговаяТочка.Город, ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка)) КАК Город,
		|	ЕСТЬNULL(РеализацияТоваровУслугТовары.СтрокаЗаявки.Заявка.ТорговаяТочка.Город.Наименование, """") КАК ГородНаименование,
		|	ПРЕДСТАВЛЕНИЕ(ТИПЗНАЧЕНИЯ(РеализацияТоваровУслуг.Ссылка)) КАК ВидДокумента,
		|	РеализацияТоваровУслуг.Контрагент.ПокупательИзДрБазы КАК ПокупательИзДрБазы,
		|	ЕСТЬNULL(втПартии2.ГТД, """") КАК ГТД,
		|	ЕСТЬNULL(втПартии2.СтранаКод, """") КАК СтранаКод,
		|	ЕСТЬNULL(втПартии2.СтранаНаименование, """") КАК СтранаНаименование,
		|	ЕСТЬNULL(РеализацияТоваровУслугТовары.СтрокаЗаявки.Заявка.НомерРозничнойЗаявки, """") КАК НомерРозничнойЗаявки,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ТипДоставки = ЗНАЧЕНИЕ(Справочник.ТипыДоставки.Самовывоз)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетВыгрузки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ втПартии2 КАК втПартии2
		|			ПО РеализацияТоваровУслугТовары.Ссылка = втПартии2.Регистратор
		|				И РеализацияТоваровУслугТовары.НомерСтроки = втПартии2.НомерСтрокиВДокументе
		|			ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
		|			ПО РеализацияТоваровУслугТовары.Ссылка = втОтказы.Ссылка
		|				И РеализацияТоваровУслугТовары.КлючСвязи = втОтказы.КлючСвязи
		|		ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И РеализацияТоваровУслугТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И РеализацияТоваровУслугТовары.КоличествоПлан - ЕСТЬNULL(втОтказы.Количество, 0) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетВыгрузки
		|ИТОГИ
		|	МАКСИМУМ(НомерРозничнойЗаявки)
		|ПО
		|	Ссылка";
		
		лРезультатыЗапроса = лЗапрос.ВыполнитьПакет();
		
		Если НЕ лРезультатыЗапроса[лРезультатыЗапроса.ВГраница()].Пустой() Тогда
			//SQL Запрос
			ТаблицаДляВыгрузки = лРезультатыЗапроса[лРезультатыЗапроса.ВГраница()].Выгрузить();
			СтрокиДляЗапросаSQL = ТаблицаДляВыгрузки.НайтиСтроки(Новый Структура("ПокупательИзДрБазы", Истина));
			ВремТаблица = ТаблицаДляВыгрузки.Скопировать(СтрокиДляЗапросаSQL, "SSID");
			ВремТаблица.Свернуть("SSID");
			
			Строка_site_ID = "";
			
			Для Каждого СтрокаДляЗапросаSQL Из ВремТаблица Цикл 
				Если ЗначениеЗаполнено(СтрокаДляЗапросаSQL.SSID) Тогда 
					Строка_site_ID = Строка_site_ID + "'" + СтрокаДляЗапросаSQL.SSID + "',";
				КонецЕсли;
			КонецЦикла;
			
			СоотвSSIDКлиентов = Новый Соответствие;
			Если Не ПустаяСтрока(Строка_site_ID) Тогда 
				Строка_site_ID = Лев(Строка_site_ID, СтрДлина(Строка_site_ID) - 1);	
				ОбменДаннымиВызовСервера.ЗаполнитьСоответствиеSSIDИКлиентов(СоотвSSIDКлиентов, Строка_site_ID);
			КонецЕсли;
			
			
			СлужЗадания = лРезультатыЗапроса[лРезультатыЗапроса.ВГраница()-1].Выгрузить();
			СлужЗадания.Индексы.Добавить("Реализация");
			
			ТаблицаУслуг = лРезультатыЗапроса[лРезультатыЗапроса.ВГраница()-2].Выгрузить();


			лТипОбъектаXDTO = ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаОтгрузку");
			лВыборка = лРезультатыЗапроса[лРезультатыЗапроса.ВГраница()].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
			
			Пока лВыборка.Следующий() Цикл
				лОбъект = ФабрикаXDTO.Создать(лТипОбъектаXDTO);
				
				ЗаполнитьЗначенияСвойств(лОбъект, лВыборка, "Номер,Дата,СуммаДокумента,ТипДоставки,ДатаОтгрузки,НомерРозничнойЗаявки");
				
				лОбъект.ВидДокумента = "РеализацияТоваровУслуг";
				лОбъект.Ссылка = XMLСтрока(лВыборка.Ссылка);
				лОбъект.СкладСсылка = XMLСтрока(лВыборка.Склад);
				лОбъект.КонтрагентСсылка = XMLСтрока(лВыборка.Контрагент);
				лОбъект.ОрганизацияСсылка = XMLСтрока(лВыборка.Организация);
				лОбъект.МаршрутДоставкиКод = лВыборка.МаршрутДоставкиКод;
				СтрокаСЗ = СлужЗадания.Найти(лВыборка.Ссылка, "Реализация");
				Если СтрокаСЗ <> Неопределено Тогда 
					СЗ = СтрокаСЗ.Ссылка; 
				Иначе
					СЗ = Неопределено;
				КонецЕсли;
				лОбъект.СкладПолучательСсылка = XMLСтрока(Справочники.Склады.ПустаяСсылка());
				
				ОбменДаннымиКлиентСервер.ДополнитьДаннымиПоПечати(лОбъект, лВыборка.Ссылка, СЗ);
				
				лТовары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаОтгрузку.Товары"));
				лТоварыСписок = лТовары.ПолучитьСписок("СтрокаТовары");
				
				ВыборкаПоТоварам = лВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоТоварам.Следующий() Цикл
					НоваяСтрока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), лТоварыСписок.ВладеющееСвойство.Тип.Имя)); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам, "НоменклатураНаименование,НоменклатураАртикул,SSID,КроссСток,Количество,Цена,ЭтоЮридическоеЛицо,ГТД,СтранаКод,СтранаНаименование");
					НоваяСтрока.НоменклатураСсылка = XMLСтрока(ВыборкаПоТоварам.Номенклатура);
					Если Не лВыборка.ПокупательИзДрБазы Тогда 
						НоваяСтрока.КлиентСсылка = XMLСтрока(ВыборкаПоТоварам.Клиент);
						НоваяСтрока.КлиентНаименование = ВыборкаПоТоварам.КлиентНаименование;
					Иначе
						КлиентСсылка = СоотвSSIDКлиентов[ВыборкаПоТоварам.SSID];
						Если КлиентСсылка = Неопределено Тогда 
							КлиентСсылка = "";
						КонецЕсли;
						НоваяСтрока.КлиентСсылка = КлиентСсылка;
						НоваяСтрока.КлиентНаименование = "";
					КонецЕсли;
					//НоваяСтрока.ГородСсылка = XMLСтрока(ВыборкаПоТоварам.Город);
					
					лТоварыСписок.Добавить(НоваяСтрока);
					
				КонецЦикла;	
				лОбъект.Товары = лТовары;
				
				лУслуги = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаОтгрузку.Услуги"));
				лУслугиСписок = лУслуги.ПолучитьСписок("СтрокаУслуги");
				
				СтрокиУслуги = ТаблицаУслуг.НайтиСтроки(Новый Структура("Ссылка", лВыборка.Ссылка));
				Для Каждого СтрокаУслуги Из СтрокиУслуги Цикл 
					НоваяСтрока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), лУслугиСписок.ВладеющееСвойство.Тип.Имя)); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслуги, "НоменклатураНаименование,НоменклатураАртикул,Количество,Цена");
					НоваяСтрока.НоменклатураСсылка = XMLСтрока(СтрокаУслуги.Номенклатура);
					лУслугиСписок.Добавить(НоваяСтрока);
				КонецЦикла;
				
				лОбъект.Услуги = лУслуги;
				
				Результат.Добавить(лОбъект);

			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьЭлемент(ОбъектXDTO, вхОтправитель, Отказ, вхПараметры = Неопределено) Экспорт
	лМетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(вхОтправитель));
	Если (лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog
		Или лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog_РТУ) Тогда 
		НомерПотока = ?(лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 0, 1);
		Если ОбъектXDTO.Тип().Имя = "РезультатСборки" Тогда 
			Попытка
				ЗагрузитьРезультатСборки(ОбъектXDTO, вхПараметры);
			Исключение
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
				СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ЗаказСсылка);
				СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "РеализацияТоваровУслуг");
				СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
				СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
				СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
				СтруктураОшибки.Вставить("НомерПотока", НомерПотока);
				ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
				
				//{{ХудинВВ 20181406
				ДокСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
				Если НЕ ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
					РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокСсылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки результата сборки: "+ОписаниеОшибки(), , Ложь, НомерПотока); 
				КонецЕсли;
				//}}
			КонецПопытки;
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЗаказНаОтгрузкуСтатус" Тогда	
			Попытка
				ЗагрузитьЗаказНаОтгрузкуСтатус(ОбъектXDTO, вхПараметры);
			Исключение
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
				СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ЗаказСсылка);
				СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "РеализацияТоваровУслуг");
				СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
				СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
				СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
				СтруктураОшибки.Вставить("НомерПотока", НомерПотока);
				ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
				
				//{{ХудинВВ 20181406
				ДокСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
				Если НЕ ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
					РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокСсылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки статуса Упакован или Готов к выдаче: "+ОписаниеОшибки(), , Ложь, НомерПотока); 
				КонецЕсли;
				//}}
			КонецПопытки;
		Иначе
			Попытка
				ЗагрузитьТранзитнуюОтгрузку(ОбъектXDTO, вхПараметры);
			Исключение
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
				СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ТранзитнаяОтгрузкаСсылка);
				СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "РеализацияТоваровУслуг");
				СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
				СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
				СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
				СтруктураОшибки.Вставить("НомерПотока", НомерПотока);
				ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
				
				//{{ХудинВВ 20181406
				Запрос = Новый Запрос("ВЫБРАТЬ
				                      |	Док.Ссылка
				                      |ИЗ
				                      |	Документ.РеализацияТоваровУслуг КАК Док
				                      |ГДЕ
				                      |	Док.ТранзитнаяОтгрузка = &ТранзитнаяОтгрузка");
				Запрос.УстановитьПараметр("ТранзитнаяОтгрузка", Новый УникальныйИдентификатор(ОбъектXDTO.ТранзитнаяОтгрузкаСсылка));			   
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					 РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(Выборка.Ссылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки транзитной отгрузки: "+ОписаниеОшибки(), , Ложь, НомерПотока); 
				КонецЦикла;
				//}}
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьРезультатСборки(ОбъектXDTO, допПараметры = Неопределено)
	ДокСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
	
	Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
		ВызватьИсключение "Не найдена реализация товаров и услуг с guid = " + ОбъектXDTO.ЗаказСсылка;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокСсылка, "Проведен,СтатусДокумента");
	
	РазрешенаПовторнаяВыгрузкаРТУ = ?(ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза(), Справочники.НастройкиРеквизитовДляОбменов.ОбменСТопЛог_РазрешитьПовторнуюЗагрузкуРТУ.ФлДляРабочейБазы, 
										Справочники.НастройкиРеквизитовДляОбменов.ОбменСТопЛог_РазрешитьПовторнуюЗагрузкуРТУ.ФлДляТестовойБазы);
	Если Реквизиты.Проведен И Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен И Не РазрешенаПовторнаяВыгрузкаРТУ Тогда 
		Возврат;
		//ВызватьИсключение "Реализация товаров и услуг с guid = " + ОбъектXDTO.ЗаказСсылка + " уже проведена и отгружена";
	КонецЕсли;
	
	ТоварыXDTO = ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	
	//СоотвSSID = ОбменДаннымиКлиентСервер.СоответствиеСтрокЗаявокИSSID(ТоварыXDTO, ДокСсылка);
	
	МассивSSID = Новый Массив;
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) Тогда 
			МассивSSID.Добавить(СтрокаТовары.SSID);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки,
	                |	ИдентификаторыСтрокЗаявок.IDSite КАК SSID
	                |ПОМЕСТИТЬ втОбщая
	                |ИЗ
	                |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                |ГДЕ
	                |	ИдентификаторыСтрокЗаявок.IDSite В(&МассивSSID)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втОбщая.SSID
	                |ПОМЕСТИТЬ втБезДублей
	                |ИЗ
	                |	втОбщая КАК втОбщая
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	втОбщая.SSID
	                |
	                |ИМЕЮЩИЕ
	                |	КОЛИЧЕСТВО(втОбщая.СтрокаЗаявки) = 1
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втОбщая.СтрокаЗаявки,
	                |	втОбщая.SSID
	                |ИЗ
	                |	втБезДублей КАК втБезДублей
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбщая КАК втОбщая
	                |		ПО втБезДублей.SSID = втОбщая.SSID";

	Запрос.УстановитьПараметр("МассивSSID", МассивSSID);

	СоотвSSID = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СоотвSSID.Вставить(Выборка.SSID, Выборка.СтрокаЗаявки);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
	               |	РеализацияТоваровУслугТовары.СтрокаЗаявки.IDSite КАК IDSite,
	               |	РеализацияТоваровУслугТовары.КоличествоПлан - ЕСТЬNULL(Отказы.Количество, 0) КАК КоличествоПлан,
	               |	РеализацияТоваровУслугТовары.Количество
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
	               |			СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество
	               |		ИЗ
	               |			Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
	               |		ГДЕ
	               |			РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	               |			И РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены.ИспользуетсяВРеализацияхДоВыгрузкиВТопЛог
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			РеализацияТоваровУслугПричиныОтказов.КлючСвязи) КАК Отказы
	               |		ПО РеализацияТоваровУслугТовары.КлючСвязи = Отказы.КлючСвязи
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	ТаблицаSSIDДокумента = Запрос.Выполнить().Выгрузить();
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	Товары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	Товары.Колонки.Добавить("План", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Недостача", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Отказ", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Качество", Новый ОписаниеТипов("СправочникСсылка.Качество"));
	
	//ТоварыСПустымиSSID = Новый ТаблицаЗначений;
	//ТоварыСПустымиSSID.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	//ТоварыСПустымиSSID.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		Если СтрокаТовары.План <> СтрокаТовары.Факт +  СтрокаТовары.Недостача + СтрокаТовары.Отказ Тогда 
			ВызватьИсключение "Сумма факта, отказа и недостачи не равен плану";
		КонецЕсли;

		СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтрокаТовары.SSID);
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) И Не ЗначениеЗаполнено(СтрокаЗаявки) Тогда 
			Отбор = Новый Структура("IDSite", СтрокаТовары.SSID);
			Строки = ТаблицаSSIDДокумента.НайтиСтроки(Отбор);
			Индекс = 0;
			КоличествоРаспределить = СтрокаТовары.План;
			Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
				Строка = Строки.Получить(Индекс);
				СписываемоеКоличество = Мин(КоличествоРаспределить, Строка.КоличествоПлан);
				Если СписываемоеКоличество > 0 Тогда 
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
					НоваяСтрока.СтрокаЗаявки = Строка.СтрокаЗаявки;		
					НоваяСтрока.План = СписываемоеКоличество;
					НоваяСтрока.Факт = Мин(НоваяСтрока.План, СтрокаТовары.Факт);	
					КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
					Строка.КоличествоПлан = Строка.КоличествоПлан - СписываемоеКоличество;
					СтрокаТовары.Факт = СтрокаТовары.Факт - НоваяСтрока.Факт;
					
					ВсеОтказы = НоваяСтрока.План - НоваяСтрока.Факт;
					Недостача = Мин(ВсеОтказы, СтрокаТовары.Недостача);
					Отказ = НоваяСтрока.План - НоваяСтрока.Факт - Недостача;
					НоваяСтрока.Недостача = Недостача;
					НоваяСтрока.Отказ = Отказ;
					
					СтрокаТовары.Недостача = СтрокаТовары.Недостача - НоваяСтрока.Недостача;
					СтрокаТовары.Отказ = СтрокаТовары.Отказ - НоваяСтрока.Отказ;
					
					НоваяСтрока.Качество = Справочники.Качество.Новый;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			Если КоличествоРаспределить > 0 Тогда 
				ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
			КонецЕсли;
		Иначе
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
			НоваяСтрока.СтрокаЗаявки = СтрокаЗаявки;
			НоваяСтрока.Качество = Справочники.Качество.Новый;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары, "План,Факт,Недостача,Отказ");
		КонецЕсли;
		//Если НоваяСтрока.План <> НоваяСтрока.Факт +  НоваяСтрока.Недостача + НоваяСтрока.Отказ Тогда 
		//	ВызватьИсключение "Сумма факта, отказа и недостачи не равен плану";
		//КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
	               |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество
	               |ПОМЕСТИТЬ втНедостачи
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
	               |ГДЕ
	               |	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены В(&МассивОтказов)
	               |	И РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	               |	И НЕ РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены.ИспользуетсяВРеализацияхДоВыгрузкиВТопЛог
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КлючСвязи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
	               |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество
	               |ПОМЕСТИТЬ втОтказы
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
	               |ГДЕ
	               |	НЕ РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены В (&МассивОтказов)
	               |	И НЕ РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены.ИспользуетсяВРеализацияхДоВыгрузкиВТопЛог
	               |	И РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КлючСвязи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
	               |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество
	               |ПОМЕСТИТЬ втОтказыДоВыгрузки
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
	               |ГДЕ
	               |	РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	               |	И РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены.ИспользуетсяВРеализацияхДоВыгрузкиВТопЛог
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КлючСвязи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Номенклатура,
	               |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
	               |	РеализацияТоваровУслугТовары.Качество,
	               |	РеализацияТоваровУслугТовары.КоличествоПлан - ЕСТЬNULL(втОтказыДоВыгрузки.Количество, 0) КАК План,
	               |	РеализацияТоваровУслугТовары.Количество КАК Факт,
	               |	втОтказы.Количество КАК Отказ,
	               |	втНедостачи.Количество КАК Недостача
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втНедостачи КАК втНедостачи
	               |		ПО РеализацияТоваровУслугТовары.КлючСвязи = втНедостачи.КлючСвязи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
	               |		ПО РеализацияТоваровУслугТовары.КлючСвязи = втОтказы.КлючСвязи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказыДоВыгрузки КАК втОтказыДоВыгрузки
	               |		ПО РеализацияТоваровУслугТовары.КлючСвязи = втОтказыДоВыгрузки.КлючСвязи
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	МассивОтказов = Новый Массив;
	МассивОтказов.Добавить(Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком);
	МассивОтказов.Добавить(Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке);
	Запрос.УстановитьПараметр("МассивОтказов", МассивОтказов);
			   
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	
	ТоварыДокумента = Запрос.Выполнить().Выгрузить();
	
	Дельта = Неопределено; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	               |	И РеализацияТоваровУслуг.Проведен
	               |	И РеализацияТоваровУслуг.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугОтгружен)
	               |	И РеализацияТоваровУслуг.Ссылка = &Ссылка
	               |	И КОНЕЦПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)";
	
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(ОбъектXDTO.ДатаОтгрузки), ОбъектXDTO.ДатаОтгрузки, ТекущаяДата()));
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка); 			   
	РезультатЗапроса = Запрос.Выполнить();
	НужноМенятьШапку = РезультатЗапроса.Пустой();
	
	НужноМенятьТЧ =  Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(ТоварыДокумента, Товары, Дельта, "План,Факт,Отказ,Недостача");
	Если НужноМенятьШапку Или НужноМенятьТЧ Тогда 
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Для Каждого СтрокаДельты Из Дельта Цикл
			
			Если СтрокаДельты.План <> 0 Тогда 
				ВызватьИсключение "План выгруженный из Топ лога не соответсвует плану в 8.3";
			КонецЕсли;
			
			СтрокаТовары = ДокОбъект.Товары.Найти(СтрокаДельты.СтрокаЗаявки, "СтрокаЗаявки");
			
			Если СтрокаДельты.Факт <> 0 Тогда 
				СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаДельты.Факт;
			КонецЕсли;
			
			Если СтрокаДельты.Отказ > 0 Тогда //добавить отказ покупателя
				СтрокаОтказа = ДокОбъект.ПричиныОтказов.Добавить();
				СтрокаОтказа.КлючСвязи = СтрокаТовары.КлючСвязи;
				СтрокаОтказа.ПричинаОтмены = Справочники.СостоянияСтрокДокументов.ОтказОтДетали;
				СтрокаОтказа.Количество = СтрокаДельты.Отказ; 
				//Если ДокОбъект.Склад.СкладVMI Тогда 
				//	СтрокаОтказа.СкладПеремещения = ОбщегоНазначения.СкладНедостачVMI(ДокОбъект.Склад);
				//КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДельты.Отказ < 0 Тогда //убрать отказ покупателя
				СтрокиОтказов = ДокОбъект.ПричиныОтказов.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТовары.КлючСвязи));
				КоличествоУбратьОтказов = - СтрокаДельты.Отказ; 
				ИндексСтроки = 0;
				Пока КоличествоУбратьОтказов > 0 И ИндексСтроки < СтрокиОтказов.Количество() Цикл  
					СтрокаОтказа = СтрокиОтказов.Получить(ИндексСтроки);
					Если СтрокаОтказа.Количество > 0 И 
						Не( СтрокаОтказа.ПричинаОтмены = Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком Или 
						СтрокаОтказа.ПричинаОтмены = Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке) Тогда 
						СписываемоеКоличество = Мин(КоличествоУбратьОтказов, СтрокаОтказа.Количество);
						КоличествоУбратьОтказов = КоличествоУбратьОтказов - СписываемоеКоличество;
						СтрокаОтказа.Количество = СтрокаОтказа.Количество - СписываемоеКоличество;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаДельты.Недостача > 0 Тогда //добавить недостачу
				СтрокаОтказа = ДокОбъект.ПричиныОтказов.Добавить();
				СтрокаОтказа.КлючСвязи = СтрокаТовары.КлючСвязи;
				СтрокаОтказа.ПричинаОтмены = Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке;
				СтрокаОтказа.Количество = СтрокаДельты.Недостача;
				
				//СтрокаОтказа.СкладПеремещения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Склад, "СкладНедостач");
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Склад, "СкладVMI") Тогда 
					СтрокаОтказа.СкладПеремещения = ОбщегоНазначения.СкладНедостачVMI(ДокОбъект.Склад);
				Иначе	
					СтрокаОтказа.СкладПеремещения = ОбщегоНазначения.СкладНедостач(ДокОбъект.Склад); 
					Если Не ЗначениеЗаполнено(СтрокаОтказа.СкладПеремещения) Тогда 
						ВызватьИсключение "Для склада " + ДокОбъект.Склад + " не указан склад недостач"; 
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДельты.Недостача < 0 Тогда //убрать недостачу
				СтрокиОтказов = ДокОбъект.ПричиныОтказов.НайтиСтроки(Новый Структура("КлючСвязи,ПричинаОтмены", СтрокаТовары.КлючСвязи, Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке));
				КоличествоУбратьОтказов = - СтрокаДельты.Недостача; 
				ИндексСтроки = 0;
				Пока КоличествоУбратьОтказов > 0 и ИндексСтроки < СтрокиОтказов.Количество() Цикл  
					СтрокаОтказа = СтрокиОтказов.Получить(ИндексСтроки);
					Если СтрокаОтказа.Количество > 0 Тогда 
						СписываемоеКоличество = Мин(КоличествоУбратьОтказов, СтрокаОтказа.Количество);
						КоличествоУбратьОтказов = КоличествоУбратьОтказов - СписываемоеКоличество;
						СтрокаОтказа.Количество = СтрокаОтказа.Количество - СписываемоеКоличество;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				Если КоличествоУбратьОтказов > 0 Тогда  //убираем брак
					СтрокиОтказов = ДокОбъект.ПричиныОтказов.НайтиСтроки(Новый Структура("КлючСвязи,ПричинаОтмены", СтрокаТовары.КлючСвязи, Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком));
					ИндексСтроки = 0;
					Пока КоличествоУбратьОтказов > 0 и ИндексСтроки < СтрокиОтказов.Количество() Цикл 
						СтрокаОтказа = СтрокиОтказов.Получить(ИндексСтроки);
						Если СтрокаОтказа.Количество > 0 Тогда 
							СписываемоеКоличество = Мин(КоличествоУбратьОтказов, СтрокаОтказа.Количество);
							КоличествоУбратьОтказов = КоличествоУбратьОтказов - СписываемоеКоличество;
							СтрокаОтказа.Количество = СтрокаОтказа.Количество - СписываемоеКоличество;
						КонецЕсли;
						ИндексСтроки = ИндексСтроки + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТовары, ДокОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовары, ДокОбъект);
		КонецЦикла;
			
			
			//Очистка строк отказов, где Количество = 0
			СтрокиОтказов = ДокОбъект.ПричиныОтказов.НайтиСтроки(Новый Структура("Количество", 0));
			КоличествоСтрокиОтказов = СтрокиОтказов.Количество();
			Для Шаг = 0 По КоличествоСтрокиОтказов - 1 Цикл 
				ДокОбъект.ПричиныОтказов.Удалить(КоличествоСтрокиОтказов - Шаг - 1);	
			КонецЦикла;
			
			ДокОбъект.ПометкаУдаления = Ложь;
			
			СтарыйСтатус =  ДокОбъект.СтатусДокумента;
			СтараяДата = ДокОбъект.Дата;
			
			ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен;
			
			Если ЗначениеЗаполнено(ОбъектXDTO.ДатаОтгрузки) Тогда 	
				Если КонецДня(ОбъектXDTO.ДатаОтгрузки) = КонецДня(ТекущаяДата()) Тогда 
					ДокОбъект.Дата = ТекущаяДата();
					ДокОбъект.ДополнительныеСвойства.Вставить("ОперативноеПроведение", Истина);
				Иначе
					ДокОбъект.Дата = Макс(глЗначениеПеременной("ДатаЗапускаПервогоЭтапа"), 
					НачалоДня(ОбъектXDTO.ДатаОтгрузки) + Час(ДокОбъект.Дата)*60*60 + Минута(ДокОбъект.Дата) * 60 + Секунда(ДокОбъект.Дата));
					Если ДокОбъект.Дата > ТекущаяДата() Тогда 
						ДокОбъект.Дата = ТекущаяДата();
						ДокОбъект.ДополнительныеСвойства.Вставить("ОперативноеПроведение", Истина);
					КонецЕсли; 
				КонецЕсли;
			Иначе
				ВызватьИсключение "Дата печати пустая. Загружать такой пакет нельзя.";
			КонецЕсли;
			
			ДокОбъект.ДополнительныеСвойства.Вставить("ДобавитьВОчередьОтправкиДокументовОтгрузки");

			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				//{{ХудинВВ 20181406
				НомерСообщения = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерСообщения);
				НомерПотока = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерПотока);

				РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь, НомерПотока); 
				//}}

			Исключение				
				ДокОбъект.СтатусДокумента = СтарыйСтатус;
				//ДокОбъект.Дата = СтараяДата;
				
				//Добавлено Валиахметов А.А. 17.07.2018 Не регистрируем в ТопЛог повторно
				ДокОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьВОбменСТоплог");
				
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
				Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
				Стр = Набор.Добавить();
				Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
				Набор.Записать(Истина);
				
				ОписаниеОшибки = ОписаниеОшибки();
				
				//ХудинВВ 13112018+
				Если СтрНайти(ОписаниеОшибки, "[ПогашениеПартийТоваров]") > 0 
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Контрагент, "ПокупательИзДрБазы") = Истина Тогда
					
					КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
					ДокОбъект.Ссылка, 
					Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаСписанияПартийРТУПриЗагрузкеИзТопЛог,
					ОписаниеОшибки,
					,
					Истина,
					ОписаниеОшибки,
					"Документ.РеализацияТоваровУслуг.МодельМенеджера.ЗагрузитьРезультатСборки()");
					
				КонецЕсли;
				//ХудинВВ 13112018-
				
				ВызватьИсключение ОписаниеОшибки;
				
			КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьТранзитнуюОтгрузку(ОбъектXDTO, допПараметры = Неопределено)
		
	ТоварыXDTO = ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	
	СоотвSSID = ОбменДаннымиКлиентСервер.СоответствиеСтрокЗаявокИSSID(ТоварыXDTO);
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Товары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	Товары.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3,ДопустимыйЗнак.Неотрицательный));
	Товары.Колонки.Добавить("Основание", Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг"));
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
		НоваяСтрока.СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтрокаТовары.SSID);
		
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) И Не ЗначениеЗаполнено(НоваяСтрока.СтрокаЗаявки) Тогда 
			ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
		КонецЕсли;
		НоваяСтрока.Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.ОрганизацияСсылка));
		НоваяСтрока.Количество = СтрокаТовары.Количество;
		
		//XX-936 Доработка плана обмена с ТопЛог для загрузки документа основания в РТУ из xx-935 со стороны 1С 8.3 
		Попытка
			НоваяСтрока.Основание = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.ПоступлениеСсылка));
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Товары.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Товары.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15,2,ДопустимыйЗнак.Неотрицательный));
	Для Каждого СтрокаТЧ Из Товары Цикл 
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.СтрокаЗаявки);
		
		НаценкаКонтрагента = ОбщегоНазначения.НаценкаКонтрагента(СтрокаТЧ.Контрагент, СтрокаТЧ.Организация);
		СтрокаТЧ.Цена = Окр((1 + НаценкаКонтрагента/100) * ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.СтрокаЗаявки, "Цена"), 2);
	КонецЦикла;
	
		
	ВремТаблица = Товары.Скопировать(,"Организация,Контрагент");
	ВремТаблица.Свернуть("Организация,Контрагент");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.Ссылка,
	               |	Док.Организация,
	               |	Док.Контрагент,
	               |	ЛОЖЬ КАК Обработан
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК Док
	               |ГДЕ
	               |	Док.ТранзитнаяОтгрузка = &ТранзитнаяОтгрузка";
	Запрос.УстановитьПараметр("ТранзитнаяОтгрузка", Новый УникальныйИдентификатор(ОбъектXDTO.ТранзитнаяОтгрузкаСсылка));			   
	ТаблицаДок = Запрос.Выполнить().Выгрузить();
	
	ОшибкиПриЗагрузке = "";
	Для Каждого СтрокаТЧ Из ВремТаблица Цикл
		Попытка
			Отбор = Новый Структура("Организация,Контрагент");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			Строки = ТаблицаДок.НайтиСтроки(Отбор);	
			СтрокиТовары = Товары.НайтиСтроки(Отбор);
			ТоварыТреб = Товары.Скопировать(СтрокиТовары, "Номенклатура,СтрокаЗаявки,Основание,Цена,Количество");
			Дельта = Неопределено;
			
			Если Строки.Количество() = 0 Тогда 
				ДокСсылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
				НеобходимаЗагрузка = Истина;
				Дельта = ТоварыТреб;
			ИначеЕсли Строки.Количество() = 1 Тогда 
				ДокСсылка = Строки.Получить(0).Ссылка;
				НеобходимаЗагрузка = НеобходимоЗагружатьТранзитнуюОтгрузку(ДокСсылка, ОбъектXDTO, ТоварыТреб, Дельта);
			Иначе
				ЗагрузитьТранзитнуюОтгрузкуВНесколькоРТУ(Строки, ТоварыТреб, ОбъектXDTO, СтрокаТЧ, допПараметры);
				//ВызватьИсключение "По транзитной приемке с guid = " + ОбъектXDTO.ТранзитнаяОтгрузкаСсылка +", организацией = " + СтрокаТЧ.Организация + ", контрагентом = " + СтрокаТЧ.Контрагент + " найдено больше одной реализации";
				Продолжить;
			КонецЕсли;
			
			Если НеобходимаЗагрузка Тогда 
				Если ЗначениеЗаполнено(ДокСсылка) Тогда 
					ДокОбъект = ДокСсылка.ПолучитьОбъект();
				Иначе
					ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				КонецЕсли;
				
				ЗаполнитьШапкуТранзитнойОтгрузки(ДокОбъект, ОбъектXDTO, СтрокаТЧ);
				
				ДокОбъект.Товары.Очистить();
				ДокОбъект.ПричиныОтказов.Очистить();
				
				мКлючСвязи = 1;
				Для Каждого СтрокаТЧ Из ТоварыТреб Цикл 
					НоваяСтрока = ДокОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
					НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "СтавкаНДС");
					НоваяСтрока.КоличествоПлан = НоваяСтрока.Количество;
					НоваяСтрока.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЕдиницаИзмерения, "Коэффициент");
					НоваяСтрока.IDSite = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.СтрокаЗаявки, "IDSite");
					НоваяСтрока.Качество = Справочники.Качество.Новый;
					
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ДокОбъект);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокОбъект);
					НоваяСтрока.КлючСвязи = мКлючСвязи;
					мКлючСвязи = мКлючСвязи + 1;
				КонецЦикла;
				
				//ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					//{{ХудинВВ 20181406
					НомерСообщения = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерСообщения);
					НомерПотока = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерПотока);
					РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь, НомерПотока); 
					//}}

				Исключение				
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
					Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
					
					Стр = Набор.Добавить();
					Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
					Набор.Записать(Истина);
					//ВызватьИсключение ОписаниеОшибки();
					
					ОписаниеОшибки = ОписаниеОшибки();
					
					//{{ХудинВВ 20181406
					НомерСообщения = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерСообщения);
					НомерПотока = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерПотока);
					РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, Истина, "Не удалось провести, помещен в отложенные: "+ОписаниеОшибки, , Ложь, НомерПотока); 
					//}}
					
					//ХудинВВ 13112018+
					Если СтрНайти(ОписаниеОшибки, "[ПогашениеПартийТоваров]") > 0 
						И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Контрагент, "ПокупательИзДрБазы") = Истина Тогда
						
						КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
						ДокОбъект.Ссылка, 
						Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаСписанияПартийРТУПриЗагрузкеИзТопЛог,
						ОписаниеОшибки,
						,
						Истина,
						ОписаниеОшибки,
						"Документ.РеализацияТоваровУслуг.МодельМенеджера.ЗагрузитьТранзитнуюОтгрузку()");
						
					КонецЕсли;
					//ХудинВВ 13112018-

				КонецПопытки;
			КонецЕсли;
			Для Каждого Строка Из Строки Цикл 
				Строка.Обработан = Истина;
			КонецЦикла;
		Исключение
			ОшибкиПриЗагрузке = ОшибкиПриЗагрузке + ОписаниеОшибки();	
		КонецПопытки;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПриЗагрузке) Тогда 
		ВызватьИсключение ОшибкиПриЗагрузке;
	Иначе
		// Все ок. Отменяем документы, которые ТопЛог выгружал ранее, но в этом пакете они не пришли
		Отбор = Новый Структура("Обработан", Ложь);
		Строки = ТаблицаДок.НайтиСтроки(Отбор);
		Для Каждого Строка Из Строки Цикл 
			Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Ссылка, "Проведен");
			Если Проведен Тогда 
				ДокОбъект = Строка.Ссылка.ПолучитьОбъект();
				ДокОбъект.ПометкаУдаления = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьЗаказНаОтгрузкуСтатус(ОбъектXDTO, допПараметры = Неопределено)
	ДокСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
	Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
		ВызватьИсключение "Не найдена реализация товаров и услуг с guid = " + ОбъектXDTO.ЗаказСсылка;
	КонецЕсли;
	ЗаказСтатус = ОбъектXDTO.ЗаказСтатус;
	
	Если Не (ЗаказСтатус = "Упакован" Или ЗаказСтатус = "Готов к выдаче") Тогда 
		ВызватьИсключение "Неизвестный статус: " + ЗаказСтатус;	
	КонецЕсли;
	
	ДокОбъект = ДокСсылка.ПолучитьОбъект();
	
	мЧисловоеЗначСтатуса = 0;
	Если ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугНовый Тогда 
		мЧисловоеЗначСтатуса = 0;
	ИначеЕсли ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка Тогда 
		мЧисловоеЗначСтатуса = 1;
	ИначеЕсли ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугУпакован Тогда 
		мЧисловоеЗначСтатуса = 2;
	ИначеЕсли ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче Тогда
		мЧисловоеЗначСтатуса = 3;
	Иначе
		мЧисловоеЗначСтатуса = 4;
	КонецЕсли;
 
	Если ДокОбъект.Проведен И (ЗаказСтатус = "Упакован" И мЧисловоеЗначСтатуса >=2 Или ЗаказСтатус = "Готов к выдаче" И мЧисловоеЗначСтатуса >=3) Тогда  
		Возврат; //Повторно не выгружаем	
	КонецЕсли;
	
	ТоварыXDTO = ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	
	МассивSSID = Новый Массив;
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) Тогда 
			МассивSSID.Добавить(СтрокаТовары.SSID);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки,
	                |	ИдентификаторыСтрокЗаявок.IDSite КАК SSID
	                |ПОМЕСТИТЬ втОбщая
	                |ИЗ
	                |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                |ГДЕ
	                |	ИдентификаторыСтрокЗаявок.IDSite В(&МассивSSID)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втОбщая.SSID
	                |ПОМЕСТИТЬ втБезДублей
	                |ИЗ
	                |	втОбщая КАК втОбщая
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	втОбщая.SSID
	                |
	                |ИМЕЮЩИЕ
	                |	КОЛИЧЕСТВО(втОбщая.СтрокаЗаявки) = 1
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втОбщая.СтрокаЗаявки,
	                |	втОбщая.SSID
	                |ИЗ
	                |	втБезДублей КАК втБезДублей
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбщая КАК втОбщая
	                |		ПО втБезДублей.SSID = втОбщая.SSID";

	Запрос.УстановитьПараметр("МассивSSID", МассивSSID);

	СоотвSSID = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СоотвSSID.Вставить(Выборка.SSID, Выборка.СтрокаЗаявки);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
	               |	РеализацияТоваровУслугТовары.СтрокаЗаявки.IDSite КАК IDSite,
	               |	РеализацияТоваровУслугТовары.КоличествоПлан - ЕСТЬNULL(Отказы.Количество, 0) КАК КоличествоПлан,
	               |	РеализацияТоваровУслугТовары.Количество
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			РеализацияТоваровУслугПричиныОтказов.КлючСвязи КАК КлючСвязи,
	               |			СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество
	               |		ИЗ
	               |			Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
	               |		ГДЕ
	               |			РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	               |			И РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены.ИспользуетсяВРеализацияхДоВыгрузкиВТопЛог
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			РеализацияТоваровУслугПричиныОтказов.КлючСвязи) КАК Отказы
	               |		ПО РеализацияТоваровУслугТовары.КлючСвязи = Отказы.КлючСвязи
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	ТаблицаSSIDДокумента = Запрос.Выполнить().Выгрузить();
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	Товары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	Товары.Колонки.Добавить("План", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи,
	                |	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены,
	                |	СУММА(РеализацияТоваровУслугПричиныОтказов.Количество) КАК Количество,
	                |	РеализацияТоваровУслугПричиныОтказов.СкладПеремещения
	                |ИЗ
	                |	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
	                |ГДЕ
	                |	РеализацияТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	                |	И РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены.ИспользуетсяВРеализацияхДоВыгрузкиВТопЛог
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	РеализацияТоваровУслугПричиныОтказов.КлючСвязи,
	                |	РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены,
	                |	РеализацияТоваровУслугПричиныОтказов.СкладПеремещения";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	КопияОтказы = Запрос.Выполнить().Выгрузить();
	КопияОтказыСвернутая = КопияОтказы.Скопировать(,"КлючСвязи,Количество");
	КопияОтказыСвернутая.Свернуть("КлючСвязи","Количество");
	
	ДокОбъект.ПричиныОтказов.Очистить();
	Для Каждого СтрокаТЧ Из ДокОбъект.Товары Цикл 
		СтрокаТЧ.Количество = 0;
	КонецЦикла;
	
	
	Для Каждого СтрокаТоварыXDTO Из ТоварыXDTO Цикл 
		СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтрокаТоварыXDTO.SSID);
		Если Не ЗначениеЗаполнено(СтрокаЗаявки) Тогда 
			Отбор = Новый Структура("IDSite", СтрокаТоварыXDTO.SSID);
			Строки = ТаблицаSSIDДокумента.НайтиСтроки(Отбор);
			Индекс = 0;
			КоличествоРаспределить = СтрокаТоварыXDTO.План;
			Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл  
				Строка = Строки.Получить(Индекс);
				СписываемоеКоличество = Мин(КоличествоРаспределить, Строка.КоличествоПлан);
				Если СписываемоеКоличество > 0 Тогда 
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыXDTO.НоменклатураСсылка));
					НоваяСтрока.СтрокаЗаявки = Строка.СтрокаЗаявки;		
					НоваяСтрока.План = СписываемоеКоличество;
					НоваяСтрока.Факт = Мин(НоваяСтрока.План, СтрокаТоварыXDTO.Факт);	
					КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
					Строка.КоличествоПлан = Строка.КоличествоПлан - СписываемоеКоличество;
					СтрокаТоварыXDTO.Факт = СтрокаТоварыXDTO.Факт - НоваяСтрока.Факт;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			Если КоличествоРаспределить > 0 Тогда 
				//НоваяСтрока = Товары.Добавить();
				//НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыXDTO.НоменклатураСсылка));
				//НоваяСтрока.План = КоличествоРаспределить;
				//НоваяСтрока.Факт = СтрокаТоварыXDTO.Факт;
				ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
			КонецЕсли;
			//Если Строки.Количество() > 0 Тогда 
			//	НоваяСтрока.СтрокаЗаявки = Строки.Получить(0).СтрокаЗаявки;	
			//	ТаблицаSSIDДокумента.Удалить(Строки.Получить(0));
			//КонецЕсли;
		Иначе
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТоварыXDTO.НоменклатураСсылка));
			НоваяСтрока.СтрокаЗаявки = СтрокаЗаявки;		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыXDTO, "План,Факт");
		КонецЕсли;
	КонецЦикла;
	
	КопияТовары = ДокОбъект.Товары.Выгрузить();
	КопияТовары.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	
	
	Для Каждого СтрокаТовары Из Товары Цикл 
		Отбор = Новый Структура("Номенклатура,СтрокаЗаявки");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовары);
		Строки = КопияТовары.НайтиСтроки(Отбор);
		Отказ = 0;
		Для Каждого Стр Из Строки Цикл 
			СтрокаОтказа = КопияОтказыСвернутая.Найти(Стр.КлючСвязи, "КлючСвязи");
			Если СтрокаОтказа <> Неопределено Тогда 
				Отказ = Отказ + СтрокаОтказа.Количество;
			КонецЕсли;
		КонецЦикла;	
		
		ВремТаблица = КопияТовары.Скопировать(Строки, "КоличествоПлан");
	
		Если ВремТаблица.Итог("КоличествоПлан") - Отказ <> СтрокаТовары.План Тогда 
			ВызватьИсключение "План, выгруженный из ТопЛог не сооответствует плану в 8ке";
		КонецЕсли;
		КоличествоРаспределить = СтрокаТовары.Факт;
		
		Индекс = 0;
		Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
			СтрокаТЧ = Строки.Получить(Индекс);
			СтрокаОтказа = КопияОтказыСвернутая.Найти(СтрокаТЧ.КлючСвязи, "КлючСвязи");
			Отказ = 0;
			Если СтрокаОтказа <> Неопределено Тогда 
				Отказ = СтрокаОтказа.Количество;
			КонецЕсли;
			
			СписывамоеКоличество = Мин(КоличествоРаспределить, СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество - Отказ);
			Если СписывамоеКоличество > 0 Тогда 
				СтрокаТЧ.Количество = СтрокаТЧ.Количество + СписывамоеКоличество;	
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Строки Цикл 
			СтрокаТЧ.Обработано = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Строки = КопияТовары.НайтиСтроки(Новый Структура("Обработано", Ложь));
	Если Строки.Количество() > 0 Тогда 
		ВызватьИсключение "В ТопЛоге упаковали меньше чем в заказе. Не можем грузить такое сообщение. Ждем статуса Отгружен";
	КонецЕсли;
	ДокОбъект.Товары.Загрузить(КопияТовары);
	ДокОбъект.ПричиныОтказов.Загрузить(КопияОтказы);
	
	Для Каждого СтрокаТовары Из ДокОбъект.Товары Цикл 
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТовары, ДокОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовары, ДокОбъект);
		Если СтрокаТовары.КоличествоПлан - СтрокаТовары.Количество > 0 Тогда 
			НоваяСтрока = ДокОбъект.ПричиныОтказов.Добавить();
			НоваяСтрока.КлючСвязи = СтрокаТовары.КлючСвязи;
			НоваяСтрока.Количество = СтрокаТовары.КоличествоПлан - СтрокаТовары.Количество;
			НоваяСтрока.ПричинаОтмены = Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке;
		КонецЕсли;
	КонецЦикла;
	
	СтарыйСтатус =  ДокОбъект.СтатусДокумента;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ЗаказДатаСтатуса) Тогда 	
		Если КонецДня(ОбъектXDTO.ЗаказДатаСтатуса) = КонецДня(ТекущаяДата()) Тогда 
			ДокОбъект.Дата = ТекущаяДата();
			ДокОбъект.ДополнительныеСвойства.Вставить("ОперативноеПроведение", Истина);
		Иначе
			ДокОбъект.Дата = Макс(глЗначениеПеременной("ДатаЗапускаПервогоЭтапа"), 
			НачалоДня(ОбъектXDTO.ЗаказДатаСтатуса) + Час(ДокОбъект.Дата)*60*60 + Минута(ДокОбъект.Дата) * 60 + Секунда(ДокОбъект.Дата));
			Если ДокОбъект.Дата > ТекущаяДата() Тогда 
				ДокОбъект.Дата = ТекущаяДата();
				ДокОбъект.ДополнительныеСвойства.Вставить("ОперативноеПроведение", Истина);
			КонецЕсли; 
		КонецЕсли;
	Иначе
		ВызватьИсключение "Дата статуса пустая. Загружать такой пакет нельзя.";
	КонецЕсли;
			
	НовыйСтатус = ?(ЗаказСтатус = "Упакован", Справочники.СтатусыДокументов.РеализацияТоваровУслугУпакован, Справочники.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче);
	ДокОбъект.СтатусДокумента = НовыйСтатус;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		//{{ХудинВВ 20181406
		НомерСообщения = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерСообщения);
		НомерПотока = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерПотока);
		РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь, НомерПотока); 
		//}}
		
	Исключение				
		ДокОбъект.СтатусДокумента = СтарыйСтатус;
		//ДокОбъект.Дата = СтараяДата;
		
		//Добавлено Валиахметов А.А. 17.07.2018 Не регистрируем в ТопЛог повторно
		ДокОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьВОбменСТоплог");
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
		
		Стр = Набор.Добавить();
		Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
		Стр.СтатусДокумента = НовыйСтатус;
		Набор.Записать(Истина);
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьШапкуТранзитнойОтгрузки(Знач ДокОбъект, Знач ОбъектXDTO, Знач СтрокаТЧ)
	
	ДокОбъект.Организация = СтрокаТЧ.Организация;
	ДокОбъект.Контрагент = СтрокаТЧ.Контрагент;
	Если Не ЗначениеЗаполнено(ДокОбъект.ТорговаяТочка) Тогда 
		ДокОбъект.ТорговаяТочка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Контрагент, "ОсновнаяТорговаяТочка");
	КонецЕсли;
	
	ДокОбъект.Склад = ПолучитьСкладПриемки(Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ТранзитнаяОтгрузкаСкладСсылка)));
	Если Не ЗначениеЗаполнено(ДокОбъект.Филиал) Тогда 
		ДокОбъект.Филиал = Справочники.Контрагенты.ФилиалКонтрагента(ДокОбъект.Контрагент);
	КонецЕсли;
	
	ДокОбъект.ТранзитнаяОтгрузка = Новый УникальныйИдентификатор(ОбъектXDTO.ТранзитнаяОтгрузкаСсылка);
	ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен;
	
	//Заполнение договора
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.ТипЦен
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.Организация = &Организация");
	Запрос.УстановитьПараметр("Контрагент", ДокОбъект.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДокОбъект.Организация);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокОбъект.ДоговорКонтрагента = Выборка.Ссылка;
		ДокОбъект.ТипЦен = Выборка.ТипЦен;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокОбъект.БанковскийСчет) Тогда 
		ДокОбъект.БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Контрагент, "ОсновнойБанковскийСчет");
	КонецЕсли;
	
	БанковскийСчетОрганизации = Справочники.ДоговорыКонтрагентов.БанковскийСчетПоДоговору(ДокОбъект.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		БанковскийСчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокОбъект.БанковскийСчетОрганизации) Тогда 
		ДокОбъект.БанковскийСчетОрганизации = БанковскийСчетОрганизации;
	КонецЕсли;	
	ДокОбъект.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ДокОбъект.СуммаВключаетНДС = Истина;
	ДокОбъект.КратностьВзаиморасчетов = 1;
	ДокОбъект.КурсВзаиморасчетов = 1;
	ДокОбъект.УчитыватьНДС = Истина;
	ДокОбъект.флНеВыгружатьВТопЛог = Истина;
	
	ДокОбъект.ТипДоставки = Справочники.ТипыДоставки.ДоставкаВодителем;
	ДокОбъект.МаршрутДоставки = Справочники.МаршрутыДоставки.НайтиПоКоду(297);
	ДокОбъект.ПометкаУдаления = Ложь;
	Если ДокОбъект.ЭтоНовый() Тогда 
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.ДополнительныеСвойства.Вставить("ОперативноеПроведение", Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьТранзитнуюОтгрузкуВНесколькоРТУ(Строки, ТоварыТреб, ОбъектXDTO, СтрокаТЧ, ДопПараметры)
	Для Каждого Строка Из Строки  Цикл 
		ДокСсылка = Строка.Ссылка;
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		
		ЗаполнитьШапкуТранзитнойОтгрузки(ДокОбъект, ОбъектXDTO, СтрокаТЧ);
		
		КопияТовары = ДокОбъект.Товары.Выгрузить();
		ДокОбъект.Товары.Очистить();
		мКлючСвязи = 1;
		
		Для Каждого СтрокаТовары Из КопияТовары Цикл 
			СтрокиНайденные = ТоварыТреб.НайтиСтроки(Новый Структура("Номенклатура,СтрокаЗаявки", СтрокаТовары.Номенклатура, СтрокаТовары.СтрокаЗаявки));
			КоличествоРаспределить = СтрокаТовары.Количество;
			Индекс = 0;
			Пока КоличествоРаспределить > 0 И Индекс < СтрокиНайденные.Количество() Цикл 
				СтрокаТреб = СтрокиНайденные.Получить(Индекс);
				СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаТреб.Количество);
				Если СписываемоеКоличество > 0 Тогда 
					НоваяСтрока = ДокОбъект.Товары.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТреб);
					НоваяСтрока.Количество = СписываемоеКоличество;
					НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
					НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "СтавкаНДС");
					НоваяСтрока.КоличествоПлан = НоваяСтрока.Количество;
					НоваяСтрока.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЕдиницаИзмерения, "Коэффициент");
					НоваяСтрока.IDSite = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.СтрокаЗаявки, "IDSite");
					НоваяСтрока.Качество = Справочники.Качество.Новый;
					
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ДокОбъект);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокОбъект);
					НоваяСтрока.КлючСвязи = мКлючСвязи;
					мКлючСвязи = мКлючСвязи + 1;
					
					КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
					СтрокаТреб.Количество =  СтрокаТреб.Количество - СписываемоеКоличество;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		
		Если Строка = Строки.Получить(Строки.ВГраница()) Тогда //в последний документ добавляем оставшийся товар
			Для Каждого СтрокаТЧ Из ТоварыТреб Цикл 
				Если СтрокаТЧ.Количество = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ДокОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
				НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "СтавкаНДС");
				НоваяСтрока.КоличествоПлан = НоваяСтрока.Количество;
				НоваяСтрока.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЕдиницаИзмерения, "Коэффициент");
				НоваяСтрока.IDSite = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.СтрокаЗаявки, "IDSite");
				НоваяСтрока.Качество = Справочники.Качество.Новый;
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ДокОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокОбъект);
				НоваяСтрока.КлючСвязи = мКлючСвязи;
				мКлючСвязи = мКлючСвязи + 1;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			Если ДокОбъект.Товары.Количество() = 0 Тогда 
				 ДокОбъект.ПометкаУдаления = Истина;
				 ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			//{{ХудинВВ 20181406
			НомерСообщения = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерСообщения);
			НомерПотока = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерПотока);
			РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь, НомерПотока); 
			//}}
			
		Исключение				
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
			Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
			
			Стр = Набор.Добавить();
			Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
			Набор.Записать(Истина);
			//ВызватьИсключение ОписаниеОшибки();
			
			ОписаниеОшибки = ОписаниеОшибки();
			
			//{{ХудинВВ 20181406
			НомерСообщения = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерСообщения);
			НомерПотока = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерПотока);
			РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, Истина, "Не удалось провести, помещен в отложенные: "+ОписаниеОшибки, , Ложь, НомерПотока); 
			//}}
			
			//ХудинВВ 13112018+
			Если СтрНайти(ОписаниеОшибки, "[ПогашениеПартийТоваров]") > 0 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Контрагент, "ПокупательИзДрБазы") = Истина Тогда
				
				КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
				ДокОбъект.Ссылка, 
				Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаСписанияПартийРТУПриЗагрузкеИзТопЛог,
				ОписаниеОшибки,
				,
				Истина,
				ОписаниеОшибки,
				"Документ.РеализацияТоваровУслуг.МодельМенеджера.ЗагрузитьТранзитнуюОтгрузкуВНесколькоРТУ()");
				
			КонецЕсли;
			//ХудинВВ 13112018-

		КонецПопытки;

	
	Строка.Обработан = Истина;
КонецЦикла;
КонецПроцедуры

Процедура ОбновитьСЗ(вхСсылкаНаДокумент)
	
	СтатусДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента");
	
	Если СтатусДокумента <> Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебноеЗаданиеПокупатели.Ссылка
	               |ИЗ
	               |	Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
	               |ГДЕ
	               |	СлужебноеЗаданиеПокупатели.Реализация = &Ссылка
	               |	И НЕ СлужебноеЗаданиеПокупатели.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.ОтложенноеИзменениеОбъектовТопЛог.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
		НаборЗаписей.Добавить().Объект = Выборка.Ссылка; 
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиКонтрагента(СтрокаЗаявки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокЗаявок.Заявка.Контрагент КАК Контрагент
	               |ИЗ
	               |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	               |ГДЕ
	               |	ИдентификаторыСтрокЗаявок.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СтрокаЗаявки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Контрагент;
	
КонецФункции

Функция ПолучитьСкладПриемки(Знач Склад)
	
	СкладПриемки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "СкладПриемки");
	
	Если ЗначениеЗаполнено(СкладПриемки) Тогда 
		Возврат СкладПриемки;
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

Функция НеобходимоЗагружатьТранзитнуюОтгрузку(ДокСсылка, ОбъектXDTO, ТоварыТреб, Дельта)
	
	Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ТранзитнаяОтгрузкаСкладСсылка));
	
	Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(Склад) Тогда 
		ВызватьИсключение "Не найден склад с guid = " + ОбъектXDTO.ТранзитнаяОтгрузкаСкладСсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Ссылка = &Ссылка
	               |	И РеализацияТоваровУслуг.Проведен
	               |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	               |	И РеализацияТоваровУслуг.СтатусДокумента = &СтатусДокумента
	               |	И РеализацияТоваровУслуг.Склад = &Склад";
	Запрос.УстановитьПараметр("СтатусДокумента", Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен);
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("Склад", ПолучитьСкладПриемки(Склад));
	
	НужноМенятьШапку = Запрос.Выполнить().Пустой();
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	РеализацияТоваровУслугТовары.Номенклатура,
	                |	РеализацияТоваровУслугТовары.Количество КАК Количество,
	                |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
	                |	РеализацияТоваровУслугТовары.Цена,
	                |	РеализацияТоваровУслугТовары.Основание
	                |ИЗ
	                |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                |ГДЕ
	                |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	
	ТоварыДокумента = Запрос.Выполнить().Выгрузить();
	
	НужноМенятьТЧ = Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(ТоварыДокумента, ТоварыТреб, Дельта, "Количество");
	
	Возврат НужноМенятьТЧ Или НужноМенятьШапку;
	
КонецФункции

Процедура ПроверитьВозможностьВыпискиКлиенту(вхСсылкаНаДокумент, вхОтказ, вхПараметры)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата, ЭтоМФП, СтатусДокумента, Склад, ВидОперации");

	Если Реквизиты.ЭтоМФП Тогда 
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.МФП Тогда 
		Возврат;
	КонецЕсли;
	
	Если вхСсылкаНаДокумент.Товары.Количество() = вхСсылкаНаДокумент.Товары.НайтиСтроки(Новый Структура("СтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка())).Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	//ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, "Продажи,ТоварыКОтгрузке,ОтказыПоЗаявкам");
	
	Дата = Реквизиты.Дата;
	Если Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат;
	КонецЕсли;
	
	СписокПрав =  УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.ОтключитьПроверкуКонтроляВыписки, Ложь);
	Если СписокПрав.Количество() = 1 И СписокПрав.Получить(0).Значение = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	ЗапросБлок = Новый Запрос;
	
	ЗапросБлок.Текст = "ВЫБРАТЬ
	                   |	РеализацияТоваровУслугТовары.СтрокаЗаявки
	                   |ИЗ
	                   |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                   |ГДЕ
	                   |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	                   |	И РеализацияТоваровУслугТовары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки";
	ЗапросБлок.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	ЗапросБлок.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());	
	
	РезультатЗапроса = ЗапросБлок.Выполнить();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ОтказыПоЗаявкам");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтрокаЗаявки", "СтрокаЗаявки");
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ТоварыКОтгрузке");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтрокаЗаявки", "СтрокаЗаявки");
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.Продажи");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтрокаЗаявки", "СтрокаЗаявки");
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ЗаявкиПокупателей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтрокаЗаявки", "СтрокаЗаявки");
	
	БлокировкаДанных.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	РеализацияТоваровУслугТовары.СтрокаЗаявки КАК СтрокаЗаявки,
	                |	СУММА(РеализацияТоваровУслугТовары.КоличествоПлан) КАК Количество
	                |ПОМЕСТИТЬ втСтрокиЗаявок
	                |ИЗ
	                |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                |ГДЕ
	                |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	                |	И РеализацияТоваровУслугТовары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	РеализацияТоваровУслугТовары.СтрокаЗаявки
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ЗаявкиПокупателейОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	                |	ЗаявкиПокупателейОбороты.КоличествоПриход КАК Количество
	                |ПОМЕСТИТЬ втЗаявки
	                |ИЗ
	                |	РегистрНакопления.ЗаявкиПокупателей.Обороты(
	                |			,
	                |			,
	                |			,
	                |			СтрокаЗаявки В
	                |				(ВЫБРАТЬ
	                |					втСтрокиЗаявок.СтрокаЗаявки
	                |				ИЗ
	                |					втСтрокиЗаявок)) КАК ЗаявкиПокупателейОбороты
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ПродажиОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	                |	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество
	                |ПОМЕСТИТЬ втПродажи
	                |ИЗ
	                |	РегистрНакопления.Продажи.Обороты(
	                |			,
	                |			,
	                |			Регистратор,
	                |			СтрокаЗаявки В
	                |				(ВЫБРАТЬ
	                |					втСтрокиЗаявок.СтрокаЗаявки
	                |				ИЗ
	                |					втСтрокиЗаявок)) КАК ПродажиОбороты
	                |ГДЕ
	                |	НЕ ПродажиОбороты.Регистратор = &Ссылка
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ПродажиОбороты.СтрокаЗаявки
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТоварыКОтгрузкеОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	                |	СУММА(ТоварыКОтгрузкеОбороты.КоличествоОборот) КАК Количество
	                |ПОМЕСТИТЬ втТоварыКОтгрузке
	                |ИЗ
	                |	РегистрНакопления.ТоварыКОтгрузке.Обороты(
	                |			,
	                |			,
	                |			Регистратор,
	                |			СтрокаЗаявки В
	                |				(ВЫБРАТЬ
	                |					втСтрокиЗаявок.СтрокаЗаявки
	                |				ИЗ
	                |					втСтрокиЗаявок)) КАК ТоварыКОтгрузкеОбороты
	                |ГДЕ
	                |	НЕ ТоварыКОтгрузкеОбороты.Регистратор = &Ссылка
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ТоварыКОтгрузкеОбороты.СтрокаЗаявки
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ОтказыПоЗаявкамОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	                |	СУММА(ОтказыПоЗаявкамОбороты.КоличествоОборот) КАК Количество
	                |ПОМЕСТИТЬ втОтказы
	                |ИЗ
	                |	РегистрНакопления.ОтказыПоЗаявкам.Обороты(
	                |			,
	                |			,
	                |			Регистратор,
	                |			СтрокаЗаявки В
	                |				(ВЫБРАТЬ
	                |					втСтрокиЗаявок.СтрокаЗаявки
	                |				ИЗ
	                |					втСтрокиЗаявок)) КАК ОтказыПоЗаявкамОбороты
	                |ГДЕ
	                |	НЕ ОтказыПоЗаявкамОбороты.Регистратор = &Ссылка
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ОтказыПоЗаявкамОбороты.СтрокаЗаявки
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втСтрокиЗаявок.СтрокаЗаявки КАК СтрокаЗаявки,
	                |	втСтрокиЗаявок.СтрокаЗаявки.IDSite КАК IDSite
	                |ИЗ
	                |	втСтрокиЗаявок КАК втСтрокиЗаявок
	                |		ЛЕВОЕ СОЕДИНЕНИЕ втЗаявки КАК втЗаявки
	                |		ПО втСтрокиЗаявок.СтрокаЗаявки = втЗаявки.СтрокаЗаявки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ втПродажи КАК втПродажи
	                |		ПО втСтрокиЗаявок.СтрокаЗаявки = втПродажи.СтрокаЗаявки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
	                |		ПО втСтрокиЗаявок.СтрокаЗаявки = втОтказы.СтрокаЗаявки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыКОтгрузке КАК втТоварыКОтгрузке
	                |		ПО втСтрокиЗаявок.СтрокаЗаявки = втТоварыКОтгрузке.СтрокаЗаявки
	                |ГДЕ
	                |	ЕСТЬNULL(втЗаявки.Количество, 0) - ЕСТЬNULL(втОтказы.Количество, 0) - ЕСТЬNULL(втПродажи.Количество, 0) - ЕСТЬNULL(втТоварыКОтгрузке.Количество, 0) - втСтрокиЗаявок.Количество < 0";
	
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(вхСсылкаНаДокумент.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	Сообщение = "";
	Если Не РезультатЗапроса.Пустой() Тогда 
		вхОтказ = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Сообщение = Сообщение + "[КонтрольВозможностиВыписки]: В документе продается товара больше, чем заказано клиентом по IDSite = " + Выборка.IDSite + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	НеВыводитьОшибкиВОкноСообщений = ?(вхПараметры.ДанныеОбъекта.Свойство("НеВыводитьОшибкиВОкноСообщений"), Истина, Ложь);
	
	Если Не ПустаяСтрока(Сообщение) Тогда 
		Если НеВыводитьОшибкиВОкноСообщений Тогда 
				ВызватьИсключение Сообщение;
		Иначе
			#Если Клиент Тогда 
				Сообщить(Сообщение);
			#Иначе
				ВызватьИсключение Сообщение;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Создание РТУ на основании документа заявки/корректировки

Функция СоздатьДокументыНаОснованииЗаявки(ДанныеЗаполнения, ПараметрыСоздания) Экспорт
		
	БратьСкладИзРезерва = ПараметрыСоздания.БратьСкладИзРезерва;
	БратьСтандартнуюДатуОплаты = ПараметрыСоздания.БратьСтандартнуюДатуОплаты;
	
	ВозвращаемоеЗначение = Новый Массив;	
	ДатаРТУ = ТекущаяДата();
	
	ДокументЗаполнения = Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(ДанныеЗаполнения);
	
	Если Не РазрешеноСозданиеНаОснованииЗаявки(ДокументЗаполнения) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаявкаСсылка = ?(ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ЗаявкаПокупателя"), ДокументЗаполнения,  ДокументЗаполнения.ДокументОснование); 
	
	//Выбираем склад
	Склад = Документы.ЗаявкаПокупателя.СкладОтгрузкиПоЗаявкеКорректировке(ДокументЗаполнения);
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ДоговорКонтрагентаВзаиморасчетов = Справочники.ДоговорыКонтрагентов.ДоговорВзаиморасчетов(ДанныеЗаполнения.ДоговорКонтрагента);
	РеквизитыДоговораВзаиморасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагентаВзаиморасчетов, "ВидРасчетаДней, НеКонтролироватьЛимит, ДопустимаяСуммаЗадолженности");
	
	//Остатки для заполнения
	РезультатТовары = ОстаткиТоваровПоЗаявкеКорректировке(ДокументЗаполнения, Склад, ДатаРТУ);
	РезультатУслуги = ОстаткиУслугПоЗаявкеКорректировке(ДокументЗаполнения);
	
	ОстаткиТоваров = РезультатТовары.Выгрузить();
	ОстаткиУслуг   = РезультатУслуги.Выгрузить();

	Если РезультатТовары.Пустой() И РезультатУслуги.Пустой() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "По документу " + ДанныеЗаполнения + " отсутствуют данные для заполнения документа ""Реализация товаров и услуг""";
		Сообщение.Сообщить();
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	// УАЦ00168529
	
	//Контроль суммы отгрузки
	СуммаДолга 							= Справочники.ДоговорыКонтрагентов.СуммаДолгаПоДоговору(ДоговорКонтрагентаВзаиморасчетов);
	КонтролироватьСуммуЗадолженности 	= НЕ РеквизитыДоговораВзаиморасчетов.НеКонтролироватьЛимит;
	ДопустимаяСуммаЗадолженности 		= РеквизитыДоговораВзаиморасчетов.ДопустимаяСуммаЗадолженности;
	СуммаОтгрузки 						= ОстаткиТоваров.Итог("Сумма")+ОстаткиУслуг.Итог("Сумма");
	Если КонтролироватьСуммуЗадолженности Тогда 
		Если СуммаОтгрузки + СуммаДолга > ДопустимаяСуммаЗадолженности Тогда 
			Сообщить("Превышен долг контрагента. Допустимая задолженность по договору: " + ДопустимаяСуммаЗадолженности + ". Планируемая сумма отгрузки: " + СуммаОтгрузки + ". Имеющийся долг: " + СуммаДолга);
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	//Сосчитаем дату оплаты по каждой строке
	ДопустимоеЧислоДнейЗадолженности = Справочники.ДоговорыКонтрагентов.ДопустимоеЧислоДнейЗадолженности(ДоговорКонтрагентаВзаиморасчетов, ДатаРТУ);
	
	//Общие дни по договору
	ДатаОплатыОбщая = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(НачалоДня(ДатаРТУ), ДопустимоеЧислоДнейЗадолженности, РеквизитыДоговораВзаиморасчетов.ВидРасчетаДней); 	
	Для каждого СтрокаТаб Из ОстаткиТоваров Цикл
		
		//Дата оплаты = Дата отгрузки + Константа (заложена 1 день, чтобы оплата шла со дня после отгрузки ) 
		//					+ Отсрочка из Основного договора КАГ + Отсрочка из заявки ( отсрочка на доставку, использовать как банковский день) 
		//					+ отсрочка по особым условиям 
		
		
		//Добавим отсрочку из заявки
		СтрокаТаб.ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(ДатаОплатыОбщая, СтрокаТаб.ДнейДоставкиДоДомашнегоСклада, Перечисления.ВидыРасчетаДней.ПоБанковскимДням);
		
		
		//Добавим дни по особым условиям
		Если СтрокаТаб.ДопустимоеЧислоДнейЗадолженностиОУ > 0 И ЗначениеЗаполнено(СтрокаТаб.ВидРасчетаДнейОУ) Тогда
			СтрокаТаб.ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(СтрокаТаб.ДатаОплаты, СтрокаТаб.ДопустимоеЧислоДнейЗадолженностиОУ, СтрокаТаб.ВидРасчетаДнейОУ);
		КонецЕсли;
	КонецЦикла;
	
	//Создаем РТУ
	ТаблицаДат = ОстаткиТоваров.Скопировать(,"ДатаОплаты");
	ТаблицаДат.Свернуть("ДатаОплаты");
	
	Для Каждого СтрокаТаблицыДат Из ТаблицаДат Цикл
		
		Товары =  ОстаткиТоваров.НайтиСтроки(Новый Структура("ДатаОплаты", СтрокаТаблицыДат.ДатаОплаты));
		
		ОбъектРТУ = СоздатьДокументНаОснованииЗаявки(ДанныеЗаполнения, Товары, Неопределено, СтрокаТаблицыДат.ДатаОплаты, ПараметрыСоздания);
		
		Если ОбъектРТУ <>  Неопределено Тогда
			
			Если БратьСкладИзРезерва Тогда 
				ОбъектРТУ.Склад  = Склад;
			КонецЕсли;
			
			ВозвращаемоеЗначение.Добавить(ОбъектРТУ);
		КонецЕсли;
		
	КонецЦикла;
	
	//Добавим услуги в первую РТУ или создадим новую
	Если ОстаткиУслуг.Количество() > 0 Тогда
		Если ВозвращаемоеЗначение.Количество() > 0 Тогда
			СоздатьДокументНаОснованииЗаявки_ЗаполнитьУслуги(ВозвращаемоеЗначение[0], ОстаткиУслуг)
		Иначе
			ОбъектРТУ = СоздатьДокументНаОснованииЗаявки(ДанныеЗаполнения, Неопределено, ОстаткиУслуг, ДатаОплатыОбщая, ПараметрыСоздания);
			ВозвращаемоеЗначение.Добавить(ОбъектРТУ);
		КонецЕсли;
	КонецЕсли;
	
	ОстаткиТоваров = Неопределено;
	ОстаткиУслуг   = Неопределено;
	
	Возврат ВозвращаемоеЗначение;	
	
КонецФункции

Функция ОстаткиУслугПоЗаявкеКорректировке(ДокументЗаполнения) Экспорт
	
	//Выбираем остатки
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УслугиОстатки.Номенклатура,
	               |	УслугиОстатки.КоличествоОстаток КАК Количество,
	               |	УслугиОстатки.СуммаОстаток КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА УслугиОстатки.КоличествоОстаток = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ УслугиОстатки.СуммаОстаток / УслугиОстатки.КоличествоОстаток
	               |	КОНЕЦ КАК Цена,
	               |	УслугиОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС
	               |ИЗ
	               |	РегистрНакопления.Услуги.Остатки(, Заявка = &Заявка) КАК УслугиОстатки";
	
	
	ЗаявкаСсылка = ?(ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ЗаявкаПокупателя"), ДокументЗаполнения,  ДокументЗаполнения.ДокументОснование); 
	
	Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ОстаткиТоваровПоЗаявкеКорректировке(ДокументЗаполнения, Склад, ДатаОстатков)
	
	//Выбираем остатки
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаПокупателяТовары.Ссылка.Склад КАК Склад,
	               |	ЗаявкаПокупателяТовары.Номенклатура КАК Номенклатура,
	               |	ЗаявкаПокупателяТовары.Качество КАК Качество,
	               |	ЗаявкаПокупателяТовары.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ЗаявкаПокупателяТовары.ЕдиницаИзмерения,
	               |	ЗаявкаПокупателяТовары.Коэффициент,
	               |	ЗаявкаПокупателяТовары.Цена,
	               |	ЗаявкаПокупателяТовары.ЦенаСоСкидкой,
	               |	ЗаявкаПокупателяТовары.Сумма,
	               |	ЗаявкаПокупателяТовары.СтавкаНДС,
	               |	ЗаявкаПокупателяТовары.СуммаНДС,
	               |	ЗаявкаПокупателяТовары.КомментарийИзСайта,
	               |	ЗаявкаПокупателяТовары.IDSite,
	               |	ЗаявкаПокупателяТовары.ПроцентСкидкиНаценки,
	               |	ЗаявкаПокупателяТовары.ЦенаЗакупки,
	               |	ЗаявкаПокупателяТовары.Количество - ЗаявкаПокупателяТовары.Отмена КАК КоличествоИзначальное,
	               |	НЕ ЗаявкаПокупателяТовары.Ссылка.УчитыватьНДС
	               |		ИЛИ ЗаявкаПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
	               |ПОМЕСТИТЬ втТовары
	               |ИЗ
	               |	Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
	               |ГДЕ
	               |	ЗаявкаПокупателяТовары.Количество - ЗаявкаПокупателяТовары.Отмена > 0
	               |	И ЗаявкаПокупателяТовары.Ссылка = &Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РезервыТоваровОстатки.Склад КАК Склад,
	               |	РезервыТоваровОстатки.Номенклатура КАК Номенклатура,
	               |	РезервыТоваровОстатки.Качество КАК Качество,
	               |	РезервыТоваровОстатки.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	РезервыТоваровОстатки.СтрокаПрихода,
	               |	РезервыТоваровОстатки.КоличествоОстаток
	               |ПОМЕСТИТЬ втРезерв
	               |ИЗ
	               |	РегистрНакопления.РезервыТоваров.Остатки(
	               |			,
	               |			Склад = &Склад
	               |				И СтрокаЗаявки В
	               |					(ВЫБРАТЬ
	               |						втТовары.СтрокаЗаявки
	               |					ИЗ
	               |						втТовары)) КАК РезервыТоваровОстатки
	               |ГДЕ
	               |	РезервыТоваровОстатки.КоличествоОстаток > 0
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезерв.Номенклатура,
	               |	втРезерв.Качество,
	               |	втТовары.СтрокаЗаявки,
	               |	втРезерв.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	1 КАК Коэффициент,
	               |	втТовары.Цена,
	               |	втТовары.ЦенаСоСкидкой,
	               |	втТовары.Сумма * втРезерв.КоличествоОстаток / (втТовары.КоличествоИзначальное * втТовары.Коэффициент) КАК Сумма,
	               |	втТовары.СтавкаНДС,
	               |	втТовары.СуммаНДС * втРезерв.КоличествоОстаток / (втТовары.КоличествоИзначальное * втТовары.Коэффициент) КАК СуммаНДС,
	               |	втТовары.КомментарийИзСайта,
	               |	втТовары.IDSite,
	               |	втТовары.ПроцентСкидкиНаценки,
	               |	втТовары.ЦенаЗакупки,
	               |	втРезерв.СтрокаПрихода,
	               |	втРезерв.КоличествоОстаток КАК Количество,
	               |	втРезерв.КоличествоОстаток КАК КоличествоПлан,
	               |	втТовары.СуммаВключаетНДС
	               |ПОМЕСТИТЬ втТоварыБезДней
	               |ИЗ
	               |	втТовары КАК втТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРезерв КАК втРезерв
	               |		ПО втТовары.СтрокаЗаявки = втРезерв.СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОсобыеУсловияОтсрочки.Изготовитель,
	               |	ОсобыеУсловияОтсрочки.ТипПоставки,
	               |	МАКСИМУМ(ОсобыеУсловияОтсрочки.ДопустимоеЧислоДнейЗадолженности) КАК ДопустимоеЧислоДнейЗадолженности,
	               |	ОсобыеУсловияОтсрочки.ВидРасчетаДней
	               |ПОМЕСТИТЬ втОсобыеУсловияОтсрочки
	               |ИЗ
	               |	РегистрСведений.ОсобыеУсловияОтсрочки.СрезПоследних(&ДатаРТУ, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ОсобыеУсловияОтсрочки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОсобыеУсловияОтсрочки.Изготовитель,
	               |	ОсобыеУсловияОтсрочки.ТипПоставки,
	               |	ОсобыеУсловияОтсрочки.ВидРасчетаДней
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТоварыБезДней.Номенклатура,
	               |	втТоварыБезДней.Качество,
	               |	втТоварыБезДней.СтрокаЗаявки,
	               |	втТоварыБезДней.СтрокаЗаявки.ДнейДоставкиДоДомашнегоСклада КАК ДнейДоставкиДоДомашнегоСклада,
	               |	втТоварыБезДней.ЕдиницаИзмерения,
	               |	втТоварыБезДней.Коэффициент,
	               |	втТоварыБезДней.Цена,
	               |	втТоварыБезДней.ЦенаСоСкидкой,
	               |	втТоварыБезДней.Сумма,
	               |	втТоварыБезДней.СтавкаНДС,
	               |	втТоварыБезДней.СуммаНДС,
	               |	втТоварыБезДней.КомментарийИзСайта,
	               |	втТоварыБезДней.IDSite,
	               |	втТоварыБезДней.ПроцентСкидкиНаценки,
	               |	втТоварыБезДней.ЦенаЗакупки,
	               |	втТоварыБезДней.СтрокаПрихода,
	               |	втТоварыБезДней.Количество,
	               |	втТоварыБезДней.КоличествоПлан,
	               |	втТоварыБезДней.СуммаВключаетНДС,
	               |	ЕСТЬNULL(втОсобыеУсловияОтсрочки.ДопустимоеЧислоДнейЗадолженности, 0) КАК ДопустимоеЧислоДнейЗадолженностиОУ,
	               |	ЕСТЬNULL(втОсобыеУсловияОтсрочки.ВидРасчетаДней, НЕОПРЕДЕЛЕНО) КАК ВидРасчетаДнейОУ,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОплаты
	               |ИЗ
	               |	втТоварыБезДней КАК втТоварыБезДней
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОсобыеУсловияОтсрочки КАК втОсобыеУсловияОтсрочки
	               |		ПО втТоварыБезДней.СтрокаЗаявки.ТипПоставки = втОсобыеУсловияОтсрочки.ТипПоставки
	               |			И втТоварыБезДней.Номенклатура.Изготовитель = втОсобыеУсловияОтсрочки.Изготовитель";
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЗаполнения, "ДоговорКонтрагента");
	
	ДоговорКонтрагентаВзаиморасчетов = Справочники.ДоговорыКонтрагентов.ДоговорВзаиморасчетов(Реквизиты.ДоговорКонтрагента);
	ЗаявкаСсылка = ?(ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.ЗаявкаПокупателя"), ДокументЗаполнения,  ДокументЗаполнения.ДокументОснование); 
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Ссылка", ДокументЗаполнения);
	Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаРТУ", ДатаОстатков);
	
	Если ТипЗнч(ДокументЗаполнения) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗаявкаПокупателя.Товары", "Документ.КорректировкаЗаявкиПокупателя.Товары");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция СоздатьДокументНаОснованииЗаявки(ДанныеЗаполнения, Товары = Неопределено, Услуги = Неопределено, ДатаОплаты, ПараметрыСоздания)
	
	ДокументЗаполнения = Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(ДанныеЗаполнения);
	
	ОбъектРТУ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ОбъектРТУ, ДокументЗаполнения, , "Номер, Дата, СтатусДокумента,СозданВ77, ДатаОплаты, СуммаДокумента");
	ОбъектРТУ.ДатаОплаты = ДатаОплаты;
	
	СоздатьДокументНаОснованииЗаявки_ЗаполнитьТовары(ОбъектРТУ, Товары);	
	
	СоздатьДокументНаОснованииЗаявки_ЗаполнитьУслуги(ОбъектРТУ, Услуги);	
	
	Возврат ОбъектРТУ;
	
КонецФункции

Процедура СоздатьДокументНаОснованииЗаявки_ЗаполнитьТовары(ОбъектРТУ, Товары)  Экспорт 
	
	Если Товары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьЦенуСоСкидкой = Ценообразование.ИспользоватьЦенуСоСкидкойВДокументах();
	
	КлючСвязи = 1;
	Для каждого СтрокаТоваров Из Товары Цикл
		
		НоваяСтрока = ОбъектРТУ.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		НоваяСтрока.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;
		
		Если НЕ УчетНДС.ОпределитьСчетФактураТребуется(ОбъектРТУ) Тогда //Не ОбъектРТУ.Организация.УчитыватьНДС Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;	
		КонецЕсли;
		
		//Добавлено Валиахметов 03.01.2019
		Если НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
		
		Если ИспользоватьЦенуСоСкидкой И СтрокаТоваров.ЦенаСоСкидкой <> 0 Тогда
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСумму", 0);
			СтруктураДействий.Вставить("ПересчитатьПрибыль",);
			СтруктураДействий.Вставить("РассчитатьСуммуНДС", ОбъектРТУ);
			
			мКэшированныеЗначения = Неопределено;
			ОбработкаТабличныхЧастей.ПересчитатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, мКэшированныеЗначения); 
			
		Иначе
			
			НоваяСтрока.ПроцентСкидкиНаценки = 0;
			
			Если Не СтрокаТоваров.СуммаВключаетНДС Тогда 	 
				СуммаНДС = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма,
				Истина, СтрокаТоваров.СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			Иначе
				СуммаНДС = 0;
			КонецЕсли;
			
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СуммаНДС;
			НоваяСтрока.Цена  = НоваяСтрока.Сумма / НоваяСтрока.Количество;
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОбъектРТУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументНаОснованииЗаявки_ЗаполнитьУслуги(ОбъектРТУ, Услуги) Экспорт 
	
	Если Услуги = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаУслуги Из Услуги Цикл
		НоваяСтрока = ОбъектРТУ.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслуги);
		
		//Добавлено Валиахметов 03.01.2019
		Если НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОбъектРТУ);
	КонецЦикла;
	
КонецПроцедуры

Функция РазрешеноСозданиеНаОснованииЗаявки(ДокументЗаполнения)
	
	Разрешено = Ложь;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЗаполнения, "БлокировкаОтгрузки, СтатусДокумента, Контрагент,ДоговорКонтрагента,Контрагент.Блокировка_Отгрузок_Дата,Контрагент.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата, ДоговорКонтрагента.ДоговорПриостановлен, Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента.ДоговорПриостановлен");
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден Тогда 
		Сообщить("Нельзя вводить реализацию на основании неподтвержденной заявки!");
		Возврат Разрешено;
	КонецЕсли;
	
	Если Реквизиты.БлокировкаОтгрузки Тогда
		Сообщить("Нельзя вводить реализацию на основании заявки с блокировкой отгрузки!");
		Возврат Разрешено;
	КонецЕсли;
	
	//Проверка на блокировки
	ДоговорКонтрагента 	= Реквизиты.ДоговорКонтрагента;
	Контрагент 			= Реквизиты.Контрагент;
	
	ДоговорКонтрагентаВзаиморасчетов = Справочники.ДоговорыКонтрагентов.ДоговорВзаиморасчетов(ДоговорКонтрагента);
	КонтрагентВзаиморасчетов 		 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагентаВзаиморасчетов, "Владелец");
	ПоГоловномуКонтрагенту 			 = Контрагент <> КонтрагентВзаиморасчетов;
	
	Если КонтрагентВзаиморасчетов.Блокировка И ЗначениеЗаполнено(КонтрагентВзаиморасчетов.Блокировка_Отгрузок_Дата) Тогда
		Сообщить("Невозможно выписать реализацию. Заблокирован контрагент" + ?(ПоГоловномуКонтрагенту, "(Головной)", ""));
		Возврат Разрешено;
	ИначеЕсли ДоговорКонтрагентаВзаиморасчетов.ДоговорПриостановлен Тогда
		Сообщить("Невозможно выписать реализацию. Договор приостановлен" + ?(ПоГоловномуКонтрагенту, "(Головной)", ""));
		Возврат Разрешено;
	ИначеЕсли ДоговорКонтрагентаВзаиморасчетов.СлужебныйДоговор Тогда
		Сообщить("Невозможно выписать реализацию. Служебный договор" + ?(ПоГоловномуКонтрагенту, "(Головной)", ""));
		Возврат Разрешено;
	КонецЕсли;
	
	Разрешено = Истина;
	Возврат Разрешено;
		
КонецФункции

Функция ИнициализироватьПараметрыСозданияДокументовПоЗаявке() Экспорт
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("БратьСкладИзРезерва", Ложь);
	ПараметрыСоздания.Вставить("БратьСтандартнуюДатуОплаты", Ложь);
	
	Возврат ПараметрыСоздания;
	
КонецФункции

//Дата оплаты
Функция ДатаОплатыДляДокумента(ДокументОбъект) Экспорт
	
	//Для каждой строки документа посчитаем дату оплаты, если они окажутся одинаковыми, то добавим их к общей дате
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтрокиЗаявки", ДокументОбъект.Товары.Выгрузить(, "СтрокаЗаявки, Номенклатура"));
	Запрос.УстановитьПараметр("ДатаРТУ", ДокументОбъект.Дата);	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(СтрокиЗаявки.СтрокаЗаявки КАК Справочник.ИдентификаторыСтрокЗаявок) КАК СтрокаЗаявки,
	               |	ВЫРАЗИТЬ(СтрокиЗаявки.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	               |ПОМЕСТИТЬ втСтрокиЗаявки
	               |ИЗ
	               |	&СтрокиЗаявки КАК СтрокиЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОсобыеУсловияОтсрочки.Изготовитель,
	               |	ОсобыеУсловияОтсрочки.ТипПоставки,
	               |	МАКСИМУМ(ОсобыеУсловияОтсрочки.ДопустимоеЧислоДнейЗадолженности) КАК ДопустимоеЧислоДнейЗадолженности,
	               |	ОсобыеУсловияОтсрочки.ВидРасчетаДней
	               |ПОМЕСТИТЬ втОсобыеУсловияОтсрочки
	               |ИЗ
	               |	РегистрСведений.ОсобыеУсловияОтсрочки.СрезПоследних(&ДатаРТУ, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ОсобыеУсловияОтсрочки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОсобыеУсловияОтсрочки.Изготовитель,
	               |	ОсобыеУсловияОтсрочки.ТипПоставки,
	               |	ОсобыеУсловияОтсрочки.ВидРасчетаДней
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втСтрокиЗаявки.СтрокаЗаявки,
	               |	ЕСТЬNULL(втСтрокиЗаявки.СтрокаЗаявки.ДнейДоставкиДоДомашнегоСклада, 0) КАК ДнейДоставкиДоДомашнегоСклада,
	               |	ЕСТЬNULL(втОсобыеУсловияОтсрочки.ДопустимоеЧислоДнейЗадолженности, 0) КАК ДопустимоеЧислоДнейЗадолженностиОУ,
	               |	ЕСТЬNULL(втОсобыеУсловияОтсрочки.ВидРасчетаДней, НЕОПРЕДЕЛЕНО) КАК ВидРасчетаДнейОУ,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОплаты
	               |ИЗ
	               |	втСтрокиЗаявки КАК втСтрокиЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОсобыеУсловияОтсрочки КАК втОсобыеУсловияОтсрочки
	               |		ПО втСтрокиЗаявки.СтрокаЗаявки.ТипПоставки = втОсобыеУсловияОтсрочки.ТипПоставки
	               |			И втСтрокиЗаявки.Номенклатура.Изготовитель = втОсобыеУсловияОтсрочки.Изготовитель";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	//Общая отсрочка по договору
	ДоговорВзаиморасчетов = Справочники.ДоговорыКонтрагентов.ДоговорВзаиморасчетов(ДокументОбъект.ДоговорКонтрагента);
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорВзаиморасчетов, "ДопустимоеЧислоДнейЗадолженности, ВидРасчетаДней");

	ДопустимоеЧислоДнейЗадолженности = Справочники.ДоговорыКонтрагентов.ДопустимоеЧислоДнейЗадолженности(ДоговорВзаиморасчетов, ДокументОбъект.Дата);
	ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(ДокументОбъект.Дата, ДопустимоеЧислоДнейЗадолженности, Реквизиты.ВидРасчетаДней);
	
	Для каждого СтрокаТЗ Из ТЗ Цикл
		
		//Добавим отсрочку из заявки
		СтрокаТЗ.ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(ДатаОплаты, СтрокаТЗ.ДнейДоставкиДоДомашнегоСклада, Перечисления.ВидыРасчетаДней.ПоБанковскимДням);
		
		//Добавим дни по особым условиям
		Если СтрокаТЗ.ДопустимоеЧислоДнейЗадолженностиОУ > 0 И ЗначениеЗаполнено(СтрокаТЗ.ВидРасчетаДнейОУ) Тогда
			СтрокаТЗ.ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(СтрокаТЗ.ДатаОплаты, СтрокаТЗ.ДопустимоеЧислоДнейЗадолженностиОУ, СтрокаТЗ.ВидРасчетаДнейОУ);
		КонецЕсли;
		
	КонецЦикла;
	
	//Если даты по всем строкам одинаковые, используем эту дату
	ТЗ_ДатыОплаты = ТЗ.Скопировать(, "ДатаОплаты");
	ТЗ_ДатыОплаты.Свернуть("ДатаОплаты");
	Если ТЗ_ДатыОплаты.Количество() = 1 Тогда
		ДатаОплаты = ТЗ_ДатыОплаты[0].ДатаОплаты;
	КонецЕсли;
	
	Возврат ДатаОплаты;
	
КонецФункции

//ОчередьОтправкиДокументовОтгрузки
Процедура ДобавитьВОчередьОтправкиДокументовОтгрузки(СсылкаНаДокумент) Экспорт
	
	ТестовыйКонтрагент = Константы.ТестовыйКонтрагентДляОтправкиОтгрузочныхДокументов.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.СтатусДокумента КАК СтатусДокумента,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.Контрагент.ОсновнаяТорговаяТочка.АвтоотправкаОтгрузочныхДокументов КАК Автоотправка,
		|	РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
		|	РеализацияТоваровУслуг.Контрагент.ГоловнойКонтрагент.ОсновнаяТорговаяТочка.АвтоотправкаОтгрузочныхДокументов  КАК ГоловнойАвтоотправка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий();	
	
	Если ЗначениеЗаполнено(ТестовыйКонтрагент) Тогда
		
		//Ветка для тестовой проверки
		Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен 
				И (Реквизиты.Контрагент = ТестовыйКонтрагент ИЛИ Реквизиты.ГоловнойКонтрагент = ТестовыйКонтрагент) Тогда
			Если Реквизиты.Автоотправка Тогда
				РегистрыСведений.ОчередьОтправкиДокументовОтгрузки.ДобавитьКОтправке(Реквизиты.Контрагент, СсылкаНаДокумент);
			КонецЕсли;
			//Отдельно для головного
			Если Реквизиты.Контрагент <> Реквизиты.ГоловнойКонтрагент И Реквизиты.ГоловнойАвтоотправка Тогда
				РегистрыСведений.ОчередьОтправкиДокументовОтгрузки.ДобавитьКОтправке(Реквизиты.ГоловнойКонтрагент, СсылкаНаДокумент);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		//Основная рабочая ветка
		Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен Тогда
			Если Реквизиты.Автоотправка Тогда
				РегистрыСведений.ОчередьОтправкиДокументовОтгрузки.ДобавитьКОтправке(Реквизиты.Контрагент, СсылкаНаДокумент);
			КонецЕсли;
			//Отдельно для головного
			Если Реквизиты.Контрагент <> Реквизиты.ГоловнойКонтрагент И Реквизиты.ГоловнойАвтоотправка Тогда
				РегистрыСведений.ОчередьОтправкиДокументовОтгрузки.ДобавитьКОтправке(Реквизиты.ГоловнойКонтрагент, СсылкаНаДокумент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоСтатусТовароДвижения(СтатусДокумента) Экспорт 
	
	Возврат СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка Или
			СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугУпакован Или
			СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче Или
			СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугОтгружен;

КонецФункции 