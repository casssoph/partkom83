
//// ОБРАБОТЧИКИ МОДУЛЯ ОБЪЕКТА

Процедура ВыполнитьПроведение(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	СтатусДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "СтатусДокумента");	
	ПроведениеДокументовКлиентСервер.ЗаписатьЗначение(вхПараметры, "СтатусДокумента", СтатусДокумента);
	ПроведениеДокументовКлиентСервер.ЗаписатьЗначение(вхПараметры, "ВидОперации", ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ВидОперацииПоступления"));
	ПроведениеДокументовКлиентСервер.ЗаписатьЗначение(вхПараметры, "СозданВ77", ЗаполненНеРуками(вхСсылкаНаДокумент, СтатусДокумента));
	
	лКонтроль = Неопределено;
	лФильтр = Неопределено;
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ДанныеОбъекта.Контроль", лКонтроль);
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "Фильтр", лФильтр);	
	
	//Если НЕ ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
		//!!!!Обновлять независимо от регистратора
		//Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ЦеныНоменклатурыКонтрагентов") тогда
		//	ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ЦеныНоменклатурыКонтрагентов",
		//	РегистрыСведений_ЦеныНоменклатурыКонтрагентов(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		//КонецЕсли;//+ только для вида поступления на склад или ВМИ
		
		Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Закупки") тогда
			ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "Закупки",
			РегистрыНакопления_Закупки(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		КонецЕсли;//+ только для размещенного товара или для зачета товара ВМИ
		
		//Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваров") тогда
		//	ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ПартииТоваров",
		//	РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		//КонецЕсли;//+
		
	//КонецЕсли;
	
	//ХудинВВ 20180628 ХХ-252
	ЗаполнитьНоменклатуруВНоменклатуреКонтрагентов(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
	
	//20170124
	ОтказыПоРазмещениям = Неопределено; //Отказы по размещения пока не добавляются 13.12.2017 
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "РазмещенияСтрокЗаказов") тогда                   
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "РазмещенияСтрокЗаказов",
		РегистрыНакопления_РазмещенияСтрокЗаказов(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыКРезервированию") тогда                   
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыКРезервированию",
		РегистрыНакопления_ТоварыКРезервированию(вхСсылкаНаДокумент, вхОтказ, вхПараметры, ОтказыПоРазмещениям));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ОтказыПоЗаявкам") Или ОтказыПоРазмещениям <> Неопределено Тогда                   
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ОтказыПоЗаявкам",
		РегистрыНакопления_ОтказыПоЗаявкам(вхСсылкаНаДокумент, вхОтказ, вхПараметры, ОтказыПоРазмещениям));
	КонецЕсли;
	//20170124
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыНаСкладах") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыНаСкладах",
		РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваров") тогда
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		
		лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
								
		лТребуемая = РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры, лФильтр);
		лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
		ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров,
		лРазностныеДанные, лРазделенныеБазовая.Исключенные);
		
		ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		Если лФильтр = Неопределено Тогда 
			РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Истина);
		КонецЕсли;
	КонецЕсли;
				
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Взаиморасчеты") тогда
		// регистр накопления "Взаиморасчеты"
		НовоеПроведениеПоВзаиморасчетам = глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам");
		
		//
		//СписокДоговоров = ОпределитьДоговорДляБлокировки(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		//
		//Запрос = Новый Запрос;
		//Запрос.УстановитьПараметр("СписокЗначений", СписокДоговоров);
		//
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	ДоговорыКонтрагентов.Ссылка
		//               |ИЗ
		//               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		//               |ГДЕ
		//               |	ДоговорыКонтрагентов.Ссылка В (&СписокЗначений)";
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//
		//Если Не РезультатЗапроса.Пустой() Тогда 
		//	БлокировкаДанных = Новый БлокировкаДанных;
		//	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.Взаиморасчеты");
		//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		//	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "Ссылка");
		//	
		//	ЭлементБлокировки = БлокировкаДанных.Добавить("Последовательность.ПоРасчетамСКонтрагентами");
		//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		//	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "Ссылка");
		//	БлокировкаДанных.Заблокировать();
		//КонецЕсли;
		
		лОчищать = Ложь;
		Если НовоеПроведениеПоВзаиморасчетам Тогда 
			лОчищать = ПроведениеДокументовКлиентСервер.НеобходимоОчиститьДвиженияВзаиморасчеты(вхСсылкаНаДокумент);
		Иначе	
			Если (лКонтроль <> Неопределено) тогда
				Если лКонтроль.Свойство("СтарыеЗначения") Тогда
					лСтарыеЗначения = лКонтроль.СтарыеЗначения.Получить(Метаданные.Последовательности.ПоРасчетамСКонтрагентами);
					лНовыеЗначения = лКонтроль.НовыеЗначения.Получить(Метаданные.Последовательности.ПоРасчетамСКонтрагентами);
					Если (лСтарыеЗначения <> Неопределено) И (лНовыеЗначения <> Неопределено) тогда
						лОчищать = (лСтарыеЗначения.Шапка.Дата < лНовыеЗначения.Шапка.Дата)
						И лСтарыеЗначения.Шапка.Проведен;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
		
		Если лОчищать тогда
			ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты);
			лБазовая = Неопределено;
			ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", лБазовая);
			лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		Иначе
			лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
			лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты);	
		КонецЕсли;
		
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
		//лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
		ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты,
		лРазностныеДанные, лРазделенныеБазовая.Исключенные);
		ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
		
		Если НовоеПроведениеПоВзаиморасчетам И лФильтр = Неопределено Тогда 
			РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПоРасчетамСКонтрагентами", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ЦеныНоменклатуры") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ЦеныНоменклатуры",
		РегистрыСведений_ЦеныНоменклатуры(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ЗаказыПоставщикам") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ЗаказыПоставщикам",
		РегистрыНакопления_ЗаказыПоставщикам(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваровVMI") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ПартииТоваровVMI",
		РегистрыНакопления_ПартииТоваровVMI(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "СкидкиVMI") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "СкидкиVMI",
		РегистрыНакопления_СкидкиVMI(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	СтатусДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "СтатусДокумента");
	Если	СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят ИЛИ
			СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен ИЛИ
			СтатусДокумента = Справочники.СтатусыДокументов.ОтгруженПоставщиком Тогда
			ЗарегистрироватьЗаказыКОбменуВОП(вхСсылкаНаДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтменуПроведения(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент);	
	
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	Если глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПоРасчетамСКонтрагентами", Ложь);
	КонецЕсли;
	
	РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Ложь);
	
КонецПроцедуры

Функция СформироватьТаблицуТоваровДокумента(вхСсылкаНаДокумент, вхПараметры)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Регистратор,
	|	ПоступлениеТоваровУслуг.Ссылка.Дата КАК Период,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка.ЭтоМФП
	|			ТОГДА ВЫБОР
	|					КОГДА ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|						ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
	|					ИНАЧЕ ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки
	|				КОНЕЦ
	|		ИНАЧЕ ПоступлениеТоваровУслуг.Ссылка.Склад
	|	КОНЕЦ КАК Склад,
	|	ПоступлениеТоваровУслуг.Ссылка.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.СтрокаПрихода КАК СтрокаПрихода,
	|	ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслуг.Ссылка.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.ОтветХранение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПоступлениеТоваровУслуг.Ссылка.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.Комиссия)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаКомиссию)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусПартии,
	|	ПоступлениеТоваровУслуг.Количество,
	|	ПоступлениеТоваровУслуг.КоличествоРазмещено,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА ПоступлениеТоваровУслуг.Сумма
	|		ИНАЧЕ ПоступлениеТоваровУслуг.Сумма * ПоступлениеТоваровУслуг.Ссылка.КурсВзаиморасчетов / ПоступлениеТоваровУслуг.Ссылка.КратностьВзаиморасчетов
	|	КОНЕЦ КАК СуммаРегл,
	|	ПоступлениеТоваровУслуг.Сумма КАК СуммаУпр,
	|	ПоступлениеТоваровУслуг.Цена КАК Цена,
	|	ПоступлениеТоваровУслуг.Ссылка.ВалютаДокумента КАК Валюта,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаРубль
	|			ТОГДА ПоступлениеТоваровУслуг.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРубли,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаДоллар
	|			ТОГДА ПоступлениеТоваровУслуг.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДоллары,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслуг.Ссылка.ВалютаДокумента = &ВалютаЕвро
	|			ТОГДА ПоступлениеТоваровУслуг.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаЕвро
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
	|	И НЕ ПоступлениеТоваровУслуг.Номенклатура.Услуга";
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ВалютаРубль", Константы.ВалютаРубль.Получить());
	Запрос.УстановитьПараметр("ВалютаДоллар", Константы.ВалютаДоллар.Получить());
	Запрос.УстановитьПараметр("ВалютаЕвро", Константы.ВалютаЕвро.Получить());
	
	ТабТоваров = Запрос.Выполнить().Выгрузить();
	Если ТабТоваров.Количество() > 0 Тогда
		ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");
		ВалютаДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ВалютаДокумента");
		КурсДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "КурсВзаиморасчетов");
		КратностьДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "КратностьВзаиморасчетов");
		КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(Константы.ВалютаДоллар.Получить(), ДатаДокумента);
		КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(Константы.ВалютаЕвро.Получить(), ДатаДокумента);
		Если ВалютаДокумента = Константы.ВалютаРубль.Получить() Тогда
			Для Каждого Товар Из ТабТоваров Цикл
				Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли, Константы.ВалютаРубль.Получить(),
				Константы.ВалютаДоллар.Получить(), 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
				Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли, Константы.ВалютаРубль.Получить(),
				Константы.ВалютаЕвро.Получить(), 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
			КонецЦикла;
			
		ИначеЕсли ВалютаДокумента = Константы.ВалютаДоллар.Получить() Тогда
			Для Каждого Товар Из ТабТоваров Цикл
				Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаДоллары, Константы.ВалютаДоллар.Получить(),
				Константы.ВалютаРубль.Получить(), КурсДокумента, 1, КратностьДокумента, 1);
				Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаДоллары, Константы.ВалютаЕвро.Получить(),
				Константы.ВалютаЕвро.Получить(), КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
			КонецЦикла;
			
		ИначеЕсли ВалютаДокумента = Константы.ВалютаЕвро.Получить() Тогда
			Для Каждого Товар Из ТабТоваров Цикл
				Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаЕвро, Константы.ВалютаЕвро.Получить(),
				Константы.ВалютаДоллар.Получить(), КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
				Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаЕвро, Константы.ВалютаДоллар.Получить(),
				Константы.ВалютаРубль.Получить(), КурсДокумента, 1, КратностьДокумента, 1);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроведениеДокументовКлиентСервер.ЗаписатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров);
	
	Возврат ТабТоваров;
	
КонецФункции

Функция ЗаполненНеРуками(вхСсылкаНаДокумент, вхСтатусДокумента)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорректировкаПоступленияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.КорректировкаПоступленияТоваровУслуг КАК КорректировкаПоступленияТоваровУслуг
	|ГДЕ
	|	КорректировкаПоступленияТоваровУслуг.ДокументОснование = &ДокументОснование"
	);
	Запрос.УстановитьПараметр("ДокументОснование", вхСсылкаНаДокумент);
	
	Если Запрос.Выполнить().Выгрузить().Количество() = 0 И вхСтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РегистрыНакопления_ОтказыПоЗаявкам(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено, ОтказыПоРазмещениям = Неопределено)
	
	СтатусДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента");
		
	ТабОтказов = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ОтказыПоЗаявкам", ТабОтказов);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,ЭтоМФП");
	
	Если Реквизиты.ЭтоМФП Тогда 
		Возврат ТабОтказов;
	КонецЕсли;
	
	//Отказы добавляются в заказах поставщику
	
	//Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Или
	//	 СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда 
	//	Запрос = Новый Запрос(
	//	"ВЫБРАТЬ
	//	|	ПричиныОтказов.Ссылка КАК Регистратор,
	//	|	ПричиныОтказов.Ссылка.Дата КАК Период,
	//	|	ПричиныОтказов.СтрокаЗаявки,
	//	|	ПричиныОтказов.СтрокаПрихода,
	//	|	ПричиныОтказов.ПричинаОтказа,
	//	|	ПричиныОтказов.Количество
	//	|ПОМЕСТИТЬ втОтказы
	//	|ИЗ
	//	|	Документ.ПоступлениеТоваровУслуг.ПричиныОтказов КАК ПричиныОтказов
	//	|ГДЕ
	//	|	ПричиныОтказов.Ссылка = &Ссылка
	//	|	И ПричиныОтказов.СтрокаЗаявки <> &ПустаяСтрокаЗаявки
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	втОтказы.Регистратор,
	//	|	втОтказы.Период,
	//	|	втОтказы.СтрокаЗаявки,
	//	|	втОтказы.ПричинаОтказа,
	//	|	втОтказы.Количество,
	//	|	ПоступлениеТоваровУслугТовары.Цена * втОтказы.Количество КАК СуммаРегл
	//	|ИЗ
	//	|	втОтказы КАК втОтказы
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	//	|		ПО втОтказы.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода"
	//	);
	//	
	//	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//	Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
	//	Выборка = Запрос.Выполнить().Выгрузить();
	//	
	//	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета"); 
	//	Если Реквизиты.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
	//		КурсДокумента = Реквизиты.КурсВзаиморасчетов;
	//		КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
	//		Для Каждого СтрокаТЧ Из Выборка Цикл 
	//			СтрокаТЧ.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаРегл , Реквизиты.ВалютаДокумента,
	//			ВалютаРегламентированногоУчета, КурсДокумента, 1, КратностьДокумента, 1);
	//		КонецЦикла;
	//	КонецЕсли;
	//	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Выборка, ТабОтказов);
	//КонецЕсли;	
	//
	//Если ТипЗнч(ОтказыПоРазмещениям) = Тип("ТаблицаЗначений") Тогда 
	//	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ОтказыПоРазмещениям, ТабОтказов);
	//КонецЕсли;
	
	Возврат ТабОтказов;
	
КонецФункции

//20170124
//----------------------------------------------------
//проведение документов в статусе ЗачетТоваровVMI
Функция РегистрыНакопления_Закупки(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабТоваров = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Закупки", ТабТоваров);
	
	//Если вхПараметры.СозданВ77 ИЛИ вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI Тогда
	Если (вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен
		ИЛИ вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI)
		И НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ЭтоМФП") Тогда
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СформироватьТаблицуТоваровДокумента(вхСсылкаНаДокумент, вхПараметры), ТабТоваров);
		
	КонецЕсли;
			
	Возврат ТабТоваров;
	
КонецФункции

Функция ОпределитьДоговорДляБлокировки(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	СписокДоговоров = Новый СписокЗначений;
	
	
	//Если вхПараметры.СозданВ77 Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхСсылкаНаДокумент, 
		"ВидОперацииПоступления,ДоговорКонтрагента,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,СуммаДокумента");
		
		Если  вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый
			ИЛИ вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен
			ИЛИ вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен
			ИЛИ (ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураРеквизитов.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение
			И вхПараметры.ВидОперации <> Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI) Тогда
			//вхПараметры.СтатусДокумента <> Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI) Тогда
			
			Возврат СписокДоговоров;
		КонецЕсли;
			
		Если СтруктураРеквизитов.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Комиссия Тогда
			
			Возврат СписокДоговоров;
			
		ИначеЕсли СтруктураРеквизитов.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Импорт Тогда
			СтруктураИмпорта = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхСсылкаНаДокумент, 
			"Организация,имп_ДоставкаИнвойс,имп_ДоставкаДоГраницы,имп_ОформлениеГТД,имп_Пошлина,имп_СуммаНДС,имп_ДоставкаТаможни,
			|имп_КА_Таможня,имп_КА_Доставка,имп_ВалДостИнвойс,имп_ВалДостДоГраницы,имп_ВалДостДоТаможни");
			
			СписокДоговоров.Добавить(СтруктураРеквизитов.ДоговорКонтрагента);
			Если ЗначениеЗаполнено(СтруктураИмпорта.имп_КА_Доставка) Тогда
				СписокДоговоров.Добавить(ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураИмпорта.имп_КА_Доставка,"ОсновнойДоговорКонтрагентаЗакупка"));					
			КонецЕсли;
				
			Если ЗначениеЗаполнено(СтруктураИмпорта.имп_КА_Таможня) Тогда
				
				ЗапросДоговораТаможни = Новый Запрос(
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
				|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления"
				);
				ЗапросДоговораТаможни.УстановитьПараметр("Владелец", СтруктураИмпорта.имп_КА_Таможня);
				ЗапросДоговораТаможни.УстановитьПараметр("Организация", СтруктураИмпорта.Организация);
				ТабЗ = запросДоговораТаможни.Выполнить().Выгрузить();
				Если ТабЗ.Количество() > 0 Тогда
					ДоговорТаможни = ТабЗ[0].Ссылка;
				Иначе
					ДоговорТаможни = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураИмпорта.имп_КА_Таможня,"ОсновнойДоговорКонтрагентаЗакупка");
				КонецЕсли;
				СписокДоговоров.Добавить(ДоговорТаможни);
			КонецЕсли;
				
		Иначе
			СписокДоговоров.Добавить(СтруктураРеквизитов.ДоговорКонтрагента);
		КонецЕсли;
				
	//КонецЕсли;
		
	Возврат СписокДоговоров;
			
КонецФункции

Функция РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабВзаиморасчеты = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", ТабВзаиморасчеты);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты Тогда
		Возврат ТабВзаиморасчеты
	КонецЕсли;
	
	//Если вхПараметры.СозданВ77 Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхСсылкаНаДокумент, 
		"ВидОперацииПоступления,ДоговорКонтрагента,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,СуммаДокумента");
		
		Если  вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый
			ИЛИ вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен
			ИЛИ вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен
			ИЛИ (ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураРеквизитов.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение
			И вхПараметры.ВидОперации <> Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI) Тогда
			//вхПараметры.СтатусДокумента <> Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI) Тогда
			
			Возврат ТабВзаиморасчеты;
		КонецЕсли;
			
		Если СтруктураРеквизитов.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Комиссия Тогда
			Возврат ТабВзаиморасчеты;
			
		ИначеЕсли СтруктураРеквизитов.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Импорт Тогда
			СтруктураИмпорта = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхСсылкаНаДокумент, 
			"Организация,имп_ДоставкаИнвойс,имп_ДоставкаДоГраницы,имп_ОформлениеГТД,имп_Пошлина,имп_СуммаНДС,имп_ДоставкаТаможни,
			|имп_КА_Таможня,имп_КА_Доставка,имп_ВалДостИнвойс,имп_ВалДостДоГраницы,имп_ВалДостДоТаможни");
			
			Если НЕ ЗначениеЗаполнено(СтруктураИмпорта.имп_ВалДостИнвойс) Тогда
				СтруктураИмпорта.имп_ВалДостИнвойс = СтруктураРеквизитов.ВалютаДокумента;
			КонецЕсли;
			Если СтруктураРеквизитов.ВалютаДокумента <> СтруктураИмпорта.имп_ВалДостИнвойс Тогда
				СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураРеквизитов.ВалютаДокумента, вхСсылкаНаДокумент.МоментВремени().Дата);
				СтруктураКурсаВалДостИнвойс = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураИмпорта.имп_ВалДоставкаИнвойс, вхСсылкаНаДокумент.МоментВремени().Дата);
				СуммаДолга = СтруктураРеквизитов.СуммаДокумента + 
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураИмпорта.имп_ДоставкаИнвойс, СтруктураИмпорта.имп_ВалДоставкаИнвойс, СтруктураРеквизитов.ВалютаДокумента,
				СтруктураКурсаВалДостИнвойс.Курс, СтруктураКурсаДокумента.Курс, СтруктураКурсаВалДостИнвойс.Кратность, СтруктураКурсаДокумента.Кратность);
				//пересчитываем из валюты в валюту по курсу ЦБ на дату документа
			Иначе
				СуммаДолга = СтруктураРеквизитов.СуммаДокумента + СтруктураИмпорта.имп_ДоставкаИнвойс;
			КонецЕсли;
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УправлениеВзаиморасчетами.ПростоеПроведениеПоВзаиморасчетам(вхСсылкаНаДокумент, СтруктураРеквизитов.ДоговорКонтрагента, ,
			СтруктураРеквизитов.ВалютаДокумента, СтруктураРеквизитов.КурсВзаиморасчетов, СтруктураРеквизитов.КратностьВзаиморасчетов, 
			-СуммаДолга, 1), ТабВзаиморасчеты); //отразили задолженность поставщику
					
			Если ЗначениеЗаполнено(СтруктураИмпорта.имп_КА_Доставка) Тогда
				СуммаДолга = 0;
				Если НЕ ЗначениеЗаполнено(СтруктураИмпорта.имп_ВалДостДоГраницы) Тогда
					СтруктураИмпорта.имп_ВалДостДоГраницы = СтруктураРеквизитов.ВалютаДокумента;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтруктураИмпорта.имп_ВалДостДоТаможни) Тогда
					СтруктураИмпорта.имп_ВалДостДоТаможни = СтруктураРеквизитов.ВалютаДокумента;
				КонецЕсли;
				
				Если СтруктураИмпорта.имп_ВалДостДоГраницы = СтруктураИмпорта.имп_ВалДостДоТаможни Тогда
					СуммаДолга = СуммаДолга + СтруктураИмпорта.имп_ДоставкаДоГраницы  + СтруктураИмпорта.имп_ДоставкаТаможни;
					СтруктураКурсаВалДостДоГраницы = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураИмпорта.имп_ВалДостДоГраницы, вхСсылкаНаДокумент.МоментВремени().Дата);
					СуммаДолга = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураИмпорта.имп_ВалДостДоГраницы, Константы.ВалютаРубль.Получить(),
					СтруктураКурсаВалДостДоГраницы.Курс, 1, СтруктураКурсаВалДостДоГраницы.Кратность, 1);
				Иначе
					Если СтруктураИмпорта.имп_ВалДостДоГраницы <> Константы.ВалютаРубль.Получить() Тогда
						СтруктураКурсаВалДостДоГраницы = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураИмпорта.имп_ВалДостДоГраницы, вхСсылкаНаДокумент.МоментВремени().Дата);
						СуммаДолга = СуммаДолга + 
						МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураИмпорта.имп_ДоставкаДоГраницы, СтруктураИмпорта.имп_ВалДостДоГраницы, Константы.ВалютаРубль.Получить(),
						СтруктураКурсаВалДостДоГраницы.Курс, 1, СтруктураКурсаВалДостДоГраницы.Кратность, 1);
						//пересчитываем из валюты в рубли по курсу ЦБ на дату документа
					Иначе
						СуммаДолга = СуммаДолга + СтруктураИмпорта.имп_ДоставкаДоГраницы;
					КонецЕсли;
					
					Если СтруктураИмпорта.имп_ВалДостДоТаможни <> Константы.ВалютаРубль.Получить() Тогда
						СтруктураКурсаВалДостДоТаможни = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураИмпорта.имп_ВалДостДоТаможни, вхСсылкаНаДокумент.МоментВремени().Дата);
						СуммаДолга = СуммаДолга + 
						МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураИмпорта.имп_ДоставкаТаможни, СтруктураИмпорта.имп_ВалДостДоТаможни, Константы.ВалютаРубль.Получить(),
						СтруктураКурсаВалДостДоТаможни.Курс, 1, СтруктураКурсаВалДостДоТаможни.Кратность, 1);
						//пересчитываем из валюты в рубли по курсу ЦБ на дату документа
					Иначе
						СуммаДолга = СуммаДолга + СтруктураИмпорта.имп_ДоставкаТаможни;
					КонецЕсли;
				КонецЕсли;
								
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УправлениеВзаиморасчетами.ПростоеПроведениеПоВзаиморасчетам(вхСсылкаНаДокумент, 
				ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураИмпорта.имп_КА_Доставка,"ОсновнойДоговорКонтрагентаЗакупка"), ,
				Константы.ВалютаРубль.Получить(), 1, 1, -СуммаДолга, 1), ТабВзаиморасчеты);//отразили задолженность за доставку
			КонецЕсли;
				
			Если ЗначениеЗаполнено(СтруктураИмпорта.имп_КА_Таможня) Тогда
				СуммаДолга = СтруктураИмпорта.имп_Пошлина + СтруктураИмпорта.имп_ОформлениеГТД + СтруктураИмпорта.имп_СуммаНДС;
				
				ЗапросДоговораТаможни = Новый Запрос(
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
				|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления"
				);
				ЗапросДоговораТаможни.УстановитьПараметр("Владелец", СтруктураИмпорта.имп_КА_Таможня);
				ЗапросДоговораТаможни.УстановитьПараметр("Организация", СтруктураИмпорта.Организация);
				ТабЗ = запросДоговораТаможни.Выполнить().Выгрузить();
				Если ТабЗ.Количество() > 0 Тогда
					ДоговорТаможни = ТабЗ[0].Ссылка;
				Иначе
					ДоговорТаможни = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураИмпорта.имп_КА_Таможня,"ОсновнойДоговорКонтрагентаЗакупка");
				КонецЕсли;
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УправлениеВзаиморасчетами.ПростоеПроведениеПоВзаиморасчетам(вхСсылкаНаДокумент, 
				ДоговорТаможни, ,
				Константы.ВалютаРубль.Получить(), 1, 1, -СуммаДолга, 1), ТабВзаиморасчеты);//отразили задолженность на таможне
			КонецЕсли;
				
		Иначе
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УправлениеВзаиморасчетами.ПростоеПроведениеПоВзаиморасчетам(вхСсылкаНаДокумент, СтруктураРеквизитов.ДоговорКонтрагента, ,
					СтруктураРеквизитов.ВалютаДокумента, СтруктураРеквизитов.КурсВзаиморасчетов, СтруктураРеквизитов.КратностьВзаиморасчетов, 
					-СтруктураРеквизитов.СуммаДокумента, 1), ТабВзаиморасчеты);
		КонецЕсли;
				
	//КонецЕсли;
		
	Возврат ТабВзаиморасчеты;
			
КонецФункции
//----------------------------------------------------
//проведение загруженных их 7.7 документов 

//вспомогательные
Функция ПолучитьПрайсПоставщикаVMI(вхСсылкаНадокумент)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрайсыПоставщиков.Ссылка
	|ИЗ
	|	Справочник.ПрайсыПоставщиков КАК ПрайсыПоставщиков
	|ГДЕ
	|	ПрайсыПоставщиков.Владелец = &Владелец");
	
	вхТорговаяТочка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ТорговаяТочка");
	Если ЗначениеЗаполнено(вхТорговаяТочка) Тогда
		Запрос.УстановитьПараметр("Владелец", вхТорговаяТочка);
	Иначе
		вхКонтрагент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "Контрагент");
		Запрос.УстановитьПараметр("Владелец", вхКонтрагент.ОсновнаяТорговаяТочка);
	КонецЕсли;
	
	СписокПрайсов = Запрос.Выполнить().Выгрузить();
	
	Если СписокПрайсов.Количество() > 0 Тогда
		Возврат СписокПрайсов[0].Ссылка;
	Иначе
		Возврат Справочники.ПрайсыПоставщиков.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

Функция РегистрыНакопления_РезервыТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	вхПериод = вхСсылкаНаДокумент.МоментВремени();
	лДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ВидОперацииПоступления,Склад");
	
	ТабРезервы = Новый ТаблицаЗначений;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("РезервыТоваров", ТабРезервы);
	
	Если лДанныеОбъекта.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТабРезервы
	КонецЕсли;
	
	//Если вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда
	//	ТабПоЗаявкам = Новый ТаблицаЗначений;
	//	
	//	Для Каждого Товар Из ТабПоЗаявкам Цикл
	//		нс = ТабРезервы.Добавить();
	//		нс.ВидДвижения = ВидДвиженияНакопления.Приход;
	//		нс.Регистратор = вхСсылкаНаДокумент;
	//		нс.Период = вхПериод.Дата;
	//		нс.Склад = лДанныеОбъекта.Склад;
	//		нс.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
	//		нс.Качество = Товар.Качество;
	//		нс.СтрокаЗаявки = Товар.СтрокаЗаявки;
	//		нс.Количество = Товар.Количество;
	//	КонецЦикла;
	//						
	//КонецЕсли;
	
	Возврат ТабРезервы;
	
КонецФункции

Функция РегистрыСведений_ЦеныНоменклатурыКонтрагентов(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	ВидОперации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ВидОперацииПоступления");
	ТабЦен = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраСведений("ЦеныНоменклатурыКонтрагентов", ТабЦен);
	
	Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТабЦен;
	КонецЕсли;
	
	ВидОперации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ВидОперацииПоступления");
	Проводить = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "РегистрироватьЦеныПоставщика");
	
	//Если ВидОперации <> Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI И Проводить Тогда
	//	ТабПоЗаявкам = Новый ТаблицаЗначений;
	//	Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаРазмещенияПоЗаявкам", ТабПоЗаявкам) Тогда
	//		//ТабПоЗаявкам = РегистрыНакопления_РазмещенияСтрокЗаявок(вхСсылкаНаДокумент, вхОтказ);
	//		СформироватьТаблицуРазмещенияПоЗаявкам(вхСсылкаНаДокумент, вхПараметры);
	//		ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаРазмещенияПоЗаявкам", ТабПоЗаявкам);
	//		
	//	КонецЕсли;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	&вхПериод КАК Период,
	//	|	ПоступлениеТоваровУслугТовары.Ссылка КАК Регистратор,
	//	|	&ПрайсПоставщика,
	//	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	//	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	//	|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента КАК Валюта,
	//	|	ПоступлениеТоваровУслугТовары.Цена
	//	|ИЗ
	//	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	//	|ГДЕ
	//	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
	//	Запрос.УстановитьПараметр("вхПериод", вхСсылкаНаДокумент.МоментВремени().Дата);
	//	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНадокумент);
	//	
	//	Если ВидОперации = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда
	//		Запрос.УстановитьПараметр("ПрайсПоставщика", ПолучитьПрайсПоставщикаVMI(вхСсылкаНадокумент));
	//		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабЦен);
	//		
	//	Иначе
	//		Запрос.Текст = Запрос.Текст + " И ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура";
	//		Для Каждого Стр Из ТабПоЗаявкам Цикл
	//			Запрос.УстановитьПараметр("ПрайсПоставщика", Стр.СтрокаЗаявки.ПрайсПоставщика);
	//			Запрос.УстановитьПараметр("Номенклатура", Стр.СтрокаЗаявки.Номенклатура);
	//			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабЦен);
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат ТабЦен;
	
КонецФункции

Функция РегистрыСведений_ЦеныНоменклатуры(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабЦен = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраСведений("ЦеныНоменклатуры", ТабЦен);
	
	ДатаДокумента =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");
	Если ДатаДокумента < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа")  Тогда
		Возврат ТабЦен;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ЭтоМФП") Тогда
		Возврат ТабЦен;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "флОбновлятьЦены") Тогда
		ТорговаяТочка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ТорговаяТочка");
		Если НЕ ЗначениеЗаполнено(ТорговаяТочка) Тогда
			Контрагент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "Контрагент");
			ТорговаяТочка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент, "ОсновнаяТорговаяТочка");
		КонецЕсли;
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТорговаяТочка, "ВсегдаОбновлятьЦены") Тогда
			Возврат ТабЦен;
		КонецЕсли;
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	ПоступлениеТоваровУслугТовары.Номенклатура
	//               |ИЗ
	//               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	//               |ГДЕ
	//               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
	//Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//БлокировкаДанных = Новый БлокировкаДанных;
	//
	//ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ТоварыНаСкладах");
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	//ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	//
	//ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	//ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	//
	//БлокировкаДанных.Заблокировать();
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ПоступлениеТоваровУслуг.Склад
	//|ПОМЕСТИТЬ Скл
	//|ИЗ
	//|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//|ГДЕ
	//|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПрайсыПоставщиков.Ссылка
	//|ИЗ
	//|	Справочник.ПрайсыПоставщиков КАК ПрайсыПоставщиков
	//|ГДЕ
	//|	ПрайсыПоставщиков.Склад В
	//|			(ВЫБРАТЬ
	//|				Скл.Склад
	//|			ИЗ
	//|				Скл КАК Скл)"
	//);
	//Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Количество() = 0 Тогда
	//	//нет прайсов на складе
	//	Возврат ТабЦен;
	//ИначеЕсли Выборка.Количество() > 1 Тогда
	//	//это не склад, на котором можно обновить прайс поступлением
	//	Возврат ТабЦен;
	//КонецЕсли;
	//Выборка.Следующий();
	//ПрайсПоставщика = Выборка.Ссылка;
	
	Базовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыСведений.ЦеныНоменклатуры);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода,
	               |	СУММА(ПоступлениеТоваровУслугПричиныОтказов.Количество) КАК Количество,
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки
	               |ПОМЕСТИТЬ втОтказы
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.ПричиныОтказов КАК ПоступлениеТоваровУслугПричиныОтказов
	               |ГДЕ
	               |	ПоступлениеТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ПоступлениеТоваровУслугТовары.Цена_Другая > 0
	               |				ТОГДА ПоступлениеТоваровУслугТовары.Цена_Другая
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ПоступлениеТоваровУслугТовары.имп_СуммаРуб > 0
	               |						ТОГДА ВЫБОР
	               |								КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	               |									ТОГДА ПоступлениеТоваровУслугТовары.имп_СуммаРуб / ПоступлениеТоваровУслугТовары.Количество
	               |								ИНАЧЕ (ПоступлениеТоваровУслугТовары.имп_СуммаРуб + ПоступлениеТоваровУслугТовары.имп_СуммаНДС) / ПоступлениеТоваровУслугТовары.Количество
	               |							КОНЕЦ
	               |					ИНАЧЕ ПоступлениеТоваровУслугТовары.Цена
	               |				КОНЕЦ
	               |		КОНЕЦ) КАК Цена,
	               |	СУММА(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Количество - ЕСТЬNULL(втОтказы.Количество, 0)) КАК Количество,
	               |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения
	               |ПОМЕСТИТЬ втТовары
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
	               |		ПО ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода = втОтказы.СтрокаПрихода
	               |			И ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки = втОтказы.СтрокаЗаявки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |		ПО ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
	               |ГДЕ
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка = &Ссылка
	               |	И ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	               |	И ЕСТЬNULL(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.Заявка.ВидОперации, &ВидОперацииПополнение) = &ВидОперацииПополнение
	               |	И ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Количество - ЕСТЬNULL(втОтказы.Количество, 0) > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугТовары.Номенклатура,
	               |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток
	               |ПОМЕСТИТЬ втОстатки
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&КонПериода,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						втТовары.Номенклатура
	               |					ИЗ
	               |						втТовары)
	               |				И НЕ Склад.Заблокирован) КАК ТоварыНаСкладахОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена,
	               |	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ПОМЕСТИТЬ втЦены
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			&КонПериода,
	               |			ТипЦен = &ТипЦен
	               |				И Номенклатура В
	               |					(ВЫБРАТЬ
	               |						втТовары.Номенклатура
	               |					ИЗ
	               |						втТовары)) КАК ЦеныНоменклатурыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	ЕдиницаИзмерения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	втТовары.Номенклатура,
	               |	втТовары.Цена,
	               |	втТовары.ЕдиницаИзмерения
	               |ИЗ
	               |	втТовары КАК втТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	               |		ПО втТовары.Номенклатура = втОстатки.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
	               |		ПО втТовары.Номенклатура = втЦены.Номенклатура
	               |			И втТовары.ЕдиницаИзмерения = втЦены.ЕдиницаИзмерения
	               |ГДЕ
	               |	(ЕСТЬNULL(втЦены.Цена, 0) = 0
	               |			ИЛИ втТовары.Цена <> ЕСТЬNULL(втЦены.Цена, 0))
	               |	И НЕ(2 * ЕСТЬNULL(втОстатки.КоличествоОстаток, 0) > втТовары.Количество
	               |				И втТовары.Цена < ЕСТЬNULL(втЦены.Цена, 0))
	               |	И втТовары.Цена > 0";
	
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(вхСсылкаНаДокумент.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ВидОперацииПополнение", Перечисления.ВидыОперацийЗаявкаПокупателя.ПополнениеСклада);
	//Запрос.УстановитьПараметр("ПрайсПоставщика", ПрайсПоставщика);
	
	ЗакупочнаяРуб = Константы.ЗакупочныйТипЦенРуб.Получить();
	Запрос.УстановитьПараметр("ТипЦен", ЗакупочнаяРуб);
	
	ЗакупочнаяДолл = Константы.ЗакупочныйТипЦенДолл.Получить();
	ЗакупочнаяЕвро = Константы.ЗакупочныйТипЦенЕвро.Получить();
	ВалютаРуб = Константы.ВалютаРубль.Получить();
	ВалютаДолл = Константы.ВалютаДоллар.Получить();
	ВалютаЕвро = Константы.ВалютаЕвро.Получить();
	СтруктураКурсаДолл = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДолл, ДатаДокумента);
	СтруктураКурсаЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЕвро, ДатаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
			зап = ТабЦен.Добавить();
			ЗаполнитьЗначенияСвойств(зап, Выборка);
			
			зап.Регистратор = вхСсылкаНаДокумент;
			зап.Период = ДатаДокумента;
			зап.ТипЦен = ЗакупочнаяРуб;
			зап.Валюта = ВалютаРуб;
			зап.ПроцентСкидкиНаценки = ЗакупочнаяРуб.ПроцентСкидкиНаценки;
			зап.СпособРасчетаЦены = ЗакупочнаяРуб.СпособРасчетаЦены;
			зап.Обновил = ПолныеПрава.ТекущийПользователь();
			
			зап = ТабЦен.Добавить();
			ЗаполнитьЗначенияСвойств(зап, Выборка);
			зап.Регистратор = вхСсылкаНаДокумент;
			зап.Период = ДатаДокумента;
			зап.ТипЦен = ЗакупочнаяДолл;
			зап.Валюта = ВалютаДолл;
			зап.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, ВалютаРуб, ВалютаДолл,
			1, СтруктураКурсаДолл.Курс, 1, СтруктураКурсаДолл.Кратность);
			зап.ПроцентСкидкиНаценки = ЗакупочнаяДолл.ПроцентСкидкиНаценки;
			зап.СпособРасчетаЦены = ЗакупочнаяДолл.СпособРасчетаЦены;
			зап.Обновил = ПолныеПрава.ТекущийПользователь();
			
			зап = ТабЦен.Добавить();
			ЗаполнитьЗначенияСвойств(зап, Выборка);
			зап.Регистратор = вхСсылкаНаДокумент;
			зап.Период = ДатаДокумента;
			зап.ТипЦен = ЗакупочнаяЕвро;
			зап.Валюта = ВалютаЕвро;
			зап.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, ВалютаРуб, ВалютаЕвро,
			1, СтруктураКурсаЕвро.Курс, 1, СтруктураКурсаЕвро.Кратность);
			зап.ПроцентСкидкиНаценки = ЗакупочнаяЕвро.ПроцентСкидкиНаценки;
			зап.СпособРасчетаЦены = ЗакупочнаяЕвро.СпособРасчетаЦены;
			зап.Обновил = ПолныеПрава.ТекущийПользователь();
	КонецЦикла;
	
	// Если изменился только тот, кто обновил, то оставляем как есть
	
	КопияБазовая = Базовая.Скопировать();
	КопияТаблицаДвижений = ТабЦен.Скопировать();
	
	КопияБазовая.Колонки.Удалить("Обновил");
	КопияТаблицаДвижений.Колонки.Удалить("Обновил");
	лДобавить = Неопределено;
	лУдалить = Неопределено;
	
	Если РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичны(КопияБазовая, КопияТаблицаДвижений, лДобавить, лУдалить) Тогда 
		Возврат Базовая;
	КонецЕсли;
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	Склады.Ссылка КАК склад
	//|ПОМЕСТИТЬ Склады
	//|ИЗ
	//|	Справочник.Склады КАК Склады
	//|ГДЕ
	//|	Склады.ОбменСTopLog = ИСТИНА
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Товары.СтрокаПрихода,
	//|	Товары.Номенклатура,
	//|	ВЫБОР
	//|		КОГДА Товары.Цена_Другая > 0
	//|			ТОГДА Товары.Цена_Другая
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА Товары.имп_СуммаРуб > 0
	//|					ТОГДА ВЫБОР
	//|							КОГДА Товары.Ссылка.СуммаВключаетНДС
	//|								ТОГДА Товары.имп_СуммаРуб / Товары.Количество
	//|							ИНАЧЕ (Товары.имп_СуммаРуб + Товары.имп_СуммаНДС) / Товары.Количество
	//|						КОНЕЦ
	//|				ИНАЧЕ Товары.Цена
	//|			КОНЕЦ
	//|	КОНЕЦ КАК Цена,
	//|	Товары.Количество - Товары.КоличествоНеПринято КАК Количество,
	//|	Товары.ЕдиницаИзмерения,
	//|	Товары.Ссылка.Склад КАК Склад,
	//|	&ТипЦен
	//|ПОМЕСТИТЬ Товары
	//|ИЗ
	//|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	//|ГДЕ
	//|	Товары.Ссылка = &Ссылка
	//|	И Товары.Количество - Товары.КоличествоНеПринято > 0
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Товары.Склад КАК Склад,
	//|	Товары.Номенклатура,
	//|	Товары.ЕдиницаИзмерения,
	//|	Товары.Цена,
	//|	ЕСТЬNULL(РегЦен.Цена, 0) КАК ЦенаВРегистре,
	//|	Товары.Количество КАК Количество,
	//|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	//|	СУММА(ЕСТЬNULL(Размещение.КоличествоСток, 0)) КАК КоличествоСток
	//|ИЗ
	//|	Товары КАК Товары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			РазмещениеПрихода.СтрокаПрихода КАК СтрокаПрихода,
	//|			РазмещениеПрихода.СтрокаПрихода КАК СтрокаЗаявки,
	//|			СУММА(ВЫБОР
	//|					КОГДА РазмещениеПрихода.СтрокаЗаявки.Заявка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.ПополнениеСклада)
	//|						ТОГДА ВЫБОР
	//|								КОГДА ЕСТЬNULL(СтрокиКорректировок.Количество, 0) < РазмещениеПрихода.Количество
	//|									ТОГДА ЕСТЬNULL(СтрокиКорректировок.Количество, 0)
	//|								ИНАЧЕ РазмещениеПрихода.Количество
	//|							КОНЕЦ
	//|					ИНАЧЕ РазмещениеПрихода.Количество
	//|				КОНЕЦ) КАК КоличествоСток
	//|		ИЗ
	//|			Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК РазмещениеПрихода
	//|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|					МАКСИМУМ(ТоварыВЗаявках.Ссылка) КАК Ссылка,
	//|					ТоварыВЗаявках.СтрокаЗаявки КАК СтрокаЗаявки,
	//|					СУММА(ТоварыВЗаявках.Количество) КАК Количество
	//|				ИЗ
	//|					Документ.КорректировкаЗаявкиПокупателя.Товары КАК ТоварыВЗаявках
	//|				ГДЕ
	//|					ТоварыВЗаявках.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.ПополнениеСклада)
	//|					И ТоварыВЗаявках.Ссылка.Дата <= &ДатаДокумента
	//|				
	//|				СГРУППИРОВАТЬ ПО
	//|					ТоварыВЗаявках.Ссылка,
	//|					ТоварыВЗаявках.СтрокаЗаявки) КАК СтрокиКорректировок
	//|				ПО (СтрокиКорректировок.СтрокаЗаявки = РазмещениеПрихода.СтрокаЗаявки)
	//|		ГДЕ
	//|			РазмещениеПрихода.Ссылка = &Ссылка
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			РазмещениеПрихода.СтрокаПрихода,
	//|			РазмещениеПрихода.СтрокаЗаявки,
	//|			РазмещениеПрихода.СтрокаПрихода) КАК Размещение
	//|		ПО (Размещение.СтрокаПрихода = Товары.СтрокаПрихода)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	//|				&МоментВремени,
	//|				Номенклатура В
	//|						(ВЫБРАТЬ
	//|							Товары.Номенклатура
	//|						ИЗ
	//|							Товары)
	//|					И Склад В
	//|						(ВЫБРАТЬ
	//|							Склады.склад
	//|						ИЗ
	//|							Склады)) КАК Остатки
	//|		ПО (Остатки.Номенклатура = Товары.Номенклатура)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|			ЦеныНоменклатуры.Цена КАК Цена
	//|		ИЗ
	//|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|					&МоментВремени,
	//|					(ТипЦен, Номенклатура) В
	//|						(ВЫБРАТЬ
	//|							Товары.ТипЦен,
	//|							Товары.Номенклатура
	//|						ИЗ
	//|							Товары)) КАК ЦеныНоменклатуры) КАК РегЦен
	//|		ПО (РегЦен.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения)
	////|ГДЕ
	////|	ЕСТЬNULL(Размещение.КоличествоСток, 0) > 0
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Товары.Склад,
	//|	Товары.Номенклатура,
	//|	Товары.ЕдиницаИзмерения,
	//|	Товары.Цена,
	//|	ЕСТЬNULL(РегЦен.Цена, 0),
	//|	Товары.Количество,
	//|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0)"
	//);
	//Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//Параметры = Новый Массив(2);
	//Параметры[0] = вхСсылкаНаДокумент.МоментВремени().Дата;
	//Параметры[1] = ВидГраницы.Исключая;
	//Граница = Новый(Тип("Граница"), Параметры);
	//Запрос.УстановитьПараметр("МоментВремени", Граница);
	//Запрос.УстановитьПараметр("ДатаДокумента", Параметры[0]);
	//
	//ЗакупочнаяРуб = Константы.ЗакупочныйТипЦенРуб.Получить();
	//ЗакупочнаяДолл = Константы.ЗакупочныйТипЦенДолл.Получить();
	//ЗакупочнаяЕвро = Константы.ЗакупочныйТипЦенЕвро.Получить();
	//ВалютаРуб = Константы.ВалютаРубль.Получить();
	//ВалютаДолл = Константы.ВалютаДоллар.Получить();
	//ВалютаЕвро = Константы.ВалютаЕвро.Получить();
	//СтруктураКурсаДолл = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДолл, Параметры[0]);
	//СтруктураКурсаЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЕвро, Параметры[0]);
	//
	//Запрос.УстановитьПараметр("ТипЦен", ЗакупочнаяРуб);
	//
	//Для Каждого Товар Из Запрос.Выполнить().Выгрузить() Цикл
	//	// Товар.Цена  				= Новая Цена
	//	// Товар.ЦенаВРегистре 		= СтараяЦена
	//	// Товар.Количество 		= Количество в документе
	//	// Товар.КоличествоОстаток  = Остаток в регистре
	//	
	//	Товар.Цена = Окр(Товар.Цена, 2); 
	//	ОбновитьЦену = Ложь;
	//	Если Товар.Цена > 0 Тогда
	//		Если Товар.ЦенаВРегистре = 0 Тогда 
	//			ОбновитьЦену = Истина;
	//		ИначеЕсли Товар.ЦенаВРегистре > Товар.Цена И Товар.Количество < Товар.КоличествоОстаток * 2 Тогда
	//			// Если НоваяЦена меньше СтаройЦены и ОстатокНаСкладе*2 меньше чем Количество Приход
	//			ОбновитьЦену = Ложь;
	//		ИначеЕсли Товар.Цена <> Товар.ЦенаВРегистре Тогда
	//			ОбновитьЦену = Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если ОбновитьЦену Тогда
	//		зап = ТабЦен.Добавить();
	//		зап.Регистратор = вхСсылкаНаДокумент;
	//		зап.Период = вхСсылкаНаДокумент.МоментВремени().Дата;
	//		зап.ТипЦен = ЗакупочнаяРуб;
	//		зап.Номенклатура = Товар.Номенклатура;
	//		зап.Валюта = ВалютаРуб;
	//		зап.Цена = Товар.Цена;
	//		зап.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
	//		зап.ПроцентСкидкиНаценки = ЗакупочнаяРуб.ПроцентСкидкиНаценки;
	//		зап.СпособРасчетаЦены = ЗакупочнаяРуб.СпособРасчетаЦены;
	//		зап.Обновил = ПараметрыСеанса.ТекущийПользователь;
	//		
	//		зап = ТабЦен.Добавить();
	//		зап.Регистратор = вхСсылкаНаДокумент;
	//		зап.Период = вхСсылкаНаДокумент.МоментВремени().Дата;
	//		зап.ТипЦен = ЗакупочнаяДолл;
	//		зап.Номенклатура = Товар.Номенклатура;
	//		зап.Валюта = ВалютаДолл;
	//		зап.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Цена, ВалютаРуб, ВалютаДолл,
	//		1, СтруктураКурсаДолл.Курс, 1, СтруктураКурсаДолл.Кратность);
	//		зап.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
	//		зап.ПроцентСкидкиНаценки = ЗакупочнаяДолл.ПроцентСкидкиНаценки;
	//		зап.СпособРасчетаЦены = ЗакупочнаяДолл.СпособРасчетаЦены;
	//		зап.Обновил = ПараметрыСеанса.ТекущийПользователь;
	//		
	//		зап = ТабЦен.Добавить();
	//		зап.Регистратор = вхСсылкаНаДокумент;
	//		зап.Период = вхСсылкаНаДокумент.МоментВремени().Дата;
	//		зап.ТипЦен = ЗакупочнаяЕвро;
	//		зап.Номенклатура = Товар.Номенклатура;
	//		зап.Валюта = ВалютаЕвро;
	//		зап.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Цена, ВалютаРуб, ВалютаЕвро,
	//		1, СтруктураКурсаЕвро.Курс, 1, СтруктураКурсаЕвро.Кратность);
	//		зап.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
	//		зап.ПроцентСкидкиНаценки = ЗакупочнаяЕвро.ПроцентСкидкиНаценки;
	//		зап.СпособРасчетаЦены = ЗакупочнаяЕвро.СпособРасчетаЦены;
	//		зап.Обновил = ПараметрыСеанса.ТекущийПользователь;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат ТабЦен;
	
КонецФункции

Функция ПолучитьМетаданные()
	Возврат Метаданные.Документы.ПоступлениеТоваровУслуг;	
КонецФункции

Функция ПолучитьРеквизитыКонтроля(вхПараметр = Неопределено) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Шапка", "Дата,Проведен");
	Возврат Результат;
КонецФункции

Функция ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр = Неопределено) Экспорт
	Возврат	РаботаСПоследовательностямиКлиентСервер.ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр);
КонецФункции

Функция ПолучитьДанныеГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхФильтр = Неопределено) Экспорт
	
	Результат = Неопределено;
	лМетаданныеПоследовательности = Неопределено;
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеГраницПоследовательности]: неправильный параметр номер 2.";	
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) Тогда
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.Взаиморасчеты, вхФильтр);
	ИначеЕсли (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) Тогда 	
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.ПартииТоваров, вхФильтр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Процедура ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Процедура ЗаполнитьДокументНовымиЗначениями(новСтатусДокумента = Неопределено, вхСсылкаНаДокумент = Неопределено, СтруктураДокумента = Неопределено) Экспорт
	
	Если вхСсылкаНаДокумент = Неопределено
		ИЛИ новСтатусДокумента = Неопределено
		ИЛИ СтруктураДокумента = Неопределено
		ИЛИ ТипЗнч(вхСсылкаНаДокумент) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = вхСсылкаНаДокумент.ПолучитьОбъект();
	
	Если СтруктураДокумента.Свойство("СтруктураШапки") Тогда
		СтруктураШапки = СтруктураДокумента.СтруктураШапки;
		
		текСтатус = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "СтатусДокумента");
		новСтатус = РаботаСоСтатусамиДокументов.ПолучитьСледующийСтатус(текСтатус);//пробуем толкнуть вперед
			
		Если новСтатус <> новСтатусДокумента Тогда
			новСтатус = РаботаСоСтатусамиДокументов.ПолучитьПредыдущийСтатус(текСтатус);//пробуем толкнуть назад
				
			Если новСтатус <> новСтатусДокумента Тогда
				//некуда идти
				Возврат;
			КонецЕсли;
				
		КонецЕсли;
			
		Если новСтатус = Неопределено Тогда
			//некуда идти, перестраховались и вернулись без изменений
			Возврат;
				
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураШапки Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЕсли;
			
		КонецЦикла;
		ДокументОбъект.СтатусДокумента = новСтатусДокумента;
		
	КонецЕсли;
	
	
	Если СтруктураДокумента.Свойство("ТабЧастьТовары") Тогда
		Для Каждого ТекСтр Из СтруктураДокумента.ТабЧастьТовары Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтр.СтрокаПрихода) Тогда
				ТекСтр.СтрокаПрихода = РаботаСоСтатусамиДокументов.ОбновитьЗаписьСтрокПрихода(вхСсылкаНаДокумент, ТекСтр.СтрокаПрихода);
			КонецЕсли;
			
			Если СтруктураДокумента.Свойство("ТабЧастьПричинОтказов") Тогда
				Для Каждого Причина Из СтруктураДокумента.ТабЧастьПричинОтказов.НайтиСтроки(Новый Структура("КлючСвязи", текСтр.КлючСвязи)) Цикл
					Причина.СтрокаПрихода = ТекСтр.СтрокаПрихода;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.Товары.Загрузить(СтруктураДокумента.ТабЧастьТовары);
		
		Если СтруктураДокумента.Свойство("ТабЧастьПричинОтказов") Тогда
			ТабПричинОтказов = СтруктураДокумента.ТабЧастьПричинОтказов;
			ТабПричинОтказов.Свернуть("СтрокаПрихода,ПричинаОтказа","Количество");
			ДокументОбъект.ПричиныОтказов.Загрузить(ТабПричинОтказов);
			
		КонецЕсли;
		
		Если новСтатусдокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		ИначеЕсли новСтатусдокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						 
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Документы.ПоступлениеТоваровУслуг.ВыполнитьПроведение(вхСсылкаНаДокумент, Ложь);
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПоступлениеТоваров(текДокумент) Экспорт

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	ВыводитьКоды    = Истина;
	Колонка         = "Артикул";
	ТекстКодАртикул = "Артикул";
	
	ОбластьШапки  = "ШапкаСКодом";
	ОбластьСтроки = "СтрокаСКодом";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", текДокумент);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаВходящегоДокумента,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	Организация КАК Покупатель,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ПоступлениеТоваровУслуг");
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", текДокумент);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	//|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	//|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	//|		СУММА(ПоступлениеТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.Коэффициент КАК Коэффициент,
	|		ПоступлениеТоваровУслуг.Цена КАК Цена,
	|		СУММА(ПоступлениеТоваровУслуг.Сумма) КАК Сумма,
	|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Номенклатура,
	|		ПоступлениеТоваровУслуг.СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена,
	|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	//|		ПоступлениеТоваровУслуг.ЕдиницаИзмеренияМест,
	|		ПоступлениеТоваровУслуг.Коэффициент) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	ПоступлениеТоваровУслуг.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	NULL,
	//|	NULL,
	//|	NULL,
	|	ПоступлениеТоваровУслуг.Количество,
	|	1,
	|	ПоступлениеТоваровУслуг.Цена,
	|	ПоступлениеТоваровУслуг.Сумма,
	|	ПоступлениеТоваровУслуг.СуммаНДС,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	1 КАК Метка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ПоступлениеТоваровУслуг.Номенклатура,
	//|	ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	//|	ПоступлениеТоваровУслуг.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	//|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	////|	NULL,
	////|	NULL,
	//|	ПоступлениеТоваровУслуг.Количество КАК Количество,
	//|	1,
	//|	ПоступлениеТоваровУслуг.Цена,
	//|	ПоступлениеТоваровУслуг.Сумма КАК Сумма,
	//|	0,
	//|	""Без НДС"",
	//|	NULL,
	//|	NULL,
	//|	НомерСтроки КАК НомерСтроки,
	//|	2 КАК Метка
	//|ИЗ
	//|(ВЫБРАТЬ
	//|	ПоступлениеТоваровУслуг.Номенклатура,
	//|	СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	//|	ПоступлениеТоваровУслуг.Цена,
	//|	СУММА(ПоступлениеТоваровУслуг.Сумма) КАК Сумма,
	//|	МИНИМУМ(НомерСтроки) КАК НомерСтроки
	//|ИЗ
	//|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ПоступлениеТоваровУслуг
	//|ГДЕ
	//|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
	//|СГРУППИРОВАТЬ ПО
	//|	ПоступлениеТоваровУслуг.Номенклатура,
	//|	ПоступлениеТоваровУслуг.Цена
	|) КАК ПоступлениеТоваровУслуг
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Накладная");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Сумма    = 0;
	СуммаНДС = 0;

	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрок.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар); // + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
		                                    //+ ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета                    = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрок.Количество()
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	//если места в документе не заполнены,
	//МестВсего = ВыборкаСтрок.Итог("КоличествоМест");
	//Если МестВсего = 0 Тогда
		УниверсальныеМеханизмы.СкрытьКолонкиВТабличномДокументе(ТабДокумент, "Мест", 5,ОбластьШапки);
	//КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеТоваров()

Функция ПечатьМХ1(текДокумент) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДШ.Организация КАК Хранитель,
	|	ДШ.Организация.КодПоОКПО КАК ХранительОКПО,
	|	ДШ.Контрагент КАК Поклажедатель,
	|	ДШ.Контрагент.КодПоОКПО КАК ПоклажедательОКПО,
	|	ДШ.Номер,
	|	ДШ.Дата,
	|	ДШ.Склад КАК СкладПолучатель
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДШ
	|ГДЕ
	|	ДШ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДТЧ.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ДТЧ.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ДТЧ.Номенклатура.Наименование
	|		ИНАЧЕ ДТЧ.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	ДТЧ.Номенклатура.Код КАК Код,
	|	"""" КАК Характеристика,
	|	ДТЧ.ЕдиницаИзмерения,
	|	ДТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодОКЕИ,
	|	ДТЧ.Количество,
	|	ДТЧ.Коэффициент * ДТЧ.Цена / ДТЧ.ЕдиницаИзмерения.Коэффициент КАК Цена,
	|	ДТЧ.Сумма
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДТЧ
	|ГДЕ
	|	ДТЧ.Ссылка = &Ссылка"
	);
	
	Запрос.УстановитьПараметр("Ссылка", текДокумент);
	Запрос.УстановитьПараметр("ДатаДокумента", ОбщегоНазначения.ПолучитьЗначениеРеквизита(текДокумент, "Дата"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	//подготовка табличного документа
	ШапкаДокумента = МассивРезультатов[0].Выбрать();
	ШапкаДокумента.Следующий();
	ТЧ_Документа = МассивРезультатов[1].Выгрузить();
	
	Макет = ПолучитьМакет("МХ1");
	ТаблДокумент = Новый ТабличныйДокумент;
	ТаблДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТаблДокумент.ОтображатьЗаголовки = Ложь;
	ТаблДокумент.ОтображатьСетку = Ложь;
	ТаблДокумент.АвтоМасштаб = Истина;
	
	Область_Заголовок = Макет.ПолучитьОбласть("Заголовок");
	Область_Заголовок.Параметры.Заполнить(ШапкаДокумента);
	Область_Заголовок.Параметры.Хранитель			= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ШапкаДокумента.Хранитель, ШапкаДокумента.Дата));
	Область_Заголовок.Параметры.Поклажедатель		= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ШапкаДокумента.Поклажедатель, ШапкаДокумента.Дата));
	
	Область_Шапка = Макет.ПолучитьОбласть("Шапка");
	
	Область_Итого = Макет.ПолучитьОбласть("Итого");
	Область_ИтогоПоАкту = Макет.ПолучитьОбласть("ИтогоПоАкту");
	Область_Подвал = Макет.ПолучитьОбласть("Подвал");
	
	//вывод
	ТаблДокумент.Вывести(Область_Заголовок);
	ТаблДокумент.Вывести(Область_Шапка);
	
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(Область_Итого);
	МассивДляПроверки.Добавить(Область_ИтогоПоАкту);
	//МассивДляПроверки.Добавить(Область_Подвал);
	
	КоличествоНаСтранице = 0;
	СуммаНаСтранице = 0;
	
	Для Каждого СтрокаТЧ Из ТЧ_Документа Цикл
		Область_Строка = Макет.ПолучитьОбласть("Строка");
		Область_Строка.Параметры.Заполнить(СтрокаТЧ);
		МассивДляПроверки.Добавить(Область_Строка);
		
		
		Если ТЧ_Документа.Индекс(СтрокаТЧ) = 0 тогда
			//первую строку просто выводим
			ТаблДокумент.Вывести(Область_Строка);
		Иначе
			//вторую и следующие строки проверяем на помещаемость на страницу
			Если ТЧ_Документа.Индекс(СтрокаТЧ) = ТЧ_Документа.Количество() - 1 тогда
				//для последней строки добавим проверку подвал
				МассивДляПроверки.Добавить(Область_Подвал);	
			КонецЕсли;
			
			Попытка
				УмещаютсяНаСтранице = ТаблДокумент.ПроверитьВывод(МассивДляПроверки);
			Исключение
				УмещаютсяНаСтранице = Истина; //если нет принтера, то пофиг
			КонецПопытки;
			
			МассивДляПроверки.Удалить(МассивДляПроверки.Количество()-1);
			
			Если УмещаютсяНаСтранице тогда
				ТаблДокумент.Вывести(Область_Строка);
			Иначе
				Область_Итого.Параметры.Количество = КоличествоНаСтранице;
				Область_Итого.Параметры.Сумма = СуммаНаСтранице;
				ТаблДокумент.Вывести(Область_Итого);
				
				КоличествоНаСтранице = 0;
				СуммаНаСтранице = 0;
				
				ТаблДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТаблДокумент.Вывести(Область_Шапка);
				ТаблДокумент.Вывести(Область_Строка);
			КонецЕсли;
		КонецЕсли;
		
		КоличествоНаСтранице = КоличествоНаСтранице + СтрокаТЧ.Количество;
		СуммаНаСтранице = СуммаНаСтранице + СтрокаТЧ.Сумма;
	КонецЦикла;
	
	Область_Итого.Параметры.Количество = КоличествоНаСтранице;
	Область_Итого.Параметры.Сумма = СуммаНаСтранице;
	ТаблДокумент.Вывести(Область_Итого);
	
	Область_ИтогоПоАкту.Параметры.Количество = ТЧ_Документа.Итог("Количество");
	Область_ИтогоПоАкту.Параметры.Сумма = ТЧ_Документа.Итог("Сумма");
	ТаблДокумент.Вывести(Область_ИтогоПоАкту);
	
	ТаблДокумент.Вывести(Область_Подвал);
	
    Возврат ТаблДокумент;
	
КонецФункции

Функция ПечатьМХ3(текДокумент, вхФорма = "") Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДШ.Организация КАК Хранитель,
	|	ДШ.Организация.КодПоОКПО КАК ХранительОКПО,
	|	ДШ.Контрагент КАК Поклажедатель,
	|	ДШ.Контрагент.КодПоОКПО КАК ПоклажедательОКПО,
	|	ДШ.ДоговорКонтрагента.Номер КАК НомерДоговора,
	|	ДШ.ДоговорКонтрагента.Дата КАК ДатаДоговора,
	|	ДШ.Номер,
	|	ДШ.Дата,
	|	ДШ.Склад КАК СкладПолучатель
	|ПОМЕСТИТЬ ДШ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДШ
	|ГДЕ
	|	ДШ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДТЧ.Номенклатура,
	|	ДТЧ.Номенклатура.Артикул КАК Код,
	|	ЕСТЬNULL(ДТЧ.Номенклатура.Изготовитель.Наименование, """") КАК Характеристика
	|ПОМЕСТИТЬ НД
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДТЧ
	|ГДЕ
	|	ДТЧ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НК.АртикулПоставщика,
	|	НК.ИзготовительПоставщика,
	|	НК.Номенклатура
	|ПОМЕСТИТЬ НК
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НК
	|ГДЕ
	|	НК.Владелец В
	|			(ВЫБРАТЬ
	|				ДШ.Поклажедатель
	|			ИЗ
	|				ДШ КАК ДШ)
	|	И НК.Номенклатура В
	|			(ВЫБРАТЬ
	|				НД.Номенклатура
	|			ИЗ
	|				НД КАК НД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДШ.Хранитель,
	|	ДШ.ХранительОКПО,
	|	ДШ.Поклажедатель,
	|	ДШ.ПоклажедательОКПО,
	|	ДШ.НомерДоговора,
	|	ДШ.ДатаДоговора,
	|	ДШ.Номер,
	|	ДШ.Дата,
	|	ДШ.СкладПолучатель
	|ИЗ
	|	ДШ КАК ДШ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДТЧ.НомерСтроки,
	|	ВЫБОР
	|		КОГДА НД.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА НД.Номенклатура.Наименование
	|		ИНАЧЕ НД.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	НД.Код,
	|	НД.Характеристика,
	|	ДТЧ.ЕдиницаИзмерения,
	|	ДТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодОКЕИ,
	|	ДТЧ.Количество,
	|	ДТЧ.Коэффициент * ДТЧ.Цена / ДТЧ.ЕдиницаИзмерения.Коэффициент КАК Цена,
	|	ДТЧ.Сумма,
	|	ЕСТЬNULL(НК.АртикулПоставщика, """") КАК АртикулПоставщика,
	|	ЕСТЬNULL(НК.ИзготовительПоставщика, """") КАК ИзготовительПоставщика,
	|	ВЫБОР КОГДА ДТЧ.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) Тогда ДТЧ.СтрокаПрихода.НомерГТД Иначе ДТЧ.НомерГТД Конец КАК НомерГТД,
	|	ДТЧ.СтрокаПрихода.СтранаПроисхождения.Код КАК СтранаКод,
	|	ДТЧ.СтрокаПрихода.СтранаПроисхождения.Наименование КАК СтранаНаименование
	|	%%ДляДругойПечатнойФормы%%
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ НД КАК НД
	|		ПО ДТЧ.Номенклатура = НД.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ НК КАК НК
	|		ПО ДТЧ.Номенклатура = НК.Номенклатура
	|ГДЕ
	|	ДТЧ.Ссылка = &Ссылка"
	);
	
	Если вхФорма = "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%%ДляДругойПечатнойФормы%%", "");
	ИначеЕсли вхФорма = "Денсо" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%%ДляДругойПечатнойФормы%%", 
		" ,ДТЧ.СтрокаПрихода.Приход.НомерВходящегоДокумента КАК НомерМХ1, ДТЧ.СтрокаПрихода.Приход.ДатаВходящегоДокумента КАК ДатаМХ1");
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", текДокумент);
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	//подготовка табличного документа
	ШапкаДокумента = МассивРезультатов[3].Выбрать();
	ШапкаДокумента.Следующий();
	ТЧ_Документа = МассивРезультатов[4].Выгрузить();
	
	Если вхФорма = "" Тогда
		Макет = ПолучитьМакет("МХ3");
	ИначеЕсли вхФорма = "Денсо" Тогда
		Макет = ПолучитьМакет("МХ3_Денсо");
	КонецЕсли;
	ТаблДокумент = Новый ТабличныйДокумент;
	ТаблДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТаблДокумент.ОтображатьЗаголовки = Ложь;
	ТаблДокумент.ОтображатьСетку = Ложь;
	ТаблДокумент.АвтоМасштаб = Истина;
	
	Область_Заголовок = Макет.ПолучитьОбласть("Заголовок");
	Область_Заголовок.Параметры.Заполнить(ШапкаДокумента);
	Область_Заголовок.Параметры.Хранитель			= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ШапкаДокумента.Хранитель, ШапкаДокумента.Дата));
	Область_Заголовок.Параметры.Поклажедатель		= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ШапкаДокумента.Поклажедатель, ШапкаДокумента.Дата));
	
	Область_Шапка = Макет.ПолучитьОбласть("Шапка");
	
	Область_Итого = Макет.ПолучитьОбласть("Итого");
	Область_ИтогоПоАкту = Макет.ПолучитьОбласть("ИтогоПоАкту");
	Область_Подвал = Макет.ПолучитьОбласть("Подвал");
	
	//вывод
	ТаблДокумент.Вывести(Область_Заголовок);
	ТаблДокумент.Вывести(Область_Шапка);
	
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(Область_Итого);
	МассивДляПроверки.Добавить(Область_ИтогоПоАкту);
	//МассивДляПроверки.Добавить(Область_Подвал);
	
	КоличествоНаСтранице = 0;
	СуммаНаСтранице = 0;
	
	Для Каждого СтрокаТЧ Из ТЧ_Документа Цикл
		Область_Строка = Макет.ПолучитьОбласть("Строка");
		Область_Строка.Параметры.Заполнить(СтрокаТЧ);
		МассивДляПроверки.Добавить(Область_Строка);
		
		Если вхФорма = "Денсо" Тогда
			Область_Строка.Параметры.НомерМХ1 = "№" + СокрЛП(СтрокаТЧ.НомерМХ1) + " от " + Формат(СтрокаТЧ.ДатаМХ1, "ДФ=dd.MM.yy");
		КонецЕсли;
		
		Если ТЧ_Документа.Индекс(СтрокаТЧ) = 0 тогда
			//первую строку просто выводим
			ТаблДокумент.Вывести(Область_Строка);
		Иначе
			//вторую и следующие строки проверяем на помещаемость на страницу
			Если ТЧ_Документа.Индекс(СтрокаТЧ) = ТЧ_Документа.Количество() - 1 тогда
				//для последней строки добавим проверку подвал
				МассивДляПроверки.Добавить(Область_Подвал);	
			КонецЕсли;
			
			Попытка
				УмещаютсяНаСтранице = ТаблДокумент.ПроверитьВывод(МассивДляПроверки);
			Исключение
				УмещаютсяНаСтранице = Истина; //если нет принтера, то пофиг
			КонецПопытки;
			
			МассивДляПроверки.Удалить(МассивДляПроверки.Количество()-1);
			
			Если УмещаютсяНаСтранице тогда
				ТаблДокумент.Вывести(Область_Строка);
			Иначе
				Область_Итого.Параметры.Количество = КоличествоНаСтранице;
				Область_Итого.Параметры.Сумма = СуммаНаСтранице;
				ТаблДокумент.Вывести(Область_Итого);
				
				КоличествоНаСтранице = 0;
				СуммаНаСтранице = 0;
				
				ТаблДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТаблДокумент.Вывести(Область_Шапка);
				ТаблДокумент.Вывести(Область_Строка);
			КонецЕсли;
		КонецЕсли;
		
		КоличествоНаСтранице = КоличествоНаСтранице + СтрокаТЧ.Количество;
		СуммаНаСтранице = СуммаНаСтранице + СтрокаТЧ.Сумма;
	КонецЦикла;
	
	Область_Итого.Параметры.Количество = КоличествоНаСтранице;
	Область_Итого.Параметры.Сумма = СуммаНаСтранице;
	ТаблДокумент.Вывести(Область_Итого);
	
	Область_ИтогоПоАкту.Параметры.Количество = ТЧ_Документа.Итог("Количество");
	Область_ИтогоПоАкту.Параметры.Сумма = ТЧ_Документа.Итог("Сумма");
	ТаблДокумент.Вывести(Область_ИтогоПоАкту);
	
	ТаблДокумент.Вывести(Область_Подвал);
	
    Возврат ТаблДокумент;
	
КонецФункции

//Загрузка при обмене
//Загрузка поступления из Окна поставщика
Процедура ЗагрузитьЭлемент(ОбъектXDTO, вхОтправитель, Отказ, вхПараметры = Неопределено) Экспорт
	
	лМетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(вхОтправитель));
	
	Если (лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщика) тогда
		
		ТаблицаОшибок = ТаблицаОшибок();

		ШапкаДокумента = СтруктураШапкиДокумента(ОбъектXDTO, ТаблицаОшибок, Отказ);
		ТаблицаТовары = ТаблицаТоваров(ОбъектXDTO.items.ПолучитьСписок("item"), ШапкаДокумента.Контрагент, ТаблицаОшибок, Отказ);
		РазмещениеПоступления = РаспределитьПоступлениеПоЗаказам(ШапкаДокумента, ТаблицаТовары, ТаблицаОшибок, Отказ);
		
		Если НЕ Отказ Тогда
			ЗаписатьДокументПоступления(ШапкаДокумента, ТаблицаТовары, РазмещениеПоступления, ТаблицаОшибок);
		КонецЕсли;
		
		ЗаписатьОшибкиЗагрузки(ШапкаДокумента, ТаблицаОшибок);
		
		//Пакет обработан в любом случае
		Отказ = Ложь;
	ИначеЕсли (лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog) Тогда 
		Попытка
			ЗагрузитьРезультатПриемки2(ОбъектXDTO, вхПараметры);
		Исключение
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
			СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ЗаказСсылка);
			СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ПоступлениеТоваровУслуг");
			СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
			СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
			СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
			ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
			
			//{{ХудинВВ 20181406
			ДокСсылка = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
			Если НЕ ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
				РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокСсылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки: "+ОписаниеОшибки(), , Ложь); 
			КонецЕсли;
			//}}
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатПриемки2(ОбъектXDTO, ДопПараметры = Неопределено)
	
	ДокСсылка = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
	Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
		ВызватьИсключение "Не найдено поступление товаров и услуг с guid = " + ОбъектXDTO.ЗаказСсылка;
	КонецЕсли;
	
	//Костыль по созданию элементов по битым ссылкам 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки,
	               |	ПоступлениеТоваровУслугТовары.Номенклатура,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Количество
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |		ПО ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
	               |ГДЕ
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.Наименование ЕСТЬ NULL
	               |	И ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	               |	И ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	
	_Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из _Таблица Цикл 
		Если Не ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(СтрокаТЧ.СтрокаЗаявки) Тогда 
			Возврат;	
		КонецЕсли;
		Об = Справочники.ИдентификаторыСтрокЗаявок.СоздатьЭлемент();
		Об.УстановитьСсылкуНового(СтрокаТЧ.СтрокаЗаявки);
		Об.IDSite = Новый УникальныйИдентификатор;
		Об.Наименование = Об.IDSite;
		Об.Записать();
	КонецЦикла;
	
	СтатусДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "СтатусДокумента");
	
	//15.06.2018 Убрана проверка на статус "Размещен" для загрузки доприемки
	
	//Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда 
	//	ВызватьИсключение "Поступление в состоянии размещено";
	//КонецЕсли;	

	//19.06.2018. Решили не двигать пту вперед Валиахметов
	
	//Если Не (СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят 
	//	Или СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен) Тогда 
	//	//Первая приемка
	//	Дата = ТекущаяДата();
	//Иначе
		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "Дата");
	//КонецЕсли;
		
	ТоварыXDTO = ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	
	СоотвSSID = ОбменДаннымиКлиентСервер.СоответствиеСтрокЗаявокИSSID(ТоварыXDTO, ДокСсылка);
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	Товары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	ТоварыБрак = Новый ТаблицаЗначений;
	ТоварыБрак.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ТоварыБрак.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	//Товары.Колонки.Добавить("КоличествоНедостача", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	ТоварыПустыхSSID = Новый ТаблицаЗначений;
	ТоварыПустыхSSID.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ТоварыПустыхSSID.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		
		Если СтрокаТовары.Качество =  "Излишек" Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТовары.ЭтоБрак Тогда 
			НоваяСтрока = ТоварыБрак.Добавить();
		Иначе	
			СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтрокаТовары.SSID);
			Если Не ЗначениеЗаполнено(СтрокаЗаявки) Тогда 

				Строка =_Таблица.Найти(Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка)), "Номенклатура");
				Если Строка <> Неопределено Тогда 
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.СтрокаЗаявки = Строка.СтрокаЗаявки;
					
					Об = НоваяСтрока.СтрокаЗаявки.ПолучитьОбъект();
					Об.IDSite = СтрокаТовары.SSID;
					Об.Наименование = СтрокаТовары.SSID;
					Об.Записать();
					
					_Таблица.Удалить(Строка);
				Иначе
					//ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
					НоваяСтрока = ТоварыПустыхSSID.Добавить();
				КонецЕсли;
			Иначе
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.СтрокаЗаявки = СтрокаЗаявки;
			КонецЕсли;
			
		КонецЕсли;
		НоваяСтрока.Количество = СтрокаТовары.КоличествоПринято;
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
	КонецЦикла;
	
	Товары.Свернуть("Номенклатура,СтрокаЗаявки", "Количество");
	ТоварыПустыхSSID.Свернуть("Номенклатура", "Количество");
	ТоварыБрак.Свернуть("Номенклатура", "Количество");
	
	//Считаем принятый товар по количеству
	КоличествоПереданное = Товары.Итог("Количество") + ТоварыПустыхSSID.Итог("Количество");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки,
	               |	СУММА(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Количество) КАК Количество
	               |ПОМЕСТИТЬ втРазм
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
	               |ГДЕ
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки,
	               |	СУММА(ПоступлениеТоваровУслугПричиныОтказов.Количество) КАК Количество
	               |ПОМЕСТИТЬ втОтказы
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.ПричиныОтказов КАК ПоступлениеТоваровУслугПричиныОтказов
	               |ГДЕ
	               |	ПоступлениеТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугТовары.Номенклатура,
	               |	втРазм.СтрокаЗаявки,
	               |	СУММА(втРазм.Количество - ЕСТЬNULL(втОтказы.Количество, 0)) КАК Количество,
	               |	втРазм.СтрокаПрихода
	               |ПОМЕСТИТЬ втПринято
	               |ИЗ
	               |	втРазм КАК втРазм
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
	               |		ПО втРазм.СтрокаПрихода = втОтказы.СтрокаПрихода
	               |			И втРазм.СтрокаЗаявки = втОтказы.СтрокаЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |		ПО втРазм.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
	               |ГДЕ
	               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	               |	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен
	               |	И (ПоступлениеТоваровУслугТовары.Ссылка.СтатусДокумента = &Статус1
	               |			ИЛИ ПоступлениеТоваровУслугТовары.Ссылка.СтатусДокумента = &Статус2)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугТовары.Номенклатура,
	               |	втРазм.СтрокаЗаявки,
	               |	втРазм.СтрокаПрихода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугТовары.Номенклатура,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки,
	               |	СУММА(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Количество - ЕСТЬNULL(втПринято.Количество, 0)) КАК Количество
	               |ИЗ
	               |	втРазм КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |		ПО ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втПринято КАК втПринято
	               |		ПО ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода = втПринято.СтрокаПрихода
	               |			И ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки = втПринято.СтрокаЗаявки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугТовары.Номенклатура,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.Виртуальная
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втПринято.Номенклатура,
	               |	втПринято.СтрокаЗаявки,
	               |	втПринято.СтрокаПрихода,
	               |	втПринято.Количество
	               |ИЗ
	               |	втПринято КАК втПринято";
	
		Запрос.УстановитьПараметр("Ссылка", ДокСсылка);		   
		Запрос.УстановитьПараметр("Статус1", Справочники.СтатусыДокументов.ПоступлениеТоваровПринят);
		Запрос.УстановитьПараметр("Статус2", Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен);
		
		Результаты = Запрос.ВыполнитьПакет();
		ТоварыДокумента = Результаты[Результаты.ВГраница()].Выгрузить();
		ТоварыНепринятые = Результаты[Результаты.ВГраница() - 1].Выгрузить();
		//Считаем количество в документе
		КоличествоВДокументе = ТоварыДокумента.Итог("Количество");
		
		//Прекращаем загрузку если принято меньше 60% 
		Если  КоличествоПереданное < 0.6 * КоличествоВДокументе И ДокСсылка.Товары.Количество() > 3 Тогда 
			ОписаниеОшибки = "Из ТопЛога пришел результат приемки по поступлению, в котором принято менее 60% товара. Документ: " + Строка(ДокСсылка);
			РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПоступленияТоваровУслуг, ОписаниеОшибки, "Поступление в ТопЛог принято менее чем на 60%");
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		ПринятыеТовары = Новый ТаблицаЗначений;
		ПринятыеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ПринятыеТовары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
		ПринятыеТовары.Колонки.Добавить("СтрокаПрихода", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокПриходов"));
		ПринятыеТовары.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
		
		Отбор = Новый Структура("Номенклатура,СтрокаЗаявки");
		РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ТоварыДокумента, ПринятыеТовары);
		
		ОчиститьТаблицуСНулевымКол(Товары);
		ОчиститьТаблицуСНулевымКол(ТоварыДокумента);
		
		Отбор = Новый Структура("Номенклатура");
		РаспределитьТаблицу1ПоТаблице2(Отбор, ТоварыПустыхSSID, ТоварыДокумента, ПринятыеТовары);
		
		ОчиститьТаблицуСНулевымКол(ТоварыПустыхSSID);
		ОчиститьТаблицуСНулевымКол(ТоварыДокумента);
		
		Отбор = Новый Структура("Номенклатура");
		РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ТоварыДокумента, ПринятыеТовары);
		ОчиститьТаблицуСНулевымКол(Товары);
		ОчиститьТаблицуСНулевымКол(ТоварыДокумента);
		
		Отбор = Новый Структура("Номенклатура,СтрокаЗаявки");
		РаспределитьТаблицу1ПоТаблице2(Отбор,Товары, ТоварыНепринятые, ПринятыеТовары);
		
		ОчиститьТаблицуСНулевымКол(Товары);
		ОчиститьТаблицуСНулевымКол(ТоварыНепринятые);
		
		Отбор = Новый Структура("Номенклатура");
		РаспределитьТаблицу1ПоТаблице2(Отбор, ТоварыПустыхSSID, ТоварыНепринятые, ПринятыеТовары);
		
		ОчиститьТаблицуСНулевымКол(ТоварыПустыхSSID);
		ОчиститьТаблицуСНулевымКол(ТоварыНепринятые);
		
		Отбор = Новый Структура("Номенклатура");
		РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ТоварыНепринятые, ПринятыеТовары);
		
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		                |	ПоступлениеТоваровУслугАктПриемки.Номенклатура,
		                |	ПоступлениеТоваровУслугАктПриемки.ЕдиницаИзмерения,
		                |	ПоступлениеТоваровУслугАктПриемки.КачествоИзТопЛог,
		                |	ПоступлениеТоваровУслугАктПриемки.КоличествоПлан,
		                |	ПоступлениеТоваровУслугАктПриемки.Количество,
		                |	ПоступлениеТоваровУслугАктПриемки.КоличествоНедостача,
		                |	ПоступлениеТоваровУслугАктПриемки.КоличествоБрак,
		                |	ПоступлениеТоваровУслугАктПриемки.КоличествоИзлишек,
		                |	ПоступлениеТоваровУслугАктПриемки.КоличествоВернули
		                |ИЗ
		                |	Документ.ПоступлениеТоваровУслуг.АктПриемки КАК ПоступлениеТоваровУслугАктПриемки
		                |ГДЕ
		                |	ПоступлениеТоваровУслугАктПриемки.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
		ДокументАктПриемки = Запрос.Выполнить().Выгрузить();
		//АктПриемки = ДокументАктПриемки.СкопироватьКолонки();
		АктПриемки = ДокСсылка.АктПриемки.ВыгрузитьКолонки("Номенклатура,ЕдиницаИзмерения,КачествоИзТопЛог,КоличествоПлан,Количество,КоличествоНедостача,КоличествоБрак,КоличествоИзлишек,КоличествоВернули");
		
		Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
			
			СтрокаТЧ = АктПриемки.Найти(Номенклатура, "Номенклатура");
			
			Если СтрокаТЧ = Неопределено Тогда 
				СтрокаТЧ = АктПриемки.Добавить();
				СтрокаТЧ.Номенклатура = Номенклатура;
				СтрокаТЧ.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаХраненияОстатков");
			КонецЕсли;
			
			СтрокаТЧ.КоличествоВернули = СтрокаТЧ.КоличествоВернули + СтрокаТовары.КоличествоВозвращено;
			
			Если СтрокаТовары.ЭтоБрак И СтрокаТовары.Качество = "Излишек" Тогда 
				СтрокаТЧ.КоличествоИзлишек = СтрокаТЧ.КоличествоИзлишек + СтрокаТовары.КоличествоПринято;
			ИначеЕсли СтрокаТовары.ЭтоБрак Тогда 
				СтрокаТЧ.КоличествоБрак = СтрокаТЧ.КоличествоБрак + СтрокаТовары.КоличествоПринято;
			Иначе	
				СтрокаТЧ.Количество = СтрокаТЧ.Количество + СтрокаТовары.КоличествоПринято;
			КонецЕсли;
			Если Не (ЗначениеЗаполнено(СтрокаТЧ.КачествоИзТопЛог) И СтрокаТовары.Качество = "Излишек") Тогда //Если передано качество Брака, то не затираем
				СтрокаТЧ.КачествоИзТопЛог = СтрокаТовары.Качество;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из АктПриемки Цикл 
			//Если СтрокаТЧ.КачествоИзТопЛог = "Излишек" Тогда 
			//	СтрокаТЧ.КоличествоПлан = 0;
			//	Продолжить;
			//Иначе
				Строки = ДокСсылка.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура));
				Для Каждого СтрокаДок Из Строки Цикл 
					СтрокаТЧ.КоличествоПлан = СтрокаТЧ.КоличествоПлан + СтрокаДок.Количество;
				КонецЦикла;
			//КонецЕсли;
			
			Если СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество - СтрокаТЧ.КоличествоБрак > 0 Тогда 
				СтрокаТЧ.КоличествоНедостача = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество - СтрокаТЧ.КоличествоБрак;
				СтрокаТЧ.КоличествоИзлишек = 0; 
		  	ИначеЕсли  СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество - СтрокаТЧ.КоличествоБрак < 0 Тогда 
		    	СтрокаТЧ.КоличествоНедостача = 0;
		    	СтрокаТЧ.КоличествоИзлишек = СтрокаТЧ.Количество + СтрокаТЧ.КоличествоБрак - СтрокаТЧ.КоличествоПлан; 
				СтрокаТЧ.Количество = СтрокаТЧ.Количество + Макс(0, СтрокаТЧ.КоличествоИзлишек - СтрокаТЧ.КоличествоБрак); 
			КонецЕсли;
		КонецЦикла;

		КоличествоСтрок = АктПриемки.Количество();
		Для Шаг = 0 По КоличествоСтрок - 1 Цикл 
			Индекс = КоличествоСтрок - Шаг - 1;
			СтрокаТЧ = АктПриемки.Получить(Индекс);
			Если СтрокаТЧ.КоличествоНедостача = 0 И СтрокаТЧ.КоличествоБрак = 0 И СтрокаТЧ.КоличествоИзлишек = 0 И СтрокаТЧ.КоличествоВернули = 0 Тогда 
				АктПриемки.Удалить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;

		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		
		ДокОбъект.ПричиныОтказов.Очистить();
			
		ПринятыеТовары.Свернуть("Номенклатура,СтрокаЗаявки,СтрокаПрихода", "Количество");
		
		РазмещенныеТовары = ДокОбъект.РазмещениеСтрокПрихода.Выгрузить(, "СтрокаПрихода,СтрокаЗаявки,Количество");
		РазмещенныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
		Для Каждого СтрокаТЧ Из РазмещенныеТовары Цикл 
			СтрокаТовары = ДокОбъект.Товары.Найти(СтрокаТЧ.СтрокаПрихода, "СтрокаПрихода");
			Если СтрокаТовары = Неопределено Тогда 
				ВызватьИсключение "Ошибка с размещением в документе " + ДокСсылка + ". В размещении имеется строка прихода, которой нет в ТЧ ""Товары""";
			КонецЕсли;
			СтрокаТЧ.Номенклатура = СтрокаТовары.Номенклатура;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РазмещенныеТовары", РазмещенныеТовары);
		Запрос.УстановитьПараметр("ПринятыеТовары", ПринятыеТовары);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	РазмещенныеТовары.Номенклатура,
		               |	РазмещенныеТовары.СтрокаПрихода,
		               |	РазмещенныеТовары.СтрокаЗаявки,
		               |	РазмещенныеТовары.Количество
		               |ПОМЕСТИТЬ втРазм
		               |ИЗ
		               |	&РазмещенныеТовары КАК РазмещенныеТовары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПринятыеТовары.Номенклатура,
		               |	ПринятыеТовары.СтрокаПрихода,
		               |	ПринятыеТовары.СтрокаЗаявки,
		               |	ПринятыеТовары.Количество
		               |ПОМЕСТИТЬ втПринятые
		               |ИЗ
		               |	&ПринятыеТовары КАК ПринятыеТовары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втРазм.Номенклатура,
		               |	втРазм.СтрокаПрихода,
		               |	втРазм.СтрокаЗаявки,
		               |	втРазм.Количество - ЕСТЬNULL(втПринятые.Количество, 0) КАК Количество
		               |ИЗ
		               |	втРазм КАК втРазм
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втПринятые КАК втПринятые
		               |		ПО втРазм.Номенклатура = втПринятые.Номенклатура
		               |			И втРазм.СтрокаПрихода = втПринятые.СтрокаПрихода
		               |			И втРазм.СтрокаЗаявки = втПринятые.СтрокаЗаявки
		               |ГДЕ
		               |	втРазм.Количество - ЕСТЬNULL(втПринятые.Количество, 0) > 0";
	ПотенцОтказы = Запрос.Выполнить().Выгрузить();
	ОтказыПоБраку = Новый ТаблицаЗначений;
	ОтказыПоБраку.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	ОтказыПоБраку.Колонки.Добавить("СтрокаПрихода", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокПриходов"));
	ОтказыПоБраку.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	
	Отбор = Новый Структура("Номенклатура");	
	РаспределитьТаблицу1ПоТаблице2(Отбор, ТоварыБрак, ПотенцОтказы, ОтказыПоБраку);
	ОчиститьТаблицуСНулевымКол(ПотенцОтказы);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОтказыПоБраку", ОтказыПоБраку);
	Запрос.УстановитьПараметр("ПотенцОтказы", ПотенцОтказы);
	
	Запрос.УстановитьПараметр("Ссылка",ДокСсылка);
	
	Запрос.УстановитьПараметр("ПричинаОтказаБрак", Справочники.СостоянияСтрокДокументов.ОтказПоставщикаБракПриПриемке);
	Запрос.УстановитьПараметр("ПричинаОтказаНедостача", Справочники.СостоянияСтрокДокументов.ОтказПоставщикаНедостача);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтказыПоБраку.СтрокаПрихода,
	               |	ОтказыПоБраку.СтрокаЗаявки,
	               |	ОтказыПоБраку.Количество
	               |ПОМЕСТИТЬ ОтказыПоБраку
	               |ИЗ
	               |	&ОтказыПоБраку КАК ОтказыПоБраку
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПотенцОтказы.СтрокаПрихода,
	               |	ПотенцОтказы.СтрокаЗаявки,
	               |	ПотенцОтказы.Количество
	               |ПОМЕСТИТЬ ПотенцОтказы
	               |ИЗ
	               |	&ПотенцОтказы КАК ПотенцОтказы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтказыПоБраку.СтрокаПрихода,
	               |	ОтказыПоБраку.СтрокаЗаявки,
	               |	ОтказыПоБраку.Количество,
	               |	ПоступлениеТоваровУслугТовары.КлючСвязи,
	               |	&ПричинаОтказаБрак КАК ПричинаОтказа
	               |ИЗ
	               |	ОтказыПоБраку КАК ОтказыПоБраку
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |		ПО ОтказыПоБраку.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
	               |ГДЕ
	               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПотенцОтказы.СтрокаПрихода,
	               |	ПотенцОтказы.СтрокаЗаявки,
	               |	ПотенцОтказы.Количество,
	               |	ПоступлениеТоваровУслугТовары.КлючСвязи,
	               |	&ПричинаОтказаНедостача
	               |ИЗ
	               |	ПотенцОтказы КАК ПотенцОтказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |		ПО ПотенцОтказы.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
	               |ГДЕ
	               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
	ДокОбъект.ПричиныОтказов.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрокаТЧ Из ДокОбъект.Товары Цикл 
		СтрокиПрин = ПринятыеТовары.НайтиСтроки(Новый Структура("СтрокаПрихода", СтрокаТЧ.СтрокаПрихода));
		ВремТаблица = ПринятыеТовары.Скопировать(СтрокиПрин, "Количество");
		КоличествоПринято = ВремТаблица.Итог("Количество");
		СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.Количество - КоличествоПринято;
	КонецЦикла;

	Если Не (СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Или 
		СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен) Тогда 
		//Первая приемка	
		КопияАктаПриемки = ДокОбъект.АктПриемки.Выгрузить();
		ДокОбъект.АктПриемки.Очистить();
		Для Каждого СтрокаАктаПриемки Из АктПриемки Цикл 				
			ДокСтр = ДокОбъект.АктПриемки.Добавить();
			ЗаполнитьЗначенияСвойств(ДокСтр, СтрокаАктаПриемки, "Номенклатура,ЕдиницаИзмерения,КачествоИзТопЛог, КоличествоПлан,Количество,КоличествоБрак,КоличествоНедостача,КоличествоИзлишек,КоличествоВернули");
			//Дополнить информацией из документа
			СтрокаКопии = КопияАктаПриемки.Найти(ДокСтр.Номенклатура, "Номенклатура");
			Если СтрокаКопии <> Неопределено Тогда 
				ЗаполнитьЗначенияСвойств(ДокСтр, СтрокаКопии, "ОтветПоставщика,КоличествоВернулиПослеПриемки,КоличествоВернулиПозже,Комментарий,КомментарийСклада,КомментарийМСК");	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если ДокОбъект.АктПриемки.Количество() > 0 И Не ЗначениеЗаполнено(ДокОбъект.СтатусАктаПриемки) Тогда 
		ДокОбъект.СтатусАктаПриемки = Справочники.СтатусыДокументов.АктПриемкиОформляется;
	КонецЕсли;    
	
	ДокОбъект.Дата = Дата;
	ДокОбъект.ПометкаУдаления = Ложь;
	
	СтарыйСтатус = СтатусДокумента;
	
	ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		//{{ХудинВВ 20181406
		НомерСообщения = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерСообщения);
		РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь); 
		//}}
	Исключение
		ДокОбъект.СтатусДокумента = СтарыйСтатус;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
		
		Стр = Набор.Добавить();
		Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
		Набор.Записать(Истина);
		ВызватьИсключение ОписаниеОшибки();

	КонецПопытки;
КонецПроцедуры
	
Процедура РаспределитьТаблицу1ПоТаблице2 (Отбор, Таблица1, Таблица2, ВыходнаяТаблица)
	Для Каждого СтрокаТовары Из Таблица1 Цикл   
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовары);
		Строки = Таблица2.НайтиСтроки(Отбор);
		
		Индекс = 0;
		
		Пока СтрокаТовары.Количество > 0 И Индекс < Строки.Количество() Цикл  
			Строка = Строки.Получить(Индекс);
			СписываемоеКоличество = Мин(СтрокаТовары.Количество, Строка.Количество);
			
			Если СписываемоеКоличество > 0 Тогда 
				НоваяСтрока = ВыходнаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Количество = СписываемоеКоличество;
				СтрокаТовары.Количество = СтрокаТовары.Количество - СписываемоеКоличество;
				Строка.Количество = Строка.Количество - СписываемоеКоличество;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьТаблицуСНулевымКол(Знач РазмещенныеТовары)
	
	Перем КоличествоСтрок, СтрокаТЧ, Шаг;
	
	КоличествоСтрок = РазмещенныеТовары.Количество();
	Для Шаг = 0 По КоличествоСтрок - 1 Цикл 
		СтрокаТЧ = РазмещенныеТовары.Получить(КоличествоСтрок - Шаг - 1);
		Если СтрокаТЧ.Количество = 0 Тогда
			РазмещенныеТовары.Удалить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//Заполнение шапки
Функция СтруктураШапкиДокумента(ОбъектXDTO, ТаблицаОшибок, Отказ)
	
	Структура = Новый Структура("ДокументОснование,СуммаДокумента,СсылкаНаДокумент");
	
	Структура.Вставить("Дата", ТекущаяДата());
	Структура.Вставить("Комментарий", "Загружено автоматически из окна поставщика: " + Структура.Дата);
	Структура.Вставить("ТорговаяТочка", ТорговаяТочка(ОбъектXDTO.supplier_code, ТаблицаОшибок, Отказ));
	Структура.Вставить("Контрагент", Структура.ТорговаяТочка.Владелец);
	Структура.Вставить("ДоговорКонтрагента", ДоговорКонтрагента(ОбъектXDTO.buyer_inn, Структура.Контрагент, ОбъектXDTO.supplier_code, ТаблицаОшибок, Отказ));
	Структура.Вставить("Организация", Структура.ДоговорКонтрагента.Организация);
	Структура.Вставить("ТипЦен", Структура.ДоговорКонтрагента.ТипЦен);
	Структура.Вставить("Склад", Склад(ОбъектXDTO.partkom_warehouse, ТаблицаОшибок, Отказ));
	Структура.Вставить("ДатаВходящегоДокументаСФ", ОбъектXDTO.document_date);
	Структура.Вставить("НомерВходящегоДокументаСФ", ОбъектXDTO.number);
	Структура.Вставить("СсылкаНаДокумент", СсылкаНаДокумент(Структура.НомерВходящегоДокументаСФ, Структура.ДатаВходящегоДокументаСФ, Структура.Организация, Структура.Контрагент, ТаблицаОшибок, Отказ));
	Структура.Вставить("ПризнакДокумента", Перечисления.ПризнакиДокументов.ЗагруженИзОП);
	Структура.Вставить("флОбновлятьЦены", Истина);
	Структура.Вставить("СтатусДокумента", Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен);
	
	Структура.Вставить("КодСайта", ОбъектXDTO.invoice_id);
	Структура.Вставить("КодСайта1С", ОбъектXDTO.export_invoice_id);
	
	Структура.Вставить("order_number", ОбъектXDTO.order_number);
	Структура.Вставить("ЗаказДляОтбора", Документы.ЗаказПоставщику.ПолучитьСсылку(ОбъектXDTO.order_uuid));
	
	Структура.Вставить("ВидОперацииПоступления", Перечисления.ВидыПоступленияТоваров.НаСклад);
	Структура.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
	Структура.Вставить("УчитыватьНДС", Истина);
	Структура.Вставить("СуммаВключаетНДС", Истина);
	Структура.Вставить("ВалютаДокумента", Константы.ВалютаРегламентированногоУчета.Получить());
	Структура.Вставить("КурсВзаиморасчетов", 1);
	Структура.Вставить("КратностьВзаиморасчетов", 1);
	
	Возврат Структура;
	
КонецФункции
Функция ТорговаяТочка(Код, ТаблицаОшибок, Отказ)
	
	ТорговаяТочка = Справочники.ТорговыеТочки.НайтиПоКоду(Код);
	Если ТорговаяТочка.Пустая() Тогда
		Отказ = Истина;
		СообщениеОбОшибке = "В 1с не найдена торговая точка по коду <" + Код + ">";
		СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат ТорговаяТочка;
	
КонецФункции
Функция ДоговорКонтрагента(ИННОрганизации, Контрагент, supplier_code, ТаблицаОшибок, Отказ)
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ДоговорыКонтрагентов.Ссылка
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                      |ГДЕ
	                      |	ДоговорыКонтрагентов.Владелец = &Контрагент
	                      |	И ДоговорыКонтрагентов.Организация.ИНН = &ИНН
	                      |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	                      |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	                      |	И НЕ ДоговорыКонтрагентов.ДоговорПриостановлен
	                      |	И НЕ ДоговорыКонтрагентов.СлужебныйДоговор");
	Запрос.УстановитьПараметр("ИНН", ИННОрганизации);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Договор = Выборка.Ссылка;
	Иначе
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Отказ = Истина;
			СообщениеОбОшибке = "Не определен договор контрагента (supplier_code: " + supplier_code + ", buyer_inn: " + ИННОрганизации + ")";
			СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке)
		КонецЕсли;
	КонецЕсли;
	
	Возврат Договор;
	
КонецФункции
Функция Склад(КодСклада, ТаблицаОшибок, Отказ)
	
	Склад = Справочники.Склады.НайтиПоКоду(Формат(КодСклада,"ЧЦ=9; ЧВН=; ЧГ=0"));
	Если Склад.Пустая() Тогда
		Отказ = Истина;
		СообщениеОбОшибке = "Не найден склад по коду: " + КодСклада;
		СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке)
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции
Функция СсылкаНаДокумент(НомерВходящегоДокументаСФ, ДатаВходящегоДокументаСФ, Организация, Контрагент, ТаблицаОшибок, Отказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПоступлениеТоваровУслуг.Ссылка,
	                      |	ПоступлениеТоваровУслуг.Проведен,
	                      |	ВЫБОР
	                      |		КОГДА ПоступлениеТоваровУслуг.СтатусДокумента В (ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровДоставлен), ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровПринят), ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровРазмещен))
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ДокументЗагружен
	                      |ИЗ
	                      |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	                      |ГДЕ
	                      |	ПоступлениеТоваровУслуг.НомерВходящегоДокументаСФ = &Номер
	                      |	И ПоступлениеТоваровУслуг.ДатаВходящегоДокументаСФ = &Дата
	                      |	И ПоступлениеТоваровУслуг.Организация = &Организация
	                      |	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент");
	Запрос.УстановитьПараметр("Номер", НомерВходящегоДокументаСФ);
	Запрос.УстановитьПараметр("Дата", ДатаВходящегоДокументаСФ);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Проведен Тогда
			СообщениеОбОшибке = "Выгруженное из окна поставщика поступление уже загружено и проведено в 1С (заказы распределены). (number: " + НомерВходящегоДокументаСФ +
								", document_date: " + ДатаВходящегоДокументаСФ + ")";
			СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке)
		КонецЕсли;
		Если Выборка.ДокументЗагружен Тогда
			Отказ = Истина;
			СообщениеОбОшибке = "Документ (number: " + НомерВходящегоДокументаСФ + ", document_date: " + ДатаВходящегоДокументаСФ + ") уже загружен и не может быть изменен";
			СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке)
		КонецЕсли;
		СсылкаНаДокумент = Выборка.Ссылка;
	Иначе
		СсылкаНаДокумент = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СсылкаНаДокумент;
	
КонецФункции

//Заполнение ТЧ Товары
Функция ТаблицаТоваров(СписокТоварыXDTO, Контрагент, ТаблицаОшибок, НеЗагружатьДокумент)
	
	ТаблицаТовары = ТаблицаТовары();
	СтавкиНДС = СтавкиНДС();
	
		Для Каждого Строка Из СписокТоварыXDTO Цикл
			
			Отказ = Ложь;

			СтруктураСтроки = Новый Структура("КлючСвязи,Коэффициент", Строка.order_no, 1);
			СтруктураСтроки.Вставить("Артикул", Строка.articul);
			СтруктураСтроки.Вставить("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			СтруктураСтроки.Вставить("Количество", Количество(Строка.amount, СтруктураСтроки.КлючСвязи, ТаблицаОшибок, Отказ));
			СтруктураСтроки.Вставить("СтавкаНДС", СтавкаНДС(Строка.tax_rate, СтавкиНДС, СтруктураСтроки.КлючСвязи, ТаблицаОшибок, Отказ));
			СтруктураСтроки.Вставить("Сумма", СуммаСтроки(Строка.cost_with_tax, СтруктураСтроки.КлючСвязи, ТаблицаОшибок, Отказ));
			СтруктураСтроки.Вставить("Цена", ?(СтруктураСтроки.Количество = 0, 0, СтруктураСтроки.Сумма/СтруктураСтроки.Количество));
			СтруктураСтроки.Вставить("СтранаПроисхождения", СтранаПроисхождения(Строка.country_code, СтруктураСтроки.КлючСвязи, ТаблицаОшибок, Отказ));
			СтруктураСтроки.Вставить("НоменклатураЗамены", НоменклатураЗамены(Строка.src_articul, Строка.src_brand, СтруктураСтроки.КлючСвязи, ТаблицаОшибок, Отказ));
			СтруктураСтроки.Вставить("НомерГТД", НомерГТД(Строка.declaration_number));
			
			Если Не Отказ Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(), СтруктураСтроки);
			Иначе
				НеЗагружатьДокумент = Истина;
			КонецЕсли;
			
		КонецЦикла;
	
	Возврат ТаблицаТовары;
	
КонецФункции
Функция Количество(Количество, НомерСтроки, ТаблицаОшибок, Отказ)
	
	Если Не ЗначениеЗаполнено(Количество) Тогда
		СообщениеОбОшибке = "Не указано количество";
		СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке, НомерСтроки);
		Количество = 0;
		Отказ = Истина;
	КонецЕсли;	
	
	Возврат Количество;
	
КонецФункции
Функция СтавкаНДС(tax_rate, СтавкиНДС, НомерСтроки, ТаблицаОшибок, Отказ)
	
	Ставка = СтавкиНДС[tax_rate];
	Если НЕ ЗначениеЗаполнено(Ставка) Тогда
		Ставка = 0;
		Отказ = Истина;
		СообщениеОбОшибке = "Неверно указана ставка НДС(tax_rate:" + tax_rate + ")";
		СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке, НомерСтроки);
	КонецЕсли;
	
	Возврат Ставка;
	
КонецФункции
Функция СуммаСтроки(cost_with_tax, НомерСтроки, ТаблицаОшибок, Отказ)
	
	Если Не ЗначениеЗаполнено(cost_with_tax) Тогда
		СообщениеОбОшибке = "Не указана сумма (cost_with_tax)";
		СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке, НомерСтроки);
	КонецЕсли;
	
	Возврат cost_with_tax;

КонецФункции
Функция СтранаПроисхождения(country_code, НомерСтроки, ТаблицаОшибок, Отказ)
	
	Страна = Справочники.СтраныМира.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(country_code) Тогда
		Страна = Справочники.СтраныМира.НайтиПоКоду(Формат(country_code, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ="));
		Если Страна.Пустая() Тогда
			Отказ = Истина;
			СообщениеОбОшибке = "Не определена страна (country_code " +country_code + ")";
			СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке, НомерСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Страна;
	
КонецФункции
Функция НоменклатураЗамены(src_articul, src_brand, НомерСтроки, ТаблицаОшибок, Отказ)
	
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Если ЗначениеЗаполнено(src_articul) Тогда
		Если ЗначениеЗаполнено(src_brand) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	Номенклатура.Ссылка
			                      |ИЗ
			                      |	Справочник.Номенклатура КАК Номенклатура
			                      |ГДЕ
			                      |	НЕ Номенклатура.ПометкаУдаления
			                      |	И Номенклатура.Артикул = &Артикул
			                      |	И Номенклатура.Изготовитель.Наименование = &Наименование");
			Запрос.УстановитьПараметр("Артикул", src_articul);
			Запрос.УстановитьПараметр("Наименование", src_brand);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Номенклатура = Выборка.Ссылка;
			Иначе
				Отказ = Истина;
				СообщениеОбОшибке = "Не удалось найти номенклатуру замены (src_articul: " + src_articul + ", src_brand: " + src_brand + ")";
				СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке, НомерСтроки);
			КонецЕсли;
		Иначе
			Отказ = Истина;
			СообщениеОбОшибке = "Указан артикул замены, но не указан бренд (src_articul: " + src_articul + ")";
			СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке, НомерСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции
Функция НомерГТД(declaration_number)
	
	НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
	Если НЕ НомерГДТПустой(declaration_number) Тогда
		НомерГТД = Справочники.НомераГТД.НайтиПоКоду(declaration_number);
		Если НомерГТД.Пустая() Тогда
			НовыйНомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
			НовыйНомерГТД.Код = declaration_number;
			НовыйНомерГТД.Комментарий = "Загружено из окна поставщика: " + ТекущаяДата();
			НовыйНомерГТД.Записать();
			
			НомерГТД = НовыйНомерГТД.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерГТД;
	
КонецФункции
Функция НомерГДТПустой(НомерГДТ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИСТИНА КАК СодержитЦифры
	                      |ГДЕ
	                      |	&НомерГДТ ПОДОБНО ""%[0-9]%""");
	Запрос.УстановитьПараметр("НомерГДТ", НомерГДТ);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

//Распределение поступления по заказам
Функция РаспределитьПоступлениеПоЗаказам(ШапкаДокумента, ТаблицаПоступления, ТаблицаОшибок, Отказ)
	
	РазмещениеПоступления = ТаблицаРазмещениеПоступления();
	
	Если НЕ Отказ Тогда
		Если ШапкаДокумента.Контрагент.ЗаказРавенПриходу Тогда
			РаспределитьПоступлениеВОдинЗаказ(ШапкаДокумента, ТаблицаПоступления, РазмещениеПоступления, ТаблицаОшибок, Отказ);
		Иначе
			РаспределитьПоступлениеПоВсемЗаказам(ШапкаДокумента, ТаблицаПоступления, РазмещениеПоступления, ТаблицаОшибок, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РазмещениеПоступления;
	
КонецФункции

Процедура РаспределитьПоступлениеВОдинЗаказ(ШапкаДокумента, ТаблицаПоступления, РазмещениеСтрокПрихода, ТаблицаОшибок, Отказ)
	
	ПоступлениеРаспределено = Ложь;
	Контрагент = ШапкаДокумента.Контрагент;
	ИспользоватьАвтоотказ = Контрагент.АвтоОтказВОкнеПоставщика;
	ДопустимыйПроцентОтклонения = ДопустимыйПроцентОтклонения(Контрагент);
	
	ДеревоЗаказов = ДеревоОстатковПоЗаказам(ШапкаДокумента).Строки;
	
	ИсходноеКоличествоПоступления = ТаблицаПоступления.ВыгрузитьКолонку("Количество");
	ТаблицаПоступления.Колонки.Добавить("ОстатокРаспределения");
	ТаблицаПоступления.ЗагрузитьКолонку(ИсходноеКоличествоПоступления, "ОстатокРаспределения");
	
	
	Для Каждого Заказ Из ДеревоЗаказов Цикл
		
		СтрокиЗаказа = Заказ.Строки;
		ПоступлениеРаспределено = РаспределитьПоступлениеПоСтрокамЗаказа(ТаблицаПоступления, СтрокиЗаказа, РазмещениеСтрокПрихода, ДопустимыйПроцентОтклонения, ИспользоватьАвтоотказ, Истина);
		Если ПоступлениеРаспределено Тогда
			Прервать;
		Иначе
			РазмещениеСтрокПрихода.Очистить();
			ТаблицаПоступления.ЗагрузитьКолонку(ИсходноеКоличествоПоступления, "ОстатокРаспределения");
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПоступлениеРаспределено Тогда
		Отказ = Истина;
		СообщениеОбОшибке = "Нет подходящего заказа для распределения поступления в один заказ. (number:" + ШапкаДокумента.НомерВходящегоДокументаСФ + ")";
		СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке, 0);
	КонецЕсли;
	
КонецПроцедуры
Функция РаспределитьПоступлениеПоСтрокамЗаказа(ТаблицаПоступления, СтрокиЗаказа, РазмещениеСтрокПрихода, ДопустимыйПроцентОтклонения, ИспользоватьАвтоотказ, ЭтоПодборЗаказа = Ложь)
	
	ПоступлениеРаспределено = Истина;
	
	Для Каждого СтрокаПоступления Из ТаблицаПоступления Цикл
		
		//Распределяем по строкам заказов, по номенклатуре и номенклатуре замены
		ПодходящиеСтрокиЗаказа = СтрокиЗаказа.НайтиСтроки(Новый Структура("Артикул", СтрокаПоступления.Артикул), Истина);
		РаспределитьСтрокуПоступленияПоСтрокамЗаказа(СтрокаПоступления, ПодходящиеСтрокиЗаказа, РазмещениеСтрокПрихода, ДопустимыйПроцентОтклонения, Ложь);
		Если СтрокаПоступления.ОстатокРаспределения > 0 Тогда
			ПодходящиеСтрокиЗаказа = СтрокиЗаказа.НайтиСтроки(Новый Структура("НоменклатураЗаменыАртикул", СтрокаПоступления.Артикул), Истина);
			РаспределитьСтрокуПоступленияПоСтрокамЗаказа(СтрокаПоступления, ПодходящиеСтрокиЗаказа, РазмещениеСтрокПрихода, ДопустимыйПроцентОтклонения, Истина);
		КонецЕсли;
		
		//Строка поступления не полностью распределена по заказу
		Если СтрокаПоступления.ОстатокРаспределения > 0 Тогда
			ПоступлениеРаспределено = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//Контроль полного распределения заказа
	//актуально при отключенном автоотказе
	Если НЕ ИспользоватьАвтоотказ И ПоступлениеРаспределено Тогда
		КонтрольПолногоРаспределенияЗаказа(СтрокиЗаказа, ПоступлениеРаспределено);
	КонецЕсли;
	
	Возврат ПоступлениеРаспределено;
	
КонецФункции
Процедура РаспределитьСтрокуПоступленияПоСтрокамЗаказа(СтрокаПоступления, СтрокиЗаказа, РазмещениеСтрокПрихода, ДопустимыйПроцентОтклонения, ПоЗамене = Ложь)
	
	Для Каждого Строка Из СтрокиЗаказа Цикл
		Если ЦенаВПределахОтклонения(Строка.Цена, СтрокаПоступления.Цена, ДопустимыйПроцентОтклонения) Тогда
			КоличествоКРаспределению = Мин(Строка.КоличествоОстаток, СтрокаПоступления.ОстатокРаспределения);
			Если КоличествоКРаспределению > 0 Тогда
				НоваяСтрокаРазмещения = РазмещениеСтрокПрихода.Добавить();
				НоваяСтрокаРазмещения.СтрокаЗаявки = Строка.СтрокаЗаявки;
				НоваяСтрокаРазмещения.КлючСвязи = СтрокаПоступления.КлючСвязи;
				НоваяСтрокаРазмещения.Количество = КоличествоКРаспределению;
				
				//Возможна ситуация, когда есть несколько заказов с разными номенклатурами, но одним артикулом
				//Тогда в строке поступления проставится одна из заказанных номенклатур, что в таких случаях делать - непонятно,
				//т.к. строка поступления одна, а номенклатур должно быть несколько
				СтрокаПоступления.Номенклатура = ?(ПоЗамене, Строка.НоменклатураЗамены, Строка.Номенклатура);
				СтрокаПоступления.ЕдиницаИзмерения = СтрокаПоступления.Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаПоступления.ОстатокРаспределения = СтрокаПоступления.ОстатокРаспределения - КоличествоКРаспределению;
				Строка.КоличествоОстаток = Строка.КоличествоОстаток - КоличествоКРаспределению;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПоступления.ОстатокРаспределения = 0 Тогда
			//Полностью распределили
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
Функция КонтрольПолногоРаспределенияЗаказа(СтрокиЗаказа, ПоступлениеРаспределено)
	
	Отбор = Новый Структура("КоличествоОстаток", 0);
	РаспределенныхСтрок = СтрокиЗаказа.НайтиСтроки(Отбор, Истина).Количество();
	ВсегоСтрокЗаказа = СтрокиЗаказа.Количество();
	Если РаспределенныхСтрок <> ВсегоСтрокЗаказа Тогда
		ПоступлениеРаспределено = Ложь;
	КонецЕсли;

КонецФункции
Функция ДеревоОстатковПоЗаказам(ШапкаДокумента)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказыПоставщикамОстатки.СтрокаЗаявки КАК СтрокаЗаявки,
	                      |	ЗаказыПоставщикамОстатки.Номенклатура,
	                      |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество,
	                      |	ВЫБОР
	                      |		КОГДА ЗаказыПоставщикамОстатки.КоличествоОстаток = 0
	                      |			ТОГДА 0
	                      |		ИНАЧЕ ЗаказыПоставщикамОстатки.СуммаРеглОстаток / ЗаказыПоставщикамОстатки.КоличествоОстаток
	                      |	КОНЕЦ КАК ЦенаРегл,
	                      |	ВЫБОР
	                      |		КОГДА ЗаказыПоставщикамОстатки.КоличествоОстаток = 0
	                      |			ТОГДА 0
	                      |		ИНАЧЕ ЗаказыПоставщикамОстатки.СуммаУпрОстаток / ЗаказыПоставщикамОстатки.КоличествоОстаток
	                      |	КОНЕЦ КАК ЦенаУпр
	                      |ПОМЕСТИТЬ ВТ_ОстаткиПоСкладам
	                      |ИЗ
	                      |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	                      |			,
	                      |			Склад = &Склад
	                      |				И ТорговаяТочка = &ТорговаяТочка
	                      |				И (&ОтборПоЗаказу
	                      |						И СтрокаЗаявки.Заказ = &ЗаказДляОтбора
	                      |					ИЛИ НЕ &ОтборПоЗаказу
	                      |						И СтрокаЗаявки.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))) КАК ЗаказыПоставщикамОстатки
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	СтрокаЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОтказыПоЗаявкамОбороты.СтрокаЗаявки,
	                      |	СУММА(ОтказыПоЗаявкамОбороты.КоличествоОборот) КАК КоличествоОборот
	                      |ПОМЕСТИТЬ ВТ_ОтказыПоСтрокамЗаявок
	                      |ИЗ
	                      |	РегистрНакопления.ОтказыПоЗаявкам.Обороты(
	                      |			,
	                      |			,
	                      |			Регистратор,
	                      |			СтрокаЗаявки В
	                      |				(ВЫБРАТЬ
	                      |					ВТ_ОстаткиПоСкладам.СтрокаЗаявки
	                      |				ИЗ
	                      |					ВТ_ОстаткиПоСкладам КАК ВТ_ОстаткиПоСкладам)) КАК ОтказыПоЗаявкамОбороты
	                      |ГДЕ
	                      |	(ОтказыПоЗаявкамОбороты.Регистратор ССЫЛКА Документ.ЗаказПоставщику
	                      |			ИЛИ ОтказыПоЗаявкамОбороты.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПоставщику)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОтказыПоЗаявкамОбороты.СтрокаЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ОстаткиПоСкладам.СтрокаЗаявки.Заказ КАК Заказ,
	                      |	ВТ_ОстаткиПоСкладам.Номенклатура,
	                      |	ВТ_ОстаткиПоСкладам.СтрокаЗаявки,
	                      |	ВТ_ОстаткиПоСкладам.ЦенаРегл,
	                      |	ВТ_ОстаткиПоСкладам.ЦенаУпр,
	                      |	ВТ_ОстаткиПоСкладам.Количество - ЕСТЬNULL(ВТ_ОтказыПоСтрокамЗаявок.КоличествоОборот, 0) - ЕСТЬNULL(РазмещенияСтрокЗаказовОбороты.КоличествоОборот, 0) КАК КоличествоОстаток
	                      |ПОМЕСТИТЬ ВТ_ОстаткиНераспределеннойНоменклатуры
	                      |ИЗ
	                      |	ВТ_ОстаткиПоСкладам КАК ВТ_ОстаткиПоСкладам
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещенияСтрокЗаказов.Обороты(
	                      |				,
	                      |				,
	                      |				,
	                      |				СтрокаЗаявки В
	                      |					(ВЫБРАТЬ
	                      |						ВТ_ОстаткиПоСкладам.СтрокаЗаявки
	                      |					ИЗ
	                      |						ВТ_ОстаткиПоСкладам КАК ВТ_ОстаткиПоСкладам)) КАК РазмещенияСтрокЗаказовОбороты
	                      |		ПО ВТ_ОстаткиПоСкладам.СтрокаЗаявки = РазмещенияСтрокЗаказовОбороты.СтрокаЗаявки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтказыПоСтрокамЗаявок КАК ВТ_ОтказыПоСтрокамЗаявок
	                      |		ПО ВТ_ОстаткиПоСкладам.СтрокаЗаявки = ВТ_ОтказыПоСтрокамЗаявок.СтрокаЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ОстаткиНераспределеннойНоменклатуры.Заказ КАК Заказ,
	                      |	ВТ_ОстаткиНераспределеннойНоменклатуры.Номенклатура,
	                      |	ЕСТЬNULL(ВозможныеЗаменыНоменклатурыСрезПоследних.НоменклатураЗамена, ВТ_ОстаткиНераспределеннойНоменклатуры.Номенклатура) КАК НоменклатураЗамены,
	                      |	ВТ_ОстаткиНераспределеннойНоменклатуры.СтрокаЗаявки,
	                      |	ВТ_ОстаткиНераспределеннойНоменклатуры.ЦенаРегл,
	                      |	ВТ_ОстаткиНераспределеннойНоменклатуры.ЦенаУпр,
	                      |	ВТ_ОстаткиНераспределеннойНоменклатуры.КоличествоОстаток
	                      |ПОМЕСТИТЬ ВТ_НоменклатураЗамены
	                      |ИЗ
	                      |	ВТ_ОстаткиНераспределеннойНоменклатуры КАК ВТ_ОстаткиНераспределеннойНоменклатуры
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВозможныеЗаменыНоменклатуры.СрезПоследних КАК ВозможныеЗаменыНоменклатурыСрезПоследних
	                      |		ПО ВТ_ОстаткиНераспределеннойНоменклатуры.СтрокаЗаявки = ВозможныеЗаменыНоменклатурыСрезПоследних.СтрокаЗаявки
	                      |ГДЕ
	                      |	ВТ_ОстаткиНераспределеннойНоменклатуры.КоличествоОстаток <> 0
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_НоменклатураЗамены.Заказ КАК Заказ,
	                      |	ВТ_НоменклатураЗамены.Номенклатура,
	                      |	ВТ_НоменклатураЗамены.Номенклатура.Артикул КАК Артикул,
	                      |	ВТ_НоменклатураЗамены.НоменклатураЗамены,
	                      |	ВТ_НоменклатураЗамены.НоменклатураЗамены.Артикул,
	                      |	ВТ_НоменклатураЗамены.СтрокаЗаявки,
	                      |	ВТ_НоменклатураЗамены.КоличествоОстаток,
	                      |	ВТ_НоменклатураЗамены.ЦенаРегл,
	                      |	ВТ_НоменклатураЗамены.ЦенаУпр,
	                      |	ВТ_НоменклатураЗамены.ЦенаРегл КАК Цена
	                      |ИЗ
	                      |	ВТ_НоменклатураЗамены КАК ВТ_НоменклатураЗамены
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВТ_НоменклатураЗамены.Заказ.Дата
	                      |ИТОГИ ПО
	                      |	Заказ");						  
						  
	Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ШапкаДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(ШапкаДокумента.Дата));
	Запрос.УстановитьПараметр("ОтборПоЗаказу", ЗначениеЗаполнено(ШапкаДокумента.order_number));
	Запрос.УстановитьПараметр("ЗаказДляОтбора", ШапкаДокумента.ЗаказДляОтбора);
	Запрос.УстановитьПараметр("Склад", ШапкаДокумента.Склад);
	Запрос.УстановитьПараметр("ТорговаяТочка", ШапкаДокумента.ТорговаяТочка);

	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Процедура РаспределитьПоступлениеПоВсемЗаказам(ШапкаДокумента, ТаблицаПоступления, РазмещениеПоступления, ТаблицаОшибок, Отказ)
	
	Отбор = Новый Структура("Заказ,Артикул,НоменклатураЗаменыАртикул,СтрокаЗаявки");
	ТаблицаОстатковПоЗаказам = ТаблицаОстатковПоЗаказам(ШапкаДокумента, ТаблицаПоступления);
	
	Для Каждого СтрокаПоступления Из ТаблицаПоступления Цикл
		
		КоличествоПоступление = СтрокаПоступления.Количество;
		ВыборкаОстатковПоНоменклатуре = ВыборкаОстатковПоНоменклатуреПоступления(ТаблицаОстатковПоЗаказам, СтрокаПоступления.Артикул, КоличествоПоступление);
		Пока ВыборкаОстатковПоНоменклатуре.Следующий() И КоличествоПоступление > 0 Цикл
			//Если номенклатуру по артикулу уже определили, то другую номенклатуру с этим же артикулом не рассматриваем
			Если НЕ ЗначениеЗаполнено(СтрокаПоступления.Номенклатура) ИЛИ (СтрокаПоступления.Номенклатура = ВыборкаОстатковПоНоменклатуре.Номенклатура) Тогда
				Количество = Мин(КоличествоПоступление, ВыборкаОстатковПоНоменклатуре.Количество);
				Если Количество > 0 Тогда
					
					ЭтоНоменклатураЗамены = (СтрокаПоступления.Артикул = ВыборкаОстатковПоНоменклатуре.НоменклатураЗаменыАртикул);
					СтрокаПоступления.Номенклатура = ?(ЭтоНоменклатураЗамены, ВыборкаОстатковПоНоменклатуре.НоменклатураЗамены, ВыборкаОстатковПоНоменклатуре.Номенклатура);
					СтрокаПоступления.ЕдиницаИзмерения = СтрокаПоступления.Номенклатура.ЕдиницаХраненияОстатков;
					
					//Делаем новое размещение
					СтрокаРазмещения = РазмещениеПоступления.Добавить();
					СтрокаРазмещения.Количество = Количество;
					СтрокаРазмещения.КлючСвязи = СтрокаПоступления.КлючСвязи;
					СтрокаРазмещения.СтрокаЗаявки = ВыборкаОстатковПоНоменклатуре.СтрокаЗаявки;
					
					//Уменьшаем остатки
					КоличествоПоступление = КоличествоПоступление - Количество;
					ЗаполнитьЗначенияСвойств(Отбор, ВыборкаОстатковПоНоменклатуре);
					УменьшитьОбщийОстатокПоЗаказам(ТаблицаОстатковПоЗаказам, Отбор, Количество)
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Контроль распределения строки поступления
		Если КоличествоПоступление > 0 Тогда
			Отказ = Истина;
			СообщениеОбОшибке = "Нет достаточного остатков по заказам. (order_no:" + СтрокаПоступления.КлючСвязи + ")";
			СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке, СтрокаПоступления.КлючСвязи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
Функция ТаблицаОстатковПоЗаказам(ШапкаДокумента, ТаблицаПоступления)
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаПоступления.Артикул,
	                      |	ТаблицаПоступления.Цена
	                      |ПОМЕСТИТЬ ВТ_Поступление
	                      |ИЗ
	                      |	&ТаблицаПоступления КАК ТаблицаПоступления
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Поступление.Артикул,
	                      |	СРЕДНЕЕ(ВТ_Поступление.Цена) КАК Цена
	                      |ПОМЕСТИТЬ ВТ_СредниеЦеныПоступления
	                      |ИЗ
	                      |	ВТ_Поступление КАК ВТ_Поступление
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_Поступление.Артикул
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗаказыПоставщикамОстатки.Номенклатура,
	                      |	ЕСТЬNULL(ВозможныеЗаменыНоменклатурыСрезПоследних.НоменклатураЗамена, ЗаказыПоставщикамОстатки.Номенклатура) КАК НоменклатураЗамены,
	                      |	ЗаказыПоставщикамОстатки.СтрокаЗаявки КАК СтрокаЗаявки,
	                      |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток,
	                      |	ВЫБОР
	                      |		КОГДА ЗаказыПоставщикамОстатки.КоличествоОстаток = 0
	                      |			ТОГДА 0
	                      |		ИНАЧЕ ЗаказыПоставщикамОстатки.СуммаРеглОстаток / ЗаказыПоставщикамОстатки.КоличествоОстаток
	                      |	КОНЕЦ КАК ЦенаОстаток
	                      |ПОМЕСТИТЬ ОстаткиПоЗаказам
	                      |ИЗ
	                      |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	                      |			,
	                      |			Склад = &Склад
	                      |				И ТорговаяТочка = &ТорговаяТочка
	                      |				И (&ОтборПоЗаказу
	                      |						И СтрокаЗаявки.Заказ = &ЗаказДляОтбора
	                      |					ИЛИ НЕ &ОтборПоЗаказу
	                      |						И СтрокаЗаявки.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))) КАК ЗаказыПоставщикамОстатки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВозможныеЗаменыНоменклатуры.СрезПоследних КАК ВозможныеЗаменыНоменклатурыСрезПоследних
	                      |		ПО ЗаказыПоставщикамОстатки.СтрокаЗаявки = ВозможныеЗаменыНоменклатурыСрезПоследних.СтрокаЗаявки
	                      |ГДЕ
	                      |	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	СтрокаЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОстаткиПоЗаказам.Номенклатура,
	                      |	ОстаткиПоЗаказам.НоменклатураЗамены,
	                      |	ОстаткиПоЗаказам.СтрокаЗаявки,
	                      |	ОстаткиПоЗаказам.КоличествоОстаток,
	                      |	ОстаткиПоЗаказам.ЦенаОстаток
	                      |ПОМЕСТИТЬ ОстаткиСПодходящимАртикулом
	                      |ИЗ
	                      |	ОстаткиПоЗаказам КАК ОстаткиПоЗаказам
	                      |ГДЕ
	                      |	(ОстаткиПоЗаказам.Номенклатура.Артикул В
	                      |				(ВЫБРАТЬ
	                      |					ВТ_Поступление.Артикул
	                      |				ИЗ
	                      |					ВТ_Поступление КАК ВТ_Поступление)
	                      |			ИЛИ ОстаткиПоЗаказам.НоменклатураЗамены.Артикул В
	                      |				(ВЫБРАТЬ
	                      |					ВТ_Поступление.Артикул
	                      |				ИЗ
	                      |					ВТ_Поступление КАК ВТ_Поступление))
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОтказыПоЗаявкамОбороты.СтрокаЗаявки,
	                      |	СУММА(ОтказыПоЗаявкамОбороты.КоличествоОборот) КАК КоличествоОтказ
	                      |ПОМЕСТИТЬ ОтказыПоСтрокамЗаявок
	                      |ИЗ
	                      |	РегистрНакопления.ОтказыПоЗаявкам.Обороты(
	                      |			,
	                      |			,
	                      |			Регистратор,
	                      |			СтрокаЗаявки В
	                      |				(ВЫБРАТЬ
	                      |					ОстаткиСПодходящимАртикулом.СтрокаЗаявки
	                      |				ИЗ
	                      |					ОстаткиСПодходящимАртикулом КАК ОстаткиСПодходящимАртикулом)) КАК ОтказыПоЗаявкамОбороты
	                      |ГДЕ
	                      |	(ОтказыПоЗаявкамОбороты.Регистратор ССЫЛКА Документ.ЗаказПоставщику
	                      |			ИЛИ ОтказыПоЗаявкамОбороты.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПоставщику)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОтказыПоЗаявкамОбороты.СтрокаЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОстаткиСПодходящимАртикулом.СтрокаЗаявки,
	                      |	ЕСТЬNULL(ЕСТЬNULL(ЦеныЗаменыНоменклатуры.Цена, ЦеныОсновнойНоменклатуры.Цена), 0) КАК ЦенаПоступления
	                      |ПОМЕСТИТЬ ЦеныПоступления
	                      |ИЗ
	                      |	ОстаткиСПодходящимАртикулом КАК ОстаткиСПодходящимАртикулом
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СредниеЦеныПоступления КАК ЦеныЗаменыНоменклатуры
	                      |		ПО ОстаткиСПодходящимАртикулом.Номенклатура.Артикул = ЦеныЗаменыНоменклатуры.Артикул
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СредниеЦеныПоступления КАК ЦеныОсновнойНоменклатуры
	                      |		ПО ОстаткиСПодходящимАртикулом.НоменклатураЗамены.Артикул = ЦеныОсновнойНоменклатуры.Артикул
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОстаткиСПодходящимАртикулом.Номенклатура,
	                      |	ОстаткиСПодходящимАртикулом.НоменклатураЗамены,
	                      |	ОстаткиСПодходящимАртикулом.СтрокаЗаявки,
	                      |	ОстаткиСПодходящимАртикулом.КоличествоОстаток - ЕСТЬNULL(ОтказыПоСтрокамЗаявок.КоличествоОтказ, 0) - ЕСТЬNULL(РазмещенияСтрокЗаказовОбороты.КоличествоОборот, 0) КАК КоличествоОстаток,
	                      |	ОстаткиСПодходящимАртикулом.ЦенаОстаток,
	                      |	ЕСТЬNULL(ЦеныПоступления.ЦенаПоступления, 0) КАК ЦенаПоступления
	                      |ПОМЕСТИТЬ ОстаткиСвободнойНоменклатуры
	                      |ИЗ
	                      |	ОстаткиСПодходящимАртикулом КАК ОстаткиСПодходящимАртикулом
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ОтказыПоСтрокамЗаявок КАК ОтказыПоСтрокамЗаявок
	                      |		ПО ОстаткиСПодходящимАртикулом.СтрокаЗаявки = ОтказыПоСтрокамЗаявок.СтрокаЗаявки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещенияСтрокЗаказов.Обороты(
	                      |				,
	                      |				,
	                      |				,
	                      |				СтрокаЗаявки В
	                      |					(ВЫБРАТЬ
	                      |						ОстаткиСПодходящимАртикулом.СтрокаЗаявки
	                      |					ИЗ
	                      |						ОстаткиСПодходящимАртикулом КАК ОстаткиСПодходящимАртикулом)) КАК РазмещенияСтрокЗаказовОбороты
	                      |		ПО ОстаткиСПодходящимАртикулом.СтрокаЗаявки = РазмещенияСтрокЗаказовОбороты.СтрокаЗаявки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныПоступления КАК ЦеныПоступления
	                      |		ПО ОстаткиСПодходящимАртикулом.СтрокаЗаявки = ЦеныПоступления.СтрокаЗаявки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОстаткиСвободнойНоменклатуры.СтрокаЗаявки.Заказ КАК Заказ,
	                      |	ОстаткиСвободнойНоменклатуры.Номенклатура,
	                      |	ОстаткиСвободнойНоменклатуры.Номенклатура.Артикул КАК Артикул,
	                      |	ОстаткиСвободнойНоменклатуры.НоменклатураЗамены,
	                      |	ОстаткиСвободнойНоменклатуры.НоменклатураЗамены.Артикул,
	                      |	ОстаткиСвободнойНоменклатуры.СтрокаЗаявки,
	                      |	ОстаткиСвободнойНоменклатуры.ЦенаОстаток КАК Цена,
	                      |	ОстаткиСвободнойНоменклатуры.КоличествоОстаток КАК Количество,
	                      |	ОстаткиСвободнойНоменклатуры.ЦенаПоступления - ОстаткиСвободнойНоменклатуры.ЦенаОстаток КАК ОтклонениеПоЦене,
	                      |	ОстаткиСвободнойНоменклатуры.СтрокаЗаявки.СрокГарантированныйЗаказа КАК ОтклонениеПоГарантированномуСроку,
	                      |	ОстаткиСвободнойНоменклатуры.СтрокаЗаявки.Заявка.Дата КАК ОтклонениеПоДатеЗаявки
	                      |ИЗ
	                      |	ОстаткиСвободнойНоменклатуры КАК ОстаткиСвободнойНоменклатуры
	                      |ГДЕ
	                      |	ОстаткиСвободнойНоменклатуры.КоличествоОстаток > 0
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ОтклонениеПоЦене,
	                      |	ОтклонениеПоГарантированномуСроку,
	                      |	ОтклонениеПоДатеЗаявки");

	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ШапкаДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(ШапкаДокумента.Дата));
	Запрос.УстановитьПараметр("ОтборПоЗаказу", ЗначениеЗаполнено(ШапкаДокумента.order_number));
	Запрос.УстановитьПараметр("ЗаказДляОтбора", ШапкаДокумента.ЗаказДляОтбора);
	Запрос.УстановитьПараметр("Склад", ШапкаДокумента.Склад);
	Запрос.УстановитьПараметр("ТорговаяТочка", ШапкаДокумента.ТорговаяТочка);
	Запрос.УстановитьПараметр("ТаблицаПоступления", ТаблицаПоступления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция ВыборкаОстатковПоНоменклатуреПоступления(ТаблицаОстатковПоЗаказам, Артикул, ТребуемыйОстатокПоНоменклатуре)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаОстатков.Заказ,
	                      |	ТаблицаОстатков.Номенклатура,
	                      |	ТаблицаОстатков.Артикул,
	                      |	ТаблицаОстатков.НоменклатураЗамены,
	                      |	ТаблицаОстатков.НоменклатураЗаменыАртикул,
	                      |	ТаблицаОстатков.СтрокаЗаявки,
	                      |	ТаблицаОстатков.Цена,
	                      |	ТаблицаОстатков.Количество,
	                      |	ТаблицаОстатков.ОтклонениеПоЦене,
	                      |	ТаблицаОстатков.ОтклонениеПоГарантированномуСроку,
	                      |	ТаблицаОстатков.ОтклонениеПоДатеЗаявки
	                      |ПОМЕСТИТЬ ВТ_ОстаткиПоЗаказам
	                      |ИЗ
	                      |	&ТаблицаОстатковПоЗаказам КАК ТаблицаОстатков
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ОстаткиПоЗаказам.Заказ,
	                      |	ВТ_ОстаткиПоЗаказам.Номенклатура КАК Номенклатура,
	                      |	ВТ_ОстаткиПоЗаказам.Артикул,
	                      |	ВТ_ОстаткиПоЗаказам.НоменклатураЗамены,
	                      |	ВТ_ОстаткиПоЗаказам.НоменклатураЗаменыАртикул,
	                      |	ВТ_ОстаткиПоЗаказам.СтрокаЗаявки,
	                      |	ВТ_ОстаткиПоЗаказам.Цена,
	                      |	ВТ_ОстаткиПоЗаказам.Количество КАК Количество
	                      |ПОМЕСТИТЬ ВТ_ПодборНоменклатуры
	                      |ИЗ
	                      |	ВТ_ОстаткиПоЗаказам КАК ВТ_ОстаткиПоЗаказам
	                      |ГДЕ
	                      |	(ВТ_ОстаткиПоЗаказам.Артикул = &Артикул
	                      |			ИЛИ ВТ_ОстаткиПоЗаказам.НоменклатураЗаменыАртикул = &Артикул)
	                      |	И ВТ_ОстаткиПоЗаказам.Количество > 0
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ПодборНоменклатуры.Номенклатура
	                      |ПОМЕСТИТЬ ВТ_ПодходящаяНоменклатура
	                      |ИЗ
	                      |	ВТ_ПодборНоменклатуры КАК ВТ_ПодборНоменклатуры
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_ПодборНоменклатуры.Номенклатура
	                      |
	                      |ИМЕЮЩИЕ
	                      |	СУММА(ВТ_ПодборНоменклатуры.Количество) >= &ТребуемыйОстатокПоНоменклатуре
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ПодборНоменклатуры.Заказ,
	                      |	ВТ_ПодборНоменклатуры.Номенклатура КАК Номенклатура,
	                      |	ВТ_ПодборНоменклатуры.Артикул,
	                      |	ВТ_ПодборНоменклатуры.НоменклатураЗамены,
	                      |	ВТ_ПодборНоменклатуры.НоменклатураЗаменыАртикул,
	                      |	ВТ_ПодборНоменклатуры.СтрокаЗаявки,
	                      |	ВТ_ПодборНоменклатуры.Цена,
	                      |	ВТ_ПодборНоменклатуры.Количество КАК Количество
	                      |ИЗ
	                      |	ВТ_ПодборНоменклатуры КАК ВТ_ПодборНоменклатуры
	                      |ГДЕ
	                      |	ВТ_ПодборНоменклатуры.Номенклатура В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_ПодходящаяНоменклатура.Номенклатура
	                      |			ИЗ
	                      |				ВТ_ПодходящаяНоменклатура КАК ВТ_ПодходящаяНоменклатура)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Номенклатура,
	                      |	Количество УБЫВ");
	Запрос.УстановитьПараметр("ТаблицаОстатковПоЗаказам", ТаблицаОстатковПоЗаказам);
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("ТребуемыйОстатокПоНоменклатуре", ТребуемыйОстатокПоНоменклатуре);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
Процедура УменьшитьОбщийОстатокПоЗаказам(ТаблицаОстатковПоЗаказам, Отбор, Количество)

	СтрокиОбщихОстатков = ТаблицаОстатковПоЗаказам.НайтиСтроки(Отбор);
	Для Каждого Строка Из СтрокиОбщихОстатков Цикл
		Строка.Количество = Строка.Количество - Количество;
	КонецЦикла;

КонецПроцедуры

//Запись документа поступления
Процедура ЗаписатьДокументПоступления(ШапкаДокумента, ТаблицаТовары, РазмещениеПоступления, ТаблицаОшибок)
	
	СсылкаНаДокумент = ШапкаДокумента.СсылкаНаДокумент;
	обДокумент = ДокументПоступления(СсылкаНаДокумент);
	ИдентификаторыСтрокПрихода = Новый Соответствие;
	
	//Заполнение шапки поступления
	ЗаполнитьЗначенияСвойств(обДокумент, ШапкаДокумента);
	обДокумент.ДокументОснование = ШапкаДокумента.ЗаказДляОтбора;
	
	//Заполнения тч Товары
	Таблица = обДокумент.Товары;
	Таблица.Очистить();
	Для Каждого ТекСтрока Из ТаблицаТовары Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.СтрокаПрихода = ИдентификаторСтрокиПрихода(СсылкаНаДокумент, ТекСтрока.НомерГТД, ТекСтрока.СтранаПроисхождения, ШапкаДокумента.Дата, ШапкаДокумента.ТорговаяТочка);
		ИдентификаторыСтрокПрихода.Вставить(ТекСтрока.КлючСвязи, НоваяСтрока.СтрокаПрихода);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, обДокумент);
	КонецЦикла;
	обДокумент.СуммаДокумента = ТаблицаТовары.Итог("Сумма");
	
	//Заполнение размещения поступления
	Таблица = обДокумент.РазмещениеСтрокПрихода;
	Таблица.Очистить();
	Для Каждого Строка Из РазмещениеПоступления Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.СтрокаПрихода = ИдентификаторыСтрокПрихода[Строка.КлючСвязи];
	КонецЦикла;
	
	//Для непроведенных просили статус Новый//
	ОсновнойСтатус = обДокумент.СтатусДокумента;
	обДокумент.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый;
	обДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	//PaSe - 05.06.2018- На данный момент поступления не проводятся
	//Касается поступлений с автоотказом, когда они создают корректировку заказа//
	Если НЕ ЗначениеЗаполнено(обДокумент.ДокументОснование) Тогда
		Попытка
			обДокумент.СтатусДокумента = ОсновнойСтатус;
			обДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			обДокумент.Комментарий = обДокумент.Комментарий + "(Загрузка из ОП: Документ не удалось провести - " + ОписаниеОшибки + ")";
			СообщениеОбОшибке = "Ошибка при проведении документа: " + обДокумент + 
								" (document_date:" + ШапкаДокумента.ДатаВходящегоДокументаСФ + ", number:" + ШапкаДокумента.НомерВходящегоДокументаСФ + ") - (" + ОписаниеОшибки + ")";
			СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
Функция ДокументПоступления(СсылкаНаДокумент)
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		обДокумент = СсылкаНаДокумент.ПолучитьОбъект();
	Иначе
		обДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		СсылкаНаДокумент = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку();
		обДокумент.УстановитьСсылкуНового(СсылкаНаДокумент);
	КонецЕсли;
	
	Возврат обДокумент;
	
КонецФункции
Функция ИдентификаторСтрокиПрихода(СсылкаНаДокумент, НомерГТД, СтранаПроисхождения, Дата, ТорговаяТочка)
	
	Объект = Справочники.ИдентификаторыСтрокПриходов.СоздатьЭлемент();
	Ссылка = Справочники.ИдентификаторыСтрокПриходов.ПолучитьСсылку();
	Объект.УстановитьСсылкуНового(Ссылка);
	
	Объект.Приход = СсылкаНаДокумент;
	Объект.Наименование = Ссылка.УникальныйИдентификатор();
	Объект.НомерГТД = НомерГТД;
	Объект.СтранаПроисхождения = СтранаПроисхождения;
	Объект.Дата = Дата;
	Объект.ТорговаяТочка = ТорговаяТочка;
	Объект.Записать();
	
	Возврат Ссылка;
	
КонецФункции

//Запись ошибок загрузки
Процедура ЗаписатьОшибкиЗагрузки(ШапкаДокумента, ТаблицаОшибок)
	
	НаборЗаписей = РегистрыСведений.ОшибкиЗагрузкиОП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерДокумента.Установить(ШапкаДокумента.КодСайта);
	Если ТаблицаОшибок.Количество() > 0 Тогда
		ТаблицаОшибок.ЗаполнитьЗначения(ШапкаДокумента.КодСайта, "НомерДокумента");
		ТаблицаОшибок.ЗаполнитьЗначения(ШапкаДокумента.НомерВходящегоДокументаСФ, "number");
		ТаблицаОшибок.ЗаполнитьЗначения(ШапкаДокумента.ДатаВходящегоДокументаСФ, "document_date");
		НаборЗаписей.Загрузить(ТаблицаОшибок);
	КонецЕсли;
	НаборЗаписей.Записать();
	
КонецПроцедуры

//Прочее
Функция ТаблицаОшибок()
	
	КЧ = Новый КвалификаторыЧисла(10,0);
	КС = Новый КвалификаторыСтроки(0);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Число",,,КЧ));
	Таблица.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число",,,КЧ));
	Таблица.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка",,,КС));
	Таблица.Колонки.Добавить("document_date", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("number", Новый ОписаниеТипов("Строка",,,КС));
	
	Возврат Таблица;
	
КонецФункции
Функция ТаблицаТовары()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТипа = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(25));
	
	Таблица = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Таблица.Колонки.Добавить("НоменклатураЗамена", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Артикул", ОписаниеТипа);
	
	Возврат Таблица;
	
КонецФункции
Функция ТаблицаРазмещениеПоступления()
	
	РазмещениеПоступления = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().РазмещениеСтрокПрихода.ВыгрузитьКолонки();
	РазмещениеПоступления.Колонки.Добавить("КлючСвязи");
	Возврат РазмещениеПоступления;

КонецФункции
Функция СтавкиНДС()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(0,	Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить(10,	Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить(18,	Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить(20,	Перечисления.СтавкиНДС.НДС20);
	
	Возврат Соответствие;

КонецФункции
Процедура СформироватьТекстОшибкиПоступления(ТаблицаОшибок, СообщениеОбОшибке, НомерСтроки = 0)
	
	Строка = ТаблицаОшибок.Найти(НомерСтроки, "КлючСвязи");
	Если Строка = Неопределено Тогда
		Строка = ТаблицаОшибок.Добавить();
		Строка.КлючСвязи = НомерСтроки;
	КонецЕсли;
	Строка.ОписаниеОшибки = Строка.ОписаниеОшибки + ?(Строка.ОписаниеОшибки = "", "", ";" + Символы.ПС) + СообщениеОбОшибке;
	
КонецПроцедуры
Функция ДопустимыйПроцентОтклонения(Контрагент)
	
	ПроцентОтклоненияКонтрагента = Контрагент.ПроцентОтклоненияЦенПрихода;
	Возврат ?(ЗначениеЗаполнено(ПроцентОтклоненияКонтрагента), ПроцентОтклоненияКонтрагента, Константы.ПроцентОтклоненияЦенПрихода.Получить());
	
КонецФункции
Функция ЦенаВПределахОтклонения(ЦенаЗаказ, ЦенаПоступление, ДопустимыйПроцентОтклонения)
	
	Отклонение = (ЦенаЗаказ - ЦенаПоступление)/ЦенаЗаказ*100;
	МодульОтклонения = Макс(Отклонение, -Отклонение);
	
	Возврат МодульОтклонения <= ДопустимыйПроцентОтклонения;
	
КонецФункции

//Выгрузка при обмене
Функция ВыгрузитьЭлементы(вхТаблицаСсылокНаОбъекты, вхПланОбмена) Экспорт
	
	Результат = Новый Массив;
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[ВыгрузитьЭлементы]: неправильный параметр номер 2.";
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщика) тогда
		
		лМенеджерПланаОбмена = ПланыОбмена[лМетаданныеПланаОбмена.Имя];
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСсылок", вхТаблицаСсылокНаОбъекты.ВыгрузитьКолонку("Ссылка"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПоступлениеТоваровУслуг.ДатаВходящегоДокументаСФ КАК ДатаДокумента,
		               |	ПоступлениеТоваровУслуг.НомерВходящегоДокументаСФ КАК number,
		               |	ПоступлениеТоваровУслуг.КодСайта КАК invoice_id,
		               |	""accepted"" КАК status
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		               |ГДЕ
		               |	ПоступлениеТоваровУслуг.Ссылка В(&МассивСсылок)";
		лТипОбъектаXDTO = лМенеджерПланаОбмена.ТипПоОбъектуМетаданных(ПолучитьМетаданные());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			лОбъект = ФабрикаXDTO.Создать(лТипОбъектаXDTO);
			
			ЗаполнитьЗначенияСвойств(лОбъект, Выборка);
			лОбъект.doc_date = Формат(Выборка.ДатаДокумента, "ДФ=yyyy-MM-dd");
			лОбъект.doc_time = Формат(Выборка.ДатаДокумента, "ДФ=hh:mm");
			Результат.Добавить(лОбъект);
			
		КонецЦикла;
	ИначеЕсли лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog Тогда 
		
		лМенеджерПланаОбмена = ПланыОбмена[лМетаданныеПланаОбмена.Имя];

		лЗапрос = Новый Запрос;
		лЗапрос.УстановитьПараметр("ТаблицаСсылок", вхТаблицаСсылокНаОбъекты);
		лЗапрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
		лЗапрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	&ТаблицаСсылок КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
		|	ЕСТЬNULL(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.ПрайсПоставщика.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладПолучатель,
		|	ЕСТЬNULL(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.IDSite, """") КАК SSID,
		|	ЕСТЬNULL(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.ПоследняяКорректировка.ТорговаяТочка, ЕСТЬNULL(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.Заявка.ТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка))) КАК Клиент,
		|	ЕСТЬNULL(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.ПоследняяКорректировка.ТорговаяТочка.Город, ЕСТЬNULL(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.Заявка.ТорговаяТочка.Город, ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка))) КАК Город,
		|	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Количество,
		|	ЕСТЬNULL(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка КАК Виртуальная
		|ПОМЕСТИТЬ втСтрокиЗаявки
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
		|ГДЕ
		|	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслуг.Склад.ФизическийСклад КАК Склад,
		|	ПоступлениеТоваровУслуг.Номер КАК Номер,
		|	ПоступлениеТоваровУслуг.Дата КАК Дата,
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокументаСФ КАК НомерВходящегоСФ,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокументаСФ КАК ДатаВходящегоСФ,
		|	ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровУслуг.ТорговаяТочка.Код ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(ПоступлениеТоваровУслуг.Контрагент.ОсновнаяТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка))
		|		ИНАЧЕ ПоступлениеТоваровУслуг.ТорговаяТочка
		|	КОНЕЦ КАК Контрагент,
		|	ПоступлениеТоваровУслуг.Организация КАК Организация,
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Номенклатура.Наименование, """") КАК НоменклатураНаименование,
		|	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Номенклатура.Артикул, """") КАК НоменклатураАртикул,
		|	ПоступлениеТоваровУслугТовары.Цена,
		|	втСтрокиЗаявки.СкладПолучатель,
		|	втСтрокиЗаявки.SSID,
		|	втСтрокиЗаявки.Город,
		|	втСтрокиЗаявки.Клиент,
		|	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.НомерГТД.Представление, """") КАК ГТД,
		|	втСтрокиЗаявки.Количество,
		|	втСтрокиЗаявки.Виртуальная
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтрокиЗаявки КАК втСтрокиЗаявки
		|			ПО ПоступлениеТоваровУслугТовары.СтрокаПрихода = втСтрокиЗаявки.СтрокаПрихода
		|		ПО (ПоступлениеТоваровУслугТовары.Ссылка = ПоступлениеТоваровУслуг.Ссылка)
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И ПоступлениеТоваровУслугТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|ИТОГИ ПО
		|	Ссылка";
		
		лРезультатыЗапроса = лЗапрос.ВыполнитьПакет();
		
		Если НЕ лРезультатыЗапроса[2].Пустой() Тогда
			лТипОбъектаXDTO = ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаПриемку");
			лВыборка = лРезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
			
			Пока лВыборка.Следующий() Цикл

				лОбъект = ФабрикаXDTO.Создать(лТипОбъектаXDTO);
				ЗаполнитьЗначенияСвойств(лОбъект, лВыборка, "Номер,Дата,НомерВходящегоДокумента,ДатаВходящегоДокумента,НомерВходящегоСФ,ДатаВходящегоСФ,СуммаДокумента");
				лОбъект.ВидДокумента = "ПоступлениеТоваровУслуг";
				лОбъект.Ссылка = XMLСтрока(лВыборка.Ссылка);
				лОбъект.СкладСсылка = XMLСтрока(лВыборка.Склад);
				лОбъект.КонтрагентСсылка = XMLСтрока(лВыборка.Контрагент);
				лОбъект.ОрганизацияСсылка = XMLСтрока(лВыборка.Организация);
				
				//лТовары = лОбъект.ПолучитьСписок("Товары");
				лТовары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаПриемку.Товары"));
				лТоварыСписок = лТовары.ПолучитьСписок("СтрокаТовары");
				
				ВыборкаПоТоварам = лВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ТТПополнениеСклада = Неопределено;
				
				Пока ВыборкаПоТоварам.Следующий() Цикл
					НоваяСтрока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), лТоварыСписок.ВладеющееСвойство.Тип.Имя)); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам, "НоменклатураНаименование,НоменклатураАртикул,SSID,Количество,Цена,ГТД");
					НоваяСтрока.НоменклатураСсылка = XMLСтрока(ВыборкаПоТоварам.Номенклатура);
					Если ВыборкаПоТоварам.Виртуальная Тогда 
						Если ТТПополнениеСклада = Неопределено Тогда 
							ТТПополнениеСклада = ОбщегоНазначения.ПолучитьТТПополнениеСклада(лВыборка.Ссылка);
						КонецЕсли;
						НоваяСтрока.КлиентСсылка = XMLСтрока(ТТПополнениеСклада);
					Иначе
						НоваяСтрока.КлиентСсылка = XMLСтрока(ВыборкаПоТоварам.Клиент);
					КонецЕсли;
					НоваяСтрока.ГородСсылка = XMLСтрока(ВыборкаПоТоварам.Город);
					НоваяСтрока.СкладПолучательСсылка = XMLСтрока(ВыборкаПоТоварам.Склад);
					
					лТоварыСписок.Добавить(НоваяСтрока);

				КонецЦикла;	
				лОбъект.Товары = лТовары;
				Результат.Добавить(лОбъект);

			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьТТПополнениеСклада(вхСсылкаНаДокумент, РезультатЗапроса, ПополнениеСкладаТТ)		
	
	//Определяем есть ли виртуальные строки заявок
	
	Таблица = РезультатЗапроса.Выгрузить();
	ВремТаблица = Таблица.Скопировать(, "Виртуальная");
	Строки = ВремТаблица.НайтиСтроки(Новый Структура("Виртуальная", Истина));
	Если Строки.Количество() > 0 Тогда 
		ВремТаблица = Таблица.Скопировать(, "ПополнениеСкладаТТ");
		ВремТаблица.Колонки.Добавить("Счетчик", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
		ВремТаблица.Сверните("ПополнениеСкладаТТ", "Счетчик");
		
		СтрокаПустая = ВремТаблица.Найти(Справочники.ТорговыеТочки.ПустаяСсылка(), "ПополнениеСкладаТТ");
		Если СтрокаПустая <> Неопределено Тогда 
			ВремТаблица.Удалить(СтрокаПустая);  //Оставляем только не пустые торговые точки
		КонецЕсли;
		
		Если ВремТаблица.Количество() = 0 Тогда 
			//Нужно брать из шапки документа;
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Склад");
			
		Иначе	
			ВремТаблица.Сортировать("Счетчик Убыв");
			ПополнениеСкладаТТ = ВремТаблица.Получить(0).ПополнениеСкладаТТ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Новые таблицы движений

Функция РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыНаСкладах", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ЭтоМФП,Контрагент,ВидОперацииПоступления");
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ЭтоМФП тогда
		//собственное юр лицо, проводим только по взаиморасчетам
		Возврат ТаблицаДвижений;
	КонецЕсли;
		
	Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI
		ИЛИ Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Прочее Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	ПоступленияВыгружаютсяИз77 = глЗначениеПеременной("ПоступленияВыгружаютсяИз77");	
	
	Если вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят
		ИЛИ вхПараметры.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда
		//принимаем на складе ТопЛог все количество, огруженное поставщиком
		//потом размещенное ТопЛогом количество переместим на склад поступления
		
		// ado
		//Контрагент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "Контрагент");
		//Если ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент, "Организация")) Тогда
		//	//собственное юр лицо, проводим только по взаиморасчетам
		//	Возврат ТабТоваров;
		//КонецЕсли;
		
		
		Если Не ПоступленияВыгружаютсяИз77 Тогда 			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			               |	ПоступлениеТоваровУслуг.Ссылка КАК Регистратор,
			               |	ПоступлениеТоваровУслуг.Ссылка.Дата КАК Период,
			               |	ВЫБОР
						   |		КОГДА ПоступлениеТоваровУслуг.Ссылка.флНеВыгружатьВТопЛог
						   |			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
						   |		КОГДА ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки = &ПустойСклад
			               |			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			               |		ИНАЧЕ ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки
			               |	КОНЕЦ КАК Склад,
			               |	ПоступлениеТоваровУслуг.Номенклатура,
			               |	&Качество,
			               |	ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято КАК Количество
			               |ИЗ
			               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
			               |ГДЕ
			               |	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
			               |	И НЕ ПоступлениеТоваровУслуг.Номенклатура.Услуга
			               |	И ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято > 0
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			               |	ПоступлениеТоваровУслуг.Ссылка,
			               |	ПоступлениеТоваровУслуг.Ссылка.Дата,
			               |	ВЫБОР
			               |		КОГДА ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки = &ПустойСклад
			               |			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			               |		ИНАЧЕ ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки
			               |	КОНЕЦ,
			               |	ПоступлениеТоваровУслуг.Номенклатура,
			               |	&Качество,
			               |	ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено
			               |ИЗ
			               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
			               |ГДЕ
			               |	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
			               |	И НЕ ПоступлениеТоваровУслуг.Номенклатура.Услуга
			               |	И ПоступлениеТоваровУслуг.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровРазмещен)
			               |	И ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено > 0
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
			               |	ПоступлениеТоваровУслуг.Ссылка,
			               |	ПоступлениеТоваровУслуг.Ссылка.Дата,
			               |	ВЫБОР
						   |		КОГДА ПоступлениеТоваровУслуг.Ссылка.флНеВыгружатьВТопЛог
						   |			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			               |		КОГДА ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки = &ПустойСклад
			               |			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			               |		ИНАЧЕ ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки
			               |	КОНЕЦ,
			               |	ПоступлениеТоваровУслуг.Номенклатура,
			               |	&КачествоНедостача,
			               |	ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено
			               |ИЗ
			               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
			               |ГДЕ
			               |	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
			               |	И НЕ ПоступлениеТоваровУслуг.Номенклатура.Услуга
			               |	И ПоступлениеТоваровУслуг.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровРазмещен)
			               |	И ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено > 0";
			
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		    Запрос.УстановитьПараметр("Качество", Справочники.Качество.Новый);
		    Запрос.УстановитьПараметр("КачествоНедостача", Справочники.Качество.Недостача);
			Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
			
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			               |	ПоступлениеТоваровУслуг.Ссылка КАК Регистратор,
			               |	ПоступлениеТоваровУслуг.Ссылка.Дата КАК Период,
			               |	ВЫБОР
						   |		КОГДА ПоступлениеТоваровУслуг.Ссылка.флНеВыгружатьВТопЛог
						   |			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			               |		КОГДА ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки = &ПустойСклад
			               |			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			               |		ИНАЧЕ ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки
			               |	КОНЕЦ КАК Склад,
			               |	ПоступлениеТоваровУслуг.Номенклатура,
			               |	&Качество,
			               |	ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято КАК Количество
			               |ИЗ
			               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
			               |ГДЕ
			               |	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
			               |	И НЕ ПоступлениеТоваровУслуг.Номенклатура.Услуга
			               |	И ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято > 0";
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		    Запрос.УстановитьПараметр("Качество", Справочники.Качество.Новый);
			Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено, вхФильтр = Неопределено)
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ЭтоМФП,Контрагент,ВидОперацииПоступления,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,СозданВ77");
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПроведенияПоПартиямРезервам") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	// МФП не проводим 
	Если Реквизиты.ЭтоМФП Тогда 
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI
		ИЛИ Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Прочее Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	//ЗапрещеноПроведение = Реквизиты.ЭтоМФП И Реквизиты.СозданВ77 И Реквизиты.Дата >= глЗначениеПеременной("ДатаЗапускаПроведенияПоПартиямРезервам");
	//Если ЗапрещеноПроведение Тогда 
	//	Возврат ТаблицаДвижений;
	//КонецЕсли;
	
	ПоступленияВыгружаютсяИз77 = глЗначениеПеременной("ПоступленияВыгружаютсяИз77");	
	
	Если Не (Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят
		ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен) Тогда
		
		Возврат ТаблицаДвижений;
	КонецЕсли;

		//Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаТоваров", ТаблицаДвижений) Тогда
		//	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СформироватьТаблицуТоваровДокумента(вхСсылкаНаДокумент, вхПараметры), ТаблицаДвижений);
		//
		//КонецЕсли;
		Если Не ПоступленияВыгружаютсяИз77 Тогда 	
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ПоступлениеТоваровУслуг.Ссылка КАК Регистратор,
			|	ПоступлениеТоваровУслуг.Ссылка.Дата КАК Период,
			|	ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслуг.Ссылка.флНеВыгружатьВТопЛог
			|			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			|		КОГДА ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки = &ПустойСклад
			|			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			|		ИНАЧЕ ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки
			|	КОНЕЦ КАК Склад,
			|	&Качество КАК Качество,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслуг.Ссылка.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.ОтветХранение)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ПоступлениеТоваровУслуг.Ссылка.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.Комиссия)
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаКомиссию)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			|			КОНЕЦ
			|	КОНЕЦ КАК СтатусПартии,
			|	ПоступлениеТоваровУслуг.СтрокаПрихода КАК СтрокаПрихода,
			|	ПоступлениеТоваровУслуг.Ссылка.Организация КАК Организация,
			|	ПоступлениеТоваровУслуг.НомерСтроки КАК НомерСтрокиВДокументе,
			|	ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято КАК Количество,
			|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество КАК СуммаРубли,
			|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество КАК СуммаДоллары,
			|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество КАК СуммаЕвро
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
			|ГДЕ
			|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
			|	И НЕ ПоступлениеТоваровУслуг.Номенклатура.Услуга
			|	И ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято > 0 %УсловиеПоНоменклатуре%
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
			|	ПоступлениеТоваровУслуг.Ссылка,
			|	ПоступлениеТоваровУслуг.Ссылка.Дата,
			|	ПоступлениеТоваровУслуг.Номенклатура,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслуг.Ссылка.флНеВыгружатьВТопЛог
			|			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			|		КОГДА ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки = &ПустойСклад
			|			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			|		ИНАЧЕ ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки
			|	КОНЕЦ,
			|	&Качество,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслуг.Ссылка.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.ОтветХранение)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ПоступлениеТоваровУслуг.Ссылка.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.Комиссия)
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаКомиссию)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ПоступлениеТоваровУслуг.СтрокаПрихода,
			|	ПоступлениеТоваровУслуг.Ссылка.Организация,
			|	ПоступлениеТоваровУслуг.НомерСтроки,
			|	ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено,
			|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество,
			|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество,
			|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
			|ГДЕ
			|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
			|	И НЕ ПоступлениеТоваровУслуг.Номенклатура.Услуга
			|	И ПоступлениеТоваровУслуг.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровРазмещен)
			|	И ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено > 0  %УсловиеПоНоменклатуре%
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
			|	ПоступлениеТоваровУслуг.Ссылка,
			|	ПоступлениеТоваровУслуг.Ссылка.Дата,
			|	ПоступлениеТоваровУслуг.Номенклатура,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслуг.Ссылка.флНеВыгружатьВТопЛог
			|			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			|		КОГДА ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки = &ПустойСклад
			|			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
			|		ИНАЧЕ ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки
			|	КОНЕЦ,
			|	&КачествоНедостача,
			|	ВЫБОР
			|		КОГДА ПоступлениеТоваровУслуг.Ссылка.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.ОтветХранение)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ПоступлениеТоваровУслуг.Ссылка.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.Комиссия)
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаКомиссию)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ПоступлениеТоваровУслуг.СтрокаПрихода,
			|	ПоступлениеТоваровУслуг.Ссылка.Организация,
			|	ПоступлениеТоваровУслуг.НомерСтроки,
			|	ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено,
			|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество,
			|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество,
			|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
			|ГДЕ
			|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
			|	И НЕ ПоступлениеТоваровУслуг.Номенклатура.Услуга
			|	И ПоступлениеТоваровУслуг.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровРазмещен)
			|	И ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято - ПоступлениеТоваровУслуг.КоличествоРазмещено > 0 %УсловиеПоНоменклатуре%";
			
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Запрос.УстановитьПараметр("Качество", Справочники.Качество.Новый);
			Запрос.УстановитьПараметр("КачествоНедостача", Справочники.Качество.Недостача);
			Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
			Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", " И ПоступлениеТоваровУслуг.Номенклатура = &Номенклатура");
				Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", "");
			КонецЕсли;
			
			ТабТоваров = Запрос.Выполнить().Выгрузить();
			
			Если ТабТоваров.Количество() > 0 Тогда
				ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");
				ВалютаДокумента = Реквизиты.ВалютаДокумента;
				КурсДокумента = Реквизиты.КурсВзаиморасчетов;
				КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
				КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаДоллар, ДатаДокумента);
				КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаЕвро, ДатаДокумента);
				Если ВалютаДокумента = ПараметрыСеанса.ВалютаРубль Тогда
					Для Каждого Товар Из ТабТоваров Цикл
						Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
						ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
						Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
						ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
					КонецЦикла;
					
				ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаДоллар Тогда
					Для Каждого Товар Из ТабТоваров Цикл
						Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаДоллары, ПараметрыСеанса.ВалютаДоллар,
						ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
						Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаДоллары, ПараметрыСеанса.ВалютаЕвро,
						ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
					КонецЦикла;
					
				ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаЕвро Тогда
					Для Каждого Товар Из ТабТоваров Цикл
						Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаЕвро, ПараметрыСеанса.ВалютаЕвро,
						ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
						Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаЕвро, ПараметрыСеанса.ВалютаДоллар,
						ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабТоваров, ТаблицаДвижений);
		Иначе
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
				|	ПоступлениеТоваровУслуг.Ссылка КАК Регистратор,
				|	ПоступлениеТоваровУслуг.Ссылка.Дата КАК Период,
				|	ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
				|	ВЫБОР
				|		КОГДА ПоступлениеТоваровУслуг.Ссылка.флНеВыгружатьВТопЛог
				|				ИЛИ ПоступлениеТоваровУслуг.Ссылка.ЭтоМФП
				|				ИЛИ ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки = &ПустойСклад
				|			ТОГДА ПоступлениеТоваровУслуг.Ссылка.Склад
				|		ИНАЧЕ ПоступлениеТоваровУслуг.Ссылка.Склад.СкладПриемки
				|	КОНЕЦ КАК Склад,
				|	&Качество КАК Качество,
				|	ВЫБОР
				|		КОГДА ПоступлениеТоваровУслуг.Ссылка.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.ОтветХранение)
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ПоступлениеТоваровУслуг.Ссылка.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.Комиссия)
				|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаКомиссию)
				|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
				|			КОНЕЦ
				|	КОНЕЦ КАК СтатусПартии,
				|	ПоступлениеТоваровУслуг.СтрокаПрихода КАК СтрокаПрихода,
				|	ПоступлениеТоваровУслуг.Ссылка.Организация КАК Организация,
				|	ПоступлениеТоваровУслуг.НомерСтроки КАК НомерСтрокиВДокументе,
				|	ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято КАК Количество,
				|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество КАК СуммаРубли,
				|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество КАК СуммаДоллары,
				|	(ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество КАК СуммаЕвро,
				|	ВЫБОР
				|		КОГДА ПоступлениеТоваровУслуг.Ссылка.СуммаВключаетНДС
				|				И ПоступлениеТоваровУслуг.Ссылка.УчитыватьНДС
				|			ТОГДА (ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято) * (ПоступлениеТоваровУслуг.Сумма - ПоступлениеТоваровУслуг.СуммаНДС) / ПоступлениеТоваровУслуг.Количество
				|		ИНАЧЕ (ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято) * ПоступлениеТоваровУслуг.Сумма / ПоступлениеТоваровУслуг.Количество
				|	КОНЕЦ КАК СуммаБезНДС,
				|	ПоступлениеТоваровУслуг.Номенклатура.СтавкаНДС КАК СтавкаНДС
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
				|ГДЕ
				|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
				|	И НЕ ПоступлениеТоваровУслуг.Номенклатура.Услуга
				|	И ПоступлениеТоваровУслуг.Количество - ПоступлениеТоваровУслуг.КоличествоНеПринято > 0";
				Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
				Запрос.УстановитьПараметр("Качество", Справочники.Качество.Новый);
				Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
				
				
				Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
					Запрос.Текст = Запрос.Текст + " И ПоступлениеТоваровУслуг.Номенклатура = &Номенклатура";
					Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
				КонецЕсли;
				
				ТабТоваров = Запрос.Выполнить().Выгрузить();
				
				ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");
				ВалютаДокумента = Реквизиты.ВалютаДокумента;
				КурсДокумента = Реквизиты.КурсВзаиморасчетов;
				КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
				КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаДоллар, ДатаДокумента);
				КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаЕвро, ДатаДокумента);
				
				Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
					Запрос = Новый Запрос;
					Запрос.Текст =  "ВЫБРАТЬ
					                |	ПоступлениеТоваровУслугТовары.Номенклатура
					                |ПОМЕСТИТЬ втТовары
					                |ИЗ
					                |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
					                |ГДЕ
					                |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка  %УсловиеПоНоменклатуре%
					                |;
					                |
					                |////////////////////////////////////////////////////////////////////////////////
					                |ВЫБРАТЬ
					                |	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.Номенклатура КАК Номенклатура,
					                |	ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена,
					                |	ЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта
					                |ИЗ
					                |	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
					                |			&КонПериода,
					                |			ВЫРАЗИТЬ(ПрайсПоставщика КАК Справочник.ПрайсыПоставщиковVMI).Владелец = &Контрагент
					                |				И Номенклатура.Номенклатура В
					                |					(ВЫБРАТЬ
					                |						втТовары.Номенклатура
					                |					ИЗ
					                |						втТовары)
					                |				И Цена > 0) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних";
					
					Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
					Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
					Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
					
					Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", " И ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура");
						Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
					Иначе
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", "");
					КонецЕсли;

					ТаблицаЦен = Запрос.Выполнить().Выгрузить();
					Для Каждого Товар Из ТабТоваров Цикл 
						СтрокаЦены = ТаблицаЦен.Найти(Товар.Номенклатура, "Номенклатура");
						Если СтрокаЦены = Неопределено Тогда 
							вхОтказ = Истина;
							Сообщение = "По номенклатуре " + Товар.Номенклатура + " нет цены в прайсе поставщика VMI"; 
							#Если Клиент Тогда
								Сообщить(Сообщение);	
							#Иначе
								ВызватьИсключение Сообщение;	
							#КонецЕсли
						Иначе
							Если СтрокаЦены.Валюта = ПараметрыСеанса.ВалютаРубль Тогда 
								Товар.СуммаРубли = Товар.Количество * СтрокаЦены.Цена;
								Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
								ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
								Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
								ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
							ИначеЕсли  СтрокаЦены.Валюта = ПараметрыСеанса.ВалютаДоллар Тогда 
								Товар.СуммаДоллары = Товар.Количество * СтрокаЦены.Цена;
								Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаДоллары, ПараметрыСеанса.ВалютаДоллар,
								ПараметрыСеанса.ВалютаРубль, КурсДоллара.Курс, 1, КурсДоллара.Кратность, 1);
								Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаДоллары, ПараметрыСеанса.ВалютаЕвро,
								ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
							ИначеЕсли СтрокаЦены.Валюта = ПараметрыСеанса.ВалютаЕвро Тогда 
								Товар.СуммаЕвро = Товар.Количество * СтрокаЦены.Цена;
								Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаЕвро, ПараметрыСеанса.ВалютаЕвро,
								ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
								Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаЕвро, ПараметрыСеанса.ВалютаДоллар,
								ПараметрыСеанса.ВалютаРубль, КурсЕвро.Курс, 1, КурсЕвро.Кратность, 1);
							КонецЕсли;
							Товар.СуммаБезНДС = Товар.СуммаРубли - УчетНДС.РассчитатьСуммуНДС(Товар.СуммаРубли, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Товар.СтавкаНДС));
						КонецЕсли; 
					КонецЦикла;
				Иначе
					Если ВалютаДокумента = ПараметрыСеанса.ВалютаРубль Тогда
						Для Каждого Товар Из ТабТоваров Цикл
							Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
							ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
							Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
							ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
						КонецЦикла;
						
					ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаДоллар Тогда
						Для Каждого Товар Из ТабТоваров Цикл
							Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаДоллары, ПараметрыСеанса.ВалютаДоллар,
							ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
							Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаДоллары, ПараметрыСеанса.ВалютаЕвро,
							ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
							Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
							ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
						КонецЦикла;
						
					ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаЕвро Тогда
						Для Каждого Товар Из ТабТоваров Цикл
							Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаЕвро, ПараметрыСеанса.ВалютаЕвро,
							ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
							Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаЕвро, ПараметрыСеанса.ВалютаДоллар,
							ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
							Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
							ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабТоваров, ТаблицаДвижений);
		КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_РазмещенияСтрокЗаказов(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("РазмещенияСтрокЗаказов", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ЭтоМФП,ВидОперацииПоступления,СтатусДокумента");
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ЭтоМФП тогда
		//собственное юр лицо, проводим только по взаиморасчетам
		Возврат ТаблицаДвижений;
	КонецЕсли;
		
	Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI
		ИЛИ Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Прочее Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый Тогда 
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	//Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен ИЛИ 
	//	 Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               |	ВЫБОР
	               |		КОГДА Товары.Ссылка.ДатаАвторазмещения = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА Товары.Ссылка.Дата
	               |		ИНАЧЕ Товары.Ссылка.ДатаАвторазмещения
	               |	КОНЕЦ КАК Период,
	               |	Товары.Ссылка КАК Регистратор,
	               |	Товары.СтрокаПрихода,
	               |	Товары.СтрокаЗаявки,
	               |	Товары.Количество
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &Ссылка
	               |	И Товары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки";
						
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(ТаблицаДвижений.Добавить(), Выборка);
		Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят ИЛИ
			Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Период = Реквизиты.Дата;
		КонецЕсли;
	КонецЦикла;
	
	
	//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
		
	//ИначеЕсли Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда 
	//	
	//	НаборЗаписей = РегистрыНакопления.РазмещенияСтрокЗаказов.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Регистратор.Установить(вхСсылкаНаДокумент);
	//	НаборЗаписей.Прочитать();
	//	
	//	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, НаборЗаписей.Выгрузить());
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
	//	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки
	//	               |ПОМЕСТИТЬ втРазмещенияСтрокПрихода
	//	               |ИЗ
	//	               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
	//	               |;
	//	               |
	//	               |////////////////////////////////////////////////////////////////////////////////
	//	               |ВЫБРАТЬ
	//	               |	РазмещенияСтрокЗаказовОстатки.СтрокаПрихода,
	//	               |	РазмещенияСтрокЗаказовОстатки.СтрокаЗаявки,
	//	               |	- РазмещенияСтрокЗаказовОстатки.КоличествоОстаток КАК Количество
	//	               |ИЗ
	//	               |	РегистрНакопления.РазмещенияСтрокЗаказов.Остатки(
	//	               |			,
	//	               |			(СтрокаПрихода, СтрокаЗаявки) В
	//	               |				(ВЫБРАТЬ
	//	               |					втРазмещенияСтрокПриходов.СтрокаПрихода,
	//	               |					втРазмещенияСтрокПриходов.СтрокаЗаявки
	//	               |				ИЗ
	//	               |					втРазмещенияСтрокПриходов)) КАК РазмещенияСтрокЗаказовОстатки
	//	               |
	//	               |ДЛЯ ИЗМЕНЕНИЯ
	//	               |	РегистрНакопления.РазмещенияСтрокЗаказов.Остатки";
	//				   
	//	Для Каждого СтрокаТЧ Из Запрос.Выполнить().Выгрузить() Цикл 
	//		НоваяСтрока = ТаблицаДвижений.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
	//		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	//		НоваяСтрока.Регистратор = вхСсылкаНаДокумент;
	//		НоваяСтрока.ВидДвижения = Реквизиты.дата;
	//	КонецЦикла;				
	//КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ТоварыКРезервированию(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено, ОтказыПоРазмещениям)
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыКРезервированию", ТаблицаДвижений);
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ЭтоМФП,ВидОперацииПоступления,СтатусДокумента");
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ЭтоМФП тогда
		//собственное юр лицо, проводим только по взаиморасчетам
		Возврат ТаблицаДвижений;
	КонецЕсли;
		
	Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI
		ИЛИ Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Прочее Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят 
		Или Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда 
		 Запрос = Новый Запрос;
		 Запрос.Текст = "ВЫБРАТЬ
		                |	Товары.Ссылка.Дата КАК Период,
		                |	Товары.Ссылка КАК Регистратор,
		                |	Товары.СтрокаЗаявки КАК СтрокаЗаявки,
		                |	Товары.СтрокаПрихода КАК СтрокаПрихода,
		                |	ВЫБОР
		                |		КОГДА Товары.Ссылка.Склад.СкладПриемки ЕСТЬ NULL
		                |				ИЛИ Товары.Ссылка.Склад.СкладПриемки = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		                |			ТОГДА Товары.Ссылка.Склад
		                |		ИНАЧЕ Товары.Ссылка.Склад.СкладПриемки
		                |	КОНЕЦ КАК Склад,
		                |	ПоступлениеТоваровУслугТовары.Номенклатура,
		                |	СУММА(Товары.Количество) КАК Количество
		                |ПОМЕСТИТЬ втТовары
		                |ИЗ
		                |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК Товары
		                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		                |		ПО Товары.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
		                |ГДЕ
		                |	Товары.Ссылка = &Ссылка
		                |	И ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	Товары.Ссылка.Дата,
		                |	Товары.Ссылка,
		                |	Товары.СтрокаЗаявки,
		                |	ВЫБОР
		                |		КОГДА Товары.Ссылка.Склад.СкладПриемки ЕСТЬ NULL
		                |				ИЛИ Товары.Ссылка.Склад.СкладПриемки = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		                |			ТОГДА Товары.Ссылка.Склад
		                |		ИНАЧЕ Товары.Ссылка.Склад.СкладПриемки
		                |	КОНЕЦ,
		                |	Товары.СтрокаПрихода,
		                |	ПоступлениеТоваровУслугТовары.Номенклатура
		                |
		                |ИНДЕКСИРОВАТЬ ПО
		                |	СтрокаЗаявки,
		                |	СтрокаПрихода
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки КАК СтрокаЗаявки,
		                |	СУММА(ПоступлениеТоваровУслугПричиныОтказов.Количество) КАК Количество,
		                |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода КАК СтрокаПрихода
		                |ПОМЕСТИТЬ втОтказы
		                |ИЗ
		                |	Документ.ПоступлениеТоваровУслуг.ПричиныОтказов КАК ПоступлениеТоваровУслугПричиныОтказов
		                |ГДЕ
		                |	ПоступлениеТоваровУслугПричиныОтказов.Ссылка = &Ссылка
		                |	И (ПоступлениеТоваровУслугПричиныОтказов.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровПринят)
		                |			ИЛИ ПоступлениеТоваровУслугПричиныОтказов.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровРазмещен))
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки,
		                |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода
		                |
		                |ИНДЕКСИРОВАТЬ ПО
		                |	СтрокаЗаявки,
		                |	СтрокаПрихода
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		                |	втТовары.Период,
		                |	втТовары.Регистратор,
		                |	втТовары.СтрокаЗаявки,
		                |	втТовары.СтрокаПрихода,
		                |	втТовары.Склад,
		                |	втТовары.Номенклатура,
		                |	втТовары.Количество - ЕСТЬNULL(втОтказы.Количество, 0) КАК Количество
		                |ИЗ
		                |	втТовары КАК втТовары
		                |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
		                |		ПО втТовары.СтрокаЗаявки = втОтказы.СтрокаЗаявки
		                |			И втТовары.СтрокаПрихода = втОтказы.СтрокаПрихода
		                |ГДЕ
		                |	втТовары.Количество - ЕСТЬNULL(втОтказы.Количество, 0) > 0";
						
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	КонецЕсли;
	
	//Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда 
	//	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыКРезервированию");		
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	ТаблицаДвижений.Период КАК Период,
	//	               |	ТаблицаДвижений.Регистратор КАК Регистратор,
	//	               |	ТаблицаДвижений.СтрокаЗаявки КАК СтрокаЗаявки,
	//	               |	ТаблицаДвижений.СтрокаПрихода КАК СтрокаПрихода,
	//	               |	ТаблицаДвижений.Склад КАК Склад,
	//	               |	ТаблицаДвижений.Номенклатура КАК Номенклатура,
	//	               |	ТаблицаДвижений.Количество
	//	               |ПОМЕСТИТЬ втТаблицаДвижений
	//	               |ИЗ
	//	               |	&ТаблицаДвижений КАК ТаблицаДвижений
	//	               |
	//	               |ИНДЕКСИРОВАТЬ ПО
	//	               |	СтрокаЗаявки,
	//	               |	СтрокаПрихода,
	//	               |	Склад,
	//	               |	Номенклатура
	//	               |;
	//	               |
	//	               |////////////////////////////////////////////////////////////////////////////////
	//	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
	//	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки
	//	               |ПОМЕСТИТЬ втРазмещения
	//	               |ИЗ
	//	               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
	//	               |ГДЕ
	//	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка = &Ссылка
	//	               |;
	//	               |
	//	               |////////////////////////////////////////////////////////////////////////////////
	//	               |ВЫБРАТЬ
	//	               |	ТоварыКРезервированиюОстатки.СтрокаЗаявки КАК СтрокаЗаявки,
	//	               |	ТоварыКРезервированиюОстатки.СтрокаПрихода КАК СтрокаПрихода,
	//	               |	ТоварыКРезервированиюОстатки.Склад КАК Склад,
	//	               |	ТоварыКРезервированиюОстатки.Номенклатура КАК Номенклатура,
	//	               |	-ТоварыКРезервированиюОстатки.КоличествоОстаток КАК Количество
	//	               |ПОМЕСТИТЬ втОстатки
	//	               |ИЗ
	//	               |	РегистрНакопления.ТоварыКРезервированию.Остатки(
	//	               |			,
	//	               |			(СтрокаЗаявки, СтрокаПрихода) В
	//	               |				(ВЫБРАТЬ
	//	               |					втРазмещения.СтрокаЗаявки,
	//	               |					втРазмещения.СтрокаПрихода
	//	               |				ИЗ
	//	               |					втРазмещения)) КАК ТоварыКРезервированиюОстатки
	//	               |
	//	               |ИНДЕКСИРОВАТЬ ПО
	//	               |	СтрокаЗаявки,
	//	               |	СтрокаПрихода,
	//	               |	Склад,
	//	               |	Номенклатура
	//	               |;
	//	               |
	//	               |////////////////////////////////////////////////////////////////////////////////
	//	               |ВЫБРАТЬ
	//	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	//	               |	втТаблицаДвижений.Период,
	//	               |	втТаблицаДвижений.Регистратор,
	//	               |	втТаблицаДвижений.СтрокаЗаявки,
	//	               |	втТаблицаДвижений.СтрокаПрихода,
	//	               |	втТаблицаДвижений.Склад,
	//	               |	втТаблицаДвижений.Номенклатура,
	//	               |	втТаблицаДвижений.Количество - ЕСТЬNULL(втОстатки.Количество, 0) КАК Количество
	//	               |ИЗ
	//	               |	втТаблицаДвижений КАК втТаблицаДвижений
	//	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	//	               |		ПО втТаблицаДвижений.СтрокаЗаявки = втОстатки.СтрокаЗаявки
	//	               |			И втТаблицаДвижений.СтрокаПрихода = втОстатки.СтрокаПрихода
	//	               |			И втТаблицаДвижений.Склад = втОстатки.Склад
	//	               |			И втТаблицаДвижений.Номенклатура = втОстатки.Номенклатура
	//	               |ГДЕ
	//	               |	втТаблицаДвижений.Количество - ЕСТЬNULL(втОстатки.Количество, 0) > 0";
	//	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//	Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	//	ТаблицаСписания = Запрос.Выполнить().Выгрузить();
	//		
	//	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаСписания, ТаблицаДвижений);
	//	//Если ТаблицаСписания.Количество() > 0 Тогда 
	//	//	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ОтказыПоЗаявкам", ОтказыПоРазмещениям);
	//	//	Для Каждого СтрокаТЧ Из ТаблицаСписания Цикл 
	//	//		НоваяСтрока = ОтказыПоРазмещениям.Добавить();
	//	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
	//	//		НоваяСтрока.ПричинаОтказа = Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке;
	//	//	КонецЦикла;
	//	//КонецЕсли;
	//КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ЗаказыПоставщикам(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ЗаказыПоставщикам", ТаблицаДвижений);
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ЭтоМФП,ВидОперацииПоступления,СтатусДокумента,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов");
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ЭтоМФП тогда
		//собственное юр лицо, проводим только по взаиморасчетам
		Возврат ТаблицаДвижений;
	КонецЕсли;
		
	Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI
		ИЛИ Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Прочее Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Не (Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Или 
		 Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен) Тогда 
		 Возврат ТаблицаДвижений;
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки
	//               |ИЗ
	//               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
	//               |ГДЕ
	//               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка = &Ссылка";
	//			   
	//Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//БлокировкаДанных = Новый БлокировкаДанных;
	//ЭлементБлокировка = БлокировкаДанных.Добавить("РегистрСведений.ВозможныеЗаменыНоменклатуры");
	//ЭлементБлокировка.ИсточникДанных =  РезультатЗапроса;
	//ЭлементБлокировка.ИспользоватьИзИсточникаДанных("СтрокаЗаявки", "СтрокаЗаявки");
	//БлокировкаДанных.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода КАК СтрокаПрихода,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки,
	               |	СУММА(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Количество) КАК Количество
	               |ПОМЕСТИТЬ втРазмещения
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
	               |ГДЕ
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаПрихода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода КАК СтрокаПрихода,
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	СУММА(ПоступлениеТоваровУслугПричиныОтказов.Количество) КАК Количество
	               |ПОМЕСТИТЬ втОтказы
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.ПричиныОтказов КАК ПоступлениеТоваровУслугПричиныОтказов
	               |ГДЕ
	               |	ПоступлениеТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаПрихода,
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВозможныеЗаменыНоменклатурыСрезПоследних.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ВозможныеЗаменыНоменклатурыСрезПоследних.Номенклатура,
	               |	ВозможныеЗаменыНоменклатурыСрезПоследних.НоменклатураЗамена
	               |ПОМЕСТИТЬ втЗамены
	               |ИЗ
	               |	РегистрСведений.ВозможныеЗаменыНоменклатуры.СрезПоследних(
	               |			,
	               |			СтрокаЗаявки В
	               |				(ВЫБРАТЬ
	               |					втРазмещения.СтрокаЗаявки
	               |				ИЗ
	               |					втРазмещения)) КАК ВозможныеЗаменыНоменклатурыСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   //|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
				   //|	ПоступлениеТоваровУслугТовары.Ссылка КАК Регистратор,
				   //|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК Период,
				   //|	ПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.ТорговаяТочка = &ПустаяТТ
	               |			ТОГДА ПоступлениеТоваровУслугТовары.Ссылка.Контрагент.ОсновнаяТорговаяТочка
	               |		ИНАЧЕ ПоступлениеТоваровУслугТовары.Ссылка.ТорговаяТочка
	               |	КОНЕЦ КАК ТорговаяТочка,
				   //|	ПоступлениеТоваровУслугТовары.Ссылка.Склад,
	               |	втРазмещения.СтрокаЗаявки,
	               |	ВЫБОР
	               |		КОГДА ПоступлениеТоваровУслугТовары.Номенклатура = ЕСТЬNULL(втЗамены.НоменклатураЗамена, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |			ТОГДА ЕСТЬNULL(втЗамены.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	               |		ИНАЧЕ ПоступлениеТоваровУслугТовары.Номенклатура
	               |	КОНЕЦ КАК Номенклатура,
	               |	втРазмещения.Количество - ЕСТЬNULL(втОтказы.Количество, 0) КАК Количество,
	               |	ПоступлениеТоваровУслугТовары.Сумма * (втРазмещения.Количество - ЕСТЬNULL(втОтказы.Количество, 0)) / ПоступлениеТоваровУслугТовары.Количество КАК СуммаРегл,
	               |	ПоступлениеТоваровУслугТовары.Сумма * (втРазмещения.Количество - ЕСТЬNULL(втОтказы.Количество, 0)) / ПоступлениеТоваровУслугТовары.Количество КАК СуммаУпр
	               |ИЗ
	               |	втРазмещения КАК втРазмещения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
	               |		ПО втРазмещения.СтрокаПрихода = втОтказы.СтрокаПрихода
	               |			И втРазмещения.СтрокаЗаявки = втОтказы.СтрокаЗаявки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |		ПО втРазмещения.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЗамены КАК втЗамены
	               |		ПО втРазмещения.СтрокаЗаявки = втЗамены.СтрокаЗаявки
	               |ГДЕ
	               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	               |	И втРазмещения.Количество - ЕСТЬNULL(втОтказы.Количество, 0) > 0";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустаяТТ", Справочники.ТорговыеТочки.ПустаяСсылка());
	
	Товары = Запрос.Выполнить().Выгрузить();
	//ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	//
	//Для Каждого СтрокаТЧ Из Выборка Цикл 
	//	Если Не Реквизиты.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
	//		СтрокаТЧ.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаРегл, Реквизиты.ВалютаДокумента,
	//		ВалютаРегламентированногоУчета, Реквизиты.КурсВзаиморасчетов, 1, Реквизиты.КратностьВзаиморасчетов, 1);
	//	КонецЕсли;
	//	Если Не Реквизиты.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
	//		СтрокаТЧ.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпр, Реквизиты.ВалютаДокумента,
	//		ВалютаРегламентированногоУчета, Реквизиты.КурсВзаиморасчетов, 1, Реквизиты.КратностьВзаиморасчетов, 1);
	//	КонецЕсли;
	//КонецЦикла;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ТаблицаДвижений.ТорговаяТочка КАК ТорговаяТочка,
	//               |	ТаблицаДвижений.СтрокаЗаявки КАК СтрокаЗаявки,
	//               |	ТаблицаДвижений.Номенклатура КАК Номенклатура
	//               |ПОМЕСТИТЬ ТаблицаДвижений
	//               |ИЗ
	//               |	&ТаблицаДвижений КАК ТаблицаДвижений
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ТаблицаДвижений.ТорговаяТочка,
	//               |	ТаблицаДвижений.СтрокаЗаявки,
	//               |	ТаблицаДвижений.Номенклатура
	//               |ИЗ
	//               |	ТаблицаДвижений КАК ТаблицаДвижений";

	//Запрос.УстановитьПараметр("ТаблицаДвижений", Товары); 			   
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//БлокировкаДанных = Новый БлокировкаДанных;
	//ЭлементБлокировка = БлокировкаДанных.Добавить("РегистрНакопления.ЗаказыПоставщикам");
	//ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
	//ЭлементБлокировка.ИсточникДанных =  РезультатЗапроса;
	//		
	//ЭлементБлокировка.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	//ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ТорговаяТочка", "ТорговаяТочка");
	//ЭлементБлокировка.ИспользоватьИзИсточникаДанных("СтрокаЗаявки", "СтрокаЗаявки");
	//
	//БлокировкаДанных.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   //|	ТаблицаДвижений.ВидДвижения,
				   //|	ТаблицаДвижений.Регистратор,
				   //|	ТаблицаДвижений.Период,
	               |	ТаблицаДвижений.ТорговаяТочка КАК ТорговаяТочка,
	               |	ТаблицаДвижений.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ТаблицаДвижений.Номенклатура КАК Номенклатура,
	               |	ТаблицаДвижений.Количество,
	               |	ТаблицаДвижений.СуммаРегл,
	               |	ТаблицаДвижений.СуммаУпр
	               |ПОМЕСТИТЬ ТаблицаДвижений
	               |ИЗ
	               |	&ТаблицаДвижений КАК ТаблицаДвижений
	               |
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыПоставщикамОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ЗаказыПоставщикамОстатки.ТорговаяТочка КАК ТорговаяТочка,
	               |	ЗаказыПоставщикамОстатки.Склад КАК Склад,
	               |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыПоставщикамОстатки.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество,
	               |	ЗаказыПоставщикамОстатки.СуммаРеглОстаток КАК СуммаРегл,
	               |	ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК СуммаУпр
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	               |			&КонПериода,
	               |			(ТорговаяТочка,СтрокаЗаявки,Номенклатура) В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ТаблицаДвижений.ТорговаяТочка,
	               |					ТаблицаДвижений.СтрокаЗаявки,
	               |					ТаблицаДвижений.Номенклатура
	               |				ИЗ
	               |					ТаблицаДвижений)) КАК ЗаказыПоставщикамОстатки
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки
	               |
	               |";
	Запрос.УстановитьПараметр("ТаблицаДвижений", Товары); 			   
	Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
	
	ТаблицаДляРаспределения = Запрос.Выполнить().Выгрузить();			   
	Для Каждого СтрокаТЧ Из Товары Цикл 
		КоличествоРаспределить = СтрокаТЧ.Количество;
		
		Отбор = Новый Структура("ТорговаяТочка,СтрокаЗаявки,Номенклатура");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
		
		Строки = ТаблицаДляРаспределения.НайтиСтроки(Отбор);
		Индекс = 0;
		Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
			СтрокаРаспределения = Строки.Получить(Индекс);
			
			Если СтрокаРаспределения.Количество > 0 Тогда 
				СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаРаспределения.Количество);
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
				НоваяСтрока.Количество = СписываемоеКоличество;
				
				Если НоваяСтрока.Количество <> СтрокаРаспределения.Количество Тогда 
					НоваяСтрока.СуммаРегл = СтрокаРаспределения.СуммаРегл * НоваяСтрока.Количество/СтрокаРаспределения.Количество;
					НоваяСтрока.СуммаУпр = СтрокаРаспределения.СуммаУпр * НоваяСтрока.Количество/СтрокаРаспределения.Количество;
				КонецЕсли;
				
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяСтрока.Период = Реквизиты.Дата;
				НоваяСтрока.Регистратор = вхСсылкаНаДокумент;
				
				СтрокаРаспределения.Количество = СтрокаРаспределения.Количество - СписываемоеКоличество;
				СтрокаРаспределения.СуммаРегл = СтрокаРаспределения.СуммаРегл - НоваяСтрока.СуммаРегл;
				СтрокаРаспределения.СуммаУпр = СтрокаРаспределения.СуммаУпр - НоваяСтрока.СуммаУпр;
				
				КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ПартииТоваровVMI(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваровVMI", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,Номер,ЭтоМФП,Контрагент,ВидОперацииПоступления");
	
	//Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
	Если Реквизиты.Дата < '20180601000000' ИЛИ Лев(Реквизиты.Номер,1) <> "У" Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.ЭтоМФП тогда
		//собственное юр лицо, проводим только по взаиморасчетам
		Возврат ТаблицаДвижений;
	КонецЕсли;
		
	Если Реквизиты.ВидОперацииПоступления <> Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Регистратор,
	|	ПоступлениеТоваровУслуг.ДатаПродажи КАК Период,
	|	ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеТоваровУслуг.Ссылка.Склад КАК Склад,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.СтрокаПрихода КАК СтрокаПрихода,
	|	ПоступлениеТоваровУслуг.Количество КАК Количество,
	|	ПоступлениеТоваровУслуг.СуммаРубли КАК СуммаРубли,
	|	ПоступлениеТоваровУслуг.СуммаДоллары КАК СуммаДоллары,
	|	ПоступлениеТоваровУслуг.СуммаЕвро КАК СуммаЕвро
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ПартииТоваровVMI КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ПартииТоваровVMI_до_20180628(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваровVMI", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ЭтоМФП,Контрагент,ВидОперацииПоступления");
	
	//Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
	Если Реквизиты.Дата < '20180601000000' Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ЭтоМФП тогда
		//собственное юр лицо, проводим только по взаиморасчетам
		Возврат ТаблицаДвижений;
	КонецЕсли;
		
	Если Реквизиты.ВидОперацииПоступления <> Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Регистратор,
	|	ПоступлениеТоваровУслуг.Ссылка.Дата КАК Период,
	|	ПоступлениеТоваровУслуг.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеТоваровУслуг.Ссылка.Склад КАК Склад,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.СтрокаПрихода КАК СтрокаПрихода,
	|	ПоступлениеТоваровУслуг.Количество КАК Количество,
	|	ПоступлениеТоваровУслуг.Количество * ПоступлениеТоваровУслуг.Цена КАК СуммаРубли  
	// Вместо суммы используем произведение колво*цена, чтобы исключить скидки и списалась корректная сумма с регистра
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
	|	И НЕ ПоступлениеТоваровУслуг.Номенклатура.Услуга"			          
	);
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	
	Рубль = Константы.ВалютаРубль.Получить();
	Доллар = Константы.ВалютаДоллар.Получить();
	Евро = Константы.ВалютаЕвро.Получить();
	
	СтрКурсаД = МодульВалютногоУчета.ПолучитьКурсВалюты(Доллар, Реквизиты.Дата);
	СтрКурсаЕ = МодульВалютногоУчета.ПолучитьКурсВалюты(Евро, Реквизиты.Дата);
	
	Для Каждого Товар Из ТаблицаДвижений Цикл
		Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли,
		Рубль, Доллар, 1, СтрКурсаД.Курс, 1, СтрКурсаД.Кратность);
		Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли,
		Рубль, Евро, 1, СтрКурсаЕ.Курс, 1, СтрКурсаЕ.Кратность);
		
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_СкидкиVMI(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("СкидкиVMI", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ЭтоМФП,Контрагент,ВидОперацииПоступления");
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ЭтоМФП тогда
		//собственное юр лицо, проводим только по взаиморасчетам
		Возврат ТаблицаДвижений;
	КонецЕсли;
		
	Если Реквизиты.ВидОперацииПоступления <> Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СкидкиПоставщиковVMIСрезПоследних.ВидСкидки,
	               |	СкидкиПоставщиковVMIСрезПоследних.ПроцентСкидки
	               |ИЗ
	               |	РегистрСведений.СкидкиПоставщиковVMI.СрезПоследних(&КонПериода, Контрагент = &Контрагент) КАК СкидкиПоставщиковVMIСрезПоследних
	               |ГДЕ
	               |	СкидкиПоставщиковVMIСрезПоследних.ДатаОкончания >= &Дата";
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
	Запрос.УстановитьПараметр("Дата", Реквизиты.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат ТаблицаДвижений;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ВидСкидки = Перечисления.ВидыСкидок.БезОграниченияПоОбщейСумме Тогда 
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               |	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК Период,
	               |	ПоступлениеТоваровУслугТовары.Ссылка.Ссылка КАК Регистратор,
	               |	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент,
	               |	ПоступлениеТоваровУслугТовары.Количество * ПоступлениеТоваровУслугТовары.Цена * ПоступлениеТоваровУслугТовары.ПроцентСкидкиНаценки / 100 КАК СуммаУпр
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |ГДЕ
	               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
		
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция КорректировкаПоступления(вхСсылкаНаДокумент) Экспорт 
	
	Возврат вхСсылкаНаДокумент;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ЭтоМФП,ВидОперацииПоступления");
	
	Если Реквизиты.СтатусДокумента <> Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Реквизиты.ЭтоМФП Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI
		ИЛИ Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Прочее Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорректировкаПоступленияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.КорректировкаПоступленияТоваровУслуг КАК КорректировкаПоступленияТоваровУслуг
	               |ГДЕ
	               |	КорректировкаПоступленияТоваровУслуг.ДокументОснование = &ДокументОснование
	               |	И КорректировкаПоступленияТоваровУслуг.Проведен
	               |	И КорректировкаПоступленияТоваровУслуг.СтатусДокумента = &СтатусДокументаРазмещен
	               |	И КорректировкаПоступленияТоваровУслуг.МоментВремени > &МоментВремени
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КорректировкаПоступленияТоваровУслуг.МоментВремени УБЫВ";
	Запрос.УстановитьПараметр("ДокументОснование", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("СтатусДокументаРазмещен", Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен);
	Запрос.УстановитьПараметр("МоментВремени", вхСсылкаНаДокумент.МоментВремени());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		КорректировкаОб = Документы.КорректировкаПоступленияТоваровУслуг.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(КорректировкаОб, вхСсылкаНаДокумент,,"Номер,Дата");
		КорректировкаОб.ДокументОснование = вхСсылкаНаДокумент;
		КорректировкаОб.Дата = ТекущаяДата();
		КорректировкаОб.Товары.Загрузить(вхСсылкаНаДокумент.Товары.Выгрузить());
		КорректировкаОб.Услуги.Загрузить(вхСсылкаНаДокумент.Услуги.Выгрузить());
		КорректировкаОб.ПричиныОтказов.Загрузить(вхСсылкаНаДокумент.ПричиныОтказов.Выгрузить());
		КорректировкаОб.РазмещениеСтрокПрихода.Загрузить(вхСсылкаНаДокумент.РазмещениеСтрокПрихода.Выгрузить());
		КорректировкаОб.Проведен = Истина;
		КорректировкаОб.Записать();
		
		Возврат КорректировкаОб.Ссылка;
		
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		КорректировкаОб = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(КорректировкаОб, вхСсылкаНаДокумент,,"Номер,Дата");
		КорректировкаОб.Товары.Загрузить(вхСсылкаНаДокумент.Товары.Выгрузить());
		КорректировкаОб.Услуги.Загрузить(вхСсылкаНаДокумент.Услуги.Выгрузить());
		КорректировкаОб.ПричиныОтказов.Загрузить(вхСсылкаНаДокумент.ПричиныОтказов.Выгрузить());
		КорректировкаОб.РазмещениеСтрокПрихода.Загрузить(вхСсылкаНаДокумент.РазмещениеСтрокПрихода.Выгрузить());
		КорректировкаОб.Записать();
		
		Возврат КорректировкаОб.Ссылка;
		
	КонецЕсли;
КонецФункции

Функция ПолучитьПоследнийДокументКорректировки(вхСсылкаНаДокумент) Экспорт
	
	Если Не ЗначениеЗаполнено(вхСсылкаНаДокумент) Тогда
		Возврат вхСсылкаНаДокумент
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	КорректировкаПоступленияТоваровУслуг.Ссылка
	                      |ИЗ
	                      |	Документ.КорректировкаПоступленияТоваровУслуг КАК КорректировкаПоступленияТоваровУслуг
	                      |ГДЕ
	                      |	КорректировкаПоступленияТоваровУслуг.Проведен
	                      |	И КорректировкаПоступленияТоваровУслуг.ДокументОснование = &Ссылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	КорректировкаПоступленияТоваровУслуг.МоментВремени УБЫВ");
	Если ТипЗнч(вхСсылкаНаДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	ИначеЕсли ТипЗнч(вхСсылкаНаДокумент) = Тип("ДокументСсылка.КорректировкаПоступленияТоваровУслуг") Тогда
		Запрос.УстановитьПараметр("Ссылка", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДокументОснование"));
	Иначе
		Возврат вхСсылкаНаДокумент
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат вхСсылкаНаДокумент
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка
		
	КонецЕсли;
	
КонецФункции

Процедура СоздатьОбновитьСтрокиПрихода(ЭтотОбъект) Экспорт 
		
	Если ЭтотОбъект.ЭтоНовый() Тогда 
		СсылкаНаДокумент = ЭтотОбъект.ПолучитьСсылкуНового();
		
		Если СсылкаНаДокумент.Пустая() Тогда 
			СсылкаНаДокумент = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку();
			ЭтотОбъект.УстановитьСсылкуНового(СсылкаНаДокумент);
		КонецЕсли;
		Если ПустаяСтрока(ЭтотОбъект.Номер) Тогда 
			ЭтотОбъект.УстановитьНовыйНомер();
		КонецЕсли;
	Иначе
		СсылкаНаДокумент = ЭтотОбъект.Ссылка;
	КонецЕсли;
	
	СтруктураРеквизитовДляСравнения = Новый Структура;
	СтруктураРеквизитовДляСравнения.Вставить("НомерГТД", "ТекСтрока.НомерГТД");
	СтруктураРеквизитовДляСравнения.Вставить("СтранаПроисхождения","ТекСтрока.СтранаПроисхождения");
	СтруктураРеквизитовДляСравнения.Вставить("Дата", "ЭтотОбъект.Дата");
	СтруктураРеквизитовДляСравнения.Вставить("ТорговаяТочка","ЭтотОбъект.ТорговаяТочка");
	СтруктураРеквизитовДляСравнения.Вставить("ДоговорКонтрагента","ЭтотОбъект.ДоговорКонтрагента");
	СтруктураРеквизитовДляСравнения.Вставить("Приход","СсылкаНаДокумент");
	СтруктураРеквизитовДляСравнения.Вставить("Наименование","ТекСтрока.СтрокаПрихода.УникальныйИдентификатор()");
	Для Каждого ТекСтрока Из ЭтотОбъект.Товары Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.СтрокаПрихода) Тогда
			
			ОбъектСтрокиПрихода = ТекСтрока.СтрокаПрихода.ПолучитьОбъект();
			
			Для Каждого КлючИЗначение Из СтруктураРеквизитовДляСравнения Цикл
				ЗначениеРеквизита = Вычислить(КлючИЗначение.Значение);
				Если Не ОбъектСтрокиПрихода[КлючИЗначение.Ключ] = ЗначениеРеквизита Тогда
					ОбъектСтрокиПрихода[КлючИЗначение.Ключ] = ЗначениеРеквизита;
				КонецЕсли;
			КонецЦикла;
			
			//Если Не ОбъектСтрокиПрихода.Приход = СсылкаНаДокумент Тогда 
			//	ОбъектСтрокиПрихода.Приход = СсылкаНаДокумент;
			//КонецЕсли;
			//Если Не ОбъектСтрокиПрихода.Наименование = ТекСтрока.СтрокаПрихода.УникальныйИдентификатор() Тогда 
			//	ОбъектСтрокиПрихода.Наименование = ТекСтрока.СтрокаПрихода.УникальныйИдентификатор()
			//КонецЕсли;
			//Если Не ОбъектСтрокиПрихода.Дата = ЭтотОбъект.Дата Тогда
			//	ОбъектСтрокиПрихода.Дата = ЭтотОбъект.Дата;	
			//КонецЕсли;
			//Если Не ОбъектСтрокиПрихода.ТорговаяТочка = ЭтотОбъект.ТорговаяТочка Тогда
			//	ОбъектСтрокиПрихода.ТорговаяТочка = ЭтотОбъект.ТорговаяТочка;	
			//КонецЕсли;
			//Если Не ОбъектСтрокиПрихода.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента Тогда
			//	ОбъектСтрокиПрихода.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;	
			//КонецЕсли;
			
			Если ОбъектСтрокиПрихода.Модифицированность() Тогда
				ОбъектСтрокиПрихода.Записать();
			КонецЕсли;
			
		Иначе
			лСсылкаСтрокаПриходов = Справочники.ИдентификаторыСтрокПриходов.ПолучитьСсылку();
			лСтрокаПрихода = Справочники.ИдентификаторыСтрокПриходов.СоздатьЭлемент();
			лСтрокаПрихода.УстановитьСсылкуНового(лСсылкаСтрокаПриходов);
			лСтрокаПрихода.Приход = СсылкаНаДокумент;
			лСтрокаПрихода.Наименование = лСсылкаСтрокаПриходов.УникальныйИдентификатор();
			лСтрокаПрихода.НомерГТД = ТекСтрока.НомерГТД;
			лСтрокаПрихода.СтранаПроисхождения = ТекСтрока.СтранаПроисхождения;
			лСтрокаПрихода.Дата = ЭтотОбъект.Дата;
			лСтрокаПрихода.ТорговаяТочка = ЭтотОбъект.ТорговаяТочка;
			лСтрокаПрихода.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
			лСтрокаПрихода.Записать();
			
			ТекСтрока.СтрокаПрихода = лСтрокаПрихода.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	//НайденныеСтроки = ЭтотОбъект.Товары.НайтиСтроки(Новый Структура("СтрокаПрихода", Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка()));
	//
	//Если НайденныеСтроки.Количество() = 0 Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//
	//Для Каждого ТекСтрока Из НайденныеСтроки Цикл 
	//	
	//	лСсылкаСтрокаПриходов = Справочники.ИдентификаторыСтрокПриходов.ПолучитьСсылку();
	//	лСтрокаПрихода = Справочники.ИдентификаторыСтрокПриходов.СоздатьЭлемент();
	//	лСтрокаПрихода.УстановитьСсылкуНового(лСсылкаСтрокаПриходов);
	//	лСтрокаПрихода.Приход = СсылкаНаДокумент;
	//	лСтрокаПрихода.Наименование = лСсылкаСтрокаПриходов.УникальныйИдентификатор();
	//	лСтрокаПрихода.НомерГТД = ТекСтрока.НомерГТД;
	//	лСтрокаПрихода.СтранаПроисхождения = ТекСтрока.СтранаПроисхождения;
	//	лСтрокаПрихода.Дата = ЭтотОбъект.Дата;
	//	лСтрокаПрихода.ТорговаяТочка = ЭтотОбъект.ТорговаяТочка;
	//	лСтрокаПрихода.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
	//	лСтрокаПрихода.Записать();
	//	
	//	ТекСтрока.СтрокаПрихода = лСтрокаПрихода.Ссылка;
	//		
	//КонецЦикла;
	//
	//МассивСтрокПрихода = Новый Массив;
	//
	//Для Каждого ТекСтрока Из ЭтотОбъект.Товары Цикл 
	//	Если ЗначениеЗаполнено(ТекСтрока.СтрокаПрихода) Тогда 
	//		МассивСтрокПрихода.Добавить(ТекСтрока.СтрокаПрихода);	
	//	Иначе 
	//		лСсылкаСтрокаПриходов = Справочники.ИдентификаторыСтрокПриходов.ПолучитьСсылку();
	//		лСтрокаПрихода = Справочники.ИдентификаторыСтрокПриходов.СоздатьЭлемент();
	//		лСтрокаПрихода.УстановитьСсылкуНового(лСсылкаСтрокаПриходов);
	//		лСтрокаПрихода.Приход = СсылкаНаДокумент;
	//		лСтрокаПрихода.Наименование = лСсылкаСтрокаПриходов.УникальныйИдентификатор();
	//		лСтрокаПрихода.НомерГТД = ТекСтрока.НомерГТД;
	//		лСтрокаПрихода.СтранаПроисхождения = ТекСтрока.СтранаПроисхождения;
	//		лСтрокаПрихода.Дата = ЭтотОбъект.Дата;
	//		лСтрокаПрихода.ТорговаяТочка = ЭтотОбъект.ТорговаяТочка;
	//		лСтрокаПрихода.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
	//		лСтрокаПрихода.Записать();
	//		
	//		ТекСтрока.СтрокаПрихода = лСтрокаПрихода.Ссылка;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если МассивСтрокПрихода.Количество() > 0 Тогда 
	//	Запрос = Новый Запрос;
	//КонецЕсли;
КонецПроцедуры

Функция ПолучитьЗаписиПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, Проведение) Экспорт 
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = вхСсылкаНаДокумент.Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СуммаДокумента,ДоговорКонтрагента,СтатусДокумента");
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) тогда
		Если Проведение 
			И Реквизиты.Дата >= ПараметрыСеанса.ДатаНачалаРаботыТовары 
			И Реквизиты.Дата >= глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК Период,
			               |	ПоступлениеТоваровУслугТовары.Ссылка КАК Регистратор,
			               |	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура
			               |ИЗ
			               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
			               |ГДЕ
			               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
			               |	И НЕ ПоступлениеТоваровУслугТовары.Ссылка.ЭтоМФП
			               |	И НЕ ПоступлениеТоваровУслугТовары.Ссылка.ВидОперацииПоступления В (&МассивВидовОпераций)
			               |	И НЕ ПоступлениеТоваровУслугТовары.Номенклатура.Услуга";
			МассивВидовОпераций = Новый Массив;
			МассивВидовОпераций.Добавить(Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI);
			МассивВидовОпераций.Добавить(Перечисления.ВидыПоступленияТоваров.Прочее);
			Запрос.УстановитьПараметр("МассивВидовОпераций", МассивВидовОпераций);
			
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ЗаполнитьЗначенияСвойств(лРезультат.Добавить(), Выборка); 
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) Тогда 	
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ВидДоговора");
		Если Проведение И 
			Реквизиты.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты 
			И Реквизиты.СуммаДокумента <> 0 
			И НЕ(ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение
			И Реквизиты.СтатусДокумента <> Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI) тогда			
			лСтрокаРезультат = лРезультат.Добавить();
			лСтрокаРезультат.ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента;
			лСтрокаРезультат.Период = Реквизиты.Дата;
			лСтрокаРезультат.Регистратор = вхСсылкаНаДокумент;
		КонецЕсли;
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
	Возврат Результат;

КонецФункции

Процедура ЗарегистрироватьЗаказыКОбменуВОП(ПоступлениеСсылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбменПартКом83_ОкноПоставщика.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.ОбменПартКом83_ОкноПоставщика КАК ОбменПартКом83_ОкноПоставщика
	                      |ГДЕ
	                      |	ОбменПартКом83_ОкноПоставщика.Исходящий
	                      |	И НЕ ОбменПартКом83_ОкноПоставщика.ЭтотУзел");
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Узел = Результат.Ссылка;
	
		МассивЗаказов = Новый Массив;
		Для Каждого Строка Из ПоступлениеСсылка.РазмещениеСтрокПрихода Цикл
			Заказ = Строка.СтрокаЗаявки.Заказ;
			Если ЗначениеЗаполнено(Заказ) И МассивЗаказов.Найти(Заказ) = Неопределено Тогда
				МассивЗаказов.Добавить(Заказ);
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, Заказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//Проставим номенклатуру в номенклатуре контрагента, если она там не заполнена
Процедура ЗаполнитьНоменклатуруВНоменклатуреКонтрагентов(вхСсылкаНаДокумент, вхОтказ, вхПараметры) Экспорт
	
	Реквизиты =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Контрагент, ВидОперацииПоступления, ЗаполнятьНоменклатуруКонтрагентов");
	Если Не (Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение
			И Реквизиты.ЗаполнятьНоменклатуруКонтрагентов) Тогда
		Возврат;			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПоступлениеТоваровУслугТовары.Номенклатура,
	                |	ПоступлениеТоваровУслугТовары.Номенклатура.Артикул КАК Артикул
	                |ПОМЕСТИТЬ втТовары
	                |ИЗ
	                |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	                |ГДЕ
	                |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура КАК НоменклатураКонтрагента,
	                |	втТовары.Номенклатура КАК Номенклатура
	                |ИЗ
	                |	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	                |			&КонПериода,
	                |			ВЫРАЗИТЬ(ПрайсПоставщика КАК Справочник.ПрайсыПоставщиковVMI).Владелец = &Контрагент
	                |				И Номенклатура.Артикул В
	                |					(ВЫБРАТЬ
	                |						втТовары.Артикул
	                |					ИЗ
	                |						втТовары)
	                |				И Номенклатура.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	                |		ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.Артикул = втТовары.Артикул";
	
	Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоменклатураОбъект = Выборка.НоменклатураКонтрагента.ПолучитьОбъект();
		НоменклатураОбъект.Номенклатура  = Выборка.Номенклатура;
		НоменклатураОбъект.Записать();		
	КонецЦикла;
	
КонецПроцедуры
