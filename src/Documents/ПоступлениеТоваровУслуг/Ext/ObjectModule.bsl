Перем мВалютаРегламентированногоУчета Экспорт;
Перем мМенеджерОбъекта;
Перем мЗарегистрироватьИзмененияДляОтправкиНаПочту;

/////////////////////////////////////////////////////////////

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("НовыеЗначения",
	Новый Соответствие);
	
	ЭтотОбъект.ДополнительныеСвойства.Контроль.НовыеЗначения.Вставить(
	Метаданные.Последовательности.ПоРасчетамСКонтрагентами, 
	мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(ЭтотОбъект.Ссылка,
	Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	
	мМенеджерОбъекта.ВыполнитьПроведение(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;
	
	// ЛНА, Замер  APDEX ++(
	Попытка		
		APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ПоступлениеТоваровУслуг_Проведение", "Кол-во строк: "+Товары.Количество(), , Ссылка);
	Исключение
	КонецПопытки;
	//)--

КонецПроцедуры

/////////////////////////////////////////////////////////////


Функция ПолучитьЗаписиПоследовательности(вхПоследовательность) Экспорт
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лЭтоОтменаПроведения = Ложь;
	лРежимЗаписи = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи", лРежимЗаписи) тогда
		лЭтоОтменаПроведения = (лРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		Если НЕ лЭтоОтменаПроведения И (ЭтотОбъект.СуммаДокумента <> 0)
			И ЭтотОбъект.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты
			И НЕ(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотОбъект.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение
			И ЭтотОбъект.СтатусДокумента <> Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI) тогда			
			лСтрокаРезультат = лРезультат.Добавить();
			лСтрокаРезультат.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
			лСтрокаРезультат.Период = ЭтотОбъект.Дата;
			лСтрокаРезультат.Регистратор = ЭтотОбъект.Ссылка;
		КонецЕсли;
		
		Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
		
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСоздатьДокументКорректировки(лСтатус)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.КорректировкаПоступленияТоваровУслуг КАК КорректировкаПоступленияТоваровУслуг
	|ГДЕ
	|	КорректировкаПоступленияТоваровУслуг.ДокументОснование = &ДокументОснование
	|	И КорректировкаПоступленияТоваровУслуг.СтатусДо = &СтатусДо";
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("СтатусДо", лСтатус);
	Доки = Запрос.Выполнить().Выгрузить();
	Если Доки.Количество() = 0 Тогда
		ДокКорр = Документы.КорректировкаПоступленияТоваровУслуг.СоздатьДокумент();
		ДокКорр.Дата = ТекущаяДата();
		ДокКорр.ДокументОснование = Ссылка;
		//Если лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен Тогда
		//	ДокКорр.СтатусДо = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен;
		//ИначеЕсли лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда
		//	ДокКорр.СтатусДо = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен;
		//ИначеЕсли лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда
		//	ДокКорр.СтатусДо = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят;
		//КонецЕсли;
		ДокКорр.СтатусДо = лСтатус;
		ДокКорр.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокКорр.Записать(РежимЗаписиДокумента.Запись);
		Возврат ДокКорр.Ссылка;
	Иначе
		Возврат Доки.Получить(0).Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ЗаполненНеРуками() Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КорректировкаПоступленияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.КорректировкаПоступленияТоваровУслуг КАК КорректировкаПоступленияТоваровУслуг
	|ГДЕ
	|	КорректировкаПоступленияТоваровУслуг.ДокументОснование = &ДокументОснование"
	);
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	Если Запрос.Выполнить().Выгрузить().Количество() = 0 тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьДокументКорректировки(лСтатус) Экспорт
	
	мТекущийДокументКорректировки = Неопределено;
	Возврат мТекущийДокументКорректировки;
	
	Если ЭтоНовый() ИЛИ ЗаполненНеРуками() Тогда
		мТекущийДокументКорректировки = Неопределено;
	Иначе
		//Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый
		//	ИЛИ СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен Тогда
		Если лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый
			ИЛИ лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен
			ИЛИ лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI Тогда
            мТекущийДокументКорректировки = Ссылка;
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КорректировкаПоступленияТоваровУслуг.Ссылка
			|ИЗ
			|	Документ.КорректировкаПоступленияТоваровУслуг КАК КорректировкаПоступленияТоваровУслуг
			|ГДЕ
			|	КорректировкаПоступленияТоваровУслуг.ДокументОснование = &ДокументОснование
			|	И КорректировкаПоступленияТоваровУслуг.СтатусДо = &СтатусДо";
			Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
			
			Если лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен Тогда
				Запрос.УстановитьПараметр("СтатусДо", Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен);
			ИначеЕсли лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда
				Запрос.УстановитьПараметр("СтатусДо", Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен);
			ИначеЕсли лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда
				Запрос.УстановитьПараметр("СтатусДо", Справочники.СтатусыДокументов.ПоступлениеТоваровПринят);
			КонецЕсли;
			Доки = Запрос.Выполнить().Выгрузить();
			Если Доки.Количество() = 0 Тогда
				мТекущийДокументКорректировки = НайтиСоздатьДокументКорректировки(лСтатус);
				СтруктураРеквизитов = СформироватьСтруктуруРеквизитовДокумента(Ссылка);
				СтруктураРеквизитов.СтруктураШапки.ДокументКорректировки = мТекущийДокументКорректировки;
				ОбновитьРеквизитыДокумента(СтруктураРеквизитов);
				
			Иначе
				мТекущийДокументКорректировки = Доки.Получить(0).Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
			
			
	КонецЕсли;
		
	Возврат мТекущийДокументКорректировки;
			
КонецФункции

Функция СформироватьСтруктуруРеквизитовДокумента(лДокумент) Экспорт
	СтруктураШапки = Новый Структура;
	СтруктураШапки.Вставить("ДокументКорректировки", лДокумент);
	Если лДокумент.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен Тогда
		СтруктураШапки.Вставить("СтатусДо", Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен);
	ИначеЕсли лДокумент.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда
		СтруктураШапки.Вставить("СтатусДо", Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен);
	КонецЕсли;
	Для Каждого Реквизит Из лДокумент.Метаданные().Реквизиты Цикл
		СтруктураШапки.Вставить(Реквизит.Имя, лДокумент[Реквизит.Имя]);
	КонецЦикла;
	Если лДокумент.Метаданные().Имя = "КорректировкаПоступленияТоваровУслуг" Тогда
		Возврат Новый Структура("СтруктураШапки,ТабЧастьТовары,ТабЧастьПричинОтказов", СтруктураШапки, лДокумент.Товары.Выгрузить(), лДокумент.ПричиныОтказов.Выгрузить());
	Иначе
		Возврат Новый Структура("СтруктураШапки,ТабЧастьТовары", СтруктураШапки, лДокумент.Товары.Выгрузить());
	КонецЕсли;
	
КонецФункции

Процедура ПриИзмененииРеквизитовФормы(ДокументКорректировки, СтруктураРеквизитов) Экспорт
	Если ДокументКорректировки = Неопределено Тогда
		ДокументОбъект = ЭтотОбъект;
	Иначе
		ДокументОбъект = ДокументКорректировки.ПолучитьОбъект();
	КонецЕсли;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
    	ДокументОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	Если ТипЗнч(ДокументКорректировки) = Тип("ДокументСсылка.КорректировкаПоступленияТоваровУслуг") Тогда
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРеквизитыДокумента(СтруктураРеквизитов) Экспорт
	ДокументКорректировки = СтруктураРеквизитов.СтруктураШапки.ДокументКорректировки;
	Если ДокументКорректировки = Неопределено
		ИЛИ СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый
		ИЛИ СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI Тогда
		ДокументОб = ЭтотОбъект;
	Иначе
		Если ДокументКорректировки = Ссылка Тогда
			ДокументОб = ЭтотОбъект;
		Иначе
			ДокументОб = ДокументКорректировки.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураРеквизитов.СтруктураШапки Цикл
		Если ОбщегоНазначения.ЕстьРеквизитДокумента(КлючИЗначение.Ключ, ДокументОб.Метаданные()) Тогда
			ДокументОб[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		ИначеЕсли КлючИЗначение.Ключ = "Дата" Тогда
			ДокументОб[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоНовый() Тогда
		СсылкаНаДокумент = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку();
		ЭтотОбъект.УстановитьСсылкуНового(СсылкаНаДокумент);
	Иначе
		СсылкаНаДокумент = Ссылка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТорговаяТочка) Тогда
		ТорговаяТочка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент, "ОсновнаяТорговаяТочка");
	КонецЕсли;
	
	Для Каждого Товар Из СтруктураРеквизитов.ТабЧастьТовары Цикл
		Если НЕ ЗначениеЗаполнено(Товар.СтрокаПрихода) Тогда
			//Товар.СтрокаПрихода = РаботаСоСтатусамиДокументов.ОбновитьЗаписьСтрокПрихода(СсылкаНаДокумент, Товар.СтрокаПрихода, , ТТ);
			СтруктураСтрокиПрихода = Новый Структура("Дата,Приход,ДоговорКонтрагента,НомерГТД,СтранаПроисхождения,ТорговаяТочка",
				Дата, СсылкаНаДокумент, ДоговорКонтрагента, Товар.НомерГТД, Товар.СтранаПроисхождения, ТорговаяТочка);
			Товар.СтрокаПрихода = РаботаСоСтатусамиДокументов.ОбновитьЗаписьСтрокПрихода(СсылкаНаДокумент, СтруктураСтрокиПрихода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОб.Товары.Загрузить(СтруктураРеквизитов.ТабЧастьТовары);
	
	Если СтруктураРеквизитов.Свойство("ТабЧастьПричинОтказов") Тогда
		ТабПричинОтказов = СтруктураРеквизитов.ТабЧастьПричинОтказов;
		ТабПричинОтказов.Свернуть("СтрокаПрихода,ПричинаОтказа","Количество");
		ДокументОб.ПричиныОтказов.Загрузить(ТабПричинОтказов);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОб.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступленияТоваровУслуг") Тогда
		Если ДокументОб.Проведен Тогда
			ДокументОб.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Иначе
			ДокументОб.Дата = ТекущаяДата();
			ДокументОб.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		КонецЕсли;
	КонецЕсли;
	
		
КонецПроцедуры

Функция ВыполнитьДвижениеВперед(СтруктураРеквизитов) Экспорт
	ДокКорректировки = СтруктураРеквизитов.СтруктураШапки.ДокументКорректировки;
	лСтатус = СтруктураРеквизитов.СтруктураШапки.СтатусДокумента;
	Если ДокКорректировки = Неопределено Тогда
		ДокКорректировки = НайтиСоздатьДокументКорректировки(лСтатус);
		СтруктураРеквизитов.СтруктураШапки.ДокументКорректировки = ДокКорректировки;
	КонецЕсли;
	
	СтруктураРеквизитов.СтруктураШапки.Вставить("СтатусДо", лСтатус);
	
	Если лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый Тогда
		Если СтруктураРеквизитов.СтруктураШапки.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда
			новСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI;
		Иначе
			новСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен;
		КонецЕсли;
		СтруктураРеквизитов.СтруктураШапки.СтатусДокумента = новСтатус;
	ИначеЕсли лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен Тогда
		новСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен;
		СтруктураРеквизитов.СтруктураШапки.СтатусДокумента = новСтатус;
	ИначеЕсли лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен Тогда
		новСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят;
		СтруктураРеквизитов.СтруктураШапки.СтатусДокумента = новСтатус;
	ИначеЕсли лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда
		новСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен;
		СтруктураРеквизитов.СтруктураШапки.СтатусДокумента = новСтатус;
	КонецЕсли;
	
	ОбновитьРеквизитыДокумента(СтруктураРеквизитов);
	
	Возврат новСтатус;
	
КонецФункции

Функция ВыполнитьДвижениеНазад(лСтатус) Экспорт
	Если лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда
		новСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят;
	ИначеЕсли лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда
		новСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен;
	ИначеЕсли лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен Тогда
		новСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен;
	ИначеЕсли лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен
		ИЛИ лСтатус = Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI Тогда
		Возврат Справочники.СтатусыДокументов.ПоступлениеТоваровНовый;
	КонецЕсли;
	
	ДокКорректировки = НайтиСоздатьДокументКорректировки(новСтатус);
	ДокО = ДокКорректировки.ПолучитьОбъект();
	ДокО.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Возврат НовСтатус;
	
КонецФункции


Функция НайтиАналогТовара(Артикул, НеНоменклатура)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул
	|	И Номенклатура.Ссылка <> &НеНоменклатура"
	);
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("НеНоменклатура", НеНоменклатура);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция НайтиАналогТовараВЗаказах(Номенклатура)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Владелец КАК Поставщик,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			&МоментВремени,
	|			НЕ Номенклатура = &Номенклатура
	|				И Номенклатура.Артикул = &Артикул) КАК ЗаказыПоставщикамОстатки"
	);
	Запрос.УстановитьПараметр("МоментВремени", ?(ЭтоНовый(), Неопределено,ЭтотОбъект.Ссылка.МоментВремени()));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Артикул", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Артикул"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьСтруктуруПараметровАвторазмещения() Экспорт
	СтруктураОтбора = Новый Структура;
	ДругойПоставщик = Справочники.Контрагенты.ПустаяСсылка();
	//Если ЗначениеЗаполнено(ПоставщикЗаказовДругой) Тогда
	//	ДругойПоставщик = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПоставщикЗаказовДругой, "Владелец");
	//	Запрос = Новый Запрос(
	//    "ВЫБРАТЬ ПЕРВЫЕ 1
	//    |	ЕСТЬNULL(СпрД.Ссылка, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор
	//    |ИЗ
	//    |	Справочник.ДоговорыКонтрагентов КАК СпрД
	//    |ГДЕ
	//    |	СпрД.Владелец = &Владелец
	//    |	И СпрД.Организация = &Организация
	//    |	И СпрД.ВидДоговора = &ВидДоговора
	//    |	И НЕ СпрД.ПометкаУдаления
	//    |	И НЕ СпрД.СлужебныйДоговор"
	//	);
	//	Запрос.УстановитьПараметр("Владелец", ДругойПоставщик);
	//	Запрос.УстановитьПараметр("Организация", Организация);
	//	Запрос.УстановитьПараметр("ВидДоговора", ?(ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение, 
	//	Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком));
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Выборка.Следующий();
	//	СтруктураОтбора.Вставить("Договор", Выборка.Договор);
	//	
	//Иначе
		//СтруктураОтбора.Вставить("Договор", ДоговорКонтрагента);
		//из-за туевой дублей договоров переделано на список
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		//|	И ДоговорыКонтрагентов.ДоговорНаКросс = &ДоговорНаКросс
		//|	И ДоговорыКонтрагентов.ДоговорНаСток = &ДоговорНаСток
		|");
		
		//ХудинВВ 20180621 Убрана проверка на кросс и сток, добавлен поиск по другому поставщику
		Если ЗначениеЗаполнено(ПоставщикЗаказовДругой) Тогда
			КонтрагентПоиска = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПоставщикЗаказовДругой, "Владелец");
		Иначе
			КонтрагентПоиска = Контрагент;
		КонецЕсли;
		Запрос.УстановитьПараметр("Владелец", КонтрагентПоиска);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидДоговора", ДоговорКонтрагента.ВидДоговора);
		Запрос.УстановитьПараметр("ДоговорНаКросс", ДоговорКонтрагента.ДоговорНаКросс);
		Запрос.УстановитьПараметр("ДоговорНаСток", ДоговорКонтрагента.ДоговорНаСток);
		
		СтруктураОтбора.Вставить("Договор", Запрос.Выполнить().Выгрузить());
		
	//КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	К.ЗаказРавенПриходу,
	|	К.АвтоОтказВОкнеПоставщика КАК Автоотказ,
	|	К.РаботатьСОкномПоставщика КАК РаботаетЧерезОП,
	|	К.ПроцентОтклоненияЦенПрихода КАК МаксОтклонение
	|ИЗ
	|	Справочник.Контрагенты КАК К
	|ГДЕ
	|	К.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", КонтрагентПоиска);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	СтруктураОтбора.Вставить("ЗаказРавенПриходу", Выборка.ЗаказРавенПриходу);
	СтруктураОтбора.Вставить("Автоотказ", Выборка.Автоотказ);
	СтруктураОтбора.Вставить("РаботаетЧерезОП", Выборка.РаботаетЧерезОП);
	СтруктураОтбора.Вставить("МаксОтклонение", Выборка.МаксОтклонение);
	
	СтруктураОтбора.Вставить("ДокументОснование", ДокументОснование);
	СтруктураОтбора.Вставить("Склад", Склад);
	СтруктураОтбора.Вставить("СкладВМИ", ОбщегоНазначения.ПолучитьЗначениеРеквизита(Склад, "СкладVMI"));
	СтруктураОтбора.Вставить("Сувенирный", ОбщегоНазначения.ПолучитьЗначениеРеквизита(Склад,"Сувенирный"));
	
	Если ЭтоНовый() Тогда
		СсылкаНового = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку();
		ЭтотОбъект.УстановитьСсылкуНового(СсылкаНового);
		СтруктураОтбора.Вставить("Ссылка", СсылкаНового);
		 
	Иначе
		СтруктураОтбора.Вставить("Ссылка", Ссылка);
	КонецЕсли;
	
	СтруктураОтбора.Вставить("Дата", Дата);
	
	СкладыРегионов = Новый СписокЗначений;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ОсновнойСкладРегиона"
	);
	Р = Запрос.Выполнить().Выбрать();
	Пока Р.Следующий() Цикл
		Если Р.Ссылка = Константы.СкладОсновной.Получить() Тогда
			Продолжить;
		КонецЕсли;
		СкладыРегионов.Добавить(Р.Ссылка);
	КонецЦикла;
	
	СтруктураОтбора.Вставить("СкладыРегионов", СкладыРегионов);
	
	СтруктураОтбора.Вставить("МожноПровести", МожноПровести);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.НомерСтроки,
	|	Т.СтрокаПрихода,
	|	Т.Номенклатура,
	|	Т.НоменклатураЗаказа,
	|	Т.Количество,
	|	Т.Цена
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	&Т КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.НомерСтроки,
	|	Т.СтрокаПрихода,
	|	ВЫБОР
	|		КОГДА Т.НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА Т.Номенклатура
	|		ИНАЧЕ Т.НоменклатураЗаказа
	|	КОНЕЦ КАК Номенклатура,
	|	Т.Количество,
	|	Т.Цена
	|ИЗ
	|	Т КАК Т"
	);
	Запрос.УстановитьПараметр("Т", Товары);
	
	//Ограничение на организации заявок
	//Берем только заявки по тем организациям, которые могут покупать у организации из ПТУ
	Если ПроведениеДокументовКлиентСервер.ИспользуютсяМФП(Дата) Тогда
		РазрешенныеПокупатели = Справочники.ПолитикиМФП.РазрешенныеПокупателиДляОрганизацииПродавца(Организация, Дата);
		РазрешенныеПокупатели.Добавить(Организация);
		СтруктураОтбора.Вставить("ОрганизацииЗаявок", РазрешенныеПокупатели);
	КонецЕсли;
		
	Возврат Новый Структура("СтруктураОтбора,ТаблицаТоваров", СтруктураОтбора, Запрос.Выполнить().Выбрать());
	
КонецФункции

Процедура ОбработатьОшибкиЗаполненияРаспределения(РазмещенПолностью)
	тхтОшибка = "";
	
	ТекНомерСтроки = 1;
	
	Для Каждого Товар Из Товары Цикл
		пар = Новый Структура("СтрокаПрихода", Товар.СтрокаПрихода);
		
		СтрокиРаспределения = РазмещениеСтрокПрихода.НайтиСтроки(пар);
		ВсегоРаспределено = 0;
		Для Каждого СтрР Из СтрокиРаспределения Цикл
			ВсегоРаспределено = ВсегоРаспределено + СтрР.Количество;
		КонецЦикла;
		Если ВсегоРаспределено < Товар.Количество Тогда
			
			РазмещенПолностью = Ложь;
			
			ТекАртикул = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Товар.Номенклатура, "Артикул");
			ТекНоменклатура = СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Товар.Номенклатура, "Наименование"));
			стрОшибка = "
            |В строке документа № " + Строка(ТекНомерСтроки) + " указан товар " + ТекНоменклатура + ". Его артикул:
            |" + ТекАртикул + " 
            |Этого товара НЕТ в заказах поставщику.";
			
			Аналоги = НайтиАналогТовара(ТекАртикул, Товар.Номенклатура);
			
			Если Аналоги.Количество() > 0 Тогда
				НетАналогаВЗаказах = Истина;
				Для Каждого СтрАналог Из Аналоги Цикл
				
					ТабАналогов = НайтиАналогТовараВЗаказах(СтрАналог.Ссылка);
			
					Если ТабАналогов.Количество() > 0 Тогда
						
						Для Каждого СтрЗаказа Из ТабАналогов Цикл
							стрОшибка = стрОшибка + "
                			|Изготовитель этого товара: " + Строка(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Товар.Номенклатура,"Изготовитель"))+".	
                			|У этого товара есть ""аналог"" с таким же артикулом. 
                			|Изготовитель ""аналога"": " + Строка(ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрАналог.Ссылка,"Изготовитель")) 
							+ " (код товара: " + Строка(ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрАналог.Ссылка,"Код"))+")
                			|Этот ""аналог"" указан в заказе поставщику " + СтрЗаказа.Поставщик + " в количестве: "+СтрЗаказа.Количество+".";
							НетАналогаВЗаказах = Ложь;
							
						КонецЦикла;
						
					КонецЕсли;						
					
				КонецЦикла;
				
				Если НетАналогаВЗаказах Тогда
					стрОшибка = СтрОшибка + "
					|Аналогов этого товара НЕТ в заказах поставщику!";
					
				КонецЕсли;
				
			Иначе
				стрОшибка = СтрОшибка + "
				|У этого товара НЕТ аналогов (по артикулу)!";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(тхтОшибка) Тогда
		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.Автораспределение,
		тхтОшибка, "ошибки при распределении поступления по заказам");
		
	КонецЕсли;
		
КонецПроцедуры

Процедура РазместитьПриходПоЗаказамЗаявкам(ТекСтрокаПрихода = Неопределено, РазмещенПолностью) Экспорт
	
	//ТабТоваров = Новый ТаблицаЗначений;
	//Если ТекСтрокаПрихода = Неопределено Тогда
	//	ТабТоваров = ЭтотОбъект.Товары.Выгрузить(, "СтрокаПрихода,Номенклатура,Количество,Цена");
	//Иначе
	//	пар = Новый Структура("СтрокаПрихода", текСтрокаПрихода);
	//	СтрокиТоваров = Товары.НайтиСтроки(пар);
	//	ТабТоваров = ЭтотОбъект.Товары.Выгрузить(СтрокиТоваров, "СтрокаПрихода,Номенклатура,Количество,Цена");
	//КонецЕсли;
	РазмещениеСтрокПрихода.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПоставщикамОстатки.Номенклатура,
	               |	ЗаказыПоставщикамОстатки.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ЗаказыПоставщикамОстатки.СуммаРеглОстаток / ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Цена,
	               |	ЗаказыПоставщикамОстатки.СтрокаЗаявки.Заявка.ТорговаяТочка КАК Покупатель,
	               |	ЗаказыПоставщикамОстатки.ТорговаяТочка.РаботаетСОкномПоставщика КАК РаботаетСОкномПоставщика,
	               |	ЗаказыПоставщикамОстатки.СтрокаЗаявки.СрокГарантированныйЗаказа КАК СрокГарантированныйЗаказа,
	               |	ЗаказыПоставщикамОстатки.СтрокаЗаявки.Заявка КАК Заявка,
	               |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество
	               |ПОМЕСТИТЬ втЗаказыПоставщикам
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	               |			&КонПериода,
	               |			ДоговорКонтрагента.Владелец = &Контрагент
	               |				И ТорговаяТочка = &ТорговаяТочка
	               |				И Склад = &Склад) КАК ЗаказыПоставщикамОстатки
	               |ГДЕ
	               |	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрНакопления.ЗаказыПоставщикам.Остатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтказыПоЗаявкамОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ОтказыПоЗаявкамОбороты.КоличествоОборот КАК Количество
	               |ПОМЕСТИТЬ втОтказы
	               |ИЗ
	               |	РегистрНакопления.ОтказыПоЗаявкам.Обороты(
	               |			,
	               |			&КонПериода,
	               |			Регистратор,
	               |			СтрокаЗаявки В
	               |				(ВЫБРАТЬ
	               |					втЗаказыПоставщикам.СтрокаЗаявки
	               |				ИЗ
	               |					втЗаказыПоставщикам)) КАК ОтказыПоЗаявкамОбороты
	               |ГДЕ
	               |	(ОтказыПоЗаявкамОбороты.Регистратор ССЫЛКА Документ.ЗаказПоставщику
	               |			ИЛИ ОтказыПоЗаявкамОбороты.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПоставщику)
	               |	И ОтказыПоЗаявкамОбороты.КоличествоОборот > 0
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РазмещенияСтрокЗаказовОстатки.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	РазмещенияСтрокЗаказовОстатки.КоличествоОстаток КАК Количество
	               |ПОМЕСТИТЬ втРазмещения
	               |ИЗ
	               |	РегистрНакопления.РазмещенияСтрокЗаказов.Остатки(
	               |			&КонПериода,
	               |			СтрокаЗаявки В
	               |				(ВЫБРАТЬ
	               |					втЗаказыПоставщикам.СтрокаЗаявки
	               |				ИЗ
	               |					втЗаказыПоставщикам)) КАК РазмещенияСтрокЗаказовОстатки
	               |ГДЕ
	               |	РазмещенияСтрокЗаказовОстатки.КоличествоОстаток > 0
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрНакопления.РазмещенияСтрокЗаказов.Остатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Возм.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	Возм.Номенклатура,
	               |	Возм.НоменклатураЗамена
	               |ПОМЕСТИТЬ втЗамены
	               |ИЗ
	               |	РегистрСведений.ВозможныеЗаменыНоменклатуры КАК Возм
	               |ГДЕ
	               |	Возм.СтрокаЗаявки В
	               |			(ВЫБРАТЬ
	               |				втЗаказыПоставщикам.Номенклатура
	               |			ИЗ
	               |				втЗаказыПоставщикам)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗаказыПоставщикам.СтрокаЗаявки,
	               |	втЗаказыПоставщикам.Номенклатура,
	               |	втЗаказыПоставщикам.Покупатель,
	               |	ЕСТЬNULL(втЗамены.НоменклатураЗамена, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураЗамена,
	               |	втЗаказыПоставщикам.РаботаетСОкномПоставщика,
	               |	втЗаказыПоставщикам.Цена,
	               |	втЗаказыПоставщикам.СрокГарантированныйЗаказа,
	               |	втЗаказыПоставщикам.Заявка,
	               |	втЗаказыПоставщикам.Количество - ЕСТЬNULL(втОтказы.Количество, 0) - ЕСТЬNULL(втРазмещения.Количество, 0) КАК Количество
	               |ИЗ
	               |	втЗаказыПоставщикам КАК втЗаказыПоставщикам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
	               |		ПО втЗаказыПоставщикам.СтрокаЗаявки = втОтказы.СтрокаЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втРазмещения КАК втРазмещения
	               |		ПО втЗаказыПоставщикам.СтрокаЗаявки = втРазмещения.СтрокаЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЗамены КАК втЗамены
	               |		ПО втЗаказыПоставщикам.СтрокаЗаявки = втЗамены.СтрокаЗаявки";
				   
	Если ЗначениеЗаполнено(РезервироватьПокупателя) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И втЗаказыПоставщикам.Покупатель = &Покупатель";
		Запрос.УстановитьПараметр("Покупатель", РезервироватьПокупателя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ПоставщикЗаказовДругой) Тогда
		Запрос.УстановитьПараметр("ТорговаяТочка", ПоставщикЗаказовДругой);
	Иначе
		Если ЗначениеЗаполнено(ЭтотОбъект.ТорговаяТочка) Тогда
			Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
		Иначе
			Запрос.УстановитьПараметр("ТорговаяТочка", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотОбъект.Контрагент, "ОсновнаяТорговаяТочка"));
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("КонПериода", ?(ЭтоНовый(), Неопределено, Ссылка.МоментВремени()));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ТаблицаДляРаспределения = Запрос.Выполнить().Выгрузить();
	ТаблицаДляРаспределения.Колонки.Добавить("Отклонение", Новый ОписаниеТипов("Число"));
	
	ТаблицаТовары = Товары.Выгрузить(,"Номенклатура,Количество,Цена,СтрокаПрихода");
	
	Для Каждого СтрокаТЧ Из ТаблицаТовары Цикл 
		РазместитьПриходПоЗаказамЗаявкамФрагмент(СтрокаТЧ, ТаблицаДляРаспределения, "Номенклатура");
		РазместитьПриходПоЗаказамЗаявкамФрагмент(СтрокаТЧ, ТаблицаДляРаспределения, "НоменклатураЗамена");
	КонецЦикла;
		
	ОбработатьОшибкиЗаполненияРаспределения(РазмещенПолностью);

КонецПроцедуры

Процедура РазместитьПриходПоЗаказамЗаявкамФрагмент(Знач СтрокаТЧ, Знач ТаблицаДляРаспределения, Знач ИмяКолонки)
	
	Перем ИндексСтроки, КоличествоРаспределить, НоваяСтрока, Пакет, СоответствиеСтрок, СписываемоеКоличество, СтрокаВОсновнойТаблице, СтрокаПакета, Строки;
	
	//КоличествоРаспределить = СтрокаТЧ.Количество;
	
	Если СтрокаТЧ.Количество = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Строки = ТаблицаДляРаспределения.НайтиСтроки(Новый Структура(ИмяКолонки, СтрокаТЧ.Номенклатура));
	
	СоответствиеСтрок = Новый Соответствие;
	
	Для Каждого СтрокаВОсновнойТаблице Из Строки Цикл 
		Если СтрокаТЧ.Количество <> 0 Тогда 
			СтрокаВОсновнойТаблице.Отклонение = 100 *(СтрокаТЧ.Цена - СтрокаВОсновнойТаблице.Цена)/СтрокаТЧ.Цена;
			Если СтрокаВОсновнойТаблице.Отклонение < 0 Тогда 
				СтрокаВОсновнойТаблице.Отклонение = -СтрокаВОсновнойТаблице.Отклонение;	
			КонецЕсли;
			Если СтрокаВОсновнойТаблице.Отклонение < 5 И Не СтрокаВОсновнойТаблице.РаботаетСОкномПоставщика Тогда 
				СтрокаВОсновнойТаблице.Отклонение = 5;	
			КонецЕсли;
		Иначе
			СтрокаВОсновнойТаблице.Отклонение = 9999999;	
		КонецЕсли;
	КонецЦикла;
	
	Пакет = ТаблицаДляРаспределения.Скопировать(Строки);
	
	ИндексСтроки = 0;
	Для Каждого СтрокаПакета Из Пакет Цикл 
		СтрокаВОсновнойТаблице = Строки.Получить(ИндексСтроки);
		СоответствиеСтрок.Вставить(СтрокаПакета, СтрокаВОсновнойТаблице);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Пакет.Сортировать("Отклонение,СрокГарантированныйЗаказа,Заявка");
	
	ИндексСтроки = 0;
	Пока СтрокаТЧ.Количество > 0 И ИндексСтроки < Пакет.Количество() Цикл 
		СтрокаПакета = Пакет.Получить(ИндексСтроки);
		СписываемоеКоличество = Мин(СтрокаТЧ.Количество, СтрокаПакета.Количество);
		Если СписываемоеКоличество > 0 Тогда 
			НоваяСтрока = РазмещениеСтрокПрихода.Добавить();
			НоваяСтрока.СтрокаПрихода = СтрокаТЧ.СтрокаПрихода;
			НоваяСтрока.СтрокаЗаявки = СтрокаПакета.СтрокаЗаявки;
			НоваяСтрока.Количество = СписываемоеКоличество;
			
			СтрокаВОсновнойТаблице = СоответствиеСтрок.Получить(СтрокаПакета);
			СтрокаПакета.Количество = СтрокаПакета.Количество - СписываемоеКоличество;
			СтрокаВОсновнойТаблице.Количество = СтрокаВОсновнойТаблице.Количество - СписываемоеКоличество;
			СтрокаТЧ.Количество = СтрокаТЧ.Количество - СписываемоеКоличество;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1; 
	КонецЦикла;

КонецПроцедуры      

Процедура РазместитьПриходПоЗаказамЗаявкамСтарый(ТекСтрокаПрихода = Неопределено) Экспорт
	ТабТоваров = Новый ТаблицаЗначений;
	Если ТекСтрокаПрихода = Неопределено Тогда
		ТабТоваров = ЭтотОбъект.Товары.Выгрузить(, "СтрокаПрихода,Номенклатура,ЕдиницаИзмерения,Количество,Цена");
	Иначе
		пар = Новый Структура("СтрокаПрихода", текСтрокаПрихода);
		СтрокиТоваров = Товары.НайтиСтроки(пар);
		ТабТоваров = ЭтотОбъект.Товары.Выгрузить(СтрокиТоваров, "СтрокаПрихода,Номенклатура,ЕдиницаИзмерения,Количество,Цена");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Склад,
	|	ТабТоваров.СтрокаПрихода,
	|	ТабТоваров.Номенклатура,
	|	ТабТоваров.Количество,
	|	ТабТоваров.Цена
	|ПОМЕСТИТЬ ТабТоваров
	|ИЗ
	|	&ТабТоваров КАК ТабТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Возм.СтрокаЗаявки,
	|	Возм.Номенклатура,
	|	Возм.НоменклатураЗамена
	|ПОМЕСТИТЬ ТабЗамен
	|ИЗ
	|	РегистрСведений.ВозможныеЗаменыНоменклатуры КАК Возм
	|ГДЕ
	|	Возм.СтрокаЗаявки.Заказ.ТорговаяТочка = &ТорговаяТочка
	|	И Возм.СтрокаЗаявки.Заказ.Склад = &Склад
	|	И Возм.НоменклатураЗамена В
	|			(ВЫБРАТЬ
	|				ТабТоваров.Номенклатура
	|			ИЗ
	|				ТабТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.СтрокаЗаявки КАК СтрокаЗаявки,
	|	Остатки.СтрокаЗаявки.Заявка.ТорговаяТочка КАК Покупатель,
	|	Остатки.КоличествоОстаток - ЕСТЬNULL(Отказы.КоличествоОборот, 0) КАК КоличествоОстаток,
	|	Остатки.СуммаРеглОстаток КАК СуммаРеглОстаток,
	|	Остатки.ТорговаяТочка.РаботаетСОкномПоставщика КАК РаботаетСОкномПоставщика
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			&МоментВремени,
	|			ТорговаяТочка = &ТорговаяТочка
	|				И Склад = &Склад
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ТабТоваров.Номенклатура
	|					ИЗ
	|						ТабТоваров КАК ТабТоваров)) КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтказыПоЗаявкам.Обороты КАК Отказы
	|		ПО Остатки.СтрокаЗаявки = Отказы.СтрокаЗаявки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабЗамен.НоменклатураЗамена,
	|	Остатки.СтрокаЗаявки,
	|	Остатки.СтрокаЗаявки.Заявка.ТорговаяТочка,
	|	Остатки.КоличествоОстаток - ЕСТЬNULL(Отказы.КоличествоОборот, 0),
	|	Остатки.СуммаРеглОстаток,
	|	Остатки.ТорговаяТочка.РаботаетСОкномПоставщика
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			&МоментВремени,
	|			ТорговаяТочка = &ТорговаяТочка
	|				И Склад = &Склад
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ТабЗамен.Номенклатура
	|					ИЗ
	|						ТабЗамен КАК ТабЗамен)) КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтказыПоЗаявкам.Обороты КАК Отказы
	|		ПО Остатки.СтрокаЗаявки = Отказы.СтрокаЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабЗамен КАК ТабЗамен
	|		ПО Остатки.СтрокаЗаявки = ТабЗамен.СтрокаЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабОбщая.СтрокаПрихода,
	|	ТабОбщая.СтрокаЗаявки,
	|	ТабОбщая.Количество,
	|	ВЫБОР
	|		КОГДА ТабОбщая.РаботаетСОкномПоставщика
	|			ТОГДА ВЫБОР
	|					КОГДА ТабОбщая.Отклонение = 0
	|						ТОГДА 0
	|					ИНАЧЕ ТабОбщая.Отклонение / (ТабОбщая.ЦенаПрихода / 100)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТабОбщая.Отклонение / (ТабОбщая.ЦенаПрихода / 100) < 5
	|					ТОГДА 5
	|				ИНАЧЕ ТабОбщая.Отклонение / (ТабОбщая.ЦенаПрихода / 100)
	|			КОНЕЦ
	|	КОНЕЦ КАК Отклонение,
	|	ТабОбщая.КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабТоваров.СтрокаПрихода КАК СтрокаПрихода,
	|		Остатки.СтрокаЗаявки КАК СтрокаЗаявки,
	|		Остатки.Покупатель КАК Покупатель,
	|		ТабТоваров.Количество КАК Количество,
	|		ТабТоваров.Цена КАК ЦенаПрихода,
	|		ВЫБОР
	|			КОГДА Остатки.КоличествоОстаток = 0
	|				ТОГДА ТабТоваров.Цена
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТабТоваров.Цена >= Остатки.СуммаРеглОстаток / Остатки.КоличествоОстаток
	|						ТОГДА ТабТоваров.Цена - Остатки.СуммаРеглОстаток / Остатки.КоличествоОстаток
	|					ИНАЧЕ Остатки.СуммаРеглОстаток / Остатки.КоличествоОстаток - ТабТоваров.Цена
	|				КОНЕЦ
	|		КОНЕЦ КАК Отклонение,
	|		Остатки.КоличествоОстаток КАК КоличествоОстаток,
	|		Остатки.РаботаетСОкномПоставщика КАК РаботаетСОкномПоставщика
	|	ИЗ
	|		ТабТоваров КАК ТабТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|			ПО ТабТоваров.Номенклатура = Остатки.Номенклатура) КАК ТабОбщая
	|ГДЕ
	|	ТабОбщая.Количество > 0";
	
	Если ЗначениеЗаполнено(ЭтотОбъект.РезервироватьПокупателя) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ТабОбщая.Покупатель = &Покупатель";
		Запрос.УстановитьПараметр("Покупатель", ЭтотОбъект.РезервироватьПокупателя);
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабОбщая.Отклонение,
	|	ТабОбщая.СтрокаЗаявки.СрокГарантированныйЗаказа,
	|	ТабОбщая.СтрокаЗаявки.Заявка";
	
	Запрос.УстановитьПараметр("Склад", ЭтотОбъект.Склад);
	Запрос.УстановитьПараметр("ТабТоваров", ТабТоваров);
	Запрос.УстановитьПараметр("МоментВремени", ?(ЭтоНовый(), Неопределено, Ссылка.МоментВремени()));
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ПоставщикЗаказовДругой) Тогда
		Запрос.УстановитьПараметр("ТорговаяТочка", ЭтотОбъект.ПоставщикЗаказовДругой);
	Иначе
		Если ЗначениеЗаполнено(ЭтотОбъект.ТорговаяТочка) Тогда
			Запрос.УстановитьПараметр("ТорговаяТочка", ЭтотОбъект.ТорговаяТочка);
		Иначе
			Запрос.УстановитьПараметр("ТорговаяТочка", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотОбъект.Контрагент, "ОсновнаяТорговаяТочка"));
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Запрос.УстановитьПараметр("ЗаказПоставщику", ДокументОснование);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{ОтборПоЗаказу}", "И СтрокаЗаявки.Заказ = &ЗаказПоставщику");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{ОтборПоЗаказу}", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	РазмещатьСтроку = Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка();
	РазмещатьКоличество = 0;
	Пока Выборка.Следующий() Цикл
		Если РазмещатьСтроку <> Выборка.СтрокаПрихода Тогда
			РазмещатьСтроку = Выборка.СтрокаПрихода;
			РазмещатьКоличество = Выборка.Количество;
		КонецЕсли;
		
		Если РазмещатьКоличество > 0 Тогда
			нс = ЭтотОбъект.РазмещениеСтрокПрихода.Добавить();
			нс.СтрокаПрихода = Выборка.СтрокаПрихода;
			нс.СтрокаЗаявки = Выборка.СтрокаЗаявки;
			Если РазмещатьКоличество <= Выборка.КоличествоОстаток Тогда
				нс.Количество = РазмещатьКоличество;
				РазмещатьКоличество = 0;
			Иначе
				нс.Количество = Выборка.КоличествоОстаток;
				РазмещатьКоличество = РазмещатьКоличество - нс.Количество;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//ОбработатьОшибкиЗаполненияРаспределения();
		
КонецПроцедуры

Процедура ДоразместитьПоступление(Отказ)
	
	ТаблицаДоразмещения = Новый ТаблицаЗначений;
	ТаблицаДоразмещения.Колонки.Добавить("СтрокаПрихода", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокПриходов"));
	ТаблицаДоразмещения.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТЧ Из Товары Цикл 
		Строки = РазмещениеСтрокПрихода.НайтиСтроки(Новый Структура("СтрокаПрихода", СтрокаТЧ.СтрокаПрихода));
		ТаблицаРазмещения = РазмещениеСтрокПрихода.Выгрузить(Строки, "Количество");
		ТаблицаРазмещения.Свернуть(,"Количество");
		
		КоличествоРазмещено = 0;
		Если ТаблицаРазмещения.Количество() > 0 Тогда 
			КоличествоРазмещено = ТаблицаРазмещения[0].Количество;
		КонецЕсли; 
		Если СтрокаТЧ.Количество > КоличествоРазмещено Тогда 
			НоваяСтрока = ТаблицаДоразмещения.Добавить();
			НоваяСтрока.СтрокаПрихода = СтрокаТЧ.СтрокаПрихода;
			НоваяСтрока.Количество = СтрокаТЧ.Количество - КоличествоРазмещено; 
		КонецЕсли;
	КонецЦикла;
	
	
	Если ТаблицаДоразмещения.Количество() > 0 Тогда 
		//IDSite = ОбщегоНазначенияКлиентСервер.ПолучитьВиртуальныйSSID(Номер);
		Для Каждого СтрокаТЧ Из ТаблицаДоразмещения Цикл
			НоваяСтрока = РазмещениеСтрокПрихода.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			//СтрокаЗаявки = Справочники.ИдентификаторыСтрокЗаявок.СоздатьЭлемент();
			//СтрокаЗаявки.IDSite = "VL" + Формат(IDSite, "ЧЦ=18; ЧВН=; ЧГ=0");
			//СтрокаЗаявки.Виртуальная = Истина;
			//СтрокаЗаявки.Наименование = "Виртуальная " + СтрокаЗаявки.IDSite;
			//СтрокаЗаявки.Записать();
			//IDSite = IDSite + 1;
			//
			//НоваяСтрока.СтрокаЗаявки = СтрокаЗаявки.Ссылка;
			НоваяСтрока.СтрокаЗаявки = ОбщегоНазначенияКлиентСервер.ВиртуальнаяСтрокаЗаявки();
		КонецЦикла;
		Сообщить("Созданы виртуальные строки заявок");
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаличиеАртикуловВПрайсеПоставщикаVMI()
	Если Товары.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(		
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ном.Артикул КАК Артикул,
	|	Ном.Изготовитель КАК Изготовитель,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура
	|ПОМЕСТИТЬ Н
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Ном
	|		ПО Товары.Номенклатура = Ном.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	С.Ссылка,
	|	С.Артикул,
	|	С.Изготовитель
	|ПОМЕСТИТЬ С
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК С
	|ГДЕ
	|	С.Владелец = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Н.НомерСтроки,
	|	Н.Номенклатура
	|ИЗ
	|	Н КАК Н
	|		ЛЕВОЕ СОЕДИНЕНИЕ С КАК С
	|		ПО Н.Артикул = С.Артикул
	|			И Н.Изготовитель = С.Изготовитель
	|ГДЕ
	|	С.Ссылка ЕСТЬ NULL"
	);
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Р = Запрос.Выполнить();
	
	Если Р.Пустой() Тогда
		Возврат Истина;
	Иначе
		#Если Клиент Тогда
			Выборка = Р.Выбрать();
			Пока Выборка.Следующий() Цикл
				Сообщить("в строке " + Строка(Выборка.НомерСтроки) + " указана номенклатура, отсутствующая в прайсе VMI. (" + Выборка.Номенклатура + ")");
			КонецЦикла;
		#КонецЕсли
		
		Возврат Ложь;
		
	КонецЕсли;
					
КонецФункции

Функция ПроверитьНаличиеАртикуловВПрайсеПоставщикаVMI_до_02072018()
	Если Товары.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(		
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Изготовитель КАК Изготовитель,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура
	|ПОМЕСТИТЬ Н
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	С.Ссылка,
	|	С.Артикул,
	|	С.Изготовитель
	|ПОМЕСТИТЬ С
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК С
	|ГДЕ
	|	С.Владелец = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Н.НомерСтроки,
	|	Н.Номенклатура
	|ИЗ
	|	Н КАК Н
	|		ЛЕВОЕ СОЕДИНЕНИЕ С КАК С
	|		ПО Н.Артикул = С.Артикул
	|			И Н.Изготовитель = С.Изготовитель
	|ГДЕ
	|	С.Ссылка ЕСТЬ NULL"
	);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Р = Запрос.Выполнить();
	
	Если Р.Пустой() Тогда
		Возврат Истина;
	Иначе
		#Если Клиент Тогда
			Выборка = Р.Выбрать();
			Пока Выборка.Следующий() Цикл
				Сообщить("в строке " + Строка(Выборка.НомерСтроки) + " указана номенклатура, отсутствующая в прайсе VMI. (" + Выборка.Номенклатура + ")");
			КонецЦикла;
		#КонецЕсли
		
		Возврат Ложь;
		
	КонецЕсли;
					
КонецФункции

Процедура СоздатьВиртуальныеЗаявкиПоНеРазмещеннымСтрокам() экспорт 
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Номенклатура,
	|	Т.СтрокаПрихода,
	|	Т.Количество
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	&Товары КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Р.СтрокаПрихода,
	|	Р.Количество
	|ПОМЕСТИТЬ Р0
	|ИЗ
	|	&Размещение КАК Р
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Р.СтрокаПрихода,
	|	СУММА(Р.Количество) КАК Количество
	|ПОМЕСТИТЬ Р
	|ИЗ
	|	Р0 КАК Р
	|
	|СГРУППИРОВАТЬ ПО
	|	Р.СтрокаПрихода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура,
	|	Т.СтрокаПрихода,
	|	Т.Количество - ЕСТЬNULL(Р.Количество, 0) КАК Количество
	|ИЗ
	|	Т КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Р КАК Р
	|		ПО Т.СтрокаПрихода = Р.СтрокаПрихода"
	);
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("Размещение", РазмещениеСтрокПрихода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если  Выборка.Количество > 0 тогда
			нс = РазмещениеСтрокПрихода.Добавить();
			нс.Номенклатура = Выборка.Номенклатура;
			нс.СтрокаПрихода = Выборка.СтрокаПрихода;
			нс.СтрокаЗаявки = ОбщегоНазначенияКлиентСервер.ВиртуальнаяСтрокаЗаявки();
			нс.Количество = Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
	КонецПроцедуры

Процедура СделатьЗаписьДляКорректировкиЗаказаАвтоОтказ()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Автоотказы_вОП.ДокументПоступления
	|ИЗ
	|	РегистрСведений.Автоотказы_вОП КАК Автоотказы_вОП
	|ГДЕ
	|	Автоотказы_вОП.ДокументПоступления = &ДокументПоступления"
	);
	
	Запрос.УстановитьПараметр("ДокументПоступления", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Попытка
			аЗапись = РегистрыСведений.Автоотказы_вОП.СоздатьМенеджерЗаписи();
			аЗапись.Период = Дата - 1;
			аЗапись.ДокументПоступления = Ссылка;
			аЗапись.ДокументЗаказа = ДокументОснование;
			аЗапись.Записать(Истина);
			
		Исключение
			ТекстОшибки = "для поступления " + Строка(Ссылка) + " не были созданы автоотказы" + Символы.ПС;
			ТекстОшибки = ТекстОшибки + Строка(ДокументОснование) + " не был закрыт" + Символы.ПС;
			ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
			РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(
			Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПоступленияТоваровУслуг,	ТекстОшибки, "не были проставлены автоотказы");
						
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьКорректировкуЗаказаАвтоОтказ()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	А.СтрокаЗаявки,
	|	А.Количество
	|ПОМЕСТИТЬ А
	|ИЗ
	|	&Авторазмещение КАК А
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	А.СтрокаЗаявки,
	|	СУММА(А.Количество) КАК Количество
	|ПОМЕСТИТЬ Размещено
	|ИЗ
	|	А КАК А
	|
	|СГРУППИРОВАТЬ ПО
	|	А.СтрокаЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	З.СтрокаЗаявки,
	|	З.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ З
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаАвтоотказов, СтрокаЗаявки.Заказ = &ДокументОснование) КАК З
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	О.СтрокаЗаявки,
	|	СУММА(О.Количество) КАК Количество
	|ПОМЕСТИТЬ О
	|ИЗ
	|	РегистрНакопления.ОтказыПоЗаявкам КАК О
	|ГДЕ
	|	О.СтрокаЗаявки В
	|			(ВЫБРАТЬ
	|				З.СтрокаЗаявки
	|			ИЗ
	|				З КАК З)
	|	И (О.Регистратор ССЫЛКА Документ.ЗаказПоставщику
	|			ИЛИ О.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	О.СтрокаЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	З.СтрокаЗаявки,
	|	З.Количество - ЕСТЬNULL(О.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ Заказ
	|ИЗ
	|	З КАК З
	|		ЛЕВОЕ СОЕДИНЕНИЕ О КАК О
	|		ПО З.СтрокаЗаявки = О.СтрокаЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказ.СтрокаЗаявки,
	|	Заказ.Количество - ЕСТЬNULL(Размещено.Количество, 0) КАК Количество
	|ИЗ
	|	Заказ КАК Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Размещено КАК Размещено
	|		ПО Заказ.СтрокаЗаявки = Размещено.СтрокаЗаявки
	|ГДЕ
	|	Заказ.Количество - ЕСТЬNULL(Размещено.Количество, 0) > 0"
	);
	
	Запрос.УстановитьПараметр("Авторазмещение", РазмещениеСтрокПрихода);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаАвтоотказов", Дата - 1);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
		
	КонецЕсли;
	
	ВыборкаДляАвтооказа = Результат.Выбрать();
	
	ПоследняяКорректировка = ДокументОснование;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	К.Ссылка
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику КАК К
	|ГДЕ
	|	К.ДокументОснование = &ДокументОснование
	|	И К.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	К.Дата УБЫВ"
	);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПоследняяКорректировка = Выборка.Ссылка;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		ДокументОбъект = ДокументОснование.ПолучитьОбъект();
		ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ЗаказПоставщикуЗакрыт;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	    			
		НовКорректировка = Документы.КорректировкаЗаказаПоставщику.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовКорректировка, ПоследняяКорректировка);
		НовКорректировка.УстановитьНовыйНомер();
		НовКорректировка.СтатусДокумента = Справочники.СтатусыДокументов.ЗаказПоставщикуЗакрыт;                          
		НовКорректировка.Товары.Загрузить(ПоследняяКорректировка.Товары.Выгрузить());
		НовКорректировка.Услуги.Загрузить(ПоследняяКорректировка.Услуги.Выгрузить());
		НовКорректировка.ПричиныОтказов.Загрузить(ПоследняяКорректировка.ПричиныОтказов.Выгрузить());
		Пока ВыборкаДляАвтооказа.Следующий() Цикл
			пар = Новый Структура("СтрокаЗаявки", ВыборкаДляАвтооказа.СтрокаЗаявки);
			СтрокиКорректировки = НовКорректировка.Товары.НайтиСтроки(пар);
			Для Каждого Стр Из СтрокиКорректировки Цикл
				КлючСвязи = Стр.КлючСвязи;
			КонецЦикла;
			нс = НовКорректировка.ПричиныОтказов.Добавить();
			нс.СтрокаЗаявки = ВыборкаДляАвтооказа.СтрокаЗаявки;
			нс.ПричинаОтказа = Справочники.СостоянияСтрокДокументов.ОтказПоставщикаНедостача;
			нс.Количество = ВыборкаДляАвтооказа.Количество;
			Для Каждого Стр Из СтрокиКорректировки Цикл
				Стр.КоличествоОтказ = ВыборкаДляАвтооказа.Количество;
			КонецЦикла;
			нс.ЗагруженИзОП = Истина;
			нс.КлючСвязи = КлючСвязи;
			
		КонецЦикла;
		
		НовКорректировка.Дата = Дата - 1;
		НовКорректировка.ДокументОснование = ДокументОснование;
		НовКорректировка.Записать(РежимЗаписиДокумента.Проведение);

		ЗафиксироватьТранзакцию();
			
	Исключение
		ТекстОшибки = "для поступления " + Строка(Ссылка) + " не были созданы автоотказы" + Символы.ПС;
		ТекстОшибки = ТекстОшибки + Строка(ДокументОснование) + " не был закрыт" + Символы.ПС;
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(
		Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПоступленияТоваровУслуг,	ТекстОшибки, "не были проставлены автоотказы");
		ОтменитьТранзакцию();
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// ЛНА, Замер  APDEX ++(
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПоступлениеТоваровУслуг_Проведение");
		
	КонецЕсли;
	//)--
	
	ОтключитьПроверкуГТД = ДополнительныеСвойства.Свойство("ОтключитьПроверкуГТД");
	
	Если ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
		ЗаполнятьНоменклатуруКонтрагентов = Истина;
	КонецЕсли;
	
	Если НЕ ОтключитьПроверкуГТД И ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда
		Для Каждого Стр Из Товары Цикл
			Если ЗначениеЗаполнено(стр.НомерГТД) И Не ЗначениеЗаполнено(стр.СтранаПроисхождения) Тогда 
				Отказ=Истина;
				ТекстСообщения =  "Внимание! Во всех строках где указан номер ГТД, так же должна быть заполнена страна происхождения!";
				#Если Клиент Тогда 
					Сообщить(ТекстСообщения);
				#Иначе
					ВызватьИсключение ТекстСообщения;
				#КонецЕсли
				Прервать;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(стр.НомерГТД) И ЗначениеЗаполнено(стр.СтранаПроисхождения) Тогда 
				Если НЕ стр.СтранаПроисхождения.КодАльфа2="RU" И Не стр.СтранаПроисхождения.Наименование="Таможенный союз"  Тогда 
					Отказ=Истина;
					ТекстСообщения =  "Внимание! Во всех строках где указана страна, номер ГТД так же должен быть заполнен (исключение Россия и ТС)!";
					#Если Клиент Тогда 
						Сообщить(ТекстСообщения);
					#Иначе
						ВызватьИсключение ТекстСообщения;
					#КонецЕсли
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	//Добавлено Валиахметов А.А. 26.04.2018
	// Нужно для цен номенклатуры, т.к. там запрашиваются остатки
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияПриСдвигеДаты(ЭтотОбъект, РежимЗаписи, "ТоварыНаСкладах,ЦеныНоменклатуры,ЗаказыПоставщикам");
	//Конец Добавлено Валиахметов А.А. 26.04.2018
	
	Если ОбменДанными.Загрузка  Тогда
		ВрРазмещение = РазмещениеСтрокПрихода.ВыгрузитьКолонки();
		
		Для Каждого Товар ИЗ РазмещениеСтрокПрихода Цикл
			Если ПустаяСтрока(Товар.СтрокаПрихода) Тогда
				пар = Новый Структура("Номенклатура", Товар.Номенклатура);
				СтрокиТоваров = Товары.НайтиСтроки(пар);
				
				НачКоличество = Товар.Количество;
								
				Для Каждого СтрТовара Из СтрокиТоваров Цикл  
					Если НачКоличество <= 0 Тогда 
						Прервать;
					КонецЕсли;
					Если СтрТовара.Количество <= НачКоличество Тогда
						нс = ВрРазмещение.Добавить();
						нс.Номенклатура = Товар.Номенклатура;
						нс.СтрокаПрихода = СтрТовара.СтрокаПрихода;
						нс.СтрокаЗаявки = Товар.СтрокаЗаявки;
						нс.Количество = СтрТовара.Количество;
						НачКоличество = НачКоличество - СтрТовара.Количество;
					Иначе
						нс = ВрРазмещение.Добавить();
						нс.Номенклатура = Товар.Номенклатура;
						нс.СтрокаПрихода = СтрТовара.СтрокаПрихода;
						нс.СтрокаЗаявки = Товар.СтрокаЗаявки;
						нс.Количество = НачКоличество;
						НачКоличество = 0;
					КонецЕсли;
					
				КонецЦикла;
					
			Иначе
				нс = ВрРазмещение.Добавить();
				нс.Номенклатура = Товар.Номенклатура;
				нс.СтрокаПрихода = Товар.СтрокаПрихода;
				нс.СтрокаЗаявки = Товар.СтрокаЗаявки;
				нс.Количество = Товар.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РазмещениеСтрокПрихода.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВрРазмещение, РазмещениеСтрокПрихода);
		
		Возврат;
		
	Иначе 	
		//Добавлено Валиахметов А.А. PK83-631 11.05.2018 
		//СкладVMI = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "СкладVMI");
		ПараметрыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "СкладVMI,Бонусный,Сувенирный");
		Если не ЭтоМФП тогда
			Если Не (((ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Или ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение) И ПараметрыСклада.СкладVMI)
			Или (Не (ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Или ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение) И Не ПараметрыСклада.СкладVMI)) Тогда 
				Отказ = Истина;
				Сообщить("Вид операции поступления не соответствует виду склада (vmi или обычный)");
			КонецЕсли;		
		КонецЕсли;
		//Конец Добавлено Валиахметов А.А. PK83-631 11.05.2018 
		
		ОтключитьПроверкуЗаполненияКолонокТЧ = ДополнительныеСвойства.Свойство("ОтключитьПроверкуЗаполненияКолонокТЧ");
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не (Склад.Бонусный Или Склад.Сувенирный) И НЕ КорректировкаПоставщиком И НЕ ОтключитьПроверкуЗаполненияКолонокТЧ Тогда 		 
			
			МассивКолонок = Новый Массив;
			МассивКолонок.Добавить("Количество");
			Если ВидОперацииПоступления <> Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
				МассивКолонок.Добавить("Цена");
				МассивКолонок.Добавить("Сумма");
			КонецЕсли;
			Для Каждого СтрК Из Товары Цикл
				Для Каждого Колонка Из МассивКолонок Цикл 
					Если Не ЗначениеЗаполнено(СтрК[Колонка]) Тогда 
						Отказ = Истина;
						Сообщить("Нулевое значение в строке " + СтрК.НомерСтроки + " в колонке """ + Колонка + """");
						Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		КонецЕсли;
		
		//{{ХудинВВ 20180629 ХХ-159, временный костыль
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ИНН = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН"));
			Если Не ЗначениеЗаполнено(ИНН) Тогда
				Отказ = Истина;
				Сообщить("Выбрана организация с незаполненным ИНН!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		//}}
			
	КонецЕсли;
	
	//Добавлено Валиахметов А.А. 11.09.2018  XX-787 ОБмен с Топ Лог при отсутствии VMI складов (прайсов)
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Первые 1
		               |	ПрайсыПоставщиковVMI.Ссылка
		               |ИЗ
		               |	Справочник.ПрайсыПоставщиковVMI КАК ПрайсыПоставщиковVMI
		               |ГДЕ
		               |	ПрайсыПоставщиковVMI.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Если Запрос.Выполнить().Пустой() Тогда 
			Отказ = Истина;
			СообщениеОбОшибке = "Нет прайса поставщика vmi для контрагента " + Контрагент;
			#Если Клиент Тогда
				Сообщить(СообщениеОбОшибке);
			#Иначе
				ВызватьИсключение СообщениеОбОшибке;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	//Конец Добавлено Валиахметов А.А. 11.09.2018  XX-787 ОБмен с Топ Лог при отсутствии VMI складов (прайсов)
	
	#Если Клиент Тогда
	//Если ЭтоНовый() И ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение И НЕ ОбменДанными.Загрузка Тогда
		Если ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение И НЕ ОбменДанными.Загрузка Тогда
			ВсеАртикулыЕсть = ПроверитьНаличиеАртикуловВПрайсеПоставщикаVMI();
			Если НЕ ВсеАртикулыЕсть Тогда
				Отказ = Истина;
				Возврат;
			
			КонецЕсли;
		
		КонецЕсли;
	#КонецЕсли

	Если Не ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда
		//для МХ-3 строки прихода уже есть и обновлять их не нужно
		Документы.ПоступлениеТоваровУслуг.СоздатьОбновитьСтрокиПрихода(ЭтотОбъект);
	Иначе
		Если  РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если Не (ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Или ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Прочее) 
	//	И (ЭтоНовый() И СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен) 
	//	Или (Не ЭтоНовый() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СтатусДокумента") = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый 
	//	И СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен) И НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
	//	
	//	РазмещенПолностью = Истина;
	//	
	//	РазместитьПриходПоЗаказамЗаявкам(,РазмещенПолностью);
	//	Если Не РазмещенПолностью Тогда 
	//		Если Не МожноПровести Тогда 
	//			Отказ = Истина;
	//			Сообщить("Проведение документа размещенного не полностью запрещено");
	//		Иначе
	//			Сообщить("Документ размещен по заявкам покупателя");
	//			ДоразместитьПоступление(Отказ);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если ((Не (ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Или ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Прочее) 
		И (ЭтоНовый() И СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен) 
		Или (Не ЭтоНовый() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СтатусДокумента") = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый 
		И СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен) И НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
		ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Проведение И СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен))
		И НЕ КорректировкаПоставщиком Тогда
		
		Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят 
			ИЛИ СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен ИЛИ РазмещениеСтрокПрихода.Количество() > 0 Тогда
			
		Иначе		
			Если ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда
				ЗаказРавенПриходу = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент, "АвтоОтказFTP");
			Иначе
				ЗаказРавенПриходу = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент, "ЗаказРавенПриходу");
			КонецЕсли;
			
			Если ЗаказРавенПриходу Тогда
				Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
					Отказ = Истина;
					Сообщить("у контрагента установлен признак ""ЗаказРавенПриходу"", документ-основание не указан. авторазмещение невозможно");
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
			РезультатРазмещения = РаботаСоСтатусамиДокументов.ПолучитьТаблицуРазмещения(СформироватьСтруктуруПараметровАвторазмещения(), РазмещениеСтрокПрихода);
			
			Если ЗаказРавенПриходу Тогда
				//СоздатьКорректировкуЗаказаАвтоОтказ();
				Если ЭтоНовый() И Строка(Ссылка) = "00000000-0000-0000-0000-000000000000" Тогда
					СсылкаНаДокумент = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку();
					ЭтотОбъект.УстановитьСсылкуНового(СсылкаНаДокумент);
				КонецЕсли;
				
				СделатьЗаписьДляКорректировкиЗаказаАвтоОтказ();
				
			КонецЕсли;
			
			МожноПровести = РезультатРазмещения.МожноПровести;
			Если Не МожноПровести Тогда
				//#Переписал запрос на менеджера Kalinin V.A. ( 2018-06-04 )
				ЗапросАдреса = Новый Запрос( "ВЫБРАТЬ
				|	КонтактнаяИнформация.Объект,
				|	ВЫБОР
				|		КОГДА КонтактнаяИнформация.АдресЭП = """"
				|			ТОГДА КонтактнаяИнформация.Представление
				|		ИНАЧЕ КонтактнаяИнформация.АдресЭП
				|	КОНЕЦ КАК Адрес
				|ИЗ
				|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|ГДЕ
				|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.Менеджеры
				|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
				|	И КонтактнаяИнформация.Объект = &Менеджер" );
				ЗапросАдреса.УстановитьПараметр("Менеджер",Менеджер);
				
				//
				//ЗапросАдреса = Новый Запрос(
				//"ВЫБРАТЬ
				//|	П.АдресЭлПочтыОтправителя КАК Адрес
				//|ИЗ
				//|	Справочник.ПараметрыФормированияЗаказовПоставщикам КАК П
				//|ГДЕ
				//|	П.Владелец = &Владелец"
				//);
				//ЗапросАдреса.УстановитьПараметр("Владелец", Контрагент.ОсновнаяТорговаяТочка);
				Результат = ЗапросАдреса.Выполнить();
				ПолучательОшибки = "";
				Если Результат.Пустой() Тогда
					//#PK83-656 Kalinin V.A. ( 2018-06-02 )
					ПолучательОшибки = Справочники.УчетныеЗаписиЭлектроннойПочты.АдресРассылкиОшибиРазмещения.АдресЭлектроннойПочты;
					//отправить письмо админам 1с
					
				Иначе
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						ПолучательОшибки = ПолучательОшибки + ?(ПустаяСтрока(ПолучательОшибки), "", ";") + СокрЛП(Выборка.Адрес);
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПолучательОшибки) Тогда
					
					Попытка
						//#Сделал отправку по регламенту Kalinin V.A. ( 2018-06-02 )
						РегистрыСведений.ИсторияОтправкиПисемПоставщикам.ДобавитьКРассылкеПроизвольноеПисьмо( "Не проведено поступление товаров",РезультатРазмещения.ОписаниеОшибки,
						СокрЛП(Номер)+"_"+СокрЛП(Ссылка.УникальныйИдентификатор()),ПолучательОшибки,Ответственный);
						
						
						//РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПоступленияТоваровУслуг,
						//РезультатРазмещения.ОписаниеОшибки, "Не проведено поступление товаров", ПолучательОшибки);
					Исключение
						//отправить письмо админам 1с
					КонецПопытки;
					
				КонецЕсли;
				
				Отказ = Истина;
				Сообщить("Проведение документа размещенного не полностью запрещено");
				Сообщить(РезультатРазмещения.ОписаниеОшибки);
				
			Иначе
				Если Не Товары.Итог("Количество") = РазмещениеСтрокПрихода.Итог("Количество") Тогда
					Если НЕ ПустаяСтрока(Комментарий) Тогда
						СоздатьВиртуальныеЗаявкиПоНеРазмещеннымСтрокам();
						
					Иначе
						Отказ = Истина;
						Сообщить("Размещение меньше прихода. Для того чтобы создать виртуальные строки прихода и провести - Добавьте комментарий ");
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен или СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен) И РазмещениеСтрокПрихода.Количество() = 0 
		И (ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Импорт 
			ИЛИ ПараметрыСклада.Бонусный 
			ИЛИ ПараметрыСклада.Сувенирный
			ИЛИ ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент, "ПокупательИзДрБазы")) Тогда
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Товары.Выгрузить(,"Номенклатура,СтрокаПрихода,Количество"), РазмещениеСтрокПрихода);
		
		Для Каждого СтрокаРазмещения Из РазмещениеСтрокПрихода Цикл
			СтрокаРазмещения.СтрокаЗаявки = ОбщегоНазначенияКлиентСервер.ВиртуальнаяСтрокаЗаявки();
			
		КонецЦикла;
		
		Отказ = Ложь;
		
	КонецЕсли;
	
	ПоследнийКлючСвязи = 0;
	Если Товары.Количество() = 0 Тогда
		ПоследнийКлючСвязи = 0
	Иначе
		КопияТовары = Товары.Выгрузить(,"КлючСвязи");
		КопияТовары.Сортировать("КлючСвязи УБЫВ");
		ПоследнийКлючСвязи = КопияТовары.Получить(0).КлючСвязи;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.КлючСвязи) Тогда
			ПоследнийКлючСвязи = ПоследнийКлючСвязи + 1;
			ТекСтрока.КлючСвязи = ПоследнийКлючСвязи;
		КонецЕсли;
	КонецЦикла;
	
	//Добавлено Валиахметов А.А. PK83-606 11.05.2018 
	//Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят И 
	//	(ЭтоНовый() Или 
	//	(Не ЭтоНовый() И Не (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СтатусДокумента") = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят) 
	//	Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СтатусДокумента") = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен)) Тогда 
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ЗначениеЗаполнено(ДатаОплаты) Тогда 	
		Календарь = Справочники.Календари.Регламентированный;
		мДата = ?(ЗначениеЗаполнено(ДатаВходящегоДокументаСФ), ДатаВходящегоДокументаСФ, Дата);
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВидРасчетаДней,КоличествоДнейОплатыОферты,ОплатаВЛюбойДень");
		ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(мДата, РеквизитыДоговора.КоличествоДнейОплатыОферты, РеквизитыДоговора.ВидРасчетаДней, Истина);
		ДатаОплаты = РегистрыСведений.ДатыКалендарей.ДатаБлижайшегоРабочегоДня(Календарь,ДатаОплаты);
	КонецЕсли;
	//Конец Добавлено Валиахметов А.А. PK83-606 11.05.2018 

	ЭтотОбъект.ДополнительныеСвойства.Очистить();
	ОбщегоНазначения.ЗаполнитьДопСвойстваДокумента(ЭтотОбъект, РежимЗаписи);
	
	РаботаетЧерезФТП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент, "РаботаетЧерезFTP");
	
	мЗарегистрироватьИзмененияДляОтправкиНаПочту = Ложь;
	Если ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И Дата >= Константы.ДатаЗаявкиСоздаютсяВ83.Получить()
		И НЕ ЗаблокироватьОтправкуПоставщику Тогда
			
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсторияОтправкиПисемПоставщикам.Объект
		|ИЗ
		|	РегистрСведений.ИсторияОтправкиПисемПоставщикам КАК ИсторияОтправкиПисемПоставщикам
		|ГДЕ
		|	ИсторияОтправкиПисемПоставщикам.Объект = &Объект"
		);
		Запрос.УстановитьПараметр("Объект", Ссылка);
		
		Р = Запрос.Выполнить().Выгрузить();
		Если Р.Количество() = 0 Тогда
			мЗарегистрироватьИзмененияДляОтправкиНаПочту = Истина;
		КонецЕсли;
		
	ИначеЕсли РаботаетЧерезФТП И НЕ ЗаблокироватьОтправкуПоставщику Тогда
		мЗарегистрироватьИзмененияДляОтправкиНаПочту = Истина;
			
	КонецЕсли;
	
	Если (РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения) тогда
		ЭтотОбъект.ДополнительныеСвойства.Вставить("Контроль", Новый Структура);
		Если НЕ ЭтоНовый() тогда
			ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("СтарыеЗначения", Новый Соответствие);
			ЭтотОбъект.ДополнительныеСвойства.Контроль.СтарыеЗначения.Вставить(
			Метаданные.Последовательности.ПоРасчетамСКонтрагентами, мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(
			ЭтотОбъект.Ссылка, Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
		КонецЕсли;
	КонецЕсли;
	
	//Добавлено Валиахметов А.А. 10.05.2018
	РаспределитьСкидкиПриОтчетеПоставщику(РежимЗаписи);
	//Конец Добавлено Валиахметов А.А. 10.05.2018
	//Проверим на корректность Ставка/Сумма НДС   (Рудаков 22.06.18)
	УчитыватьНДС=Организация.УчитыватьНДС;
	Если УчитыватьНДС И Товары.Итог("СуммаНДС")=0 Тогда 
		Для Каждого Стр Из Товары Цикл
			Стр.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Стр.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Стр.СтавкаНДС));
		КонецЦикла;
	КонецЕсли;	
	//
	ИтоговаяСумма = Товары.Итог("Сумма");
	Если УчитыватьНДС И НЕ СуммаВключаетНДС Тогда
		ИтоговаяСумма = ИтоговаяСумма + Товары.Итог("СуммаНДС");
	КонецЕсли;
	СуммаДокумента = ИтоговаяСумма;
	
	Принято = 0;
	Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Или
		СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда 
		Для Каждого Стр Из Товары Цикл
			Принято = Принято + (Стр.Цена * (Стр.Количество-Стр.КоличествоНеПринято));
		КонецЦикла;
	КонецЕсли;
	Если  Дата >= Константы.ДатаЗаявкиСоздаютсяВ83.Получить()
		И СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен
		И ВидОперацииПоступления <> Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI И НЕ КорректировкаПоставщиком Тогда
		Если Не Товары.Итог("Количество")-Товары.Итог("КоличествоНеПринято")=Товары.Итог("КоличествоРазмещено") Тогда //Товары.Итог("Количество")=Товары.Итог("КоличествоРазмещено") Тогда 
			Отказ=Истина;
			ТекстСообщения = "Нельзя записать документ в статусе РАЗМЕЩЕН если не все строки размещены!";
			#Если Клиент Тогда 
				Сообщить(ТекстСообщения);
			#Иначе
				ВызватьИсключение ТекстСообщения;
			#КонецЕсли
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНовый() И Не ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда 
		ДатаАвторазмещения = Дата;
	КонецЕсли;
	
	//Добавлено Валиахметов А.А. 22.05.2018 
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение  И НЕ Отказ
		И Склад = Константы.СкладОсновной.Получить() 
		И (СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен Или СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен) Тогда 
		СкладЗамена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ОсновнаяТорговаяТочка.ГородПоставки.СкладЗамена");	
		Если ЗначениеЗаполнено(СкладЗамена) Тогда 
			Склад = СкладЗамена;
			Филиал = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Филиал");
		КонецЕсли;
	КонецЕсли;
	//Конец Добавлено Валиахметов А.А. 22.05.2018
	
	Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый Тогда
		РазмещениеСтрокПрихода.Очистить();
	КонецЕсли;
	
	//13.11.2018 Валиахметов, получаем дату начала приемки из топлога
	// + 20180918 Пушкин XX-628 
	//Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят И НЕ ЗначениеЗаполнено(ДатаПриемки) Тогда
	//	ДатаПриемки = ТекущаяДата();
	//Иначе
	//	ДатаПриемки = Дата(1,1,1);
	//КонецЕсли;
	// - 20180918 Пушкин XX-628
	
	//Проверка разрешения на закупку у внешних поставщиков согласно политике МФП
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ПроведениеДокументовКлиентСервер.ИспользуютсяМФП(Дата) Тогда
		
		ПараметрыПолитикиМФП = Справочники.ПолитикиМФП.ПолучитьПараметрыПолитикиМФПДляОрганизации(Организация, Дата, Истина);
		СобственыеКонтрагенты = Справочники.ПолитикиМФП.СобственыеКонтрагенты(Дата);
		
		Если НЕ ПараметрыПолитикиМФП.РазрешенаЗакупкаУВнешнихПоставщиков И СобственыеКонтрагенты.Найти(Контрагент) = Неопределено Тогда
			ТекстОшибки = "Для организации "+Организация+" запрещена закупка у внешних поставщиков! Проверьте настройки политики МФП.";
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения,"Проведен") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		СтатусОснования =  ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения,"СтатусДокумента");
		Если СтатусОснования = Справочники.СтатусыДокументов.ОтказанПоставщиком 
			ИЛИ СтатусОснования = Справочники.СтатусыДокументов.ОтмененЗаказПоставщику Тогда
			Возврат;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаЗаказаПоставщику.Ссылка
		|ИЗ
		|	Документ.КорректировкаЗаказаПоставщику КАК КорректировкаЗаказаПоставщику
		|ГДЕ
		|	КорректировкаЗаказаПоставщику.Проведен
		|	И КорректировкаЗаказаПоставщику.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаЗаказаПоставщику.Дата УБЫВ";
		Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
		ТабЗ = Запрос.Выполнить().Выгрузить();
		Если ТабЗ.Количество() = 0 Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказПоставщику.Контрагент.ОсновнойБанковскийСчет КАК БанковскийсчетКонтрагента,
			|	ЗаказПоставщику.ВалютаДокумента,
			|	ЗаказПоставщику.ДоговорКонтрагента,
			|	ЗаказПоставщику.Контрагент,
			|	ЗаказПоставщику.КратностьВзаиморасчетов,
			|	ЗаказПоставщику.КурсВзаиморасчетов,
			|	ЗаказПоставщику.Менеджер,
			|	ЗаказПоставщику.Организация,
			|	ЗаказПоставщику.Склад,
			|	ЗаказПоставщику.СуммаВключаетНДС,
			|	ЗаказПоставщику.СуммаДокумента,
			|	ЗаказПоставщику.ТипЦен,
			|	ЗаказПоставщику.УчитыватьНДС,
			|	ЗаказПоставщику.Филиал,
			|	ЗаказПоставщику.ТорговаяТочка,
			|	ЗаказПоставщику.Товары.(
			|		Номенклатура,
			|		ЕдиницаИзмерения,
			|		Коэффициент,
			|		Количество,
			|		Цена,
			|		Сумма,
			|		СтавкаНДС КАК СтавкаНДС,
			|		СуммаНДС
			|	) КАК Товары
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
			|ГДЕ
			|	ЗаказПоставщику.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
			Для Каждого Док Из Запрос.Выполнить().Выгрузить() Цикл
				БанковскийСчетКонтрагента = Док.БанковскийсчетКонтрагента;
				ВалютаДокумента = Док.ВалютаДокумента;
				ДоговорКонтрагента = Док.ДоговорКонтрагента;
				Контрагент = Док.Контрагент;
				КратностьВзаиморасчетов = Док.КратностьВзаиморасчетов;
				КурсВзаиморасчетов = Док.КурсВзаиморасчетов;
				Менеджер = Док.Менеджер;
				Организация = Док.Организация;
				Склад = Док.Склад;
				СуммаВключаетНДС = Док.СуммаВключаетНДС;
				СуммаДокумента = Док.СуммаДокумента;
				ТипЦен = Док.ТипЦен;
				УчитыватьНДС = Док.УчитыватьНДС;
				Филиал = Док.Филиал;
				Грузоотправитель = Док.ТорговаяТочка;
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Док.Товары, Товары);
				Ответственный = Общегоназначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
			КонецЦикла;
			
		Иначе 
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КорректировкаЗаказаПоставщику.Контрагент.ОсновнойБанковскийСчет КАК БанковскийсчетКонтрагента,
			|	КорректировкаЗаказаПоставщику.ВалютаДокумента,
			|	КорректировкаЗаказаПоставщику.ДоговорКонтрагента,
			|	КорректировкаЗаказаПоставщику.Контрагент,
			|	КорректировкаЗаказаПоставщику.КратностьВзаиморасчетов,
			|	КорректировкаЗаказаПоставщику.КурсВзаиморасчетов,
			|	КорректировкаЗаказаПоставщику.Организация,
			|	КорректировкаЗаказаПоставщику.Склад,
			|	КорректировкаЗаказаПоставщику.СуммаВключаетНДС,
			|	КорректировкаЗаказаПоставщику.СуммаДокумента,
			|	КорректировкаЗаказаПоставщику.ТипЦен,
			|	КорректировкаЗаказаПоставщику.УчитыватьНДС,
			|	КорректировкаЗаказаПоставщику.Филиал,
			|	КорректировкаЗаказаПоставщику.ТорговаяТочка,
			|	КорректировкаЗаказаПоставщику.Товары.(
			|		Номенклатура,
			|		ЕдиницаИзмерения,
			|		Коэффициент,
			|		КорректировкаЗаказаПоставщику.Товары.Количество - КорректировкаЗаказаПоставщику.Товары.КоличествоОтказ КАК Количество,
			|		Цена,
			|		Сумма,
			|		СтавкаНДС КАК СтавкаНДС,
			|		СуммаНДС
			|	) КАК Товары
			|ИЗ
			|	Документ.КорректировкаЗаказаПоставщику КАК КорректировкаЗаказаПоставщику
			|ГДЕ
			|	КорректировкаЗаказаПоставщику.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", ТабЗ[0].Ссылка);
			Для Каждого Док Из Запрос.Выполнить().Выгрузить() Цикл
				БанковскийСчетКонтрагента = Док.БанковскийсчетКонтрагента;
				ВалютаДокумента = Док.ВалютаДокумента;
				ДоговорКонтрагента = Док.ДоговорКонтрагента;
				Контрагент = Док.Контрагент;
				КратностьВзаиморасчетов = Док.КратностьВзаиморасчетов;
				КурсВзаиморасчетов = Док.КурсВзаиморасчетов;
				
				ЗапросМенеджера = Новый Запрос;
				ЗапросМенеджера.УстановитьПараметр("ТорговаяТочка", Док.Контрагент.ОсновнаяТорговаяТочка);
				ЗапросМенеджера.УстановитьПараметр("Снабжения", Перечисления.ВидыМенеджеров.Снабжения);
				ЗапросМенеджера.Текст = 
				"ВЫБРАТЬ
				|	МенеджерыТорговыхТочек.ВидМенеджера,
				|	МенеджерыТорговыхТочек.Менеджер
				|ИЗ
				|	РегистрСведений.МенеджерыТорговыхТочек.СрезПоследних(
				|			,
				|			ТорговаяТочка = &ТорговаяТочка
				|				И ВидМенеджера = &Снабжения) КАК МенеджерыТорговыхТочек";
				Выборка = ЗапросМенеджера.Выполнить().Выбрать();
				Пока Выборка.Следующий() цикл
					Менеджер = Выборка.Менеджер;
				КонецЦикла;
				
				Организация = Док.Организация;
				Склад = Док.Склад;
				СуммаВключаетНДС = Док.СуммаВключаетНДС;
				СуммаДокумента = Док.СуммаДокумента;
				ТипЦен = Док.ТипЦен;
				УчитыватьНДС = Док.УчитыватьНДС;
				Филиал = Док.Филиал;
				Грузоотправитель = Док.ТорговаяТочка;
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Док.Товары, Товары);
				Ответственный = Общегоназначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
			КонецЦикла;
			
		КонецЕсли;
		
		СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый;
		ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		
		Если Товары.Количество() > 0 Тогда
			СтрокиНаУдаление = Новый Массив;
			
			Для Каждого Товар Из Товары Цикл
				Если Товар.Количество = 0 Тогда
					СтрокиНаУдаление.Добавить(Товар);
				КонецЕсли;
			КонецЦикла;
			
			Для А = 0 По СтрокиНаУдаление.Количество() - 1 Цикл
				Товары.Удалить(СтрокиНаУдаление[А]);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен Или СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен Тогда 
		СписокПрав = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьУдалятьДокументВыгруженныйВТопЛог, Ложь);
		
		Если Не (СписокПрав.Количество() = 1 И СписокПрав.Получить(0).Значение) Тогда 
			Отказ = Истина;
			Сообщить("Документ выгружен в Топ Лог. Запрещено распроведение");
		КонецЕсли;
	КонецЕсли;
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьОтменуПроведения(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ЗначениеЗаполнено(КодСайта) Тогда
		ОбменДаннымиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщика);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТорговаяТочка) тогда
		ТорговаяТочка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент, "ОсновнаяТорговаяТочка");
		
	КонецЕсли;
	
	//регистрация в обмене ftp
	Если ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда
		НастройкаFTP = ЭлектронныеДокументы.ПолучитьНастройкуFTP(Контрагент, "ПоступлениеТоваровУслуг", "Товары", Истина);
	Иначе
		НастройкаFTP = ЭлектронныеДокументы.ПолучитьНастройкуFTP(Контрагент, "ПоступлениеТоваровУслуг", "Товары", Ложь);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
		
	КонецЕсли;
	
	Если НастройкаFTP <> Неопределено Тогда
		Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИсторияОбмена1с8FTP.Объект,
			|	ИсторияОбмена1с8FTP.ДатаОбмена,
			|	ИсторияОбмена1с8FTP.ДатаФайла,
			|	ИсторияОбмена1с8FTP.КодФайла
			|ИЗ
			|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
			|ГДЕ
			|	ИсторияОбмена1с8FTP.Объект = &Объект
			|	И ИсторияОбмена1с8FTP.ФормаОбъекта = ЗНАЧЕНИЕ(Перечисление.ФормыОбъектовДляРегистрацииFTP.МХ1)"
			);
			Запрос.УстановитьПараметр("Объект", Ссылка);
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() > 0 Тогда
				ЭлектронныеДокументы.ИзменитьРегистрациюДокументаВОбменеFTP(Ссылка, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1,
				Результат[0].ДатаОбмена, Истина,, Результат[0].КодФайла, Результат[0].ДатаФайла);
			КонецЕсли;
		ИначеЕсли ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИсторияОбмена1с8FTP.Объект,
			|	ИсторияОбмена1с8FTP.ДатаОбмена,
			|	ИсторияОбмена1с8FTP.ДатаФайла,
			|	ИсторияОбмена1с8FTP.КодФайла
			|ИЗ
			|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
			|ГДЕ
			|	ИсторияОбмена1с8FTP.Объект = &Объект
			|	И ИсторияОбмена1с8FTP.ФормаОбъекта = ЗНАЧЕНИЕ(Перечисление.ФормыОбъектовДляРегистрацииFTP.МХ3)"
			);
			Запрос.УстановитьПараметр("Объект", Ссылка);
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ЭлектронныеДокументы.ИзменитьРегистрациюДокументаВОбменеFTP(Ссылка, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ3,
				ТекущаяДата(), , , , );
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если мЗарегистрироватьИзмененияДляОтправкиНаПочту Тогда
		ЭлектронныеДокументы.ЗарегистрироватьДляОтправкиПочты(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Для Каждого Стр Из Товары Цикл
		Стр.СтрокаПрихода = Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка();
	КонецЦикла;
	ПричиныОтказов.Очистить();
	РазмещениеСтрокПрихода.Очистить();
	СозданВ77 = Ложь;
КонецПроцедуры

Процедура РаспределитьСкидкиПриОтчетеПоставщику(РежимЗаписи)
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Или ОбменДанными.Загрузка Или ВидОперацииПоступления <> Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СкидкиПоставщиковVMIСрезПоследних.ВидСкидки,
	               |	СкидкиПоставщиковVMIСрезПоследних.ПроцентСкидки,
	               |	СкидкиПоставщиковVMIСрезПоследних.Регистратор КАК УстановкаСкидокПоставщиковVMI
	               |ИЗ
	               |	РегистрСведений.СкидкиПоставщиковVMI.СрезПоследних(
	               |			&КонПериода,
	               |			Контрагент = &Контрагент
	               |				И (Склад = &Склад
	               |					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК СкидкиПоставщиковVMIСрезПоследних
	               |ГДЕ
	               |	СкидкиПоставщиковVMIСрезПоследних.ДатаОкончания >= &Дата";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("КонПериода", ?(ЭтоНовый(), Неопределено, МоментВремени()));
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	//Занулим скидки перед расчетом
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ПроцентСкидкиНаценки 	= 0;
		СтрокаТЧ.СуммаСкидкиНаценки 	= 0;
		СтрокаТЧ.Сумма =  СтрокаТЧ.Количество * СтрокаТЧ.Цена;
		СтрокаТЧ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
	КонецЦикла;
	
	Если Выборка.ВидСкидки = Перечисления.ВидыСкидок.БезОграниченияПоОбщейСумме Тогда 
		Для Каждого СтрокаТЧ Из Товары Цикл 
			СтрокаТЧ.ПроцентСкидкиНаценки = Выборка.ПроцентСкидки;
			СтрокаТЧ.Сумма =  СтрокаТЧ.Количество * СтрокаТЧ.Цена - СтрокаТЧ.СуммаСкидкиНаценки - СтрокаТЧ.Количество * СтрокаТЧ.Цена * СтрокаТЧ.ПроцентСкидкиНаценки/100;
			СтрокаТЧ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
		КонецЦикла;
	Иначе
		Если Не ЭтоНовый() Тогда 
			ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(Ссылка, "СкидкиVMI");
		КонецЕсли;	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СкидкиVMIОстатки.СуммаУпрОстаток КАК Сумма
		               |ИЗ
		               |	РегистрНакопления.СкидкиVMI.Остатки(, УстановкаСкидокПоставщиковVMI = &УстановкаСкидокПоставщиковVMI) КАК СкидкиVMIОстатки
		               |ГДЕ
		               |	СкидкиVMIОстатки.СуммаУпрОстаток > 0
		               |
		               |ДЛЯ ИЗМЕНЕНИЯ
		               |	РегистрНакопления.СкидкиVMI.Остатки";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("УстановкаСкидокПоставщиковVMI", Выборка.УстановкаСкидокПоставщиковVMI); 
		ВыборкаПоСумме = Запрос.Выполнить().Выбрать();
		Если ВыборкаПоСумме.Следующий() Тогда 
			Сумма = ВыборкаПоСумме.Сумма;
		Иначе
			Сумма = 0;
		КонецЕсли;
		
		Индекс = 0;
		Пока Сумма > 0 И Индекс < Товары.Количество() Цикл 
			СтрокаТЧ = Товары.Получить(Индекс);
			ВозможнаяСуммаСкидки = Окр(СтрокаТЧ.Цена * СтрокаТЧ.Количество * Выборка.ПроцентСкидки/100, 2);
			СписываемаяСумма = Мин(Сумма, ВозможнаяСуммаСкидки);
			//Если СписываемаяСумма <> ВозможнаяСуммаСкидки Тогда 
			//	СтрокаТЧ.ПроцентСкидкиНаценки = СписываемаяСумма * 100 / (СтрокаТЧ.Цена * СтрокаТЧ.Количество);
			//Иначе
			//	СтрокаТЧ.ПроцентСкидкиНаценки = Выборка.ПроцентСкидки;
			//КонецЕсли;
			СтрокаТЧ.СуммаСкидкиНаценки = СписываемаяСумма;
			СтрокаТЧ.Сумма =  СтрокаТЧ.Количество * СтрокаТЧ.Цена - СтрокаТЧ.СуммаСкидкиНаценки - СтрокаТЧ.Количество * СтрокаТЧ.Цена * СтрокаТЧ.ПроцентСкидкиНаценки/100;
			СтрокаТЧ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
			
			Сумма = Сумма - СписываемаяСумма;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Углев 22.06.2018
Функция ВыгрузитьВОбменТоплог() Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	ЕстьПолныеПрава = РольДоступна("ПолныеПрава");
	
	Ошибка = Ложь;
	СообщениеДиагностики = "";
	
	//Проверки
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Если  Не Проведен 	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "Документ не проведен." + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если  ЭтоМФП 	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "Установлен флаг ЭтоМФП." + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если  ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI ИЛИ ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Прочее 	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "Документ имеет вид поступления VMI или прочее." + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;

	Если ЕстьПолныеПрава Тогда
		
		Если   СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый 	Тогда	
			СообщениеДиагностики = СообщениеДиагностики + "Для полных прав нет проверки на статус документа (кроме статуса ""Новый""). Документ имеет статус ""Новый""." + Символы.ПС;	
			Ошибка = Истина;
		КонецЕсли;
		
	Иначе
		
		Если  Не (СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен Или СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен) 	Тогда	
			СообщениеДиагностики = СообщениеДиагностики + "Документ имеет статус " + СтатусДокумента + "должен быть статус Отгружен или Доставлен на склад." + Символы.ПС;	
			Ошибка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если  флНеВыгружатьВТопЛог	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "Установлен флаг ""Не выгружать в Топлог"". " + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если  Склад.ОбменСTopLog = Ложь	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "У склада в документе не установлен флаг ""Обмен с Топлог""." + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Ответ = ПроведениеДокументовКлиентСервер.КорректноеРазмещениеПоЗаявкам(ЭтотОбъект);
	Если Не Ответ.Корректно Тогда 
		СообщениеДиагностики = СообщениеДиагностики + "Размещение по заявкам некорректное.";	

		Расхождения = Ответ.РезультатЗапроса.Выбрать();
		Пока Расхождения.Следующий() Цикл 
			СообщениеДиагностики = СообщениеДиагностики + Символы.ПС + "Номер строки: " + Расхождения.НомерСтроки + ". Количество " + Расхождения.Количество + ". Количество размещено " + Расхождения.КоличествоРазмещено;		
		КонецЦикла;

		Ошибка = Истина;
	КонецЕсли;
	
	Узел = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 3);
	Если НЕ ЗначениеЗаполнено(Узел) Тогда 
		СообщениеДиагностики = СообщениеДиагностики + "Не найден узел обмена для выгрузки в Топлог." + Символы.ПС;
		Ошибка = Истина;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Если Ошибка = Ложь Тогда  
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Ссылка);
		СообщениеДиагностики = СообщениеДиагностики + "Документ зарегистрирован в обмене с Топ Лог";		
	Иначе
		СообщениеДиагностики = "Не удалось зарегистрировать документ в обмене с Топлог, по причине:" + Символы.ПС + СообщениеДиагностики;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Ошибка", Ошибка);
	СтруктураВозврата.Вставить("СообщениеДиагностики", СообщениеДиагностики);
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Вставить содержимое обработчика.
КонецПроцедуры




мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мМенеджерОбъекта = Документы[Метаданные().Имя];