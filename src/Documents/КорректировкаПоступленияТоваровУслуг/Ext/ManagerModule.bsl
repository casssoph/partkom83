Функция ОстаткиПоРегиструЗаказыПоставщикам(вхСсылкаНаДокумент, вхПараметры)
	вхПериод = вхСсылкаНаДокумент.МоментВремени();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ВидДвижения,
	|	&Регистратор,
	|	&Дата КАК Период,
	|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
	|	ЗаказыПоставщикамОстатки.ТорговаяТочка,
	|	ЗаказыПоставщикамОстатки.Склад,
	|	ЗаказыПоставщикамОстатки.ЕдиницаИзмерения,
	|	ЗаказыПоставщикамОстатки.СтрокаЗаказа,
	|	ЗаказыПоставщикамОстатки.СостояниеСтрокиЗаказа,
	|	- ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество,
	|	- ЗаказыПоставщикамОстатки.СуммаРеглОстаток КАК СуммаРегл,
	|	- ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&Период, СтрокаЗаказа В (&СписокСтрок) И СостояниеСтрокиЗаказа = &ОбработаноПоставщиком ) КАК ЗаказыПоставщикамОстатки
	|";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Регистратор", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("Период", вхПериод);
	Запрос.УстановитьПараметр("Дата", вхПериод.Дата);
	Запрос.УстановитьПараметр("СписокСтрок", вхПараметры.СписокСтрок);
	Запрос.УстановитьПараметр("ОбработаноПоставщиком", Справочники.СостоянияСтрокЗаказов.ЗаказПоставщикуОбработана);
			
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьПрайсПоставщикаVMI(вхСсылкаНадокумент)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрайсыПоставщиков.Ссылка
	|ИЗ
	|	Справочник.ПрайсыПоставщиков КАК ПрайсыПоставщиков
	|ГДЕ
	|	ПрайсыПоставщиков.Владелец = &Владелец");
	
	вхТорговаяТочка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ТорговаяТочка");
	Если ЗначениеЗаполнено(вхТорговаяТочка) Тогда
		Запрос.УстановитьПараметр("Владелец", вхТорговаяТочка);
	Иначе
		вхКонтрагент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "Контрагент");
		Запрос.УстановитьПараметр("Владелец", вхКонтрагент.ОсновнаяТорговаяТочка);
	КонецЕсли;
	
	СписокПрайсов = Запрос.Выполнить().Выгрузить();
	
	Если СписокПрайсов.Количество() > 0 Тогда
		Возврат СписокПрайсов[0].Ссылка;
	Иначе
		Возврат Справочники.ПрайсыПоставщиков.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

//----------------------------------------------------------------------------------------
Функция РегистрыНакопления_Закупки(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	СтатусДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "СтатусДокумента");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ВидДвижения,
	|	КорректировкаПоступленияТоваровУслуг.Ссылка КАК Регистратор,
	|	&Дата КАК Период,
	|	КорректировкаПоступленияТоваровУслуг.Ссылка.Склад КАК Склад,
	|	КорректировкаПоступленияТоваровУслуг.ЕдиницаИзмерения,
	|	КорректировкаПоступленияТоваровУслуг.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТоваровУслуг.Ссылка.ТорговаяТочка = &Пустая
	|			ТОГДА КорректировкаПоступленияТоваровУслуг.Ссылка.Контрагент.ОсновнаяТорговаяТочка
	|		ИНАЧЕ КорректировкаПоступленияТоваровУслуг.Ссылка.ТорговаяТочка
	|	КОНЕЦ КАК ТорговаяТочка,
	|	КорректировкаПоступленияТоваровУслуг.СтрокаПрихода КАК СтрокаПрихода,
	|	&СостояниеСтрокиЗаказа,
	|	ВЫБОР
	|		КОГДА &ДоставленоНаСклад
	|			ТОГДА КорректировкаПоступленияТоваровУслуг.Количество
	|		ИНАЧЕ КорректировкаПоступленияТоваровУслуг.Количество - КорректировкаПоступленияТоваровУслуг.КоличествоНеПринято
	|	КОНЕЦ КАК Количество,
	|	КорректировкаПоступленияТоваровУслуг.КоличествоРазмещено,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТоваровУслуг.Ссылка.КратностьВзаиморасчетов = 0
	|			ТОГДА КорректировкаПоступленияТоваровУслуг.Сумма
	|		ИНАЧЕ КорректировкаПоступленияТоваровУслуг.Сумма * КорректировкаПоступленияТоваровУслуг.Ссылка.КурсВзаиморасчетов / КорректировкаПоступленияТоваровУслуг.Ссылка.КратностьВзаиморасчетов
	|	КОНЕЦ КАК СуммаРегл,
	|	КорректировкаПоступленияТоваровУслуг.Сумма КАК СуммаУпр,
	|	КорректировкаПоступленияТоваровУслуг.Цена КАК Цена,
	|	КорректировкаПоступленияТоваровУслуг.Ссылка.ВалютаДокумента КАК Валюта
	|ИЗ
	|	Документ.КорректировкаПоступленияТоваровУслуг.Товары КАК КорректировкаПоступленияТоваровУслуг
	|ГДЕ
	|	КорректировкаПоступленияТоваровУслуг.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Дата", вхСсылкаНаДокумент.МоментВремени().Дата);
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("пустая", Справочники.ТорговыеТочки.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);	
		
	Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровДоставлен Тогда
		Запрос.УстановитьПараметр("СостояниеСтрокиЗаказа", Справочники.СостоянияСтрокЗаказов.ЗаказПоставщикуДоставлена);
		Запрос.УстановитьПараметр("ДоставленоНаСклад", Истина);
		
	ИначеЕсли СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда
		Запрос.УстановитьПараметр("СостояниеСтрокиЗаказа", Справочники.СостоянияСтрокЗаказов.ЗаказПоставщикуПринятаНаСкладе);
		Запрос.УстановитьПараметр("ДоставленоНаСклад", Ложь);
		
	ИначеЕсли СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда
		Запрос.УстановитьПараметр("СостояниеСтрокиЗаказа", Справочники.СостоянияСтрокЗаказов.ЗаказПоставщикуРазмещенаНаСкладе);
		Запрос.УстановитьПараметр("ДоставленоНаСклад", Ложь);
		
	КонецЕсли;
	
	ТабТоваров = Запрос.Выполнить().Выгрузить();
	
	ПроведениеДокументовКлиентСервер.ЗаписатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров);
	
	Возврат ТабТоваров;
	
КонецФункции

Функция РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	ТабТоваров = Новый ТаблицаЗначений;
	
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыНаСкладах", ТабТоваров);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТабТоваров
	КонецЕсли;
	
	Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров) Тогда
		ТабТоваров = РегистрыНакопления_Закупки(вхСсылкаНаДокумент, вхОтказ);
		
	КонецЕсли;
	
	Для Каждого Товар Из ТабТоваров Цикл
		Товар.Количество = Товар.КоличествоРазмещено;
	КонецЦикла;
	
	Возврат ТабТоваров;
	
КонецФункции

Функция РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	ТабПартий = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", ТабПартий);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТабПартий
	КонецЕсли;
	
	УчитыватьНДС = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "УчитыватьНДС");
	СуммаВключаетНДС = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "СуммаВключаетНДС");
	ТабТоваров = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", ТабТоваров);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ВидДвижения,
	|	КорректировкаПоступленияТоваровУслуг.Ссылка КАК Регистратор,
	|	&Дата КАК Период,
	|	КорректировкаПоступленияТоваровУслуг.Ссылка.Организация КАК Организация,
	|	КорректировкаПоступленияТоваровУслуг.Ссылка.Склад КАК Склад,
	|	КорректировкаПоступленияТоваровУслуг.ЕдиницаИзмерения,
	|	КорректировкаПоступленияТоваровУслуг.СтрокаПрихода КАК СтрокаПрихода,
	|	КорректировкаПоступленияТоваровУслуг.КоличествоРазмещено КАК Количество,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТоваровУслуг.Ссылка.ВалютаДокумента = &Рубль
	|			ТОГДА КорректировкаПоступленияТоваровУслуг.КоличествоРазмещено * КорректировкаПоступленияТоваровУслуг.Цена
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРубли,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТоваровУслуг.Ссылка.ВалютаДокумента = &Доллар
	|			ТОГДА КорректировкаПоступленияТоваровУслуг.КоличествоРазмещено * КорректировкаПоступленияТоваровУслуг.Цена
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДоллары,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТоваровУслуг.Ссылка.ВалютаДокумента = &Евро
	|			ТОГДА КорректировкаПоступленияТоваровУслуг.КоличествоРазмещено * КорректировкаПоступленияТоваровУслуг.Цена
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаЕвро,
	|	КорректировкаПоступленияТоваровУслуг.СтавкаНДС
	|ИЗ
	|	Документ.КорректировкаПоступленияТоваровУслуг.Товары КАК КорректировкаПоступленияТоваровУслуг
	|ГДЕ
	|	КорректировкаПоступленияТоваровУслуг.Ссылка = &Ссылка";
	
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);	
	Запрос.УстановитьПараметр("Дата", вхСсылкаНаДокумент.МоментВремени().Дата);
	Запрос.УстановитьПараметр("Рубль", Справочники.Валюты.НайтиПоКоду(643));	
	Запрос.УстановитьПараметр("Доллар", Справочники.Валюты.НайтиПоКоду(840));	
	Запрос.УстановитьПараметр("Евро", Справочники.Валюты.НайтиПоКоду(978));	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);		
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабТоваров);
	
	Если УчитыватьНДС Тогда
		Если НЕ СуммаВключаетНДС Тогда
			Для Каждого Товар Из  ТабТоваров Цикл
				 Товар.СуммаРубли = Товар.СуммаРубли +
				 УчетНДС.РассчитатьСуммуНДС(Товар.СуммаРубли, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Товар.СтавкаНДС));
				 Товар.СуммаДоллары = Товар.СуммаДоллары +
				 УчетНДС.РассчитатьСуммуНДС(Товар.СуммаДоллары, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Товар.СтавкаНДС));
				 Товар.СуммаЕвро = Товар.СуммаЕвро +
				 УчетНДС.РассчитатьСуммуНДС(Товар.СуммаЕвро, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Товар.СтавкаНДС));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТабТоваров;
	
КонецФункции

Функция РегистрыНакопления_ПартииТоваровVMI(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабПартий = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваровVMI", ТабПартий);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТабПартий
	КонецЕсли;
	
	ТабТоваров = Новый ТаблицаЗначений;
	Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров) Тогда
		ТабТоваров = РегистрыНакопления_Закупки(вхСсылкаНаДокумент, вхОтказ);
		
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабТоваров, ТабПартий);
	
	ТабПартий.ЗаполнитьЗначения(Перечисления.СостоянияПартииТовараVMI.Поступил, "СостояниеПартии");
	
	Возврат ТабПартий;
	
КонецФункции

Функция РегистрыНакопления_ПартииТоваровУпр(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабТоваров = Новый ТаблицаЗначений;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваровУпр", ТабТоваров);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТабТоваров
	КонецЕсли;
	
	Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров) Тогда
		ТабТоваров = РегистрыНакопления_Закупки(вхСсылкаНаДокумент, вхОтказ);
		
	КонецЕсли;
	
	Возврат ТабТоваров;
	
КонецФункции

Функция РегистрыНакопления_ЗаказыПоставщикам(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТаблицаДвиженийОтказов = Новый ТаблицаЗначений;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ЗаказыПоставщикам", ТаблицаДвиженийОтказов);
	
	СтатусДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "СтатусДокумента");
	
	Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда
		ЗапросПричинОтказов = Новый Запрос;
		ЗапросПричинОтказов.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаПоступленияТоваровУслугПричиныОтказов.СтрокаПрихода,
		|	КорректировкаПоступленияТоваровУслугПричиныОтказов.ПричинаОтказа,
		|	КорректировкаПоступленияТоваровУслугПричиныОтказов.Количество
		|ИЗ
		|	Документ.КорректировкаПоступленияТоваровУслуг.ПричиныОтказов КАК КорректировкаПоступленияТоваровУслугПричиныОтказов
		|ГДЕ
		|	КорректировкаПоступленияТоваровУслугПричиныОтказов.Ссылка = &Ссылка";
		ЗапросПричинОтказов.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		
		ПричиныОтказов = ЗапросПричинОтказов.Выполнить().Выгрузить();
		
		Если ПричиныОтказов.Количество() > 0 Тогда
			ЗапросРазмещения = Новый Запрос;
			ЗапросРазмещения.Текст = 
			"ВЫБРАТЬ
			|	РазмещенияСтрокЗаказовОбороты.СтрокаЗаказа
			|ИЗ
			|	РегистрНакопления.РазмещенияСтрокЗаказов.Обороты(, &вхПериод, , СтрокаПрихода = &СтрокаПрихода) КАК РазмещенияСтрокЗаказовОбороты";
			ЗапросРазмещения.УстановитьПараметр("вхПериод", вхСсылкаНаДокумент.МоментВремени());
						
			Для Каждого ТекОтказ Из ПричиныОтказов Цикл
				ЗапросРазмещения.УстановитьПараметр("СтрокаПрихода", ТекОтказ.СтрокаПрихода);
				ТабРазмещений = ЗапросРазмещения.Выполнить().Выгрузить();
				СписокСтрокЗаказа = Новый СписокЗначений;
				Для Каждого Разм Из ТабРазмещений Цикл
					Если СписокСтрокЗаказа.НайтиПоЗначению(Разм.СтрокаЗаказа) = Неопределено Тогда
						СписокСтрокЗаказа.Добавить(Разм.СтрокаЗаказа);
					КонецЕсли;
				КонецЦикла;
				ТабОстатков = ОстаткиПоРегиструЗаказыПоставщикам(вхСсылкаНаДокумент, Новый Структура("СписокСтрок,РежимПроведения", СписокСтрокЗаказа, вхПараметры.РежимПроведения));
				
				ИтогОтказы = ТекОтказ.Количество;
				
				ТекущийИтогОтказано = ТекОтказ.Количество;
				Пока ИтогОтказы > 0 Цикл
					Если ТекущийИтогОтказано <= 0 Тогда Прервать; КонецЕсли;
					Если ТабОстатков.Количество() = 0 Тогда Прервать; КонецЕсли;
					
					Для Каждого Остаток Из ТабОстатков Цикл
						ОстатокКоличество = - Остаток.Количество;
						Если ОстатокКоличество <= 0 Тогда Продолжить; КонецЕсли;
						
						ЦенаУпр = Окр(Остаток.СуммаУпр/Остаток.Количество,2);
						ЦенаРегл = Окр(Остаток.СуммаРегл/Остаток.Количество,2);
						Если ТекущийИтогОтказано < ОстатокКоличество Тогда
							нс = ТаблицаДвиженийОтказов.Добавить();
							нс.ВидДвижения = ВидДвиженияНакопления.Приход;
							нс.Регистратор = Остаток.Регистратор;
							нс.Период = Остаток.Период;
							нс.ДоговорКонтрагента = Остаток.ДоговорКонтрагента;
							нс.ТорговаяТочка = Остаток.ТорговаяТочка;
							нс.Склад = Остаток.Склад;
							нс.Единицаизмерения = Остаток.ЕдиницаИзмерения;
							нс.СтрокаЗаказа = Остаток.СтрокаЗаказа;
							нс.СостояниестрокиЗаказа = Справочники.СостоянияСтрокЗаказов.ЗаказПоставщикуОбработана;
							нс.Количество = - ТекущийИтогОтказано;
							нс.СуммаУпр =  - ЦенаУпр*ТекущийИтогОтказано;
							нс.СуммаРегл = - ЦенаРегл*ТекущийИтогОтказано;
							
							нс = ТаблицаДвиженийОтказов.Добавить();
							нс.ВидДвижения = ВидДвиженияНакопления.Приход;
							нс.Регистратор = Остаток.Регистратор;
							нс.Период = Остаток.Период;
							нс.ДоговорКонтрагента = Остаток.ДоговорКонтрагента;
							нс.ТорговаяТочка = Остаток.ТорговаяТочка;
							нс.Склад = Остаток.Склад;
							нс.Единицаизмерения = Остаток.ЕдиницаИзмерения;
							нс.СтрокаЗаказа = Остаток.СтрокаЗаказа;
							нс.СостояниестрокиЗаказа = ТекОтказ.ПричинаОтказа;
							нс.Количество = ТекущийИтогОтказано;
							нс.СуммаУпр = ЦенаУпр*ТекущийИтогОтказано;
							нс.СуммаРегл = ЦенаРегл*текущийИтогОтказано;
							
							ОстатокКоличество = - (ОстатокКоличество - ТекущийИтогОтказано);
							Остаток.СуммаРегл = - (ЦенаРегл * ОстатокКоличество);
							Остаток.СуммаУпр = - (ЦенаУпр * ОстатокКоличество);
							ТекущийИтогОтказано = 0;
							ИтогОтказы = ИтогОтказы - ТекущийИтогОтказано;
							
							Прервать;
						Иначе
							нс = ТаблицаДвиженийОтказов.Добавить();
							нс.ВидДвижения = ВидДвиженияНакопления.Приход;
							нс.Регистратор = Остаток.Регистратор;
							нс.Период = Остаток.Период;
							нс.ДоговорКонтрагента = Остаток.ДоговорКонтрагента;
							нс.ТорговаяТочка = Остаток.ТорговаяТочка;
							нс.Склад = Остаток.Склад;
							нс.Единицаизмерения = Остаток.ЕдиницаИзмерения;
							нс.СтрокаЗаказа = Остаток.СтрокаЗаказа;
							нс.СостояниестрокиЗаказа = Справочники.СостоянияСтрокЗаказов.ЗаказПоставщикуОбработана;
							нс.Количество = ОстатокКоличество;
							нс.СуммаУпр = Остаток.СуммаУпр;
							нс.СуммаРегл = Остаток.СуммаРегл;
							
							нс = ТаблицаДвиженийОтказов.Добавить();
							нс.ВидДвижения = ВидДвиженияНакопления.Приход;
							нс.Регистратор = Остаток.Регистратор;
							нс.Период = Остаток.Период;
							нс.ДоговорКонтрагента = Остаток.ДоговорКонтрагента;
							нс.Склад = Остаток.Склад;
							нс.ТорговаяТочка = Остаток.ТорговаяТочка;
							нс.Единицаизмерения = Остаток.ЕдиницаИзмерения;
							нс.СтрокаЗаказа = Остаток.СтрокаЗаказа;
							нс.СостояниестрокиЗаказа = ТекОтказ.ПричинаОтказа;
							нс.Количество = - ОстатокКоличество;
							нс.СуммаУпр = - Остаток.СуммаУпр;
							нс.СуммаРегл = - Остаток.СуммаРегл;
							
							ТекущийИтогОтказано = ТекущийИтогОтказано - ОстатокКоличество;
							
							ИтогОтказы = ИтогОтказы - ОстатокКоличество;
							
							Остаток.Количество = 0;
							Остаток.СуммаРегл = 0;
							Остаток.СуммаУпр = 0;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат ТаблицаДвиженийОтказов;
	
КонецФункции

Функция РегистрыНакопления_РазмещенияСтрокЗаказов(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабПоЗаказам = Новый ТаблицаЗначений;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("РазмещенияСтрокЗаказов", ТабПоЗаказам);
	
	вхПериод = вхСсылкаНаДокумент.МоментВремени();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияТоваровУслугПричиныОтказов.СтрокаПрихода,
	|	КорректировкаПоступленияТоваровУслугПричиныОтказов.ПричинаОтказа,
	|	КорректировкаПоступленияТоваровУслугПричиныОтказов.Количество
	|ИЗ
	|	Документ.КорректировкаПоступленияТоваровУслуг.ПричиныОтказов КАК КорректировкаПоступленияТоваровУслугПричиныОтказов
	|ГДЕ
	|	КорректировкаПоступленияТоваровУслугПричиныОтказов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	ПричиныОтказов = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмещенияСтрокЗаказовОстатки.СтрокаЗаказа,
	|	РазмещенияСтрокЗаказовОстатки.СтрокаПрихода,
	|	РазмещенияСтрокЗаказовОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.РазмещенияСтрокЗаказов.Остатки(&Период, СтрокаПрихода = &Строка) КАК РазмещенияСтрокЗаказовОстатки";
	Запрос.УстановитьПараметр("Период", вхПериод);
	
	Для Каждого Отказ Из ПричиныОтказов Цикл
		Запрос.УстановитьПараметр("Строка", Отказ.СтрокаПрихода);
		Размещения = Запрос.Выполнить().Выгрузить();
		Если Размещения.Количество() > 0 Тогда
			НачКоличество = Отказ.Количество;
			Пока НачКоличество > 0 Цикл
				Для Каждого Разм Из Размещения Цикл
					Если НачКоличество <= Разм.КоличествоОстаток Тогда
						нс = ТабПоЗаказам.Добавить();
						нс.Период = вхПериод.Дата;
						нс.Регистратор = вхСсылкаНаДокумент;
						нс.ВидДвижения = ВидДвиженияНакопления.Приход;
						нс.СтрокаЗаказа = Разм.СтрокаЗаказа;
						нс.СтрокаПрихода = Разм.СтрокаПрихода;
						нс.Количество = - НачКоличество;
						НачКоличество = 0;
						Прервать;
						
					Иначе
						нс = ТабПоЗаказам.Добавить();
						нс.Период = вхПериод.Дата;
						нс.Регистратор = вхСсылкаНаДокумент;
						нс.ВидДвижения = ВидДвиженияНакопления.Приход;
						нс.СтрокаЗаказа = Разм.СтрокаЗаказа;
						нс.СтрокаПрихода = Разм.СтрокаПрихода;
						нс.Количество = - Разм.КоличествоОстаток;
						НачКоличество = НачКоличество - Разм.КоличествоОстаток;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроведениеДокументовКлиентСервер.ЗаписатьЗначение(вхПараметры, "ТаблицаРазмещенияЗаказов", ТабПоЗаказам);
	
	Возврат ТабПоЗаказам;
	
КонецФункции

Функция РегистрыНакопления_РезервыТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	вхПериод = вхСсылкаНаДокумент.МоментВремени();
	вхСклад = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент,"Склад");
	СтатусДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент,"СтатусДокумента");
	
	ТабРезервы = Новый ТаблицаЗначений;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("РезервыТоваров", ТабРезервы);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТабРезервы
	КонецЕсли;
	
	Если СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда
			
		//ТабТоваров = Новый ТаблицаЗначений;
		//Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров) Тогда
		//	ТабТоваров = РегистрыНакопления_Закупки(вхСсылкаНаДокумент, вхОтказ);
		//
		//КонецЕсли;
		//
		//ТабТоваров.Колонки.Удалить(ТабТоваров.Колонки.Найти("ДоговорКонтрагента"));
		//ТабТоваров.Колонки.Удалить(ТабТоваров.Колонки.Найти("СостояниеСтрокиЗаказа"));
		//ТабТоваров.Колонки.Удалить(ТабТоваров.Колонки.Найти("СуммаРегл"));
		//ТабТоваров.Колонки.Удалить(ТабТоваров.Колонки.Найти("СуммаУпр"));
		//ТабТоваров.Колонки.Удалить(ТабТоваров.Колонки.Найти("КоличествоРазмещено"));
		//
		//ТабТоваров.Колонки.Вставить(5,"Качество");
		//ТабТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		//
		//ТабТоваров.Свернуть("ВидДвижения,Регистратор,Период,Склад,ЕдиницаИзмерения,Качество,СтрокаПрихода","Количество");
		//
		//ЗапросРазмещения = Новый Запрос;
		//ЗапросРазмещения.Текст = 
		//"ВЫБРАТЬ
		//|	РазмещенияСтрокЗаявокОбороты.СтрокаЗаявки,
		//|	РазмещенияСтрокЗаявокОбороты.КоличествоОборот КАК Количество
		//|ИЗ
		//|	РегистрНакопления.РазмещенияСтрокЗаявок.Обороты КАК РазмещенияСтрокЗаявокОбороты
		//|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещенияСтрокЗаказов.Обороты(, &вхПериод, , СтрокаПрихода = &СтрокаПрихода) КАК РазмещенияСтрокЗаказовОбороты
		//|	ПО РазмещенияСтрокЗаявокОбороты.СтрокаЗаказа = РазмещенияСтрокЗаказовОбороты.СтрокаЗаказа";
		//ЗапросРазмещения.УстановитьПараметр("вхПериод", вхСсылкаНаДокумент.МоментВремени());
		//
		//Для Каждого Товар Из ТабТоваров Цикл
		//	ЗапросРазмещения.УстановитьПараметр("СтрокаПрихода", Товар.СтрокаПрихода);
		//	ИтогТовар = Товар.Количество;
		//	Для Каждого Размещение Из ЗапросРазмещения.Выполнить().Выгрузить() Цикл
		//		Если ИтогТовар <= 0 Тогда Прервать; КонецЕсли;
		//		Если ИтогТовар <= Размещение.Количество Тогда
		//			нс = ТабРезервы.Добавить();
		//			нс.ВидДвижения = Товар.ВидДвижения;
		//			нс.Регистратор = Товар.Регистратор;
		//			нс.Период = Товар.Период;
		//			нс.Склад = товар.Склад;
		//			нс.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
		//			нс.Качество = Товар.Качество;
		//			нс.СтрокаЗаявки = Размещение.СтрокаЗаявки;
		//			нс.Количество = Товар.Количество;
		//			Прервать;
		//		Иначе
		//			нс = ТабРезервы.Добавить();
		//			нс.ВидДвижения = Товар.ВидДвижения;
		//			нс.Регистратор = Товар.Регистратор;
		//			нс.Период = Товар.Период;
		//			нс.Склад = товар.Склад;
		//			нс.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
		//			нс.Качество = Товар.Качество;
		//			нс.СтрокаЗаявки = Размещение.СтрокаЗаявки;
		//			нс.Количество = Размещение.Количество;
		//			ИтогТовар = ИтогТовар - Размещение.Количество;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабРезервы;
	
КонецФункции

Функция РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабВзаиморасчеты = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", ТабВзаиморасчеты);
	Возврат ТабВзаиморасчеты;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты Тогда
		Возврат ТабВзаиморасчеты
	КонецЕсли;
	
	СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхСсылкаНаДокумент, 
	"ДоговорКонтрагента,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,СуммаДокумента");
	
	Возврат УправлениеВзаиморасчетами.ПростоеПроведениеПоВзаиморасчетам(вхСсылкаНаДокумент, СтруктураРеквизитов.ДоговорКонтрагента, ,
			СтруктураРеквизитов.ВалютаДокумента, СтруктураРеквизитов.КурсВзаиморасчетов, СтруктураРеквизитов.КратностьВзаиморасчетов, 
			-СтруктураРеквизитов.СуммаДокумента, 1);
			
КонецФункции
		
Функция РегистрыСведений_ЦеныНоменклатурыКонтрагентов(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	ВидОперации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ВидОперацииПоступления");
	ТабЦен = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраСведений("ЦеныНоменклатурыКонтрагентов", ТабЦен);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&вхПериод КАК Период,
	|	КорректировкаПоступленияТоваровУслугТовары.Ссылка КАК Регистратор,
	|	&ПрайсПоставщика,
	|	КорректировкаПоступленияТоваровУслугТовары.ЕдиницаИзмерения,
	|	КорректировкаПоступленияТоваровУслугТовары.Ссылка.ВалютаДокумента КАК Валюта,
	|	КорректировкаПоступленияТоваровУслугТовары.Цена
	|ИЗ
	|	Документ.КорректировкаПоступленияТоваровУслуг.Товары КАК КорректировкаПоступленияТоваровУслугТовары
	|ГДЕ
	|	КорректировкаПоступленияТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("вхПериод", вхСсылкаНаДокумент.МоментВремени().Дата);
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНадокумент);
	
	Если ВидОперации = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда
		Запрос.УстановитьПараметр("ПрайсПоставщика", ПолучитьПрайсПоставщикаVMI(вхСсылкаНадокумент));
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабЦен);
		
	Иначе
		Запрос.Текст = Запрос.Текст + " И КорректировкаПоступленияТоваровУслугТовары.ЕдиницаИзмерения = &ЕдиницаИзмерения";
		//Для Каждого Стр Из ТабПоЗаявкам Цикл
		//	Запрос.УстановитьПараметр("ПрайсПоставщика", Стр.СтрокаЗаявки.ПрайсПоставщика);
		//	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Стр.СтрокаЗаявки.ЕдиницаИзмерения);//в строке заявки нет единицы измерения
		//	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабЦен);
		//КонецЦикла;
	КонецЕсли;
	
	Возврат ТабЦен;
	
КонецФункции
//----------------------------------------------------------------------------------------

Процедура ВыполнитьПроведение(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыКРезервированию") 
		Или ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ОтказыПоЗаявкам") Тогда                   
		ОтказыПоРазмещениям = Неопределено;
		
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыКРезервированию",
		РегистрыНакопления_ТоварыКРезервированию(вхСсылкаНаДокумент, вхОтказ, вхПараметры, ОтказыПоРазмещениям));
		
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ОтказыПоЗаявкам",
		ОтказыПоРазмещениям);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//Если ЗначениеЗаполнено(Данные.ДокументОснование) Тогда
	//	Номер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Данные.ДокументОснование, "Номер");
	//	Если Значениезаполнено(Данные.СтатусДокумента) Тогда
	//		Представление = "Поступление товаров №" + Номер + " от " + Формат(Данные.Дата, "ДЛФ=DT") + " (" + Строка(Данные.СтатусДокумента) +")";
	//	Иначе
	//		Представление = "Поступление товаров №" + Номер + " от " + Формат(Данные.Дата, "ДЛФ=DT");
	//	КонецЕсли;
	//Иначе
	//	СтандартнаяОбработка = Истина;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//
	//Поля.Добавить("Дата");
	//Поля.Добавить("ДокументОснование");
	//Поля.Добавить("СтатусДокумента");
	
	
КонецПроцедуры

Функция РегистрыНакопления_ТоварыКРезервированию(вхСсылкаНаДокумент, вхОтказ, вхПараметры, ОтказыПоРазмещениям)
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыКРезервированию", ТаблицаДвижений);
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ОтказыПоЗаявкам", ОтказыПоРазмещениям);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,ВидОперацииПоступления,СтатусДокумента");
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	//Если Реквизиты.ЭтоМФП тогда
	//	//собственное юр лицо, проводим только по взаиморасчетам
	//	Возврат ТаблицаДвижений;
	//КонецЕсли;
	//	
	Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI
		ИЛИ Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.Прочее Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	КорректировкаПоступленияТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
		               |	КорректировкаПоступленияТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки
		               |ПОМЕСТИТЬ втРазмещения
		               |ИЗ
		               |	Документ.КорректировкаПоступленияТоваровУслуг.РазмещениеСтрокПрихода КАК КорректировкаПоступленияТоваровУслугРазмещениеСтрокПрихода
		               |ГДЕ
		               |	КорректировкаПоступленияТоваровУслугРазмещениеСтрокПрихода.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТоварыКРезервированиюОстатки.СтрокаЗаявки,
		               |	ТоварыКРезервированиюОстатки.СтрокаПрихода,
		               |	ТоварыКРезервированиюОстатки.Склад,
		               |	ТоварыКРезервированиюОстатки.Номенклатура,
		               |	ТоварыКРезервированиюОстатки.КоличествоОстаток КАК Количество
		               |ИЗ
		               |	РегистрНакопления.ТоварыКРезервированию.Остатки(
		               |			&КонПериода,
		               |			(СтрокаЗаявки, СтрокаПрихода) В
		               |				(ВЫБРАТЬ
		               |					втРазмещения.СтрокаЗаявки,
		               |					втРазмещения.СтрокаПрихода
		               |				ИЗ
		               |					втРазмещения)) КАК ТоварыКРезервированиюОстатки";
					   
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
		
		Таблица = Запрос.Выполнить().Выгрузить(); 			   
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(вхСсылкаНаДокумент, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Дата, "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица, ОтказыПоРазмещениям);
		ОтказыПоРазмещениям.ЗаполнитьЗначения(вхСсылкаНаДокумент, "Регистратор");
		ОтказыПоРазмещениям.ЗаполнитьЗначения(Реквизиты.Дата, "Период");
		ОтказыПоРазмещениям.ЗаполнитьЗначения(Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке, "ПричинаОтказа");
	КонецЕсли;

	Возврат ТаблицаДвижений;
	
КонецФункции
