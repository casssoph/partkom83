
//// ОБРАБОТЧИКИ МОДУЛЯ ОБЪЕКТА

Процедура ВыполнитьПроведение(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ВыполнитьПроведение";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	лКонтроль = Неопределено;
	лФильтр = Неопределено;
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ДанныеОбъекта.Контроль", лКонтроль);
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "Фильтр", лФильтр);	
	
	флСпособПроведения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "флСпособПроведения");
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыНаСкладах")  Тогда
		Если Не флСпособПроведения = Перечисления.СпособыПроведенияДокументов.ТолькоВзаиморасчеты Тогда 
			//Семенов И.П. 17.01.2019(
			УправляемаяБлокировкаТоварыНаСкладах(вхСсылкаНаДокумент);
			//)Семенов И.П.
			ПроведениеДокументовКлиентСервер.КонтрольОстатков(вхСсылкаНаДокумент, вхОтказ,,вхПараметры);
			ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыНаСкладах", РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		Иначе
			ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыНаСкладах");
		КонецЕсли;
	КонецЕсли;
		
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваров") 
		//ИЛИ ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваровVMI") 
		Тогда
		
		//Семенов И.П. 17.01.2019(
		УправляемаяБлокировкаПартииТоваров(вхСсылкаНаДокумент);
		//)Семенов И.П.
		
		лОчищать = ПроведениеДокументовКлиентСервер.НеобходимоОчиститьДвиженияПартииТоваров(вхСсылкаНаДокумент, лФильтр);		
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		
		Если лОчищать  Тогда
			Если лФильтр = Неопределено Тогда 
				ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);
				лБазовая = Неопределено;
				ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", лБазовая);
			Иначе
				// Очищаем только движения по фильтру
				лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
				лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
				ОбщегоНазначения.ЗаписатьДвиженияДокументаБезОбработки(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров, лРазделенныеБазовая.Исключенные, Истина); 
				лБазовая = лРазделенныеБазовая.Исключенные;
			КонецЕсли;	
		Иначе
			лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
		КонецЕсли;

		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
		
		Структура = ПроведениеДокументовКлиентСервер.ПогашениеПартийТоваровНовое(вхСсылкаНаДокумент, вхОтказ, , лФильтр, вхПараметры);
		Если Не вхОтказ Тогда 				
			лТребуемая = Структура.ПартииТоваров;
					
			//Удалим служебные колонки 
			ОбщегоНазначения.УдалитьКолонки(лИсходная, лТребуемая);
			
			лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
			ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров,
			лРазностныеДанные, лРазделенныеБазовая.Исключенные);
			
			ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
			Если лФильтр = Неопределено Тогда 
				РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Истина);
			КонецЕсли;
			ПроведениеДокументовКлиентСервер.ЗаписатьИзмененныеДвижения(вхСсылкаНаДокумент, лФильтр, Структура.ПартииТоваровVMI, Метаданные.РегистрыНакопления.ПартииТоваровVMI);
		КонецЕсли;
	КонецЕсли;
		
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Закупки") Тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "Закупки", РегистрыНакопления_Закупки(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
		                                        
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Взаиморасчеты") тогда
		// регистр накопления "Взаиморасчеты"
		//Семенов И.П. 17.01.2019(
		УправляемаяБлокировкаВзаиморасчеты(вхСсылкаНаДокумент);
		//)Семенов И.П.
		
		НовоеПроведениеПоВзаиморасчетам = глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам");

		лОчищать = Ложь;
		Если НовоеПроведениеПоВзаиморасчетам Тогда 
			лОчищать = ПроведениеДокументовКлиентСервер.НеобходимоОчиститьДвиженияВзаиморасчеты(вхСсылкаНаДокумент);	
		Иначе
			Если (лКонтроль <> Неопределено) тогда
				Если лКонтроль.Свойство("СтарыеЗначения") Тогда
					лСтарыеЗначения = лКонтроль.СтарыеЗначения.Получить(Метаданные.Последовательности.ПоРасчетамСКонтрагентами);
					лНовыеЗначения = лКонтроль.НовыеЗначения.Получить(Метаданные.Последовательности.ПоРасчетамСКонтрагентами);
					Если (лСтарыеЗначения <> Неопределено) И (лНовыеЗначения <> Неопределено) тогда
						лОчищать = (лСтарыеЗначения.Шапка.Дата < лНовыеЗначения.Шапка.Дата)
						И лСтарыеЗначения.Шапка.Проведен;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
		
		Если лОчищать тогда
			ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты);
			лБазовая = Неопределено;
			ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", лБазовая);
			лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		Иначе
			лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
			лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты);	
		КонецЕсли;
		
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
		//лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
		ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты,
		лРазностныеДанные, лРазделенныеБазовая.Исключенные);
		
		ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
		Если НовоеПроведениеПоВзаиморасчетам И лФильтр = Неопределено Тогда 
			РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПоРасчетамСКонтрагентами", Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьОтменуПроведения(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ВыполнитьОтменуПроведения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент);
	
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Ложь);
	
	Если глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПоРасчетамСКонтрагентами", Ложь);
	КонецЕсли;
КонецПроцедуры

//// ТАБЛИЦЫ ДВИЖЕНИЙ ДОКУМЕНТОВ

Функция РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_РегистрыНакопления_ТоварыНаСкладах";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ТабТоваров = Новый ТаблицаЗначений;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыНаСкладах", ТабТоваров);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата, ВидОперации, СтатусДокумента, АктРассмотренияВозврата, флСпособПроведения");
	
	ДатаДокумента = Реквизиты.Дата;
	Если ДатаДокумента < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТабТоваров
	КонецЕсли;
	
	Если ДатаДокумента < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТабТоваров;
	КонецЕсли;
	
	Если Реквизиты.флСпособПроведения = Перечисления.СпособыПроведенияДокументов.ТолькоВзаиморасчеты Тогда
		Возврат ТабТоваров;
	КонецЕсли;
	
	//Валиахметов http://jira.part-kom.ru/browse/XX-2529 03.06.201	
	Если ПроведениеДокументовКлиентСервер.ВозвратПоставщику_НовыеСтатусыВДокументе(ДатаДокумента) Тогда 
		Если НЕ (Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен
			ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуНовыйНаЭкспертизу
			ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгруженНаЭкспертизу
			Или Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуСборка
			Или Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуГотовКОтправке
			Или Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуПодтвержденПоставщиком) Тогда
			Возврат ТабТоваров;
		КонецЕсли;
	//Конец Валиахметов http://jira.part-kom.ru/browse/XX-2529 03.06.201	
	Иначе
		//ХудинВВ 26022019 XX-1969
		Если ЗначениеЗаполнено(Реквизиты.АктРассмотренияВозврата) Тогда
			//ХудинВВ 26022019 XX-1983
			Если НЕ (Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен
				ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуНовыйНаЭкспертизу
				ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгруженНаЭкспертизу) Тогда
				
				
				
				Возврат ТабТоваров;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	ВидОперации = Реквизиты.ВидОперации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	&ВидДвижения,
	|	ВозвратТоваровПоставщикуТовары.Ссылка КАК Регистратор,
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Дата КАК Период,
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Склад КАК Склад,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Качество,
	|	-ВозвратТоваровПоставщикуТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабТоваров);
	ПроведениеДокументовКлиентСервер.ЗаписатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров);
	
	Возврат ТабТоваров;
	
КонецФункции

Функция РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_РегистрыНакопления_ПартииТоваров";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ТабТоваров = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", ТабТоваров);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата, ВидОперации, СтатусДокумента, АктРассмотренияВозврата, флСпособПроведения");
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПроведенияПоПартиямРезервам") Тогда
		Возврат ТабТоваров;
	КонецЕсли;
	
	Если Реквизиты.флСпособПроведения = Перечисления.СпособыПроведенияДокументов.ТолькоВзаиморасчеты Тогда
		Возврат ТабТоваров;
	КонецЕсли;
	
	//Валиахметов http://jira.part-kom.ru/browse/XX-2529 03.06.201	
	Если ПроведениеДокументовКлиентСервер.ВозвратПоставщику_НовыеСтатусыВДокументе(Реквизиты.Дата) Тогда 
		Если НЕ (Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен
			Или Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуСборка
			Или Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуГотовКОтправке
			Или Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуПодтвержденПоставщиком) Тогда
			Возврат ТабТоваров;
		КонецЕсли;	
	//Конец Валиахметов http://jira.part-kom.ru/browse/XX-2529 03.06.201	
	Иначе
		//ХудинВВ 26022019 XX-1969
		Если НЕ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен
			И ЗначениеЗаполнено(Реквизиты.АктРассмотренияВозврата) Тогда
			Возврат ТабТоваров;
		КонецЕсли;
	КонецЕсли;
	
	//Если ПараметрыСеанса.ОпределятьСтратегиюПогашенияПартийТоваровПоСкладу Тогда
	//	Запрос = Новый Запрос(
	//	"ВЫБРАТЬ
	//	|	ВозвратТоваровПоставщику.Склад.СкладVMI КАК Значение
	//	|ИЗ
	//	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	//	|ГДЕ
	//	|	ВозвратТоваровПоставщику.Ссылка = &Ссылка"
	//	);
	//	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//	ТабЗ = Запрос.Выполнить().Выгрузить();
	//	Если ТабЗ.Количество() = 0 Тогда
	//		СкладВМИ = Ложь;
	//	Иначе
	//		СкладВМИ = ТабЗ[0].Значение;
	//	КонецЕсли;
	//	
	//	Если НЕ СкладВМИ Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПроведениеДокументовКлиентСервер.ПогашениеПартийТоваров(вхСсылкаНадокумент, "ПартииТоваров", вхПараметры),ТабТоваров);
	//	КонецЕсли;
	//Иначе
	//	
	//	Если Не вхПараметры.Свойство("ДвиженияПартииТоваров", ТабТоваров) Тогда
	//		
	//		ПроведениеДокументовКлиентСервер.ПогашениеПартийТоваров(вхСсылкаНаДокумент, вхПараметры);
	//		ТабТоваров = вхПараметры.ДвиженияПартииТоваров;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	ПроведениеДокументовКлиентСервер.ЗаписатьЗначение(вхПараметры, "ТаблицаПартийТоваров", ТабТоваров);
	
	Возврат ТабТоваров;
	
КонецФункции

Функция РегистрыНакопления_Закупки(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_РегистрыНакопления_Закупки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//ТабТоваров = Новый ТаблицаЗначений;
	//Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров) Тогда
	//	ТабТоваров = РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ);
	//КонецЕсли;
	//ТабПартийТоваров = Новый ТаблицаЗначений;
	//Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаПартийТоваров", ТабПартийТоваров) Тогда
	//	ТабПартийТоваров = РегистрыНакопления_ПартииТоваровУпр(вхСсылкаНаДокумент, вхОтказ);
	//КонецЕсли;
	//вхПериод = вхСсылкаНаДокумент.МоментВремени();
	//вхДоговорКонтрагента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ДоговорКонтрагента");
	
	ТабЗакупки = Новый ТаблицаЗначений;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Закупки", ТабЗакупки);
	//
	//Для Каждого Партия Из ТабПартийТоваров Цикл
	//	Закупки = ОборотыПоРегиструЗакупки(Партия.СтрокаПрихода, вхДоговорКонтрагента, вхПериод);
	//	Если Закупки.Количество() > 0  Тогда
	//		нс = ТабЗакупки.Добавить();
	//		нс.Период = вхПериод.Дата;
	//		нс.Регистратор = вхСсылкаНаДокумент;
	//		нс.ЕдиницаИзмерения = Партия.ЕдиницаИзмерения;
	//		нс.ДоговорКонтрагента = вхДоговорКонтрагента;
	//		нс.ТорговаяТочка = Закупки[0].ТорговаяТочка;
	//		нс.СтрокаПрихода = Закупки[0].СтрокаПрихода;
	//		нс.Количество = Партия.Количество;
	//		нс.СуммаРегл = Окр(Партия.Количество * Закупки[0].СуммаРегл / Закупки[0].Количество, 2);
	//		нс.СуммаУпр = Окр(Партия.Количество * Закупки[0].СуммаУпр / Закупки[0].Количество, 2);
	//					
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Возврат ТабЗакупки;
	
КонецФункции

Функция РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_РегистрыНакопления_Взаиморасчеты";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	табВзаиморасчеты = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", табВзаиморасчеты);
	
	СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхСсылкаНаДокумент, 
		"ДоговорКонтрагента,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,СуммаДокумента,флСпособПроведения,Дата,СтатусДокумента,АктРассмотренияВозврата");
	
	Если СтруктураРеквизитов.Дата < ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты Тогда
		Возврат табВзаиморасчеты
	КонецЕсли;
	
	СформироватьДвижения = Истина;
		
	Если ТипЗнч(вхПараметры) = Тип("Структура") И вхПараметры.Свойство("Фильтр") 
		И ТипЗнч(вхПараметры.Фильтр) = Тип("Структура") И вхПараметры.Фильтр.Свойство("ДоговорКонтрагента") 
		И НЕ вхПараметры.Фильтр.ДоговорКонтрагента = СтруктураРеквизитов.ДоговорКонтрагента Тогда
		СформироватьДвижения = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНадокумент, "флСпособПроведения") = Перечисления.СпособыПроведенияДокументов.ТолькоТовары Тогда
		СформироватьДвижения = Ложь;
	КонецЕсли;
	
	//Валиахметов http://jira.part-kom.ru/browse/XX-2529 31.05.2019
	Если ПроведениеДокументовКлиентСервер.ВозвратПоставщику_НовыеСтатусыВДокументе(СтруктураРеквизитов.Дата) И 
		Не СтруктураРеквизитов.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуПодтвержденПоставщиком 
			//И ЗначениеЗаполнено(СтруктураРеквизитов.АктРассмотренияВозврата) 
			Тогда
			СформироватьДвижения = Ложь;
	//Конец Валиахметов http://jira.part-kom.ru/browse/XX-2529 31.05.2019
	Иначе 
		//ХудинВВ 26022019 XX-1969
		Если НЕ СтруктураРеквизитов.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен
			И ЗначениеЗаполнено(СтруктураРеквизитов.АктРассмотренияВозврата) Тогда
			
			
			СформироватьДвижения = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СформироватьДвижения Тогда
			
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(УправлениеВзаиморасчетами.ПростоеПроведениеПоВзаиморасчетам(вхСсылкаНаДокумент, СтруктураРеквизитов.ДоговорКонтрагента, ,
			СтруктураРеквизитов.ВалютаДокумента, СтруктураРеквизитов.КурсВзаиморасчетов, СтруктураРеквизитов.КратностьВзаиморасчетов, 
			СтруктураРеквизитов.СуммаДокумента, -1), табВзаиморасчеты);
			
	КонецЕсли;
		
	Возврат табВзаиморасчеты;
	
КонецФункции

//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьМетаданные()
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ПолучитьМетаданные";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	Возврат Метаданные.Документы.ВозвратТоваровПоставщику;	
КонецФункции

Функция ПолучитьРеквизитыКонтроля(вхПараметр = Неопределено) Экспорт
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ПолучитьРеквизитыКонтроля";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Результат = Новый Структура;
	Если (вхПараметр = Метаданные.ПланыОбмена.ОбменПартКом83_77) тогда
		Результат = ОбменДаннымиКлиентСервер.РеквизитыКонтроляПоДокументу(ПолучитьМетаданные(), ИсключаемыеРеквизитыКонтроляРегистрации());
	Иначе
		Результат.Вставить("Шапка", "Дата,Проведен");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИсключаемыеРеквизитыКонтроляРегистрации() Экспорт
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ИсключаемыеРеквизитыКонтроляРегистрации";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ИсключаемыеРеквизиты = ОбменДаннымиКлиентСервер.ИнициализироватьТаблицуИсключаемыхРеквизитовКонтроля();
	ОбменДаннымиКлиентСервер.ДобавитьВИсключаемыеРевизиты(ИсключаемыеРеквизиты, "Ссылка");
	
	Возврат ИсключаемыеРеквизиты;
	
КонецФункции

Функция ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр = Неопределено) Экспорт
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ПолучитьЗначенияРеквизитовКонтроля";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	Возврат	РаботаСПоследовательностямиКлиентСервер.ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр);
КонецФункции

Функция ПолучитьДанныеГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхФильтр = Неопределено) Экспорт
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ПолучитьДанныеГраницПоследовательности";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Результат = Неопределено;
	лМетаданныеПоследовательности = Неопределено;
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеГраницПоследовательности]: неправильный параметр номер 2.";	
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.Взаиморасчеты, вхФильтр);
	ИначеЕсли (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) тогда	
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.ПартииТоваров, вхФильтр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_НачатьКорректировкуГраницПоследовательности";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	РаботаСПоследовательностямиКлиентСервер.НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Процедура ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ЗакончитьКорректировкуГраницПоследовательности";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	РаботаСПоследовательностямиКлиентСервер.ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Функция ТаблицыДляРасчетаСписанияПоПартиям(вхСсылкаНаДокумент, вхФильтр = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ТаблицыДляРасчетаСписанияПоПартиям";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	УчитыватьПоставщика = Ложь;  //Для не возвратов поставщику, поставщика не учитываем
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата, СтатусДокумента, Склад, АктРассмотренияВозврата, УпрощенныйКонтрольПроведения");
	
	ДатаДокумента = Реквизиты.Дата;
	
	Если ДатаДокумента < глЗначениеПеременной("ДатаВозвратыПоставщиковСоздаютсяВ83") Тогда 
		УчитыватьПоставщика = Ложь; //Если возвраты поставщиков не создаются в 8.3, то не учитываем поставщика  
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ВозвратТоваровПоставщику.КонтрагентДляСписанияПартий = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |			ТОГДА ВозвратТоваровПоставщику.Контрагент.Организация
		               |		ИНАЧЕ ВозвратТоваровПоставщику.КонтрагентДляСписанияПартий.Организация
		               |	КОНЕЦ КАК СобственнаяОрганизация
		               |ИЗ
		               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		               |ГДЕ
		               |	ВозвратТоваровПоставщику.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			УчитыватьПоставщика = Не ЗначениеЗаполнено(Выборка.СобственнаяОрганизация); //Не учитываем поставщика партии, если поставщик - наша организация
		КонецЕсли;
		
		//{{ХудинВВ 20180618 XX-163
		Склад = Реквизиты.Склад;
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "СписаниеПартийБезКонтроляПоставщика") Тогда
			УчитыватьПоставщика = Ложь;
		КонецЕсли;
		//}}
		
	КонецЕсли;
	
	ФормироватьДвижения = Истина;
	
	//ХудинВВ 26022019 XX-1969
	Если ЗначениеЗаполнено(Реквизиты.АктРассмотренияВозврата) Тогда
		//ХудинВВ 26022019 XX-1983
		ФормироватьДвижения = Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен
			ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуНовыйНаЭкспертизу
			ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгруженНаЭкспертизу;
			
	КонецЕсли;
		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Склад КАК Склад,
	|	ВозвратТоваровПоставщикуТовары.Качество КАК Качество,
	|	ВозвратТоваровПоставщикуТовары.СтрокаПрихода КАК СтрокаПрихода,
	|	ВозвратТоваровПоставщикуТовары.СтрокаПрихода = &ПустаяСтрокаПрихода КАК ПустаяСтрокаПрихода,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.Склад.СкладVMI
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
	|	КОНЕЦ КАК СтатусПартии,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	""Cписание"" КАК ВидСписания,
	|	ЛОЖЬ КАК ОприходоватьПоVMI,
	|	ВозвратТоваровПоставщикуТовары.Ссылка.Склад.ПриРазмещенииИгнорироватьСтатусПартии КАК ИгнорироватьСтатусПартии,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.ОрганизацияДляСписанияПартий = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВозвратТоваровПоставщикуТовары.Ссылка.Организация
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Ссылка.ОрганизацияДляСписанияПартий
	|	КОНЕЦ КАК Организация,
	|	&УчитыватьПоставщика КАК УчитыватьПоставщика,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.КонтрагентДляСписанияПартий = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВозвратТоваровПоставщикуТовары.Ссылка.Контрагент
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Ссылка.КонтрагентДляСписанияПартий
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.Склад.СкладVMI
	|			ТОГДА &ВидДоговора1
	|		ИНАЧЕ &ВидДоговора2
	|	КОНЕЦ КАК ВидДоговора,
	// 18.04.19 Строганов Роман > 
	|	ВЫБОР КОГДА &УпрощенныйКонтрольПроведения = ИСТИНА 
	|			И ВозвратТоваровПоставщикуТовары.СтрокаПрихода = &ПустаяСтрокаПрихода 
	|	ТОГДА ИСТИНА 
	|	ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК УпрощенныйКонтрольПроведения,
	// 18.04.19 Строганов Роман <
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтрокиВДокументе
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|	И ВозвратТоваровПоставщикуТовары.Ссылка.флСпособПроведения <> &флСпособПроведения
	|	И &ФормироватьДвижения";
				   
	Если ТипЗнч(вхФильтр) = Тип("Структура") и вхФильтр.Свойство("Номенклатура") Тогда 
		Запрос.Текст = Запрос.Текст + " И ВозвратТоваровПоставщикуТовары.Номенклатура = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСтрокаПрихода", Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка());
	Запрос.УстановитьПараметр("флСпособПроведения", Перечисления.СпособыПроведенияДокументов.ТолькоВзаиморасчеты);
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("УчитыватьПоставщика", УчитыватьПоставщика);
	Запрос.УстановитьПараметр("ВидДоговора1", Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение);
	Запрос.УстановитьПараметр("ВидДоговора2", Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
	// 18.04.19 Строганов Роман > 
	Запрос.УстановитьПараметр("УпрощенныйКонтрольПроведения", Реквизиты.УпрощенныйКонтрольПроведения);
	// 18.04.19 Строганов Роман <
	
	Запрос.УстановитьПараметр("ФормироватьДвижения", ФормироватьДвижения);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТаблицаДляКонтроляОстатков(вхСсылкаНаДокумент) Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ТаблицаДляКонтроляОстатков";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.Ссылка.Склад КАК Склад,
	               |	Док.Номенклатура КАК Номенклатура,
	               |	Док.Качество КАК Качество,
	               |	СУММА(Док.Количество) КАК Количество
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК Док
	               |ГДЕ
	               |	Док.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Док.Ссылка.Склад,
	               |	Док.Номенклатура,
	               |	Док.Качество";
				   
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьЗаписиПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, Проведение) Экспорт 
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ПолучитьЗаписиПоследовательности";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = вхСсылкаНаДокумент.Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "СуммаДокумента, Дата, ДоговорКонтрагента");
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) тогда
		Если Проведение 
			И Реквизиты.Дата >= ПараметрыСеанса.ДатаНачалаРаботыТовары 
			И Реквизиты.Дата >= глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ВозвратТоваровПоставщикуТовары.Ссылка.Дата КАК Период,
			               |	ВозвратТоваровПоставщикуТовары.Ссылка КАК Регистратор,
			               |	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура
			               |ИЗ
			               |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
			               |ГДЕ
			               |	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
			               |	И ВозвратТоваровПоставщикуТовары.Ссылка.флСпособПроведения <> &флСпособПроведения";
			Запрос.УстановитьПараметр("флСпособПроведения", Перечисления.СпособыПроведенияДокументов.ТолькоВзаиморасчеты);
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ЗаполнитьЗначенияСвойств(лРезультат.Добавить(), Выборка); 
			КонецЦикла;
		КонецЕсли;		
	ИначеЕсли (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) Тогда 
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ВидДоговора");
		Если Проведение И (Реквизиты.СуммаДокумента <> 0) И Реквизиты.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты
			//И НЕ(ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение) 
			тогда			
			
			лСтрокаРезультат = лРезультат.Добавить();
			лСтрокаРезультат.ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента;
			лСтрокаРезультат.Период = Реквизиты.Дата;
			лСтрокаРезультат.Регистратор = вхСсылкаНаДокумент;
		КонецЕсли;
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
	Возврат Результат;
	
КонецФункции

//Семенов И.П. 17.01.2019(
Процедура УправляемаяБлокировкаТоварыНаСкладах(вхСсылкаНаДокумент)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_УправляемаяБлокировкаТоварыНаСкладах";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.Склад,
	               |	ВозвратТоваровПоставщикуТовары.Качество
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	               |ГДЕ
	               |	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.Склад,
	               |	ВозвратТоваровПоставщикуТовары.Качество";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);

	РезультатЗапроса = Запрос.Выполнить();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.РезервыТоваров");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ТоварыНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
	
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

Процедура УправляемаяБлокировкаПартииТоваров(вхСсылкаНаДокумент)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_УправляемаяБлокировкаПартииТоваров";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
		
	БлокировкаДанных = Новый БлокировкаДанных;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.Склад,
	               |	ВозвратТоваровПоставщикуТовары.Качество
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	               |ГДЕ
	               |	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.Склад,
	               |	ВозвратТоваровПоставщикуТовары.Качество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	               |ГДЕ
	               |	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Результаты = Запрос.ВыполнитьПакет();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ПартииТоваров");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Результаты[0];
	
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("Последовательность.ПартионныйУчет");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Результаты[1];
	
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	БлокировкаДанных.Заблокировать();

КонецПроцедуры

Процедура УправляемаяБлокировкаВзаиморасчеты(вхСсылкаНаДокумент)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_УправляемаяБлокировкаВзаиморасчеты";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагента");
		
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.Взаиморасчеты");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("Последовательность.ПоРасчетамСКонтрагентами");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры
//)Семенов И.П.

//ХудинВВ XX-2468 20052019
Функция ОпределитьВидОперации(Дата, Контрагент, СпособПроведения, ТекущийВидОперации = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ОпределитьВидОперации";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Если ТекущийВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.МФП Тогда
		
		ВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.МФП;
		
	Иначе
		
		ВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.ОбратнаяРеализация;
		
		Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(Контрагент) Тогда
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ГоловнойКонтрагент.ДатаНачалаРаботыСКоррСчФактурами, ГоловнойКонтрагент.флРаботает_сКоррСФ");
			
			Если Дата < Дата(2019,1,1) Тогда
				ВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.ВозвратПоставщику;
			ИначеЕсли Реквизиты.ГоловнойКонтрагентфлРаботает_сКоррСФ = Истина
				И Дата >= Реквизиты.ГоловнойКонтрагентДатаНачалаРаботыСКоррСчФактурами 
				И СпособПроведения <> Перечисления.СпособыПроведенияДокументов.ТолькоТовары Тогда
				ВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.КорректировочныйСчетФактура;
			Иначе
				ВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.ОбратнаяРеализация;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат ВидОперации;
	
КонецФункции


//Выгрузка при обмене
Функция ВыгрузитьЭлементы(вхТаблицаСсылокНаОбъекты, вхПланОбмена) Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ВыгрузитьЭлементы";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Для Каждого СтрокаОб Из вхТаблицаСсылокНаОбъекты Цикл 
		ЗаполнитьСтрокиЗаявок(СтрокаОб.Ссылка);
	КонецЦикла;
	
	Результат = Новый Массив;
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[ВыгрузитьЭлементы]: неправильный параметр номер 2.";
	КонецЕсли;
	
	Если лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog Тогда
		
		РеквизитыМаршрутаКлиентскогоВозврата =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Справочники.МаршрутыДоставки.КлиентскийВозвратПоставщику, "Код, Наименование");

		лМенеджерПланаОбмена = ПланыОбмена[лМетаданныеПланаОбмена.Имя];
		
		лЗапрос = Новый Запрос;
		лЗапрос.УстановитьПараметр("ТаблицаСсылок", вхТаблицаСсылокНаОбъекты);
		лЗапрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	&ТаблицаСсылок КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваров.Регистратор,
		|	ПартииТоваров.НомерСтрокиВДокументе,
		|	МАКСИМУМ(ПартииТоваров.СтрокаПрихода) КАК СтрокаПрихода
		|ПОМЕСТИТЬ втПартии
		|ИЗ
		|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
		|ГДЕ
		|	ПартииТоваров.Регистратор В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И ПартииТоваров.СтрокаПрихода.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
		|	И ПартииТоваров.СтрокаПрихода.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваров.Регистратор,
		|	ПартииТоваров.НомерСтрокиВДокументе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПартии.Регистратор,
		|	втПартии.НомерСтрокиВДокументе,
		|	втПартии.СтрокаПрихода.НомерГТД.Код КАК ГТД,
		|	втПартии.СтрокаПрихода.СтранаПроисхождения.Код КАК СтранаКод,
		|	втПартии.СтрокаПрихода.СтранаПроисхождения.Наименование КАК СтранаНаименование
		|ПОМЕСТИТЬ втДанныеПартий
		|ИЗ
		|	втПартии КАК втПартии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВозвратТоваровПоставщику.АктРассмотренияВозврата = ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|			ТОГДА ""ВозвратТоваровПоставщику""
		|		ИНАЧЕ ""ВозвратТоваровКлиентаПоставщику""
		|	КОНЕЦ КАК ВидДокумента,
		|   isnull(ВозвратТоваровПоставщику.АктРассмотренияВозврата.Штрихкод, """") КАК Штрихкод, 
		|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
		|	ВозвратТоваровПоставщику.ВидОперации,
		|	ВозвратТоваровПоставщику.Номер,
		|	ВозвратТоваровПоставщику.Дата,
		|	ВозвратТоваровПоставщику.ДокументОснование,
		|	ВозвратТоваровПоставщику.ДокументОснование.ВидОперацииПоступления КАК ВидОперацииПоступления,
		|	ВозвратТоваровПоставщикуТовары.СтрокаПрихода.Приход КАК Приход,
		|	ВозвратТоваровПоставщику.Склад.ФизическийСклад КАК Склад,
		|	ЕСТЬNULL(ВозвратТоваровПоставщику.ТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК Контрагент,
		|	ВозвратТоваровПоставщику.Организация КАК Организация,
		|	ВозвратТоваровПоставщикуТовары.НомерСтроки,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул,
		|	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.СтрокаЗаявки.IDSite, """") КАК SSID,
		|	ЛОЖЬ КАК КроссСток,
		|	ВЫБОР
		|		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СозданИзАкта
		|			ТОГДА ВозвратТоваровПоставщикуТовары.КоличествоБрак + ВозвратТоваровПоставщикуТовары.КоличествоИзлишек - ВозвратТоваровПоставщикуТовары.КоличествоВозвращено
		|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество
		|	КОНЕЦ КАК Количество,
		|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка) КАК Клиент,
		|	"""" КАК КлиентНаименование,
		|	ЛОЖЬ КАК ЭтоЮридическоеЛицо,
		|	ЕСТЬNULL(ВозвратТоваровПоставщику.ТорговаяТочка.Город, ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка)) КАК Город,
		|	ЕСТЬNULL(ВозвратТоваровПоставщику.ТорговаяТочка.Город.Наименование, """") КАК ГородНаименование,
		|	ЕСТЬNULL(ВозвратТоваровПоставщику.ТорговаяТочка.МаршрутДоставки.Код, """") КАК МаршрутДоставкиКод,
		|	ЕСТЬNULL(ВозвратТоваровПоставщику.ТорговаяТочка.МаршрутДоставки.Наименование, """") КАК МаршрутДоставкиНаименование,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладПолучатель,
		|	ЕСТЬNULL(втДанныеПартий.ГТД, """") КАК ГТД,
		|	ЕСТЬNULL(втДанныеПартий.СтранаКод, """") КАК СтранаКод,
		|	ЕСТЬNULL(втДанныеПартий.СтранаНаименование, """") КАК СтранаНаименование
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеПартий КАК втДанныеПартий
		|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = втДанныеПартий.Регистратор
		|			И ВозвратТоваровПоставщикуТовары.НомерСтроки = втДанныеПартий.НомерСтрокиВДокументе
		|ГДЕ
		|	ВозвратТоваровПоставщику.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И ВозвратТоваровПоставщикуТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И ВозвратТоваровПоставщику.Склад.ОбменСTopLog
		|	И ВЫБОР
		|			КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СозданИзАкта
		|				ТОГДА ВозвратТоваровПоставщикуТовары.КоличествоБрак + ВозвратТоваровПоставщикуТовары.КоличествоИзлишек - ВозвратТоваровПоставщикуТовары.КоличествоВозвращено
		|			ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество
		|		КОНЕЦ > 0
		|ИТОГИ ПО
		|	Ссылка";
		           
		лРезультат = лЗапрос.Выполнить();
		
		Если НЕ лРезультат.Пустой() Тогда
			лТипОбъектаXDTO = ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаОтгрузку");
			лВыборка = лРезультат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
			
			Пока лВыборка.Следующий() Цикл
								
				лОбъект = ФабрикаXDTO.Создать(лТипОбъектаXDTO);
				
				ЗаполнитьЗначенияСвойств(лОбъект, лВыборка, "Номер,Дата,Штрихкод");
				лОбъект.ДатаОтгрузки = лВыборка.Дата + 3*24*60*60;	
				лОбъект.СуммаДокумента = 0;
				лОбъект.ВидДокумента = лВыборка.ВидДокумента;
				лОбъект.Ссылка = XMLСтрока(лВыборка.Ссылка);
				лОбъект.СкладСсылка = XMLСтрока(лВыборка.Склад);
				лОбъект.КонтрагентСсылка = XMLСтрока(лВыборка.Контрагент);
				лОбъект.ОрганизацияСсылка = XMLСтрока(лВыборка.Организация);
				лОбъект.ТипДоставки = "";
				лОбъект.СкладПолучательСсылка = XMLСтрока(лВыборка.СкладПолучатель);

				ДокументОснованиеСсылка = лВыборка.ДокументОснование;
				
				ОбменДаннымиКлиентСервер.ДополнитьДаннымиПоПечати(лОбъект, лВыборка.Ссылка);
				
				Если лОбъект.ВидДокумента = "ВозвратТоваровКлиентаПоставщику" Тогда
					лОбъект.МаршрутДоставкиКод = РеквизитыМаршрутаКлиентскогоВозврата.Код;
					лОбъект.МаршрутДоставкиСФ = РеквизитыМаршрутаКлиентскогоВозврата.Наименование;
				Иначе
					лОбъект.МаршрутДоставкиКод = лВыборка.МаршрутДоставкиКод;
				КонецЕсли;
				
				
				лТовары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаОтгрузку.Товары"));
				лТоварыСписок = лТовары.ПолучитьСписок("СтрокаТовары");
				
				ВыборкаПоТоварам = лВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоТоварам.Следующий() Цикл
					НоваяСтрока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), лТоварыСписок.ВладеющееСвойство.Тип.Имя)); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам, 
					"НоменклатураНаименование,НоменклатураАртикул,SSID,КроссСток,Количество,КлиентНаименование,ЭтоЮридическоеЛицо,Цена,ГТД,СтранаКод,СтранаНаименование");
					НоваяСтрока.НоменклатураСсылка = XMLСтрока(ВыборкаПоТоварам.Номенклатура);
					НоваяСтрока.КлиентСсылка = XMLСтрока(ВыборкаПоТоварам.Клиент);
					//НоваяСтрока.ГородСсылка = XMLСтрока(ВыборкаПоТоварам.Город);
					//НоваяСтрока.МаршрутДоставкиСсылка = XMLСтрока(ВыборкаПоТоварам.МаршрутДоставки);
					//НоваяСтрока.Цена = ВыборкаПоТоварам.Цена;
					//НоваяСтрока.ГТД = "";
					//НоваяСтрока.СтранаКод = "";
					//НоваяСтрока.СтранаНаименование = "";
					лТоварыСписок.Добавить(НоваяСтрока);
					
					
					//ХудинВВ 21052019 XX-2528
					Если ВыборкаПоТоварам.НомерСтроки = 1 Тогда
						Если лВыборка.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда
							//В топлоге нет зачета товаров vmi, там есть только поступления vmi, берем его из строки прихода
							ДокументОснованиеСсылка = ВыборкаПоТоварам.Приход;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				лОбъект.ДокументОснованиеСсылка = ?(ЗначениеЗаполнено(ДокументОснованиеСсылка), XMLСтрока(ДокументОснованиеСсылка), "");
				
				лОбъект.Товары = лТовары;
				Результат.Добавить(лОбъект);
				//Семенов И.П. 07.02.2019 XX-1768(
				ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(лВыборка.Ссылка, лОбъект);
				//)Семенов И.П
				// Помечаем объект как выгруженный
				ДокОб = лВыборка.Ссылка.ПолучитьОбъект();
				ДокОб.ВыгруженВТопЛог = Истина;
				ДокОб.ДополнительныеСвойства.Вставить("НеРегистрироватьВОбменСТоплог");
				ДокОб.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета");
				ДокОб.Записать(РежимЗаписиДокумента.Запись);
			КонецЦикла;
		КонецЕсли;
	//Семенов И.П. 05.06.2019 XX-2537(
	ИначеЕсли лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщика Тогда
		ВыгрузитьДокументыДляОкнаПоставщика(вхТаблицаСсылокНаОбъекты, Результат);
	//)Семенов И.П.
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Семенов И.П. 05.06.2019 XX-2537(
Процедура ВыгрузитьДокументыДляОкнаПоставщика(вхТаблицаСсылокНаОбъекты, Результат)
	
	Запрос = ПолучитьЗапросДляВыгрузкиВОкноПоставщика(вхТаблицаСсылокНаОбъекты);	
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	URIПространстваИмен = ПланыОбмена.ОбменПартКом83_ОкноПоставщика.URIПространстваИмен();
	
	ТипДокумент		= ФабрикаXDTO.Тип(URIПространстваИмен, "Документы.ВозвратТоваровПоставщику");
	ТипТовары       = ФабрикаXDTO.Тип(URIПространстваИмен, "Документы.ВозвратТоваровПоставщику.Товары");
	ТипСтрокиТовары	= ФабрикаXDTO.Тип(URIПространстваИмен, "Документы.ВозвратТоваровПоставщику.Товары.Строка");
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		ОбъектДокумент    = ФабрикаXDTO.Создать(ТипДокумент);
		ОбъектТЧТовары    = ФабрикаXDTO.Создать(ТипТовары);
		ОбъектСписокСтрок = ОбъектТЧТовары.ПолучитьСписок("item");
		
		ЗаполнитьЗначенияСвойств(ОбъектДокумент, ВыборкаДокумент);
		ОбъектДокумент.return_uuid   = ВыборкаДокумент.Ссылка.УникальныйИдентификатор();
		ОбъектДокумент.supplier_uuid = ВыборкаДокумент.Контрагент.УникальныйИдентификатор();   
	   	Если ЗначениеЗаполнено(ВыборкаДокумент.НомерОснования)
		   И ЗначениеЗаполнено(ВыборкаДокумент.ДатаОснования) Тогда 
			ОбъектДокумент.base_doc = "№"+ВыборкаДокумент.НомерОснования+" от "+ВыборкаДокумент.ДатаОснования;
		КонецЕсли;
		
		Выборка = ВыборкаДокумент.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбъектСтрокаТовары = ФабрикаXDTO.Создать(ТипСтрокиТовары);
			
			ЗаполнитьЗначенияСвойств(ОбъектСтрокаТовары, Выборка);
			ОбъектСтрокаТовары.product_uuid = Выборка.Номенклатура.УникальныйИдентификатор();
			
			ОбъектСписокСтрок.Добавить(ОбъектСтрокаТовары);
			
		КонецЦикла;
		
		ОбъектДокумент.items = ОбъектТЧТовары;
		Результат.Добавить(ОбъектДокумент);
		
		ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(ВыборкаДокумент.Ссылка, ОбъектДокумент);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗапросДляВыгрузкиВОкноПоставщика(вхТаблицаСсылокНаОбъекты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСсылок.Ссылка
	               |ПОМЕСТИТЬ Объекты
	               |ИЗ
	               |	&ТаблицаСсылок КАК ТаблицаСсылок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(СчетФактураВыданныйДокументыОснования.Ссылка) КАК Ссылка,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	               |ПОМЕСТИТЬ СчетаФатуры
	               |ИЗ
	               |	Объекты КАК Объекты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ПО Объекты.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СведенияОПроверкеДокументовСрезПоследних.Объект КАК Объект,
	               |	МАКСИМУМ(СведенияОПроверкеДокументовСрезПоследних.ПризнакПроверен) КАК ПризнакПроверен
	               |ПОМЕСТИТЬ ПризнакиПроверки
	               |ИЗ
	               |	РегистрСведений.СведенияОПроверкеДокументов.СрезПоследних(
	               |			,
	               |			Объект В
	               |				(ВЫБРАТЬ
	               |					Объекты.Ссылка
	               |				ИЗ
	               |					Объекты КАК Объекты)) КАК СведенияОПроверкеДокументовСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СведенияОПроверкеДокументовСрезПоследних.Объект
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Объект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВозвратТоваровПоставщикуТовары.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратПоставщику.ОбратнаяРеализация)
	               |				И НЕ СчетаФатуры.Ссылка ЕСТЬ NULL
	               |			ТОГДА СчетаФатуры.Ссылка.Номер
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Ссылка.Номер
	               |	КОНЕЦ КАК number,
	               |	ВЫБОР
	               |		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВозвратПоставщику.ОбратнаяРеализация)
	               |				И НЕ СчетаФатуры.Ссылка ЕСТЬ NULL
	               |			ТОГДА СчетаФатуры.Ссылка.Дата
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Ссылка.Дата
	               |	КОНЕЦ КАК date_return,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.Контрагент КАК Контрагент,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.Контрагент.Код КАК supplier_code,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.Организация КАК Организация,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.Организация.Наименование КАК buyer,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.Организация.ИНН КАК buyer_inn,
	               |	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровПоставщикуТовары.Ссылка.ВидОперации) КАК operation,
	               |	ВЫБОР
	               |		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.УчитыватьНДС = ИСТИНА
	               |				И ВозвратТоваровПоставщикуТовары.Ссылка.СуммаВключаетНДС = ЛОЖЬ
	               |			ТОГДА ВозвратТоваровПоставщикуТовары.Сумма + ВозвратТоваровПоставщикуТовары.СуммаНДС
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Сумма
	               |	КОНЕЦ КАК doc_sum,
	               |	ЕСТЬNULL(ПризнакиПроверки.ПризнакПроверен, ЛОЖЬ) КАК partkom_checked,
	               |	ВЫБОР
	               |		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровПоставщикуПодтвержденПоставщиком)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК supplier_confirm,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.КоррСФНомер КАК adjustment_invoce_number,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.КоррСФДата КАК adjustment_invoce_date,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование.НомерВходящегоДокумента КАК НомерОснования,
	               |	ВозвратТоваровПоставщикуТовары.Ссылка.ДокументОснование.ДатаВходящегоДокумента КАК ДатаОснования,
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура,
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование КАК product_name,
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК articul,
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК product_code,
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура.Изготовитель.Наименование КАК brand,
	               |	ВЫБОР
	               |		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровПоставщикуНовый)
	               |			ТОГДА ВозвратТоваровПоставщикуТовары.КолНач
	               |		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен)
	               |			ТОГДА ВозвратТоваровПоставщикуТовары.КоличествоВозвращено
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество
	               |	КОНЕЦ КАК amount,
	               |	ВозвратТоваровПоставщикуТовары.Цена КАК price,
	               |	ВозвратТоваровПоставщикуТовары.Сумма КАК cost,
	               |	ВЫБОР
	               |		КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	               |				ИЛИ ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	               |			ТОГДА 20
	               |		КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |				ИЛИ ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	               |			ТОГДА 18
	               |		КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |				ИЛИ ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	               |			ТОГДА 18
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК tax_rate,
	               |	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК tax
	               |ИЗ
	               |	Объекты КАК Объекты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	               |		ПО Объекты.Ссылка = ВозвратТоваровПоставщикуТовары.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФатуры КАК СчетаФатуры
	               |		ПО Объекты.Ссылка = СчетаФатуры.ДокументОснование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПризнакиПроверки КАК ПризнакиПроверки
	               |		ПО Объекты.Ссылка = ПризнакиПроверки.Объект
	               |ИТОГИ
	               |	МАКСИМУМ(number),
	               |	МАКСИМУМ(date_return),
	               |	МАКСИМУМ(Контрагент),
	               |	МАКСИМУМ(supplier_code),
	               |	МАКСИМУМ(Организация),
	               |	МАКСИМУМ(buyer),
	               |	МАКСИМУМ(buyer_inn),
	               |	МАКСИМУМ(operation),
	               |	СУММА(doc_sum),
	               |	МАКСИМУМ(partkom_checked),
	               |	МАКСИМУМ(supplier_confirm),
	               |	МАКСИМУМ(adjustment_invoce_number),
	               |	МАКСИМУМ(adjustment_invoce_date),
	               |	МАКСИМУМ(НомерОснования),
	               |	МАКСИМУМ(ДатаОснования),
	               |	СУММА(tax)
	               |ПО
	               |	Ссылка";
	Запрос.УстановитьПараметр("ТаблицаСсылок", вхТаблицаСсылокНаОбъекты);
	
	Возврат Запрос;
	
КонецФункции
//)Семенов И.П.

Процедура ЗагрузитьЭлемент(ОбъектXDTO, вхОтправитель, Отказ, вхПараметры = Неопределено, СтруктураОтчета = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ЗагрузитьЭлемент";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	лМетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(вхОтправитель));
	Если (лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog
		Или лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog_РТУ) Тогда 
		Если ОбъектXDTO.Тип().Имя = "РезультатСборки" Тогда 
			Попытка
				ЗагрузитьРезультатСборки(ОбъектXDTO, вхПараметры, СтруктураОтчета);
			Исключение
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
				СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ЗаказСсылка);
				СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ВозвратТоваровПоставщику");
				СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
				СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
				СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
				СтруктураОшибки.Вставить("НомерПотока", ?(лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 0, 1));
				ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
				
				//Семенов И.П. 06.02.2019 XX-1768(
				ДокументСсылка = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
				ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(ДокументСсылка, ОбъектXDTO, , Истина, СтруктураОшибки.СообщениеОбОшибке);
				//)Семенов И.П.
				
				// 25.03.19 Строганов Роман > 
				ОбменДаннымиКлиентСервер.ЗафиксироватьРезультатВСтруктуреОтчета(СтруктураОтчета, ДокументСсылка, Истина, Истина, СтруктураОшибки.СообщениеОбОшибке);
				// 25.03.19 Строганов Роман <
				
				//ХудинВВ 26022018 XX-1969
				РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокументСсылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки: "+ОписаниеОшибки(), , Ложь, СтруктураОшибки.НомерПотока); 

			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьРезультатСборкиСтарое(ОбъектXDTO)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ЗагрузитьРезультатСборкиСтарое";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	ДокСсылка = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
	
	Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
		ВызватьИсключение "Не найдена возврат товаров поставщику с guid = " + ОбъектXDTO.ЗаказСсылка;
	КонецЕсли;
	
	ТоварыXDTO = ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	
	МассивSSID = Новый Массив;
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) Тогда 
			МассивSSID.Добавить(СтрокаТовары.SSID);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки,
	                |	ИдентификаторыСтрокЗаявок.IDSite КАК SSID
	                |ИЗ
	                |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                |ГДЕ
	                |	ИдентификаторыСтрокЗаявок.IDSite В(&МассивSSID)";
	Запрос.УстановитьПараметр("МассивSSID", МассивSSID);
	
	СоотвSSID = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СоотвSSID.Вставить(Выборка.SSID, Выборка.СтрокаЗаявки);	
	КонецЦикла;
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	Товары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	//Товары.Колонки.Добавить("План", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	Товары.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
		НоваяСтрока.СтрокаЗаявки = СоотвSSID[СтрокаТовары.SSID];
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) И Не ЗначениеЗаполнено(НоваяСтрока.СтрокаЗаявки) Тогда 
			ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары, "Факт");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Ссылка
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.Ссылка = &Ссылка
	               |	И НЕ ВозвратТоваровПоставщику.ПометкаУдаления
	               |	И ВозвратТоваровПоставщику.Проведен";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);			   
	НужноМенятьШапку = Запрос.Выполнить().Пустой();
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ВозвратТоваровПоставщикуТовары.Номенклатура,
	              |	ВозвратТоваровПоставщикуТовары.СтрокаЗаявки,
	              |	ВозвратТоваровПоставщикуТовары.КоличествоБрак + ВозвратТоваровПоставщикуТовары.КоличествоИзлишек - ВозвратТоваровПоставщикуТовары.КоличествоВозвращено КАК Факт
	              |ИЗ
	              |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	              |ГДЕ
	              |	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);			  
	ТоварыДокумента = Запрос.Выполнить().Выгрузить();
	
	Дельта = Неопределено;
	НужноМенятьТЧ = Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(ТоварыДокумента, Товары, Дельта, "Факт");
	Если НужноМенятьШапку Или НужноМенятьТЧ Тогда 
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Для Каждого СтрокаДельты Из Дельта Цикл 
			Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура,СтрокаЗаявки", СтрокаДельты.Номенклатура, СтрокаДельты.СтрокаЗаявки));	
			КоличествоРаспределить = - СтрокаДельты.Факт;
			Индекс = 0;
			Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
				СтрокаТЧ = Строки.Получить(Индекс);
				Факт = Мин(КоличествоРаспределить, СтрокаТЧ.КоличествоБрак + СтрокаТЧ.КоличествоИзлишек - СтрокаТЧ.КоличествоВозвращено);
				
				//Уменьшаем сначала излишек
				Если СтрокаТЧ.КоличествоИзлишек - СтрокаТЧ.КоличествоВозвращено > 0 Тогда 
					СписываемоеКоличествоИзлишек = Мин(СтрокаТЧ.КоличествоИзлишек - СтрокаТЧ.КоличествоВозвращено, Факт);
					СтрокаТЧ.КоличествоИзлишек = СтрокаТЧ.КоличествоИзлишек - СписываемоеКоличествоИзлишек;
					Факт = Факт - СписываемоеКоличествоИзлишек;
					КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличествоИзлишек;
					УчтенныйВозврат = СтрокаТЧ.КоличествоВозвращено;
				Иначе
					УчтенныйВозврат = СтрокаТЧ.КоличествоИзлишек;
				КонецЕсли;
				
				Если Факт > 0 Тогда 
					//Списываем брак
					СписываемоеКоличествоБрак = Мин(СтрокаТЧ.КоличествоБрак - (СтрокаТЧ.КоличествоВозвращено - УчтенныйВозврат), Факт);
					
					СтрокаТЧ.КоличествоБрак = СтрокаТЧ.КоличествоБрак - СписываемоеКоличествоБрак;
					СтрокаТЧ.Количество = СтрокаТЧ.Количество - СписываемоеКоличествоБрак;
					
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ДокОбъект);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокОбъект);
					
					КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличествоБрак;
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		
		ДокОбъект.ПометкаУдаления = Ложь;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатСборки(ОбъектXDTO, ДопПараметры = Неопределено, СтруктураОтчета = Неопределено)
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ЗагрузитьРезультатСборки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	ДокСсылка = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
	
	Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
		ВызватьИсключение "Не найдена возврат товаров поставщику с guid = " + ОбъектXDTO.ЗаказСсылка;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "ОбновленИзТопЛог") Тогда 
		Возврат;
	КонецЕсли;
	
	ТоварыXDTO = ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	Товары.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары, "Факт");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Ссылка
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.Ссылка = &Ссылка
	               |	И НЕ ВозвратТоваровПоставщику.ПометкаУдаления
	               |	И ВозвратТоваровПоставщику.Проведен
	               |	И ВозвратТоваровПоставщику.ОбновленИзТопЛог";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);			   
	НужноМенятьШапку = Запрос.Выполнить().Пустой();
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ВозвратТоваровПоставщикуТовары.Номенклатура,
	              |	ВЫБОР
	              |		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СозданИзАкта
	              |			ТОГДА ВозвратТоваровПоставщикуТовары.КоличествоБрак + ВозвратТоваровПоставщикуТовары.КоличествоИзлишек - ВозвратТоваровПоставщикуТовары.КоличествоВозвращено
	              |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество
	              |	КОНЕЦ КАК Факт
	              |ИЗ
	              |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	              |ГДЕ
	              |	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	              |	И ВЫБОР
	              |			КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СозданИзАкта
	              |				ТОГДА ВозвратТоваровПоставщикуТовары.КоличествоБрак + ВозвратТоваровПоставщикуТовары.КоличествоИзлишек - ВозвратТоваровПоставщикуТовары.КоличествоВозвращено
	              |			ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество
	              |		КОНЕЦ > 0";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);			  
	ТоварыДокумента = Запрос.Выполнить().Выгрузить();
	
	Дельта = Неопределено;
	НужноМенятьТЧ = Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(ТоварыДокумента, Товары, Дельта, "Факт");
	Если НужноМенятьШапку Или НужноМенятьТЧ Тогда 
		СозданИзАкта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "СозданИзАкта");
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Если НужноМенятьТЧ Тогда 
			Для Каждого СтрокаДельты Из Дельта Цикл 
				Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДельты.Номенклатура));	
				Индекс = 0;
				Если СтрокаДельты.Факт < 0 Тогда  
					КоличествоРаспределить = - СтрокаДельты.Факт;
					Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
						СтрокаТЧ = Строки.Получить(Индекс);
						Если СозданИзАкта Тогда 
							Факт = Мин(КоличествоРаспределить, СтрокаТЧ.КоличествоБрак + СтрокаТЧ.КоличествоИзлишек - СтрокаТЧ.КоличествоВозвращено);
							//Уменьшаем сначала излишек
							Если СтрокаТЧ.КоличествоИзлишек - СтрокаТЧ.КоличествоВозвращено > 0 Тогда 
								СписываемоеКоличествоИзлишек = Мин(СтрокаТЧ.КоличествоИзлишек - СтрокаТЧ.КоличествоВозвращено, Факт);
								СтрокаТЧ.КоличествоИзлишек = СтрокаТЧ.КоличествоИзлишек - СписываемоеКоличествоИзлишек;
								Факт = Факт - СписываемоеКоличествоИзлишек;
								КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличествоИзлишек;
								УчтенныйВозврат = СтрокаТЧ.КоличествоВозвращено;
							Иначе
								УчтенныйВозврат = СтрокаТЧ.КоличествоИзлишек;
							КонецЕсли;
							
							Если Факт > 0 Тогда 
								//Списываем брак
								СписываемоеКоличествоБрак = Мин(СтрокаТЧ.КоличествоБрак - (СтрокаТЧ.КоличествоВозвращено - УчтенныйВозврат), Факт);
								
								СтрокаТЧ.КоличествоБрак = СтрокаТЧ.КоличествоБрак - СписываемоеКоличествоБрак;
								СтрокаТЧ.Количество = СтрокаТЧ.Количество - СписываемоеКоличествоБрак;
								
								ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ДокОбъект);
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокОбъект);
								
								КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличествоБрак;
							КонецЕсли;
						Иначе
							Факт = Мин(КоличествоРаспределить, СтрокаТЧ.Количество);
							СтрокаТЧ.Количество = СтрокаТЧ.Количество - Факт;
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ДокОбъект);
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокОбъект);
							
							КоличествоРаспределить = КоличествоРаспределить - Факт;
						КонецЕсли;
						
						Индекс = Индекс + 1;
					КонецЦикла;
				Иначе
					КоличествоРаспределить = СтрокаДельты.Факт;
					Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
						СтрокаТЧ = Строки.Получить(Индекс);
						Если СозданИзАкта Тогда 
							Если СтрокаТЧ.КоличествоБрак > 0 Тогда 
								СтрокаТЧ.КоличествоБрак = СтрокаТЧ.КоличествоБрак + КоличествоРаспределить;
								СтрокаТЧ.Количество = СтрокаТЧ.КоличествоБрак + СтрокаТЧ.КоличествоНедостача - СтрокаТЧ.КоличествоВозвращено;
								ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ДокОбъект);
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокОбъект);
							Иначе
								СтрокаТЧ.КоличествоИзлишек = СтрокаТЧ.КоличествоИзлишек + КоличествоРаспределить;
							КонецЕсли;
							КоличествоРаспределить = 0;
						Иначе
							СтрокаТЧ.Количество = СтрокаТЧ.Количество + КоличествоРаспределить;
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ДокОбъект);
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокОбъект);
							КоличествоРаспределить = 0;
						КонецЕсли;
						Индекс = Индекс + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДокОбъект.ОбновленИзТопЛог = Истина;
		ДокОбъект.ПометкаУдаления = Ложь;
		ДокОбъект.ДополнительныеСвойства.Вставить("ОтключитьКонтрольОстатков");
		
		//Валиахметов http://jira.part-kom.ru/browse/XX-2529 03.06.201	
		Если ПроведениеДокументовКлиентСервер.ВозвратПоставщику_НовыеСтатусыВДокументе(ДокОбъект.Дата) Тогда 
			Если ДокОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.ОбратнаяРеализация 
				Или ДокОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.КорректировочныйСчетФактура И 
				ЗначениеЗаполнено(ДокОбъект.КоррСФНомер) И ЗначениеЗаполнено(ДокОбъект.КоррСФДата) Тогда 
				ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуПодтвержденПоставщиком;
			Иначе	
				ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен;
			КонецЕсли;
		//Конец Валиахметов http://jira.part-kom.ru/browse/XX-2529 03.06.201	
		Иначе
			//ХудинВВ 26022019 XX-1969
			Если ЗначениеЗаполнено(ДокОбъект.АктРассмотренияВозврата) Тогда
				Если  ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуНовый Тогда
					ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен;
				ИначеЕсли ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуНовыйНаЭкспертизу Тогда
					ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгруженНаЭкспертизу;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//Семенов И.П. 06.02.2019 XX-1768(
		ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(ДокОбъект.Ссылка, ОбъектXDTO);
		//)Семенов И.П.
		
		// 25.03.19 Строганов Роман > 
		ОбменДаннымиКлиентСервер.ЗафиксироватьРезультатВСтруктуреОтчета(СтруктураОтчета, ДокОбъект.Ссылка, Истина, Ложь);
		// 25.03.19 Строганов Роман <
		
		//ХудинВВ 26022018 XX-1969
		НомерСообщения = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерСообщения);
		НомерПотока = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерПотока);
		РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь, НомерПотока); 

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиЗаявок(вхСсылкаНаДокумент) Экспорт 
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ЗаполнитьСтрокиЗаявок";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	               |	ВозвратТоваровПоставщикуТовары.НомерСтроки
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	               |ГДЕ
	               |	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	               |	И ВозвратТоваровПоставщикуТовары.СтрокаЗаявки = &ПустаяСтрокаЗаявки";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ДокОбъект = вхСсылкаНаДокумент.ПолучитьОбъект();
	Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("СтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка()));
	
	Для Каждого СтрокаТЧ Из Строки Цикл 
		СтрокаТЧ.СтрокаЗаявки = ОбщегоНазначенияКлиентСервер.ВиртуальнаяСтрокаЗаявки();
	КонецЦикла;
	
	ДокОбъект.Записать();
	
КонецПроцедуры

Процедура ЗарегистрироватьВОбменСТопЛог(вхОбъект) Экспорт 
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_ЗарегистрироватьВОбменСТопЛог";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Строки = вхОбъект.Товары.НайтиСтроки(Новый Структура("СтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка()));
	Если Строки.Количество() > 0 Тогда 
		Для Каждого СтрокаТЧ Из Строки Цикл 
			СтрокаТЧ.СтрокаЗаявки = ОбщегоНазначенияКлиентСервер.ВиртуальнаяСтрокаЗаявки();
		КонецЦикла;
		Сообщить("Созданы виртуальные строки заявок");
	КонецЕсли;
	
	вхОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//Узел = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 3);
	//
	//Если ЗначениеЗаполнено(Узел) Тогда 
	//	ПланыОбмена.ЗарегистрироватьИзменения(Узел, вхОбъект.Ссылка);
	//	Сообщить("Документ зарегистрирован в обмене с Топ Лог");
	//Иначе
	//	Сообщить("Не найден узел обмена для выгрузки в Топ Лог");
	//КонецЕсли;
	
КонецПроцедуры

//Валиахметов http://jira.part-kom.ru/browse/XX-2529 03.06.2019
Функция МассивРабочихСтатусов() Экспорт 
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульМенеджера_МассивРабочихСтатусов";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	
	Массив = Новый Массив;
	Массив.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуНовый);
	Массив.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуСборка);
	Массив.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуГотовКОтправке);
	Массив.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен);
	Массив.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуПодтвержденПоставщиком);
	
	Возврат Массив;
	
КонецФункции
//Конец Валиахметов http://jira.part-kom.ru/browse/XX-2529 03.06.2019
