Перем мВалютаРегламентированногоУчета Экспорт;
Перем мМенеджерОбъекта;

// +++ Карпычев (14.2.18)

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаПоставщику()
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПечатьВозвратаПоставщику";
	лЗамена = АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено; 
		Выполнить(лЗамена); 
		Возврат АлгоритмыЗначениеВозврата; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////"

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		Номенклатура,
	|		ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|	)
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Возврат поставщику");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Сумма    = 0;
	СуммаНДС = 0;
	Ном      = 0;

	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар);
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьВозвратаПоставщику()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12(Макет = Неопределено)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПечатьТОРГ12";
	лЗамена = АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено; 
		Выполнить(лЗамена); 
		Возврат АлгоритмыЗначениеВозврата; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////"

	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("УчитыватьНДС", УчетНДСПовтИсп.УчитыватьНДСПоВариантуУчета(Организация.ВариантУчетаНДС, ДоговорКонтрагента.ВидОплаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	|	ВозвратТоваровПоставщику.Номер КАК НомерДокумента,
	|	ВозвратТоваровПоставщику.Организация КАК Руководители,
	|	ВозвратТоваровПоставщику.Организация КАК Организация,
	|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА ВозвратТоваровПоставщику.Контрагент
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА ВозвратТоваровПоставщику.Организация
	|		ИНАЧЕ ВозвратТоваровПоставщику.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВозвратТоваровПоставщику.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ВозвратТоваровПоставщику.Контрагент КАК Плательщик,
	|	ВозвратТоваровПоставщику.Контрагент.Код КАК КодКлиента,
	|	NULL КАК Сделка,
	|	NULL КАК СделкаНомер,
	|	NULL КАК СделкаДата,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента.Представление КАК Основание,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ВедениеВзаиморасчетовПоДокументам,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	NULL КАК Подразделение,
	|	ВозвратТоваровПоставщику.ВалютаДокумента,
	|	&УчитыватьНДС КАК УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.Комментарий
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО (ОтветственныеЛица.СтруктурнаяЕдиница = ВозвратТоваровПоставщику.Склад)
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", ЭтотОбъект.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", ЭтотОбъект.КратностьВзаиморасчетов);

	Иначе

		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);

	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВложенныйЗапрос.Номенклатура.Изготовитель.Наименование КАК ТоварПроизводительНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                КАК Цена,
	|	ВложенныйЗапрос.Количество          КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест      КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма               КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка               КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		ВозвратТоваровПоставщику.Номенклатура,
	|		ВозвратТоваровПоставщику.Коэффициент,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения.Коэффициент     КАК КоэффициентМест,
	|		ВозвратТоваровПоставщику.СтавкаНДС,
	|		ВозвратТоваровПоставщику.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(ВозвратТоваровПоставщику.Количество)                    КАК Количество,
	|		СУММА(ВозвратТоваровПоставщику.Количество)                    КАК КоличествоМест,
	|		СУММА(ВозвратТоваровПоставщику.Сумма    * &Курс / &Кратность) КАК Сумма,
	|		СУММА(ВозвратТоваровПоставщику.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		МИНИМУМ(ВозвратТоваровПоставщику.НомерСтроки)                 КАК НомерСтроки,
	|		0                                                             КАК Метка
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		ВозвратТоваровПоставщику.Номенклатура,
	|		ВозвратТоваровПоставщику.Коэффициент,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения,
	|		ВозвратТоваровПоставщику.СтавкаНДС,
	|		ВозвратТоваровПоставщику.Цена
	|
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ТолькоПросмотр          = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	
	// +++ Карпычев (14.02.18)
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_ТОРГ12";
	//Макет = ПолучитьОбщийМакет("ТОРГ12");
	ПечатьИзВнешнейОбработки = Макет <> Неопределено;
	Если НЕ ПечатьИзВнешнейОбработки Тогда
		Если Контрагент.ИНН = "6167131724" Тогда   // - для контрагента "Партторг ООО, г. Лыткарино б/н" печатаем типовую форму ТОРГ-12 без дополнительных подписей в разделе Груз принял/Груз получил (Карпычев 21.11.16)
			Макет = ПолучитьОбщийМакет("ТОРГ12_типовая");
		Иначе	
			Макет = ПолучитьОбщийМакет("ТОРГ12");
		КонецЕсли;
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("КодКлиента");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("НомДок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ШК");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	// --- Карпычев (14.02.18)

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация,      Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);

	Попытка
		ОбластьМакета.Параметры.СопроводительныеДокументы      = Шапка.Комментарий;
	Исключение
	КонецПопытки;	
	Если Шапка.ВедениеВзаиморасчетовПоДокументам Тогда
		ОбластьМакета.Параметры.Основание      = Шапка.Основание;
		ОбластьМакета.Параметры.ОснованиеНомер = Шапка.ОснованиеНомер;
		ОбластьМакета.Параметры.ОснованиеДата  = Шапка.ОснованиеДата;
	Иначе
		Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
			ОбластьМакета.Параметры.Основание      = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.Сделка, Строка(Шапка.Сделка.Метаданные().Синоним));
			ОбластьМакета.Параметры.ОснованиеНомер = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка.Сделка);
			ОбластьМакета.Параметры.ОснованиеДата  = Шапка.СделкаДата;
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ДатаДокумента  = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг""");

	Если Шапка.Организация = Шапка.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;

	ОбластьМакета.Параметры.Подразделение                = Шапка.Подразделение;
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.АдресДоставки                = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
	ОбластьМакета.Параметры.ПредставлениеПоставщика      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакета.Параметры.ПредставлениеПлательщика     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
	ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПоставщикПоОКПО  = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакета);

	НомерСтраницы   = 1;

	КоличествоСтрок = ЗапросТовары.Количество();

	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;

	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСуммаСНДС   = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	Ном              = 0;

	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
		//ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		ОбластьМакета.Параметры.ТоварНаименование = ?(ПустаяСтрока(ВыборкаСтрок.ТоварАртикул), "", ВыборкаСтрок.ТоварАртикул + " || ") + ВыборкаСтрок.ТоварНаименование + ?(ПустаяСтрока(ВыборкаСтрок.ТоварПроизводительНаименование), "", " || " + ВыборкаСтрок.ТоварПроизводительНаименование);

		СуммаСНДС = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);

		МассаБрутто = 0;
		
		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);

		Количество  = ВыборкаСтрок.Количество;
		СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС - СуммаНДС;

		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;

		Если Шапка.СуммаВключаетНДС Тогда
			ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		Иначе
			ОбластьМакета.Параметры.Цена = ВыборкаСтрок.Цена;
		КонецЕсли;
		
		Если Ном = 1 Тогда // первая срока
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;		
			
			Если Ном <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// очистим итоги по странице
				ИтогоМассаБруттоНаСтранице = 0;
				ИтогоМестНаСтранице        = 0;
				ИтогоКоличествоНаСтранице  = 0;
				ИтогоСуммаНаСтранице       = 0;
				ИтогоНДСНаСтранице         = 0;
				ИтогоСуммаСНДСНаСтранице   = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
	ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
	ОбластьМакета.Параметры.ФИОГлавБухгалтера     = Бухгалтер;
	ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
	ФамилияИмяОтчествоФизЛица                     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
	ФамилияИмяОтчествоКладовщика                  = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ОбластьМакета.Параметры.ФИОКладовщика         = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоКладовщика);
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень     = """"+Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1)+"""";
	ОбластьМакета.Параметры.ДатаДокументаМесяц    = Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1);
	ОбластьМакета.Параметры.ДатаДокументаГод      = Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель);

	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
	КонецЕсли;

	Если ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;
	
	// +++ Карпычев (14.02.18)
	ПоследняяЦифра = Прав(Строка(НомерСтраницы), 1);
	Суффикс = ?(ПоследняяЦифра = "1", " листе", " листах"); 
	ОбластьМакета.Параметры.КоличествоЛистовВПриложении = Строка(НомерСтраницы) + Суффикс;
	// --- Карпычев (14.02.18)

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12()

// Функция формирует табличный документ с печатной формой универсального передаточного документа
//
// Возвращаемое значение:
//  Табличный документ - печатная форма универсального передаточного документа
//
Функция ПечатьУниверсальногоПередаточногоДокумента()
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПечатьУниверсальногоПередаточногоДокумента";
	лЗамена = АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено; 
		Выполнить(лЗамена); 
		Возврат АлгоритмыЗначениеВозврата; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////"
	Если Лев(Номер,1)="D" Тогда 
		Сообщить("Данный документ создан в 1с7, печатать его нужно оттуда!");
		Отказ=Истина;
		Возврат Неопределено;
	ИначеЕсли Лев(Номер,1)="У" Тогда
		Если НЕ НастройкаПравДоступа.ПолучитьЗначениеПраваПользователя(УправлениеПользователями.ОпределитьТекущегоПользователя(), ПланыВидовХарактеристик.ПраваПользователей.ПечатьНеПроведенногоВозвратаПоставщику) Тогда
			ДокСФ  = 	 УчетНДС.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный");
			Если ДокСФ=Неопределено И УчетНДСПовтИсп.УчитыватьНДСПоВариантуУчета(Организация.ВариантУчетаНДС, ДоговорКонтрагента.ВидОплаты) Тогда 
				Сообщить("В документе не указана СФ. Печать УПД невозможна!");
				Отказ=Истина;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДокументСсылка",    				Ссылка);
	Если ЭтотОбъект.Проведен Тогда 
		ДанныеДокумента.Вставить("Номер",             				Номер);
	Иначе 	
		ДанныеДокумента.Вставить("Номер",             				"");
	КонецЕсли;	
	ДанныеДокумента.Вставить("Дата",              				Дата);
	ДанныеДокумента.Вставить("Ссылка", 			  				Документы.СчетФактураВыданный.ПустаяСсылка());
	ДанныеДокумента.Вставить("ДокументОснование", 				?(ЗначениеЗаполнено(ДокументОснование), ДокументОснование, Ссылка));
	ДанныеДокумента.Вставить("Организация",   	  				Организация);
	ДанныеДокумента.Вставить("Контрагент", 		  				Контрагент);
	ДанныеДокумента.Вставить("ДоговорКонтрагента", 		  		ДоговорКонтрагента);
	ДанныеДокумента.Вставить("Руководитель", 	  				Неопределено);
	ДанныеДокумента.Вставить("ГлавныйБухгалтер",  				Неопределено);
	ДанныеДокумента.Вставить("ВалютаРегламентированногоУчета",  мВалютаРегламентированногоУчета);
	ДанныеДокумента.Вставить("Подразделение", 	  				Склад.Подразделение);

	СчетФактураТребуется = ЛОжь;//УчетНДС.ОпределитьСчетФактураТребуется(ЭтотОбъект);
	
	СтруктураОтбораСчетаФактуры = Новый Структура;
	СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
	
	Возврат УчетНДС.ПечатьУниверсальногоПередаточногоДокумента(ДанныеДокумента, СчетФактураТребуется, СтруктураОтбораСчетаФактуры);

КонецФункции // ПечатьУниверсальногоПередаточногоДокумента

	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_Печать";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) И НЕ НастройкаПравДоступа.ПолучитьЗначениеПраваПользователя(УправлениеПользователями.ОпределитьТекущегоПользователя(), ПланыВидовХарактеристик.ПраваПользователей.ПечатьНеПроведенногоВозвратаПоставщику) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если НЕ флСпособПроведения=Перечисления.СпособыПроведенияДокументов.ТолькоТовары Тогда 
		Если ИмяМакета = "Накладная"  Тогда
			ТабДокумент = ПечатьВозвратаПоставщику();
		ИначеЕсли ИмяМакета = "ТОРГ12" тогда
			ТабДокумент = ПечатьТОРГ12();
		ИначеЕсли ИмяМакета = "УниверсальныйПередаточныйДокумент" Тогда
			ТабДокумент = ПечатьУниверсальногоПередаточногоДокумента();
		КонецЕсли;
	КонецЕсли;
	Если ИмяМакета = "СчетНаОплату" Тогда	
		ТабДокумент = ПечатьСчетаНаОплату();	
    КонецЕсли;
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка,ИмяМакета);

КонецПроцедуры // Печать()
	
#КонецЕсли

// --- Карпычев (14.02.18)

// +++ Карпычев (14.02.18)
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПолучитьСтруктуруПечатныхФорм";
	лЗамена = АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено; 
		Выполнить(лЗамена); 
		Возврат АлгоритмыЗначениеВозврата; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////"

	СтруктураМакетов = Новый Структура;
	Если НЕ флСпособПроведения=Перечисления.СпособыПроведенияДокументов.ТолькоТовары Тогда 
		СтруктураМакетов.Вставить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ (УПД)");
	КонецЕсли;	
	СтруктураМакетов.Вставить("СчетНаОплату"                     , "Счет на оплату");
	//СтруктураМакетов.Вставить("Накладная", "Возврат поставщику");
	//СтруктураМакетов.Вставить("ТОРГ12", "ТОРГ-12 (Товарная накладная)");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ПечатьСчетаНаОплату(Макет = Неопределено) Экспорт
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПечатьСчетаНаОплату";
	лЗамена = АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено; 
		Выполнить(лЗамена); 
		Возврат АлгоритмыЗначениеВозврата; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////"
	
	ПараметрыПечати = ПолучитьПараметрыПечатиСчетаЗаказа();
	
	ТабДокумент  = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Портрет;
	ТабДокумент.КоличествоЭкземпляров   = 1;
	ТабДокумент.ТолькоПросмотр          = Истина;
	
	ПечатьИзВнешнейОбработки = Макет <> Неопределено;
	Если НЕ ПечатьИзВнешнейОбработки Тогда
		Макет = ПолучитьОбщийМакет("СчетНаОплату");
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	Если ПараметрыПечати.Свойство("Основание") Тогда
		
		Если Контрагент <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ГоловнойКонтрагент") Тогда
			ДоговорИсточник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ГоловнойКонтрагент.ОсновнойДоговорКонтрагента");
		Иначе
			ДоговорИсточник = ДоговорКонтрагента;
		КонецЕсли;
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорИсточник, "ДоговорНаОферту, Номер, Дата, ДатаДоговораОферты");
		
		Если ЗначениеЗаполнено(ДоговорИсточник) И РеквизитыДоговора.ДоговорНаОферту Тогда 
			ТекстОснования = "Оферта №"+РеквизитыДоговора.Номер+" от "+Формат(РеквизитыДоговора.ДатаДоговораОферты, "ДФ=dd.MM.yyyy")+"г.";
		Иначе
			ТекстОснования = "Договор купли продажи №"+РеквизитыДоговора.Номер+" от "+Формат(РеквизитыДоговора.Дата, "ДФ=dd.MM.yyyy")+"г.";
		КонецЕсли;
		
		ПараметрыПечати.Основание = ТекстОснования;
		
	КонецЕсли;
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакетаШапкатаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакетаШапкатаблицы);
	
	КоличествоСтрок = ПараметрыПечати.Позиции.Количество();
	
	// - Выводим строки таблицы
	ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
	Для Каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл 

		ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// - Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// - Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаШапкатаблицы);
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	// Выводим итоги
	ОбластьМакета  = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);	
	
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	//Голубев 20190325 вернулись к печати логотипов в печатных формах
	ОбластьМакетаРеклама = Макет.ПолучитьОбласть("Реклама");
	ТабДокумент.Вывести(ОбластьМакетаРеклама);
	
	Возврат ТабДокумент;
	
КонецФункции  // ПечатьСчетаНаОплату()  (Карпычев 31.01.18) 	

Функция ПолучитьПараметрыПечатиСчетаЗаказа() Экспорт
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПолучитьПараметрыПечатиСчетаЗаказа";
	лЗамена = АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено; 
		Выполнить(лЗамена); 
		Возврат АлгоритмыЗначениеВозврата; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////"
	
	ПараметрыПечати = Новый Структура;
	Позиции = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",    ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номер,
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента.Номер КАК ДоговорКонтрагентаНомер,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента.Дата КАК ДоговорКонтрагентаДата,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Контрагент КАК Получатель,
	|	ВозвратТоваровПоставщику.Контрагент.Код КАК КодКлиента,
	|	ВозвратТоваровПоставщику.Организация КАК Руководители,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	ВозвратТоваровПоставщику.СуммаДокумента,
	|	ВозвратТоваровПоставщику.ВалютаДокумента,
	|	ВозвратТоваровПоставщику.УчитыватьНДС КАК УчитыватьНДС,
	|	ВозвратТоваровПоставщику.Организация.УчитыватьНДС КАК УчитыватьНДС_,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФизЛицо
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("УчитыватьНДС"   , Шапка.УчитыватьНДС);
	
	УниверсальныеМеханизмы.ОпределитьКурсыДокументаДляПечати(ЭтотОбъект, Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК ТоварНаименованиеКраткое,
	|	"""" КАК ТоварКод,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК ТоварАртикул,
	|	ВложенныйЗапрос.Номенклатура.Изготовитель.Наименование КАК ТоварПроизводительНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ВидУпаковки,
	|	1 КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0
	|			ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА НЕ ВложенныйЗапрос.ЦенаСоСкидкой = 0
	|			ТОГДА ВложенныйЗапрос.ЦенаСоСкидкой
	|		ИНАЧЕ ВложенныйЗапрос.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ПроцентСкидкиНаценки = 0
	|				И ВложенныйЗапрос.ПроцентАвтоматическихСкидок = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка КАК Метка,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки + ВложенныйЗапрос.ПроцентАвтоматическихСкидок КАК Скидка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВозвратТоваровПоставщику.Номенклатура КАК Номенклатура,
	|		ВозвратТоваровПоставщику.Коэффициент КАК Коэффициент,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения КАК ЕдиницаИзмеренияМест,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения.Коэффициент КАК КоэффициентМест,
	|		NULL КАК Характеристика,
	|		NULL КАК Серия,
	|		ВЫБОР
	|			КОГДА &УчитыватьНДС
	|				ТОГДА ВозвратТоваровПоставщику.СтавкаНДС
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОНЕЦ КАК СтавкаНДС,
	|		ВозвратТоваровПоставщику.Цена * &Курс / &Кратность КАК Цена,
	|		0 КАК ПроцентСкидкиНаценки,
	|		0 КАК ПроцентАвтоматическихСкидок,
	|		СУММА(ВозвратТоваровПоставщику.Количество) КАК Количество,
	|		СУММА(ВозвратТоваровПоставщику.Количество) КАК КоличествоМест,
	|		СУММА(ВозвратТоваровПоставщику.Сумма * &Курс / &Кратность) КАК Сумма,
	|		СУММА(ВЫБОР
	|				КОГДА &УчитыватьНДС
	|					ТОГДА ВозвратТоваровПоставщику.СуммаНДС * &Курс / &Кратность
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаНДС,
	|		МИНИМУМ(ВозвратТоваровПоставщику.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка,
	|		ВозвратТоваровПоставщику.Цена * &Курс / &Кратность КАК ЦенаСоСкидкой
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|		И ВозвратТоваровПоставщику.Количество > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВозвратТоваровПоставщику.Номенклатура,
	|		ВозвратТоваровПоставщику.Коэффициент,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения,
	|		ВозвратТоваровПоставщику.СтавкаНДС,
	|		ВозвратТоваровПоставщику.Цена,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения.Коэффициент,
	|		ВозвратТоваровПоставщику.Цена,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения) КАК ВложенныйЗапрос";
	
	// +++ Карпычев (02.03.18)
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ВозвратТоваровОтПокупателя");
	
	
	// --- Карпычев (02.03.18)
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
	ПараметрыПечати.Вставить("УчитыватьНДС", Шапка.УчитыватьНДС);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	ПараметрыПечати.Вставить("ИНН", СведенияОПоставщике.ИНН);
	ПараметрыПечати.Вставить("КПП", СведенияОПоставщике.КПП);
	ПредставлениеПоставщикаДляПлатПоручения = "";
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		Банк       = БанковскийСчетОрганизации.Банк;//?(Не ЗначениеЗаполнено(БанковскийСчетОрганизации.БанкДляРасчетов), БанковскийСчетОрганизации.Банк, БанковскийСчетОрганизации.БанкДляРасчетов);
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
	ИначеЕсли ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет) Тогда 
		Банк       = Организация.ОсновнойБанковскийСчет.Банк;
		НомерСчета = Организация.ОсновнойБанковскийСчет.НомерСчета;
	Иначе 	
		Банк       = СведенияОПоставщике.Банк;
		НомерСчета = СведенияОПоставщике.НомерСчета;
	КонецЕсли;	
	БИК        = Банк.Код;
	КоррСчет   = Банк.КоррСчет;
	ГородБанка = Банк.Город;
	
	ПараметрыПечати.Вставить("Покупатель", Шапка.Получатель);
	ПараметрыПечати.Вставить("Поставщик", Шапка.Поставщик);
	Попытка
		Дог="";
		Если НЕ ЗначениеЗаполнено(Шапка.Получатель.ГоловнойКонтрагент) Тогда 
			Если Шапка.ДоговорКонтрагента.ДоговорНаОферту Тогда 
				Дог="Оферта №"+Шапка.ДоговорКонтрагента.НомерЗаявкиОферты+" от "+Шапка.ДоговорКонтрагента.ДатаДоговораОферты;
			Иначе
				Дог="договор купли продажи №"+Шапка.ДоговорКонтрагента.Номер+" от "+Шапка.ДоговорКонтрагента.Дата;
			КонецЕсли;
		Иначе
			Догт=Шапка.Получатель.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента;
			Если Догт.ДоговорНаОферту Тогда 
				Дог="Оферта №"+Догт.НомерЗаявкиОферты+" от "+Догт.ДатаДоговораОферты;
			Иначе
				Дог="договор купли продажи №"+Догт.Номер+" от "+Догт.Дата;
			КонецЕсли;
		КонецЕсли;	
	Исключение
		Дог=Строка(Шапка.ДоговорКонтрагента) + ?(ПустаяСтрока(Шапка.ДоговорКонтрагентаНомер), "", " " + Шапка.ДоговорКонтрагентаНомер + " от " + Формат(Шапка.ДоговорКонтрагентаДата, "ДФ='дд.ММ.гггг'") + " г.");
	КонецПопытки;
	ПараметрыПечати.Вставить("Основание", Дог);
	ПараметрыПечати.Вставить("ДоговорКонтрагента", Шапка.ДоговорКонтрагента);
	ПараметрыПечати.Вставить("БИКБанкаПолучателя", БИК);
	ПараметрыПечати.Вставить("БанкПолучателя", Банк);
	ПараметрыПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Банк) + " " + ГородБанка);
	ПараметрыПечати.Вставить("СчетБанкаПолучателя", КоррСчет);
	ПараметрыПечати.Вставить("СчетБанкаПолучателяПредставление", КоррСчет);
	ПараметрыПечати.Вставить("СчетПолучателяПредставление", НомерСчета);
	ПараметрыПечати.Вставить("СчетПолучателя", НомерСчета);
	ПредставлениеПоставщикаДляПлатПоручения = БанковскийСчетОрганизации.ТекстКорреспондента;
	Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
		ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	КонецЕсли;
	ПараметрыПечати.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
	//ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату"));
	ПараметрыПечати.Вставить("ТекстЗаголовка", "Счет на оплату № " + ПреобразоватьНомерДокумента(ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка)) + " от " + Формат(Шапка.Дата, "ДФ='дд ММММ гггг'") + " г.");
	ПараметрыПечати.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПараметрыПечати.Вставить("ПредставлениеПолучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));

	ПараметрыПечати.Вставить("ЕстьСкидки", Ложь);
	ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для Каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		
		ПараметрыПозиции = Новый Структура;

		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
		ПараметрыПозиции.Вставить("НомерСтроки", ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ПараметрыПозиции.Вставить("ТоварАртикул", ВыборкаСтрокТовары.ТоварАртикул);
		КонецЕсли;

		Если ВыборкаСтрокТовары.Номенклатура.Услуга Тогда 
			ВыборкаСтрокТовары.ТоварНаименование = ВыборкаСтрокТовары.Номенклатура.Наименование;
			ВыборкаСтрокТовары.ТоварНаименованиеКраткое = ВыборкаСтрокТовары.Номенклатура.Наименование;
			ВыборкаСтрокТовары.БазоваяЕдиницаКодПоОКЕИ = "--";
			ВыборкаСтрокТовары.ЕдиницаИзмерения = "--";
			ВыборкаСтрокТовары.БазоваяЕдиницаНаименование = "--";
		КонецЕсли;	
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТовары.Цена);
		ПараметрыПозиции.Вставить("ТоварПроизводительНаименование", СокрП(ВыборкаСтрокТовары.ТоварПроизводительНаименование));
		Если НЕ ПустаяСтрока(СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)) Тогда
			ПараметрыПозиции.Вставить("Товар", СокрЛП(ВыборкаСтрокТовары.ТоварНаименование));
		Иначе
			ПараметрыПозиции.Вставить("Товар", СокрЛП(ВыборкаСтрокТовары.ТоварНаименованиеКраткое));
		КонецЕсли;

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);

		Если ПараметрыПечати.ЕстьСкидки Тогда
			ПараметрыПозиции.Вставить("Скидка", Скидка);
			ПараметрыПозиции.Вставить("СуммаБезСкидки", ВыборкаСтрокТовары.Сумма + Скидка);
		КонецЕсли;

		ПараметрыПозиции.Вставить("Сумма", ВыборкаСтрокТовары.Сумма); 
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
		
		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	// Вывести Итого
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ПараметрыПечати.Вставить("ВсегоСкидок", ВсегоСкидок);
		ПараметрыПечати.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
	КонецЕсли;
	ПараметрыПечати.Вставить("Всего", ОбщегоНазначения.ФорматСумм(Сумма));

	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ПараметрыПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
		ПараметрыПечати.Вставить("ВсегоНДС", ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС")));
	КонецЕсли;

	// Вывести Сумму прописью
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ПараметрыПечати.Вставить("ИтоговаяСтрока", "Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
	ПараметрыПечати.Вставить("СуммаПрописью", ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));

	// Вывести подписи
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	ПараметрыПечати.Вставить("ФИОРуководителя", "/" + Руководитель  + "/");
	ПараметрыПечати.Вставить("ФИОБухгалтера", "/" + Бухгалтер     + "/");
	ПараметрыПечати.Вставить("ФИООтветственный", "/" + ПараметрыСеанса.ТекущийПользователь + "/");
	
	ПараметрыПечати.Вставить("КодКлиента", "ID клиента: " + Шапка.КодКлиента);

	Возврат ПараметрыПечати;
	
КонецФункции  // --- ПечатьСчетаНаОплату()   (Карпычев 31.01.18)		

Функция ПреобразоватьНомерДокумента(ИсходнаяСтрока)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПреобразоватьНомерДокумента";
	лЗамена = АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено; 
		Выполнить(лЗамена); 
		Возврат АлгоритмыЗначениеВозврата; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////"
	
	КонечнаяСтрока = "";
	Для й = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, й, 1);
		Если Найти("0123456789", ТекущийСимвол) > 0 Тогда
			КонечнаяСтрока = КонечнаяСтрока + ТекущийСимвол; 
		КонецЕсли;	
	КонецЦикла;
	
	// - удаление ведущих нулей
	Пока Лев(КонечнаяСтрока, 1) = "0" Цикл
		КонечнаяСтрока = Сред(КонечнаяСтрока, 2);
	КонецЦикла;
	
	Возврат КонечнаяСтрока;	
	
КонецФункции // --- Карпычев (02.02.18)

Функция ПолучитьЗаписиПоследовательности(вхПоследовательность) Экспорт
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПолучитьЗаписиПоследовательности";
	лЗамена = АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено; 
		Выполнить(лЗамена); 
		Возврат АлгоритмыЗначениеВозврата; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////"
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лЭтоОтменаПроведения = Ложь;
	лРежимЗаписи = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи", лРежимЗаписи) тогда
		лЭтоОтменаПроведения = (лРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		
		Если НЕ лЭтоОтменаПроведения И (ЭтотОбъект.СуммаДокумента <> 0) И ЭтотОбъект.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты
			И НЕ(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотОбъект.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение) тогда			
			
			лСтрокаРезультат = лРезультат.Добавить();
			лСтрокаРезультат.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
			лСтрокаРезультат.Период = ЭтотОбъект.Дата;
			лСтрокаРезультат.Регистратор = ЭтотОбъект.Ссылка;
		КонецЕсли;
		
		Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
		
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ОбработкаПроведения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////

	
	ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("НовыеЗначения",
	Новый Соответствие);
	ЭтотОбъект.ДополнительныеСвойства.Контроль.НовыеЗначения.Вставить(
	Метаданные.Последовательности.ПоРасчетамСКонтрагентами, 
	мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(ЭтотОбъект.Ссылка,
	Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
		
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	
	Если ДополнительныеСвойства.Свойство("ОтключитьКонтрольОстатков") Тогда 
		лПараметры.Вставить("ОтключитьКонтрольОстатков");
	КонецЕсли;
	
	//Валиахметов 05.04.2019 http://jira.part-kom.ru/browse/XX-1966  Оптимизация процесса перемещения
	Если ДополнительныеСвойства.Свойство("Перепровести") Тогда 
		лПараметры.Вставить("Перепровести");
	КонецЕсли;
	//Конец Валиахметов 05.04.2019 http://jira.part-kom.ru/browse/XX-1966  Оптимизация процесса перемещения
	
	мМенеджерОбъекта.ВыполнитьПроведение(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;
	
	// ЛНА, Замер  APDEX ++(
	Попытка		
		APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ВозвратТоваровПоставщику_Проведение", "Кол-во строк: "+Товары.Количество(), , Ссылка);
	Исключение
	КонецПопытки;
	//)--

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ОбработкаУдаленияПроведения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьОтменуПроведения(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПередЗаписью";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если ПометкаУдаления И Проведен Тогда 
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;  //Для обмена из 7ки в 8ку
	КонецЕсли;
	
	// ЛНА, Замер  APDEX ++(
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда		
		APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ВозвратТоваровПоставщику_Проведение");		
	КонецЕсли;
	//)--
	
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияПриСдвигеДаты(ЭтотОбъект, РежимЗаписи, "ТоварыНаСкладах");
	//ЗаполнитьСтрокиЗаявок(РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(ТорговаяТочка) Тогда
		//ТорговаяТочка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент, "ОсновнаяТорговаяТочка");
		ТорговаяТочка = Контрагент.ОсновнаяТорговаяТочка;
	КонецЕсли;
	
	// ЛНА http://jira.part-kom.ru/browse/XX-1841 --(
	лТребуемаяСтавкаНДС = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.ОбратнаяРеализация Тогда
		лТребуемаяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Контрагент.флРаботает_сКоррСФ Тогда
		Если ЗначениеЗаполнено(ДокументОснование)
			И ДокументОснование.Товары.Количество() Тогда
			
			лТребуемаяСтавкаНДС = ДокументОснование.Товары[0].СтавкаНДС;
		КонецЕсли;
	Иначе
		лТребуемаяСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
	//)--
	
	
	Для Каждого Товар Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Товар.ЕдиницаИзмерения) Тогда
			Товар.ЕдиницаИзмерения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Товар.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(лТребуемаяСтавкаНДС) 
			И Не Товар.СтавкаНДС = лТребуемаяСтавкаНДС Тогда // ЛНА http://jira.part-kom.ru/browse/XX-1841
			Товар.СтавкаНДС = лТребуемаяСтавкаНДС;
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Товар, ЭтотОбъект);
		КонецЕсли;			
	КонецЦикла;
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
		
	//ЭтотОбъект.ДополнительныеСвойства.Очистить();
	ЭтотОбъект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если СуммаВключаетНДС Тогда
		СуммаДокумента = Товары.Итог("Сумма");
	Иначе
		СуммаДокумента = Товары.Итог("Сумма") + Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	Для Каждого Товар Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Товар.Качество) Тогда
			Товар.Качество = Справочники.Качество.Новый;
		КонецЕсли;
		
	КонецЦикла;
	
	Если (РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения) тогда
		ЭтотОбъект.ДополнительныеСвойства.Вставить("Контроль", Новый Структура);
		Если НЕ ЭтоНовый() тогда
			ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("СтарыеЗначения", Новый Соответствие);
			ЭтотОбъект.ДополнительныеСвойства.Контроль.СтарыеЗначения.Вставить(
			Метаданные.Последовательности.ПоРасчетамСКонтрагентами, мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(
			ЭтотОбъект.Ссылка, Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
		КонецЕсли;
	КонецЕсли;
	//Если Лев(Номер,1)="D" Тогда 
	//	Сообщить("Документ создан в 1с7. В 1с8 его менять запрещено. Все изменения в 1с8 нужно так же выполнить и в 1с!");
	//	Если Не (РольДоступна("полныеПрава") Или РольДоступна("Склад")) Тогда 
	//		Отказ=Истина;
	//		Возврат;
	//	КонецЕсли;	
	//КонецЕсли;	
	
	//ПроверитьОрганизациюДляСписанияПартийПередЗаписью(Отказ, РежимЗаписи, РежимПроведения);
	
	//ЗапретВыбораОснованияПТУДляКоррСчФактур(Отказ);
	
	//ХудинВВ 26022019 XX-1969
	Если НЕ ЗначениеЗаполнено(АктРассмотренияВозврата) Тогда
		 //Для возвратов поставщику без акта возвратов от клиента, статусы не используются
		 //Очистим статус, чтобы он не смущал никого
		 СтатусДокумента = Справочники.СтатусыДокументов.ПустаяСсылка();	
	КонецЕсли;
	
	//ХудинВВ 26022019 XX-1969
	Если ЗначениеЗаполнено(АктРассмотренияВозврата) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ГДЕ
		|	ВозвратТоваровПоставщику.АктРассмотренияВозврата = &АктРассмотренияВозврата
		|	И ВозвратТоваровПоставщику.Ссылка <> &Ссылка";
		
		Запрос.УстановитьПараметр("АктРассмотренияВозврата", АктРассмотренияВозврата);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		//По одному акту нельзя вводить несколько возвратов
		Если Выборка.Количество() > 0 Тогда
			Отказ = Истина;
			ВызватьИсключение "По документу """+АктРассмотренияВозврата+""" уже создан документ возврата поставщику!";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтатусДокумента) Тогда
			СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуНовый;
		КонецЕсли;
		
		//Нужно ли?
		//Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//	Если Не Склад.Возвраты Тогда
		//		Отказ = Истина;
		//		ВызватьИсключение "Возвраты по актам могут отгружаться только со складов возврата!";
		//	КонецЕсли;
		//КонецЕсли;

	КонецЕсли;

	//Семенов И.П. 18.03.2019 XX-2073(
	Если Не Отказ 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		РегистрыСведений.РегистрацияОбъектовДляВыгрузкиВБухгалтерию.Зарегистрировать(ЭтотОбъект);
	КонецЕсли;
	//)Семенов И.П.
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ОбработкаЗаполнения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ЗаполнитьШапкуПоПоступлению(ДанныеЗаполнения);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Количество,
		|	Товары.Количество КАК КолНач,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.Коэффициент,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС,
		|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество,
		|	Товары.СтрокаПрихода
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), Товары);
		
		// НП 21.05.2019 Горохов П.Е. http://jira.part-kom.ru/browse/XX-2469 
		Если ДанныеЗаполнения.Склад.СкладVMI Тогда
			флСпособПроведения = Перечисления.СпособыПроведенияДокументов.ТолькоТовары;
		Иначе
			флСпособПроведения = Перечисления.СпособыПроведенияДокументов.Обычное;
		КонецЕсли;
		// КП 21.05.2019 Горохов П.Е. http://jira.part-kom.ru/browse/XX-2469

		СуммаДокумента = Товары.Итог("Сумма");	
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		СозданИзАкта = Ложь;
		
		//ХудинВВ XX-2468 20052019
		ВидОперации = Документы.ВозвратТоваровПоставщику.ОпределитьВидОперации(ТекущаяДата(), Контрагент, флСпособПроведения, ВидОперации);
		
		СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуНовый;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АктРассмотренияВозврата") Тогда
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "КодВозврата, ДокументПродажи");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктРассмотренияВозвратаТовары.НомерСтроки,
		|	АктРассмотренияВозвратаТовары.Номенклатура,
		|	АктРассмотренияВозвратаТовары.Качество,
		|	АктРассмотренияВозвратаТовары.КоличествоРазмещено КАК КолНач,
		|	АктРассмотренияВозвратаТовары.КоличествоРазмещено КАК Количество,
		|	ВЫБОР
		|		КОГДА АктРассмотренияВозвратаТовары.ЦенаПоставщикуПослеУценки = 0
		|			ТОГДА АктРассмотренияВозвратаТовары.Цена
		|		ИНАЧЕ АктРассмотренияВозвратаТовары.ЦенаПоставщикуПослеУценки
		|	КОНЕЦ КАК Цена,
		|	АктРассмотренияВозвратаТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	АктРассмотренияВозвратаТовары.СтрокаПрихода,
		|	АктРассмотренияВозвратаТовары.СтрокаЗаявки,
		|	АктРассмотренияВозвратаТовары.СтрокаПрихода.Приход КАК Приход,
		|	АктРассмотренияВозвратаТовары.Коэффициент,
		|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения
		|ИЗ
		|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
		|ГДЕ
		|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
		|	И АктРассмотренияВозвратаТовары.КоличествоРазмещено > 0";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НомерСтроки = 1 Тогда
				
				Если ЗначениеЗаполнено(Выборка.Приход)
					И ТипЗнч(Выборка.Приход) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ЗаполнитьШапкуПоПоступлению(Выборка.Приход);
					УчитыватьНДС 	 = УчетНДСПовтИсп.УчитыватьНДСПоВариантуУчета(Организация.ВариантУчетаНДС, ДоговорКонтрагента.ВидОплаты );
					СуммаВключаетНДС = УчитыватьНДС;
				Иначе
					ВызватьИсключение "Не удалось определить документ поступления по данным партий!";
				КонецЕсли;
				
			КонецЕсли;	
			
			СтрокаТабличнойЧасти = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			СтрокаТабличнойЧасти.Сумма =  СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
			СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
		КонецЦикла;
		
		СтатусДокумента 		= Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуНовый;

		АктРассмотренияВозврата = ДанныеЗаполнения;
		флСпособПроведения = Перечисления.СпособыПроведенияДокументов.Обычное;
		
		//ХудинВВ XX-2468 20052019
		//Для типа поставки VMI надо поставить в качестве основания Зачет продажи VMI {{
		Если Товары.Количество()
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Товары[0].СтрокаЗаявки, "ТипПоставки") = Перечисления.ТипПоставки.VMI Тогда

			ДокументОснование = ДокументЗачетаТовараVMIПоПараметрам(Новый Структура("КредДокумент, Номенклатура, СтрокаПрихода",
										РеквизитыОснования.ДокументПродажи, Товары[0].Номенклатура, Товары[0].СтрокаПрихода));
						
		КонецЕсли;
		
		ВидОперации = Документы.ВозвратТоваровПоставщику.ОпределитьВидОперации(ТекущаяДата(), Контрагент, флСпособПроведения, ВидОперации);
		//}}
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуПоПоступлению(ПоступлениеСсылка)
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ЗаполнитьШапкуПоПоступлению";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.Организация.ОсновнойБанковскийСчет КАК БанковскийСчетОрганизации,
		|	ПоступлениеТоваровУслуг.Склад,
		|	ПоступлениеТоваровУслуг.Контрагент,
		|	ПоступлениеТоваровУслуг.ТипЦен,
		|	ПоступлениеТоваровУслуг.ВалютаДокумента,
		|	ПоступлениеТоваровУслуг.УчитыватьНДС,
		|	ПоступлениеТоваровУслуг.СуммаВключаетНДС,
		|	ПоступлениеТоваровУслуг.КурсВзаиморасчетов,
		|	ПоступлениеТоваровУслуг.КратностьВзаиморасчетов,
		|	ПоступлениеТоваровУслуг.Грузополучатель КАК Грузоотправитель,
		|	ПоступлениеТоваровУслуг.Грузоотправитель КАК Грузополучатель,
		|	ПоступлениеТоваровУслуг.Менеджер,
		|	ПоступлениеТоваровУслуг.ТорговаяТочка,
		|	ПоступлениеТоваровУслуг.Филиал
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка"
		);
		Запрос.УстановитьПараметр("Ссылка", ПоступлениеСсылка);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДоговорКонтрагента = Результат[0].ДоговорКонтрагента;
		Организация = Результат[0].Организация;
		
		БанковскийСчетОрганизации = Справочники.ДоговорыКонтрагентов.БанковскийСчетПоДоговору(ДоговорКонтрагента);
		Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
			БанковскийСчетОрганизации = Результат[0].БанковскийСчетОрганизации;
		КонецЕсли;
		ДокументОснование 			= ПоступлениеСсылка;
		Склад 						= Результат[0].Склад;
		Контрагент 					= Результат[0].Контрагент;
		ТипЦен 						= Результат[0].ТипЦен;
		ВалютаДокумента 			= Результат[0].ВалютаДокумента;
		УчитыватьНДС 				= Результат[0].УчитыватьНДС;
		СуммаВключаетНДС 			= Результат[0].СуммаВключаетНДС;
		КурсВзаиморасчетов 			= Результат[0].КурсВзаиморасчетов;
		КратностьВзаиморасчетов		= Результат[0].КратностьВзаиморасчетов;
		Грузоотправитель 			= Результат[0].Грузоотправитель;
		Грузополучатель 			= Результат[0].Грузополучатель;
		Менеджер 					= Результат[0].Менеджер;
		ТорговаяТочка 				= Результат[0].ТорговаяТочка;
		Филиал 						= Результат[0].Филиал;
		
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
		
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПриКопировании";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////

	СозданВ77 = Ложь;
	АктРассмотренияВозврата = Неопределено;
КонецПроцедуры

// + Пушкин 2018-04-10

Процедура ПриЗаписи(Отказ)
		
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПриЗаписи";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ тогда
		ОбработатьСчФ(1);
	КонецЕсли;
	
	ОтразитьСобытиеКОбработкеАктовРассмотренияВозврата();

КонецПроцедуры

Процедура ПередУдалением(Отказ)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПередУдалением";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	Если НЕ Отказ тогда
		ОбработатьСчФ(0);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьСчФ(пар_Событие = 1)
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ОбработатьСчФ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если НЕ флСпособПроведения=Перечисления.СпособыПроведенияДокументов.ТолькоТовары Тогда 
		ПоискСФ = УчетНдс.НайтиПодчиненныйСчетФактуру(Ссылка);	
		
		НовыйСФ = 1;
		Если ЗначениеЗаполнено(ПоискСФ) тогда
			Если ТипЗнч(ПоискСФ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
				НовыйСФ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если пар_Событие = 0 тогда
			
			Если НовыйСФ = 1 тогда
				Возврат;
			КонецЕсли;
			
			СФ = ПоискСФ.ПолучитьОбъект();
			Если ДополнительныеСвойства.Свойство("СнятьОграничениеПоДатеЗапрета") Тогда
				//ХудинВВ 04042019
				СФ.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета", Истина);
			КонецЕсли;
			СФ.УстановитьПометкуУдаления(Истина);
			
		ИначеЕсли пар_Событие = 1 тогда
			Если ВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.КорректировочныйСчетФактура Тогда
				Если НовыйСФ = 0 тогда
					СФ = ПоискСФ.ПолучитьОбъект();
					Если ДополнительныеСвойства.Свойство("СнятьОграничениеПоДатеЗапрета") Тогда
						//ХудинВВ 04042019
						СФ.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета", Истина);
					КонецЕсли;
					СФ.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
				
			Иначе
				
				Организация_УчитыватьНДС      = ?(ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ДоговорКонтрагента), УчетНДСПовтИсп.УчитыватьНДСПоВариантуУчета(Организация.ВариантУчетаНДС, ДоговорКонтрагента.ВидОплаты),Ложь);
				Контрагент_флРаботает_сКоррСФ = Справочники.Контрагенты.ИспользуетКоррСчетФактуры(Контрагент, Дата);
			
				Если Организация_УчитыватьНДС И НЕ Контрагент_флРаботает_сКоррСФ Тогда 
				
					СФ = "";
					Если НовыйСФ = 1 тогда
						СФ = Документы.СчетФактураВыданный.СоздатьДокумент();	
					Иначе
						СФ = ПоискСФ.ПолучитьОбъект();
					КонецЕсли;
					
					СФ.ДокументыОснования.Очистить();
					СФ.ДатаНомерДокументовОплаты.Очистить();
					СФ.Заполнить(ЭтотОбъект.Ссылка);
					ЗаполнитьЗначенияСвойств(СФ, ЭтотОбъект, "Дата,Организация,Контрагент,ДоговорКонтрагента,СуммаДокумента,ВалютаДокумента,Ответственный,ПометкаУдаления","СозданВ77");
					СФ.ДокументОснование = Ссылка;
					СФ.КППКонтрагента = Контрагент.ОсновнаяТорговаяТочка.КПП;
					Если ДополнительныеСвойства.Свойство("СнятьОграничениеПоДатеЗапрета") Тогда
						СФ.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета", Истина);
					КонецЕсли;
					СФ.Записать(?(Проведен,РежимЗаписиДокумента.Проведение, ?(СФ.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись) ));
					
				Иначе
					
					Если НовыйСФ = 0 тогда
						СФ = ПоискСФ.ПолучитьОбъект();
						Если ДополнительныеСвойства.Свойство("СнятьОграничениеПоДатеЗапрета") Тогда
							//ХудинВВ 04042019
							СФ.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета", Истина);
						КонецЕсли;
						СФ.УстановитьПометкуУдаления(Истина);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ОбработкаПроверкиЗаполнения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	//#PK83-690 Kalinin V.A. ( 2018-05-28 )
	НеПроверяемыеРеквизиты = новый Массив;
	Если Не ОбязательныРеквизитыКоррСчетФактуры()	тогда 
		НеПроверяемыеРеквизиты.Добавить("КоррСФНомер");
		НеПроверяемыеРеквизиты.Добавить("КоррСФДата");
	КонецЕсли;	
	
	//ХудинВВ XX-1983
	Если СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуНовыйНаЭкспертизу
		ИЛИ  СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгруженНаЭкспертизу Тогда
		ПроверяемыеРеквизиты.Добавить("ДатаОкончанияЭкспертизы");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,НеПроверяемыеРеквизиты);
	
КонецПроцедуры

Функция ЗапретВыбораОснованияПТУДляКоррСчФактур(Отказ = Ложь) Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ЗапретВыбораОснованияПТУДляКоррСчФактур";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ЕстьОшибки = Ложь;
	
	Если СозданИзАкта Тогда
		Возврат ЕстьОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) И Справочники.Контрагенты.ИспользуетКоррСчетФактуры(Контрагент, Дата) Тогда
		Сообщить("Контрагент использует корректировочные счета-фактуры. Возврат поставщику необходимо вводить из документа ""Поступление товаров услуг"".", СтатусСообщения.Важное);
		Отказ = Истина;
		ЕстьОшибки = Истина;
	КонецЕсли;

	Возврат ЕстьОшибки;
	
КонецФункции

Функция ОбязательныРеквизитыКоррСчетФактуры() Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ОбязательныРеквизитыКоррСчетФактуры";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//ХудинВВ XX-2468 20052019 Убрал проверку
	Возврат Ложь;
	
	//Если СозданИзАкта И Справочники.Контрагенты.ИспользуетКоррСчетФактуры(Контрагент, Дата) Тогда
	//	Возврат Истина;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	
КонецФункции

// - Пушкин 2018-04-10

Процедура ПересчитатьНДСПоДатеИДокументуОснованию() Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПересчитатьНДСПоДатеИДокументуОснованию";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	
	Если Дата < '20190101000000' Тогда
		Для Каждого Товар Из Товары Цикл
			Если Товар.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
				Товар.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				Товар.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Товар.Сумма, УчитыватьНДС, СуммаВключаетНДС, Товар.СтавкаНДС);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийВозвратПоставщику.КорректировочныйСчетФактура Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПоступлениеТоваровУслугТовары.Ссылка
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
			|ГДЕ
			|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
			|	И ПоступлениеТоваровУслугТовары.СтавкаНДС = &СтавкаНДС"
			);
			Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
			Запрос.УстановитьПараметр("СтавкаНДС", Перечисления.СтавкиНДС.НДС18);
			Результат = Запрос.Выполнить();
		
			Если НЕ Результат.Пустой() Тогда
				Для Каждого Товар Из Товары Цикл
					Если Товар.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
						Товар.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
						Товар.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Товар.Сумма, УчитыватьНДС, СуммаВключаетНДС, Товар.СтавкаНДС);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		
		Иначе
			Для Каждого Товар Из Товары Цикл
				Если Товар.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
					Товар.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
					Товар.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Товар.Сумма, УчитыватьНДС, СуммаВключаетНДС, Товар.СтавкаНДС);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры


// ХудинВВ 21112018
Процедура ПроверитьОрганизациюДляСписанияПартийПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ПроверитьОрганизациюДляСписанияПартийПередЗаписью";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если Не РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияДляСписанияПартий) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеДокументовКлиентСервер.ИспользуютсяМФП(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолитикиМФП = Справочники.ПолитикиМФП.ПолучитьПараметрыПолитикиМФПДляОрганизации(Организация, Дата, Истина);
	
	ОрганизацииДляЗакупки = ПараметрыПолитикиМФП.ОрганизацииДляЗакупки;
	
	НайденныеСтроки = ОрганизацииДляЗакупки.НайтиСтроки(Новый Структура("Организация", ОрганизацияДляСписанияПартий));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		 ТекстОшибки = "Организации """+Организация+""" не разрешена покупка товара у организации """+ОрганизацияДляСписанияПартий+""" согласно политике МФП!";
		 
		 Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		 
		 ВызватьИсключение ТекстОшибки; 
		
	КонецЕсли;
	
КонецПроцедуры

// ХудинВВ 26022019 XX-1969
Процедура ОтразитьСобытиеКОбработкеАктовРассмотренияВозврата()
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ОтразитьСобытиеКОбработкеАктовРассмотренияВозврата";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	лРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Проведен, СтатусДокумента, АктРассмотренияВозврата");
	
	Если Не ЗначениеЗаполнено(лРеквизиты.АктРассмотренияВозврата) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не лРеквизиты.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (лРеквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен
		ИЛИ лРеквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгруженНаЭкспертизу) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(лРеквизиты.АктРассмотренияВозврата, 
	Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ЗагрузкаВозвратаПоставщикуИзТопЛог, 
	Ссылка);
	
КонецПроцедуры

Функция ВыгрузитьВОбменТоплог() Экспорт
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ВыгрузитьВОбменТоплог";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтруктураВозврата = Новый Структура;
	
	Ошибка = Ложь;
	СообщениеДиагностики = "";
	
	//Проверки
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Если Не Проведен Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "Документ не проведен." + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если Модифицированность() Тогда 
		СообщениеДиагностики = СообщениеДиагностики + "Нужно записать документ" + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
		
	Если Склад.ОбменСTopLog = Ложь	Тогда	
		СообщениеДиагностики = СообщениеДиагностики + "У склада в документе не установлен флаг ""Обмен с Топлог""." + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СозданИзАкта
	               |			ТОГДА ВозвратТоваровПоставщикуТовары.КоличествоБрак + ВозвратТоваровПоставщикуТовары.КоличествоИзлишек - ВозвратТоваровПоставщикуТовары.КоличествоВозвращено
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество
	               |	КОНЕЦ КАК Факт
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	               |ГДЕ
	               |	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	               |	И ВЫБОР
	               |			КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СозданИзАкта
	               |				ТОГДА ВозвратТоваровПоставщикуТовары.КоличествоБрак + ВозвратТоваровПоставщикуТовары.КоличествоИзлишек - ВозвратТоваровПоставщикуТовары.КоличествоВозвращено
	               |			ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество
	               |		КОНЕЦ > 0";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Ошибка = Истина;
		СообщениеДиагностики = СообщениеДиагностики + "Нет количества в табл. части ""Товары"" для выгрузки. Для документов, созданных из акта приемки, количество выгружаемое в ТопЛог считается как Брак + Излишек - Возвращено" + Символы.ПС;	
	КонецЕсли;
	
	Узел = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 3);
	Если НЕ ЗначениеЗаполнено(Узел) Тогда 
		СообщениеДиагностики = СообщениеДиагностики + "Не найден узел обмена для выгрузки в Топлог." + Символы.ПС;
		Ошибка = Истина;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Если Ошибка = Ложь Тогда  
		Документы.ВозвратТоваровПоставщику.ЗарегистрироватьВОбменСТопЛог(ЭтотОбъект);
		//Семенов И.П. 31.01.2019 XX-1768(
		//ПланыОбмена.ЗарегистрироватьИзменения(Узел, Ссылка);
		ОбменДаннымиКлиентСервер.ЗарегистрироватьИзмененияВПланеОбмена(Узел, Ссылка);
		//)Семенов И.П.
		СообщениеДиагностики = СообщениеДиагностики + "Документ зарегистрирован в обмене с Топ Лог";		
	Иначе
		СообщениеДиагностики = "Не удалось зарегистрировать документ в обмене с Топлог, по причине:" + Символы.ПС + СообщениеДиагностики;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Ошибка", Ошибка);
	СтруктураВозврата.Вставить("СообщениеДиагностики", СообщениеДиагностики);
	Возврат СтруктураВозврата;
	
КонецФункции

//ХудинВВ XX-2468 21052019
Функция ДокументЗачетаТовараVMIПоПараметрам(вхПараметры)
	
	лКлючАлгоритма = "Документ_ВозвратТоваровПоставщику_МодульОбъекта_ДокументЗачетаТовараVMIПоПараметрам";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугПартииТоваровVMI.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ПартииТоваровVMI КАК ПоступлениеТоваровУслугПартииТоваровVMI
	|ГДЕ
	|	ПоступлениеТоваровУслугПартииТоваровVMI.КредДокумент = &КредДокумент
	|	И ПоступлениеТоваровУслугПартииТоваровVMI.Номенклатура = &Номенклатура
	|	И ПоступлениеТоваровУслугПартииТоваровVMI.СтрокаПрихода = &СтрокаПрихода
	|	И ПоступлениеТоваровУслугПартииТоваровVMI.Ссылка.ВидОперацииПоступления = &ВидОперацииПоступления";
	
	Запрос.УстановитьПараметр("ВидОперацииПоступления", Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI);
	Запрос.УстановитьПараметр("КредДокумент", 			вхПараметры.КредДокумент);
	Запрос.УстановитьПараметр("Номенклатура", 			вхПараметры.Номенклатура);
	Запрос.УстановитьПараметр("СтрокаПрихода", 			вхПараметры.СтрокаПрихода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВозвращаемоеЗначение = Выборка.Ссылка;
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мМенеджерОбъекта = Документы[Метаданные().Имя];
