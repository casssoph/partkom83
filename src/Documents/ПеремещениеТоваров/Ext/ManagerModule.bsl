
//// ОБРАБОТЧИКИ МОДУЛЯ ОБЪЕКТА

Процедура ВыполнитьПроведение(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	//Если Не ПараметрыСеанса.ОпределятьСтратегиюПогашенияПартийТоваровПоСкладу Тогда
	//	ПроведениеДокументовКлиентСервер.ПогашениеПартийТоваров(вхСсылкаНаДокумент, вхПараметры);
	//КонецЕсли;
	лФильтр = Неопределено;
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "Фильтр", лФильтр);	
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыНаСкладах") тогда
		ЗаблокироватьРегистрыТоварыНаСкладах(вхСсылкаНаДокумент);

		Если Не ПроведениеДокументовКлиентСервер.ЧастичноеСписаниеРазмещений(вхСсылкаНаДокумент) Тогда 
			КонтрольОстатков(вхСсылкаНаДокумент, вхОтказ,вхПараметры); //Cвой контроль с учетом собств. резерва
			ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыНаСкладах",РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		КонецЕсли;	
		ОбновитьПоступление(вхСсылкаНаДокумент);
	КонецЕсли;
	
	Если РаботаСоСтатусамиДокументовСервер.НоваяСхемаЗакрытияЗаявок(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент,"Дата")) тогда  
		Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ЗаявкиПокупателей") тогда
			ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ЗаявкиПокупателей", РегистрыНакопления_ЗаявкиПокупателей(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
		КонецЕсли;
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "РезервыТоваров") тогда
		ЗаблокироватьРегистрРезервыНаСкладах(вхСсылкаНаДокумент);
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "РезервыТоваров", РегистрыНакопления_РезервыТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваров") 
		//ИЛИ ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваровVMI") 
		//ИЛИ ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваровВПути") 
		Тогда
		
		ЗаблокироватьРегистрПартииТоваров(вхСсылкаНаДокумент);

		лОчищать = ПроведениеДокументовКлиентСервер.НеобходимоОчиститьДвиженияПартииТоваров(вхСсылкаНаДокумент, лФильтр);		
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		
		Если лОчищать тогда
			Если лФильтр = Неопределено Тогда 
				ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);
				лБазовая = Неопределено;
				ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", лБазовая);
			Иначе
				// Очищаем только движения по фильтру
				лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
				лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
				ОбщегоНазначения.ЗаписатьДвиженияДокументаБезОбработки(вхСсылкаНаДокумент, РегистрыНакопления.ПартииТоваров, лРазделенныеБазовая.Исключенные, Истина); 
				лБазовая = лРазделенныеБазовая.Исключенные;
			КонецЕсли;
		Иначе
			лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
		КонецЕсли;
		
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;

		Структура = РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры, лФильтр);
		Если Не вхОтказ Тогда 
			лТребуемая = Структура.ПартииТоваров;
			
			//Удалим служебные колонки 
			ОбщегоНазначения.УдалитьКолонки(лИсходная, лТребуемая);
			
			лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
			ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров,
			лРазностныеДанные, лРазделенныеБазовая.Исключенные);
			
			ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
			Если лФильтр = Неопределено Тогда 
				РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Истина);
			КонецЕсли;
			ПроведениеДокументовКлиентСервер.ЗаписатьИзмененныеДвижения(вхСсылкаНаДокумент, лФильтр, Структура.ПартииТоваровVMI, Метаданные.РегистрыНакопления.ПартииТоваровVMI);
			
			ПроведениеДокументовКлиентСервер.ЗаписатьИзмененныеДвижения(вхСсылкаНаДокумент, лФильтр, Структура.ПартииТоваровВПути, Метаданные.РегистрыНакопления.ПартииТоваровВПути);
		КонецЕсли;	
	КонецЕсли;
	
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыКРезервированию") тогда                   
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыКРезервированию",
		РегистрыНакопления_ТоварыКРезервированию(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
		
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыВПути") тогда
		КонтрольОстатковТоваровВПути(вхСсылкаНаДокумент, вхОтказ);
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыВПути",
		РегистрыНакопления_ТоварыВПути(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПополнениеСклада") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ПополнениеСклада",
		РегистрыНакопления_ПополнениеСклада(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ОтказыПоЗаявкам") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ОтказыПоЗаявкам",
		РегистрыНакопления_ОтказыПоЗаявкам(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьОтменуПроведения(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент);
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Ложь);
	
	ОбновитьПоступление(вхСсылкаНаДокумент, Ложь);
	
КонецПроцедуры

//// ТАБЛИЦЫ ДВИЖЕНИЙ ДОКУМЕНТОВ

Функция РегистрыНакопления_ЗаявкиПокупателей(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ЗаявкиПокупателей", ТаблицаДвижений);
	
	ЗапросЗаявок = новый Запрос( "ВЫБРАТЬ
	                             |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	                             |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	                             |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель КАК Склад,
	                             |	ПеремещениеТоваровТовары.Номенклатура,
	                             |	ПеремещениеТоваровТовары.Качество,
	                             |	ПеремещениеТоваровТовары.Ссылка.Дата КАК Период,
	                             |	ПеремещениеТоваровТовары.СтрокаЗаявки.Количество КАК КоличествоВЗаявке
	                             |ПОМЕСТИТЬ ВТДанныеПеремещения
	                             |ИЗ
	                             |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                             |ГДЕ
	                             |	ПеремещениеТоваровТовары.Ссылка.Ссылка = &ДокументСсылка
	                             |	И ПеремещениеТоваровТовары.СтрокаЗаявки.ТипПоставки = ЗНАЧЕНИЕ(Перечисление.ТипПоставки.ПополнениеСклада)
	                             |
	                             |СГРУППИРОВАТЬ ПО
	                             |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	                             |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
	                             |	ПеремещениеТоваровТовары.Номенклатура,
	                             |	ПеремещениеТоваровТовары.Качество,
	                             |	ПеремещениеТоваровТовары.Ссылка.Дата,
	                             |	ПеремещениеТоваровТовары.СтрокаЗаявки.Количество
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ
	                             |	ВТДанныеПеремещения.Склад КАК Склад,
	                             |	ВТДанныеПеремещения.Номенклатура КАК Номенклатура,
	                             |	ВТДанныеПеремещения.Качество,
	                             |	ВТДанныеПеремещения.СтрокаЗаявки,
	                             |	ЗаявкиПокупателей.ТорговаяТочка,
	                             |	ЗаявкиПокупателей.ДоговорКонтрагента,
	                             |	СУММА(ВЫБОР
	                             |			КОГДА ВТДанныеПеремещения.Количество + ЕСТЬNULL(ОтказыПоЗаявкамОбороты.КоличествоОборот, 0) <= ВТДанныеПеремещения.КоличествоВЗаявке
	                             |				ТОГДА ВТДанныеПеремещения.Количество
	                             |			ИНАЧЕ ВТДанныеПеремещения.КоличествоВЗаявке - ЕСТЬNULL(ОтказыПоЗаявкамОбороты.КоличествоОборот, 0)
	                             |		КОНЕЦ) КАК Количество,
	                             |	СУММА(ВЫБОР
	                             |			КОГДА ЕСТЬNULL(ЗаявкиПокупателей.Количество, 0) = 0
	                             |				ТОГДА 0
	                             |			ИНАЧЕ ЕСТЬNULL(ЗаявкиПокупателей.СуммаРегл, 0) / ЗаявкиПокупателей.Количество * ВТДанныеПеремещения.Количество - ЕСТЬNULL(ОтказыПоЗаявкамОбороты.КоличествоОборот, 0)
	                             |		КОНЕЦ) КАК СуммаРегл,
	                             |	СУММА(ВЫБОР
	                             |			КОГДА ЕСТЬNULL(ЗаявкиПокупателей.Количество, 0) = 0
	                             |				ТОГДА 0
	                             |			ИНАЧЕ ЕСТЬNULL(ЗаявкиПокупателей.СуммаУпр, 0) / ЗаявкиПокупателей.Количество * ВТДанныеПеремещения.Количество - ЕСТЬNULL(ОтказыПоЗаявкамОбороты.КоличествоОборот, 0)
	                             |		КОНЕЦ) КАК СуммаУпр,
	                             |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	                             |	ВТДанныеПеремещения.Период КАК Период
	                             |ИЗ
	                             |	ВТДанныеПеремещения КАК ВТДанныеПеремещения
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиПокупателей КАК ЗаявкиПокупателей
	                             |		ПО (ЗаявкиПокупателей.СтрокаЗаявки = ВТДанныеПеремещения.СтрокаЗаявки)
	                             |			И (ЗаявкиПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	                             |			И (ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	                             |				ИЛИ ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.КорректировкаЗаявкиПокупателя)
	                             |			И (ЗаявкиПокупателей.Период <= ВТДанныеПеремещения.Период)
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтказыПоЗаявкам.Обороты(
	                             |				,
	                             |				&Период,
	                             |				,
	                             |				СтрокаЗаявки В
	                             |					(ВЫБРАТЬ
	                             |						ВТДанныеПеремещения.СтрокаЗаявки КАК СтрокаЗаявки
	                             |					ИЗ
	                             |						ВТДанныеПеремещения КАК ВТДанныеПеремещения)) КАК ОтказыПоЗаявкамОбороты
	                             |		ПО ВТДанныеПеремещения.СтрокаЗаявки = ОтказыПоЗаявкамОбороты.СтрокаЗаявки
	                             |
	                             |СГРУППИРОВАТЬ ПО
	                             |	ВТДанныеПеремещения.Склад,
	                             |	ВТДанныеПеремещения.Номенклатура,
	                             |	ВТДанныеПеремещения.Качество,
	                             |	ВТДанныеПеремещения.СтрокаЗаявки,
	                             |	ЗаявкиПокупателей.ТорговаяТочка,
	                             |	ЗаявкиПокупателей.ДоговорКонтрагента,
	                             |	ВТДанныеПеремещения.Период
	                             |
	                             |ИМЕЮЩИЕ
	                             |	СУММА(ВТДанныеПеремещения.КоличествоВЗаявке - ЕСТЬNULL(ОтказыПоЗаявкамОбороты.КоличествоОборот, 0)) > 0" );
	
	ЗапросЗаявок.УстановитьПараметр("ДокументСсылка",вхСсылкаНаДокумент);
	ЗапросЗаявок.УстановитьПараметр("Период",Новый Граница(вхСсылкаНаДокумент.МоментВремени(), ВидГраницы.Исключая));
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ЗапросЗаявок.Выполнить().Выгрузить(), ТаблицаДвижений);
	
	Возврат ТаблицаДвижений;
	
	
	
	
КонецФункции

Функция РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыНаСкладах", ТаблицаДвижений);
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВидОперации");
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	ПеремещенияВыгружаютсяИз77 = глЗначениеПеременной("ПеремещенияВыгружаютсяИз77");	
	
	Если Не ПеремещенияВыгружаютсяИз77 Тогда  
		Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый Или (Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог И Не Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил) Тогда
			Возврат ТаблицаДвижений;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	ПеремещениеТоваровТовары.Ссылка КАК Регистратор,
		               |	ПеремещениеТоваровТовары.Ссылка.Дата КАК Период,
		               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Качество,
		               |	ПеремещениеТоваровТовары.КоличествоПлан КАК Количество
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И (ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ОтгрузкаТопЛог)
		               |			ИЛИ ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение))
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		               |	ПеремещениеТоваровТовары.Ссылка,
		               |	ПеремещениеТоваровТовары.Ссылка.Дата,
		               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Качество,
		               |	ПеремещениеТоваровТовары.Количество
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И (ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог)
		               |			ИЛИ ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение))
		               |	И ПеремещениеТоваровТовары.Количество > 0
		               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		               |	ПеремещениеТоваровТовары.Ссылка,
		               |	ПеремещениеТоваровТовары.Ссылка.Дата,
		               |	ВЫБОР
		               |		КОГДА ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ОтгрузкаТопЛог)
		               |			ТОГДА ПеремещениеТоваровТовары.Ссылка.СкладОтправитель
		               |		ИНАЧЕ ПеремещениеТоваровТовары.Ссылка.СкладПолучатель
		               |	КОНЕЦ,
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	&КачествоНедостача,
		               |	ПеремещениеТоваровТовары.КоличествоПлан - ПеремещениеТоваровТовары.Количество
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
		               |	И ПеремещениеТоваровТовары.КоличествоПлан - ПеремещениеТоваровТовары.Количество > 0";
					   
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Запрос.УстановитьПараметр("КачествоНедостача", Справочники.Качество.Недостача);

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		               |	ПеремещениеТоваровТовары.Ссылка КАК Регистратор,
		               |	ПеремещениеТоваровТовары.Ссылка.Дата КАК Период,
		               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Качество,
		               |	ПеремещениеТоваровТовары.Количество КАК Количество
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И (ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог)
		               |			ИЛИ ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение))
		               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
		               |	И ПеремещениеТоваровТовары.Количество > 0
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		               |	ПеремещениеТоваровТовары.Ссылка,
		               |	ПеремещениеТоваровТовары.Ссылка.Дата,
		               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Качество,
		               |	ПеремещениеТоваровТовары.Количество
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И (ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог)
		               |			ИЛИ ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение))
		               |	И ПеремещениеТоваровТовары.Количество > 0
		               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
		               |	И ПеремещениеТоваровТовары.Количество > 0";
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	КонецЕсли;
	
	Возврат ТаблицаДвижений;

КонецФункции

Функция РегистрыНакопления_РезервыТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("РезервыТоваров", ТаблицаДвижений);
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВидОперации");
		
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПроведенияПоПартиямРезервам") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	ПеремещенияВыгружаютсяИз77 = глЗначениеПеременной("ПеремещенияВыгружаютсяИз77");	
	
	Если Не ПеремещенияВыгружаютсяИз77 Тогда 
		Если Не (Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил И (Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог ИЛИ  Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение)) Тогда
			Возврат ТаблицаДвижений;
		КонецЕсли;
	Иначе
		Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый Тогда 
			Возврат ТаблицаДвижений;
		КонецЕсли;
	КонецЕсли;
	
	//Списание резерва
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
	               |	ПеремещениеТоваровТовары.Номенклатура,
	               |	ПеремещениеТоваровТовары.Качество,
	               |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	               |	ПеремещениеТоваровТовары.СтрокаПрихода,
	               |	ВЫБОР
	               |		КОГДА ПеремещениеТоваровТовары.КоличествоПлан >= ПеремещениеТоваровТовары.Количество
	               |			ТОГДА ПеремещениеТоваровТовары.КоличествоПлан
	               |		ИНАЧЕ ПеремещениеТоваровТовары.Количество
	               |	КОНЕЦ КАК Количество
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Поступление = &ПустоеПоступление
	               |	И ПеремещениеТоваровТовары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки
	               |	И ПеремещениеТоваровТовары.Ссылка = &Ссылка
	               |	И НЕ ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустоеПоступление", Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		втТовары = РезультатЗапроса.Выгрузить();
		Запрос = Новый Запрос;
	    Запрос.Текст = "ВЫБРАТЬ
	                   |	втТовары.Склад,
	                   |	втТовары.Номенклатура,
	                   |	втТовары.Качество,
	                   |	втТовары.СтрокаЗаявки
	                   |ПОМЕСТИТЬ втТовары
	                   |ИЗ
	                   |	&втТовары КАК втТовары
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	РезервыТоваровОстатки.Склад,
	                   |	РезервыТоваровОстатки.Номенклатура,
	                   |	РезервыТоваровОстатки.Качество,
	                   |	РезервыТоваровОстатки.СтрокаЗаявки,
	                   |	РезервыТоваровОстатки.СтрокаПрихода,
	                   |	РезервыТоваровОстатки.КоличествоОстаток КАК Количество
	                   |ИЗ
	                   |	РегистрНакопления.РезервыТоваров.Остатки(
	                   |			&КонПериода,
	                   |			(Склад, Номенклатура, Качество, СтрокаЗаявки) В
	                   |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                   |					втТовары.Склад,
	                   |					втТовары.Номенклатура,
	                   |					втТовары.Качество,
	                   |					втТовары.СтрокаЗаявки
	                   |				ИЗ
	                   |					втТовары)) КАК РезервыТоваровОстатки
	                   |
	                   |ДЛЯ ИЗМЕНЕНИЯ
	                   |	РегистрНакопления.РезервыТоваров.Остатки";
		Запрос.УстановитьПараметр("втТовары", втТовары);		   
		Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
		Товары = РезультатЗапроса.Выбрать();
		Остатки = Запрос.Выполнить().Выгрузить();
		ПроведениеДокументовКлиентСервер.СписатьРезервы(Товары, Остатки, ТаблицаДвижений, вхСсылкаНаДокумент);
	КонецЕсли;
	
	//Оприходование резерва
	Запрос = Новый Запрос;
	НоваяСхемаЗакрытияЗаявок = РаботаСоСтатусамиДокументовСервер.НоваяСхемаЗакрытияЗаявок(Реквизиты.Дата);
	Если НоваяСхемаЗакрытияЗаявок тогда 
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		               |	ПеремещениеТоваровТовары.Ссылка.Ссылка КАК Регистратор,
		               |	ПеремещениеТоваровТовары.Ссылка.Дата КАК Период,
		               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель КАК Склад,
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Качество,
		               |	ПеремещениеТоваровТовары.СтрокаЗаявки,
		               |	ПеремещениеТоваровТовары.СтрокаПрихода,
		               |	ПеремещениеТоваровТовары.Количество
		               |ПОМЕСТИТЬ ВтДанныеДокумента
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И ПеремещениеТоваровТовары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки
		               |	И ПеремещениеТоваровТовары.Количество > 0
		               |	И ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.ЗаявкаПокупателя)
		               |	И НЕ ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗаявкиПокупателей.СтрокаЗаявки,
		               |	ЗаявкиПокупателей.КоличествоОстаток КАК Количество
		               |ПОМЕСТИТЬ ВтЗаказано
		               |ИЗ
		               |	РегистрНакопления.ЗаявкиПокупателей.Остатки(
		               |			&ГраницаОстатков,
		               |			СтрокаЗаявки В
		               |				(ВЫБРАТЬ
		               |					ВтДанныеДокумента.СтрокаЗаявки
		               |				ИЗ
		               |					ВтДанныеДокумента)) КАК ЗаявкиПокупателей
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗаявкиПокупателей.СтрокаЗаявки,
		               |	СУММА(ЗаявкиПокупателей.Количество) КАК Количество
		               |ПОМЕСТИТЬ ВтЗаказано_Старое
		               |ИЗ
		               |	ВтДанныеДокумента КАК ВтДанныеДокумента
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиПокупателей КАК ЗаявкиПокупателей
		               |		ПО ВтДанныеДокумента.СтрокаЗаявки = ЗаявкиПокупателей.СтрокаЗаявки
		               |			И (ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
		               |				ИЛИ ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.КорректировкаЗаявкиПокупателя)
		               |			И (ЗаявкиПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаявкиПокупателей.СтрокаЗаявки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВтДанныеДокумента.ВидДвижения,
		               |	ВтДанныеДокумента.Регистратор,
		               |	ВтДанныеДокумента.Период,
		               |	ВтДанныеДокумента.Склад,
		               |	ВтДанныеДокумента.Номенклатура,
		               |	ВтДанныеДокумента.Качество,
		               |	ВтДанныеДокумента.СтрокаЗаявки,
		               |	ВтДанныеДокумента.СтрокаПрихода,
		               |	ВЫБОР
		               |		КОГДА ВтЗаказано.Количество < ВтДанныеДокумента.Количество
		               |			ТОГДА ВтЗаказано.Количество
		               |		ИНАЧЕ ВтДанныеДокумента.Количество
		               |	КОНЕЦ КАК Количество
		               |ИЗ
		               |	ВтДанныеДокумента КАК ВтДанныеДокумента
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаказано КАК ВтЗаказано
		               |		ПО ВтДанныеДокумента.СтрокаЗаявки = ВтЗаказано.СтрокаЗаявки";	
	Иначе  	
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ПеремещениеТоваровТовары.Ссылка.Ссылка КАК Регистратор,
		|	ПеремещениеТоваровТовары.Ссылка.Дата КАК Период,
		|	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель КАК Склад,
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	ПеремещениеТоваровТовары.Качество,
		|	ПеремещениеТоваровТовары.СтрокаЗаявки,
		|	ПеремещениеТоваровТовары.СтрокаПрихода,
		|	ПеремещениеТоваровТовары.Количество
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		|	И ПеремещениеТоваровТовары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки
		//|	И ПеремещениеТоваровТовары.СтрокаЗаявки.ПрайсПоставщика.Склад = &ПустойСклад
		|	И ПеремещениеТоваровТовары.Количество > 0
		|	И ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.ЗаявкаПокупателя)
		|	И НЕ ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная";
	КонецЕсли; 			   
	                      
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(вхСсылкаНаДокумент.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДатаДокумента",Реквизиты.дата);
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	
	Возврат ТаблицаДвижений;
	
КонецФункции


//Функция ЗапросОприходывания(вхСсылкаНаДокумент)


Функция РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено, вхФильтр = Неопределено)
	

	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", ТаблицаДвижений);
	
	ТаблицаДвиженийVMI = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваровVMI", ТаблицаДвиженийVMI);
	
	ТаблицаДвиженийТвП = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваровВПути", ТаблицаДвиженийТвП);
	
	СтруктураТаблиц = Новый Структура;
	
	СтруктураТаблиц.Вставить("ПартииТоваров",     ТаблицаДвижений);
	СтруктураТаблиц.Вставить("ПартииТоваровVMI",  ТаблицаДвиженийVMI);
	СтруктураТаблиц.Вставить("ПартииТоваровВПути",ТаблицаДвиженийТвП);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВидОперации,СкладОтправитель,СкладПолучатель,Организация");
		
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый Или (Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог И Не Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ЧастичноеСписаниеРазмещений(вхСсылкаНаДокумент) Тогда 
		СтруктураТаблиц = ПроведениеДокументовКлиентСервер.НовоеСписаниеПоПартиямИТоварамДляРазмещений(вхСсылкаНаДокумент);
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыНаСкладах", СтруктураТаблиц.ТоварыНаСкладах);
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	ПеремещенияВыгружаютсяИз77 = глЗначениеПеременной("ПеремещенияВыгружаютсяИз77");	
	Если Не ПеремещенияВыгружаютсяИз77 Тогда 
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ОтгрузкаТопЛог ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение Тогда 
			ВозврСтруктураТаблиц = ПроведениеДокументовКлиентСервер.ПогашениеПартийТоваровНовое(вхСсылкаНаДокумент, вхОтказ,, вхФильтр);
			ТаблицаДвижений = ВозврСтруктураТаблиц.ПартииТоваров;
			ТаблицаДвиженийVMI = ВозврСтруктураТаблиц.ПартииТоваровVMI;
			
			СтруктураТаблиц.ПартииТоваров 	 = ТаблицаДвижений;
			СтруктураТаблиц.ПартииТоваровVMI = ТаблицаДвиженийVMI;
					
			Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ОтгрузкаТопЛог Тогда 
				Строки = ТаблицаДвижений.НайтиСтроки(Новый Структура("ВидСписания", "Списание"));
				
				КопияТаблицаДвижений = ТаблицаДвижений.Скопировать(Строки,"Регистратор,Период,Номенклатура,Качество,СтатусПартии,СтрокаПрихода,Организация,Количество,СуммаРубли,СуммаДоллары,СуммаЕвро");
				
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицаДвижений, ТаблицаДвиженийТвП);
				
				ТаблицаДвиженийТвП.ЗаполнитьЗначения(Реквизиты.СкладОтправитель, "СкладОтправитель");
				ТаблицаДвиженийТвП.ЗаполнитьЗначения(Реквизиты.СкладПолучатель, "СкладПолучатель");
				ТаблицаДвиженийТвП.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
				ТаблицаДвиженийТвП.ЗаполнитьЗначения(вхСсылкаНаДокумент, "ДокументОснование");
			КонецЕсли;
			
			СтруктураТаблиц.ПартииТоваровВПути = ТаблицаДвиженийТвП;
			
		ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог Тогда 	
			
			Запрос = Новый Запрос;
			Запрос.Текст =  "ВЫБРАТЬ
			                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
			                |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
			                |	ПеремещениеТоваровТовары.Номенклатура,
			                |	ПеремещениеТоваровТовары.Качество,
			                |	ПеремещениеТоваровТовары.СтрокаПрихода,
			                |	ВЫБОР
			                |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
			                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			                |	КОНЕЦ КАК СтатусПартии,
			                |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
			                |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
			                |	""Нормальное"" КАК РаспределениеПартий
			                |ПОМЕСТИТЬ втТовары
			                |ИЗ
			                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			                |ГДЕ
			                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
			                |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
			                |	И ПеремещениеТоваровТовары.СтрокаПрихода <> &ПустаяСтрокаПрихода
			                |	И ПеремещениеТоваровТовары.Количество > 0 %УсловиеПоНоменклатуре%
			                |
			                |СГРУППИРОВАТЬ ПО
			                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
			                |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
			                |	ПеремещениеТоваровТовары.Номенклатура,
			                |	ПеремещениеТоваровТовары.Качество,
			                |	ПеремещениеТоваровТовары.СтрокаПрихода,
			                |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
			                |	ВЫБОР
			                |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
			                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			                |	КОНЕЦ
			                |
			                |ОБЪЕДИНИТЬ ВСЕ
			                |
			                |ВЫБРАТЬ
			                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
			                |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
			                |	ПеремещениеТоваровТовары.Номенклатура,
			                |	ПеремещениеТоваровТовары.Качество,
			                |	ПеремещениеТоваровТовары.СтрокаПрихода,
			                |	ВЫБОР
			                |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
			                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			                |	КОНЕЦ,
			                |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
			                |	СУММА(ПеремещениеТоваровТовары.КоличествоПлан - ПеремещениеТоваровТовары.Количество),
			                |	""Недостача""
			                |ИЗ
			                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			                |ГДЕ
			                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
			                |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
			                |	И ПеремещениеТоваровТовары.СтрокаПрихода <> &ПустаяСтрокаПрихода
			                |	И ПеремещениеТоваровТовары.КоличествоПлан - ПеремещениеТоваровТовары.Количество > 0  %УсловиеПоНоменклатуре%
			                |
			                |СГРУППИРОВАТЬ ПО
			                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
			                |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
			                |	ПеремещениеТоваровТовары.Номенклатура,
			                |	ПеремещениеТоваровТовары.Качество,
			                |	ПеремещениеТоваровТовары.СтрокаПрихода,
			                |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
			                |	ВЫБОР
			                |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
			                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			                |	КОНЕЦ
			                |;
			                |
			                |////////////////////////////////////////////////////////////////////////////////
			                |ВЫБРАТЬ
			                |	ПартииТоваровВПутиОстатки.СкладОтправитель,
			                |	ПартииТоваровВПутиОстатки.СкладПолучатель,
			                |	ПартииТоваровВПутиОстатки.Номенклатура,
			                |	ПартииТоваровВПутиОстатки.Качество,
			                |	ПартииТоваровВПутиОстатки.СтрокаПрихода,
			                |	ПартииТоваровВПутиОстатки.СтатусПартии,
			                |	ПартииТоваровВПутиОстатки.Организация,
			                |	ПартииТоваровВПутиОстатки.ДокументОснование,
			                |	ПартииТоваровВПутиОстатки.КоличествоОстаток КАК Количество,
			                |	ПартииТоваровВПутиОстатки.СуммаРублиОстаток КАК СуммаРубли,
			                |	ПартииТоваровВПутиОстатки.СуммаДолларыОстаток КАК СуммаДоллары,
			                |	ПартииТоваровВПутиОстатки.СуммаЕвроОстаток КАК СуммаЕвро,
			                |	ПартииТоваровВПутиОстатки.Организация = &Организация КАК ЭтаОрганизация
			                |ИЗ
			                |	РегистрНакопления.ПартииТоваровВПути.Остатки(
			                |			&КонПериода,
			                |			(СкладОтправитель, СкладПолучатель, Номенклатура, Качество, СтрокаПрихода, СтатусПартии, ДокументОснование) В
			                |				(ВЫБРАТЬ
			                |					втТовары.СкладОтправитель,
			                |					втТовары.СкладПолучатель,
			                |					втТовары.Номенклатура,
			                |					втТовары.Качество,
			                |					втТовары.СтрокаПрихода,
			                |					втТовары.СтатусПартии,
			                |					втТовары.ДокументОснование
			                |				ИЗ
			                |					втТовары КАК втТовары)) КАК ПартииТоваровВПутиОстатки
			                |
			                |ДЛЯ ИЗМЕНЕНИЯ
			                |	РегистрНакопления.ПартииТоваровВПути.Остатки
			                |
			                |УПОРЯДОЧИТЬ ПО
			                |	ЭтаОрганизация УБЫВ
			                |;
			                |
			                |////////////////////////////////////////////////////////////////////////////////
			                |ВЫБРАТЬ
			                |	втТовары.СкладОтправитель,
			                |	втТовары.СкладПолучатель,
			                |	втТовары.Номенклатура,
			                |	втТовары.Качество,
			                |	втТовары.СтрокаПрихода,
			                |	втТовары.СтатусПартии,
			                |	втТовары.ДокументОснование,
			                |	втТовары.Количество,
			                |	втТовары.РаспределениеПартий
			                |ИЗ
			                |	втТовары КАК втТовары";
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
			Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
			Запрос.УстановитьПараметр("ПустаяСтрокаПрихода", Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка());
			Если ТипЗнч(вхФильтр) = Тип("Структура") и вхФильтр.Свойство("Номенклатура") Тогда 
				Запрос.Текст = СтрЗаменить(Запрос.Текст, " %УсловиеПоНоменклатуре%", " И ПеремещениеТоваровТовары.Номенклатура = &Номенклатура");
				Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, " %УсловиеПоНоменклатуре%", "");
			КонецЕсли;
			Результаты = Запрос.ВыполнитьПакет();
			ОстаткиПоСтрокамПрихода = Результаты[1].Выгрузить();
			
			ТаблицаПоFIFO = ОстаткиПоСтрокамПрихода.СкопироватьКолонки("СкладОтправитель,СкладПолучатель,Номенклатура,Качество,СтатусПартии,ДокументОснование,Количество");
			ТаблицаПоFIFO.Колонки.Добавить("РаспределениеПартий", Новый ОписаниеТипов("Строка"));
			
			Если ОстаткиПоСтрокамПрихода.Количество() > 0 Тогда  
				Товары = Результаты[2].Выбрать();
				Пока Товары.Следующий() Цикл 
					Отбор = Новый Структура("СкладОтправитель,СкладПолучатель,Номенклатура,Качество,СтрокаПрихода,СтатусПартии,ДокументОснование");
					ЗаполнитьЗначенияСвойств(Отбор, Товары);
					СтрокиОстатков = ОстаткиПоСтрокамПрихода.НайтиСтроки(Отбор);
					
					КоличествоРаспределить = Товары.Количество;
					ИндексСтроки = 0;
					Пока КоличествоРаспределить > 0 И ИндексСтроки < СтрокиОстатков.Количество() Цикл 
						СтрокаОст = СтрокиОстатков.Получить(ИндексСтроки);
						Если СтрокаОст.Количество > 0 Тогда 
							
							СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаОст.Количество);
			                СтрокаДвижений = ТаблицаДвиженийТвП.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаОст);
							
							СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
							СтрокаДвижений.Количество = СписываемоеКоличество;
							СтрокаДвижений.Регистратор = вхСсылкаНаДокумент;
							СтрокаДвижений.Период = Реквизиты.Дата;
							
							Если СтрокаДвижений.Количество <> СтрокаОст.Количество Тогда 
								СтрокаДвижений.СуммаРубли   = СтрокаДвижений.Количество * СтрокаДвижений.СуммаРубли/СтрокаОст.Количество;
								СтрокаДвижений.СуммаДоллары = СтрокаДвижений.Количество * СтрокаДвижений.СуммаДоллары/СтрокаОст.Количество;
								СтрокаДвижений.СуммаЕвро 	= СтрокаДвижений.Количество * СтрокаДвижений.СуммаЕвро/СтрокаОст.Количество;
							КонецЕсли;
							
							СтрокаДвиженийПТ = ТаблицаДвижений.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДвиженийПТ, СтрокаДвижений);
							СтрокаДвиженийПТ.Склад = СтрокаДвижений.СкладПолучатель;
							СтрокаДвиженийПТ.ВидДвижения = ВидДвиженияНакопления.Приход;

							Если Товары.РаспределениеПартий = "Недостача" Тогда 
								СтрокаДвиженийПТ.Качество = Справочники.Качество.Недостача;
							КонецЕсли;
							
							
							СтрокаОст.Количество   = СтрокаОст.Количество - СписываемоеКоличество;	
							СтрокаОст.СуммаРубли   = СтрокаОст.СуммаРубли - СтрокаДвижений.СуммаРубли;	
							СтрокаОст.СуммаДоллары = СтрокаОст.СуммаДоллары - СтрокаДвижений.СуммаДоллары;
							СтрокаОст.СуммаЕвро    = СтрокаОст.СуммаЕвро - СтрокаДвижений.СуммаЕвро;
							
							КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
						КонецЕсли;	
						ИндексСтроки = ИндексСтроки + 1;
					КонецЦикла;
					Если КоличествоРаспределить > 0 Тогда
						
						//Нет партий по данной строке прихода, пытаемся списать по FIFO 
						НоваяСтрока = ТаблицаПоFIFO.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Товары);
						НоваяСтрока.Количество = КоличествоРаспределить;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
			               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
			               |	ПеремещениеТоваровТовары.Номенклатура,
			               |	ПеремещениеТоваровТовары.Качество,
			               |	ВЫБОР
			               |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
			               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			               |	КОНЕЦ КАК СтатусПартии,
			               |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
			               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
			               |	""Нормальное"" КАК РаспределениеПартий
			               |ПОМЕСТИТЬ втТовары
			               |ИЗ
			               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			               |ГДЕ
			               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
			               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
			               |	И ПеремещениеТоваровТовары.СтрокаПрихода = &ПустаяСтрокаПрихода
			               |	И ПеремещениеТоваровТовары.Количество > 0   %УсловиеПоНоменклатуре%
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
			               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
			               |	ПеремещениеТоваровТовары.Номенклатура,
			               |	ПеремещениеТоваровТовары.Качество,
			               |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
			               |	ВЫБОР
			               |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
			               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			               |	КОНЕЦ
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
			               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
			               |	ПеремещениеТоваровТовары.Номенклатура,
			               |	ПеремещениеТоваровТовары.Качество,
			               |	ВЫБОР
			               |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
			               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			               |	КОНЕЦ,
			               |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
			               |	СУММА(ПеремещениеТоваровТовары.КоличествоПлан - ПеремещениеТоваровТовары.Количество),
			               |	""Недостача""
			               |ИЗ
			               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			               |ГДЕ
			               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
			               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
			               |	И ПеремещениеТоваровТовары.СтрокаПрихода = &ПустаяСтрокаПрихода
			               |	И ПеремещениеТоваровТовары.КоличествоПлан - ПеремещениеТоваровТовары.Количество > 0   %УсловиеПоНоменклатуре%
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
			               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
			               |	ПеремещениеТоваровТовары.Номенклатура,
			               |	ПеремещениеТоваровТовары.Качество,
			               |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
			               |	ВЫБОР
			               |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
			               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
			               |	КОНЕЦ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТаблицаДвижений.СкладОтправитель КАК СкладОтправитель,
			               |	ТаблицаДвижений.СкладПолучатель КАК СкладПолучатель,
			               |	ТаблицаДвижений.Номенклатура КАК Номенклатура,
			               |	ТаблицаДвижений.Качество КАК Качество,
			               |	ТаблицаДвижений.ДокументОснование КАК ДокументОснование,
			               |	ТаблицаДвижений.СтатусПартии КАК СтатусПартии,
			               |	ТаблицаДвижений.СтрокаПрихода КАК СтрокаПрихода,
			               |	ТаблицаДвижений.Организация КАК Организация,
			               |	ТаблицаДвижений.Количество КАК Количество,
			               |	ТаблицаДвижений.СуммаРубли КАК СуммаРубли,
			               |	ТаблицаДвижений.СуммаДоллары КАК СуммаДоллары,
			               |	ТаблицаДвижений.СуммаЕвро КАК СуммаЕвро
			               |ПОМЕСТИТЬ ТаблицаДвижений
			               |ИЗ
			               |	&ТаблицаДвижений КАК ТаблицаДвижений
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТаблицаДвижений.СкладОтправитель КАК СкладОтправитель,
			               |	ТаблицаДвижений.СкладПолучатель КАК СкладПолучатель,
			               |	ТаблицаДвижений.Номенклатура КАК Номенклатура,
			               |	ТаблицаДвижений.Качество КАК Качество,
			               |	ТаблицаДвижений.ДокументОснование КАК ДокументОснование,
			               |	ТаблицаДвижений.СтатусПартии КАК СтатусПартии,
			               |	ТаблицаДвижений.СтрокаПрихода КАК СтрокаПрихода,
			               |	ТаблицаДвижений.Организация КАК Организация,
			               |	СУММА(ТаблицаДвижений.Количество) КАК Количество,
			               |	СУММА(ТаблицаДвижений.СуммаРубли) КАК СуммаРубли,
			               |	СУММА(ТаблицаДвижений.СуммаДоллары) КАК СуммаДоллары,
			               |	СУММА(ТаблицаДвижений.СуммаЕвро) КАК СуммаЕвро
			               |ПОМЕСТИТЬ ТаблицаДвиженийСвернутая
			               |ИЗ
			               |	ТаблицаДвижений КАК ТаблицаДвижений
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ТаблицаДвижений.СкладОтправитель,
			               |	ТаблицаДвижений.СкладПолучатель,
			               |	ТаблицаДвижений.Номенклатура,
			               |	ТаблицаДвижений.Качество,
			               |	ТаблицаДвижений.Организация,
			               |	ТаблицаДвижений.СтрокаПрихода,
			               |	ТаблицаДвижений.СтатусПартии,
			               |	ТаблицаДвижений.ДокументОснование
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	СкладОтправитель,
			               |	СкладПолучатель,
			               |	Номенклатура,
			               |	Качество,
			               |	ДокументОснование,
			               |	СтатусПартии,
			               |	СтрокаПрихода,
			               |	Организация
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ПартииТоваровВПутиОстатки.СкладОтправитель,
			               |	ПартииТоваровВПутиОстатки.СкладПолучатель,
			               |	ПартииТоваровВПутиОстатки.Номенклатура,
			               |	ПартииТоваровВПутиОстатки.Качество,
			               |	ПартииТоваровВПутиОстатки.СтрокаПрихода,
			               |	ПартииТоваровВПутиОстатки.СтатусПартии,
			               |	ПартииТоваровВПутиОстатки.Организация,
			               |	ПартииТоваровВПутиОстатки.ДокументОснование,
			               |	ПартииТоваровВПутиОстатки.КоличествоОстаток - ЕСТЬNULL(ТаблицаДвиженийСвернутая.Количество, 0) КАК Количество,
			               |	ПартииТоваровВПутиОстатки.СуммаРублиОстаток - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаРубли, 0) КАК СуммаРубли,
			               |	ПартииТоваровВПутиОстатки.СуммаДолларыОстаток - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаДоллары, 0) КАК СуммаДоллары,
			               |	ПартииТоваровВПутиОстатки.СуммаЕвроОстаток - ЕСТЬNULL(ТаблицаДвиженийСвернутая.СуммаЕвро, 0) КАК СуммаЕвро,
			               |	ПартииТоваровВПутиОстатки.Организация = &Организация КАК ЭтаОрганизация,
			               |	ПартииТоваровВПутиОстатки.СтрокаПрихода.Дата КАК СтрокаПриходаДата
			               |ИЗ
			               |	РегистрНакопления.ПартииТоваровВПути.Остатки(
			               |			&КонПериода,
			               |			(СкладОтправитель, СкладПолучатель, Номенклатура, Качество, СтатусПартии, ДокументОснование) В
			               |				(ВЫБРАТЬ
			               |					втТовары.СкладОтправитель,
			               |					втТовары.СкладПолучатель,
			               |					втТовары.Номенклатура,
			               |					втТовары.Качество,
			               |					втТовары.СтатусПартии,
			               |					втТовары.ДокументОснование
			               |				ИЗ
			               |					втТовары КАК втТовары)) КАК ПартииТоваровВПутиОстатки
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДвиженийСвернутая КАК ТаблицаДвиженийСвернутая
			               |		ПО ПартииТоваровВПутиОстатки.СкладОтправитель = ТаблицаДвиженийСвернутая.СкладОтправитель
			               |			И ПартииТоваровВПутиОстатки.СкладПолучатель = ТаблицаДвиженийСвернутая.СкладПолучатель
			               |			И ПартииТоваровВПутиОстатки.Номенклатура = ТаблицаДвиженийСвернутая.Номенклатура
			               |			И ПартииТоваровВПутиОстатки.Качество = ТаблицаДвиженийСвернутая.Качество
			               |			И ПартииТоваровВПутиОстатки.ДокументОснование = ТаблицаДвиженийСвернутая.ДокументОснование
			               |			И ПартииТоваровВПутиОстатки.СтатусПартии = ТаблицаДвиженийСвернутая.СтатусПартии
			               |			И ПартииТоваровВПутиОстатки.СтрокаПрихода = ТаблицаДвиженийСвернутая.СтрокаПрихода
			               |			И ПартииТоваровВПутиОстатки.Организация = ТаблицаДвиженийСвернутая.Организация
			               |ГДЕ
			               |	ПартииТоваровВПутиОстатки.КоличествоОстаток - ЕСТЬNULL(ТаблицаДвиженийСвернутая.Количество, 0) > 0
			               |
			               |ДЛЯ ИЗМЕНЕНИЯ
			               |	РегистрНакопления.ПартииТоваровВПути.Остатки
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ЭтаОрганизация УБЫВ,
			               |	СтрокаПриходаДата
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	втТовары.СкладОтправитель,
			               |	втТовары.СкладПолучатель,
			               |	втТовары.Номенклатура,
			               |	втТовары.Качество,
			               |	втТовары.СтатусПартии,
			               |	втТовары.ДокументОснование,
			               |	втТовары.Количество,
			               |	втТовары.РаспределениеПартий
			               |ИЗ
			               |	втТовары КАК втТовары";
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Запрос.УстановитьПараметр("ПустаяСтрокаПрихода", Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка());
			Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвиженийТвП);
			Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
			Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
			
			Если ТипЗнч(вхФильтр) = Тип("Структура") и вхФильтр.Свойство("Номенклатура") Тогда 
				Запрос.Текст = СтрЗаменить(Запрос.Текст, " %УсловиеПоНоменклатуре%", " И ПеремещениеТоваровТовары.Номенклатура = &Номенклатура");
				Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, " %УсловиеПоНоменклатуре%", "");
			КонецЕсли;
			
			Результаты = Запрос.ВыполнитьПакет();
			ОстаткиПоFIFO = Результаты[3].Выгрузить();
			Товары = Результаты[4].Выгрузить();
			Для Каждого СтрокаТЧ Из ТаблицаПоFIFO Цикл 
				ЗаполнитьЗначенияСвойств(Товары.Добавить(), СтрокаТЧ);
			КонецЦикла;
			Товары.Свернуть("СкладОтправитель,СкладПолучатель,Номенклатура,Качество,СтатусПартии,ДокументОснование,РаспределениеПартий", "Количество");
			
			Для Каждого СтрокаТовары Из Товары Цикл 
				Отбор = Новый Структура("СкладОтправитель,СкладПолучатель,Номенклатура,Качество,СтатусПартии,ДокументОснование");
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовары);
				СтрокиОстатков = ОстаткиПоFIFO.НайтиСтроки(Отбор);
				
				КоличествоРаспределить = СтрокаТовары.Количество;
				ИндексСтроки = 0;
				Пока КоличествоРаспределить > 0 И ИндексСтроки < СтрокиОстатков.Количество() Цикл
					СтрокаОст = СтрокиОстатков.Получить(ИндексСтроки);
					Если СтрокаОст.Количество > 0 Тогда 
						СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаОст.Количество);
						СтрокаДвижений = ТаблицаДвиженийТвП.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаОст);
						
						СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
						СтрокаДвижений.Количество = СписываемоеКоличество;
						СтрокаДвижений.Регистратор = вхСсылкаНаДокумент;
						СтрокаДвижений.Период = Реквизиты.Дата;
						
						Если СтрокаДвижений.Количество <> СтрокаОст.Количество Тогда 
							СтрокаДвижений.СуммаРубли   = СтрокаДвижений.Количество * СтрокаДвижений.СуммаРубли/СтрокаОст.Количество;
							СтрокаДвижений.СуммаДоллары = СтрокаДвижений.Количество * СтрокаДвижений.СуммаДоллары/СтрокаОст.Количество;
							СтрокаДвижений.СуммаЕвро 	= СтрокаДвижений.Количество * СтрокаДвижений.СуммаЕвро/СтрокаОст.Количество;
						КонецЕсли;
						
						СтрокаДвиженийПТ = ТаблицаДвижений.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДвиженийПТ, СтрокаДвижений);
						СтрокаДвиженийПТ.Склад = СтрокаДвижений.СкладПолучатель;
						СтрокаДвиженийПТ.ВидДвижения = ВидДвиженияНакопления.Приход;
						
						Если СтрокаТовары.РаспределениеПартий = "Недостача" Тогда 
							СтрокаДвиженийПТ.Качество = Справочники.Качество.Недостача;
						КонецЕсли;

						СтрокаОст.Количество   = СтрокаОст.Количество - СписываемоеКоличество;	
						СтрокаОст.СуммаРубли   = СтрокаОст.СуммаРубли - СтрокаДвижений.СуммаРубли;	
						СтрокаОст.СуммаДоллары = СтрокаОст.СуммаДоллары - СтрокаДвижений.СуммаДоллары;
						СтрокаОст.СуммаЕвро    = СтрокаОст.СуммаЕвро - СтрокаДвижений.СуммаЕвро;
						
						КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
					КонецЕсли;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЦикла;
				Если КоличествоРаспределить > 0 Тогда
					Сообщить("[ПогашениеПартийТоваровВПути]: не удалось списать по партиям номенклатуру " + СтрокаТовары.Номенклатура + " в количестве " + КоличествоРаспределить + " с качеством " + СтрокаТовары.Качество + " документ основание: " + СтрокаТовары.ДокументОснование);
					вхОтказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураТаблиц.ПартииТоваровВПути = ТаблицаДвиженийТвП;
			СтруктураТаблиц.ПартииТоваров = ТаблицаДвижений;
		КонецЕсли;
	Иначе
		ВозврСтруктураТаблиц = ПроведениеДокументовКлиентСервер.ПогашениеПартийТоваровНовое(вхСсылкаНаДокумент, вхОтказ,, вхФильтр);
		ТаблицаДвижений = ВозврСтруктураТаблиц.ПартииТоваров;
		ТаблицаДвиженийVMI = ВозврСтруктураТаблиц.ПартииТоваровVMI;
			
		СтруктураТаблиц.ПартииТоваров 	 = ТаблицаДвижений;
		СтруктураТаблиц.ПартииТоваровVMI = ТаблицаДвиженийVMI;
	КонецЕсли;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция РегистрыНакопления_ТоварыКРезервированию(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыКРезервированию", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВидОперации,ДокументОснование");
	
	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	ПеремещенияВыгружаютсяИз77 = глЗначениеПеременной("ПеремещенияВыгружаютсяИз77");	
	Если Не ПеремещенияВыгружаютсяИз77 Тогда 
		Если Не ((Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ОтгрузкаТопЛог И (Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровВыгруженВТопЛог ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил))
			Или (Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение И Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил)) Тогда
			Возврат ТаблицаДвижений;
		КонецЕсли;
	Иначе
		Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый Тогда
			Возврат ТаблицаДвижений;
		КонецЕсли;
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
	               |	ПеремещениеТоваровТовары.Номенклатура,
	               |	ПеремещениеТоваровТовары.СтрокаЗаявки
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	               |	И ПеремещениеТоваровТовары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки";
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ТоварыКРезервированию");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтрокаЗаявки", "СтрокаЗаявки");
	
	БлокировкаДанных.Заблокировать();
	
	//Если Не (ЗначениеЗаполнено(Реквизиты.ДокументОснование) И ТипЗнч(Реквизиты.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда 
	//	Возврат ТаблицаДвижений;
	//КонецЕсли;
				
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ПеремещениеТоваровТовары.Ссылка КАК Регистратор,
	//               |	ПеремещениеТоваровТовары.Ссылка.Дата КАК Период,
	//               |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	//               |	ПеремещениеТоваровТовары.СтрокаПрихода,
	//               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
	//               |	ПеремещениеТоваровТовары.Номенклатура,
	//               |	ПеремещениеТоваровТовары.КоличествоПлан КАК Количество,
	//               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	//               |ПОМЕСТИТЬ втТовары
	//               |ИЗ
	//               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	//               |ГДЕ
	//               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	//               |	И ПеремещениеТоваровТовары.Поступление <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	//               |	И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	втТовары.ВидДвижения,
	//               |	втТовары.Регистратор,
	//               |	втТовары.Период,
	//               |	втТовары.СтрокаЗаявки,
	//               |	ТоварыКРезервированиюОстатки.СтрокаПрихода,
	//               |	втТовары.Склад,
	//               |	втТовары.Номенклатура,
	//               |	ВЫБОР
	//               |		КОГДА втТовары.Количество < ТоварыКРезервированиюОстатки.КоличествоОстаток
	//               |			ТОГДА втТовары.Количество
	//               |		ИНАЧЕ ТоварыКРезервированиюОстатки.КоличествоОстаток
	//               |	КОНЕЦ КАК Количество
	//               |ИЗ
	//               |	втТовары КАК втТовары
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКРезервированию.Остатки(
	//               |				&КонПериода,
	//               |				(СтрокаЗаявки, СтрокаПрихода, Склад, Номенклатура) В
	//               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |						втТовары.СтрокаЗаявки,
	//               |						втТовары.СтрокаПрихода,
	//               |						втТовары.Склад,
	//               |						втТовары.Номенклатура
	//               |					ИЗ
	//               |						втТовары КАК втТовары)) КАК ТоварыКРезервированиюОстатки
	//               |		ПО втТовары.СтрокаЗаявки = ТоварыКРезервированиюОстатки.СтрокаЗаявки
	//               |			И втТовары.Склад = ТоварыКРезервированиюОстатки.Склад
	//               |			И втТовары.Номенклатура = ТоварыКРезервированиюОстатки.Номенклатура
	//               |			И втТовары.СтрокаПрихода = ТоварыКРезервированиюОстатки.СтрокаПрихода
	//               |ГДЕ
	//               |	ВЫБОР
	//               |			КОГДА втТовары.Количество < ТоварыКРезервированиюОстатки.КоличествоОстаток
	//               |				ТОГДА втТовары.Количество
	//               |			ИНАЧЕ ТоварыКРезервированиюОстатки.КоличествоОстаток
	//               |		КОНЕЦ > 0";
	//	
	//Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
	//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);	
	//
	//Возврат ТаблицаДвижений;
	//
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
	               |	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	               |	ПеремещениеТоваровТовары.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ПеремещениеТоваровТовары.СтрокаПрихода КАК СтрокаПрихода,
	               |	ПеремещениеТоваровТовары.КоличествоПлан КАК Количество
	               |ПОМЕСТИТЬ втТовары
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Склад,
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыКРезервированиюОстатки.Склад,
	               |	ТоварыКРезервированиюОстатки.Номенклатура,
	               |	ТоварыКРезервированиюОстатки.СтрокаЗаявки,
	               |	ТоварыКРезервированиюОстатки.СтрокаПрихода,
	               |	ТоварыКРезервированиюОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ТоварыКРезервированию.Остатки(
	               |			&КонПериода,
	               |			(Номенклатура, Склад, СтрокаЗаявки) В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					втТовары.Номенклатура,
	               |					втТовары.Склад,
	               |					втТовары.СтрокаЗаявки
	               |				ИЗ
	               |					втТовары)) КАК ТоварыКРезервированиюОстатки
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрНакопления.ТоварыКРезервированию.Остатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТовары.Склад,
	               |	втТовары.Номенклатура,
	               |	втТовары.СтрокаЗаявки,
	               |	втТовары.СтрокаПрихода,
	               |	втТовары.Количество
	               |ИЗ
	               |	втТовары КАК втТовары";
				   
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[1].Выгрузить();
	Товары = Результаты[2].Выбрать();
	ТаблицаНеудалосьРаспределить = Выборка.СкопироватьКолонки();
	
	Пока Товары.Следующий() Цикл 
		Отбор = Новый Структура("Склад,Номенклатура,СтрокаЗаявки,СтрокаПрихода");
		ЗаполнитьЗначенияСвойств(Отбор, Товары);
		Строки = Выборка.НайтиСтроки(Отбор);
		
		КоличествоРаспределить = Товары.Количество;
		ИндексСтроки = 0;
		Пока КоличествоРаспределить > 0 И ИндексСтроки < Строки.Количество() Цикл 
			СтрокаТовКРезерв = Строки.Получить(ИндексСтроки);
			Если СтрокаТовКРезерв.Количество > 0 Тогда 
				СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаТовКРезерв.Количество);
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТовКРезерв);
				СтрокаДвижений.Количество = СписываемоеКоличество;
				СтрокаТовКРезерв.Количество = СтрокаТовКРезерв.Количество - СписываемоеКоличество;
				КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		Если КоличествоРаспределить > 0 Тогда 
			НоваяСтрока = ТаблицаНеудалосьРаспределить.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Товары);
			НоваяСтрока.Количество = КоличествоРаспределить;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаНеудалосьРаспределить Цикл 
		Отбор = Новый Структура("Склад,Номенклатура,СтрокаЗаявки");
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		Строки = Выборка.НайтиСтроки(Отбор);
		
		КоличествоРаспределить = Строка.Количество;
		ИндексСтроки = 0;
		Пока КоличествоРаспределить > 0 И ИндексСтроки < Строки.Количество() Цикл
			СтрокаТовКРезерв = Строки.Получить(ИндексСтроки);
			Если СтрокаТовКРезерв.Количество > 0 Тогда 
				СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаТовКРезерв.Количество);
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТовКРезерв);
				СтрокаДвижений.Количество = СписываемоеКоличество;
				СтрокаТовКРезерв.Количество = СтрокаТовКРезерв.Количество - СписываемоеКоличество;
				КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(вхСсылкаНаДокумент, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");

	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ТоварыВПути(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыВПути", ТаблицаДвижений);
	
	ПеремещенияВыгружаютсяИз77 = глЗначениеПеременной("ПеремещенияВыгружаютсяИз77");	
	Если ПеремещенияВыгружаютсяИз77 Тогда 
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВидОперации,ДокументОснование");
		
	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               |	ПеремещениеТоваровТовары.Ссылка КАК Регистратор,
	               |	ПеремещениеТоваровТовары.Ссылка.Дата КАК Период,
	               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
	               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
	               |	ПеремещениеТоваровТовары.Номенклатура,
	               |	ПеремещениеТоваровТовары.Качество,
	               |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	               |	ПеремещениеТоваровТовары.Ссылка КАК ДокументОснование,
	               |	ВЫБОР
	               |		КОГДА ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
	               |			ТОГДА ПеремещениеТоваровТовары.Количество
	               |		ИНАЧЕ ПеремещениеТоваровТовары.КоличествоПлан
	               |	КОНЕЦ КАК Количество
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка.Ссылка = &Ссылка
	               |	И ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ОтгрузкаТопЛог)
	               |	И ВЫБОР
	               |			КОГДА ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
	               |				ТОГДА ПеремещениеТоваровТовары.Количество
	               |			ИНАЧЕ ПеремещениеТоваровТовары.КоличествоПлан
	               |		КОНЕЦ > 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	               |	ПеремещениеТоваровТовары.Ссылка,
	               |	ПеремещениеТоваровТовары.Ссылка.Дата,
	               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
	               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
	               |	ПеремещениеТоваровТовары.Номенклатура,
	               |	ПеремещениеТоваровТовары.Качество,
	               |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	               |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
	               |	ПеремещениеТоваровТовары.КоличествоПлан
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка.Ссылка = &Ссылка
	               |	И ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог)
	               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)";
				   
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);	
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ПополнениеСклада(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	ТаблицаДвижений = Новый ТаблицаЗначений;  
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПополнениеСклада", ТаблицаДвижений);
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВидОперации,ДокументОснование");
		
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;

	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	ПеремещенияВыгружаютсяИз77 = глЗначениеПеременной("ПеремещенияВыгружаютсяИз77");	
	Если Не ПеремещенияВыгружаютсяИз77 Тогда 
		Если Не (Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил И (Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение)) Тогда
			Возврат ТаблицаДвижений;
		КонецЕсли;
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог Тогда 
			ДокументОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.ДокументОснование, "ДокументОснование");
		ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение Тогда 
			ДокументОснование = Реквизиты.ДокументОснование;
		КонецЕсли;
		
	Иначе
		Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый Тогда
			Возврат ТаблицаДвижений;
		КонецЕсли;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.Ссылка КАК Регистратор,
	               |	ПеремещениеТоваровТовары.Ссылка.Дата КАК Период,
	               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель КАК Склад,
	               |	ПеремещениеТоваровТовары.Номенклатура,
	               |	ПеремещениеТоваровТовары.Качество,
	               |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	               |	ПеремещениеТоваровТовары.Количество
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	               |	И ПеремещениеТоваровТовары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки
				   //|	И ПеремещениеТоваровТовары.СтрокаЗаявки.ПрайсПоставщика.Склад = &ПустойСклад
	               |	И ПеремещениеТоваровТовары.Количество > 0
	               |	И ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.ПополнениеСклада)
	               |	И ПеремещениеТоваровТовары.Поступление <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	               |	И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	
	Возврат ТаблицаДвижений;

КонецФункции

Функция РегистрыНакопления_ОтказыПоЗаявкам(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ОтказыПоЗаявкам", ТаблицаДвижений);
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВидОперации,ДокументОснование");
	
	ПеремещенияВыгружаютсяИз77 = глЗначениеПеременной("ПеремещенияВыгружаютсяИз77");	
	
	Если Не ПеремещенияВыгружаютсяИз77 Тогда 
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Ссылка КАК Регистратор,
	                |	ПеремещениеТоваровТовары.Ссылка.Дата КАК Период,
	                |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	                |	&ПричинаОтказа,
	                |	ПеремещениеТоваровТовары.КоличествоПлан - ПеремещениеТоваровТовары.Количество КАК Количество
	                |ИЗ
	                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |	И ПеремещениеТоваровТовары.КоличествоПлан - ПеремещениеТоваровТовары.Количество > 0
	                |	И ПеремещениеТоваровТовары.Поступление <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	                |	И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПричинаОтказа", Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаДвижений);
	
	Возврат ТаблицаДвижений;
	
КонецФункции

//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьМетаданные()
	Возврат Метаданные.Документы.ПеремещениеТоваров;	
КонецФункции

Функция ТаблицыДляРасчетаСписанияПоПартиям(вхСсылкаНаДокумент, вхФильтр = Неопределено) Экспорт
	
	ПеремещенияВыгружаютсяИз77 = глЗначениеПеременной("ПеремещенияВыгружаютсяИз77");	
	Если Не ПеремещенияВыгружаютсяИз77 Тогда 	
 
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		                |	ПеремещениеТоваровТовары.Ссылка,
		                |	ПеремещениеТоваровТовары.Ссылка.Дата,
		                |	ПеремещениеТоваровТовары.Номенклатура,
		                |	ПеремещениеТоваровТовары.КоличествоПлан КАК Количество,
		                |	ПеремещениеТоваровТовары.СтрокаПрихода,
		                |	""Списание"" КАК ВидСписания,
		                |	ПеремещениеТоваровТовары.СтрокаПрихода = &ПустаяСтрокаПрихода КАК ПустаяСтрокаПрихода,
		                |	ВЫБОР
		                |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.СкладVMI
		                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		                |	КОНЕЦ КАК СтатусПартии,
		                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
		                |	ПеремещениеТоваровТовары.Качество,
		                |	NULL КАК СкладПеремещения,
		                |	NULL КАК КачествоПеремещения
		                |ИЗ
		                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		                |ГДЕ
		                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		                |	И ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение) %УсловиеПоНоменклатуре%
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ
		                |	ПеремещениеТоваровТовары.Ссылка,
		                |	ПеремещениеТоваровТовары.Ссылка.Дата,
		                |	ПеремещениеТоваровТовары.Номенклатура,
		                |	ВЫБОР
		                |		КОГДА ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
		                |			ТОГДА ПеремещениеТоваровТовары.Количество
		                |		ИНАЧЕ ПеремещениеТоваровТовары.КоличествоПлан
		                |	КОНЕЦ,
		                |	ПеремещениеТоваровТовары.СтрокаПрихода,
		                |	""Списание"",
		                |	ПеремещениеТоваровТовары.СтрокаПрихода = &ПустаяСтрокаПрихода,
		                |	ВЫБОР
		                |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.СкладVMI
		                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		                |	КОНЕЦ,
		                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
		                |	ПеремещениеТоваровТовары.Качество,
		                |	NULL,
		                |	NULL
		                |ИЗ
		                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		                |ГДЕ
		                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		                |	И ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ОтгрузкаТопЛог)
		                |	И ВЫБОР
		                |			КОГДА ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
		                |				ТОГДА ПеремещениеТоваровТовары.Количество
		                |			ИНАЧЕ ПеремещениеТоваровТовары.КоличествоПлан
		                |		КОНЕЦ > 0  %УсловиеПоНоменклатуре%
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ
		                |	ПеремещениеТоваровТовары.Ссылка,
		                |	ПеремещениеТоваровТовары.Ссылка.Дата,
		                |	ПеремещениеТоваровТовары.Номенклатура,
		                |	ПеремещениеТоваровТовары.КоличествоПлан,
		                |	ПеремещениеТоваровТовары.СтрокаПрихода,
		                |	""Перемещение"",
		                |	ПеремещениеТоваровТовары.СтрокаПрихода = &ПустаяСтрокаПрихода,
		                |	ВЫБОР
		                |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.СкладVMI
		                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		                |	КОНЕЦ,
		                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
		                |	ПеремещениеТоваровТовары.Качество,
		                |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
		                |	ЗНАЧЕНИЕ(Справочник.Качество.Недостача)
		                |ИЗ
		                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		                |ГДЕ
		                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		                |	И ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение) %УсловиеПоНоменклатуре%
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ
		                |	ПеремещениеТоваровТовары.Ссылка,
		                |	ПеремещениеТоваровТовары.Ссылка.Дата,
		                |	ПеремещениеТоваровТовары.Номенклатура,
		                |	ВЫБОР
		                |		КОГДА ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
		                |			ТОГДА ПеремещениеТоваровТовары.КоличествоПлан - ПеремещениеТоваровТовары.Количество
		                |		ИНАЧЕ 0
		                |	КОНЕЦ,
		                |	ПеремещениеТоваровТовары.СтрокаПрихода,
		                |	""Перемещение"",
		                |	ПеремещениеТоваровТовары.СтрокаПрихода = &ПустаяСтрокаПрихода,
		                |	ВЫБОР
		                |		КОГДА ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.СкладVMI
		                |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		                |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		                |	КОНЕЦ,
		                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
		                |	ПеремещениеТоваровТовары.Качество,
		                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
		                |	ЗНАЧЕНИЕ(Справочник.Качество.Недостача)
		                |ИЗ
		                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		                |ГДЕ
		                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		                |	И ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ОтгрузкаТопЛог)
		                |	И ВЫБОР
		                |			КОГДА ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
		                |				ТОГДА ПеремещениеТоваровТовары.КоличествоПлан - ПеремещениеТоваровТовары.Количество
		                |			ИНАЧЕ 0
		                |		КОНЕЦ > 0 %УсловиеПоНоменклатуре%";
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Запрос.УстановитьПараметр("ПустаяСтрокаПрихода", Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", " И ПеремещениеТоваровТовары.Номенклатура");
		Если ТипЗнч(вхФильтр) = Тип("Структура") и вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", " И ПеремещениеТоваровТовары.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", "");
		КонецЕсли;

	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		                |	ПеремещениеТоваровТовары.Ссылка,
		                |	ПеремещениеТоваровТовары.Ссылка.Дата,
		                |	ПеремещениеТоваровТовары.Номенклатура,
		                |	ПеремещениеТоваровТовары.Количество КАК Количество,
		                |	ПеремещениеТоваровТовары.СтрокаПрихода,
		                |	""Перемещение"" КАК ВидСписания,
		                |	ПеремещениеТоваровТовары.СтрокаПрихода = &ПустаяСтрокаПрихода КАК ПустаяСтрокаПрихода,
		                |	ВЫБОР
		                |		КОГДА ПеремещениеТоваровТовары.Поступление = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		                |				ИЛИ НЕ ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии
		                |			ТОГДА ВЫБОР
		                |					КОГДА ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
		                |						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		                |					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		                |				КОНЕЦ
		                |		ИНАЧЕ ВЫБОР
		                |				КОГДА ПеремещениеТоваровТовары.Поступление.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.ОтветХранение)
		                |					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		                |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		                |			КОНЕЦ
		                |	КОНЕЦ КАК СтатусПартии,
		                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
		                |	ПеремещениеТоваровТовары.Качество,
		                |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель КАК СкладПеремещения,
		                |	ПеремещениеТоваровТовары.Качество КАК КачествоПеремещения,
		                |	ВЫБОР
		                |		КОГДА ПеремещениеТоваровТовары.Поступление = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		                |				ИЛИ НЕ ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии
		                |			ТОГДА ВЫБОР
		                |					КОГДА ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.СкладVMI
		                |						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		                |					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		                |				КОНЕЦ
		                |		ИНАЧЕ ВЫБОР
		                |				КОГДА ПеремещениеТоваровТовары.Поступление.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.ОтветХранение)
		                |					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)
		                |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный)
		                |			КОНЕЦ
		                |	КОНЕЦ КАК СтатусПартииПеремещения,
		                |	(ПеремещениеТоваровТовары.Поступление = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		                |		ИЛИ НЕ ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии)
		                |		И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
		                |		И НЕ ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.СкладVMI КАК ОприходоватьПоVMI,
		                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии КАК ИгнорироватьСтатусПартии,
		                |	ВЫБОР
		                |		КОГДА ПеремещениеТоваровТовары.Организация = &ПустаяОрганизация
		                |			ТОГДА ПеремещениеТоваровТовары.Ссылка.Организация
		                |		ИНАЧЕ ПеремещениеТоваровТовары.Организация
		                |	КОНЕЦ КАК Организация,
		                |	((ПеремещениеТоваровТовары.Поступление = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		                |			ИЛИ НЕ ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии)
		                |			И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
		                |		ИЛИ ПеремещениеТоваровТовары.Поступление <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		                |			И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии
		                |			И ПеремещениеТоваровТовары.Поступление.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.ОтветХранение))
		                |		И (НЕ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА)
		                |			И ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) <> &ПустаяЗаявка) КАК УчитыватьПоставщика,
		                |	ПеремещениеТоваровТовары.СтрокаЗаявки.Поставщик КАК Поставщик,
		                |	ВЫБОР
		                |		КОГДА (ПеремещениеТоваровТовары.Поступление = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		                |					ИЛИ НЕ ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии)
		                |					И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.СкладVMI
		                |				ИЛИ ПеремещениеТоваровТовары.Поступление <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		                |					И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ПриРазмещенииИгнорироватьСтатусПартии
		                |					И ПеремещениеТоваровТовары.Поступление.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.ОтветХранение)
		                |			ТОГДА &ВидДоговора1
		                |		ИНАЧЕ &ВидДоговора2
		                |	КОНЕЦ КАК ВидДоговора,
		                |	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтрокиВДокументе,
		                |	ИСТИНА КАК ВнутреннееПеремещение
		                |ИЗ
		                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		                |ГДЕ
		                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		                |	И (ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение)
		                |			ИЛИ ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог))
		                |	И ПеремещениеТоваровТовары.Количество > 0";
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Запрос.УстановитьПараметр("ПустаяСтрокаПрихода", Справочники.ИдентификаторыСтрокПриходов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
		Запрос.УстановитьПараметр("ВидДоговора1", Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение);
		Запрос.УстановитьПараметр("ВидДоговора2", Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
		Если ТипЗнч(вхФильтр) = Тип("Структура") и вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = Запрос.Текст + " И ПеремещениеТоваровТовары.Номенклатура = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ТаблицаДляКонтроляОстатков(вхСсылкаНаДокумент) Экспорт 
	
	ПеремещенияВыгружаютсяИз77 = глЗначениеПеременной("ПеремещенияВыгружаютсяИз77");	
	Если Не ПеремещенияВыгружаютсяИз77 Тогда 	

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Качество,
		               |	СУММА(ПеремещениеТоваровТовары.КоличествоПлан) КАК Количество
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И (ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ОтгрузкаТопЛог)
		               |			ИЛИ ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение))
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Качество";
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Качество,
		               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И (ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог)
		               |			ИЛИ ПеремещениеТоваровТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение))
		               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Качество";
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура КонтрольОстатковТоваровВПути(вхСсылкаНаДокумент, вхОтказ) Экспорт
	
	Если глЗначениеПеременной("ПеремещенияВыгружаютсяИз77") Тогда 
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВидОперации");
	
	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары ИЛИ Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог Тогда 
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента <> Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
	                |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.Качество,
	                |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	                |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
	                |	СУММА(ПеремещениеТоваровТовары.КоличествоПлан) КАК Количество
	                |ПОМЕСТИТЬ втТовары
	                |ИЗ
	                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование,
	                |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
	                |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель,
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	                |	ПеремещениеТоваровТовары.Качество
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втТовары.СкладОтправитель,
	                |	втТовары.СкладПолучатель,
	                |	втТовары.Номенклатура,
	                |	втТовары.Качество,
	                |	втТовары.СтрокаЗаявки,
	                |	втТовары.ДокументОснование,
	                |	втТовары.Количество - ЕСТЬNULL(ТоварыВПутиОстатки.КоличествоОстаток, 0) КАК Количество
	                |ИЗ
	                |	втТовары КАК втТовары
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВПути.Остатки(
	                |				&КонПериода,
	                |				(СкладОтправитель, СкладПолучатель, Номенклатура, Качество, СтрокаЗаявки, ДокументОснование) В
	                |					(ВЫБРАТЬ
	                |						втТовары.СкладОтправитель,
	                |						втТовары.СкладПолучатель,
	                |						втТовары.Номенклатура,
	                |						втТовары.Качество,
	                |						втТовары.СтрокаЗаявки,
	                |						втТовары.ДокументОснование
	                |					ИЗ
	                |						втТовары)) КАК ТоварыВПутиОстатки
	                |		ПО втТовары.СкладОтправитель = ТоварыВПутиОстатки.СкладОтправитель
	                |			И втТовары.СкладПолучатель = ТоварыВПутиОстатки.СкладПолучатель
	                |			И втТовары.Номенклатура = ТоварыВПутиОстатки.Номенклатура
	                |			И втТовары.Качество = ТоварыВПутиОстатки.Качество
	                |			И втТовары.СтрокаЗаявки = ТоварыВПутиОстатки.СтрокаЗаявки
	                |			И втТовары.ДокументОснование = ТоварыВПутиОстатки.ДокументОснование
	                |ГДЕ
	                |	втТовары.Количество - ЕСТЬNULL(ТоварыВПутиОстатки.КоличествоОстаток, 0) > 0";
					
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			вхОтказ = Истина;
			Сообщить("[КонтрольОстатковТоваровПути]: по документу-основанию: " + Выборка.ДокументОснование + " не хватает остатка " + Выборка.Номенклатура + " с качеством " + Выборка.Качество + " в количестве " + Выборка.Количество);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Данные.ДокументОснование) И ТипЗнч(Данные.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
		СтандартнаяОбработка = Ложь;
		Представление = "Перемещение товаров " + Данные.Номер + " от " + Данные.Дата + " (Размещение)";
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ДокументОснование");
КонецПроцедуры

Функция ПолучитьЗаписиПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, Проведение) Экспорт 
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = вхСсылкаНаДокумент.Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) тогда
		Если Проведение 
			И Дата >= ПараметрыСеанса.ДатаНачалаРаботыТовары 
			И Дата >= глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ПеремещениеТоваровТовары.Ссылка.Дата КАК Период,
			               |	ПеремещениеТоваровТовары.Ссылка КАК Регистратор,
			               |	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура
			               |ИЗ
			               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			               |ГДЕ
			               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ЗаполнитьЗначенияСвойств(лРезультат.Добавить(), Выборка); 
			КонецЦикла;
		КонецЕсли;
		
		Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
		
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Процедура ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Функция ПолучитьДанныеГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхФильтр = Неопределено) Экспорт
	
	Результат = Неопределено;
	лМетаданныеПоследовательности = Неопределено;
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеГраницПоследовательности]: неправильный параметр номер 2.";	
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) тогда
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.ПартииТоваров, вхФильтр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура КонтрольОстатков(вхСсылкаНаДокумент, вхОтказ, вхПараметры) Экспорт
	
	Перем ОтключитьКонтрольОстатков;
		
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "СтатусДокумента,Дата");
	
	СтатусДокумента = Реквизиты.СтатусДокумента;
	ДатаДокумента = Реквизиты.Дата;
	

	Если Не (СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил) Тогда
		Возврат;
	КонецЕсли;
		
	Если ДатаДокумента < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат;
	КонецЕсли;

	Если ДатаДокумента < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат;
	КонецЕсли;
		
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
	//               |	ПеремещениеТоваровТовары.Номенклатура,
	//               |	ПеремещениеТоваровТовары.Качество,
	//               |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	//               |	ВЫБОР
	//               |		КОГДА ПеремещениеТоваровТовары.КоличествоПлан >= ПеремещениеТоваровТовары.Количество
	//               |			ТОГДА ПеремещениеТоваровТовары.КоличествоПлан
	//               |		ИНАЧЕ ПеремещениеТоваровТовары.Количество
	//               |	КОНЕЦ КАК Количество
	//               |ИЗ
	//               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	//               |ГДЕ
	//               |	ПеремещениеТоваровТовары.Поступление = &ПустоеПоступление
	//               |	И ПеремещениеТоваровТовары.СтрокаЗаявки <> &ПустаяСтрокаЗаявки
	//               |	И ПеремещениеТоваровТовары.Ссылка = &Ссылка
	//               |	И НЕ ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная";
	//Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//Запрос.УстановитьПараметр("ПустоеПоступление", Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
	//Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда 
	//	Возврат;
	//КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ОтключитьКонтрольОстатков", ОтключитьКонтрольОстатков) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
	|	ПеремещениеТоваровТовары.Качество,
	|	ПеремещениеТоваровТовары.СтрокаЗаявки,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	|	И ПеремещениеТоваровТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
	|	ПеремещениеТоваровТовары.Качество,
	|	ПеремещениеТоваровТовары.СтрокаЗаявки";
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	втТовары = РезультатЗапроса.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	втТовары.Склад КАК Склад,
	               |	втТовары.Номенклатура КАК Номенклатура,
	               |	втТовары.Качество КАК Качество,
	               |	втТовары.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	втТовары.Количество КАК Количество
	               |ПОМЕСТИТЬ втТовары
	               |ИЗ
	               |	&втТовары КАК втТовары
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Склад,
	               |	Качество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РезервыТоваровОстатки.Склад КАК Склад,
	               |	РезервыТоваровОстатки.Номенклатура КАК Номенклатура,
	               |	РезервыТоваровОстатки.Качество КАК Качество,
	               |	РезервыТоваровОстатки.КоличествоОстаток
	               |ПОМЕСТИТЬ втНашРезерв
	               |ИЗ
	               |	РегистрНакопления.РезервыТоваров.Остатки(
	               |			&КонПериода,
	               |			(Склад, Номенклатура, Качество, СтрокаЗаявки) В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					втТовары.Склад,
	               |					втТовары.Номенклатура,
	               |					втТовары.Качество,
	               |					втТовары.СтрокаЗаявки
	               |				ИЗ
	               |					втТовары КАК втТовары)) КАК РезервыТоваровОстатки
	               |ГДЕ
	               |	РезервыТоваровОстатки.КоличествоОстаток > 0
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрНакопления.РезервыТоваров.Остатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Склад,
	               |	Качество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РезервыТоваровОстатки.Склад КАК Склад,
	               |	РезервыТоваровОстатки.Номенклатура КАК Номенклатура,
	               |	РезервыТоваровОстатки.Качество КАК Качество,
	               |	РезервыТоваровОстатки.КоличествоОстаток
	               |ПОМЕСТИТЬ втРезерв
	               |ИЗ
	               |	РегистрНакопления.РезервыТоваров.Остатки(
	               |			&КонПериода,
	               |			(Склад, Номенклатура, Качество) В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					втТовары.Склад,
	               |					втТовары.Номенклатура,
	               |					втТовары.Качество
	               |				ИЗ
	               |					втТовары КАК втТовары)) КАК РезервыТоваровОстатки
	               |ГДЕ
	               |	РезервыТоваровОстатки.КоличествоОстаток > 0
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Склад,
	               |	Качество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТовары.Склад КАК Склад,
	               |	втТовары.Номенклатура КАК Номенклатура,
	               |	втТовары.Качество КАК Качество,
	               |	СУММА(втТовары.Количество) КАК Количество
	               |ПОМЕСТИТЬ втТоварыСвернутая
	               |ИЗ
	               |	втТовары КАК втТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втТовары.Склад,
	               |	втТовары.Номенклатура,
	               |	втТовары.Качество
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Склад,
	               |	Качество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Качество КАК Качество,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток
	               |ПОМЕСТИТЬ втТоварыНаСкладах
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&КонПериода,
	               |			(Номенклатура, Склад, Качество) В
	               |				(ВЫБРАТЬ
	               |					втТоварыСвернутая.Номенклатура,
	               |					втТоварыСвернутая.Склад,
	               |					втТоварыСвернутая.Качество
	               |				ИЗ
	               |					втТоварыСвернутая)) КАК ТоварыНаСкладахОстатки
	               |ГДЕ
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Склад,
	               |	Качество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТоварыСвернутая.Склад,
	               |	втТоварыСвернутая.Номенклатура,
	               |	втТоварыСвернутая.Качество,
	               |	втТоварыСвернутая.Количество - ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(втРезерв.КоличествоОстаток, 0) - ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) КАК Количество
	               |ИЗ
	               |	втТоварыСвернутая КАК втТоварыСвернутая
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыНаСкладах КАК ТоварыНаСкладахОстатки
	               |		ПО втТоварыСвернутая.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	               |			И втТоварыСвернутая.Склад = ТоварыНаСкладахОстатки.Склад
	               |			И втТоварыСвернутая.Качество = ТоварыНаСкладахОстатки.Качество
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втРезерв КАК втРезерв
	               |		ПО втТоварыСвернутая.Номенклатура = втРезерв.Номенклатура
	               |			И втТоварыСвернутая.Склад = втРезерв.Склад
	               |			И втТоварыСвернутая.Качество = втРезерв.Качество
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втНашРезерв КАК втНашРезерв
	               |		ПО втТоварыСвернутая.Номенклатура = втНашРезерв.Номенклатура
	               |			И втТоварыСвернутая.Склад = втНашРезерв.Склад
	               |			И втТоварыСвернутая.Качество = втНашРезерв.Качество
	               |ГДЕ
	               |	втТоварыСвернутая.Количество - ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(втРезерв.КоличествоОстаток, 0) - ЕСТЬNULL(втНашРезерв.КоличествоОстаток, 0) > 0";
					 
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("КонПериода", вхСсылкаНаДокумент.МоментВремени());
	Запрос.УстановитьПараметр("втТовары", втТовары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Сообщение = "";
	Успешно = Истина;
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			вхОтказ = Истина;
			Успешно = Ложь;
				//#PK83-720 Kalinin V.A. ( 2018-06-01 )
			Сообщение = Сообщение + "[КонтрольОстатков]: на складе " + Выборка.Склад + " не хватает остатка номенклатуры " +
			УправлениеЗапасами.ПредставлениеНоменклатуры(Выборка.Номенклатура,,ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Номенклатура,"Артикул")) + " с качеством " + Выборка.Качество + " в количестве " + Выборка.Количество + Символы.ПС;
			//Сообщение = Сообщение + "[КонтрольОстатков]: на складе " + Выборка.Склад + " не хватает остатка номенклатуры " + Выборка.Номенклатура + " с качеством " + Выборка.Качество + " в количестве " + Выборка.Количество + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	Если Не Успешно Тогда 
		#Если Клиент Тогда 
			Сообщить(Сообщение);
		#Иначе
			ВызватьИсключение Сообщение;
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаблокироватьРегистрыТоварыНаСкладах(Знач вхСсылкаНаДокумент)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
	|	ПеремещениеТоваровТовары.Качество,
	|	ПеремещениеТоваровТовары.СтрокаЗаявки,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	|	И ПеремещениеТоваровТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
	|	ПеремещениеТоваровТовары.Качество,
	|	ПеремещениеТоваровТовары.СтрокаЗаявки";
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.РезервыТоваров");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ТоварыНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
	
	БлокировкаДанных.Заблокировать();

КонецПроцедуры

Процедура ЗаблокироватьРегистрРезервыНаСкладах(Знач вхСсылкаНаДокумент)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
	|	ПеремещениеТоваровТовары.Качество,
	|	ПеремещениеТоваровТовары.СтрокаЗаявки,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	|	И ПеремещениеТоваровТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель,
	|	ПеремещениеТоваровТовары.Качество,
	|	ПеремещениеТоваровТовары.СтрокаЗаявки";
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.РезервыТоваров");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
	
	БлокировкаДанных.Заблокировать();

КонецПроцедуры

Процедура ЗаблокироватьРегистрПартииТоваров(Знач вхСсылкаНаДокумент)
		
	БлокировкаДанных = Новый БлокировкаДанных;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК Склад,
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Качество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваровТовары.Номенклатура
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Результаты = Запрос.ВыполнитьПакет();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ПартииТоваров");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Результаты.Получить(0);
	
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("Последовательность.ПартионныйУчет");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Результаты.Получить(1);
	
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	БлокировкаДанных.Заблокировать();

КонецПроцедуры


Функция ПолучитьРеквизитыКонтроля(вхПараметр = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Если (вхПараметр = Метаданные.ПланыОбмена.ОбменПартКом83_77) тогда
		Результат = ОбменДаннымиКлиентСервер.РеквизитыКонтроляПоДокументу(ПолучитьМетаданные(), ИсключаемыеРеквизитыКонтроляРегистрации());
	Иначе
		Результат.Вставить("Шапка", "Дата,Проведен");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИсключаемыеРеквизитыКонтроляРегистрации() Экспорт
	
	ИсключаемыеРеквизиты = ОбменДаннымиКлиентСервер.ИнициализироватьТаблицуИсключаемыхРеквизитовКонтроля();
	ОбменДаннымиКлиентСервер.ДобавитьВИсключаемыеРевизиты(ИсключаемыеРеквизиты, "Ссылка");
	
	Возврат ИсключаемыеРеквизиты;
	
КонецФункции

Функция ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр = Неопределено) Экспорт
	Возврат	РаботаСПоследовательностямиКлиентСервер.ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр);
КонецФункции


//ВЫГРУЗКА ПРИ ОБМЕНЕ

Функция ВыгрузитьЭлементы(вхТаблицаСсылокНаОбъекты, вхПланОбмена) Экспорт
	
	Результат = Новый Массив;
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[ВыгрузитьЭлементы]: неправильный параметр номер 2.";
	КонецЕсли;
	
	Если лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog Тогда 
		
		лМенеджерПланаОбмена = ПланыОбмена[лМетаданныеПланаОбмена.Имя];
		
		лЗапрос = Новый Запрос;
		лЗапрос.УстановитьПараметр("ТаблицаСсылок", вхТаблицаСсылокНаОбъекты);
		лЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		лЗапрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
		лЗапрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	&ТаблицаСсылок КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка КАК Ссылка,
		|	ПеремещениеТоваров.Номер,
		|	ПеремещениеТоваров.Дата,
		|	ПеремещениеТоваров.СкладОтправитель.ФизическийСклад КАК Склад,
		|	ЕСТЬNULL(ПеремещениеТоваров.СкладПолучатель.КонтрагентТопЛог.ОсновнаяТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК Контрагент,
		|	ПеремещениеТоваров.Организация КАК Организация,
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	ПеремещениеТоваровТовары.Номенклатура.Наименование,
		|	ПеремещениеТоваровТовары.Номенклатура.Артикул,
		|	ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.IDSite, """") КАК SSID,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваровТовары.СтрокаЗаявки.ПрайсПоставщика.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КроссСток,
		|	ПеремещениеТоваровТовары.КоличествоПлан КАК Количество,
		|	ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка.ТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК Клиент,
		|	ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка.ТорговаяТочка.Наименование, """") КАК КлиентНаименование,
		|	ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка.Контрагент.ЮрФизЛицо.Порядок, 0) = 0 КАК ЭтоЮридическоеЛицо,
		|	ЕСТЬNULL(ПеремещениеТоваров.СкладПолучатель.КонтрагентТопЛог.ОсновнаяТорговаяТочка.Город, ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка)) КАК Город,
		|	ЕСТЬNULL(ПеремещениеТоваров.СкладПолучатель.КонтрагентТопЛог.ОсновнаяТорговаяТочка.Город.Наименование, """") КАК ГородНаименование,
		|	ЕСТЬNULL(ПеремещениеТоваров.СкладПолучатель.КонтрагентТопЛог.ОсновнаяТорговаяТочка.МаршрутДоставки.Код, """") КАК МаршрутДоставкиКод,
		|	ЕСТЬNULL(ПеремещениеТоваров.СкладПолучатель.КонтрагентТопЛог.ОсновнаяТорговаяТочка.МаршрутДоставки.Наименование, """") КАК МаршрутДоставкиНаименование,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваров.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД)
		|		ИНАЧЕ ПеремещениеТоваров.ДатаОтгрузки
		|	КОНЕЦ КАК ДатаОтгрузки,
		|	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И ПеремещениеТоваровТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И ПеремещениеТоваров.СкладОтправитель.ОбменСTopLog
		|	И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.ОбменСTopLog
		|	И НЕ ПеремещениеТоваров.флНеВыгружатьВТопЛог
		|	И НЕ ПеремещениеТоваровТовары.Ссылка.флНеВыгружатьВТопЛог
		|	И ПеремещениеТоваровТовары.КоличествоПлан > 0
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка КАК Ссылка,
		|	ПеремещениеТоваров.Номер,
		|	ПеремещениеТоваров.Дата,
		|	ПеремещениеТоваров.СкладПолучатель.ФизическийСклад КАК Склад,
		|	ЕСТЬNULL(ПеремещениеТоваров.СкладПолучатель.ФизическийСклад.КонтрагентТопЛог.ОсновнаяТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК Контрагент,
		|	ПеремещениеТоваров.Организация КАК Организация,
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	ПеремещениеТоваровТовары.Номенклатура.Наименование,
		|	ПеремещениеТоваровТовары.Номенклатура.Артикул,
		|	ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.IDSite, """") КАК SSID,
		|	ПеремещениеТоваровТовары.КоличествоПлан КАК Количество,
		|	ЕСТЬNULL(ПеремещениеТоваров.СкладПолучатель.ФизическийСклад.КонтрагентТопЛог.ОсновнаяТорговаяТочка.Город, ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка)) КАК Город,
		|	ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка.ТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК Клиент,
		|	ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка КАК Виртуальная
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И ПеремещениеТоваровТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Ссылка
		|			ИЗ
		|				Объекты)
		|	И ПеремещениеТоваров.СкладПолучатель.ОбменСTopLog
		|	И ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.ОбменСTopLog
		|	И НЕ ПеремещениеТоваров.флНеВыгружатьВТопЛог
		|	И НЕ ПеремещениеТоваровТовары.Ссылка.флНеВыгружатьВТопЛог
		|	И ПеремещениеТоваровТовары.КоличествоПлан > 0
		|ИТОГИ ПО
		|	Ссылка";
		
		лРезультатыЗапроса = лЗапрос.ВыполнитьПакет();
		
		Если НЕ лРезультатыЗапроса[1].Пустой() Тогда
			лТипОбъектаXDTO = ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаОтгрузку");
			лВыборка = лРезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
			
			Пока лВыборка.Следующий() Цикл
				ЗаполнитьСтрокиЗаявок(лВыборка.Ссылка);
				лОбъект = ФабрикаXDTO.Создать(лТипОбъектаXDTO);
				
				ЗаполнитьЗначенияСвойств(лОбъект, лВыборка, "Номер,Дата,ДатаОтгрузки");
				лОбъект.СуммаДокумента = 0;
				лОбъект.ВидДокумента = "ПеремещениеТоваров";
				лОбъект.Ссылка = XMLСтрока(лВыборка.Ссылка);
				лОбъект.СкладСсылка = XMLСтрока(лВыборка.Склад);
				лОбъект.КонтрагентСсылка = XMLСтрока(лВыборка.Контрагент);
				лОбъект.ОрганизацияСсылка = XMLСтрока(лВыборка.Организация);
				лОбъект.ТипДоставки = "";
				лОбъект.СкладПолучательСсылка = XMLСтрока(лВыборка.СкладПолучатель);
				лОбъект.МаршрутДоставкиКод = лВыборка.МаршрутДоставкиКод;
				
				ОбменДаннымиКлиентСервер.ДополнитьДаннымиПоПечати(лОбъект, лВыборка.Ссылка);
				
				лТовары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаОтгрузку.Товары"));
				лТоварыСписок = лТовары.ПолучитьСписок("СтрокаТовары");
				
				ВыборкаПоТоварам = лВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоТоварам.Следующий() Цикл
					НоваяСтрока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), лТоварыСписок.ВладеющееСвойство.Тип.Имя)); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам, "НоменклатураНаименование,НоменклатураАртикул,SSID,КроссСток,Количество,КлиентНаименование,ЭтоЮридическоеЛицо");
					НоваяСтрока.НоменклатураСсылка = XMLСтрока(ВыборкаПоТоварам.Номенклатура);
					НоваяСтрока.КлиентСсылка = XMLСтрока(ВыборкаПоТоварам.Клиент);
					//НоваяСтрока.ГородСсылка = XMLСтрока(ВыборкаПоТоварам.Город);
					//НоваяСтрока.МаршрутДоставкиСсылка = XMLСтрока(ВыборкаПоТоварам.МаршрутДоставки);
					НоваяСтрока.Цена = 0;
					НоваяСтрока.ГТД = "";
					НоваяСтрока.СтранаКод = "";
					НоваяСтрока.СтранаНаименование = "";
					лТоварыСписок.Добавить(НоваяСтрока);

				КонецЦикла;	
				
				лОбъект.Товары = лТовары;
				Результат.Добавить(лОбъект);
				
				// Помечаем объект как выгруженный
				ДокОб = лВыборка.Ссылка.ПолучитьОбъект();
				ДокОб.ВыгруженВТопЛог = Истина;
				ДокОб.Записать(РежимЗаписиДокумента.Запись);
			КонецЦикла;
		КонецЕсли;
		Если Не лРезультатыЗапроса[2].Пустой() Тогда 
			
			лТипОбъектаXDTO = ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаПриемку");
			лВыборка = лРезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
			Пока лВыборка.Следующий() Цикл
				ЗаполнитьСтрокиЗаявок(лВыборка.Ссылка);
				лОбъект = ФабрикаXDTO.Создать(лТипОбъектаXDTO);
				
				ЗаполнитьЗначенияСвойств(лОбъект, лВыборка, "Номер,Дата");
				лОбъект.СуммаДокумента = 0;
				лОбъект.ВидДокумента = "ПеремещениеТоваров";
				лОбъект.Ссылка = XMLСтрока(лВыборка.Ссылка);
				лОбъект.СкладСсылка = XMLСтрока(лВыборка.Склад);
				лОбъект.КонтрагентСсылка = XMLСтрока(лВыборка.Контрагент);
				лОбъект.ОрганизацияСсылка = XMLСтрока(лВыборка.Организация);
				лОбъект.НомерВходящегоДокумента = "";
				лОбъект.ДатаВходящегоДокумента = Дата(1,1,1);
				
				лТовары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаПриемку.Товары"));
				лТоварыСписок = лТовары.ПолучитьСписок("СтрокаТовары");
				
				ВыборкаПоТоварам = лВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				ТТПополнениеСклада = Неопределено;
				Пока ВыборкаПоТоварам.Следующий() Цикл
					НоваяСтрока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), лТоварыСписок.ВладеющееСвойство.Тип.Имя)); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам, "НоменклатураНаименование,НоменклатураАртикул,SSID,Количество");
					
					НоваяСтрока.НоменклатураСсылка = XMLСтрока(ВыборкаПоТоварам.Номенклатура);
					Если  ВыборкаПоТоварам.Виртуальная Тогда 
						Если ТТПополнениеСклада = Неопределено Тогда 
							ТТПополнениеСклада = ОбщегоНазначения.ПолучитьТТПополнениеСклада(лВыборка.Ссылка);
						КонецЕсли;
						НоваяСтрока.КлиентСсылка = XMLСтрока(ТТПополнениеСклада);
					Иначе	
						НоваяСтрока.КлиентСсылка = XMLСтрока(ВыборкаПоТоварам.Клиент);
					КонецЕсли;
					НоваяСтрока.ГородСсылка = XMLСтрока(ВыборкаПоТоварам.Город);
					НоваяСтрока.Цена = 0;
					НоваяСтрока.СкладПолучательСсылка = XMLСтрока(Справочники.Склады.ПустаяСсылка());
					НоваяСтрока.ГТД = "";
					лТоварыСписок.Добавить(НоваяСтрока);

				КонецЦикла;	
				
				лОбъект.НомерВходящегоСФ = "";
				лОбъект.ДатаВходящегоСФ = Дата(1,1,1);
				лОбъект.Товары = лТовары;
				Результат.Добавить(лОбъект);
				
				// Помечаем объект как выгруженный
				ДокОб = лВыборка.Ссылка.ПолучитьОбъект();
				ДокОб.ВыгруженВТопЛог = Истина;
				ДокОб.Записать(РежимЗаписиДокумента.Запись);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьЭлемент(ОбъектXDTO, вхОтправитель, Отказ, вхПараметры = Неопределено) Экспорт
	лМетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(вхОтправитель));
	Если (лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog) Тогда 
		Если ОбъектXDTO.Тип().Имя = "РезультатРазмещения" Тогда  
			Попытка
				РазмещениеСсылкаТопЛог = Новый УникальныйИдентификатор(ОбъектXDTO.РазмещениеСсылка);
				Заказы = ОбъектXDTO.Заказы.ПолучитьСписок("СтрокаЗаказы");
				
				ТаблицаСсылок = Новый ТаблицаЗначений;
				ТаблицаСсылок.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
				ТаблицаСсылок.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
				
				Успешно = Истина;
				
				Для Каждого ЗаказНаПриемкуXDTO Из Заказы Цикл 
					Попытка
						ЗагрузитьРезультатРазмещения(РазмещениеСсылкаТопЛог, ЗаказНаПриемкуXDTO, ОбъектXDTO, ТаблицаСсылок, Успешно, вхПараметры);
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
						СтруктураОшибки.Вставить("GUID", ОбъектXDTO.РазмещениеСсылка);
						СтруктураОшибки.Вставить("GUIDДоп", ЗаказНаПриемкуXDTO.ЗаказСсылка);
						СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ПеремещениеТоваров");
						ОбменДаннымиКлиентСервер.ОчиститьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
					Исключение
						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
						СтруктураОшибки.Вставить("GUID", ОбъектXDTO.РазмещениеСсылка);
						СтруктураОшибки.Вставить("GUIDДоп", ЗаказНаПриемкуXDTO.ЗаказСсылка);
						СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ПеремещениеТоваров");
						СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
						СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
						СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
						ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
						
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ
						               |	ПеремещениеТоваров.Ссылка
						               |ИЗ
						               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
						               |ГДЕ
						               |	ПеремещениеТоваров.РазмещениеСсылкаТопЛог = &РазмещениеСсылкаТопЛог
						               |	И ПеремещениеТоваров.ДокументОснование = &ДокументОснование";
						Запрос.УстановитьПараметр("РазмещениеСсылкаТопЛог", РазмещениеСсылкаТопЛог);
							
						Если ЗаказНаПриемкуXDTO.ЗаказВидДокумента = "ПоступлениеТоваровУслуг" Тогда 
							Если ЗначениеЗаполнено(ЗаказНаПриемкуXDTO.ЗаказСсылка) Тогда 
								ДокументОснование = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗаказНаПриемкуXDTO.ЗаказСсылка));
							Иначе
								ДокументОснование = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(ОбщегоНазначения.ПреобразоватьНомер(ЗаказНаПриемкуXDTO.ЗаказНомер), ТекущаяДата());
							КонецЕсли;
						Иначе
							Если ЗначениеЗаполнено(ЗаказНаПриемкуXDTO.ЗаказСсылка) Тогда 
								ДокументОснование = Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗаказНаПриемкуXDTO.ЗаказСсылка));
							Иначе
								ДокументОснование = Документы.ПеремещениеТоваров.НайтиПоНомеру(ОбщегоНазначения.ПреобразоватьНомер(ЗаказНаПриемкуXDTO.ЗаказНомер), ТекущаяДата());
							КонецЕсли;
						КонецЕсли;

						Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
						Выборка = Запрос.Выполнить().Выбрать();
						Пока Выборка.Следующий() Цикл 
							РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(Выборка.Ссылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки: "+ОписаниеОшибки(), , Ложь); 
						КонецЦикла;
					КонецПопытки;
				КонецЦикла;
				//Распроводим перемещения, не попавшие в сообщения
				Если Успешно Тогда 
					Запрос = Новый Запрос;
					Запрос.Текст =  "ВЫБРАТЬ
					                |	ТаблицаСсылок.Документ,
					                |	ТаблицаСсылок.Склад
					                |ПОМЕСТИТЬ ТаблицаСсылок
					                |ИЗ
					                |	&ТаблицаСсылок КАК ТаблицаСсылок
					                |;
					                |
					                |////////////////////////////////////////////////////////////////////////////////
					                |ВЫБРАТЬ
					                |	ПеремещениеТоваров.Ссылка,
					                |	ПеремещениеТоваров.Проведен
					                |ИЗ
					                |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
					                |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСсылок КАК ТаблицаСсылок
					                |		ПО ПеремещениеТоваров.ДокументОснование = ТаблицаСсылок.Документ
					                |			И ПеремещениеТоваров.СкладПолучатель = ТаблицаСсылок.Склад
					                |ГДЕ
					                |	НЕ ПеремещениеТоваров.ПометкаУдаления
					                |	И ПеремещениеТоваров.РазмещениеСсылкаТопЛог = &РазмещениеСсылкаТопЛог
					                |	И ТаблицаСсылок.Документ ЕСТЬ NULL";
					Запрос.УстановитьПараметр("РазмещениеСсылкаТопЛог", РазмещениеСсылкаТопЛог);
					Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл 
						ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
						ДокОбъект.ПометкаУдаления = Истина;
						
						ДокОбъект.Комментарий = "помечено на удаление ТопЛогом";
						Если ДокОбъект.Проведен Тогда 
							ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Иначе
							ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Исключение
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
				СтруктураОшибки.Вставить("GUID", ОбъектXDTO.РазмещениеСсылка);
				СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ПеремещениеТоваров");
				СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
				СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
				СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
				ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ПеремещениеТоваров.Ссылка
				|ИЗ
				|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
				|ГДЕ
				|	ПеремещениеТоваров.РазмещениеСсылкаТопЛог = &РазмещениеСсылкаТопЛог";
				Запрос.УстановитьПараметр("РазмещениеСсылкаТопЛог", Новый УникальныйИдентификатор(ОбъектXDTO.РазмещениеСсылкаТопЛог));
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл 
					РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(Выборка.Ссылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки: "+ОписаниеОшибки(), , Ложь); 
				КонецЦикла;

			КонецПопытки;
		ИначеЕсли ОбъектXDTO.Тип().Имя = "РезультатСборки" Тогда  
			Попытка
				ЗагрузитьРезультатСборки(ОбъектXDTO, вхПараметры);
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
				СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ЗаказСсылка);
				СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ПеремещениеТоваров");
				ОбменДаннымиКлиентСервер.ОчиститьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
			Исключение
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
				СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ЗаказСсылка);
				СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ПеремещениеТоваров");
				СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
				СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
				СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
				ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
				
				Если ЗначениеЗаполнено(ОбъектXDTO.ЗаказСсылка) Тогда 
					ДокСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
				Иначе
					ДокСсылка = Документы.ПеремещениеТоваров.НайтиПоНомеру(ОбщегоНазначения.ПреобразоватьНомер(ОбъектXDTO.ЗаказНомер), ТекущаяДата());
				КонецЕсли;
				РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокСсылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки: "+ОписаниеОшибки(), , Ложь); 
			КонецПопытки;
		ИначеЕсли ОбъектXDTO.Тип().Имя = "РезультатПриемки" Тогда  	
			Попытка
				ЗагрузитьРезультатПриемки(ОбъектXDTO, вхПараметры);
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
				СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ЗаказСсылка);
				СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ПеремещениеТоваров");
				ОбменДаннымиКлиентСервер.ОчиститьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
			Исключение
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
				СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ЗаказСсылка);
				СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ПеремещениеТоваров");
				СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
				СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
				СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
				ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
				
				Если ЗначениеЗаполнено(ОбъектXDTO.ЗаказСсылка) Тогда 
					ДокСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
				Иначе
					ДокСсылка = Документы.ПеремещениеТоваров.НайтиПоНомеру(ОбщегоНазначения.ПреобразоватьНомер(ОбъектXDTO.ЗаказНомер), ТекущаяДата());
				КонецЕсли;
				РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокСсылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки: "+ОписаниеОшибки(), , Ложь); 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьПоступление(вхСсылкаНаДокумент, Проведение = Истина)
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДокументОснование");
	
	Если Не (ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда 
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОтложенноеИзменениеОбъектовТопЛог.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументОснование);
	НаборЗаписей.Добавить().Объект = ДокументОснование;
	НаборЗаписей.Записать(Истина);
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ПеремещениеТоваровТовары.СтрокаПрихода,
	//               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
	//               |ПОМЕСТИТЬ втРазмещение
	//               |ИЗ
	//               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	//               |ГДЕ
	//               |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
	//               |	И ПеремещениеТоваровТовары.Ссылка.Проведен
	//               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
	//               |	И ВЫБОР
	//               |			КОГДА &Проведение
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ПеремещениеТоваровТовары.Ссылка <> &Ссылка
	//               |		КОНЕЦ
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ПеремещениеТоваровТовары.СтрокаПрихода
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ПоступлениеТоваровУслугТовары.НомерСтроки,
	//               |	ЕСТЬNULL(втРазмещение.Количество, 0) - ПоступлениеТоваровУслугТовары.КоличествоРазмещено КАК КоличествоДобавить
	//               |ИЗ
	//               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ втРазмещение КАК втРазмещение
	//               |		ПО ПоступлениеТоваровУслугТовары.СтрокаПрихода = втРазмещение.СтрокаПрихода
	//               |ГДЕ
	//               |	ПоступлениеТоваровУслугТовары.КоличествоРазмещено - ЕСТЬNULL(втРазмещение.Количество, 0) <> 0
	//               |	И ПоступлениеТоваровУслугТовары.Ссылка = &ДокументОснование";
	//Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	//Запрос.УстановитьПараметр("Проведение", Проведение);
	//Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если Не РезультатЗапроса.Пустой() Тогда
	//	ДокОбъект = ДокументОснование.ПолучитьОбъект();
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Пока Выборка.Следующий() Цикл 
	//		СтрокаТЧ = ДокОбъект.Товары.Найти(Выборка.НомерСтроки, "НомерСтроки");
	//		СтрокаТЧ.КоличествоРазмещено = СтрокаТЧ.КоличествоРазмещено + Выборка.КоличествоДобавить;
	//	КонецЦикла;
	//	
	//	Товары = ДокОбъект.Товары.Выгрузить(, "Количество,КоличествоНеПринято,КоличествоРазмещено");
	//	Товары.Колонки.Добавить("КоличествоНеРазмещено", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	//	
	//	Для Каждого СтрокаТЧ Из Товары Цикл 
	//		СтрокаТЧ.КоличествоНеРазмещено = СтрокаТЧ.Количество - СтрокаТЧ.КоличествоНеПринято - СтрокаТЧ.КоличествоРазмещено;	
	//	КонецЦикла;
	//	
	//	СтрокиНеРазм = Товары.НайтиСтроки(Новый Структура("КоличествоНеРазмещено",0));
	//	Если Товары.Количество() = СтрокиНеРазм.Количество() Тогда 
	//		ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен; 
	//	КонецЕсли;
	//	
	//	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	//Иначе
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//	               |	ПоступлениеТоваровУслугТовары.НомерСтроки
	//	               |ИЗ
	//	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	//	               |ГДЕ
	//	               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	//	               |	И ПоступлениеТоваровУслугТовары.Количество - ПоступлениеТоваровУслугТовары.КоличествоНеПринято - ПоступлениеТоваровУслугТовары.КоличествоРазмещено <> 0";
	//	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	//	Результат = Запрос.Выполнить();
	//	Если Результат.Пустой() Тогда 
	//		ДокОбъект = ДокументОснование.ПолучитьОбъект();
	//		ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен;
	//		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

//ЗАГРУЗКА ПРИ ОБМЕНЕ

Процедура ЗагрузитьРезультатРазмещения(РазмещениеСсылкаТопЛог, ЗаказНаПриемкуXDTO, ОбъектXDTO, ТаблицаСсылок, Успешно, вхПараметры)
	
	Перем ЭтоПоступление;
	
	Если ЗаказНаПриемкуXDTO.ЗаказВидДокумента = "ПоступлениеТоваровУслуг" Тогда 
		Если ЗначениеЗаполнено(ЗаказНаПриемкуXDTO.ЗаказСсылка) Тогда 
			ДокументОснование = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗаказНаПриемкуXDTO.ЗаказСсылка));
		Иначе
			ДокументОснование = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(ОбщегоНазначения.ПреобразоватьНомер(ЗаказНаПриемкуXDTO.ЗаказНомер), ТекущаяДата());
		КонецЕсли;
		ЭтоПоступление = Истина;
	Иначе
		Если ЗначениеЗаполнено(ЗаказНаПриемкуXDTO.ЗаказСсылка) Тогда 
			ДокументОснование = Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗаказНаПриемкуXDTO.ЗаказСсылка));
		Иначе
			ДокументОснование = Документы.ПеремещениеТоваров.НайтиПоНомеру(ОбщегоНазначения.ПреобразоватьНомер(ЗаказНаПриемкуXDTO.ЗаказНомер), ТекущаяДата());
		КонецЕсли;
		ЭтоПоступление = Ложь;
	КонецЕсли;
	
	//ТаблицаСсылок.Добавить(ДокументОснование);
	
	Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокументОснование) Тогда 
		ВызватьИсключение "Загрузка результата размещения. Не найдено " + ?(ЭтоПоступление,"поступление товаров и услуг", "перемещение товаров") + " с guid = " + ЗаказНаПриемкуXDTO.ЗаказСсылка + " и номером = " + ЗаказНаПриемкуXDTO.ЗаказНомер;
	КонецЕсли;
	
	Если Не ЭтоПоступление Тогда
		СкладПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СкладПолучатель");
		ОбменСTopLog = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель, "ОбменСTopLog");
		Если ОбменСTopLog Тогда 
			Возврат; //Это заказ на приемку, такие размещения не грузим
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПоступление Тогда 	
		ЗагрузитьРезультатРазмещенияПТУ(ДокументОснование, ЗаказНаПриемкуXDTO, ОбъектXDTO, РазмещениеСсылкаТопЛог, ТаблицаСсылок, Успешно, вхПараметры);
	Иначе
		ЗагрузитьРезультатРазмещенияПерем(ДокументОснование, ЗаказНаПриемкуXDTO, ОбъектXDTO, РазмещениеСсылкаТопЛог, ТаблицаСсылок, Успешно, вхПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатРазмещенияПТУ(ДокументОснование, ЗаказНаПриемкуXDTO, ОбъектXDTO, РазмещениеСсылкаТопЛог, ТаблицаСсылок, Успешно, вхПараметры)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация,Склад,ВидОперацииПоступления,Дата,Склад.ФизическийСклад");
	Таблица = ЗаказНаПриемкуXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	СоответствиеСкладов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл 
		Если СоответствиеСкладов[СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка] = Неопределено Тогда 
			СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка));
			СоответствиеСкладов.Вставить(СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка, СкладПолучатель);
			Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
				ЗапросСклад = Новый Запрос;
				ЗапросСклад.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				                    |	Склады.Ссылка
				                    |ИЗ
				                    |	Справочник.Склады КАК Склады
				                    |ГДЕ
				                    |	Склады.ФизическийСклад = &ФизическийСклад
				                    |	И Склады.СкладVMI";
				ЗапросСклад.УстановитьПараметр("ФизическийСклад", СкладПолучатель);
				ВыборкаСклад = ЗапросСклад.Выполнить().Выбрать();
				Если ВыборкаСклад.Следующий() Тогда 
					Если ВыборкаСклад.Ссылка <> Реквизиты.Склад Тогда 
						РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаСТопЛог, "Для размещения на ответ. хранение выгружен склад, отличающийся от склада в шапке ПТУ. GUID Размещения = " + РазмещениеСсылкаТопЛог + " ПТУ: " + ДокументОснование + " Будет подставлен склад из шапки документа." + "Выгрузка размещения из ТопЛог.");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли  Реквизиты.СкладФизическийСклад = Константы.СкладОсновной.Получить() И  
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель, "ФизическийСклад") = Реквизиты.СкладФизическийСклад Тогда 
					СоответствиеСкладов.Вставить(СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка, Реквизиты.Склад);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
		СоответствиеСкладов.Очистить();
		СоответствиеСкладов.Вставить("", Реквизиты.Склад);
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствиеСкладов Цикл 
		
		Попытка
			СкладПолучатель = КлючЗначение.Значение;
			РазмещениеЯчейкаСкладСсылка = КлючЗначение.Ключ;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПеремещениеТоваров.Ссылка
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			|ГДЕ
			|	ПеремещениеТоваров.РазмещениеСсылкаТопЛог = &РазмещениеСсылкаТопЛог
			|	И ПеремещениеТоваров.ДокументОснование = &ДокументОснование
			|	И ПеремещениеТоваров.СкладПолучатель = &СкладПолучатель";
			Запрос.УстановитьПараметр("РазмещениеСсылкаТопЛог", РазмещениеСсылкаТопЛог);
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			НеобходимаЗагрузка = Ложь;
			ТребуетсяОчисткаТЧ = Ложь;
			Дельта = Неопределено;
			
			Если Выборка.Количество() = 0 Тогда 
				ДокСсылка = Документы.ПеремещениеТоваров.ПустаяСсылка();
			ИначеЕсли Выборка.Количество() = 1 Тогда 
				Выборка.Следующий();
				ДокСсылка = Выборка.Ссылка;
			Иначе
				ВызватьИсключение "Найдено более одного документа перемещения с guid размещения = " + РазмещениеСсылкаТопЛог + " и документом-основанием: " + ДокументОснование + " и складом: " + СкладПолучатель;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокСсылка) Тогда 
				ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();		
			Иначе
				ДокОбъект = ДокСсылка.ПолучитьОбъект();		
			КонецЕсли;
			
			ДокОбъект.РазмещениеСсылкаТопЛог = РазмещениеСсылкаТопЛог;
			ДокОбъект.ДокументОснование = ДокументОснование;
			ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог;
			ДокОбъект.ЗагруженИзТопЛог = Истина;
			
			ОстаткиПоРегистру = ОстаткиСтрокПрихода(ДокументОснование, ДокСсылка);
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокСсылка, "Проведен,СтатусДокумента,Дата");
			
			ТоварыДокумента = Новый ТаблицаЗначений;
			ТоварыДокумента.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
			ТоварыДокумента.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
			ТоварыДокумента.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			ТоварыДокумента.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")); 
			
			Если РеквизитыДокумента.Проведен = Истина И РеквизитыДокумента.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил Тогда 
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ПеремещениеТоваровТовары.Номенклатура,
				|	ПеремещениеТоваровТовары.СтрокаЗаявки,
				|	СУММА(ПеремещениеТоваровТовары.КоличествоПлан) КАК КоличествоПлан,
				|	ПеремещениеТоваровТовары.Организация
				|ИЗ
				|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
				|ГДЕ
				|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ПеремещениеТоваровТовары.Номенклатура,
				|	ПеремещениеТоваровТовары.СтрокаЗаявки,
				|	ПеремещениеТоваровТовары.Организация";
				Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
				ТоварыДокумента = Запрос.Выполнить().Выгрузить();
			КонецЕсли;
			
			ТоварыXDTO = ЗаказНаПриемкуXDTO.Товары.ПолучитьСписок("СтрокаТовары");
			СоотвSSID = ОбменДаннымиКлиентСервер.СоответствиеСтрокЗаявокИSSID(ТоварыXDTO, ДокументОснование); 
			
			Товары = Новый ТаблицаЗначений;
			Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
			Товары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
			Товары.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			
			ТоварыСПустымиSSID = Новый ТаблицаЗначений;
			ТоварыСПустымиSSID.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
			ТоварыСПустымиSSID.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			
			Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
				Если Не ПустаяСтрока(РазмещениеЯчейкаСкладСсылка) И РазмещениеЯчейкаСкладСсылка <> СтрокаТовары.РазмещениеЯчейкаСкладСсылка Тогда 
					Продолжить;
				КонецЕсли;
				
				СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтрокаТовары.SSID);
				Если Не ЗначениеЗаполнено(СтрокаЗаявки) Тогда 
					НоваяСтрока = ТоварыСПустымиSSID.Добавить();
				Иначе	
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.СтрокаЗаявки = СтрокаЗаявки;
				КонецЕсли;
				
				НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
				НоваяСтрока.КоличествоПлан = СтрокаТовары.КоличествоРазмещено;
			КонецЦикла;
			
			РазмещенныеТовары = Новый ТаблицаЗначений;
			РазмещенныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
			РазмещенныеТовары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
			РазмещенныеТовары.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			РазмещенныеТовары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")); 
			
			Отбор = Новый Структура("Номенклатура,СтрокаЗаявки"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ТоварыДокумента, РазмещенныеТовары, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(Товары, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(ТоварыДокумента, "КоличествоПлан");
			
			Отбор = Новый Структура("Номенклатура"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ТоварыДокумента, РазмещенныеТовары, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(Товары, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(ТоварыДокумента, "КоличествоПлан");
			
			Отбор = Новый Структура("Номенклатура"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, ТоварыСПустымиSSID, ТоварыДокумента, РазмещенныеТовары, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(ТоварыСПустымиSSID, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(ТоварыДокумента, "КоличествоПлан");
			
			Отбор = Новый Структура("Номенклатура,СтрокаЗаявки"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ОстаткиПоРегистру, РазмещенныеТовары, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(Товары, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(ОстаткиПоРегистру, "КоличествоПлан");
			
			Отбор = Новый Структура("Номенклатура"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, ТоварыСПустымиSSID, ОстаткиПоРегистру, РазмещенныеТовары, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(ТоварыСПустымиSSID, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(ОстаткиПоРегистру, "КоличествоПлан");
			
			Отбор = Новый Структура("Номенклатура"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ОстаткиПоРегистру, РазмещенныеТовары, "КоличествоПлан");
			
			ОчиститьТаблицуСНулевымКол(Товары, "КоличествоПлан");
			ОчиститьТаблицуСНулевымКол(ОстаткиПоРегистру, "КоличествоПлан");
			
			Если Не (Товары.Количество() = 0 И ТоварыСПустымиSSID.Количество() = 0) Тогда 
				ТекстПисьма = "";
				Для Каждого СтрокаТЧ Из Товары Цикл 
					ТекстПисьма = ТекстПисьма + СтрокаТЧ.Номенклатура + "(" + СтрокаТЧ.Номенклатура.Код + ")" + " IDSIte: " + СтрокаТЧ.СтрокаЗаявки.IDSite + Символы.ПС;
				КонецЦикла;
				Для Каждого СтрокаТЧ Из ТоварыСПустымиSSID Цикл 
					ТекстПисьма = ТекстПисьма + СтрокаТЧ.Номенклатура + "(" + СтрокаТЧ.Номенклатура.Код + ")" + Символы.ПС;
				КонецЦикла;
				РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаСТопЛог,ТекстПисьма,
				"Размещено больше чем в ПТУ. GUID Размещения = " + РазмещениеСсылкаТопЛог + " ПТУ: " + ДокументОснование);
				ВызватьИсключение "ТопЛог выгрузил ";
			КонецЕсли;
			
			ДокОбъект.Товары.Очистить();
			Для Каждого СтрокаТовары Из РазмещенныеТовары Цикл 
				НоваяСтрока = ДокОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				НоваяСтрока.Количество = НоваяСтрока.КоличествоПлан;
				НоваяСтрока.ЕдиницаИзмерения =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
				НоваяСтрока.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЕдиницаИзмерения, "Коэффициент");
				НоваяСтрока.Качество = Справочники.Качество.Новый;
			КонецЦикла;
			
			СкладПриемки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Склад, "СкладПриемки");
			Если Не ЗначениеЗаполнено(СкладПриемки) Тогда 
				СкладПриемки = Реквизиты.Склад;
			КонецЕсли;
			ДокОбъект.Организация = Реквизиты.Организация;
			
			ДокОбъект.СкладОтправитель = СкладПриемки;
			
			Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
				ДокОбъект.СкладПолучатель = Реквизиты.Склад;
			Иначе
				ДокОбъект.СкладПолучатель = СкладПолучатель;
			КонецЕсли;
			
			ДокОбъект.ФилиалОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.СкладОтправитель, "Филиал");
			ДокОбъект.ФилиалПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.СкладПолучатель, "Филиал");
			
			ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил;
			ДокОбъект.ПометкаУдаления = Ложь;
			
			Если ДокОбъект.ЭтоНовый() Тогда 
				ДокОбъект.Дата = ТекущаяДата();
			ИначеЕсли НЕ РеквизитыДокумента.Проведен И РеквизитыДокумента.Дата <= Реквизиты.Дата Тогда 
				ДокОбъект.Дата = Реквизиты.Дата + 1; 
			КонецЕсли;
			
			НоваяСтрока = ТаблицаСсылок.Добавить();
			НоваяСтрока.Документ = ДокОбъект.ДокументОснование;
			НоваяСтрока.Склад = ДокОбъект.СкладПолучатель;
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СтатусДокумента") = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда 
				Попытка
					//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
						ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					//ЗафиксироватьТранзакцию();
					НомерСообщения = ?(вхПараметры = Неопределено, 0, вхПараметры.НомерСообщения);
					РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь); 
				Исключение				
					//ОтменитьТранзакцию();
					
					ОписаниеОшибки = ОписаниеОшибки();
					
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
					Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
					
					Стр = Набор.Добавить();
					Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
					Набор.Записать(Истина);
					
					ВызватьИсключение ОписаниеОшибки;
				КонецПопытки;
			Иначе 
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					НомерСообщения = ?(вхПараметры = Неопределено, 0, вхПараметры.НомерСообщения);
					РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь); 
					
					Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
					Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
					
					Стр = Набор.Добавить();
					Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
					Набор.Записать(Истина);
					
					//ЗафиксироватьТранзакцию();
				Исключение
					ВызватьИсключение ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
	
		
		//ЗафиксироватьТранзакцию();
	Исключение
		//ОтменитьТранзакцию();
		Успешно = Ложь;
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
КонецЦикла;
		
КонецПроцедуры

Процедура ЗагрузитьРезультатРазмещенияПерем(ДокументОснование, ЗаказНаПриемкуXDTO, ОбъектXDTO, РазмещениеСсылкаТопЛог, ТаблицаСсылок, Успешно, вхПараметры)
	
	Таблица = ЗаказНаПриемкуXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	СоответствиеСкладов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл 
		Если СоответствиеСкладов[СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка] = Неопределено Тогда 
			СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка));
			СоответствиеСкладов.Вставить(СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка, СкладПолучатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СоответствиеСкладов Цикл 
		
		//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			СкладПолучатель = КлючЗначение.Значение;
			РазмещениеЯчейкаСкладСсылка = КлючЗначение.Ключ;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПеремещениеТоваров.Ссылка
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			|ГДЕ
			|	ПеремещениеТоваров.РазмещениеСсылкаТопЛог = &РазмещениеСсылкаТопЛог
			|	И ПеремещениеТоваров.ДокументОснование = &ДокументОснование
			|	И ПеремещениеТоваров.СкладПолучатель = &СкладПолучатель";
			Запрос.УстановитьПараметр("РазмещениеСсылкаТопЛог", РазмещениеСсылкаТопЛог);
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			НеобходимаЗагрузка = Ложь;
			ТребуетсяОчисткаТЧ = Ложь;
			Дельта = Неопределено;
			
			Если Выборка.Количество() = 0 Тогда 
				ДокСсылка = Документы.ПеремещениеТоваров.ПустаяСсылка();
			ИначеЕсли Выборка.Количество() = 1 Тогда 
				Выборка.Следующий();
				ДокСсылка = Выборка.Ссылка;
			Иначе
				ВызватьИсключение "Найдено более одного документа перемещения с guid размещения = " + РазмещениеСсылкаТопЛог + " и документом-основанием: " + ДокументОснование + " и складом: " + СкладПолучатель;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокСсылка) Тогда 
				ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();		
			Иначе
				ДокОбъект = ДокСсылка.ПолучитьОбъект();		
			КонецЕсли;
			
			ДокОбъект.РазмещениеСсылкаТопЛог = РазмещениеСсылкаТопЛог;
			ДокОбъект.ДокументОснование = ДокументОснование;
			ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог;
			ДокОбъект.ЗагруженИзТопЛог = Истина;
			
			СтруктураТаблиц = ОстаткиСтрокПриходаДляПеремещения(ДокументОснование, ДокСсылка);
			ОстаткиСтрокПрихода = СтруктураТаблиц.ОстаткиСтрокПрихода;
			ОстаткиСтрокПриходаПоСтрокамЗаявок = СтруктураТаблиц.ОстаткиСтрокПриходаПоСтрокамЗаявок;
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокСсылка, "Проведен,СтатусДокумента,Дата");
			
			ТоварыДокумента = Новый ТаблицаЗначений;
			ТоварыДокумента.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
			ТоварыДокумента.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
			ТоварыДокумента.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			ТоварыДокумента.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")); 
			
			Если РеквизитыДокумента.Проведен = Истина И РеквизитыДокумента.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил Тогда 
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ПеремещениеТоваровТовары.Номенклатура,
				|	ПеремещениеТоваровТовары.СтрокаЗаявки,
				|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
				|	ПеремещениеТоваровТовары.Организация
				|ИЗ
				|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
				|ГДЕ
				|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ПеремещениеТоваровТовары.Номенклатура,
				|	ПеремещениеТоваровТовары.СтрокаЗаявки,
				|	ПеремещениеТоваровТовары.Организация";
				Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
				ТоварыДокумента = Запрос.Выполнить().Выгрузить();
			КонецЕсли;
			
			ТоварыXDTO = ЗаказНаПриемкуXDTO.Товары.ПолучитьСписок("СтрокаТовары");
			СоотвSSID = ОбменДаннымиКлиентСервер.СоответствиеСтрокЗаявокИSSID(ТоварыXDTO, ДокументОснование); 
			
			Товары = Новый ТаблицаЗначений;
			Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
			Товары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
			Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			
			ТоварыСПустымиSSID = Новый ТаблицаЗначений;
			ТоварыСПустымиSSID.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
			ТоварыСПустымиSSID.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			
			Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
				Если Не ПустаяСтрока(РазмещениеЯчейкаСкладСсылка) И РазмещениеЯчейкаСкладСсылка <> СтрокаТовары.РазмещениеЯчейкаСкладСсылка Тогда 
					Продолжить;
				КонецЕсли;
				
				СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтрокаТовары.SSID);
				Если Не ЗначениеЗаполнено(СтрокаЗаявки) Тогда 
					НоваяСтрока = ТоварыСПустымиSSID.Добавить();
				Иначе	
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.СтрокаЗаявки = СтрокаЗаявки;
				КонецЕсли;
				
				НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
				НоваяСтрока.Количество = СтрокаТовары.КоличествоРазмещено;
			КонецЦикла;
			
			РазмещенныеТовары = Новый ТаблицаЗначений;
			РазмещенныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
			РазмещенныеТовары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
			РазмещенныеТовары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			РазмещенныеТовары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")); 
			
			Отбор = Новый Структура("Номенклатура,СтрокаЗаявки"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ТоварыДокумента, РазмещенныеТовары, "Количество");
			
			Отбор = Новый Структура("Номенклатура"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ТоварыДокумента, РазмещенныеТовары, "Количество");
			
			Отбор = Новый Структура("Номенклатура"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, ТоварыСПустымиSSID, ТоварыДокумента, РазмещенныеТовары, "Количество");
			
			Отбор = Новый Структура("Номенклатура,СтрокаЗаявки"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ОстаткиСтрокПриходаПоСтрокамЗаявок, РазмещенныеТовары, "Количество");
			
			Отбор = Новый Структура("Номенклатура"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, ТоварыСПустымиSSID, ОстаткиСтрокПриходаПоСтрокамЗаявок, РазмещенныеТовары, "Количество");
			
			Отбор = Новый Структура("Номенклатура"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Товары, ОстаткиСтрокПрихода, РазмещенныеТовары, "Количество");
			
			Отбор = Новый Структура("Номенклатура"); 
			ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, ТоварыСПустымиSSID, ОстаткиСтрокПрихода, РазмещенныеТовары, "Количество");
			
			ОчиститьТаблицуСНулевымКол(Товары, "Количество");
			ОчиститьТаблицуСНулевымКол(ТоварыСПустымиSSID, "Количество");
			ОчиститьТаблицуСНулевымКол(ОстаткиСтрокПрихода, "Количество");
			ОчиститьТаблицуСНулевымКол(ОстаткиСтрокПриходаПоСтрокамЗаявок, "Количество");
			
			Если Не (Товары.Количество() = 0 И ТоварыСПустымиSSID.Количество() = 0) Тогда 
				ТекстПисьма = "";
				Для Каждого СтрокаТЧ Из Товары Цикл 
					ТекстПисьма = ТекстПисьма + СтрокаТЧ.Номенклатура + "(" + СтрокаТЧ.Номенклатура.Код + ")" + " IDSIte: " + СтрокаТЧ.СтрокаЗаявки.IDSite + Символы.ПС;
				КонецЦикла;
				Для Каждого СтрокаТЧ Из ТоварыСПустымиSSID Цикл 
					ТекстПисьма = ТекстПисьма + СтрокаТЧ.Номенклатура + "(" + СтрокаТЧ.Номенклатура.Код + ")" + Символы.ПС;
				КонецЦикла;
				РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаСТопЛог,ТекстПисьма,
				"Размещено больше чем в ПТУ. GUID Размещения = " + РазмещениеСсылкаТопЛог + " Перемещение исходящее: " + ДокументОснование);
				ВызватьИсключение "ТопЛог выгрузил ";
			КонецЕсли;
			
			ДокОбъект.Товары.Очистить();
			Для Каждого СтрокаТовары Из РазмещенныеТовары Цикл 
				НоваяСтрока = ДокОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				НоваяСтрока.КоличествоПлан = НоваяСтрока.Количество;
				НоваяСтрока.ЕдиницаИзмерения =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
				НоваяСтрока.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЕдиницаИзмерения, "Коэффициент");
				НоваяСтрока.Качество = Справочники.Качество.Новый;
			КонецЦикла;
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация,СкладПолучатель,Дата");
			ДокОбъект.Организация = Реквизиты.Организация;
			ДокОбъект.СкладОтправитель = Реквизиты.СкладПолучатель;
			ДокОбъект.СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(РазмещениеЯчейкаСкладСсылка));
			
			ДокОбъект.ФилиалОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.СкладОтправитель, "Филиал");
			ДокОбъект.ФилиалПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.СкладПолучатель, "Филиал");
			
			ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил;
			ДокОбъект.ПометкаУдаления = Ложь;
			
			Если ДокОбъект.ЭтоНовый() Тогда 
				ДокОбъект.Дата = ТекущаяДата();
			ИначеЕсли НЕ РеквизитыДокумента.Проведен И РеквизитыДокумента.Дата <= Реквизиты.Дата Тогда 
	        	ДокОбъект.Дата = Реквизиты.Дата + 1;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаСсылок.Добавить();
			НоваяСтрока.Документ = ДокОбъект.ДокументОснование;
			НоваяСтрока.Склад = ДокОбъект.СкладПолучатель;
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ОбновленИзТопЛог") = Истина Тогда 
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					НомерСообщения = ?(вхПараметры = Неопределено, 0, вхПараметры.НомерСообщения);
					РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь); 
				Исключение				
					ОписаниеОшибки = ОписаниеОшибки();
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
					Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
					
					Стр = Набор.Добавить();
					Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
					Набор.Записать(Истина);
					
					ВызватьИсключение ОписаниеОшибки;
				КонецПопытки;
			Иначе 
				Попытка
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
					Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
					НомерСообщения = ?(вхПараметры = Неопределено, 0, вхПараметры.НомерСообщения);
					РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь); 
					Стр = Набор.Добавить();
					Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
					Набор.Записать(Истина);
				Исключение
					ВызватьИсключение ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
	
		
		//ЗафиксироватьТранзакцию();
	Исключение
		//ОтменитьТранзакцию();
		Успешно = Ложь;
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
КонецЦикла;
		
КонецПроцедуры

Процедура ОчиститьТаблицуСНулевымКол(Таблица, ИмяКолонки = "Количество") 
	
	Перем КоличествоСтрок, СтрокаТЧ, Шаг;
	
	КоличествоСтрок = Таблица.Количество();
	Для Шаг = 0 По КоличествоСтрок - 1 Цикл 
		СтрокаТЧ = Таблица.Получить(КоличествоСтрок - Шаг - 1);
		Если СтрокаТЧ[ИмяКолонки] = 0 Тогда
			Таблица.Удалить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ОстаткиСтрокПрихода(ДокументОснование, ДокСсылка)
	
	Запрос = Новый Запрос;
	
		//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		//               |	ТаблицаРаспределить.СтрокаЗаявки
		//               |ПОМЕСТИТЬ втТаблицаРаспределить
		//               |ИЗ
		//               |	&ТаблицаРаспределить КАК ТаблицаРаспределить
		//               |;
		//               |
		//               |////////////////////////////////////////////////////////////////////////////////
		//               |ВЫБРАТЬ
		//               |	ТоварыКРезервированиюОстатки.СтрокаЗаявки,
		//               |	ТоварыКРезервированиюОстатки.СтрокаПрихода,
		//               |	ТоварыКРезервированиюОстатки.Номенклатура,
		//               |	ТоварыКРезервированиюОстатки.КоличествоОстаток КАК КоличествоПлан
		//               |ИЗ
		//               |	РегистрНакопления.ТоварыКРезервированию.Остатки(
		//               |			,
		//               |			СтрокаЗаявки В
		//               |					(ВЫБРАТЬ
		//               |						втТаблицаРаспределить.СтрокаЗаявки
		//               |					ИЗ
		//               |						втТаблицаРаспределить)
		//               |				И (ВЫРАЗИТЬ(СтрокаПрихода.Приход КАК Документ.ПоступлениеТоваровУслуг)) = &Поступление) КАК ТоварыКРезервированиюОстатки
		//               |
		//               |ДЛЯ ИЗМЕНЕНИЯ
		//               |	РегистрНакопления.ТоварыКРезервированию.Остатки";
		//Запрос.УстановитьПараметр("Поступление", ДокументОснование);
		//Запрос.УстановитьПараметр("ТаблицаРаспределить", ТаблицаРаспределить);
		
		Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.СтрокаПрихода КАК СтрокаПрихода,
		               |	ПеремещениеТоваровТовары.СтрокаЗаявки КАК СтрокаЗаявки,
		               |	СУММА(ПеремещениеТоваровТовары.КоличествоПлан) КАК КоличествоПлан
		               |ПОМЕСТИТЬ втРазмещено
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
		               |	И НЕ ПеремещениеТоваровТовары.Ссылка.ПометкаУдаления
		               |	И ПеремещениеТоваровТовары.Ссылка <> &Ссылка
		               |	И ПеремещениеТоваровТовары.Ссылка.Проведен
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПеремещениеТоваровТовары.СтрокаПрихода,
		               |	ПеремещениеТоваровТовары.СтрокаЗаявки,
		               |	ПеремещениеТоваровТовары.Номенклатура
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	СтрокаПрихода,
		               |	СтрокаЗаявки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода КАК СтрокаПрихода,
		               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки КАК СтрокаЗаявки,
		               |	СУММА(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Количество) КАК Количество
		               |ПОМЕСТИТЬ втРазмПоступ
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
		               |ГДЕ
		               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка = &ДокументОснование
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
		               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	СтрокаПрихода,
		               |	СтрокаЗаявки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода КАК СтрокаПрихода,
		               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки КАК СтрокаЗаявки,
		               |	СУММА(ПоступлениеТоваровУслугПричиныОтказов.Количество) КАК Количество
		               |ПОМЕСТИТЬ втОтказы
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг.ПричиныОтказов КАК ПоступлениеТоваровУслугПричиныОтказов
		               |ГДЕ
		               |	ПоступлениеТоваровУслугПричиныОтказов.Ссылка = &ДокументОснование
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода,
		               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	СтрокаПрихода,
		               |	СтрокаЗаявки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПоступлениеТоваровУслугТовары.Номенклатура,
		               |	втРазмПоступ.СтрокаПрихода,
		               |	втРазмПоступ.СтрокаЗаявки,
		               |	втРазмПоступ.Количество - ЕСТЬNULL(втОтказы.Количество, 0) КАК КоличествоПлан
		               |ИЗ
		               |	втРазмПоступ КАК втРазмПоступ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
		               |		ПО втРазмПоступ.СтрокаПрихода = втОтказы.СтрокаПрихода
		               |			И втРазмПоступ.СтрокаЗаявки = втОтказы.СтрокаЗаявки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втРазмещено КАК втРазмещено
		               |		ПО втРазмПоступ.СтрокаПрихода = втРазмещено.СтрокаПрихода
		               |			И втРазмПоступ.СтрокаЗаявки = втРазмещено.СтрокаЗаявки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		               |		ПО втРазмПоступ.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втРазмещено.Номенклатура,
		               |	втРазмещено.СтрокаПрихода,
		               |	втРазмещено.СтрокаЗаявки,
		               |	втРазмещено.КоличествоПлан
		               |ИЗ
		               |	втРазмещено КАК втРазмещено";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ОстаткиСтрокПрихода = Результаты[3].Выгрузить();
	Размещено = Результаты[4].Выгрузить();
	
	ВыходнаяТаблица = Новый ТаблицаЗначений;
	ВыходнаяТаблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ВыходнаяТаблица.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	ВыходнаяТаблица.Колонки.Добавить("СтрокаПрихода", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокПриходов"));
	ВыходнаяТаблица.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Отбор = Новый Структура("Номенклатура,СтрокаЗаявки,СтрокаПрихода");
	ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Размещено, ОстаткиСтрокПрихода, ВыходнаяТаблица, "КоличествоПлан");
	
	Отбор = Новый Структура("Номенклатура,СтрокаЗаявки");
	ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Размещено, ОстаткиСтрокПрихода, ВыходнаяТаблица, "КоличествоПлан");
	
	Отбор = Новый Структура("Номенклатура");
	ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор, Размещено, ОстаткиСтрокПрихода, ВыходнаяТаблица, "КоличествоПлан");
		
	Возврат ОстаткиСтрокПрихода;
	
КонецФункции

Функция ОстаткиСтрокПриходаДляПеремещения(ДокументОснование, ДокСсылка)
	

	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Организация,
		               |	ПеремещениеТоваровТовары.СтрокаПрихода,
		               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
		               |ПОМЕСТИТЬ втМинус
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
		               |	И (ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА)
		               |			ИЛИ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка)
		               |	И ПеремещениеТоваровТовары.Ссылка <> &Ссылка
		               |	И ПеремещениеТоваровТовары.Ссылка.Проведен
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Организация,
		               |	ПеремещениеТоваровТовары.СтрокаПрихода
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Организация,
		               |	ПеремещениеТоваровТовары.СтрокаПрихода,
		               |	ПеремещениеТоваровТовары.СтрокаЗаявки,
		               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
		               |ПОМЕСТИТЬ втМинусПоСтрокамЗаявок
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
		               |	И НЕ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА)
		               |	И НЕ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка
		               |	И ПеремещениеТоваровТовары.Ссылка <> &Ссылка
		               |	И ПеремещениеТоваровТовары.Ссылка.Проведен
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Организация,
		               |	ПеремещениеТоваровТовары.СтрокаПрихода,
		               |	ПеремещениеТоваровТовары.СтрокаЗаявки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Организация,
		               |	ПеремещениеТоваровТовары.СтрокаПрихода,
		               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
		               |ПОМЕСТИТЬ втПлюс
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &ДокументОснование
		               |	И (ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА)
		               |			ИЛИ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Организация,
		               |	ПеремещениеТоваровТовары.СтрокаПрихода
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Организация,
		               |	ПеремещениеТоваровТовары.СтрокаПрихода,
		               |	ПеремещениеТоваровТовары.СтрокаЗаявки,
		               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
		               |ПОМЕСТИТЬ втПлюсПоСтрокамЗаявок
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &ДокументОснование
		               |	И НЕ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА)
		               |	И НЕ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Организация,
		               |	ПеремещениеТоваровТовары.СтрокаПрихода,
		               |	ПеремещениеТоваровТовары.СтрокаЗаявки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втПлюс.Номенклатура,
		               |	втПлюс.Организация,
		               |	втПлюс.СтрокаПрихода,
		               |	втПлюс.Количество КАК Количество
		               |ИЗ
		               |	втПлюс КАК втПлюс
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втМинус.Номенклатура,
		               |	втМинус.Организация,
		               |	втМинус.СтрокаПрихода,
		               |	втМинус.Количество
		               |ИЗ
		               |	втМинус КАК втМинус
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втПлюсПоСтрокамЗаявок.Номенклатура,
		               |	втПлюсПоСтрокамЗаявок.Организация,
		               |	втПлюсПоСтрокамЗаявок.СтрокаЗаявки,
		               |	втПлюсПоСтрокамЗаявок.СтрокаПрихода,
		               |	втПлюсПоСтрокамЗаявок.Количество КАК Количество
		               |ИЗ
		               |	втПлюсПоСтрокамЗаявок КАК втПлюсПоСтрокамЗаявок
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втМинусПоСтрокамЗаявок.Номенклатура,
		               |	втМинусПоСтрокамЗаявок.Организация,
		               |	втМинусПоСтрокамЗаявок.СтрокаПрихода,
		               |	втМинусПоСтрокамЗаявок.СтрокаЗаявки,
		               |	втМинусПоСтрокамЗаявок.Количество
		               |ИЗ
		               |	втМинусПоСтрокамЗаявок КАК втМинусПоСтрокамЗаявок";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());	
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ОстаткиСтрокПрихода = Результаты[4].Выгрузить();
	Размещено = Результаты[5].Выгрузить();
	
	ВыходнаяТаблица = Новый ТаблицаЗначений;
	ВыходнаяТаблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ВыходнаяТаблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")); 
	ВыходнаяТаблица.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	ВыходнаяТаблица.Колонки.Добавить("СтрокаПрихода", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокПриходов"));
	ВыходнаяТаблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Отбор = Новый Структура("Номенклатура,Организация,СтрокаПрихода");
	ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор,Размещено, ОстаткиСтрокПрихода, ВыходнаяТаблица, "Количество");
	
	Отбор = Новый Структура("Номенклатура,Организация");
	ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор,Размещено, ОстаткиСтрокПрихода, ВыходнаяТаблица, "Количество");
	
	Отбор = Новый Структура("Номенклатура");
	ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор,Размещено, ОстаткиСтрокПрихода, ВыходнаяТаблица, "Количество");
	
	ОстаткиСтрокПриходаПоСтрокамЗаявок = Результаты[6].Выгрузить();
	РазмещеноСтрокамЗаявок = Результаты[7].Выгрузить();
	
	ВыходнаяТаблица2 = Новый ТаблицаЗначений;
	ВыходнаяТаблица2.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ВыходнаяТаблица2.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")); 
	ВыходнаяТаблица2.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	ВыходнаяТаблица2.Колонки.Добавить("СтрокаПрихода", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокПриходов"));
	ВыходнаяТаблица2.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Отбор = Новый Структура("Номенклатура,Организация,СтрокаЗаявки,СтрокаПрихода");
	ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор,РазмещеноСтрокамЗаявок, ОстаткиСтрокПриходаПоСтрокамЗаявок, ВыходнаяТаблица2, "Количество");
	
	Отбор = Новый Структура("Номенклатура,Организация,СтрокаЗаявки");
	ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор,РазмещеноСтрокамЗаявок, ОстаткиСтрокПриходаПоСтрокамЗаявок, ВыходнаяТаблица2, "Количество");
	
	Отбор = Новый Структура("Номенклатура,СтрокаЗаявки");
	ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор,РазмещеноСтрокамЗаявок, ОстаткиСтрокПриходаПоСтрокамЗаявок, ВыходнаяТаблица2, "Количество");
	
	Отбор = Новый Структура("Номенклатура");
	ОбщегоНазначения.РаспределитьТаблицу1ПоТаблице2(Отбор,РазмещеноСтрокамЗаявок, ОстаткиСтрокПриходаПоСтрокамЗаявок, ВыходнаяТаблица2, "Количество");
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ОстаткиСтрокПрихода", ОстаткиСтрокПрихода);
	СтруктураТаблиц.Вставить("ОстаткиСтрокПриходаПоСтрокамЗаявок", ОстаткиСтрокПриходаПоСтрокамЗаявок);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Процедура ОтложенноеПроведениеРазмещений() Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтложенноеПроведениеДокументовИзТопЛог.СсылкаНаДокумент
	               |ИЗ
	               |	РегистрСведений.ОтложенноеПроведениеДокументовИзТопЛог КАК ОтложенноеПроведениеДокументовИзТопЛог
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОтложенноеПроведениеДокументовИзТопЛог.СсылкаНаДокумент.МоментВремени";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический);
		Попытка
			ДокОбъект = Выборка.СсылкаНаДокумент.ПолучитьОбъект();
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			лНаборЗаписей = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
			лНаборЗаписей.Отбор.СсылкаНаДокумент.Установить(Выборка.СсылкаНаДокумент);
			лНаборЗаписей.Записать(Истина);				
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ЗарегистрироватьВОбменСТопЛог(вхОбъект) Экспорт 
	
	Строки = вхОбъект.Товары.НайтиСтроки(Новый Структура("СтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка()));
	Если Строки.Количество() > 0 Тогда 
		Для Каждого СтрокаТЧ Из Строки Цикл 
			СтрокаТЧ.СтрокаЗаявки = ОбщегоНазначенияКлиентСервер.ВиртуальнаяСтрокаЗаявки();
		КонецЦикла;
		#Если Клиент Тогда
		Сообщить("Созданы виртуальные строки заявок");
		#КонецЕсли
	КонецЕсли;
	
	вхОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Узел = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 3);
	
	Если ЗначениеЗаполнено(Узел) Тогда 
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, вхОбъект.Ссылка);
		#Если Клиент Тогда
		Сообщить("Документ зарегистрирован в обмене с Топ Лог");
		#КонецЕсли
	Иначе
		#Если Клиент Тогда
		Сообщить("Не найден узел обмена для выгрузки в Топ Лог");
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатСборки(ОбъектXDTO, вхПараметры)
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ЗаказСсылка) Тогда 
		ДокСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
		
		Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
			ВызватьИсключение "Не найдено перемещение товаров с guid = " + ОбъектXDTO.ЗаказСсылка;
		КонецЕсли;
	Иначе
		ДокСсылка = Документы.ПеремещениеТоваров.НайтиПоНомеру(ОбщегоНазначения.ПреобразоватьНомер(ОбъектXDTO.ЗаказНомер), ТекущаяДата());
		Если Не ЗначениеЗаполнено(ДокСсылка) Тогда 
			ВызватьИсключение "Не найдено перемещение товаров с номером = " + ОбъектXDTO.ЗаказНомер;
		КонецЕсли;
	КонецЕсли;
	
	РазрешитьПревышениеКоличестваПлан = ПроведениеДокументовКлиентСервер.РазрешитьПревышениеКоличестваПлан();
	БылоПревышениеКоличестваПлан = Ложь;
	
	ТоварыXDTO = ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	
	МассивSSID = Новый Массив;
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) Тогда 
			МассивSSID.Добавить(СтрокаТовары.SSID);  
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки,
	                |	ИдентификаторыСтрокЗаявок.IDSite КАК SSID,
	                |	ИдентификаторыСтрокЗаявок.Виртуальная КАК Виртуальная,
	                |	ИдентификаторыСтрокЗаявок.Заявка КАК Заявка
	                |ИЗ
	                |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                |ГДЕ
	                |	ИдентификаторыСтрокЗаявок.IDSite В(&МассивSSID)";
	Запрос.УстановитьПараметр("МассивSSID", МассивSSID);
	
	СоотвSSID = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Структура = Новый Структура("СтрокаЗаявки,Виртуальная,Заявка");
		ЗаполнитьЗначенияСвойств(Структура,Выборка);
		СоотвSSID.Вставить(Выборка.SSID, Структура);	
	КонецЦикла;
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	//Товары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	Товары.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	//Товары.Колонки.Добавить("Качество", Новый ОписаниеТипов("СправочникСсылка.Качество"));
	
	ТоварыПоСтрокамЗаявок = Новый ТаблицаЗначений;
	ТоварыПоСтрокамЗаявок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ТоварыПоСтрокамЗаявок.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	ТоварыПоСтрокамЗаявок.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		РеквизитыSSID = СоотвSSID[СтрокаТовары.SSID];
		
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) И Не ЗначениеЗаполнено(РеквизитыSSID) Тогда 
			ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.SSID) Или РеквизитыSSID.Виртуальная Или Не ЗначениеЗаполнено(РеквизитыSSID.Заявка) Тогда 
			НоваяСтрока = Товары.Добавить();
		Иначе
			НоваяСтрока = ТоварыПоСтрокамЗаявок.Добавить();
			НоваяСтрока.СтрокаЗаявки = РеквизитыSSID.СтрокаЗаявки;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары, "Факт");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.Количество КАК Факт
	                |ИЗ
	                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |	И ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА
	                |				ИЛИ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	                |	ПеремещениеТоваровТовары.Количество КАК Факт
	                |ИЗ
	                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |	И НЕ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА)
	                |	И НЕ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
	Результаты = Запрос.ВыполнитьПакет();
	
	ТоварыДокумента = Результаты[0].Выгрузить();
	ТоварыДокументаПоСтрокамЗаявок = Результаты[1].Выгрузить();
	Дельта = Неопределено;
	Дельта2 = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	НЕ ПеремещениеТоваров.ПометкаУдаления
	               |	И ПеремещениеТоваров.Проведен
	               |	И ПеремещениеТоваров.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
	               |	И ПеремещениеТоваров.Ссылка = &Ссылка
	               |	И ПеремещениеТоваров.ОбновленИзТопЛог";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка); 			   
	РезультатЗапроса = Запрос.Выполнить();
	НужноМенятьШапку = РезультатЗапроса.Пустой();
	НужноМенятьТЧ =  Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(ТоварыДокумента, Товары, Дельта, "Факт");
	НужноМенятьТЧ2 =  Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(ТоварыДокументаПоСтрокамЗаявок, ТоварыПоСтрокамЗаявок, Дельта2, "Факт");
	Если НужноМенятьШапку Или НужноМенятьТЧ Или НужноМенятьТЧ2 Тогда
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Для Каждого СтрокаДельты Из Дельта2 Цикл
			Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура,СтрокаЗаявки", СтрокаДельты.Номенклатура, СтрокаДельты.СтрокаЗаявки));
						
			Если Строки.Количество() = 0 Тогда 
				ВызватьИсключение "Не найдена строка с номенклатурой " + СтрокаДельты.Номенклатура +  " и строкой заявки " + СтрокаДельты.СтрокаЗаявки;	
			КонецЕсли;
			
			Если СтрокаДельты.Факт > 0 Тогда 
				КоличествоДобавить = СтрокаДельты.Факт;
				
				Индекс = 0;
				Пока КоличествоДобавить > 0 и Индекс < Строки.Количество() Цикл 
					СтрокаТЧ = Строки.Получить(Индекс);
					МожноДобавить = Макс(0,СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество);
					
					ДобавляемоеКоличество = Мин(МожноДобавить, КоличествоДобавить);
					СтрокаТЧ.Количество = СтрокаТЧ.Количество + ДобавляемоеКоличество;
					СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
					
					КоличествоДобавить = КоличествоДобавить - ДобавляемоеКоличество;
					Индекс = Индекс + 1;
				КонецЦикла;
				Если КоличествоДобавить > 0 Тогда
					Если РазрешитьПревышениеКоличестваПлан Тогда
						СтрокаТЧ.Количество = СтрокаТЧ.Количество + КоличествоДобавить; //Если факт превышает план, добавим остаток в последнюю строку 
						СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
						БылоПревышениеКоличестваПлан = Истина;
					Иначе
						ВызватьИсключение "По номенклатуре " + СтрокаДельты.Номенклатуры + " факт превышает план";
					КонецЕсли;
				КонецЕсли;
			Иначе
				КоличествоУбрать = - СтрокаДельты.Факт;
				Индекс = 0;
				Пока КоличествоУбрать > 0 и Индекс < Строки.Количество() Цикл
					СтрокаТЧ = Строки.Получить(Индекс);
					МожноУбрать = СтрокаТЧ.Количество;
					УбираемоеКоличество = Мин(МожноУбрать, КоличествоУбрать);
					СтрокаТЧ.Количество = СтрокаТЧ.Количество - УбираемоеКоличество;
					
					КоличествоУбрать = КоличествоУбрать - УбираемоеКоличество;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаДельты Из Дельта Цикл
						
			Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДельты.Номенклатура));
			КоличествоСтрок = Строки.Количество();
			
			Для Шаг = 0 По КоличествоСтрок - 1 Цикл 
				СтрокаТЧ = Строки.Получить(КоличествоСтрок - 1 - Шаг);
				Если ЗначениеЗаполнено(СтрокаТЧ.СтрокаЗаявки) Тогда 
					Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.СтрокаЗаявки, "Виртуальная,Заявка");
					Если Не Реквизиты.Виртуальная И ЗначениеЗаполнено(Реквизиты.Заявка) Тогда 
						Строки.Удалить(СтрокаТЧ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Строки.Количество() = 0 Тогда 
				ВызватьИсключение "Не найдена строка с номенклатурой " + СтрокаДельты.Номенклатура;	
			КонецЕсли;
			
			Если СтрокаДельты.Факт > 0 Тогда 
				КоличествоДобавить = СтрокаДельты.Факт;
				
				Индекс = 0;
				Пока КоличествоДобавить > 0 и Индекс < Строки.Количество() Цикл 
					СтрокаТЧ = Строки.Получить(Индекс);
					МожноДобавить = Макс(0,СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество);
					
					ДобавляемоеКоличество = Мин(МожноДобавить, КоличествоДобавить);
					СтрокаТЧ.Количество = СтрокаТЧ.Количество + ДобавляемоеКоличество;
					СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
					
					КоличествоДобавить = КоличествоДобавить - ДобавляемоеКоличество;
					Индекс = Индекс + 1;
				КонецЦикла;
				Если КоличествоДобавить > 0 Тогда
					Если РазрешитьПревышениеКоличестваПлан Тогда
						СтрокаТЧ.Количество = СтрокаТЧ.Количество + КоличествоДобавить; //Если факт превышает план, добавим остаток в последнюю строку
						СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
						БылоПревышениеКоличестваПлан = Истина;
					Иначе
						ВызватьИсключение "По номенклатуре " + СтрокаДельты.Номенклатура + " факт превышает план";
					КонецЕсли;
				КонецЕсли;
			Иначе
				КоличествоУбрать = - СтрокаДельты.Факт;
				Индекс = 0;
				Пока КоличествоУбрать > 0 и Индекс < Строки.Количество() Цикл
					СтрокаТЧ = Строки.Получить(Индекс);
					МожноУбрать = СтрокаТЧ.Количество;
					УбираемоеКоличество = Мин(МожноУбрать, КоличествоУбрать);
					СтрокаТЧ.Количество = СтрокаТЧ.Количество - УбираемоеКоличество;
					
					КоличествоУбрать = КоличествоУбрать - УбираемоеКоличество;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ДокОбъект.ПометкаУдаления = Ложь;
		ДокОбъект.ОбновленИзТопЛог = Истина;
		ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил;
		ДокОбъект.ДополнительныеСвойства.Вставить("ОтключитьКонтрольОстатков");
		
		Если БылоПревышениеКоличестваПлан Тогда
			ТекстКомментарий = "/Превышение количества план при загрузке из Топлог/";
			Если СтрНайти(ДокОбъект.Комментарий, ТекстКомментарий) = 0 Тогда
				ДокОбъект.Комментарий = ДокОбъект.Комментарий + " " + ТекстКомментарий;
			КонецЕсли;
		КонецЕсли;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НомерСообщения = ?(вхПараметры = Неопределено, 0, вхПараметры.НомерСообщения);
		РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь); 
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьРезультатПриемки(ОбъектXDTO, вхПараметры)
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ЗаказСсылка) Тогда 
		ДокСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
		Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
			ВызватьИсключение "Не найдено перемещение товаров с guid = " + ОбъектXDTO.ЗаказСсылка;
		КонецЕсли;
	Иначе
		ДокСсылка = Документы.ПеремещениеТоваров.НайтиПоНомеру(ОбщегоНазначения.ПреобразоватьНомер(ОбъектXDTO.ЗаказНомер), ТекущаяДата());
		Если Не ЗначениеЗаполнено(ДокСсылка) Тогда 
			ВызватьИсключение "Не найдено перемещение товаров с номером = " + ОбъектXDTO.ЗаказНомер;
		КонецЕсли;
	КонецЕсли;
	
	РазрешитьПревышениеКоличестваПлан = ПроведениеДокументовКлиентСервер.РазрешитьПревышениеКоличестваПлан();
	БылоПревышениеКоличестваПлан = Ложь;
	
	СкладОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "СкладОтправитель");
	ОбменСTopLog = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОтправитель, "ОбменСTopLog");
	Если ОбменСTopLog Тогда 
		Возврат; //Это заказ на отгрузку, грузим только размещения
	КонецЕсли;
	
	ТоварыXDTO = ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	
	МассивSSID = Новый Массив;
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) Тогда 
			МассивSSID.Добавить(СтрокаТовары.SSID);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки,
	                |	ИдентификаторыСтрокЗаявок.IDSite КАК SSID,
	                |	ИдентификаторыСтрокЗаявок.Виртуальная КАК Виртуальная,
	                |	ИдентификаторыСтрокЗаявок.Заявка КАК Заявка
	                |ИЗ
	                |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                |ГДЕ
	                |	ИдентификаторыСтрокЗаявок.IDSite В(&МассивSSID)";
	Запрос.УстановитьПараметр("МассивSSID", МассивSSID);
	
	СоотвSSID = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Структура = Новый Структура("СтрокаЗаявки,Виртуальная,Заявка");
		ЗаполнитьЗначенияСвойств(Структура,Выборка);
		СоотвSSID.Вставить(Выборка.SSID, Структура);	
	КонецЦикла;
	

	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	ТоварыПоСтрокамЗаявок = Новый ТаблицаЗначений;
	ТоварыПоСтрокамЗаявок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ТоварыПоСтрокамЗаявок.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	ТоварыПоСтрокамЗаявок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		
		Если СтрокаТовары.ЭтоБрак Тогда 
			Продолжить;
		КонецЕсли;
		
		РеквизитыSSID = СоотвSSID[СтрокаТовары.SSID];
		
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) И Не ЗначениеЗаполнено(РеквизитыSSID) Тогда 
			ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.SSID) Или РеквизитыSSID.Виртуальная Или Не ЗначениеЗаполнено(РеквизитыSSID.Заявка) Тогда 
			НоваяСтрока = Товары.Добавить();
		Иначе
			НоваяСтрока = ТоварыПоСтрокамЗаявок.Добавить();
			НоваяСтрока.СтрокаЗаявки = РеквизитыSSID.СтрокаЗаявки;
		КонецЕсли;
				
		НоваяСтрока.Количество = СтрокаТовары.КоличествоПринято;
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
		
	КонецЦикла;
	
	Товары.Свернуть("Номенклатура", "Количество");
	ТоварыПоСтрокамЗаявок.Свернуть("Номенклатура,СтрокаЗаявки", "Количество");
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.Количество
	                |ИЗ
	                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |	И ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА
	                |				ИЛИ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	                |	ПеремещениеТоваровТовары.Количество
	                |ИЗ
	                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |	И НЕ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА)
	                |	И НЕ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
	Результаты = Запрос.ВыполнитьПакет();
	
	ТоварыДокумента = Результаты[0].Выгрузить();
	ТоварыДокументаПоСтрокамЗаявок = Результаты[1].Выгрузить();
	
	Дельта = Неопределено;
	Дельта2 = Неопределено;
	
	НужноМенятьТЧ = Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(ТоварыДокумента, Товары, Дельта, "Количество");
	НужноМенятьТЧ2 = Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(ТоварыДокументаПоСтрокамЗаявок, ТоварыПоСтрокамЗаявок, Дельта2, "Количество");
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПеремещениеТоваров.Ссылка
	                |ИЗ
	                |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	                |ГДЕ
	                |	ПеремещениеТоваров.Ссылка = &Ссылка
	                |	И ПеремещениеТоваров.Проведен
	                |	И ПеремещениеТоваров.СтатусДокумента = &СтатусДокумента
	                |	И НЕ ПеремещениеТоваров.ПометкаУдаления
	                |	И ПеремещениеТоваров.ОбновленИзТопЛог";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("СтатусДокумента", Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил);
	
	НужноМенятьШапку = Запрос.Выполнить().Пустой();
	
	Если НужноМенятьШапку Или НужноМенятьТЧ Или НужноМенятьТЧ2 Тогда 
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Для Каждого СтрокаДельты Из Дельта2 Цикл 
			Если СтрокаДельты.Количество > 0 Тогда 
				КоличествоРаспределить = СтрокаДельты.Количество;
				Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура,СтрокаЗаявки", СтрокаДельты.Номенклатура, СтрокаДельты.СтрокаЗаявки));
				Индекс = 0;
				Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
					СтрокаТЧ = Строки.Получить(Индекс);
					МожноРаспределить = Мин(КоличествоРаспределить, Макс(СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество,0));
					
					СтрокаТЧ.Количество = СтрокаТЧ.Количество + МожноРаспределить;
					СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
					
					КоличествоРаспределить = КоличествоРаспределить - МожноРаспределить;
					
					Индекс = Индекс + 1; 
				КонецЦикла;
				
				Если КоличествоРаспределить > 0 Тогда
					Если РазрешитьПревышениеКоличестваПлан Тогда
						СтрокаТЧ.Количество = СтрокаТЧ.Количество + КоличествоРаспределить;
						СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
						БылоПревышениеКоличестваПлан = Истина;
					Иначе
						ВызватьИсключение "По номенклатуре " + СтрокаДельты.Номенклатуры + " факт превышает план";
					КонецЕсли;
				КонецЕсли;
			Иначе
				КоличествоУбрать = - СтрокаДельты.Количество;
				Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура,СтрокаЗаявки", СтрокаДельты.Номенклатура, СтрокаДельты.СтрокаЗаявки));
				Индекс = 0;
				Пока КоличествоУбрать > 0 И Индекс < Строки.Количество() Цикл
					СтрокаТЧ = Строки.Получить(Индекс);
					МожноУбрать = Мин(КоличествоУбрать, СтрокаТЧ.Количество);
					
					СтрокаТЧ.Количество = СтрокаТЧ.Количество - МожноУбрать;
					СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
					
					КоличествоУбрать = КоличествоУбрать - МожноУбрать;
					
					Индекс = Индекс + 1; 
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаДельты Из Дельта Цикл 
			Если СтрокаДельты.Количество > 0 Тогда 
				КоличествоРаспределить = СтрокаДельты.Количество;
				Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДельты.Номенклатура));
				Индекс = 0;
				Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
					СтрокаТЧ = Строки.Получить(Индекс);
					МожноРаспределить = Мин(КоличествоРаспределить, Макс(СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество,0));
					
					СтрокаТЧ.Количество = СтрокаТЧ.Количество + МожноРаспределить;
					СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
					
					КоличествоРаспределить = КоличествоРаспределить - МожноРаспределить;
					
					Индекс = Индекс + 1; 
				КонецЦикла;
				
				Если КоличествоРаспределить > 0 Тогда
					Если РазрешитьПревышениеКоличестваПлан Тогда
						СтрокаТЧ.Количество = СтрокаТЧ.Количество + КоличествоРаспределить;
						СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
						БылоПревышениеКоличестваПлан = Истина;
					Иначе
						ВызватьИсключение "По номенклатуре " + СтрокаДельты.Номенклатуры + " факт превышает план";
					КонецЕсли;
				КонецЕсли;
			Иначе
				КоличествоУбрать = - СтрокаДельты.Количество;
				Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаДельты.Номенклатура));
				Индекс = 0;
				Пока КоличествоУбрать > 0 И Индекс < Строки.Количество() Цикл
					СтрокаТЧ = Строки.Получить(Индекс);
					МожноУбрать = Мин(КоличествоУбрать, СтрокаТЧ.Количество);
					
					СтрокаТЧ.Количество = СтрокаТЧ.Количество - МожноУбрать;
					СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
					
					КоличествоУбрать = КоличествоУбрать - МожноУбрать;
					
					Индекс = Индекс + 1; 
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ДокОбъект.ПометкаУдаления = Ложь;
		ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил;
		ДокОбъект.ОбновленИзТопЛог = Истина;
		
		Если БылоПревышениеКоличестваПлан Тогда
			ТекстКомментарий = "/Превышение количества план при загрузке из Топлог/";
			Если СтрНайти(ДокОбъект.Комментарий, ТекстКомментарий) = 0 Тогда
				ДокОбъект.Комментарий = ДокОбъект.Комментарий + " " + ТекстКомментарий;
			КонецЕсли;
		КонецЕсли;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		НомерСообщения = ?(вхПараметры = Неопределено, 0, вхПараметры.НомерСообщения);
		РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокОбъект.Ссылка, НомерСообщения, , , , Ложь); 
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСтрокиЗаявок(вхСсылкаНаДокумент) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПеремещениеТоваровТовары.НомерСтроки
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	               |	И ПеремещениеТоваровТовары.СтрокаЗаявки = &ПустаяСтрокаЗаявки";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПустаяСтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ДокОбъект = вхСсылкаНаДокумент.ПолучитьОбъект();
	Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("СтрокаЗаявки", Справочники.ИдентификаторыСтрокЗаявок.ПустаяСсылка()));
	
	Для Каждого СтрокаТЧ Из Строки Цикл 
		СтрокаТЧ.СтрокаЗаявки =  ОбщегоНазначенияКлиентСервер.ВиртуальнаяСтрокаЗаявки();
	КонецЦикла;
	
	ДокОбъект.Записать();
	
КонецПроцедуры


#Область НеИспользуется
Процедура ЗагрузитьРезультатРазмещенияФрагмент1(Знач ДокументОснование, Знач ЗаказНаПриемкуXDTO, Знач ОбъектXDTO, Знач РазмещениеСсылкаТопЛог, ТаблицаСсылок)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ВидОперацииПоступления,Склад");
	Таблица = ЗаказНаПриемкуXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	СоответствиеСкладов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл 
		Если СоответствиеСкладов[СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка] = Неопределено Тогда 
			СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка));
			СоответствиеСкладов.Вставить(СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка, СкладПолучатель);
			Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
				ЗапросСклад = Новый Запрос;
				ЗапросСклад.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				                    |	Склады.Ссылка
				                    |ИЗ
				                    |	Справочник.Склады КАК Склады
				                    |ГДЕ
				                    |	Склады.ФизическийСклад = &ФизическийСклад
				                    |	И Склады.СкладVMI";
				ЗапросСклад.УстановитьПараметр("ФизическийСклад", СкладПолучатель);
				ВыборкаСклад = ЗапросСклад.Выполнить().Выбрать();
				Если ВыборкаСклад.Следующий() Тогда 
					Если ВыборкаСклад.Ссылка <> СкладПолучатель Тогда 
						РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаСТопЛог, "Для размещения на ответ. хранение выгружен склад, отличающийся от склада в шапке ПТУ. GUID Размещения = " + РазмещениеСсылкаТопЛог + " ПТУ: " + ДокументОснование + " Будет подставлен склад из шапки документа." + "Выгрузка размещения из ТопЛог.");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
		СоответствиеСкладов.Очистить();
		СоответствиеСкладов.Вставить("", Реквизиты.Склад);
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствиеСкладов Цикл 
		
		СкладПолучатель = КлючЗначение.Значение;
		РазмещениеЯчейкаСкладСсылка = КлючЗначение.Ключ;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		               |ГДЕ
		               |	ПеремещениеТоваров.РазмещениеСсылкаТопЛог = &РазмещениеСсылкаТопЛог
		               |	И ПеремещениеТоваров.ДокументОснование = &ДокументОснование
		               |	И ПеремещениеТоваров.СкладПолучатель = &СкладПолучатель";
		Запрос.УстановитьПараметр("РазмещениеСсылкаТопЛог", РазмещениеСсылкаТопЛог);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НеобходимаЗагрузка = Ложь;
		ТребуетсяОчисткаТЧ = Ложь;
		Дельта = Неопределено;
		
		Если Выборка.Количество() = 0 Тогда 
			ДокСсылка = Документы.ПеремещениеТоваров.ПустаяСсылка();
			Дельта = ПолучитьТребуемуюТаблицу(ЗаказНаПриемкуXDTO, РазмещениеЯчейкаСкладСсылка);
			НеобходимаЗагрузка = Истина;
		ИначеЕсли Выборка.Количество() = 1 Тогда 
			Выборка.Следующий();
			ДокСсылка = Выборка.Ссылка;
			НеобходимаЗагрузка = НеобходимоЗагружатьПеремещениеИзТопЛог(ДокСсылка, ДокументОснование, ЗаказНаПриемкуXDTO, ОбъектXDTO, Дельта, ТребуетсяОчисткаТЧ, РазмещениеЯчейкаСкладСсылка);
		Иначе
			ВызватьИсключение "Найдено более одного документа перемещения с guid размещения = " + РазмещениеСсылкаТопЛог + " и документом-основанием: " + ДокументОснование + " и складом: " + СкладПолучатель;
		КонецЕсли;
		
		Если НеобходимаЗагрузка Тогда
			
			ТаблицаРаспределить = Дельта.СкопироватьКолонки(); 
			ТаблицаУбрать = Дельта.СкопироватьКолонки();
			Для Каждого СтрокаТЧ Из Дельта Цикл 
				Если СтрокаТЧ.КоличествоПлан < 0 Тогда
					НоваяСтрока = ТаблицаУбрать.Добавить(); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.КоличествоПлан = - СтрокаТЧ.КоличествоПлан;
				Иначе
					ЗаполнитьЗначенияСвойств(ТаблицаРаспределить.Добавить(), СтрокаТЧ);
				КонецЕсли;
			КонецЦикла;
			
			Успешно = Истина;
			ДокОбъект = ОбработатьРазмещение(ДокСсылка, ДокументОснование, ОбъектXDTO, РазмещениеСсылкаТопЛог, ТаблицаРаспределить, ТаблицаУбрать, ТребуетсяОчисткаТЧ, Успешно, РазмещениеЯчейкаСкладСсылка);
			Если Успешно Тогда 
				
				НоваяСтрока = ТаблицаСсылок.Добавить();
				НоваяСтрока.Документ = ДокОбъект.ДокументОснование;
				НоваяСтрока.Склад = ДокОбъект.СкладПолучатель;
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СтатусДокумента") = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Тогда 
					Попытка
						ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение				
						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
						
						Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
						Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
						
						Стр = Набор.Добавить();
						Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
						Набор.Записать(Истина);
						
						ВызватьИсключение ОписаниеОшибки();
					КонецПопытки;
				Иначе 
					Попытка
						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
						
						Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
						Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
						
						Стр = Набор.Добавить();
						Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
						Набор.Записать(Истина);
					Исключение
						ВызватьИсключение ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьРезультатРазмещенияФрагмент2(Знач ДокументОснование, Знач ЗаказНаПриемкуXDTO, Знач ОбъектXDTO, Знач РазмещениеСсылкаТопЛог, ТаблицаСсылок)
	
	Таблица = ЗаказНаПриемкуXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	СоответствиеСкладов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл 
		Если СоответствиеСкладов[СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка] = Неопределено Тогда 
			СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка));
			СоответствиеСкладов.Вставить(СтрокаТаблицы.РазмещениеЯчейкаСкладСсылка, СкладПолучатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СоответствиеСкладов Цикл 	
		СкладПолучатель = КлючЗначение.Значение;
		РазмещениеЯчейкаСкладСсылка = КлючЗначение.Ключ;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.РазмещениеСсылкаТопЛог = &РазмещениеСсылкаТопЛог
		|	И ПеремещениеТоваров.ДокументОснование = &ДокументОснование";
		Запрос.УстановитьПараметр("РазмещениеСсылкаТопЛог", РазмещениеСсылкаТопЛог);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Выборка = Запрос.Выполнить().Выбрать();
		
		НеобходимаЗагрузка = Ложь;
		ТребуетсяОчисткаТЧ = Ложь;
		Дельта = Неопределено;
		Дельта2 = Неопределено;
		
		Если Выборка.Количество() = 0 Тогда 
			ДокСсылка = Документы.ПеремещениеТоваров.ПустаяСсылка();
			СтруктураТребТаблиц = ПолучитьТребуемыеТаблицыДляПеремещения(ЗаказНаПриемкуXDTO, РазмещениеЯчейкаСкладСсылка);
			Дельта = СтруктураТребТаблиц.Товары;
			Дельта2 = СтруктураТребТаблиц.ТоварыПоСтрокамЗаявок;
			НеобходимаЗагрузка = Истина;
		ИначеЕсли Выборка.Количество() = 1 Тогда 
			Выборка.Следующий();
			ДокСсылка = Выборка.Ссылка;
			НеобходимаЗагрузка = НеобходимоЗагружатьПеремещениеИзТопЛог2(ДокСсылка, ДокументОснование, ЗаказНаПриемкуXDTO, ОбъектXDTO, Дельта, Дельта2, ТребуетсяОчисткаТЧ, РазмещениеЯчейкаСкладСсылка);
		Иначе
			ВызватьИсключение "Найдено более одного документа перемещения с guid размещения = " + РазмещениеСсылкаТопЛог + " и документом-основанием: " + ДокументОснование;
		КонецЕсли;
		
		Если НеобходимаЗагрузка Тогда
			
			Успешно = Истина;
			ДокОбъект = ОбработатьРазмещениеДляПеремещения(ДокСсылка, ДокументОснование, ОбъектXDTO, РазмещениеСсылкаТопЛог, Дельта, Дельта2, ТребуетсяОчисткаТЧ, Успешно, РазмещениеЯчейкаСкладСсылка);
			Если Успешно Тогда 
				
				НоваяСтрока = ТаблицаСсылок.Добавить();
				НоваяСтрока.Документ = ДокОбъект.ДокументОснование;
				НоваяСтрока.Склад = ДокОбъект.СкладПолучатель;
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ОбновленИзТопЛог") = Истина Тогда 
					Попытка
						ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение				
						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
						
						Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
						Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
						
						Стр = Набор.Добавить();
						Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
						Набор.Записать(Истина);
						
						ВызватьИсключение ОписаниеОшибки();
					КонецПопытки;
				Иначе
					Попытка
						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
						
						Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
						Набор.Отбор.СсылкаНаДокумент.Установить(ДокОбъект.Ссылка);
						
						Стр = Набор.Добавить();
						Стр.СсылкаНаДокумент = ДокОбъект.Ссылка;
						Набор.Записать(Истина);
					Исключение
						ВызватьИсключение ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			Иначе
				ВызватьИсключение ОписаниеОшибки();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОбработатьРазмещение(Знач ДокСсылка, Знач ДокументОснование, Знач ОбъектXDTO, Знач РазмещениеСсылкаТопЛог, Знач ТаблицаРаспределить, Знач ТаблицаУбрать, Знач ТребуетсяОчисткаТЧ, Успешно, Знач РазмещениеЯчейкаСкладСсылка)
	
	Попытка
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Если ЗначениеЗаполнено(ДокСсылка) Тогда 
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Иначе
			ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
		КонецЕсли;
		
		ДокОбъект.РазмещениеСсылкаТопЛог = РазмещениеСсылкаТопЛог;
		ДокОбъект.ДокументОснование = ДокументОснование;
		ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог;
		ДокОбъект.ЗагруженИзТопЛог = Истина;
		
		Если ТребуетсяОчисткаТЧ Тогда 
			ДокОбъект.Товары.Очистить();
		КонецЕсли;
		
		ОстаткиПоРегистру = ОстаткиСтрокПрихода(ДокументОснование, 
		//ТаблицаРаспределить, 
		Неопределено);
		Для Каждого СтрокаТЧ Из ТаблицаУбрать Цикл 
			УбратьКоличествоПлан = СтрокаТЧ.КоличествоПлан;
			
			СтрокиТовары = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура,СтрокаЗаявки", СтрокаТЧ.Номенклатура, СтрокаТЧ.СтрокаЗаявки));
			Индекс = 0;
			Пока УбратьКоличествоПлан > 0 И Индекс < СтрокиТовары.Количество() Цикл 
				СтрокаТовары = СтрокиТовары.Получить(Индекс);
				Если СтрокаТовары.КоличествоПлан > 0 Тогда 
					СписываемоеКоличество = Мин(УбратьКоличествоПлан, СтрокаТовары.КоличествоПлан);
					
					СтрокаТовары.КоличествоПлан = СтрокаТовары.КоличествоПлан - СписываемоеКоличество;
					УбратьКоличествоПлан = УбратьКоличествоПлан - СписываемоеКоличество;
					
					Отбор = Новый Структура("Номенклатура,СтрокаПрихода,СтрокаЗаявки");
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовары);
					
					СтрокиОстатков = ОстаткиПоРегистру.НайтиСтроки(Отбор);
					Если СтрокиОстатков.Количество() > 0 Тогда 
						СтрокаОст = СтрокиОстатков.Получить(0);
						СтрокаОст.КоличествоПлан = СтрокаОст.КоличествоПлан + СписываемоеКоличество;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		Для Каждого СтрокаРаспределить Из ТаблицаРаспределить Цикл 
			Количество = СтрокаРаспределить.КоличествоПлан;
			//Если ЭтоПоступление Тогда 
			Строки = ОстаткиПоРегистру.НайтиСтроки(Новый Структура("Номенклатура, СтрокаЗаявки", СтрокаРаспределить.Номенклатура, СтрокаРаспределить.СтрокаЗаявки));
			//Иначе
			//	Строки = ОстаткиПоРегистру.НайтиСтроки(Новый Структура("Номенклатура", СтрокаРаспределить.Номенклатура));
			//КонецЕсли;
			
			Индекс = 0;
			Пока Количество > 0 И Индекс < Строки.Количество() Цикл 
				Строка = Строки.Получить(Индекс);
				Если Строка.КоличествоПлан > 0 Тогда 
					СписываемоеКоличество = Мин(Строка.КоличествоПлан, Количество);
					
					НоваяСтрока = ДокОбъект.Товары.Добавить();
					
					//Если ЭтоПоступление Тогда 
					НоваяСтрока.Поступление = ДокументОснование;
					//КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.КоличествоПлан = СписываемоеКоличество;
					НоваяСтрока.Количество = СписываемоеКоличество;
					НоваяСтрока.ЕдиницаИзмерения =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
					НоваяСтрока.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЕдиницаИзмерения, "Коэффициент");
					НоваяСтрока.Качество = Справочники.Качество.Новый;
					
					Строка.КоличествоПлан = Строка.КоличествоПлан - СписываемоеКоличество;
					Количество = Количество - СписываемоеКоличество;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			//Если Количество > 0 Тогда 
			//	//Остатки в регистре закончились. Возможно ТопЛог прислал не тут строку заявки
			//	Строки = ТаблицаУбрать.НайтиСтроки(Новый Структура("Номенклатура", СтрокаРаспределить.Номенклатура));
			//	Индекс = 0;
			//	Пока Количество > 0 И Индекс < Строки.Количество() Цикл 
			//		Строка = Строки.Получить(Индекс);
			//		Если Строка.КоличествоПлан > 0 Тогда 
			//			СписываемоеКоличество = Мин(Строка.КоличествоПлан, Количество);
			//			
			//			Строка.КоличествоПлан = Строка.КоличествоПлан - СписываемоеКоличество;
			//			Количество = Количество - СписываемоеКоличество; 
			//		КонецЕсли;
			//		Индекс = Индекс + 1;	
			//	КонецЦикла;
			//КонецЕсли;
			Если Количество > 0 Тогда 
				//ТопЛог прислал не ту номенклатуру
				ВызватьИсключение "Из ТопЛога выгружены некорректные данные. Номенклатура: " + СтрокаРаспределить.Номенклатура + 
				" Код номенклатуры: " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРаспределить.Номенклатура, "Код") + " IDSite = " + 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРаспределить.СтрокаЗаявки, "IDSite"); 
			КонецЕсли;
		КонецЦикла;
		
		Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("КоличествоПлан", 0));
		КолвоСтр = Строки.Количество();
		Для Шаг = 0 По КолвоСтр - 1 Цикл 
			ДокОбъект.Товары.Удалить(КолвоСтр - шаг - 1);
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ДокОбъект.Товары Цикл 
			СтрокаТЧ.Количество = СтрокаТЧ.КоличествоПлан;
		КонецЦикла;
			
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация,Склад,ВидОперацииПоступления");
		СкладПриемки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Склад, "СкладПриемки");
		Если Не ЗначениеЗаполнено(СкладПриемки) Тогда 
			СкладПриемки = Реквизиты.Склад;
		КонецЕсли;
		ДокОбъект.Организация = Реквизиты.Организация;
		
		ДокОбъект.СкладОтправитель = СкладПриемки;
		
		Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
			ДокОбъект.СкладПолучатель = Реквизиты.Склад;
		Иначе
			ДокОбъект.СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(РазмещениеЯчейкаСкладСсылка));
		КонецЕсли;
		
		ДокОбъект.ФилиалОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.СкладОтправитель, "Филиал");
		ДокОбъект.ФилиалПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.СкладПолучатель, "Филиал");
		
		ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил;
		ДокОбъект.ПометкаУдаления = Ложь;
		
		Если ДокОбъект.ЭтоНовый() Тогда 
			ДокОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		Успешно = Ложь;
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ДокОбъект;

КонецФункции

Функция ОбработатьРазмещениеДляПеремещения(Знач ДокСсылка, Знач ДокументОснование, Знач ОбъектXDTO, Знач РазмещениеСсылкаТопЛог, Знач Дельта, Знач Дельта2, Знач ТребуетсяОчисткаТЧ, Успешно, Знач РазмещениеЯчейкаСкладСсылка)
	
	Попытка
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Если ЗначениеЗаполнено(ДокСсылка) Тогда 
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Иначе
			ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
		КонецЕсли;
		
		ДокОбъект.РазмещениеСсылкаТопЛог = РазмещениеСсылкаТопЛог;
		ДокОбъект.ДокументОснование = ДокументОснование;
		ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог;
		ДокОбъект.ЗагруженИзТопЛог = Истина;
		
		Если ТребуетсяОчисткаТЧ Тогда 
			ДокОбъект.Товары.Очистить();
		КонецЕсли;
		
		ТаблицаРаспределитьПоСтрокамЗаявок = Дельта2.СкопироватьКолонки(); 
		ТаблицаУбратьПоСтрокамЗаявок = Дельта2.СкопироватьКолонки();
		Для Каждого СтрокаТЧ Из Дельта2 Цикл 
			Если СтрокаТЧ.КоличествоПлан < 0 Тогда
				НоваяСтрока = ТаблицаУбратьПоСтрокамЗаявок.Добавить(); 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.КоличествоПлан = - СтрокаТЧ.КоличествоПлан;
			Иначе
				ЗаполнитьЗначенияСвойств(ТаблицаРаспределитьПоСтрокамЗаявок.Добавить(), СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаРаспределить = Дельта.СкопироватьКолонки(); 
		ТаблицаУбрать = Дельта.СкопироватьКолонки();
		Для Каждого СтрокаТЧ Из Дельта Цикл 
			Если СтрокаТЧ.КоличествоПлан < 0 Тогда
				НоваяСтрока = ТаблицаУбрать.Добавить(); 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.КоличествоПлан = - СтрокаТЧ.КоличествоПлан;
			Иначе
				ЗаполнитьЗначенияСвойств(ТаблицаРаспределить.Добавить(), СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТаблиц = ОстаткиСтрокПриходаДляПеремещения(ДокументОснование, Неопределено);
		ОстаткиСтрокПрихода = СтруктураТаблиц.ОстаткиСтрокПрихода;
		ОстаткиСтрокПриходаПоСтрокамЗаявок = СтруктураТаблиц.ОстаткиСтрокПриходаПоСтрокамЗаявок;
		
		Для Каждого СтрокаТЧ Из ТаблицаУбратьПоСтрокамЗаявок Цикл 
			УбратьКоличествоПлан = СтрокаТЧ.КоличествоПлан;
			
			СтрокиТовары = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура,СтрокаЗаявки", СтрокаТЧ.Номенклатура, СтрокаТЧ.СтрокаЗаявки));
			Индекс = 0;
			Пока УбратьКоличествоПлан > 0 И Индекс < СтрокиТовары.Количество() Цикл 
				СтрокаТовары = СтрокиТовары.Получить(Индекс);
				Если СтрокаТовары.КоличествоПлан > 0 Тогда 
					СписываемоеКоличество = Мин(УбратьКоличествоПлан, СтрокаТовары.КоличествоПлан);
					
					СтрокаТовары.КоличествоПлан = СтрокаТовары.КоличествоПлан - СписываемоеКоличество;
					УбратьКоличествоПлан = УбратьКоличествоПлан - СписываемоеКоличество;
					
					Отбор = Новый Структура("Номенклатура,СтрокаПрихода,СтрокаЗаявки,Организация");
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовары);
					
					СтрокиОстатков = ОстаткиСтрокПриходаПоСтрокамЗаявок.НайтиСтроки(Отбор);
					Если СтрокиОстатков.Количество() > 0 Тогда 
						СтрокаОст = СтрокиОстатков.Получить(0);
						СтрокаОст.КоличествоПлан = СтрокаОст.КоличествоПлан + СписываемоеКоличество;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого СтрокаРаспределить Из ТаблицаРаспределитьПоСтрокамЗаявок Цикл 
			Количество = СтрокаРаспределить.КоличествоПлан;
			//Если ЭтоПоступление Тогда 
			Строки = ОстаткиСтрокПриходаПоСтрокамЗаявок.НайтиСтроки(Новый Структура("Номенклатура, СтрокаЗаявки", СтрокаРаспределить.Номенклатура, СтрокаРаспределить.СтрокаЗаявки));
			//Иначе
			//	Строки = ОстаткиПоРегистру.НайтиСтроки(Новый Структура("Номенклатура", СтрокаРаспределить.Номенклатура));
			//КонецЕсли;
			
			Индекс = 0;
			Пока Количество > 0 И Индекс < Строки.Количество() Цикл 
				Строка = Строки.Получить(Индекс);
				Если Строка.КоличествоПлан > 0 Тогда 
					СписываемоеКоличество = Мин(Строка.КоличествоПлан, Количество);
					
					НоваяСтрока = ДокОбъект.Товары.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.КоличествоПлан = СписываемоеКоличество;
					НоваяСтрока.Количество = СписываемоеКоличество;
					НоваяСтрока.ЕдиницаИзмерения =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
					НоваяСтрока.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЕдиницаИзмерения, "Коэффициент");
					НоваяСтрока.Качество = Справочники.Качество.Новый;
					
					Строка.КоличествоПлан = Строка.КоличествоПлан - СписываемоеКоличество;
					Количество = Количество - СписываемоеКоличество;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			//Если Количество > 0 Тогда 
			//	//Остатки в регистре закончились. Возможно ТопЛог прислал не тут строку заявки
			//	Строки = ТаблицаУбрать.НайтиСтроки(Новый Структура("Номенклатура", СтрокаРаспределить.Номенклатура));
			//	Индекс = 0;
			//	Пока Количество > 0 И Индекс < Строки.Количество() Цикл 
			//		Строка = Строки.Получить(Индекс);
			//		Если Строка.КоличествоПлан > 0 Тогда 
			//			СписываемоеКоличество = Мин(Строка.КоличествоПлан, Количество);
			//			
			//			Строка.КоличествоПлан = Строка.КоличествоПлан - СписываемоеКоличество;
			//			Количество = Количество - СписываемоеКоличество; 
			//		КонецЕсли;
			//		Индекс = Индекс + 1;	
			//	КонецЦикла;
			//КонецЕсли;
			Если Количество > 0 Тогда 
				//ТопЛог прислал не ту номенклатуру
				ВызватьИсключение "Из ТопЛога выгружены некорректные данные. Номенклатура: " + СтрокаРаспределить.Номенклатура + 
				" Код номенклатуры: " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРаспределить.Номенклатура, "Код") + " IDSite = " + 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРаспределить.СтрокаЗаявки, "IDSite"); 
			КонецЕсли;
		КонецЦикла;
		

		Для Каждого СтрокаТЧ Из ТаблицаУбрать Цикл 
			УбратьКоличествоПлан = СтрокаТЧ.КоличествоПлан;
			
			СтрокиТовары = ДокОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура));
			КоличествоСтрок = СтрокиТовары.Количество();
			
			Для Шаг = 0 По КоличествоСтрок - 1 Цикл 
				СтрокаТЧ = Строки.Получить(КоличествоСтрок - 1 - Шаг);
				Если ЗначениеЗаполнено(СтрокаТЧ.СтрокаЗаявки) Тогда 
					Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.СтрокаЗаявки, "Виртуальная,Заявка");
					Если Не Реквизиты.Виртуальная И ЗначениеЗаполнено(Реквизиты.Заявка) Тогда 
						Строки.Удалить(СтрокаТЧ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Индекс = 0;
			
			Пока УбратьКоличествоПлан > 0 И Индекс < СтрокиТовары.Количество() Цикл 
				СтрокаТовары = СтрокиТовары.Получить(Индекс);
				Если СтрокаТовары.КоличествоПлан > 0 Тогда 
					СписываемоеКоличество = Мин(УбратьКоличествоПлан, СтрокаТовары.КоличествоПлан);
					
					СтрокаТовары.КоличествоПлан = СтрокаТовары.КоличествоПлан - СписываемоеКоличество;
					УбратьКоличествоПлан = УбратьКоличествоПлан - СписываемоеКоличество;
					
					Отбор = Новый Структура("Номенклатура,СтрокаПрихода,Организация");
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовары);
					
					СтрокиОстатков = ОстаткиСтрокПрихода.НайтиСтроки(Отбор);
					Если СтрокиОстатков.Количество() > 0 Тогда 
						СтрокаОст = СтрокиОстатков.Получить(0);
						СтрокаОст.КоличествоПлан = СтрокаОст.КоличествоПлан + СписываемоеКоличество;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		Для Каждого СтрокаРаспределить Из ТаблицаРаспределить Цикл 
			Количество = СтрокаРаспределить.КоличествоПлан;
			//Если ЭтоПоступление Тогда 
			Строки = ОстаткиСтрокПрихода.НайтиСтроки(Новый Структура("Номенклатура", СтрокаРаспределить.Номенклатура));
			//Иначе
			//	Строки = ОстаткиПоРегистру.НайтиСтроки(Новый Структура("Номенклатура", СтрокаРаспределить.Номенклатура));
			//КонецЕсли;
			
			Индекс = 0;
			Пока Количество > 0 И Индекс < Строки.Количество() Цикл 
				Строка = Строки.Получить(Индекс);
				Если Строка.КоличествоПлан > 0 Тогда 
					СписываемоеКоличество = Мин(Строка.КоличествоПлан, Количество);
					
					НоваяСтрока = ДокОбъект.Товары.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.КоличествоПлан = СписываемоеКоличество;
					НоваяСтрока.Количество = СписываемоеКоличество;
					НоваяСтрока.ЕдиницаИзмерения =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков");
					НоваяСтрока.Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЕдиницаИзмерения, "Коэффициент");
					НоваяСтрока.Качество = Справочники.Качество.Новый;
					
					Строка.КоличествоПлан = Строка.КоличествоПлан - СписываемоеКоличество;
					Количество = Количество - СписываемоеКоличество;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			//Если Количество > 0 Тогда 
			//	//Остатки в регистре закончились. Возможно ТопЛог прислал не тут строку заявки
			//	Строки = ТаблицаУбрать.НайтиСтроки(Новый Структура("Номенклатура", СтрокаРаспределить.Номенклатура));
			//	Индекс = 0;
			//	Пока Количество > 0 И Индекс < Строки.Количество() Цикл 
			//		Строка = Строки.Получить(Индекс);
			//		Если Строка.КоличествоПлан > 0 Тогда 
			//			СписываемоеКоличество = Мин(Строка.КоличествоПлан, Количество);
			//			
			//			Строка.КоличествоПлан = Строка.КоличествоПлан - СписываемоеКоличество;
			//			Количество = Количество - СписываемоеКоличество; 
			//		КонецЕсли;
			//		Индекс = Индекс + 1;	
			//	КонецЦикла;
			//КонецЕсли;
			Если Количество > 0 Тогда 
				//ТопЛог прислал не ту номенклатуру
				ВызватьИсключение "Из ТопЛога выгружены некорректные данные. Номенклатура: " + СтрокаРаспределить.Номенклатура + 
				" Код номенклатуры: " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРаспределить.Номенклатура, "Код"); 
			КонецЕсли;
		КонецЦикла;
		
		Строки = ДокОбъект.Товары.НайтиСтроки(Новый Структура("КоличествоПлан", 0));
		КолвоСтр = Строки.Количество();
		Для Шаг = 0 По КолвоСтр - 1 Цикл 
			ДокОбъект.Товары.Удалить(КолвоСтр - шаг - 1);
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ДокОбъект.Товары Цикл 
			СтрокаТЧ.Количество = СтрокаТЧ.КоличествоПлан;
		КонецЦикла;
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация,СкладПолучатель");
		ДокОбъект.Организация = Реквизиты.Организация;
		ДокОбъект.СкладОтправитель = Реквизиты.СкладПолучатель;
		ДокОбъект.СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(РазмещениеЯчейкаСкладСсылка));
		
		ДокОбъект.ФилиалОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.СкладОтправитель, "Филиал");
		ДокОбъект.ФилиалПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.СкладПолучатель, "Филиал");
		
		ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил;
		ДокОбъект.ПометкаУдаления = Ложь;
		
		Если ДокОбъект.ЭтоНовый() Тогда 
			ДокОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();	
	Исключение
		Успешно = Ложь;
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ДокОбъект;

КонецФункции

Функция НеобходимоЗагружатьПеремещениеИзТопЛог(ДокСсылка, ДокументОснование, ЗаказНаПриемкуXDTO, ОбъектXDTO, Дельта, ТребуетсяОчисткаТЧ, РазмещениеЯчейкаСкладСсылка)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация,Склад,ВидОперацииПоступления");
	СкладОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Склад, "СкладПриемки");
	
	Если Не ЗначениеЗаполнено(СкладОтправитель) Тогда 
		СкладОтправитель = Реквизиты.Склад;
	КонецЕсли;
	
	Если Реквизиты.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда 
		СкладПолучатель = Реквизиты.Склад;
	Иначе
		СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(РазмещениеЯчейкаСкладСсылка));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	ПеремещениеТоваров.Ссылка = &Ссылка
	               |	И ПеремещениеТоваров.Проведен
	               |	И ПеремещениеТоваров.СкладОтправитель = &СкладОтправитель
	               |	И ПеремещениеТоваров.СкладПолучатель = &СкладПолучатель
	               |	И ПеремещениеТоваров.СтатусДокумента = &СтатусДокумента
	               |	И ПеремещениеТоваров.Организация = &Организация
	               |	И ПеремещениеТоваров.ВидОперации = &ВидОперации
	               |	И ПеремещениеТоваров.ФилиалОтправитель = ВЫРАЗИТЬ(&СкладОтправитель КАК Справочник.Склады).Филиал
	               |	И ПеремещениеТоваров.ФилиалПолучатель = ВЫРАЗИТЬ(&СкладПолучатель КАК Справочник.Склады).Филиал
	               |	И ПеремещениеТоваров.ЗагруженИзТопЛог";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
	Запрос.УстановитьПараметр("СтатусДокумента", Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог);
	
	РезультатЗапроса = Запрос.Выполнить();
	НужноМенятьШапку = РезультатЗапроса.Пустой();
	
	Товары = ПолучитьТребуемуюТаблицу(ЗаказНаПриемкуXDTO, РазмещениеЯчейкаСкладСсылка);
	ТоварыДокумента = ПолучитьИсходнуюТаблицу(ДокСсылка, ТребуетсяОчисткаТЧ);
	
	Если ТребуетсяОчисткаТЧ Тогда 
		Дельта = Товары;
		Возврат Истина;
	КонецЕсли;
	
	НужноМенятьТЧ = Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(ТоварыДокумента, Товары, Дельта, "КоличествоПлан");
	Если Не НужноМенятьТЧ Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.НомерСтроки
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И ПеремещениеТоваровТовары.Количество <> ПеремещениеТоваровТовары.КоличествоПлан";
		Запрос.УстановитьПараметр("Ссылка",  ДокСсылка);
		НужноМенятьТЧ = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат НужноМенятьШапку Или НужноМенятьТЧ;
	
КонецФункции

Функция НеобходимоЗагружатьПеремещениеИзТопЛог2(ДокСсылка, ДокументОснование, ЗаказНаПриемкуXDTO, ОбъектXDTO, Дельта, Дельта2, ТребуетсяОчисткаТЧ, РазмещениеЯчейкаСкладСсылка)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация,СкладПолучатель");
	СкладОтправитель = Реквизиты.СкладПолучатель;
		
	СкладПолучатель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(РазмещениеЯчейкаСкладСсылка));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	ПеремещениеТоваров.Ссылка = &Ссылка
	               |	И ПеремещениеТоваров.Проведен
	               |	И ПеремещениеТоваров.СкладОтправитель = &СкладОтправитель
	               |	И ПеремещениеТоваров.СкладПолучатель = &СкладПолучатель
	               |	И ПеремещениеТоваров.СтатусДокумента = &СтатусДокумента
	               |	И ПеремещениеТоваров.Организация = &Организация
	               |	И ПеремещениеТоваров.ВидОперации = &ВидОперации
	               |	И ПеремещениеТоваров.ФилиалОтправитель = ВЫРАЗИТЬ(&СкладОтправитель КАК Справочник.Склады).Филиал
	               |	И ПеремещениеТоваров.ФилиалПолучатель = ВЫРАЗИТЬ(&СкладПолучатель КАК Справочник.Склады).Филиал
	               |	И ПеремещениеТоваров.ЗагруженИзТопЛог";
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
	Запрос.УстановитьПараметр("СтатусДокумента", Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог);
	
	РезультатЗапроса = Запрос.Выполнить();
	НужноМенятьШапку = РезультатЗапроса.Пустой();
	
	СтруктураТребТаблиц = ПолучитьТребуемыеТаблицыДляПеремещения(ЗаказНаПриемкуXDTO, РазмещениеЯчейкаСкладСсылка);
	СтруктураИсхТаблиц = ПолучитьИсходныеТаблицыДляПеремещения(ДокСсылка, ТребуетсяОчисткаТЧ);
	
	Если ТребуетсяОчисткаТЧ Тогда 
		Дельта = СтруктураТребТаблиц.Товары;
		Дельта2 = СтруктураТребТаблиц.ТоварыПоСтрокамЗаявок;
		Возврат Истина;
	КонецЕсли;
	
	НужноМенятьТЧ = Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(СтруктураИсхТаблиц.Товары, СтруктураТребТаблиц.Товары, Дельта, "КоличествоПлан");
	НужноМенятьТЧ2 = Не РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичныНовое(СтруктураИсхТаблиц.ТоварыПоСтрокамЗаявок, СтруктураТребТаблиц.ТоварыПоСтрокамЗаявок, Дельта2, "КоличествоПлан");
	
	Если Не НужноМенятьТЧ Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.НомерСтроки
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И ПеремещениеТоваровТовары.Количество <> ПеремещениеТоваровТовары.КоличествоПлан";
		Запрос.УстановитьПараметр("Ссылка",  ДокСсылка);
		НужноМенятьТЧ = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат НужноМенятьШапку Или НужноМенятьТЧ Или НужноМенятьТЧ2;
	
КонецФункции

Функция ПолучитьТребуемуюТаблицу(ЗаказНаПриемкуXDTO, РазмещениеЯчейкаСкладСсылка)
	
	ТоварыXDTO = ЗаказНаПриемкуXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	СоотвSSID = ОбменДаннымиКлиентСервер.СоответствиеСтрокЗаявокИSSID(ТоварыXDTO); 
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	Товары.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	Товары.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		Если Не ПустаяСтрока(РазмещениеЯчейкаСкладСсылка) И РазмещениеЯчейкаСкладСсылка <> СтрокаТовары.РазмещениеЯчейкаСкладСсылка Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
		НоваяСтрока.СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтрокаТовары.SSID);
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) И Не ЗначениеЗаполнено(НоваяСтрока.СтрокаЗаявки) Тогда 
			ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
		КонецЕсли;
		НоваяСтрока.КоличествоПлан = СтрокаТовары.КоличествоРазмещено;
	КонецЦикла;
	
	Возврат Товары;
	
КонецФункции

Функция ПолучитьИсходнуюТаблицу(ДокСсылка, ТребуетсяОчисткаТЧ)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокСсылка, "Проведен, СтатусДокумента");	
	
	ТребуетсяОчисткаТЧ = Не Реквизиты.Проведен Или Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый;
	
	Запрос = Новый Запрос;
	//Если ЭтоПоступление Тогда 
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.Номенклатура,
	 	               |	ПеремещениеТоваровТовары.КоличествоПлан,
		               |	ПеремещениеТоваровТовары.СтрокаЗаявки
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
		               |	И ПеремещениеТоваровТовары.Ссылка.Проведен
		               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента <> &СтатусДокументаНовый";
	//Иначе
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	ПеремещениеТоваровТовары.Номенклатура,
	//	               |	ПеремещениеТоваровТовары.КоличествоПлан
	//	               |ИЗ
	//	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	//	               |ГДЕ
	//	               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	//	               |	И ПеремещениеТоваровТовары.Ссылка.Проведен
	//	               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента <> &СтатусДокументаНовый";
	//КонецЕсли;
				   
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("СтатусДокументаНовый", Справочники.СтатусыДокументов.ПеремещениеТоваровНовый);	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТребуемыеТаблицыДляПеремещения(ЗаказНаПриемкуXDTO, РазмещениеЯчейкаСкладСсылка)
	
	ТоварыXDTO = ЗаказНаПриемкуXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	
	МассивSSID = Новый Массив;
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) Тогда 
			МассивSSID.Добавить(СтрокаТовары.SSID);  
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки,
	                |	ИдентификаторыСтрокЗаявок.IDSite КАК SSID,
	                |	ИдентификаторыСтрокЗаявок.Виртуальная КАК Виртуальная,
	                |	ИдентификаторыСтрокЗаявок.Заявка КАК Заявка
	                |ИЗ
	                |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                |ГДЕ
	                |	ИдентификаторыСтрокЗаявок.IDSite В(&МассивSSID)";
	Запрос.УстановитьПараметр("МассивSSID", МассивSSID);
	
	СоотвSSID = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Структура = Новый Структура("СтрокаЗаявки,Виртуальная,Заявка");
		ЗаполнитьЗначенияСвойств(Структура,Выборка);
		СоотвSSID.Вставить(Выборка.SSID, Структура);	
	КонецЦикла;
	
	ТоварыПоСтрокамЗаявок = Новый ТаблицаЗначений;
	ТоварыПоСтрокамЗаявок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ТоварыПоСтрокамЗаявок.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	ТоварыПоСтрокамЗаявок.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		Если СтрокаТовары.РазмещениеЯчейкаСкладСсылка <> РазмещениеЯчейкаСкладСсылка Тогда 
			Продолжить;
		КонецЕсли;
		
		РеквизитыSSID = СоотвSSID[СтрокаТовары.SSID];
		
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) И Не ЗначениеЗаполнено(РеквизитыSSID) Тогда 
			ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.SSID) Или РеквизитыSSID.Виртуальная Или Не ЗначениеЗаполнено(РеквизитыSSID.Заявка) Тогда 
			НоваяСтрока = Товары.Добавить();
		Иначе
			НоваяСтрока = ТоварыПоСтрокамЗаявок.Добавить();
			НоваяСтрока.СтрокаЗаявки = РеквизитыSSID.СтрокаЗаявки;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
		НоваяСтрока.КоличествоПлан = СтрокаТовары.КоличествоРазмещено;
	КонецЦикла;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Товары", Товары);
	СтруктураТаблиц.Вставить("ТоварыПоСтрокамЗаявок", ТоварыПоСтрокамЗаявок);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция ПолучитьИсходныеТаблицыДляПеремещения(ДокСсылка, ТребуетсяОчисткаТЧ)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокСсылка, "Проведен, СтатусДокумента");	
	
	ТребуетсяОчисткаТЧ = Не Реквизиты.Проведен Или Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.КоличествоПлан
	                |ИЗ
	                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |	И ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА
	                |				ИЛИ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка)
	                |	И ПеремещениеТоваровТовары.Ссылка.Проведен
	                |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента <> &СтатусДокументаНовый
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.СтрокаЗаявки,
	                |	ПеремещениеТоваровТовары.КоличествоПлан
	                |ИЗ
	                |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |	И ЕСТЬNULL(НЕ ПеремещениеТоваровТовары.СтрокаЗаявки.Виртуальная, ИСТИНА
	                |				И НЕ ЕСТЬNULL(ПеремещениеТоваровТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка)
	                |	И ПеремещениеТоваровТовары.Ссылка.Проведен
	                |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента <> &СтатусДокументаНовый";
				   
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусДокументаНовый", Справочники.СтатусыДокументов.ПеремещениеТоваровНовый);	
	
	РезультатыЗапроса =  Запрос.ВыполнитьПакет();
	Товары = РезультатыЗапроса[0].Выгрузить();
	ТоварыПоСтрокамЗаявок = РезультатыЗапроса[1].Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Товары", Товары);
	СтруктураТаблиц.Вставить("ТоварыПоСтрокамЗаявок", ТоварыПоСтрокамЗаявок);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

#КонецОбласти

