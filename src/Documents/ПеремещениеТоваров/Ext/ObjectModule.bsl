Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мРазрешитьНулевыеЦеныВРознице Экспорт;

Перем мОтражатьВРегламентированномУчете Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьПеремещениеТоваров и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиПеремещенияТоваров() Экспорт
	
	ПараметрыПечати = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СкладОтправитель,
	|	ПеремещениеТоваров.СкладОтправитель.Представление КАК Поставщик,
	|	ПеремещениеТоваров.СкладПолучатель,
	|	ПеремещениеТоваров.СкладПолучатель.Представление КАК Покупатель,
	|	ПеремещениеТоваров.Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		0 КАК КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияМест,
	|		0 КАК Цена,
	|		NULL КАК Серия,
	|		NULL КАК ХарактеристикаНоменклатуры,
	|		СтрокаЗаявки.Заявка.Номер КАК НомерЗаявки,
	|		СтрокаЗаявки.ПоследняяКорректировка.Контрагент КАК Контрагент,
	|		СтрокаЗаявки.IDSite КАК SSID,
	|		КоличествоПлан,
	|		ПеремещениеТоваров.Товары.Количество - ПеремещениеТоваров.Товары.КоличествоНеПринято КАК КоличествоОтгружено,
	|		СтрокаЗаявки.Заявка.Контрагент КАК КонтрагентЗаявка
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеТоваров.Товары.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	// Выводим шапку накладной
	ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Перемещение"));

	ПараметрыПечати.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Дата)));
	ПараметрыПечати.Вставить("ПредставлениеСКЛ", Шапка.СкладОтправитель);

	ПараметрыПечати.Вставить("ПредставлениеПолучателя", Шапка.СкладПолучатель);
	ПараметрыПечати.Вставить("Док", ДокументОснование);

	// Вывести табличную часть
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
	ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Артикул");
	
	
	Позиции = Новый Массив;
	
	Ном = 0;

	// Выборка товаров
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		
		
		Ном = Ном + 1;

		ПараметрыПозиции.Вставить("НомерСтроки", Ном);

		ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Артикул);
		ПараметрыПозиции.Вставить("КоличествоПлан", ВыборкаСтрокТовары.КоличествоПлан);
		ПараметрыПозиции.Вставить("КоличествоОтгружено", ВыборкаСтрокТовары.КоличествоОтгружено);
		ПараметрыПозиции.Вставить("SSID", ВыборкаСтрокТовары.SSID);
		ПараметрыПозиции.Вставить("НомерЗаявки", ВыборкаСтрокТовары.НомерЗаявки);
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Контрагент) Тогда 
			ПараметрыПозиции.Вставить("Контрагент", ВыборкаСтрокТовары.Контрагент);
		Иначе
			ПараметрыПозиции.Вставить("Контрагент", ВыборкаСтрокТовары.КонтрагентЗаявка);
		КонецЕсли;	

		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары));

		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		
		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;

	ПараметрыПечати.Вставить("Позиции", Позиции);

	#Если ВнешнееСоединение Тогда
	WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПечати);
	#КонецЕсли
	
	Возврат ПараметрыПечати;
	
КонецФункции //ПолучитьДанныеДляПечатиПеремещенияТоваров()

#Если Клиент Тогда

// Функция осуществляет запись в RFID метки.
//
// Параметры
//  Нет
//
Процедура ЗаписатьВRFIDМетки()

	ЗаполнениеДокументов.ЗаписатьRFIDМеткиИзДокумента(Ссылка);

КонецПроцедуры // ЗаписатьВRFIDМетки()

// Функция осуществляет печать этикеток для позиций ТЧ
//
// Параметры
//  Нет
//
Процедура ПечататьЭтикетки()

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка, "Цена");
	Иначе
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка);
	КонецЕсли;

КонецПроцедуры // ПечататьЭтикетки()

// Функция печатает ценники.
//
Функция ПечатьЦенников()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК Печать,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Док
	|");

	Запрос.УстановитьПараметр("Док", Ссылка);

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);

	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецФункции // ПечатьЦенников()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  ИмяМакета - Имя макета для печати.
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(ИмяМакета, НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, ИмяМакета, , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Возвращает таблицу стоимости по товарам
//
Функция ПолучитьТаблицуСтоимостиТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения",     ВидДвиженияНакопления.Расход);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|
	|ГДЕ
	|	ПартииТоваровНаСкладах.Регистратор   = &ТекущийДокумент
	|	И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Возвращает стоимость товара
//
Функция ПолучитьСтоимостьТовара(Таблица, Номенклатура, Характеристика = Неопределено, Серия = Неопределено, ПартионныйУчетПоСериям = Ложь, Количество)

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   Номенклатура);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	КонецЕсли;

	Если ПартионныйУчетПоСериям
	   И ЗначениеЗаполнено(Серия) Тогда
		СтруктураПоиска.Вставить("СерияНоменклатуры",          Серия);
	КонецЕсли;

	Строки = Таблица.НайтиСтроки(СтруктураПоиска);

	Если Строки.Количество() > 0 Тогда
		Стоимость  = Строки[0].Стоимость;
		Количество = Строки[0].Количество;
	Иначе
		Стоимость  = 0;
		Количество = 0;
	КонецЕсли;

	Возврат Стоимость;

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров()

	ПараметрыПечати = ПолучитьДанныеДляПечатиПеремещенияТоваров();	

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть

	ИмяШапки  = "ШапкаТаблицы";
	ИмяСтроки = "Строка";

	ОбластьНомера  = Макет.ПолучитьОбласть(ИмяШапки + "|НомерСтроки");
	ОбластьТовар   = Макет.ПолучитьОбласть(ИмяШапки + "|Товар");
	ОбластьКодов   = Макет.ПолучитьОбласть(ИмяШапки + "|КолонкаКодов");
	ОбластьДанных  = Макет.ПолучитьОбласть(ИмяШапки + "|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьТовар);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + ?(ЛОжь, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	Иначе
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + Макет.Область("КолонкаКодов").ШиринаКолонки
		                                    + ?(Ложь, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьКодов);
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьНомера = Макет.ПолучитьОбласть(ИмяСтроки + "|НомерСтроки");
	ОбластьТовар  = Макет.ПолучитьОбласть(ИмяСтроки + "|Товар");
	ОбластьКодов  = Макет.ПолучитьОбласть(ИмяСтроки + "|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть(ИмяСтроки + "|Данные");

	// Выборка товаров
	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Вывести(ОбластьНомера);

		ОбластьТовар.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьТовар);

		ОбластьКодов.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьКодов);

		ОбластьДанных.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьДанных);

	КонецЦикла;
    	
	// Вывести подвал
	ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьТовар  = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьКодов);
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Формирует табличный документ по унифицированной форме ТОРГ-13
// 
// Возвращаемое значение
//  Табличный документ - унифицированная форма ТОРГ-13
//
Функция ПечатьТОРГ13()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	ВалютаПечати = мВалютаРегламентированногоУчета;
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК НомерДокумента,
	|	Дата  КАК ДатаДокумента,
	|	Организация,
	|	СкладОтправитель КАК ОтправительПодразделение,
	|	СкладПолучатель  КАК ПолучательПодразделение,
	|	СкладОтправитель.ВидСклада КАК ОтправительВидСклада,
	|	СкладПолучатель.ВидСклада  КАК ПолучательВидСклада,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		Цена,
	|		Количество,
	|		0 КАК КоличествоМест,
	|		Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|		ЕдиницаИзмерения.Коэффициент КАК ДокЕдиницаКоэффициент,
	|		ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		ЕдиницаИзмеренияМест.Представление           КАК ЕдиницаИзмеренияМестНаименование,
	|		ВЫБОР
	|			КОГДА КоличествоМест > 0 ТОГДА ЕдиницаИзмеренияМест.Коэффициент / Коэффициент
	|			ИНАЧЕ NULL
	|		КОНЕЦ                                        КАК КоличествоВОдномМесте,
	|		ХарактеристикаНоменклатуры                   КАК Характеристика,
	|		СерияНоменклатуры                            КАК Серия,
	|		Номенклатура.ВестиПартионныйУчетПоСериям     КАК ПартионныйУчетПоСериям
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		0 КАК Цена,
	|		0 КАК Сумма,
	|		0 КАК КоличествоВОдномМесте,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ЭтоСкладНТТ = (Шапка.ОтправительВидСклада = Перечисления.ВидыСкладов.НТТ
	              ИЛИ Шапка.ПолучательВидСклада = Перечисления.ВидыСкладов.НТТ);

	Если НЕ ЭтоСкладНТТ Тогда
		ТаблицаСтоимости        = ПолучитьТаблицуСтоимостиТоваров();
		ТаблицаСтоимости.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");
		ВалютаУпрУчета          = глЗначениеПеременной("ВалютаУправленческогоУчета");
		Параметры               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
		КурсВалютыУпрУчета      = Параметры.Курс;
		КратностьВалютыУпрУчета = Параметры.Кратность;
	КонецЕсли;
	
	ТаблицаТовары = Товары.Выгрузить();
	ТаблицаТовары.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры", "Количество");
	ТаблицаТовары.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");
	СтруктураПоискаПоТоварам = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");

	Макет = ПолучитьОбщийМакет("ТОРГ13");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";

	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента));
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогКоличествоМестПоСтранице = 0;
	ИтогМассаБруттоПоСтранице    = 0;
	ИтогМассыНеттоПоСтранице     = 0;
	ИтогСуммыПоСтранице          = 0;

	// инициализация итогов по документу
	ИтогоКоличество  = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	ИтогоСумма       = 0;

	Ном = 0;

	// Выводим многострочную часть докмента
	ВыборкаСтрокТовары      = Шапка.Товары.Выбрать();
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");

	// Выборка товаров
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассаНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		КоличествоМест = Формат(ВыборкаСтрокТовары.Количество, "ЧЦ=15; ЧДЦ=3");

		Если ВыборкаСтрокТовары.КоличествоМест <> 0 И ЗначениеЗаполнено(ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование) Тогда
			КоличествоМест = КоличествоМест 
			                 + Символы.ПС
			                 + " (" + Формат(ВыборкаСтрокТовары.КоличествоМест,"ЧЦ=15; ЧДЦ=0")
			                 + " "
			                 + ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование
			                 + ")";
		КонецЕсли;

		ОбластьМакета.Параметры.КоличествоМест    = КоличествоМест;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ЭтоСкладНТТ Тогда
			Сумма = ВыборкаСтрокТовары.Количество * ВыборкаСтрокТовары.Цена;
		Иначе
			Если ВыборкаСтрокТовары.Количество = 0 Тогда
				Сумма = 0;
				Цена  = 0;
			Иначе
				Количество = 0;
				Сумма = ПолучитьСтоимостьТовара(ТаблицаСтоимости,
				                                ВыборкаСтрокТовары.Номенклатура,
				                                ВыборкаСтрокТовары.Характеристика,
				                                ВыборкаСтрокТовары.Серия,
				                                ВыборкаСтрокТовары.ПартионныйУчетПоСериям,
				                                Количество);
				Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, ВалютаУпрУчета, ВалютаПечати, КурсВалютыУпрУчета, 1, КратностьВалютыУпрУчета, 1);
				
				Если ВыборкаСтрокТовары.ДокЕдиницаКоэффициент <> 0 Тогда
					Количество = Количество * ВыборкаСтрокТовары.ЕдиницаХраненияОстатковКоэффициент / ВыборкаСтрокТовары.ДокЕдиницаКоэффициент;
				КонецЕсли;
				
				СтруктураПоискаПоТоварам.Номенклатура = ВыборкаСтрокТовары.Номенклатура;
				СтруктураПоискаПоТоварам.ХарактеристикаНоменклатуры = ВыборкаСтрокТовары.Характеристика;
				СтруктураПоискаПоТоварам.СерияНоменклатуры = ВыборкаСтрокТовары.Серия;
				СтрокиТаблицыТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоискаПоТоварам);
				Цена = Окр(?(Количество > 0, Сумма / Количество, 0), 2);
				Сумма = Цена * ВыборкаСтрокТовары.Количество;
			КонецЕсли;

			ОбластьМакета.Параметры.Цена = Цена;
		КонецЕсли;

		ОбластьМакета.Параметры.Сумма = Сумма;

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТовары.Количество;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + Сумма;

	КонецЦикла;

	// Выборка возвратная тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассаНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);

		ОбластьМакета.Параметры.КоличествоМест    = Формат(ВыборкаСтрокТара.Количество, "ЧЦ=15; ЧДЦ=3");
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТара.Количество;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + 0;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТара.Количество;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + 0;

	КонецЦикла;

	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
	ОбластьМакета.Параметры.ИтогоСумма          = ИтогоСумма;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ПараметрыПрописиНаРусском = ВалютаПечати.ПараметрыПрописиНаРусском;
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "1", "0");
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "2", "0");
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "3", "0");
	ОбластьМакета.Параметры.ИтогоСуммаПрописью = ЧислоПрописью(Цел(ИтогоСумма), "L=ru_RU; НП=Ложь; НД=Ложь", ПараметрыПрописиНаРусском);
	ОбластьМакета.Параметры.ИтогоСуммаКоп      = Формат(Цел((ИтогоСумма-Цел(ИтогоСумма))*100), "ЧЦ=2; ЧН=00");
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ13()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()
	
	Если НачалоДня(Дата) >= Дата(2012, 03, 13) Тогда
		ОбработкаПечати = Обработки.ПечатьТТН1208.ПолучитьФорму("Форма");
	Иначе
		ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	КонецЕсли;
	
	
	ОбработкаПечати.Документ = ЭтотОбъект.Ссылка;

	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Функция формирует табличный документ унифицированной формы М-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",     Ссылка);
	Запрос.УстановитьПараметр("ВидПоступленияОрдер", Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата  КАК ДатаСоставления,
	|	Организация,
	|	Организация             КАК ЮрФизЛицо,
	|	СкладПолучатель         КАК МестоПриемки,
	|	СкладПолучатель.Представление КАК СкладНаименование,
	|	Подразделение,
	|	Подразделение  КАК ПредставлениеПодразделения
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка       КАК Метка
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		СУММА(Количество)                    КАК КоличествоПринято,
	|		ХарактеристикаНоменклатуры           КАК Характеристика,
	|		СерияНоменклатуры                    КАК Серия,
	|		МИНИМУМ(НомерСтроки)                 КАК НомерСтроки,
	|		0                                    КАК Метка
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО 
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	Номенклатура.Код,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	Количество КАК Количество,
	|	NULL,
	|	NULL,
	|	НомерСтроки КАК НомерСтроки,
	|	2           КАК Метка
	|ИЗ
	|(ВЫБРАТЬ
	|	Номенклатура,
	|	СУММА(Количество) КАК Количество,
	|	МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|) КАК ПеремещениеТоваров
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("М4");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М4";

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок докмента
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаСоставления), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	НомерСтраницы   = 1;

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	Ном = 0;

	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;	

	// Выводим многострочную часть докмента
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтрок");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		КоличествоПринято = ВыборкаСтрокТовары.КоличествоПринято;

		ОбластьМакета.Параметры.КоличествоПринято = КоличествоПринято;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)
		                                          + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
		                                          + ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");
												  
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
		Если Ном = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;

		Если НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда

			НомерСтраницы = НомерСтраницы + 1;
			ПодвалСтрок   = Макет.ПолучитьОбласть("ПодвалСтрок");
			ТабДокумент.Вывести(ПодвалСтрок);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;												  
												  
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;

	КонецЦикла;

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");

	ОбластьМакета.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьМ4()

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	КАК Номер,
	|	Дата	КАК ДатаДокумента,
	|	Дата	КАК ДатаСоставления,
	|	Организация,
	|	СкладОтправитель КАК Склад,
	|	СкладПолучатель КАК Подразделение
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК МатериалНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК НоменклатурныйНомер,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки
	|ИЗ 
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры	КАК Характеристика,
	|		СерияНоменклатуры           КАК Серия,
	|		СУММА(Количество)           КАК Количество,
	|		МИНИМУМ(НомерСтроки) 		КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
	|";

	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М11";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("М11");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заголовок     = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	Область.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Область.Параметры.КодОКПО = СведенияОбОрганизации.КодПоОКПО;
	Область.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
	
	ТабДокумент.Вывести(Область);
	
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		
		ТабДокумент.Вывести(Область);

	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ11()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда

		ТабДокумент = ПечатьПеремещениеТоваров();
	ИначеЕсли ИмяМакета = "ТОРГ13" тогда
		// Унифицированная форма ТОРГ-13 (накладаня на внутрнее перемещение)
		ТабДокумент = ПечатьТОРГ13();
	ИначеЕсли ИмяМакета = "1Т"
		  ИЛИ ИмяМакета = "_1Т" Тогда
		ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "М4" тогда
		// Унифицированная форма М-4 (приходный ордер)
		ТабДокумент = ПечатьМ4();
	ИначеЕсли ИмяМакета = "М11" Тогда
		ТабДокумент = ПечатьМ11();
	ИначеЕсли ИмяМакета = "БланкОтправитель" Или ИмяМакета = "БланкПолучатель" Тогда
		ТабДокумент = ПечатьБланк(ИмяМакета, НаПринтер);
	ИначеЕсли ИмяМакета = "Ценники" Тогда
		ТабДокумент = ПечатьЦенников();
	ИначеЕсли ИмяМакета = "Этикетки" Тогда
		ПечататьЭтикетки();
		Возврат;
	ИначеЕсли ИмяМакета = "ПриходНаРозничныеСкладыВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Истина);
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	ИначеЕсли ИмяМакета = "ЗаписьВRFIDМетки" Тогда
		ЗаписатьВRFIDМетки();
		Возврат;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Ведомость", "Перемещение товаров");
	// + 20181008 Пушкин XX-1098
	//СтруктураМакетов.Вставить("ТОРГ13",             "ТОРГ-13 (Накладная на внутреннее перемещение)");
	//СтруктураМакетов.Вставить("_1Т",                "Бланки ТТН");
	//СтруктураМакетов.Вставить("М4",                 "М-4 (Приходный ордер)");
	//СтруктураМакетов.Вставить("М11",                "M-11 (Требование-накладная)");
	//СтруктураМакетов.Вставить("БланкОтправитель",   "Бланк товарного наполнения, склад отправитель");
	//СтруктураМакетов.Вставить("БланкПолучатель",    "Бланк товарного наполнения, склад получатель");
	//СтруктураМакетов.Вставить("Ценники",            "Ценники на товары");
	//СтруктураМакетов.Вставить("Этикетки",           "Этикетки");
	//СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ", "Расход с розничных складов в ценах АТТ");
	//СтруктураМакетов.Вставить("ПриходНаРозничныеСкладыВЦенахАТТ", "Приход на розничные склады в ценах АТТ");
	//СтруктураМакетов.Вставить("ЗаписьВRFIDМетки", "Запись в RFID метки");
	// - 20181008 Пушкин XX-1098
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаРезервовПоСериям = Новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(СкладОтправитель, Организация, МассивНоменклатуры, , СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ,ТаблицаРезервовПоСериям);
	ТаблицаСерий.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Качество");

	ТоварыТабличнойЧасти=Товары.Выгрузить();

	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтруктураПоиска   = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);

		Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтруктураПоиска.Вставить("Цена",                   ИсходнаяСтрока.Цена);
		КонецЕсли;
		
		ЗаполнятьИзРезервов = Ложь;
		Если ТипЗнч(ИсходнаяСтрока.ДокументРезерва) = Тип("ДокументСсылка.ЗаказПокупателя") 
		   И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании
		   И СкладОтправитель.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда

			Если ИсходнаяСтрока.ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтруктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ДокументРезерва);
				ЗаполнятьИзРезервов = Истина;
			КонецЕсли;

		КонецЕсли;

		Если ЗаполнятьИзРезервов Тогда
			НайденныеСтроки = ТаблицаРезервовПоСериям.НайтиСтроки(СтруктураПоиска);
		Иначе
			НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;

		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест         = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры            = Строка.СерияНоменклатуры;
			НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;
			НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
			НоваяСтрока.ВнутреннийЗаказ              = ИсходнаяСтрока.ВнутреннийЗаказ;
			НоваяСтрока.Количество                   = СписанноеКоличество; 
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.ЕдиницаИзмеренияМест         = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
				НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры            = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;
				НоваяСтрока.ВнутреннийЗаказ              = ИсходнаяСтрока.ВнутреннийЗаказ;
				НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
				НоваяСтрока.Количество                   = КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Производит заполнение поля "Цена" табличной части "Товары".
//
Процедура ЗаполнитьРозничнуюЦену() Экспорт

	ОтправительНТТ   = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ    = (СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательТипЦен = ?((НЕ ОтправительНТТ) И ПолучательНТТ, СкладПолучатель.ТипЦенРозничнойТорговли, Неопределено);

	Для Каждого Строка Из Товары Цикл

		Если НЕ (ОтправительНТТ ИЛИ ПолучательНТТ) Тогда
			Строка.Цена = 0;
		ИначеЕсли (НЕ ОтправительНТТ) И ПолучательНТТ Тогда
			Строка.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры,
			              ПолучательТипЦен, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		ИначеЕсли ОтправительНТТ Тогда
			Строка.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, СкладОтправитель,
			              мВалютаРегламентированногоУчета, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Производит заполнение поля "Цена" строки табличной части "Товары".
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части "Товары"
//
Процедура ЗаполнитьРозничнуюЦенуВСтроке(СтрокаТабличнойЧасти) Экспорт

	ОтправительНТТ   = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ    = (СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательТипЦен = ?((НЕ ОтправительНТТ) И ПолучательНТТ, СкладПолучатель.ТипЦенРозничнойТорговли, Неопределено);

	Если НЕ (ОтправительНТТ ИЛИ ПолучательНТТ) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли (НЕ ОтправительНТТ) И ПолучательНТТ Тогда
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		              ПолучательТипЦен, Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
	ИначеЕсли ОтправительНТТ Тогда
		СтрокаТабличнойЧасти.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СкладОтправитель,
		              мВалютаРегламентированногоУчета, Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
	КонецЕсли;

КонецПроцедуры

// Выполняет необходимые действия при изменении реквизита ВнутреннийЗаказ
//
Процедура ПриИзмененииЗаказа() Экспорт

	//СкладПолучатель = ВнутреннийЗаказ.Заказчик;

КонецПроцедуры // ПриИзмененииОрганизации()

// Выполняет необходимые действия при изменении реквизита Организация
//
Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;

	//ОбщегоНазначения.ОбработатьПризнакОтраженияВреглУчете(ЭтотОбъект, ,,мОтражатьВРегламентированномУчете,истина);

КонецПроцедуры // ПриИзмененииОрганизации()

// Заполняет реквизиты значениями по умолчанию
//
// Параметры: 
//  ПараметрОбъектКопирования	- содержкит ссылку на документ копирования в случае, 
//								  если новый документ создается копированием
//  ПараметрОснование			- содержкит ссылку на документ-основание в случае, 
//								  если новый документ создается на основании другого
//
Процедура ИнициализироватьНовыйДокумент(ПараметрОбъектКопирования, ПараметрОснование) Экспорт
	
	#Если Клиент Или ВнешнееСоединение Тогда
		
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);
	
	Если ПараметрОбъектКопирования <> Неопределено Тогда
		ВидОперации = ПараметрОбъектКопирования.ВидОперации;
		ДокументОснование = ПараметрОбъектКопирования.ДокументОснование;
	КонецЕсли;
	
	Если ПараметрОснование <> Неопределено Тогда
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог;
		КонецЕсли;
	КонецЕсли;
		
	СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый;
	Ответственный = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
	
	//Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
	//	СкладОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	//КонецЕсли;

	//Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
	//	СкладПолучатель  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	//КонецЕсли;
	
	#КонецЕсли
		
КонецПроцедуры // ИнициализироватьНовыйДокумент()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	 Или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, СкладОтправитель, СкладПолучатель");

	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	//	И СтруктураШапкиДокумента.СложныйУчетНДС
	//	И Не СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда
	//	СтруктураОбязательныхПолей.Вставить("НДСвСтоимостиТоваров");
	//КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ 
	//   И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Перемещение с НТТ по ордерам не осуществляется!", Отказ, Заголовок);
	//КонецЕсли;	
	
	//Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ВнутреннийЗаказ)
	//   И Не СтруктураШапкиДокумента.ВидВнутреннегоЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Перемещение можно осуществлять только по внутреннему заказу с видом заказа на склад!", Отказ, Заголовок);
	//КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения");
	СтруктураОбязательныхПолей.Вставить("Качество");

	Если (    СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	      Или СтруктураШапкиДокумента.ВидСкладаПолучателя  = Перечисления.ВидыСкладов.НТТ)
	   И (Не мРазрешитьНулевыеЦеныВРознице) Тогда
		СтруктураОбязательныхПолей.Вставить("Цена");
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

		
	ПроверитьСтрокиТабличнойЧасти("Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

//Проверяет заполнение реквизитов табличных частей, которые зависят от указания реквизита ВнутреннийЗаказ
Процедура  ПроверитьСтрокиТабличнойЧасти(ИмяТЧ, ТЧ, Отказ, Заголовок)
	Для каждого Строка из ТЧ цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
			                               """ табличной части """ + ИмяТЧ + """: ";

		Если не ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДокументРезерва) Тогда
			Если Строка.ДокументРезерва<>Строка.ВнутреннийЗаказ Тогда
				//неправильный документ резерва
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан документ резерва, отличающийся от значения реквизита ""Внутренний заказ""" , Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если Строка.ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			//неправильный внутренний заказ
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан Внутренний заказ с видом заказа """+Строка.ВнутреннийЗаказ.ВидЗаказа+""". Может быть указан только заказ с видом ""На склад"" " , Отказ, Заголовок);

		КонецЕсли;
		
		Если Строка.СкладВнутреннегоЗаказа <> СкладПолучатель Тогда
			// неправильный склад
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан Внутренний заказ, в котором склад-заказчик отличается от склада-получателя, указанного в шапке документа" , Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АктРассмотренияВозврата") Тогда

		СтандартнаяОбработка = Ложь;
		
		//Шапка
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание,"Организация",);
		
		Дата 					= ТекущаяДата();
		СтатусДокумента 		= Справочники.СтатусыДокументов.ПеремещениеТоваровНовый;
		АктРассмотренияВозврата = Основание;
		ВидОперации				= Перечисления.ВидыОперацийПеремещенияТоваров.ОтгрузкаТопЛог;
		
		 //Товары
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктРассмотренияВозвратаТовары.Номенклатура,
		|	АктРассмотренияВозвратаТовары.ЕдиницаИзмерения,
		|	АктРассмотренияВозвратаТовары.Коэффициент,
		|	АктРассмотренияВозвратаТовары.Качество,
		|	АктРассмотренияВозвратаТовары.КоличествоРазмещено КАК Количество,
		|	АктРассмотренияВозвратаТовары.КоличествоРазмещено КАК КоличествоПлан,
		|	АктРассмотренияВозвратаТовары.СтрокаЗаявки,
		|	АктРассмотренияВозвратаТовары.СтрокаПрихода
		|ИЗ
		|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
		|ГДЕ
		|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	АктРассмотренияВозвратаТовары.НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", Основание);
		
		Результат = Запрос.Выполнить();

		Товары.Загрузить(Результат.Выгрузить());

		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

		Если Не УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() Тогда
			Возврат;
		КонецЕсли;

		// Заполнение шапки
		СкладПолучатель    = Основание.Заказчик;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		ВнутреннийЗаказ    = Основание.Ссылка;
		Комментарий        = Основание.Комментарий;

		Склад = Неопределено;
		#Если Клиент Тогда
		Если НЕ ВвестиЗначение(Склад, "Выберите склад отправитель", Тип("СправочникСсылка.Склады")) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#КонецЕсли
		СкладОтправитель = Склад;

		УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, Товары,         Склад, Дата);
		
		ЗаполнитьРозничнуюЦену();

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполнение шапки
		ДокументОснование = Основание;
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Организация,Склад,Комментарий");
		СкладПриемки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Склад, "СкладПриемки");
		
		Если ЗначениеЗаполнено(СкладПриемки) Тогда 
			СкладОтправитель = СкладПриемки
		Иначе
			СкладОтправитель = Реквизиты.Склад;
		КонецЕсли;
		
		Организация                  = Реквизиты.Организация;
		//Ответственный                = Основание.Ответственный;
		//Подразделение                = Основание.Подразделение;
		Комментарий                  = Реквизиты.Комментарий;
		
		ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
		               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки
		               |ПОМЕСТИТЬ втДанные
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
		               |ГДЕ
		               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТоварыКРезервированиюОстатки.Номенклатура,
		               |	ТоварыКРезервированиюОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		               |	ТоварыКРезервированиюОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		               |	ТоварыКРезервированиюОстатки.СтрокаЗаявки,
		               |	ТоварыКРезервированиюОстатки.СтрокаПрихода,
		               |	ТоварыКРезервированиюОстатки.КоличествоОстаток КАК КоличествоПлан,
		               |	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество
		               |ИЗ
		               |	РегистрНакопления.ТоварыКРезервированию.Остатки(
		               |			,
		               |			(СтрокаЗаявки, СтрокаПрихода) В
		               |					(ВЫБРАТЬ
		               |						втДанные.СтрокаЗаявки,
		               |						втДанные.СтрокаПрихода
		               |					ИЗ
		               |						втДанные)
		               |				И Склад = &Склад) КАК ТоварыКРезервированиюОстатки";
		Запрос.УстановитьПараметр("Ссылка", Основание);
		Запрос.УстановитьПараметр("Склад", СкладОтправитель);
		Товары.Загрузить(Запрос.Выполнить().Выгрузить());	
		
	// Добавлено Валиахметов А.А. 12.03.2018  PK83-260
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда 
		
		ПоследняяКорректировка = Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(Основание);
		СкладОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследняяКорректировка, "Склад");
		ФилиалОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОтправитель, "Филиал");
		СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый;
		
		ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.СвободноеПеремещение;
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследняяКорректировка, "Организация");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаявкаПокупателяТовары.СтрокаЗаявки,
		               |	ЗаявкаПокупателяТовары.Номенклатура,
		               |	ЗаявкаПокупателяТовары.Качество,
		               |	ЗаявкаПокупателяТовары.Ссылка.Склад
		               |ПОМЕСТИТЬ втСтрокиЗаявок
		               |ИЗ
		               |	Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
		               |ГДЕ
		               |	ЗаявкаПокупателяТовары.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РезервыТоваровОстатки.Номенклатура,
		               |	РезервыТоваровОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		               |	РезервыТоваровОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		               |	РезервыТоваровОстатки.Качество,
		               |	РезервыТоваровОстатки.СтрокаЗаявки,
		               |	РезервыТоваровОстатки.СтрокаПрихода,
		               |	РезервыТоваровОстатки.КоличествоОстаток КАК Количество,
		               |	РезервыТоваровОстатки.КоличествоОстаток КАК КоличествоПлан
		               |ИЗ
		               |	РегистрНакопления.РезервыТоваров.Остатки(
		               |			,
		               |			Склад = &Склад
		               |				И СтрокаЗаявки В
		               |					(ВЫБРАТЬ
		               |						втСтрокиЗаявок.СтрокаЗаявки
		               |					ИЗ
		               |						втСтрокиЗаявок)) КАК РезервыТоваровОстатки
		               |ГДЕ
		               |	РезервыТоваровОстатки.КоличествоОстаток > 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПартииТоваровОстатки.Номенклатура,
		               |	ПартииТоваровОстатки.Качество,
		               |	ПартииТоваровОстатки.Организация,
		               |	ПартииТоваровОстатки.КоличествоОстаток КАК Количество,
		               |	ПартииТоваровОстатки.Организация = &Организация КАК ЭтаОрганизация
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваров.Остатки(
		               |			,
		               |			(Номенклатура, Склад, Качество) В
		               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |						втСтрокиЗаявок.Номенклатура,
		               |						втСтрокиЗаявок.Склад,
		               |						втСтрокиЗаявок.Качество
		               |					ИЗ
		               |						втСтрокиЗаявок)
		               |				И СтатусПартии = &СтатусПартии) КАК ПартииТоваровОстатки
		               |ГДЕ
		               |	ПартииТоваровОстатки.КоличествоОстаток > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЭтаОрганизация УБЫВ,
		               |	ПартииТоваровОстатки.СтрокаПрихода.Дата";
		Если ТипЗнч(ПоследняяКорректировка) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЗаявкаПокупателя.Товары", "Документ.КорректировкаЗаявкиПокупателя.Товары"); 
		КонецЕсли;
		Запрос.УстановитьПараметр("Склад", СкладОтправитель);
		Запрос.УстановитьПараметр("Ссылка", ПоследняяКорректировка);
		Запрос.УстановитьПараметр("Организация", Организация);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОтправитель, "СкладVMI") Тогда
			СтатусПартии = Перечисления.СтатусыПартии.ПринятыйНаОтветХранение;	
		Иначе
			СтатусПартии = Перечисления.СтатусыПартии.Собственный;	
		КонецЕсли;
		Запрос.УстановитьПараметр("СтатусПартии", СтатусПартии);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатыЗапроса[1].Пустой() Тогда 
			Сообщить("Нет товаров в резерве для заполнения перемещения", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		Выборка = РезультатыЗапроса[1].Выбрать();
		ОстаткиПартий = РезультатыЗапроса[2].Выгрузить();
		
		Пока Выборка.Следующий() Цикл 
			КоличествоРаспределить = Выборка.КоличествоПлан;
			
			Отбор = Новый Структура("Номенклатура,Качество");
			ЗаполнитьЗначенияСвойств(Отбор, Выборка);
			Строки = ОстаткиПартий.НайтиСтроки(Отбор);
			
			Индекс = 0;
			Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
				СтрокаОст = Строки.Получить(Индекс);
				СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаОст.Количество);
				Если СписываемоеКоличество > 0 Тогда 
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Количество = СписываемоеКоличество;
					НоваяСтрока.КоличествоПлан = СписываемоеКоличество;
					Если Не СтрокаОст.ЭтаОрганизация Тогда 
						НоваяСтрока.Организация = СтрокаОст.Организация;
					КонецЕсли;
				КонецЕсли;
				КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
				СтрокаОст.Количество = СтрокаОст.Количество - СписываемоеКоличество;
				
				Индекс = Индекс + 1;
			КонецЦикла;
			Если КоличествоРаспределить > 0 Тогда 
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = КоличествоРаспределить;
				НоваяСтрока.КоличествоПлан = КоличествоРаспределить;
			КонецЕсли;
		КонецЦикла;
		
		Товары.Свернуть("Поступление,Номенклатура,ЕдиницаИзмерения,Коэффициент,Качество,СтрокаПрихода,СтрокаЗаявки,Организация", "Количество,КоличествоНеПринято,КоличествоПлан");
		
	//Конец Добавлено Валиахметов А.А. 12.03.2018  PK83-260
	
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ЗначениеЗаполнено(ДатаОтгрузки) И СкладОтправитель.ОбменСTopLog Тогда 
		ДатаОтгрузки = Дата + 3*24*60*60;
	КонецЕсли;
	
	// ЛНА, Замер  APDEX ++(
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПеремещениеТоваров_Проведение");
		
	КонецЕсли;
	//)--


	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//Если Не ЭтотОбъект.ЭтоНовый() И (РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.Запись и Проведен) Тогда 
	//	ДатаДо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Ссылка, "Дата");
	//	Если ДатаДо < ЭтотОбъект.Дата И ЭтотОбъект.Дата >= глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда  
	//		// Собственные движения документа стали попадать в рассчитываемый период, поэтому движения нужно удалить
	//		ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(ЭтотОбъект.Ссылка, "ТоварыНаСкладах");
	//		ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(ЭтотОбъект.Ссылка, "ПартииТоваров");
	//		ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(ЭтотОбъект.Ссылка, "ПартииТоваровВПути");
	//		ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(ЭтотОбъект.Ссылка, "РазмещенияСтрокЗаказов");
	//		ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(ЭтотОбъект.Ссылка, "ТоварыКРезервированию");
	//		ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(ЭтотОбъект.Ссылка, "ТоварыВПути");
	//	КонецЕсли;
	//КонецЕсли;
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияПриСдвигеДаты(ЭтотОбъект, РежимЗаписи, "ТоварыНаСкладах,ПартииТоваровВПути,РазмещенияСтрокЗаказов,ТоварыКРезервированию,ТоварыВПути");
	
	Для Каждого СтрокаТЧ Из Товары Цикл 
		СтрокаТЧ.КоличествоНеПринято = СтрокаТЧ.КоличествоПлан - СтрокаТЧ.Количество;
	КонецЦикла;
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//#XX-1161 Kalinin V.A. ( 2018-11-06 )
	// 
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения тогда 
		ЗаявкиПокупателяКлиентСервер.ПроверитьНаЗакрытыеСтроки(Товары,Отказ,Перечисления.ТипПоставки.ПополнениеСклада);
	КонецЕсли;	
	// */

	
	#Если Клиент Тогда 
		Отказ = Не ПроверитьЗаполнение();
		Если СтрНачинаетсяС(СкладОтправитель.Наименование, "Приемка") Или СтрНачинаетсяС(СкладОтправитель.Наименование, "Товар в пути") Тогда 
			Если Не ЗначениеЗаполнено(ДокументОснование) Тогда 
				Сообщить("Не заполнено поле ""Документ-основание""");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЭтоНовый() И ДокументОснование = Ссылка Тогда 
			Сообщить("Запрещено ставить документом-основанием сам документ");
			Отказ = Истина;
		КонецЕсли;
	#КонецЕсли
	
	Поступление = ?(ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"), ДокументОснование, Неопределено);
	Для Каждого СтрокаТЧ Из Товары Цикл 
		СтрокаТЧ.Поступление = Поступление;
	КонецЦикла;

	//Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
	//    Сообщить("Изменить документ вручную пока невозможно.");
	//	Отказ = Истина;
	//	Возврат;
	//	
	//КонецЕсли;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил Тогда 
		СообщениеОбОшибке = "Документ-основание не загружен из ТопЛог, размещение проводить нельзя"; 
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "СтатусДокумента,Проведен");
			Если Не (Реквизиты.Проведен И (Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровПринят Или Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен) ) Тогда 
				Отказ = Истина;
				#Если Клиент Тогда
					Сообщить(СообщениеОбОшибке);	
				#Иначе
					ВызватьИсключение СообщениеОбОшибке;
				#КонецЕсли
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда 
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "СтатусДокумента,Проведен,ОбновленИзТопЛог");
			Если Не (Реквизиты.ОбновленИзТопЛог И Реквизиты.Проведен И Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил) Тогда 
				Отказ = Истина;
				#Если Клиент Тогда
					Сообщить(СообщениеОбОшибке);	
				#Иначе
					ВызватьИсключение СообщениеОбОшибке;
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	
	//ХудинВВ 13122018
	//Если это размещение по перемещению со склада возвратов, то в складе-получателе тоже должен встать склад возвратов.
	//Перемещать из зоны возвратов в рабочую зону можно только в пределах одного склада
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ВидОперации, СкладОтправитель, СкладПолучатель, СкладОтправитель.Возвраты, СкладОтправитель.СкладВозвратов, СкладПолучатель.СкладВозвратов");
		
		Если НЕ РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ВозвратВПродажу
			И РеквизитыОснования.СкладОтправительВозвраты Тогда  
			
			Если НЕ СкладПолучатель.Возвраты Тогда
				
				СкладПолучательНовый = СкладПолучатель.СкладВозвратов;
				Если Не ЗначениеЗаполнено(СкладПолучательНовый) Тогда
					ВызватьИсключение "Не указан склад возвратов для склада "+СкладПолучатель;
				Иначе
					СкладПолучатель = СкладПолучательНовый;
				КонецЕсли;
				
			КонецЕсли;			
			
		КонецЕсли;    		
		
	КонецЕсли;
	
	//Пришло перемещение в хаб, двинем процесс дальше
	Если ВидОперации = Перечисления.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог
		И ЗначениеЗаполнено(АктРассмотренияВозврата) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктРассмотренияВозврата, "СтатусДокумента") = Справочники.СтатусыДокументов.АРВ_СкладПеремещениеВХАБ Тогда
		
		РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(
		АктРассмотренияВозврата, 
		Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьПереходВСледующийСтатус,
		Справочники.СтатусыДокументов.АРВ_СкладПеремещениеВХАБ);
		
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//Если Константы.МыОтказалисьОтСемерки.Получить() Тогда
	//	Если СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый Тогда
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	лПараметры = Новый Структура;
	Если ДополнительныеСвойства.Свойство("ОтключитьКонтрольОстатков") Тогда 
		лПараметры.Вставить("ОтключитьКонтрольОстатков");
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("ОперативноеПроведение") Тогда 
		лПараметры.Вставить("ОперативноеПроведение", ДополнительныеСвойства.ОперативноеПроведение);		
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("НеПерепроводитьПартии") Тогда 
		лПараметры.Вставить("НеПерепроводитьПартии", ДополнительныеСвойства.НеПерепроводитьПартии);		
	КонецЕсли;
	Документы.ПеремещениеТоваров.ВыполнитьПроведение(Ссылка, Отказ, лПараметры);
	
	// ЛНА, Замер  APDEX ++(
	Попытка		
		APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ПеремещениеТоваров_Проведение", "Кол-во товаров: "+Товары.Количество(), , Ссылка);
	Исключение
	КонецПопытки;
	//)--

КонецПроцедуры // ОбработкаПроведения()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеСнятияСРезерва(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()

// Функция удаляет из исходной таблицы строки не требующие резервирования.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервирования(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) 
		   ИЛИ (ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) И СтрокаТаблицы.СкладВнутреннегоЗаказа = СкладПолучатель)
		   Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция ПодготовитьТаблицуТоваровКПолучению(ТабТовары)

	ТаблицаПоТоварамКПолучению = ТабТовары.Скопировать();
	ТаблицаПоТоварамКПолучению.Колонки.Добавить("ДокументПолучения");
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
		Иначе 
			СтрокаТаблицы.ДокументПолучения = СтрокаТаблицы.ДокументРезерва;
			Если не СтрокаТаблицы.ДокументРезерва.БезПраваПРодажи Тогда
				СтрокаТаблицы.ДокументРезерва = неопределено;
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамКПолучению;
	
КонецФункции // ПодготовитьТаблицуТоваровКПолучению()

// Функция удаляет из исходной таблицы строки не требующие резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеРезервПоЗаказ()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
 	Документы.ПеремещениеТоваров.ВыполнитьОтменуПроведения(Ссылка, Отказ);
	
КонецПроцедуры

Функция ПолучитьОстатокНаСкладе(Товар)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток - РезервыТоваровОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&Дата,
	|			Склад = &Склад
	|				И ЕдиницаИзмерения = &ЕдиницаИзмерения
	|				И Качество = &Качество) КАК ТоварыНаСкладахОстатки,
	|	РегистрНакопления.РезервыТоваров.Остатки(
	|			&Дата,
	|			Склад = &Склад
	|				И ЕдиницаИзмерения = &ЕдиницаИзмерения
	|				И Качество = &Качество) КАК РезервыТоваровОстатки";
	
	Если НачалоДня(Дата) <> НачалоДня(ТекущаяДата()) Тогда
		Запрос.УстановитьПараметр("Дата", Дата);
	Иначе
		Запрос.УстановитьПараметр("Дата", Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Склад", СкладОтправитель);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Товар.ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Качество", Товар.Качество);
	
	Возврат Запрос.Выполнить().Выгрузить().Итог("Количество");
	
КонецФункции

Функция ВыполнитьДвижениеВперед(лСтатус) Экспорт
	
	//Если лСтатус = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый Тогда
	//	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
	//		Возврат лСтатус;
	//		
	//	КонецЕсли;
	//
	//	ТабТоваров = Товары.ВыгрузитьКолонки("ЕдиницаИзмерения,Качество,Количество");
	//	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Товары, ТабТоваров);
	//	ТабТоваров.Свернуть("ЕдиницаИзмерения,Качество", "Количество");	
	//
	//	Для Каждого Товар Из ТабТоваров Цикл
	//		ОстатокНаСкладе = ПолучитьОстатокНаСкладе(Товар);
	//		Если ОстатокНаСкладе < Товар.Количество Тогда
	//			Возврат лСтатус;
	//		КонецЕсли;
	//	
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	//Если лСтатус = Справочники.СтатусыДокументов.ПеремещениеТоваровНовый Тогда
	//	
	//	Для Каждого Товар Из Товары Цикл
	//		Если НЕ ЗначениеЗаполнено(Товар.СтрокаПрихода) Тогда//заполнялось не по остаткам к получению
	//			ОстатокНаСкладе = ПолучитьОстатокНаСкладе(Товар);
	//			Если ОстатокНаСкладе < Товар.Количество Тогда
	//				Товар.Количество = ОстатокНаСкладе;
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
		
	
	НовСтатус = РаботаСоСтатусамиДокументов.ПолучитьСледующийСтатус(лСтатус);
	
	//Если лСтатус = Справочники.СтатусыДокументов.ПеремещениеТоваровОтгружен Тогда
	//	ДокКорректировки = РаботаСоСтатусамиДокументов.ПолучитьПоследнююКорректировку(Ссылка, Ложь);
	//	Если ДокКорректировки = неопределено Тогда
	//		ДокОбъект = Документы.КорректировкаПеремещенияТоваров.СоздатьДокумент();
	//		ДокОбъект.ДокументОснование = Ссылка;
	//	Иначе
	//		ДокОбъект = ДокКорректировки.ПолучитьОбъект();
	//	КонецЕсли;
	//	ДокОбъект.Дата = ТекущаяДата();
		
		//ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	//КонецЕсли;
	
	Возврат НовСтатус;
	
КонецФункции

Функция ВыполнитьДвижениеНазад(лСтатус) Экспорт
	НовСтатус = РаботаСоСтатусамиДокументов.ПолучитьПредыдущийСтатус(лСтатус);
	
	//Если лСтатус = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил Тогда
	//	ДокКорректировки = РаботаСоСтатусамиДокументов.ПолучитьПоследнююКорректировку(Ссылка);
	//	ДокОбъект = ДокКорректировки.ПолучитьОбъект();	
	//	ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//	
	//КонецЕсли;
	
	Возврат НовСтатус;
	
КонецФункции

Процедура ПодобратьСтрокиПрихода() Экспорт 
	
	Если Не (ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ПеремещениеТоваровТовары.СтрокаПрихода КАК СтрокаПрихода,
	               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
	               |ПОМЕСТИТЬ втРазмещено
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка.Дата < &Дата
	               |	И ПеремещениеТоваровТовары.Ссылка.ДокументОснование = &Ссылка
	               |	И ПеремещениеТоваровТовары.Ссылка.Проведен
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПеремещениеТоваровТовары.СтрокаПрихода,
	               |	ПеремещениеТоваровТовары.СтрокаЗаявки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки,
	               |	СтрокаПрихода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода КАК СтрокаПрихода,
	               |	СУММА(ПоступлениеТоваровУслугПричиныОтказов.Количество) КАК Количество
	               |ПОМЕСТИТЬ втОтказы
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.ПричиныОтказов КАК ПоступлениеТоваровУслугПричиныОтказов
	               |ГДЕ
	               |	ПоступлениеТоваровУслугПричиныОтказов.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугПричиныОтказов.СтрокаЗаявки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки,
	               |	СтрокаПрихода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода КАК СтрокаПрихода,
	               |	СУММА(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Количество) КАК Количество
	               |ПОМЕСТИТЬ втКРазмещению
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаПрихода,
	               |	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки,
	               |	СтрокаПрихода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втКРазмещению.СтрокаЗаявки,
	               |	втКРазмещению.СтрокаПрихода,
	               |	втКРазмещению.Количество - ЕСТЬNULL(втРазмещено.Количество, 0) - ЕСТЬNULL(втОтказы.Количество, 0) КАК Количество
	               |ИЗ
	               |	втКРазмещению КАК втКРазмещению
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втРазмещено КАК втРазмещено
	               |		ПО втКРазмещению.СтрокаЗаявки = втРазмещено.СтрокаЗаявки
	               |			И втКРазмещению.СтрокаПрихода = втРазмещено.СтрокаПрихода
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
	               |		ПО втКРазмещению.СтрокаЗаявки = втОтказы.СтрокаЗаявки
	               |			И втКРазмещению.СтрокаПрихода = втОтказы.СтрокаПрихода
	               |ГДЕ
	               |	втКРазмещению.Количество - ЕСТЬNULL(втРазмещено.Количество, 0) - ЕСТЬNULL(втОтказы.Количество, 0) > 0";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ТаблицаРаспределения = Запрос.Выполнить().Выгрузить();
	НовыйТовары = Товары.ВыгрузитьКолонки();
	Для Каждого СтрокаТЧ Из Товары Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СтрокаЗаявки) Тогда 
			Продолжить;
		КонецЕсли;
		Отбор = Новый Структура("СтрокаЗаявки");
		Отбор.СтрокаЗаявки = СтрокаТЧ.СтрокаЗаявки;
		Строки = ТаблицаРаспределения.НайтиСтроки(Отбор);
		//КоличествоРаспределить = СтрокаТЧ.КоличествоПлан;
		ИндексСтроки = 0;
		Пока СтрокаТЧ.КоличествоПлан > 0 И ИндексСтроки < 0 Цикл  
			СтрокаОст = Строки.Получить(ИндексСтроки);
			Если СтрокаОст.Количество > 0 Тогда 
				СписываемоеКоличествоПлан = Мин(СтрокаТЧ.КоличествоПлан, СтрокаОст.Количество);
				НоваяСтрока = НовыйТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.СтрокаПрихода = СтрокаОст.СтрокаПрихода;
				Если СписываемоеКоличествоПлан <> СтрокаТЧ.КоличествоПлан Тогда 
					НоваяСтрока.КоличествоПлан = СписываемоеКоличествоПлан;
					Если СтрокаТЧ.Количество < СписываемоеКоличествоПлан Тогда 
						НоваяСтрока.Количество = СтрокаТЧ.Количество;
					Иначе
						НоваяСтрока.Количество = СписываемоеКоличествоПлан;
					КонецЕсли;
					СтрокаТЧ.Количество = СтрокаТЧ.Количество - НоваяСтрока.Количество; 
					НоваяСтрока.КоличествоНеПринято = НоваяСтрока.КоличествоПлан - НоваяСтрока.Количество;
				КонецЕсли;
				СтрокаОст.Количество = СтрокаОст.Количество - СписываемоеКоличествоПлан;
				СтрокаТЧ.КоличествоПлан = СтрокаТЧ.КоличествоПлан - СписываемоеКоличествоПлан;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;;
	КонецЦикла;
	
	Товары.Загрузить(НовыйТовары);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	СозданВ77 = Ложь;
	ВыгруженВТопЛог = Ложь;
	ЗагруженИзТопЛог = Ложь;
	ОбновленИзТопЛог = Ложь;
	Для Каждого СтрокаТЧ Из Товары Цикл 
		СтрокаТЧ.СтрокаЗаявки = Неопределено;
		СтрокаТЧ.СтрокаПрихода = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры

//Углев 22.06.2018
Функция ВыгрузитьВОбменТоплог() Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Ошибка = Ложь;
	СообщениеДиагностики = "";
	
	//Проверки
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Если флНеВыгружатьВТопЛог Тогда
		СообщениеДиагностики = СообщениеДиагностики + "Установлен признак ""Не выгружать в Топ Лог""" + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если СкладОтправитель.ОбменСTopLog И СкладПолучатель.ОбменСTopLog Тогда
		СообщениеДиагностики = СообщениеДиагностики + "Оба склада работают с ТопЛог. Нужно создать отгрузку на соответствующий склад ""Товар в пути""" + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если СкладОтправитель.ОбменСTopLog И Не (СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил И Проведен) Тогда
		СообщениеДиагностики = СообщениеДиагностики + "Для выгрузки документа как заказ на отгрузку, необходимо его провести в статусе ""Получен""" + Символы.ПС;	
		Ошибка = Истина;
	КонецЕсли;
	
	Если СкладПолучатель.ОбменСTopLog И СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил Тогда 
		Сообщить("Для выгрузки документа как заказ на приемку, необходимо его перевести в статус ""Новый""");
		Ошибка = Истина;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Если Ошибка = Ложь Тогда  
		Документы.ПеремещениеТоваров.ЗарегистрироватьВОбменСТопЛог(ЭтотОбъект);
		СообщениеДиагностики = СообщениеДиагностики + "Документ зарегистрирован в обмене с Топ Лог";		
	Иначе
		СообщениеДиагностики = "Не удалось зарегистрировать документ в обмене с Топлог, по причине:" + Символы.ПС + СообщениеДиагностики;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Ошибка", Ошибка);
	СтруктураВозврата.Вставить("СообщениеДиагностики", СообщениеДиагностики);
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = новый Массив;
	
	Если  (Не ЗначениеЗаполнено(ДокументОснование)
		и ТипЗнч(ДокументОснование)<> тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
		или  РольДоступна("ПолныеПрава")
		или ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог") Тогда
	    МассивНепроверяемыхРеквизитов.Добавить("Товары.СтрокаЗаявки");
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	
	
КонецПроцедуры

#Область Прочее

Функция ВсеКоличествоРазмещено() Экспорт
	
	ВсеКоличествоРазмещено = Истина;
	Для каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.КоличествоПлан <> СтрокаТЧ.Количество Тогда
			ВсеКоличествоРазмещено = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВсеКоличествоРазмещено;
	
КонецФункции

Процедура ЗаполнитьРазмещенноеКоличество(ТекстОшибки = "", СообщатьОбОшибке = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазмещениеТоваровОбороты.Номенклатура,
		|	РазмещениеТоваровОбороты.Качество,
		|	РазмещениеТоваровОбороты.КоличествоОборот КАК Количество
		|ИЗ
		|	РегистрНакопления.РазмещениеТоваров.Обороты(, , , ДокументОснование = &ДокументОснование) КАК РазмещениеТоваровОбороты";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОстатков = РезультатЗапроса.Выгрузить();
	
	лТекстОшибки = "";
	СтруктураОтбора = Новый Структура("Номенклатура, Качество");
	Для каждого СтрокаТЧ Из Товары Цикл
		
		СтрокаТЧ.Количество = 0;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		
		Размещено = 0;
		Если СтрокиОстатков.Количество() Тогда
			Размещено = СтрокиОстатков[0].Количество;			
		КонецЕсли;
		
		Если Размещено <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Списать = Мин(Размещено, СтрокаТЧ.КоличествоПлан);
		
		СтрокаТЧ.Количество 			= Списать;
		СтрокиОстатков[0].Количество 	= СтрокиОстатков[0].Количество - Списать;
		
	КонецЦикла;
	
	//Излишки размещения кинем на первую попавшуюся партию
	Для каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		
		Если СтрокаОстатков.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаОстатков);
	    СтрокиТоваров =  Товары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТоваров.Количество() Тогда
	       СтрокиТоваров[0].Количество = СтрокиТоваров[0].Количество + СтрокаОстатков.Количество;
		Иначе
			//Размещена строка, которой нет в документе возврата от покупателя
			лТекстОшибки = "В документе возврата отсутствует размещенная строка:
							| Номенклатура: "+СтрокаОстатков.Номенклатура+", Качество: "+СтрокаОстатков.Качество+", Строка заявки: "+СтрокаОстатков.СтрокаЗаявки+", Количество: "+СтрокаОстатков.Количество;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + лТекстОшибки;
	
	Если СообщатьОбОшибке и ЗначениеЗаполнено(лТекстОшибки) Тогда
		 Сообщить(ТекстОшибки, СтатусСообщения.Важное);		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

//мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();

