// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мМенеджерОбъекта;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция ПолучитьЗаписиПоследовательности(вхПоследовательность) Экспорт
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лЭтоОтменаПроведения = Ложь;
	лРежимЗаписи = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи", лРежимЗаписи) тогда
		лЭтоОтменаПроведения = (лРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		
		лМассивВидовОпераций = Новый Массив;
		лМассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
		лМассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
		лМассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами);
		лМассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами);
		
		Если НЕ лЭтоОтменаПроведения
			И (лМассивВидовОпераций.Найти(ЭтотОбъект.ВидОперации) <> Неопределено)
			И (ЭтотОбъект.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты) тогда
			Для Каждого лСтрокаРасшифровкаПлатежа Из ЭтотОбъект.РасшифровкаПлатежа цикл
				
				Если НЕ ОбщегоНазначения.ИспользоватьПогашениеПоРасчетнымДокументам(лСтрокаРасшифровкаПлатежа.ДоговорКонтрагента) тогда
					Продолжить;
				КонецЕсли;
								
				лСтрокаРезультат = лРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(лСтрокаРезультат, лСтрокаРасшифровкаПлатежа);
				лСтрокаРезультат.Период = ЭтотОбъект.Дата;
				лСтрокаРезультат.Регистратор = ЭтотОбъект.Ссылка;
			КонецЦикла;
		КонецЕсли;
		
		Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
		
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Если Клиент Тогда

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 
	
	КодыСчетов = Новый Структура("Дебет,Кредит");
	
	Возврат КодыСчетов;
	
КонецФункции // ОпределитьКодыСчетСубсчет()

// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьПКО()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата  КАК ДатаДокумента,
	|	Организация КАК Орган,
	|	Организация,
	|	Организация КАК Руководители,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение               КАК Подразделение,
	|	Контрагент,
	|	Контрагент.Представление КАК Контрагент,
	|	ПринятоОт      КАК ПринятоОт,
	|	Основание      КАК Основание,
	|	Приложение     КАК Приложение,
	|	СуммаДокумента КАК Сумма,
	|	ВалютаДокумента,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	СтавкаНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	Макет       = ПолучитьОбщийМакет("КО1");
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Выводим шапку ПКО

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Орган, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.СуммаРубКоп       = ?(НЕ Касса.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета,
		Формат(Шапка.Сумма, "ЧЦ=15; ЧДЦ=2") + " " + СокрЛП(Шапка.ВалютаДокумента), РубКоп(Шапка.Сумма));
	ОбластьМакета.Параметры.Сумма		      = Формат(Шапка.Сумма, "ЧЦ=15; ЧДЦ=2") 
		+ ?(НЕ Касса.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета, " " + СокрЛП(Шапка.ВалютаДокумента), "");
	ОбластьМакета.Параметры.СуммаПрописью     = ?(НЕ Касса.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета, 
		ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента), РубКопПрописью(Шапка.Сумма));
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента    = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
		
	КодыСчетСубсчет = ОпределитьКодыСчетСубсчет();
	
	ОбластьМакета.Параметры.КодДебета = КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.СубСчет   = КодыСчетСубсчет.Кредит;
	
	ТабНДС=РасшифровкаПлатежа.Выгрузить();
	
	ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
	
	ТекстСуммаНДС = "";
	
	Для Каждого СтрокаНДС ИЗ ТабНДС цикл
		
		ТекстСуммаНДС = ТекстСуммаНДС + Символы.ПС + "НДС (" + ?(НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+" "+Шапка.ВалютаПредставление;
		
	КонецЦикла;
	
	ТекстСуммаНДС = Сред(ТекстСуммаНДС, 2);
		
	ОбластьМакета.Параметры.ВТомЧисле = ТекстСуммаНДС;

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, КонецДня(Шапка.ДатаДокумента),);
	
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.ФИОКассира            = Кассир;

	ОбластьМакета.Параметры.ПринятоОт  = Шапка.ПринятоОт;
	ОбластьМакета.Параметры.Основание  = Основание;
	ОбластьМакета.Параметры.Приложение = Приложение;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПКО()

// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ПКО" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПКО();

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;

	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПКО", "Приходный кассовый ордер");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	
	Если Не СтрокаПлатеж=Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

Функция РубКоп(Сумма)
	
	Руб = Цел(Сумма);
	Коп = ОКР(100*(Сумма-Руб),0,1);
	СуммаРубКоп = ""+Руб+" руб. "+Цел(Коп/10)+(Коп-10*Цел(Коп/10))+" коп.";
	Возврат СуммаРубКоп;
	
КонецФункции

Функция РубКопПрописью(Сумма)
	
	СуммаРубКоп = ЧислоПрописью(Сумма, , "руб.,руб.,руб.,м,коп.,коп.,коп.,ж");
	Возврат СуммаРубКоп;
	
КонецФункции

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодОтчетник",          Контрагент);
	Запрос.УстановитьПараметр("РасчетныйДокумент",    РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовРаботника);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			,
	|			ФизЛицо = &ПодОтчетник
	|				И РасчетныйДокумент = &РасчетныйДокумент
	|				И Валюта = &ВалютаВзаиморасчетов) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток > 0";
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.СуммаДолга;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
			ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
						
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

// Процедура выполняет заполнение суммы документа по регистру "РозничнаяВыручкаКомпании".
//
// Параметры:
//  КассаККМ - ссылка на справочник "Кассы ККМ".
//
Процедура ЗаполнитьПоРозничнойВыручкеУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	//Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
	//	Запрос.УстановитьПараметр("РозничнаяТочка", ДокументОснование.КассаККМ);
	//Иначе
	//	Запрос.УстановитьПараметр("РозничнаяТочка", ДокументОснование.Склад);
	//КонецЕсли;
	Запрос.УстановитьПараметр("РозничнаяТочка", Контрагент);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РозничнаяВыручка.Остатки(, РозничнаяТочка = &РозничнаяТочка)
	|ГДЕ
	|	СуммаОстаток > 0  
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДокумента = Мин(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаОстаток, 
		                                мВалютаРегламентированногоУчета, ВалютаДокумента,
		                                1, КурсДокумента, 1, КратностьДокумента),
		                                МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДокументОснование.СуммаДокумента,  мВалютаРегламентированногоУчета, ВалютаДокумента,
		                                1, КурсДокумента, 1, КратностьДокумента));
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоРозничнойВыручкеУпр()

Процедура ЗаполнитьПоСуммеДокументаУпр(СтрокаПлатеж)
	
	СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
	КурсОснования=СтруктураКурсаОснования.Курс;
	КратностьОснования=СтруктураКурсаОснования.Кратность;

	ОснованиеСуммаДокумента  = ДокументОснование.СуммаДокумента;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ОснованиеСуммаДокумента = ОснованиеСуммаДокумента - ДокументОснование.СуммаВознаграждения;
	КонецЕсли;
	
	СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, ДокументОснование.ВалютаДокумента, ДокументОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
									 КурсОснования, ДокументОснование.КурсВзаиморасчетов, КратностьОснования, ДокументОснование.КратностьВзаиморасчетов);
	СуммаДокумента      = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
КонецПроцедуры

//Заполняет документ на основании расходного кассового ордера
//
Процедура ЗаполнитьПоРКОУпр()
	
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		
		Контрагент = ДокументОснование.Контрагент;
		
		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента  	 = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаПлатежа=СтрокаОснование.СуммаПлатежа;
						
			СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			Если СтрокаОснование.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС=СтрокаОснование.СтавкаНДС;
			
		КонецЦикла;
		
		#Если Клиент Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		#КонецЕсли
		
		Для Индекс=0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
			
			СтрокаПлатеж=РасшифровкаПлатежа[Индекс];
			СтрокаОснование=ДокументОснование.РасшифровкаПлатежа[Индекс];
			
			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
				И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
						
				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					
					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;
					
				Иначе
					
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				КонецЕсли;
				
			КонецЕсли;	
			
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЦикла;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
						
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		// Отказываем
		Возврат;
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;
		
		Контрагент                    = ДокументОснование.Контрагент;
		РасчетныйДокумент	          = ДокументОснование;
		ВалютаВзаиморасчетовРаботника = ДокументОснование.ВалютаВзаиморасчетовРаботника;
		СтруктураКурса                       = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПодотчетником;
		
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		// Дальше заполняем по умолчанию
		Возврат;
		
	Иначе
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		// Дальше заполняем по умолчанию
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоРКОУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("Касса");
	СтруктураПолей.Вставить("СуммаДокумента");
	
	Если Не (ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее) Тогда
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком ИЛИ
		 ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

		 СтруктураПолей= Новый Структура("Организация,Касса,
	                        |Контрагент, СуммаДокумента");

	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		СтруктураПолей = Новый Структура("Организация,Касса,Контрагент,
	                        |ВалютаВзаиморасчетовРаботника, СуммаДокумента");
	Иначе
		СтруктураПолей= Новый Структура("Организация,Касса");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Основание = Неопределено ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) Тогда
		возврат;
	КонецЕсли;

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Если НЕ ЗначениеЗаполнено(Касса) Тогда
		оснКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
		
		Если оснКасса.Владелец <> Организация Тогда
			//ВвестиЗначение(оснКасса, "Укажите кассу поступления денежных средств", "СправочникСсылка.Кассы");
			оснКасса = Справочники.Кассы.ПустаяСсылка();
			
			#Если Клиент Тогда
			
			формаВыбораКассы = ПолучитьФорму("ФормаВыбораКассы");
			формаВыбораКассы.Организация = Организация;
			
			Если формаВыбораКассы.ОткрытьМодально() = Истина Тогда
				оснКасса = формаВыбораКассы.Касса;
			КонецЕсли;
			
			#КонецЕсли
			
		КонецЕсли;
		
		Касса = оснКасса;
	КонецЕсли;

	ВалютаДокумента         = ?(НЕ Касса.ВалютаДенежныхСредств.Пустая(),Касса.ВалютаДенежныхСредств,мВалютаРегламентированногоУчета);

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	ДокументОснование = Основание.Ссылка;
	стрСпособЗаполнения  = "Не заполнять";

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда 
		//ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
	 
        УправлениеДенежнымиСредствами.ЗаполнитьПриходПоОснованию(
			ЭтотОбъект, Основание, 
			УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
				глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		или ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		
		Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			Иначе
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		Иначе
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			Иначе
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;
		Иначе
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда

		ЗаполнитьПоРКОУпр();

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		
		Если Основание.ВидОперации=Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			ВидПриемаРозничнойВыручки=Перечисления.ВидПриемаРозничнойВыручки.ИзКассы; 	
			Контрагент   = Основание.КассаККМ;
		ИначеЕсли Основание.ВидОперации=Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			ВидПриемаРозничнойВыручки=Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ; 	
			Контрагент   = Основание.Склад;
		КонецЕсли;

		стрСпособЗаполнения = "По розничной выручке";
		
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДенежныйЧек") Тогда

		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();

		ВалютаДокумента = Основание.ВалютаДокумента;
		Касса           = Основание.Касса;
		СчетОрганизации = Основание.СчетОрганизации;
		Организация     = Основание.Организация;
		СуммаДокумента  = Основание.СуммаДокумента;
		ВидОперации     = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		
		ДенежныйЧек=Основание.Ссылка;

		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Основание.СтатьяДвиженияДенежныхСредств;

	
	КонецЕсли;

	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если стрСпособЗаполнения = "По взаиморасчетам" Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,1);
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По розничной выручке" Тогда
		ЗаполнитьПоРозничнойВыручкеУпр(СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По сумме документа" Тогда
		ЗаполнитьПоСуммеДокументаУпр(СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	ОтраженоВОперУчете=Истина;
	Оплачено=Истина;
	
			
	Если ПринятоОт="" И ЗначениеЗаполнено(Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ПринятоОт =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);

		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда

			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("ФизЛицо",Контрагент);

			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда

				ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");

			КонецЕсли;

			Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда

				ЭтотОбъект.Основание=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
  ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("НовыеЗначения",
	Новый Соответствие);
	ЭтотОбъект.ДополнительныеСвойства.Контроль.НовыеЗначения.Вставить(
	Метаданные.Последовательности.ПоРасчетамСКонтрагентами, 
	мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(ЭтотОбъект.Ссылка,
	Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьПроведение(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам")	Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьОтменуПроведения(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам")	Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка  Тогда
		
		    Если ЗначениеЗаполнено(Контрагент) тогда
		    Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если ОбменДанными.Отправитель = ПланыОбмена.ОбменПартКом83_БитФинанс.ПолучитьСсылку(Новый УникальныйИдентификатор("356a626c-086c-11e6-80e1-005056817b9c")) тогда
					Если  НЕ Контрагент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент,"ГоловнойКонтрагент") тогда
						ПараметрыКА = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Контрагент,"Код, Наименование");
						ТекстОшибокМ = "Описание ошибки: в документе указан КА, являющийся 'магазином'" + Символы.ПС  
						+ "Документ: ["  + СокрЛП(Ссылка) + "] "  + Символы.ПС
						+ ", КА: ["  + СокрЛП( ПараметрыКА.Код ) + "] " + СокрлП(ПараметрыКА.Наименование) + Символы.ПС
						+ ", Сумма: [" + СокрЛП(СуммаДокумента) + "] " + Символы.ПС
						;
						РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаССайтом_ВыгрузкаБалансов,ТекстОшибокМ, "Ошибки взаиморасчетов с КА");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		    КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
#Если Клиент Тогда
	
	
	Если ЗначениеЗаполнено(Контрагент) тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если  НЕ Контрагент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент,"ГоловнойКонтрагент") тогда
				ПараметрыКА = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Контрагент,"Код, Наименование");
				ТекстОшибокМ = "Описание ошибки: в документе указан КА, являющийся 'магазином'" + Символы.ПС  
				+ "Документ: ["  + СокрЛП(Ссылка) + "] "  + Символы.ПС
				+ ", КА: ["  + СокрЛП( ПараметрыКА.Код ) + "] " + СокрлП(ПараметрыКА.Наименование) + Символы.ПС 
				+ ", Сумма: [" + СокрЛП(СуммаДокумента) + "] " + Символы.ПС
				;
				Сообщить("Ошибки взаиморасчетов с КА" + Символы.ПС + ТекстОшибокМ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	тхтСообщения = "Документ должен редактироваться в БИТ." + Символ(13);
	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
	    Сообщить(тхтСообщения + "В этой базе он доступен только для просмотра.");
		//Отказ = Истина;
		//Возврат;
	Иначе
		Сообщить(тхтСообщения + "Обратный обмен не предусмотрен. Внесите в БИТ аналогичные изменения.");
		
	КонецЕсли;
#КонецЕсли

	Для Каждого Стр Из РасшифровкаПлатежа Цикл
		Если Стр.КурсВзаиморасчетов = 0 Тогда 
			Стр.КурсВзаиморасчетов = 1;
		КонецЕсли;
		Если Стр.КратностьВзаиморасчетов = 0 Тогда
			Стр.КратностьВзаиморасчетов = 1;
		КонецЕсли;
#Если Клиент Тогда
		Если НЕ ЗначениеЗаполнено(Стр.СтатьяДвиженияДенежныхСредств) Тогда
			Сообщить("не заполнена статья движения денежных средств");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
#КонецЕсли
	КонецЦикла;
	
	СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если (РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения) тогда
		ЭтотОбъект.ДополнительныеСвойства.Вставить("Контроль", Новый Структура);
		Если НЕ ЭтоНовый() тогда
			ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("СтарыеЗначения", Новый Соответствие);
			ЭтотОбъект.ДополнительныеСвойства.Контроль.СтарыеЗначения.Вставить(
			Метаданные.Последовательности.ПоРасчетамСКонтрагентами, мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(
			ЭтотОбъект.Ссылка, Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("УстановитьДоговор");
	УправлениеДенежнымиСредствами.ВыполнитьДействияПередЗаписьюПлатежногоДокумента(ЭтотОбъект, СтруктураДействий, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерЧекаККМ = 0;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

мМенеджерОбъекта = Документы[Метаданные().Имя];
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

