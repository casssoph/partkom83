
Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитикаБух;
Перем мМенеджерОбъекта;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция ПолучитьЗаписиПоследовательности(вхПоследовательность) Экспорт
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лЭтоОтменаПроведения = Ложь;
	лРежимЗаписи = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи", лРежимЗаписи) тогда
		лЭтоОтменаПроведения = (лРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		Если НЕ лЭтоОтменаПроведения
			И (ЭтотОбъект.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты)
			И (ЭтотОбъект.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПереносДепозита)
			тогда
			Для Каждого лСтрокаСуммыДолга Из ЭтотОбъект.СуммыДолга цикл
				
				Если (лСтрокаСуммыДолга.Сумма = 0) тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ОбщегоНазначения.ИспользоватьПогашениеПоРасчетнымДокументам(лСтрокаСуммыДолга.ДоговорКонтрагента) тогда
					Продолжить;
				КонецЕсли;
												
				лСтрокаРезультат = лРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(лСтрокаРезультат, лСтрокаСуммыДолга);
				лСтрокаРезультат.Период = ЭтотОбъект.Дата;
				лСтрокаРезультат.Регистратор = ЭтотОбъект.Ссылка;
			КонецЦикла;
		КонецЕсли;
		
		Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
		
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("УвеличениеДолга", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("УменьшениеДолга", Перечисления.ВидыЗадолженности.Дебиторская);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка.Номер                               КАК Номер,
	|	Ссылка.Дата                                КАК Дата,
	|	Ссылка.КонтрагентДебитор                   КАК Получатель,
	|	Ссылка.Организация                         КАК Поставщик,
	|	Ссылка.Организация                         КАК Организация,
	|	НомерСтроки,
	|	ДоговорКонтрагента                         КАК ДоговорВзаиморасчетов,
	|	ДоговорКонтрагента.Представление           КАК ПредставлениеДоговора,
	|	ДоговорКонтрагента.ВалютаВзаиморасчетов    КАК Валюта,
	|	ВЫБОР КОГДА ВидЗадолженности = &УвеличениеДолга ТОГДА Сумма ИНАЧЕ 0 КОНЕЦ КАК УвеличениеДолгаКонтрагента,
	|	ВЫБОР КОГДА ВидЗадолженности = &УменьшениеДолга ТОГДА Сумма ИНАЧЕ 0 КОНЕЦ КАК УменьшениеДолгаКонтрагента
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолга
	|
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент
	|
	|ИТОГИ ПО
	|	ДоговорКонтрагента.ВалютаВзаиморасчетов";


	Шапка = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_КорректировкаДолга";

	Макет = ПолучитьМакет("КорректировкаДолга");

	// Выводим шапку накладной
	ЗаголовокВыведен = Ложь;
	НомерПП = 0;
	
	ВыборкаВалют       = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВалют.Следующий() Цикл
		
		ИтогоВПлюс  = 0;
		ИтогоВМинус = 0;
		ВыборкаСтрокТовары = ВыборкаВалют.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗаголовокВыведен Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
				ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ВыборкаСтрокТовары, "Корректировка долга");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтрокТовары.Организация, ВыборкаСтрокТовары.Дата), "ПолноеНаименование,");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтрокТовары.Получатель, ВыборкаСтрокТовары.Дата), "ПолноеНаименование,");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
				ЗаголовокВыведен = Истина;
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			НомерПП = НомерПП + 1;
			ОбластьМакета.Параметры.НомерПП = НомерПП;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Вывести(ОбластьМакета);

			ИтогоВПлюс  = ИтогоВПлюс  + ВыборкаСтрокТовары.УвеличениеДолгаКонтрагента;
			ИтогоВМИнус = ИтогоВМИнус + ВыборкаСтрокТовары.УменьшениеДолгаКонтрагента;

		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.ИтогоВПлюс  = ИтогоВПлюс;
		ОбластьМакета.Параметры.ИтогоВМИнус = ИтогоВМИнус;
		ОбластьМакета.Параметры.Валюта      = ВыборкаВалют.Валюта;
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировкаДолга" Тогда		
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаДолга","Корректировка долга");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ остатками дебиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	

	
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетовСКонтрагентом,
	 |	ВзаиморасчетыСКонтрагентами.СуммаУпрОстаток КАК СуммаВзаиморасчетовОстаток,
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов
	 |ИЗ
	 |	РегистрНакопления.Взаиморасчеты.Остатки(
	 |			,
	 |			ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |				И ДоговорКонтрагента.Владелец = &Контрагент
	 |				И ДоговорКонтрагента.Организация = &Организация) КАК ВзаиморасчетыСКонтрагентами
	 |ГДЕ
	 |	ВзаиморасчетыСКонтрагентами.СуммаУпрОстаток > 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов,Дата);
				
	НоваяСтрока.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	НоваяСтрока.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	//НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
	//	НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Дебиторская;
		НоваяСтрока.Сумма                         = Выборка.СуммаВзаиморасчетовОстаток;
		НоваяСтрока.СуммаРегл=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма,ВалютаДокумента,ДоговорКонтрагента.ВалютаВзаиморасчетов,
										КурсДокумента,НоваяСтрока.КурсВзаиморасчетов,
										КратностьДокумента,НоваяСтрока.КратностьВзаиморасчетов);
		//НоваяСтрока.СуммаРегл                     = Выборка.СуммаРеглОстаток;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткамиВзаиморасчетовПоХолдингу() Экспорт 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ПОМЕСТИТЬ ВТДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец.ГоловнойКонтрагент = &ГоловнойКонтрагент
		|	И ДоговорыКонтрагентов.Владелец <> &ГоловнойКонтрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Кратность,
		|	КурсыВалютСрезПоследних.Курс
		|ПОМЕСТИТЬ ВТКурс
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыОстатки.ДоговорКонтрагента,
		|	ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыОстатки.СуммаУпрОстаток < 0
		|			ТОГДА -ВзаиморасчетыОстатки.СуммаУпрОстаток
		|		ИНАЧЕ ВзаиморасчетыОстатки.СуммаУпрОстаток
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыОстатки.СуммаРеглОстаток < 0
		|			ТОГДА -ВзаиморасчетыОстатки.СуммаРеглОстаток
		|		ИНАЧЕ ВзаиморасчетыОстатки.СуммаРеглОстаток
		|	КОНЕЦ КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыОстатки.СуммаРеглОстаток < 0
		|			ТОГДА -ВзаиморасчетыОстатки.СуммаРеглОстаток
		|		ИНАЧЕ ВзаиморасчетыОстатки.СуммаРеглОстаток
		|	КОНЕЦ КАК СуммаНУ,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыОстатки.СуммаУпрОстаток < 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Кредиторская)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
		|	КОНЕЦ КАК ВидЗадолженности,
		|	ВзаиморасчетыОстатки.ДокументРасчетов КАК ДокументРасчетовСКонтрагентом,
		|	ВТКурс.Кратность КАК КратностьВзаиморасчетов,
		|	ВТКурс.Курс КАК КурсВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.Взаиморасчеты.Остатки(
		|			&ДатаДокумента,
		|			ДоговорКонтрагента В
		|				(ВЫБРАТЬ
		|					ВТДоговора.Договор
		|				ИЗ
		|					ВТДоговора)) КАК ВзаиморасчетыОстатки,
		|	ВТКурс КАК ВТКурс";
	
	Запрос.УстановитьПараметр("ГоловнойКонтрагент", КонтрагентДебитор);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Валюта",ВалютаДокумента);
	Запрос.УстановитьПараметр("Организация",Организация);
	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СуммыДолга.Загрузить(РезультатЗапроса);
	
КонецПроцедуры	


// Заполняет документ остатками кредиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентКредитор);
	Иначе
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.ДокументРасчетов КАК ДокументРасчетовСКонтрагентом,
	 |	ВзаиморасчетыСКонтрагентами.СуммаУпрОстаток КАК СуммаВзаиморасчетовОстаток,
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов
	 |ИЗ
	 |	РегистрНакопления.Взаиморасчеты.Остатки(
	 |			,
	 |			ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |				И ДоговорКонтрагента.Владелец = &Контрагент
	 |				И ДоговорКонтрагента.Организация = &Организация) КАК ВзаиморасчетыСКонтрагентами
	 |ГДЕ
	 |	ВзаиморасчетыСКонтрагентами.СуммаУпрОстаток < 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов,Дата);
				
	НоваяСтрока.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	НоваяСтрока.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		//НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
		//НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Кредиторская;
		НоваяСтрока.Сумма                         = - Выборка.СуммаВзаиморасчетовОстаток;
		НоваяСтрока.СуммаРегл=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма,ВалютаДокумента,ДоговорКонтрагента.ВалютаВзаиморасчетов,
										КурсДокумента,НоваяСтрока.КурсВзаиморасчетов,
										КратностьДокумента,НоваяСтрока.КратностьВзаиморасчетов);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента");
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Дебитор""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Кредитор""!");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		
	Иначе //.ПереносЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Получатель""!");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента", "Не заполнено значение реквизита ""Договор""!");
		//Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		//	ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам 
		//	Тогда
		//	СтруктураОбязательныхПолей.Вставить("Сделка", "Не заполнено значение реквизита ""Сделка""!");
		//КонецЕсли;
	
	КонецЕсли;
	
	//Организация в документе должна совпадать с организацией, указанной в договоре для переноса долга
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЗадолженности, ДоговорКонтрагента, Сумма, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	ЭтоВалютныйДокумент = СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)  Тогда
			Продолжить;
		КонецЕсли;
		
        СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                                 """ табличной части ""Суммы долга"": ";

		//Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		// ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда


		//	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " выбран договор, взаиморасчеты по которому ведутся по заказам.
		//		                    |Необходимо заполнить сделку!", Отказ, Заголовок);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		Если СтрокаТаблицы.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаДокумента Тогда
			Если ЭтоВалютныйДокумент ИЛИ НЕ СтрокаТаблицы.РасчетыВУсловныхЕдиницах Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " выбран договор с несоответствующей документу валютой взаиморасчетов.
									|Необходимо выбрать договор с валютой " + СтруктураШапкиДокумента.ВалютаДокумента
									+ ?(ЭтоВалютныйДокумент, "", " или договор в условных единицах"), Отказ, Заголовок);

			КонецЕсли; 
		КонецЕсли;

	КонецЦикла;
	
	// Если проведение взаимозачета - проверим на совпадение суммы дебиторской и кредиторской задолженности. 
	// Взаимозачет проводится только при полном совпадении сумм
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		Если ЭтоВалютныйДокумент Тогда
			СуммаДеб  = ТаблицаПоСуммамДолга.Итог("УменьшениеДолгаКонтрагента");
			СуммаКред = ТаблицаПоСуммамДолга.Итог("УвеличениеДолгаКонтрагента");
		Иначе
			СуммаДеб  = ТаблицаПоСуммамДолга.Итог("УменьшениеДолгаКонтрагентаРегл");
			СуммаКред = ТаблицаПоСуммамДолга.Итог("УвеличениеДолгаКонтрагентаРегл");
		КонецЕсли;
		
		Разница = СуммаДеб - СуммаКред;
		
		Если Разница <> 0  Тогда
			ТекстСообщения = "Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета. 
			                 |Взаимозачет не может быть проведен.";
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Дебиторская задолженность: "  + Формат(СуммаДеб, "ЧЦ=15; ЧДЦ=2")  + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2") + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Разница: " + Формат(Разница, "ЧЦ=15; ЧДЦ=2") + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

// Используется при проведении документа "Корректировка долга" с операцией "Перенос задолженности".
// Формирует движения регистров по контрагенту, на которого переносится долг.
//
Процедура ДвиженияПоПереносуЗадолженности(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		Возврат;
	КонецЕсли;
	
	ПереносДолгаНаДругогоКонтрагента = СтруктураШапкиДокумента.КонтрагентДебитор <> СтруктураШапкиДокумента.КонтрагентКредитор;
	
	ФормироватьДвиженияВзаиморасчетовПоДокументам = СтруктураШапкиДокумента.ДоговорКонтрагентаВестиПоДокументамРасчетовСКонтрагентом;
	
	Если ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
		
		ВидРасчетовСКонтрагентом = 
			?(СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			ИЛИ СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером,
			Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации, Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
			
	КонецЕсли;
			
	// Движения регистров ВзаиморасчетыСКонтрагентами, РасчетыСКонтрагентами, ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
	
	Для каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
		
		ВидДвижения = ?(СтрокаДолга.УвеличениеДолгаКонтрагента > 0, 
			ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
		
		// ВзаиморасчетыСКонтрагентами 
		
		Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
		
		Движение.ВидДвижения = ВидДвижения;
		Движение.Период      = СтруктураШапкиДокумента.Дата;
		Движение.Активность  = Истина;
		
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
		Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		//Движение.Сделка             = СтруктураШапкиДокумента.Сделка;
		
		НоваяСуммаВзаиморасчетов    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаДолга.Сумма,
			СтрокаДолга.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов,
			СтрокаДолга.КурсВзаиморасчетов, СтруктураШапкиДокумента.ДоговорКонтрагентаКурсВзаиморасчетов,
			СтрокаДолга.КратностьВзаиморасчетов, СтруктураШапкиДокумента.ДоговорКонтрагентаКратностьВзаиморасчетов);
		СуммаУпр = ?(ВидДвижения = ВидДвиженияНакопления.Расход, СтрокаДолга.УвеличениеДолгаУпр, СтрокаДолга.УменьшениеДолгаУпр);
		
		Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
		Движение.СуммаУпр            = СуммаУпр;
		
		// РасчетыСКонтрагентами 
		
		Движение = Движения.РасчетыСКонтрагентами.Добавить();
		
		Движение.ВидДвижения = ВидДвижения;
		Движение.Период      = СтруктураШапкиДокумента.Дата;
		Движение.Активность  = Истина;
		
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
		Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		//Движение.Сделка             = СтруктураШапкиДокумента.Сделка;
		Движение.РасчетыВозврат     = Перечисления.РасчетыВозврат.Расчеты;
		
		Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
		Движение.СуммаУпр            = СуммаУпр;
		
		// ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
		
		Если ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
			
			Движение = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Добавить();
			
			Движение.ВидДвижения = ВидДвижения;
			Движение.Период      = СтруктураШапкиДокумента.Дата;
			Движение.Активность  = Истина;
			
			Движение.Организация        = СтруктураШапкиДокумента.Организация;
			Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
			Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			//Движение.Сделка             = СтруктураШапкиДокумента.Сделка;
			
			НовыйДокументРасчетов = ?(НЕ ЗначениеЗаполнено(СтрокаДолга.ДокументРасчетовСКонтрагентом) ИЛИ ПереносДолгаНаДругогоКонтрагента, 
				СтруктураШапкиДокумента.Ссылка, СтрокаДолга.ДокументРасчетовСКонтрагентом);
				
			Движение.ДокументРасчетовСКонтрагентом = НовыйДокументРасчетов;
			Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
			Движение.УпрУчет                       = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
			
			Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
			Если СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				Движение.СуммаРегл = СтрокаДолга.СуммаРегл;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	// Получим таблицы значений, совпадающие со струкутрой набора записей регистра.
	ТаблицаДвижений_НДСРасчетыСПокупателями	= Движения.НДСРасчетыСПокупателями.Выгрузить();
	ТаблицаДвижений_НДСРасчетыСПокупателями.Очистить();

	ТаблицаДвижений_НДСРасчетыСПоставщиками	= Движения.НДСРасчетыСПоставщиками.Выгрузить();
	ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
		И (СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		Тогда
		
		Если СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ТаблицаПереноса = ТаблицаДвижений_НДСРасчетыСПоставщиками.СкопироватьКолонки();
		ИначеЕсли СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ТаблицаПереноса = ТаблицаДвижений_НДСРасчетыСПокупателями.СкопироватьКолонки();
		КонецЕсли;
		
		СохранятьДокументРасчетов = (СтруктураШапкиДокумента.КонтрагентДебитор = СтруктураШапкиДокумента.КонтрагентКредитор);
		
	Иначе
		ТаблицаПереноса = Неопределено;
	КонецЕсли;
	
	// Разобьем на таблицы по договорам с покупателями и поставщиками,
	// договора типа "Прочее" по взаиморасчетам для целей НДС не проводим.
	// Корректировки долга с комитентами и комиссионерами тоже не отражаем,
	// потому что в документе недостаточно информации о причине корректировки.
	Для каждого СтрокаТаблицыДолгов Из ТаблицаПоСуммамДолга Цикл
	
		СтрокаТаблицыДвижений = Неопределено;
		Если СтрокаТаблицыДолгов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ (СтрокаТаблицыДолгов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			И СтрокаТаблицыДолгов.ВидЗадолженности = перечисления.ВидыЗадолженности.Дебиторская)
			Тогда
			
            ТекущаяТаблица = ТаблицаДвижений_НДСРасчетыСПокупателями;
			Если СтрокаТаблицыДолгов.УвеличениеДолгаКонтрагента <> 0 Тогда

				СтрокаТаблицыДвижений = ТекущаяТаблица.Добавить();

				СтрокаТаблицыДвижений.Организация        = СтруктураШапкиДокумента.Организация;
				СтрокаТаблицыДвижений.Покупатель         = СтрокаТаблицыДолгов.Контрагент;
				СтрокаТаблицыДвижений.ДоговорКонтрагента = СтрокаТаблицыДолгов.ДоговорКонтрагента;
				//СтрокаТаблицыДвижений.Сделка             = СтрокаТаблицыДолгов.СделкаВзаиморасчеты;

				СтрокаТаблицыДвижений.ВалютаРасчетов     = СтрокаТаблицыДолгов.ВалютаВзаиморасчетов;
				СтрокаТаблицыДвижений.Сумма 			 = СтрокаТаблицыДолгов.СуммаРегл;
				СтрокаТаблицыДвижений.ВалютнаяСумма		 = СтрокаТаблицыДолгов.УвеличениеДолгаКонтрагента;
				СтрокаТаблицыДвижений.Документ			 = ?(Не ЗначениеЗаполнено(СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом), СтруктураШапкиДокумента.Ссылка,
																				СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом);
				СтрокаТаблицыДвижений.ВидДвижения		 = ВидДвиженияНакопления.Приход;
				
			КонецЕсли;

			Если СтрокаТаблицыДолгов.УменьшениеДолгаКонтрагента <> 0 Тогда

				СтрокаТаблицыДвижений = ТекущаяТаблица.Добавить();

				СтрокаТаблицыДвижений.Организация        = СтруктураШапкиДокумента.Организация;
				СтрокаТаблицыДвижений.Покупатель         = СтрокаТаблицыДолгов.Контрагент;
				СтрокаТаблицыДвижений.ДоговорКонтрагента = СтрокаТаблицыДолгов.ДоговорКонтрагента;
				//СтрокаТаблицыДвижений.Сделка             = СтрокаТаблицыДолгов.СделкаВзаиморасчеты;

				СтрокаТаблицыДвижений.ВалютаРасчетов     = СтрокаТаблицыДолгов.ВалютаВзаиморасчетов;
				СтрокаТаблицыДвижений.Сумма 			 = СтрокаТаблицыДолгов.СуммаРегл;
				СтрокаТаблицыДвижений.ВалютнаяСумма		 = СтрокаТаблицыДолгов.УменьшениеДолгаКонтрагента;
				СтрокаТаблицыДвижений.Документ			 = ?(Не ЗначениеЗаполнено(СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом), СтруктураШапкиДокумента.Ссылка,
																				СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом);
				СтрокаТаблицыДвижений.ВидДвижения		 = ВидДвиженияНакопления.Расход;

			КонецЕсли;

		ИначеЕсли СтрокаТаблицыДолгов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			ИЛИ (СтрокаТаблицыДолгов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
			И СтрокаТаблицыДолгов.ВидЗадолженности = перечисления.ВидыЗадолженности.Кредиторская)
			Тогда

            ТекущаяТаблица = ТаблицаДвижений_НДСРасчетыСПоставщиками;
			Если СтрокаТаблицыДолгов.УвеличениеДолгаКонтрагента <> 0 Тогда

				СтрокаТаблицыДвижений = ТекущаяТаблица.Добавить();

				СтрокаТаблицыДвижений.Организация        = СтруктураШапкиДокумента.Организация;
				СтрокаТаблицыДвижений.Поставщик          = СтрокаТаблицыДолгов.Контрагент;
				СтрокаТаблицыДвижений.ДоговорКонтрагента = СтрокаТаблицыДолгов.ДоговорКонтрагента;
				//СтрокаТаблицыДвижений.Сделка             = СтрокаТаблицыДолгов.СделкаВзаиморасчеты;

				СтрокаТаблицыДвижений.ВалютаРасчетов     = СтрокаТаблицыДолгов.ВалютаВзаиморасчетов;
				СтрокаТаблицыДвижений.Сумма 			 = СтрокаТаблицыДолгов.СуммаРегл;
				СтрокаТаблицыДвижений.ВалютнаяСумма		 = СтрокаТаблицыДолгов.УвеличениеДолгаКонтрагента;
				СтрокаТаблицыДвижений.Документ			 = ?(Не ЗначениеЗаполнено(СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом), СтруктураШапкиДокумента.Ссылка,
																				СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом);
				СтрокаТаблицыДвижений.ВидДвижения		 = ВидДвиженияНакопления.Расход;
				
			КонецЕсли;

			Если СтрокаТаблицыДолгов.УменьшениеДолгаКонтрагента <> 0 Тогда

				СтрокаТаблицыДвижений = ТекущаяТаблица.Добавить();

				СтрокаТаблицыДвижений.Организация        = СтруктураШапкиДокумента.Организация;
				СтрокаТаблицыДвижений.Поставщик          = СтрокаТаблицыДолгов.Контрагент;
				СтрокаТаблицыДвижений.ДоговорКонтрагента = СтрокаТаблицыДолгов.ДоговорКонтрагента;
				//СтрокаТаблицыДвижений.Сделка             = СтрокаТаблицыДолгов.СделкаВзаиморасчеты;

				СтрокаТаблицыДвижений.ВалютаРасчетов     = СтрокаТаблицыДолгов.ВалютаВзаиморасчетов;
				СтрокаТаблицыДвижений.Сумма 			 = СтрокаТаблицыДолгов.СуммаРегл;
				СтрокаТаблицыДвижений.ВалютнаяСумма		 = СтрокаТаблицыДолгов.УменьшениеДолгаКонтрагента;
				СтрокаТаблицыДвижений.Документ			 = ?(Не ЗначениеЗаполнено(СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом), СтруктураШапкиДокумента.Ссылка,
																				СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом);
				СтрокаТаблицыДвижений.ВидДвижения		 = ВидДвиженияНакопления.Приход;

			КонецЕсли;

		КонецЕсли;
		Если Не СтрокаТаблицыДвижений = Неопределено Тогда
			Если Не ТаблицаПереноса = Неопределено тогда
				
				СтрокаПереноса = ТаблицаПереноса.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПереноса,СтрокаТаблицыДвижений, "Организация, ВалютаРасчетов,Сумма,ВалютнаяСумма");
				
				Если СохранятьДокументРасчетов 
					И СтрокаТаблицыДолгов.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента
					Тогда
					СтрокаПереноса.Документ = СтрокаТаблицыДвижений.Документ;
				Иначе
					СтрокаПереноса.Документ = СтруктураШапкиДокумента.Ссылка;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов <> СтрокаТаблицыДолгов.ВалютаВзаиморасчетов Тогда
					СтрокаПереноса.ВалютнаяСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПереноса.ВалютнаяСумма, 
																									СтрокаТаблицыДолгов.ВалютаВзаиморасчетов,  
																									СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов, 
																									СтрокаТаблицыДолгов.КурсВзаиморасчетов, 
																									СтруктураШапкиДокумента.ДоговорКонтрагентаКурсВзаиморасчетов, 
																									СтрокаТаблицыДолгов.КратностьВзаиморасчетов, 
																									СтруктураШапкиДокумента.ДоговорКонтрагентаКратностьВзаиморасчетов);
																								КонецЕсли;
																								
				
				СтрокаПереноса.ВидДвижения = ?((не СтрокаТаблицыДолгов.УвеличениеДолгаКонтрагента = 0)  
											= (СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем),
											ВидДвиженияНакопления.Расход,
											ВидДвиженияНакопления.Приход);
				
			КонецЕсли; 
		КонецЕсли;
	
	КонецЦикла;
	
	Если не ТаблицаПереноса = Неопределено Тогда
		ТаблицаПереноса.Свернуть("Организация,ДоговорКонтрагента,Документ,ВалютаРасчетов,ВидДвижения","Сумма, ВалютнаяСумма");
		Если СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			КолонкаКонтрагента = ТаблицаПереноса.Колонки.Добавить("Поставщик");
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор, КолонкаКонтрагента.Имя);
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов, "ВалютаРасчетов");
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПереноса, ТаблицаДвижений_НДСРасчетыСПоставщиками);
			
		Иначе
			КолонкаКонтрагента = ТаблицаПереноса.Колонки.Добавить("Покупатель");
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор, КолонкаКонтрагента.Имя);
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов, "ВалютаРасчетов");
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПереноса, ТаблицаДвижений_НДСРасчетыСПокупателями);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество()>0 Тогда
		Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();
	КонецЕсли; 	
	
	Если ТаблицаДвижений_НДСРасчетыСПокупателями.Количество() > 0 Тогда
		Движения.НДСРасчетыСПокупателями.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;
		Движения.НДСРасчетыСПокупателями.ДобавитьДвижение();
	КонецЕсли;
	
Конецпроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "СписыватьПартииПриПроведенииДокументов" , "СписыватьПартииПриПроведенииДокументов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
    Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора" , "ДоговорКонтрагентаВидДоговора");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом" , "ДоговорКонтрагентаВестиПоДокументамРасчетовСКонтрагентом");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов", "ДоговорКонтрагентаВалютаВзаиморасчетов");
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
    Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		Если СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаДокумента Тогда
			СтруктураШапкиДокумента.Вставить("ДоговорКонтрагентаКурсВзаиморасчетов",      СтруктураШапкиДокумента.КурсДокумента);
			СтруктураШапкиДокумента.Вставить("ДоговорКонтрагентаКратностьВзаиморасчетов", СтруктураШапкиДокумента.КратностьДокумента);
		Иначе
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов, СтруктураШапкиДокумента.Дата);
			СтруктураШапкиДокумента.Вставить("ДоговорКонтрагентаКурсВзаиморасчетов",      СтруктураКурса.Курс);
			СтруктураШапкиДокумента.Вставить("ДоговорКонтрагентаКратностьВзаиморасчетов", СтруктураКурса.Кратность);
		КонецЕсли;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	лКлючАлгоритма = "Документ_КорректировкаДолга_МодульОбъекта_ОбработкаЗаполнения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ОрганизацияДебитор = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентДебитор);
		Если НЕ ЗначениеЗаполнено(ОрганизацияДебитор) Тогда
			ОрганизацияКредитор = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентКредитор);
			Если ЗначениеЗаполнено(ОрганизацияКредитор) Тогда
				Организация        = ОрганизацияКредитор;
				КонтрагентДебитор  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
				КонтрагентКредитор = Основание.КонтрагентДебитор;  
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Организация = ОрганизацияДебитор;
			КонтрагентКредитор = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
			КонтрагентДебитор  = Основание.КонтрагентКредитор;  
		КонецЕсли;
		
		Для каждого СтрокаОснования Из Основание.СуммыДолга Цикл
			НоваяСтрока = СуммыДолга.Добавить();
			НоваяСтрока.ВидЗадолженности        = ?(СтрокаОснования.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, Перечисления.ВидыЗадолженности.Кредиторская, Перечисления.ВидыЗадолженности.Дебиторская);			
			
			ТекКонтрагент =  ?(НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, КонтрагентДебитор, КонтрагентКредитор);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Контрагент",   ТекКонтрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
				
			Запрос.Текст = "
			|ВЫБРАТЬ 
			|	Ссылка 
			|ИЗ Справочник.ДоговорыКонтрагентов
			|ГДЕ Справочник.ДоговорыКонтрагентов.Владелец = &Контрагент
			|	 И Справочник.ДоговорыКонтрагентов.Организация = &Организация";
				
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НоваяСтрока.ДоговорКонтрагента = Выборка.Ссылка;
			Иначе 
				ОбщегоНазначения.СообщитьОбОшибке("У контрагента " + ТекКонтрагент + " отсутствует договор на поставку с организацией " + Организация + ".");
			КонецЕсли;
			
			НоваяСтрока.КурсВзаиморасчетов      = СтрокаОснования.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов = СтрокаОснования.КратностьВзаиморасчетов;
			НоваяСтрока.Сумма                   = СтрокаОснования.Сумма;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АктРассмотренияВозврата") Тогда
		
		АктРассмотренияВозврата = Основание;
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктРассмотренияВозврата, "СуммаКомпенсацииУтв, Организация, Контрагент, ДоговорКонтрагента, ДокументПродажи");
		
		ВидОперации 		= Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
		Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
		КурсДокумента 		= 1;
		КратностьДокумента 	= 1;
		ВалютаДокумента 	= ПараметрыСеанса.ВалютаРубль;
		ВидКорректировки 	= Справочники.ВидыКорректировок.КомпенсацияРемонтаСайт;
		// 16.07.19 Строганов Роман > XX-2827 Значения должны браться из реквизитов РТУ : "контрагент взаиморасчетов" и "договор взаиморасчетов" (указаны на закладке "Дополнительно").
		//КонтрагентДебитор 	= РеквизитыОснования.Контрагент;
		//ДоговорКонтрагента 	= РеквизитыОснования.ДоговорКонтрагента;
		КонтрагентДебитор 	= РеквизитыОснования.ДокументПродажи.КонтрагентВзаиморасчетов;
		ДоговорКонтрагента 	= РеквизитыОснования.ДокументПродажи.ДоговорКонтрагентаВзаиморасчетов;
		// 16.07.19 Строганов Роман <
		Организация 		= РеквизитыОснования.Организация;
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	СУММА(АктРассмотренияВозвратаТовары.СуммаКомпенсацииУтв) КАК СуммаКомпенсацииУтв
		//|ИЗ
		//|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
		//|ГДЕ
		//|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
		//|
		//|ИМЕЮЩИЕ
		//|	СУММА(АктРассмотренияВозвратаТовары.СуммаКомпенсацииУтв) > 0";
		//
		//Запрос.УстановитьПараметр("Ссылка", АктРассмотренияВозврата);
		//Выборка = Запрос.Выполнить().Выбрать();
		//Выборка.Следующий();
		СуммаКомпенсации =  РеквизитыОснования.СуммаКомпенсацииУтв;
		
		Если СуммаКомпенсации = 0 Тогда
			Сообщить("Не указана утвержденная сумма компенсации в акте возврата!");
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = СуммыДолга.Добавить();
		// 16.07.19 Строганов Роман > 
		//НоваяСтрока.ДоговорКонтрагента 				= РеквизитыОснования.ДоговорКонтрагента;
		НоваяСтрока.ДоговорКонтрагента 				= РеквизитыОснования.ДокументПродажи.ДоговорКонтрагентаВзаиморасчетов;
		// 16.07.19 Строганов Роман <
		
		НоваяСтрока.Сумма 							= СуммаКомпенсации;
		НоваяСтрока.КурсВзаиморасчетов 				= 1;
		НоваяСтрока.КратностьВзаиморасчетов 		= 1;
		НоваяСтрока.ВидЗадолженности 				= Перечисления.ВидыЗадолженности.Дебиторская;
		НоваяСтрока.СуммаРегл 						= НоваяСтрока.Сумма;
		// 16.07.19 Строганов Роман > 
		//НоваяСтрока.Контрагент 						= РеквизитыОснования.Контрагент;
		НоваяСтрока.Контрагент 					 	= РеквизитыОснования.ДокументПродажи.КонтрагентВзаиморасчетов;
		// 16.07.19 Строганов Роман <
		//НоваяСтрока.ДокументРасчетовСКонтрагентом 	= РеквизитыОснования.ДокументПродажи;
			
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// ЛНА, Замер  APDEX ++(
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		APDEX_ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("КорректировкаДолга_Проведение");
		
	КонецЕсли;
	//)--
	
	//Рудаков. Из Элма (http://my.part-kom.ru/Tasks/Task/Execute/10700400)
	//Доступность некоторых полей при закрытом периоде
	Если ОбменДанными.Загрузка  Тогда
		РежимЗаписи=РежимЗаписиДокумента.Запись;
		ЭтотОбъект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
		//Возврат;
	Иначе 	
		ЭтотОбъект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
		
		Если (РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения) тогда
			ЭтотОбъект.ДополнительныеСвойства.Вставить("Контроль", Новый Структура);
			Если НЕ ЭтоНовый() тогда
				ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("СтарыеЗначения", Новый Соответствие);
				ЭтотОбъект.ДополнительныеСвойства.Контроль.СтарыеЗначения.Вставить(
				Метаданные.Последовательности.ПоРасчетамСКонтрагентами, мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(
				ЭтотОбъект.Ссылка, Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
			КонецЕсли;
		КонецЕсли;
		
		ПопыткаУстановитьВидКорректировки();
		
		//ХудинВВ 01032019 XX-2041
		Если ЗначениеЗаполнено(АктРассмотренияВозврата) Тогда
			ВидКорректировки = Справочники.ВидыКорректировок.КомпенсацияРемонтаСайт;
		КонецЕсли;
	КонецЕсли;
	
	
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если Не ОбменДанными.Загрузка  Тогда
		ОтразитьСобытиеКОбработкеАктовРассмотренияВозврата();
	КонецЕсли;	
КонецПроцедуры

// + 20181025 Пушкин XX-648
Процедура ПопыткаУстановитьВидКорректировки() экспорт
	Если НЕ ЗначениеЗаполнено(ВидКорректировки) тогда
		тчВ = ДоступныеВидыКорректировок();
		Если тчВ.Количество() = 1 тогда
			ВидКорректировки = тчВ[0].ВидКорректировки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ДоступныеВидыКорректировок() экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПраваПользователейНаВидыКорректировок.ВидКорректировки
	|ИЗ
	|	РегистрСведений.ПраваПользователейНаВидыКорректировок КАК ПраваПользователейНаВидыКорректировок
	|ГДЕ
	|	ПраваПользователейНаВидыКорректировок.Пользователь = &Пользователь";	

	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции
// - 20181025 Пушкин XX-648

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
  ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("НовыеЗначения",
	Новый Соответствие);
	ЭтотОбъект.ДополнительныеСвойства.Контроль.НовыеЗначения.Вставить(
	Метаданные.Последовательности.ПоРасчетамСКонтрагентами, 
	мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(ЭтотОбъект.Ссылка,
	Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьПроведение(Ссылка, Отказ, лПараметры);
	
    Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;
	
	// ЛНА, Замер  APDEX ++(
	Попытка		
		APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("КорректировкаДолга_Проведение", "Кол-во строк: "+СуммыДолга.Количество(), , Ссылка);
	Исключение
	КонецПопытки;
	//)--
КонецПроцедуры	// ОбработкаПроведения

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьОтменуПроведения(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;
КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриКопировании(ОбъектКопирования)
	СозданВ77 = Ложь;
КонецПроцедуры


#Область ПроцессВозвратов

//ХудинВВ 01032019 XX-2041
Процедура ОтразитьСобытиеКОбработкеАктовРассмотренияВозврата()
	
	лКлючАлгоритма = "Документ_КорректировкаДолга_МодульОбъекта_ОтразитьСобытиеКОбработкеАктовРассмотренияВозврата";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	лРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Проведен, АктРассмотренияВозврата, АктРассмотренияВозврата.ОтправленоСообщениеОКомпенсацииНаСайт");
	
	Если Не лРеквизиты.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(лРеквизиты.АктРассмотренияВозврата)
		ИЛИ  лРеквизиты.АктРассмотренияВозвратаОтправленоСообщениеОКомпенсацииНаСайт = Истина Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(лРеквизиты.АктРассмотренияВозврата, 
	Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.КорректировкаДолга, 
	Ссылка);
	
КонецПроцедуры

#КонецОбласти


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мМенеджерОбъекта = Документы[Метаданные().Имя];
