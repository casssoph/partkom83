
//// ОБРАБОТЧИКИ МОДУЛЯ ОБЪЕКТА

Процедура ВыполнитьПроведение(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	лКонтроль = Неопределено;
	лФильтр = Неопределено;
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ДанныеОбъекта.Контроль", лКонтроль);
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "Фильтр", лФильтр);	
	
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыНаСкладах") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыНаСкладах", РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыКОтгрузке") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыКОтгрузке", РегистрыНакопления_ТоварыКОтгрузке(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;

	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваров") тогда
		//ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДокументОснование");
		//Если ЗначениеЗаполнено(ДокументОснование) Тогда 
		//	БлокировкаДанных = Новый БлокировкаДанных;
		//	Запрос = Новый Запрос;
		//	Запрос.Текст = "ВЫБРАТЬ
		//	               |	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад КАК Склад,
		//	               |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		//	               |	ВозвратТоваровОтПокупателяТовары.Качество
		//	               |ИЗ
		//	               |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		//	               |ГДЕ
		//	               |	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
		//	               |;
		//	               |
		//	               |////////////////////////////////////////////////////////////////////////////////
		//	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		//	               |	ВозвратТоваровОтПокупателяТовары.Номенклатура
		//	               |ИЗ
		//	               |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		//	               |ГДЕ
		//	               |	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
		//	
		//	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		//	Результаты = Запрос.ВыполнитьПакет();
		//	
		//	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ПартииТоваров");
		//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//	ЭлементБлокировки.ИсточникДанных = Результаты.Получить(0);
		//	
		//	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		//	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
		//	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
		//	
		//	ЭлементБлокировки = БлокировкаДанных.Добавить("Последовательность.ПартионныйУчет");
		//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//	ЭлементБлокировки.ИсточникДанных = Результаты.Получить(1);
		//	
		//	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		//	
		//	БлокировкаДанных.Заблокировать();
		//КонецЕсли;
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		
		лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
						
		лТребуемая = РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры, лФильтр);
		
		//Удалим служебные колонки 
		ОбщегоНазначения.УдалитьКолонки(лИсходная, лТребуемая);
		
		лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
		ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров,
		лРазностныеДанные, лРазделенныеБазовая.Исключенные);
		
		ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		Если лФильтр = Неопределено Тогда 
			РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Истина);
		КонецЕсли;
	КонецЕсли;
		
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Продажи") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "Продажи", РегистрыНакопления_Продажи(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Взаиморасчеты") тогда
		// регистр накопления "Взаиморасчеты"
		
		//ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагента");
		//
		//БлокировкаДанных = Новый БлокировкаДанных;
		//
		//ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.Взаиморасчеты");
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
		//
		//ЭлементБлокировки = БлокировкаДанных.Добавить("Последовательность.ПоРасчетамСКонтрагентами");
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
		//БлокировкаДанных.Заблокировать();
		
		НовоеПроведениеПоВзаиморасчетам = глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам");
		
		лОчищать = Ложь;
		Если НовоеПроведениеПоВзаиморасчетам Тогда 
			лОчищать = ПроведениеДокументовКлиентСервер.НеобходимоОчиститьДвиженияВзаиморасчеты(вхСсылкаНаДокумент);
		Иначе	
			Если (лКонтроль <> Неопределено) тогда
				Если лКонтроль.Свойство("СтарыеЗначения") Тогда
					лСтарыеЗначения = лКонтроль.СтарыеЗначения.Получить(Метаданные.Последовательности.ПоРасчетамСКонтрагентами);
					лНовыеЗначения = лКонтроль.НовыеЗначения.Получить(Метаданные.Последовательности.ПоРасчетамСКонтрагентами);
					Если (лСтарыеЗначения <> Неопределено) И (лНовыеЗначения <> Неопределено) тогда
						лОчищать = (лСтарыеЗначения.Шапка.Дата < лНовыеЗначения.Шапка.Дата)
						И лСтарыеЗначения.Шапка.Проведен;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
		
		Если лОчищать тогда
			ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты);
			лБазовая = Неопределено;
			ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", лБазовая);
			лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		Иначе
			лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
			лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты);	
		КонецЕсли;
		
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
		//лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
		ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты,
		лРазностныеДанные, лРазделенныеБазовая.Исключенные);
		
		ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
		Если НовоеПроведениеПоВзаиморасчетам И лФильтр = Неопределено Тогда 
			РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПоРасчетамСКонтрагентами", Истина);
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента") = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят Тогда
			РегистрыСведений.ОтложенноеСнятиеБлокировкиКонтрагентов.ДобавитьДляОбработки(вхСсылкаНаДокумент);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьОтменуПроведения(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент);
	
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Ложь);
		
	Если глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПоРасчетамСКонтрагентами", Ложь);
	КонецЕсли;
КонецПроцедуры

//// ТАБЛИЦЫ ДВИЖЕНИЙ ДОКУМЕНТОВ

Функция РегистрыНакопления_ТоварыКОтгрузке(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) 
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыКОтгрузке", ТаблицаДвижений);
	
	//Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
	//	Возврат ТаблицаДвижений;
	//КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента") = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.СтрокаЗаявки,
		|	ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателя) КАК Статус,
		|	ВозвратТоваровОтПокупателяТовары.КоличествоПлан КАК Количество,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Период
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт 
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыНаСкладах", ТаблицаДвижений);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента") = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Качество,
	|	СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК Количество,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Период
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Качество,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата");
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) 
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", ТаблицаДвижений);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента") = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ВидОперации") = Перечисления.ВидыОперацийВозвратаОтПокупателя.Комиссия Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ВидОперации") = Перечисления.ВидыОперацийВозвратаОтПокупателя.VMI Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	СформироватьДвижения = Истина;
	
	Если ТипЗнч(вхПараметры) = Тип("Структура") И вхПараметры.Свойство("Фильтр") И ТипЗнч(вхПараметры.Фильтр) = Тип("Структура") И вхПараметры.Фильтр.Свойство("ДоговорКонтрагента") И Не вхПараметры.Фильтр.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагента") Тогда
		СформироватьДвижения = Ложь;
	КонецЕсли;
		
	Если СформироватьДвижения Тогда
		
		ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагента");
		ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ВалютаДокумента");
		КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "КурсВзаиморасчетов");
		КратностьВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "КратностьВзаиморасчетов");
		СуммаДокумента = -ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СуммаДокумента");
		ЗнакДвижения = -1;
		ТаблицаДвижений = УправлениеВзаиморасчетами.ПростоеПроведениеПоВзаиморасчетам(вхСсылкаНаДокумент, ДоговорКонтрагента, Неопределено, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СуммаДокумента, ЗнакДвижения);
		
	КонецЕсли;
	
	Возврат ТаблицаДвижений
	
КонецФункции

Функция РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено, вхФильтр = Неопределено) 
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,Склад,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,ДокументОснование,Организация"); 
	
	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПроведенияПоПартиямРезервам") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Реквизиты.ДокументОснование) Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		                      |	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
		                      |	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Период,
		                      |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		                      |	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
		                      |	ВозвратТоваровОтПокупателяТовары.Качество,
		                      |	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный) КАК СтатусПартии,
		                      |	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода,
		                      |	ВозвратТоваровОтПокупателяТовары.Ссылка.Организация,
		                      |	ВозвратТоваровОтПокупателяТовары.Количество,
		                      |	ВозвратТоваровОтПокупателяТовары.Себестоимость,
		                      |	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаРубли,
		                      |	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаДоллары,
		                      |	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаЕвро,
		                      |	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаБезНДС,
		                      |	ВозвратТоваровОтПокупателяТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
		                      |	ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
		                      |	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
		                      |	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтрокиВДокументе,
		                      |	ЛОЖЬ КАК ВнутреннееПеремещение
		                      |ИЗ
		                      |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		                      |ГДЕ
		                      |	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка");
							  
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = Запрос.Текст + " И ВозвратТоваровОтПокупателяТовары.Номенклатура = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
		КонецЕсли;
		
		ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаДвижений.Количество() > 0 Тогда 
			
			//ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");
			ВалютаДокумента = Реквизиты.ВалютаДокумента;
			КурсДокумента = Реквизиты.КурсВзаиморасчетов;
			КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
			
			КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаДоллар, Реквизиты.Дата);
			КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаЕвро, Реквизиты.Дата);
			Для Каждого Товар Из ТаблицаДвижений Цикл
				Если Товар.УчитыватьНДС И Товар.СуммаВключаетНДС Тогда 
					СтНДС =  УчетНДС.ПолучитьСтавкуНДС(Товар.СтавкаНДС);
					Товар.СуммаБезНДС = 100 * Товар.СуммаБезНДС / (100 + СтНДС);
				КонецЕсли;
				Если ВалютаДокумента = ПараметрыСеанса.ВалютаРубль Тогда
					Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаРубль,
					ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
					Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаРубль,
					ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
				ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаДоллар Тогда
					Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаЕвро,
					ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
					Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаЕвро Тогда
					Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаЕвро,
					ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
					Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ТоварыРеализации = Неопределено;
		РеквизитыРеализации = Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартииТоваров.Номенклатура,
		               |	ПартииТоваров.Склад,
		               |	ПартииТоваров.Качество,
		               |	ПартииТоваров.СтатусПартии,
		               |	ПартииТоваров.СтрокаПрихода,
		               |	ПартииТоваров.Организация,
		               |	ПартииТоваров.Количество,
		               |	ПартииТоваров.СуммаРубли,
		               |	ПартииТоваров.СуммаДоллары,
		               |	ПартииТоваров.СуммаЕвро,
		               |	ПартииТоваров.СуммаБезНДС,
		               |	ПартииТоваров.Организация = &Организация КАК ЭтаОрганизация
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
		               |ГДЕ
		               |	ПартииТоваров.Регистратор = &Регистратор  %УсловиеПоНоменклатуре%
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЭтаОрганизация УБЫВ";
		Запрос.УстановитьПараметр("Регистратор", Реквизиты.ДокументОснование);
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", " И ПартииТоваров.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура); 
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", "");
		КонецЕсли;
		ОстаткиПартий = Запрос.Выполнить().Выгрузить();
		
		ДобавленныеСтрокиПрихода = Новый ТаблицаЗначений;
		ДобавленныеСтрокиПрихода.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ДобавленныеСтрокиПрихода.Колонки.Добавить("СтрокаПрихода", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокПриходов"));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтроки,
		               |	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад КАК Склад,
		               |	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
		               |	ВозвратТоваровОтПокупателяТовары.Качество КАК Качество,
		               |	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
		               |	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода КАК СтрокаПрихода,
		               |	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтрокиВДокументе
		               |ИЗ
		               |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		               |ГДЕ
		               |	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
		               |	И ВозвратТоваровОтПокупателяТовары.Количество > 0 %УсловиеПоНоменклатуре%";
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", " И ВозвратТоваровОтПокупателяТовары.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", "");
		КонецЕсли;
		Товары = Запрос.Выполнить().Выбрать();
		Пока Товары.Следующий() Цикл
			Отбор = Новый Структура("Номенклатура,Качество");
			ЗаполнитьЗначенияСвойств(Отбор, Товары);
			КоличествоРаспределить = Товары.Количество;
			
			Строки = ОстаткиПартий.НайтиСтроки(Отбор);			
			ИндексСтроки = 0;

			Пока КоличествоРаспределить > 0 И ИндексСтроки < Строки.Количество() Цикл 
				СтрокаОст = Строки.Получить(ИндексСтроки);
				Если СтрокаОст.Количество > 0 Тогда 
					СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаОст.Количество);
					
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаОст);
					СтрокаДвижений.Количество = СписываемоеКоличество;
					СтрокаДвижений.СтатусПартии = Перечисления.СтатусыПартии.Собственный;
					СтрокаДвижений.Период = Реквизиты.Дата;
					СтрокаДвижений.Регистратор = вхСсылкаНаДокумент;
					СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход;
					СтрокаДвижений.Склад = Реквизиты.Склад;
					СтрокаДвижений.НомерСтрокиВДокументе = Товары.НомерСтрокиВДокументе;
					
					Если СтрокаДвижений.Количество <> СтрокаОст.Количество Тогда 
						СтрокаДвижений.СуммаРубли   = СтрокаДвижений.Количество * СтрокаДвижений.СуммаРубли/СтрокаОст.Количество;
						СтрокаДвижений.СуммаДоллары = СтрокаДвижений.Количество * СтрокаДвижений.СуммаДоллары/СтрокаОст.Количество;
						СтрокаДвижений.СуммаЕвро 	= СтрокаДвижений.Количество * СтрокаДвижений.СуммаЕвро/СтрокаОст.Количество;
						СтрокаДвижений.СуммаБезНДС 	= СтрокаДвижений.Количество * СтрокаДвижений.СуммаБезНДС/СтрокаОст.Количество;
					КонецЕсли;
					СтрокаОст.Количество   = СтрокаОст.Количество - СписываемоеКоличество;	
					СтрокаОст.СуммаРубли   = СтрокаОст.СуммаРубли - СтрокаДвижений.СуммаРубли;	
					СтрокаОст.СуммаДоллары = СтрокаОст.СуммаДоллары - СтрокаДвижений.СуммаДоллары;
					СтрокаОст.СуммаЕвро    = СтрокаОст.СуммаЕвро - СтрокаДвижений.СуммаЕвро;
					СтрокаОст.СуммаБезНДС    = СтрокаОст.СуммаБезНДС - СтрокаДвижений.СуммаБезНДС;
					
					КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
			Если КоличествоРаспределить > 0 Тогда 
				Если ТоварыРеализации = Неопределено Тогда 
					ТоварыРеализации = ПолучитьТоварыРеализации(Реквизиты.ДокументОснование, вхФильтр);
				КонецЕсли;
				Если РеквизитыРеализации = Неопределено Тогда 
					РеквизитыРеализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.ДокументОснование, "Дата,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,УчитыватьНДС,СуммаВключаетНДС"); 
					КурсДокумента = РеквизитыРеализации.КурсВзаиморасчетов;
					КратностьДокумента = РеквизитыРеализации.КратностьВзаиморасчетов;
					КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаДоллар, РеквизитыРеализации.Дата);
					КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаЕвро, РеквизитыРеализации.Дата);
				КонецЕсли;	
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижений, Товары);
				СтрокаДвижений.Период = Реквизиты.Дата;
				СтрокаДвижений.Регистратор = вхСсылкаНаДокумент;
				СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход;
				СтрокаДвижений.Количество = КоличествоРаспределить;
				СтрокаДвижений.СтатусПартии = Перечисления.СтатусыПартии.Собственный;
				СтрокаДвижений.Организация = Реквизиты.Организация;
				СтрокаДвижений.Склад = Реквизиты.Склад;
				Отбор = Новый Структура("Номенклатура,Качество");
				ЗаполнитьЗначенияСвойств(Отбор, Товары);
				Строки = ТоварыРеализации.НайтиСтроки(Отбор);
				Если Строки.Количество() > 0 Тогда 
					СтрокаТовары = Строки[0];
					СтрокаДвижений.СтрокаПрихода = СтрокаТовары.СтрокаПрихода;
					СтрокаДвижений.СуммаРубли = СтрокаДвижений.Количество * СтрокаТовары.Цена - СтрокаДвижений.Количество * СтрокаТовары.Цена * СтрокаТовары.ПроцентСкидкиНаценки / 100;
					СтрокаДвижений.СуммаДоллары = СтрокаДвижений.СуммаРубли;
					СтрокаДвижений.СуммаЕвро 	= СтрокаДвижений.СуммаРубли;
					СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаДвижений.СуммаРубли,
	                                                   РеквизитыРеализации.УчитыватьНДС, РеквизитыРеализации.СуммаВключаетНДС,
	                                                   УчетНДС.ПолучитьСтавкуНДС(СтрокаТовары.СтавкаНДС));
					Если РеквизитыРеализации.УчитыватьНДС И РеквизитыРеализации.СуммаВключаетНДС Тогда 
						СтрокаДвижений.СуммаБезНДС 	= СтрокаДвижений.СуммаРубли - СуммаНДС;
					Иначе
						СтрокаДвижений.СуммаБезНДС 	= СтрокаДвижений.СуммаРубли;
					КонецЕсли;
					Если РеквизитыРеализации.ВалютаДокумента = ПараметрыСеанса.ВалютаРубль Тогда
							СтрокаДвижений.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
							ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
							СтрокаДвижений.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
							ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
					ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаДоллар Тогда
							СтрокаДвижений.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаДоллары, ПараметрыСеанса.ВалютаДоллар,
							ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
							СтрокаДвижений.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаДоллары, ПараметрыСеанса.ВалютаЕвро,
							ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
							СтрокаДвижений.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
							ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаЕвро Тогда
							СтрокаДвижений.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаЕвро, ПараметрыСеанса.ВалютаЕвро,
							ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
							СтрокаДвижений.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаЕвро, ПараметрыСеанса.ВалютаДоллар,
							ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
							СтрокаДвижений.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
							ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					КонецЕсли;
				Иначе
					ВызватьИсключение "В документе-основании не найден такой товар";
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрокаДвижений.СтрокаПрихода) Тогда 
					Если ЗначениеЗаполнено(Товары.СтрокаПрихода) Тогда 
						СтрокаДвижений.СтрокаПрихода = Товары.СтрокаПрихода;
					Иначе 
						СсылкаНаОбъект = Справочники.ИдентификаторыСтрокПриходов.ПолучитьСсылку();
						НоваяСтрокаПрихода = Справочники.ИдентификаторыСтрокПриходов.СоздатьЭлемент();
						НоваяСтрокаПрихода.Дата = Реквизиты.Дата;
						НоваяСтрокаПрихода.Приход = вхСсылкаНаДокумент;
						НоваяСтрокаПрихода.УстановитьСсылкуНового(СсылкаНаОбъект);
						НоваяСтрокаПрихода.Наименование = СсылкаНаОбъект.УникальныйИдентификатор();
						НоваяСтрокаПрихода.Записать();
						
						СтрокаДвижений.СтрокаПрихода =  НоваяСтрокаПрихода.Ссылка;
						
						НовСтр = ДобавленныеСтрокиПрихода.Добавить();
						НовСтр.НомерСтроки = Товары.НомерСтроки;
						НовСтр.СтрокаПрихода = НоваяСтрокаПрихода.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавленныеСтрокиПрихода.Количество() > 0 Тогда 
			Док = вхСсылкаНаДокумент.ПолучитьОбъект();
			Для Каждого Стр Из ДобавленныеСтрокиПрихода Цикл 
				Строка = Док.Товары.Найти(Стр.НомерСтроки, "НомерСтроки");
				Строка.СтрокаПрихода = Стр.СтрокаПрихода;
			КонецЦикла;
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_Продажи(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) 
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Продажи", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВалютаДокумента,КратностьВзаиморасчетов,КурсВзаиморасчетов");	
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;

	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	//Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
	//	Возврат ТаблицаДвижений;
	//КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Качество,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
	|	ВозвратТоваровОтПокупателяТовары.СтрокаЗаявки,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.ТорговаяТочка,
	|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоВозврат,
	|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаРеглВозврат,
	|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаУпрВозврат,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Период
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Для Каждого СтрокаТЧ Из ТаблицаДвижений Цикл 
		Если Не Реквизиты.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			СтрокаТЧ.СуммаРеглВозврат = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаРеглВозврат, Реквизиты.ВалютаДокумента,
			ВалютаРегламентированногоУчета, Реквизиты.КурсВзаиморасчетов, 1, Реквизиты.КратностьВзаиморасчетов, 1);
		КонецЕсли;
		Если Не Реквизиты.ВалютаДокумента = ВалютаУправленческогоУчета Тогда
			КурсВалютыУправленческогоУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУправленческогоУчета, Реквизиты.Дата);

			СтрокаТЧ.СуммаУпрВозврат = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпрВозврат, Реквизиты.ВалютаДокумента,
			ВалютаУправленческогоУчета, Реквизиты.КурсВзаиморасчетов, КурсВалютыУправленческогоУчета.Курс, Реквизиты.КратностьВзаиморасчетов, КурсВалютыУправленческогоУчета.Кратность);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьМетаданные()
	Возврат Метаданные.Документы.ВозвратТоваровОтПокупателя;	
КонецФункции

Функция ПолучитьРеквизитыКонтроля(вхПараметр = Неопределено) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Шапка", "Дата,Проведен");
	Возврат Результат;
КонецФункции

Функция ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр = Неопределено) Экспорт
	Возврат	РаботаСПоследовательностямиКлиентСервер.ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр);
КонецФункции

Функция ПолучитьДанныеГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхФильтр = Неопределено) Экспорт
	
	Результат = Неопределено;
	лМетаданныеПоследовательности = Неопределено;
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеГраницПоследовательности]: неправильный параметр номер 2.";	
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.Взаиморасчеты, вхФильтр);
	ИначеЕсли лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет Тогда 	
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.ПартииТоваров, вхФильтр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Процедура ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Функция ПолучитьМассивСтатусовДокумента(Назначение = Неопределено) Экспорт
	
	Если Назначение = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СтатусыДокументов.Ссылка
		|ИЗ
		|	Справочник.СтатусыДокументов КАК СтатусыДокументов
		|ГДЕ
		|	СтатусыДокументов.Родитель = &Родитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыДокументов.Код");
		Запрос.УстановитьПараметр("Родитель", Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателя);
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ИначеЕсли Назначение = "Движение по регистрам" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателя);
		Возврат Массив;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗаписиПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, Проведение) Экспорт 
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = вхСсылкаНаДокумент.Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СуммаДокумента,ДоговорКонтрагента");
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) Тогда
		Если Проведение 
			И Реквизиты.Дата >= ПараметрыСеанса.ДатаНачалаРаботыТовары 
			И Реквизиты.Дата >= глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Период,
			               |	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
			               |	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура
			               |ИЗ
			               |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			               |ГДЕ
			               |	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ЗаполнитьЗначенияСвойств(лРезультат.Добавить(), Выборка); 
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) Тогда
		Если Проведение И (Реквизиты.СуммаДокумента <> 0) И Реквизиты.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты Тогда
			лСтрокаРезультат = лРезультат.Добавить();
			лСтрокаРезультат.ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента;
			лСтрокаРезультат.Период = Реквизиты.Дата;
			лСтрокаРезультат.Регистратор = вхСсылкаНаДокумент;
		КонецЕсли;
	Иначе 		
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
	Возврат Результат;

КонецФункции

Функция ПолучитьТоварыРеализации(ДокументОснование, вхФильтр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
	               |	РеализацияТоваровУслугТовары.Качество,
	               |	РеализацияТоваровУслугТовары.Номенклатура,
	               |	РеализацияТоваровУслугТовары.СтрокаПрихода,
	               |	РеализацияТоваровУслугТовары.Сумма,
	               |	РеализацияТоваровУслугТовары.СуммаНДС,
	               |	РеализацияТоваровУслугТовары.Цена,
	               |	РеализацияТоваровУслугТовары.ПроцентСкидкиНаценки,
	               |	РеализацияТоваровУслугТовары.СтавкаНДС
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", " И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура); 
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", "");
	КонецЕсли;
	ТоварыРеализации = Запрос.Выполнить().Выгрузить();
	
	Возврат ТоварыРеализации;
	
КонецФункции