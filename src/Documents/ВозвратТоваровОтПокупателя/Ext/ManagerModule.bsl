
//// ОБРАБОТЧИКИ МОДУЛЯ ОБЪЕКТА

Процедура ВыполнитьПроведение(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	лКонтроль = Неопределено;
	лФильтр = Неопределено;
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ДанныеОбъекта.Контроль", лКонтроль);
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "Фильтр", лФильтр);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата, ВидОперации");
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыНаСкладах") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыНаСкладах", РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыКОтгрузке") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыКОтгрузке", РегистрыНакопления_ТоварыКОтгрузке(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваров") тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДокументОснование");
		Если ЗначениеЗаполнено(ДокументОснование) Тогда 
			БлокировкаДанных = Новый БлокировкаДанных;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад КАК Склад,
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
			|	ВозвратТоваровОтПокупателяТовары.Качество
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Результаты = Запрос.ВыполнитьПакет();
			
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ПартииТоваров");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = Результаты.Получить(0);
			
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Качество", "Качество");
			
			ЭлементБлокировки = БлокировкаДанных.Добавить("Последовательность.ПартионныйУчет");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = Результаты.Получить(1);
			
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			
			БлокировкаДанных.Заблокировать();
		КонецЕсли;
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		
		лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
		
		лТребуемая = РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры, лФильтр);
		
		//Удалим служебные колонки 
		ОбщегоНазначения.УдалитьКолонки(лИсходная, лТребуемая);
		
		лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
		ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров,
		лРазностныеДанные, лРазделенныеБазовая.Исключенные);
		
		КонтрольОстатковПартий(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		
		ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		Если лФильтр = Неопределено Тогда 
			РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Продажи") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "Продажи", РегистрыНакопления_Продажи(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "Взаиморасчеты") тогда
		// регистр накопления "Взаиморасчеты"
		
		//ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагента");
		//
		//БлокировкаДанных = Новый БлокировкаДанных;
		//
		//ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.Взаиморасчеты");
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
		//
		//ЭлементБлокировки = БлокировкаДанных.Добавить("Последовательность.ПоРасчетамСКонтрагентами");
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
		//БлокировкаДанных.Заблокировать();
		
		НовоеПроведениеПоВзаиморасчетам = глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам");
		
		лОчищать = Ложь;
		Если НовоеПроведениеПоВзаиморасчетам Тогда 
			лОчищать = ПроведениеДокументовКлиентСервер.НеобходимоОчиститьДвиженияВзаиморасчеты(вхСсылкаНаДокумент);
		Иначе	
			Если (лКонтроль <> Неопределено) тогда
				Если лКонтроль.Свойство("СтарыеЗначения") Тогда
					лСтарыеЗначения = лКонтроль.СтарыеЗначения.Получить(Метаданные.Последовательности.ПоРасчетамСКонтрагентами);
					лНовыеЗначения = лКонтроль.НовыеЗначения.Получить(Метаданные.Последовательности.ПоРасчетамСКонтрагентами);
					Если (лСтарыеЗначения <> Неопределено) И (лНовыеЗначения <> Неопределено) тогда
						лОчищать = (лСтарыеЗначения.Шапка.Дата < лНовыеЗначения.Шапка.Дата)
						И лСтарыеЗначения.Шапка.Проведен;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
		
		Если лОчищать тогда
			ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты);
			лБазовая = Неопределено;
			ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", лБазовая);
			лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		Иначе
			лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
			лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты);	
		КонецЕсли;
		
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
		//лТребуемая = РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
		лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
		ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.Взаиморасчеты,
		лРазностныеДанные, лРазделенныеБазовая.Исключенные);
		
		ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
		Если НовоеПроведениеПоВзаиморасчетам И лФильтр = Неопределено Тогда 
			РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПоРасчетамСКонтрагентами", Истина);
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента") = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят Тогда
			РегистрыСведений.ОтложенноеСнятиеБлокировкиКонтрагентов.ДобавитьДляОбработки(вхСсылкаНаДокумент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтменуПроведения(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент);
	
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, вхПараметры);
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Ложь);
	
	Если глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПоРасчетамСКонтрагентами", Ложь);
	КонецЕсли;
КонецПроцедуры

//После записи движений
Процедура КонтрольОстатковПартий(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,Склад,АктРассмотренияВозврата,ДокументОснование"); 
	
	Если Не ЗначениеЗаполнено(Реквизиты.АктРассмотренияВозврата) Тогда
		//Здесь контроль только для документов по процессу возврата
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартииТоваров.Номенклатура,
		|	ПартииТоваров.СтрокаПрихода,
		|	СУММА(ПартииТоваров.Количество) КАК Количество
		|ПОМЕСТИТЬ ПартииВозврата
		|ИЗ
		|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
		|ГДЕ
		|	ПартииТоваров.Регистратор = &Возврат
		|	И НЕ ПартииТоваров.ВнутреннееПеремещение
		|	И ПартииТоваров.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваров.Номенклатура,
		|	ПартииТоваров.СтрокаПрихода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииВозврата.Номенклатура,
		|	СУММА(ПартииВозврата.Количество) КАК Количество
		|ПОМЕСТИТЬ НоменклатураВозврата
		|ИЗ
		|	ПартииВозврата КАК ПартииВозврата
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииВозврата.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииТоваров.Номенклатура,
		|	ПартииТоваров.СтрокаПрихода,
		|	СУММА(ПартииТоваров.Количество) КАК Количество
		|ПОМЕСТИТЬ СписанныеПартии
		|ИЗ
		|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураВозврата КАК НоменклатураВозврата
		|		ПО (НоменклатураВозврата.Номенклатура = ПартииТоваров.Номенклатура)
		|ГДЕ
		|	ПартииТоваров.Регистратор = &ДокументПродажи
		|	И ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
		|	И НЕ ПартииТоваров.ВнутреннееПеремещение
		|	И ПартииТоваров.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваров.Номенклатура,
		|	ПартииТоваров.СтрокаПрихода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписанныеПартии.Номенклатура,
		|	СписанныеПартии.СтрокаПрихода,
		|	СписанныеПартии.Количество
		|ПОМЕСТИТЬ ОстаткиПартий
		|ИЗ
		|	СписанныеПартии КАК СписанныеПартии
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПартииВозврата.Номенклатура,
		|	ПартииВозврата.СтрокаПрихода,
		|	-ПартииВозврата.Количество
		|ИЗ
		|	ПартииВозврата КАК ПартииВозврата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПартий.Номенклатура,
		|	ОстаткиПартий.СтрокаПрихода,
		|	СУММА(ОстаткиПартий.Количество) КАК Количество
		|ИЗ
		|	ОстаткиПартий КАК ОстаткиПартий
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПартий.Номенклатура,
		|	ОстаткиПартий.СтрокаПрихода
		|
		|ИМЕЮЩИЕ
		|	СУММА(ОстаткиПартий.Количество) < 0";
	

	Запрос.УстановитьПараметр("Возврат", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ДокументПродажи", Реквизиты.ДокументОснование);
	
	ОтрицательныеОстатки = Запрос.Выполнить().Выгрузить();
	
	ТекстОшибок = "";
	Для каждого СтрокаОстатков Из ОтрицательныеОстатки Цикл
		ТекстОшибок = ТекстОшибок + Символы.ПС +"Номенклатура: "+СтрокаОстатков.Номенклатура+", Строка прихода: "+СтрокаОстатков.СтрокаПрихода+", Превышение: "+(-СтрокаОстатков.Количество);
	КонецЦикла;
	
	Если ОтрицательныеОстатки.Количество() > 0 Тогда
		ТекстОшибки = "Превышено количество к возврату:"+ Символы.ПС + ТекстОшибок;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

//// ТАБЛИЦЫ ДВИЖЕНИЙ ДОКУМЕНТОВ

Функция РегистрыНакопления_ТоварыКОтгрузке(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) 
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыКОтгрузке", ТаблицаДвижений);
	
	//Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
	//	Возврат ТаблицаДвижений;
	//КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,Склад,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,ДокументОснование,Организация,ВидОперации"); 
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийВозвратаОтПокупателя.МФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.СтрокаЗаявки,
		|	ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателя) КАК Статус,
		|	ВозвратТоваровОтПокупателяТовары.КоличествоПлан КАК Количество,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Период
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт 
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыНаСкладах", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,Склад,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,ДокументОснование,Организация,ВидОперации,АктРассмотренияВозврата,Склад.СкладНедостач"); 
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийВозвратаОтПокупателя.МФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый
		ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(Реквизиты.АктРассмотренияВозврата) Тогда
		
		//Размещенное количество приходуем на склад
		//Неразмещенное количество приходуем на склад недостач
		
		Если Не ЗначениеЗаполнено(Реквизиты.СкладСкладНедостач) Тогда
			ВызватьИсключение "Не задан склад недостач для склада "+Реквизиты.Склад;
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.Качество КАК Качество,
		|	СУММА(ВозвратТоваровОтПокупателяТовары.КоличествоРазмещено) КАК КоличествоРазмещено,
		|	СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК КоличествоПринято
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровОтПокупателяТовары.Ссылка,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.Качество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТовары.Ссылка.Склад КАК Склад,
		|	ВТТовары.Номенклатура,
		|	ВТТовары.Качество,
		|	ВЫБОР
		|		КОГДА ВТТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят)
		|			ТОГДА ВТТовары.КоличествоПринято
		|		ИНАЧЕ ВТТовары.КоличествоРазмещено
		|	КОНЕЦ КАК Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВТТовары.Ссылка КАК Регистратор,
		|	ВТТовары.Ссылка.Дата КАК Период
		|ИЗ
		|	ВТТовары КАК ВТТовары
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят)
		|				ТОГДА ВТТовары.КоличествоПринято
		|			ИНАЧЕ ВТТовары.КоличествоРазмещено
		|		КОНЕЦ > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТТовары.Ссылка.Склад.СкладНедостач,
		|	ВТТовары.Номенклатура,
		|	ВТТовары.Качество,
		|	ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ВТТовары.Ссылка,
		|	ВТТовары.Ссылка.Дата
		|ИЗ
		|	ВТТовары КАК ВТТовары
		|ГДЕ
		|	ВТТовары.КоличествоПринято > ВТТовары.КоличествоРазмещено
		|	И ВТТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяРазмещен)";
		
	Иначе
		//Это документ из 77
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.Качество,
		|	СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК Количество,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Период
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.Качество,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_Взаиморасчеты(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) 
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", ТаблицаДвижений);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента") = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый
		ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СтатусДокумента") = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ВидОперации") = Перечисления.ВидыОперацийВозвратаОтПокупателя.Комиссия Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ВидОперации") = Перечисления.ВидыОперацийВозвратаОтПокупателя.VMI Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	СформироватьДвижения = Истина;
	
	Если ТипЗнч(вхПараметры) = Тип("Структура") И вхПараметры.Свойство("Фильтр") И ТипЗнч(вхПараметры.Фильтр) = Тип("Структура") И вхПараметры.Фильтр.Свойство("ДоговорКонтрагента") И Не вхПараметры.Фильтр.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагента") Тогда
		СформироватьДвижения = Ложь;
	КонецЕсли;
	
	Если СформироватьДвижения Тогда
		
		ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагента");
		ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ВалютаДокумента");
		КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "КурсВзаиморасчетов");
		КратностьВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "КратностьВзаиморасчетов");
		СуммаДокумента = -ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "СуммаДокумента");
		ДоговорВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДоговорКонтрагентаВзаиморасчетов");
		ЗнакДвижения = -1;
		ТаблицаДвижений = УправлениеВзаиморасчетами.ПростоеПроведениеПоВзаиморасчетам(вхСсылкаНаДокумент, ?(ЗначениеЗаполнено(ДоговорВзаиморасчетов),ДоговорВзаиморасчетов,ДоговорКонтрагента)
		, Неопределено, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СуммаДокумента, ЗнакДвижения);
		
	КонецЕсли;
	
	Возврат ТаблицаДвижений
	
КонецФункции

Функция РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено, вхФильтр = Неопределено) 
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,Склад,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,ДокументОснование,Организация,ВидОперации,Контрагент, АктРассмотренияВозврата"); 
	
	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПроведенияПоПартиямРезервам") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый
		ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.АктРассмотренияВозврата) Тогда
		//Заполнено основание и Акт возврата
		Если Не ЗначениеЗаполнено(Реквизиты.ДокументОснование) Тогда
			ВызватьИсключение "Не заполнен документ-основание!";			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Ссылка,
		               |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		               |	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад КАК Склад,
		               |	ВозвратТоваровОтПокупателяТовары.Качество,
		               |	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода,
		               |	ВозвратТоваровОтПокупателяТовары.Ссылка.Организация КАК Организация,
		               |	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоПринято,
		               |	ВозвратТоваровОтПокупателяТовары.КоличествоРазмещено КАК КоличествоРазмещено,
		               |	ВозвратТоваровОтПокупателяТовары.Себестоимость,
		               |	ВозвратТоваровОтПокупателяТовары.СебестоимостьЦена,
		               |	ВозвратТоваровОтПокупателяТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
		               |	ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
		               |	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
		               |	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтрокиВДокументе
		               |ПОМЕСТИТЬ ВТТовары
		               |ИЗ
		               |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		               |ГДЕ
		               |	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		               |	ВТТовары.Ссылка КАК Регистратор,
		               |	ВТТовары.Ссылка.Дата КАК Период,
		               |	ВТТовары.Номенклатура,
		               |	ВТТовары.Склад,
		               |	ВТТовары.Качество,
		               |	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный) КАК СтатусПартии,
		               |	ВТТовары.СтрокаПрихода,
		               |	ВТТовары.Организация КАК Организация,
		               |	ВТТовары.КоличествоПринято КАК Количество,
		               |	ВТТовары.СебестоимостьЦена * ВТТовары.КоличествоПринято КАК Себестоимость,
		               |	ВТТовары.СебестоимостьЦена,
		               |	ВТТовары.УчитыватьНДС,
		               |	ВТТовары.СуммаВключаетНДС,
		               |	ВТТовары.СтавкаНДС,
		               |	ВТТовары.НомерСтрокиВДокументе,
		               |	ВТТовары.СебестоимостьЦена * ВТТовары.КоличествоПринято КАК СуммаРубли,
		               |	0 КАК СуммаДоллары,
		               |	0 КАК СуммаЕвро,
		               |	ВТТовары.СебестоимостьЦена * ВТТовары.КоличествоПринято КАК СуммаБезНДС,
		               |	ЛОЖЬ КАК ВнутреннееПеремещение
		               |ИЗ
		               |	ВТТовары КАК ВТТовары
		               |ГДЕ
		               |	ВТТовары.КоличествоПринято > 0
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
		               |	ВТТовары.Ссылка,
		               |	ВТТовары.Ссылка.Дата,
		               |	ВТТовары.Номенклатура,
		               |	ВТТовары.Склад,
		               |	ВТТовары.Качество,
		               |	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный),
		               |	ВТТовары.СтрокаПрихода,
		               |	ВТТовары.Организация,
		               |	ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено,
		               |	ВТТовары.СебестоимостьЦена * (ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено),
		               |	ВТТовары.СебестоимостьЦена,
		               |	ВТТовары.УчитыватьНДС,
		               |	ВТТовары.СуммаВключаетНДС,
		               |	ВТТовары.СтавкаНДС,
		               |	ВТТовары.НомерСтрокиВДокументе,
		               |	ВТТовары.СебестоимостьЦена * (ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено),
		               |	0,
		               |	0,
		               |	ВТТовары.СебестоимостьЦена * (ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено),
		               |	ИСТИНА
		               |ИЗ
		               |	ВТТовары КАК ВТТовары
		               |ГДЕ
		               |	ВТТовары.КоличествоПринято > ВТТовары.КоличествоРазмещено
		               |	И ВТТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяРазмещен)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		               |	ВТТовары.Ссылка,
		               |	ВТТовары.Ссылка.Дата,
		               |	ВТТовары.Номенклатура,
		               |	ВТТовары.Склад.СкладНедостач,
		               |	&КачествоНедостача,
		               |	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный),
		               |	ВТТовары.СтрокаПрихода,
		               |	ВТТовары.Организация,
		               |	ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено,
		               |	ВТТовары.СебестоимостьЦена,
		               |	ВТТовары.СебестоимостьЦена * (ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено),
		               |	ВТТовары.УчитыватьНДС,
		               |	ВТТовары.СуммаВключаетНДС,
		               |	ВТТовары.СтавкаНДС,
		               |	ВТТовары.НомерСтрокиВДокументе,
		               |	ВТТовары.СебестоимостьЦена * (ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено),
		               |	0,
		               |	0,
		               |	ВТТовары.СебестоимостьЦена * (ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено),
		               |	ИСТИНА
		               |ИЗ
		               |	ВТТовары КАК ВТТовары
		               |ГДЕ
		               |	ВТТовары.КоличествоПринято > ВТТовары.КоличествоРазмещено
		               |	И ВТТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяРазмещен)";
		
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Запрос.УстановитьПараметр("КачествоНедостача", Справочники.Качество.Недостача);
		
		ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаДвижений.Количество() > 0 Тогда 
			
			ВалютаДокумента = Реквизиты.ВалютаДокумента;
			КурсДокумента = Реквизиты.КурсВзаиморасчетов;
			КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
			
			КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаДоллар, Реквизиты.Дата);
			КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаЕвро, Реквизиты.Дата);
			Для Каждого Товар Из ТаблицаДвижений Цикл
				Если Товар.УчитыватьНДС И Товар.СуммаВключаетНДС Тогда 
					СтНДС =  УчетНДС.ПолучитьСтавкуНДС(Товар.СтавкаНДС);
					Товар.СуммаБезНДС = 100 * Товар.СуммаБезНДС / (100 + СтНДС);
				КонецЕсли;
				Если ВалютаДокумента = ПараметрыСеанса.ВалютаРубль Тогда
					Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаРубль,
					ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
					Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаРубль,
					ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
				ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаДоллар Тогда
					Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаЕвро,
					ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
					Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаЕвро Тогда
					Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаЕвро,
					ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
					Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийВозвратаОтПокупателя.МФП Тогда
		
		ОрганизацияКонтрагента = Справочники.ПолитикиМФП.ОрганизацияКонтрагента(Реквизиты.Контрагент, Реквизиты.Дата);
		
		Если Не ЗначениеЗаполнено(ОрганизацияКонтрагента) Тогда
			ВызватьИсключение "Не удалось определить организацию собственного контрагента "+Реквизиты.Контрагент+"!";
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
		|	ВозвратТоваровОтПокупателяТовары.ВозвратПокупателя.Дата КАК Период,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
		|	ВозвратТоваровОтПокупателяТовары.Качество,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный) КАК СтатусПартии,
		|	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода,
		|	&ОрганизацияКонтрагента КАК Организация,
		|	ВозвратТоваровОтПокупателяТовары.Количество,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаРубли,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаДоллары,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаЕвро,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаБезНДС,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
		|	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтрокиВДокументе,
		|	ЛОЖЬ КАК ВнутреннееПеремещение
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
		|	ВозвратТоваровОтПокупателяТовары.ВозвратПокупателя.Дата КАК Период,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад КАК Склад,
		|	ВозвратТоваровОтПокупателяТовары.Качество,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный) КАК СтатусПартии,
		|	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Организация КАК Организация,
		|	ВозвратТоваровОтПокупателяТовары.Количество,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаРубли,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаДоллары,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаЕвро,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаБезНДС,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
		|	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтрокиВДокументе,
		|	ЛОЖЬ КАК ВнутреннееПеремещение
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Запрос.УстановитьПараметр("ОрганизацияКонтрагента", ОрганизацияКонтрагента);
		
		Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = Запрос.Текст + " И ВозвратТоваровОтПокупателяТовары.Номенклатура = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
		КонецЕсли;
		
		ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаДвижений.Количество() > 0 Тогда 
			
			//ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");
			ВалютаДокумента = Реквизиты.ВалютаДокумента;
			КурсДокумента = Реквизиты.КурсВзаиморасчетов;
			КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
			
			КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаДоллар, Реквизиты.Дата);
			КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаЕвро, Реквизиты.Дата);
			Для Каждого Товар Из ТаблицаДвижений Цикл
				Если Товар.УчитыватьНДС И Товар.СуммаВключаетНДС Тогда 
					СтНДС =  УчетНДС.ПолучитьСтавкуНДС(Товар.СтавкаНДС);
					Товар.СуммаБезНДС = 100 * Товар.СуммаБезНДС / (100 + СтНДС);
				КонецЕсли;
				Если ВалютаДокумента = ПараметрыСеанса.ВалютаРубль Тогда
					Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаРубль,
					ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
					Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаРубль,
					ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
				ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаДоллар Тогда
					Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаЕвро,
					ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
					Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаЕвро Тогда
					Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаЕвро,
					ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
					Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(Реквизиты.ДокументОснование) Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Период,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
		|	ВозвратТоваровОтПокупателяТовары.Качество,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный) КАК СтатусПартии,
		|	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Организация,
		|	ВозвратТоваровОтПокупателяТовары.Количество,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаРубли,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаДоллары,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаЕвро,
		|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СуммаБезНДС,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
		|	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтрокиВДокументе,
		|	ЛОЖЬ КАК ВнутреннееПеремещение
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = Запрос.Текст + " И ВозвратТоваровОтПокупателяТовары.Номенклатура = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
		КонецЕсли;
		
		ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаДвижений.Количество() > 0 Тогда 
			
			//ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");
			ВалютаДокумента = Реквизиты.ВалютаДокумента;
			КурсДокумента = Реквизиты.КурсВзаиморасчетов;
			КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
			
			КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаДоллар, Реквизиты.Дата);
			КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаЕвро, Реквизиты.Дата);
			Для Каждого Товар Из ТаблицаДвижений Цикл
				Если Товар.УчитыватьНДС И Товар.СуммаВключаетНДС Тогда 
					СтНДС =  УчетНДС.ПолучитьСтавкуНДС(Товар.СтавкаНДС);
					Товар.СуммаБезНДС = 100 * Товар.СуммаБезНДС / (100 + СтНДС);
				КонецЕсли;
				Если ВалютаДокумента = ПараметрыСеанса.ВалютаРубль Тогда
					Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаРубль,
					ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
					Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаРубль,
					ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
				ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаДоллар Тогда
					Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаЕвро,
					ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
					Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаЕвро Тогда
					Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаЕвро,
					ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
					Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
					ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		ТоварыРеализации = Неопределено;
		РеквизитыРеализации = Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПартииТоваров.Номенклатура,
		|	ПартииТоваров.Склад,
		|	ПартииТоваров.Качество,
		|	ПартииТоваров.СтатусПартии,
		|	ПартииТоваров.СтрокаПрихода,
		|	ПартииТоваров.Организация,
		|	ПартииТоваров.Количество,
		|	ПартииТоваров.СуммаРубли,
		|	ПартииТоваров.СуммаДоллары,
		|	ПартииТоваров.СуммаЕвро,
		|	ПартииТоваров.СуммаБезНДС,
		|	ПартииТоваров.Организация = &Организация КАК ЭтаОрганизация
		|ИЗ
		|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
		|ГДЕ
		|	ПартииТоваров.Регистратор = &Регистратор  %УсловиеПоНоменклатуре%
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтаОрганизация УБЫВ";
		Запрос.УстановитьПараметр("Регистратор", Реквизиты.ДокументОснование);
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", " И ПартииТоваров.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура); 
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", "");
		КонецЕсли;
		ОстаткиПартий = Запрос.Выполнить().Выгрузить();
		
		ДобавленныеСтрокиПрихода = Новый ТаблицаЗначений;
		ДобавленныеСтрокиПрихода.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ДобавленныеСтрокиПрихода.Колонки.Добавить("СтрокаПрихода", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокПриходов"));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтроки,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад КАК Склад,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.Качество КАК Качество,
		|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
		|	ВозвратТоваровОтПокупателяТовары.СтрокаПрихода КАК СтрокаПрихода,
		|	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтрокиВДокументе
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
		|	И ВозвратТоваровОтПокупателяТовары.Количество > 0 %УсловиеПоНоменклатуре%";
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
		Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", " И ВозвратТоваровОтПокупателяТовары.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", "");
		КонецЕсли;
		Товары = Запрос.Выполнить().Выбрать();
		Пока Товары.Следующий() Цикл
			Отбор = Новый Структура("Номенклатура,Качество");
			ЗаполнитьЗначенияСвойств(Отбор, Товары);
			КоличествоРаспределить = Товары.Количество;
			
			Строки = ОстаткиПартий.НайтиСтроки(Отбор);			
			ИндексСтроки = 0;
			
			Пока КоличествоРаспределить > 0 И ИндексСтроки < Строки.Количество() Цикл 
				СтрокаОст = Строки.Получить(ИндексСтроки);
				Если СтрокаОст.Количество > 0 Тогда 
					СписываемоеКоличество = Мин(КоличествоРаспределить, СтрокаОст.Количество);
					
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаОст,,"Организация");
					СтрокаДвижений.Организация =  Реквизиты.Организация;
					СтрокаДвижений.Количество = СписываемоеКоличество;
					СтрокаДвижений.СтатусПартии = Перечисления.СтатусыПартии.Собственный;
					СтрокаДвижений.Период = Реквизиты.Дата;
					СтрокаДвижений.Регистратор = вхСсылкаНаДокумент;
					СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход;
					СтрокаДвижений.Склад = Реквизиты.Склад;
					СтрокаДвижений.НомерСтрокиВДокументе = Товары.НомерСтрокиВДокументе;
					
					Если СтрокаДвижений.Количество <> СтрокаОст.Количество Тогда 
						СтрокаДвижений.СуммаРубли   = СтрокаДвижений.Количество * СтрокаДвижений.СуммаРубли/СтрокаОст.Количество;
						СтрокаДвижений.СуммаДоллары = СтрокаДвижений.Количество * СтрокаДвижений.СуммаДоллары/СтрокаОст.Количество;
						СтрокаДвижений.СуммаЕвро 	= СтрокаДвижений.Количество * СтрокаДвижений.СуммаЕвро/СтрокаОст.Количество;
						СтрокаДвижений.СуммаБезНДС 	= СтрокаДвижений.Количество * СтрокаДвижений.СуммаБезНДС/СтрокаОст.Количество;
					КонецЕсли;
					СтрокаОст.Количество   = СтрокаОст.Количество - СписываемоеКоличество;	
					СтрокаОст.СуммаРубли   = СтрокаОст.СуммаРубли - СтрокаДвижений.СуммаРубли;	
					СтрокаОст.СуммаДоллары = СтрокаОст.СуммаДоллары - СтрокаДвижений.СуммаДоллары;
					СтрокаОст.СуммаЕвро    = СтрокаОст.СуммаЕвро - СтрокаДвижений.СуммаЕвро;
					СтрокаОст.СуммаБезНДС    = СтрокаОст.СуммаБезНДС - СтрокаДвижений.СуммаБезНДС;
					
					КоличествоРаспределить = КоличествоРаспределить - СписываемоеКоличество;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
			Если КоличествоРаспределить > 0 Тогда 
				Если ТоварыРеализации = Неопределено Тогда 
					ТоварыРеализации = ПолучитьТоварыРеализации(Реквизиты.ДокументОснование, вхФильтр);
				КонецЕсли;
				Если РеквизитыРеализации = Неопределено Тогда 
					РеквизитыРеализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.ДокументОснование, "Дата,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,УчитыватьНДС,СуммаВключаетНДС"); 
					КурсДокумента = РеквизитыРеализации.КурсВзаиморасчетов;
					КратностьДокумента = РеквизитыРеализации.КратностьВзаиморасчетов;
					КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаДоллар, РеквизитыРеализации.Дата);
					КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаЕвро, РеквизитыРеализации.Дата);
				КонецЕсли;	
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижений, Товары);
				СтрокаДвижений.Период = Реквизиты.Дата;
				СтрокаДвижений.Регистратор = вхСсылкаНаДокумент;
				СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход;
				СтрокаДвижений.Количество = КоличествоРаспределить;
				СтрокаДвижений.СтатусПартии = Перечисления.СтатусыПартии.Собственный;
				СтрокаДвижений.Организация = Реквизиты.Организация;
				СтрокаДвижений.Склад = Реквизиты.Склад;
				Отбор = Новый Структура("Номенклатура,Качество");
				ЗаполнитьЗначенияСвойств(Отбор, Товары);
				Строки = ТоварыРеализации.НайтиСтроки(Отбор);
				Если Строки.Количество() > 0 Тогда 
					СтрокаТовары = Строки[0];
					СтрокаДвижений.СтрокаПрихода = СтрокаТовары.СтрокаПрихода;
					СтрокаДвижений.СуммаРубли = СтрокаДвижений.Количество * СтрокаТовары.Цена - СтрокаДвижений.Количество * СтрокаТовары.Цена * СтрокаТовары.ПроцентСкидкиНаценки / 100;
					СтрокаДвижений.СуммаДоллары = СтрокаДвижений.СуммаРубли;
					СтрокаДвижений.СуммаЕвро 	= СтрокаДвижений.СуммаРубли;
					СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаДвижений.СуммаРубли,
					РеквизитыРеализации.УчитыватьНДС, РеквизитыРеализации.СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(СтрокаТовары.СтавкаНДС));
					Если РеквизитыРеализации.УчитыватьНДС И РеквизитыРеализации.СуммаВключаетНДС Тогда 
						СтрокаДвижений.СуммаБезНДС 	= СтрокаДвижений.СуммаРубли - СуммаНДС;
					Иначе
						СтрокаДвижений.СуммаБезНДС 	= СтрокаДвижений.СуммаРубли;
					КонецЕсли;
					Если РеквизитыРеализации.ВалютаДокумента = ПараметрыСеанса.ВалютаРубль Тогда
						СтрокаДвижений.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
						ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
						СтрокаДвижений.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
						ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
					ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаДоллар Тогда
						СтрокаДвижений.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаДоллары, ПараметрыСеанса.ВалютаДоллар,
						ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
						СтрокаДвижений.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаДоллары, ПараметрыСеанса.ВалютаЕвро,
						ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
						СтрокаДвижений.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
						ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаЕвро Тогда
						СтрокаДвижений.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаЕвро, ПараметрыСеанса.ВалютаЕвро,
						ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
						СтрокаДвижений.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаЕвро, ПараметрыСеанса.ВалютаДоллар,
						ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
						СтрокаДвижений.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
						ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
					КонецЕсли;
				Иначе
					ВызватьИсключение "В документе-основании не найден такой товар";
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрокаДвижений.СтрокаПрихода) Тогда 
					Если ЗначениеЗаполнено(Товары.СтрокаПрихода) Тогда 
						СтрокаДвижений.СтрокаПрихода = Товары.СтрокаПрихода;
					Иначе 
						СсылкаНаОбъект = Справочники.ИдентификаторыСтрокПриходов.ПолучитьСсылку();
						НоваяСтрокаПрихода = Справочники.ИдентификаторыСтрокПриходов.СоздатьЭлемент();
						НоваяСтрокаПрихода.Дата = Реквизиты.Дата;
						НоваяСтрокаПрихода.Приход = вхСсылкаНаДокумент;
						НоваяСтрокаПрихода.УстановитьСсылкуНового(СсылкаНаОбъект);
						НоваяСтрокаПрихода.Наименование = СсылкаНаОбъект.УникальныйИдентификатор();
						НоваяСтрокаПрихода.Записать();
						
						СтрокаДвижений.СтрокаПрихода =  НоваяСтрокаПрихода.Ссылка;
						
						НовСтр = ДобавленныеСтрокиПрихода.Добавить();
						НовСтр.НомерСтроки = Товары.НомерСтроки;
						НовСтр.СтрокаПрихода = НоваяСтрокаПрихода.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавленныеСтрокиПрихода.Количество() > 0 Тогда 
			Док = вхСсылкаНаДокумент.ПолучитьОбъект();
			Для Каждого Стр Из ДобавленныеСтрокиПрихода Цикл 
				Строка = Док.Товары.Найти(Стр.НомерСтроки, "НомерСтроки");
				Строка.СтрокаПрихода = Стр.СтрокаПрихода;
			КонецЦикла;
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьТаблицуДвижениямиМФП(вхСсылкаНаДокумент, ТаблицаДвижений);
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Процедура ДополнитьТаблицуДвижениямиМФП(вхСсылкаНаДокумент, вхТаблицаДвижений)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,Организация,ВидОперации,Контрагент,АктРассмотренияВозврата"); 

	Если Не ПроведениеДокументовКлиентСервер.ИспользуетсяНоваяСхемаМФПДляВозвратов(Реквизиты.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	выхТаблицаДвижений = вхТаблицаДвижений.СкопироватьКолонки();
	
	ТаблицаДляОбработки = вхТаблицаДвижений.Скопировать(Новый Структура("ВнутреннееПеремещение", Ложь));	
	
	ТаблицаКПередаче = ПолучитьТаблицуКПередачеМеждуОрганизациями(вхСсылкаНаДокумент, ТаблицаДляОбработки);
	
	ТаблицаКПередачеСМФП = ДобавитьДвиженияПоМФПВТаблицуПередачи(вхСсылкаНаДокумент, ТаблицаКПередаче);
	
	//Добавим приход из движений
	Для каждого СтрокаТаблицы Из ТаблицаДляОбработки Цикл
	    ЗаполнитьЗначенияСвойств(выхТаблицаДвижений.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	//Добавляем движения МФП
	Для каждого СтрокаТаблицыКПередаче Из ТаблицаКПередачеСМФП Цикл
		
		НоваяСтрока =  выхТаблицаДвижений.Добавить();
		НоваяСтрока.Период = Реквизиты.Дата;
		НоваяСтрока.Регистратор = вхСсылкаНаДокумент;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыКПередаче, "Номенклатура, Склад, Качество,СтрокаПрихода, Количество");
		НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартии.Собственный;
		НоваяСтрока.СуммаРубли = СтрокаТаблицыКПередаче.СебестоимостьЦена*НоваяСтрока.Количество;
		//Доллары, Евро, БезНДС
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Организация = СтрокаТаблицыКПередаче.ОрганизацияПокупатель;
		
		НоваяСтрока =  выхТаблицаДвижений.Добавить();
		НоваяСтрока.Период = Реквизиты.Дата;
		НоваяСтрока.Регистратор = вхСсылкаНаДокумент;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыКПередаче, "Номенклатура, Склад, Качество,СтрокаПрихода, Количество");
		НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартии.Собственный;
		НоваяСтрока.СуммаРубли = СтрокаТаблицыКПередаче.СебестоимостьЦена*НоваяСтрока.Количество;
		//Доллары, Евро, БезНДС
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Организация = СтрокаТаблицыКПередаче.ОрганизацияПродавец;   //еправильная себестоиммоть в движениях!
		
	КонецЦикла;
	
	//Дальше надо определить организацию для перемещения недостачи.
	//ИЛИ недостача не должна уходить по мфп?
	   
	
КонецПроцедуры

Функция ДобавитьДвиженияПоМФПВТаблицуПередачи(вхСсылкаНаДокумент, ТаблицаКПередаче)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,Организация,ВидОперации,Контрагент,АктРассмотренияВозврата"); 
	
	ПравилаСозданияВозвратовМФП = Справочники.ПолитикиМФП.ПравилаСозданияВозвратовМФП(Реквизиты.Дата);
	ПравилаСозданияВозвратовМФП = ПравилаСозданияВозвратовМФП.Скопировать(Новый Структура("ОрганизацияПокупательСписаниеПартий", Реквизиты.Организация));
	
	Справочники.ПолитикиМФП.ДобавитьПроцентыНаценки(ПравилаСозданияВозвратовМФП);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПравилаСозданияВозвратовМФП", 	ПравилаСозданияВозвратовМФП);
	Запрос.УстановитьПараметр("ВнутренниеКонтрагенты", 			Справочники.ПолитикиМФП.СобственыеКонтрагенты(Реквизиты.Дата));
	Запрос.УстановитьПараметр("ОрганизацияПокупатель", 			Реквизиты.Организация);
	Запрос.УстановитьПараметр("ВсеОрганизации", Не ЗначениеЗаполнено(Реквизиты.Организация));
	Запрос.УстановитьПараметр("ТаблицаКПередаче", 			ТаблицаКПередаче);
	Запрос.УстановитьПараметр("НачПериода", Реквизиты.Дата);
	Запрос.УстановитьПараметр("КонПериода", КонецДня(Реквизиты.Дата));
	 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаСозданияВозвратовМФП.Политика,
	|	ПравилаСозданияВозвратовМФП.ОрганизацияПродавецСписаниеПартий,
	|	ПравилаСозданияВозвратовМФП.ОрганизацияПокупательСписаниеПартий,
	|	ПравилаСозданияВозвратовМФП.ОрганизацияПродавец,
	|	ПравилаСозданияВозвратовМФП.ОрганизацияПокупатель,
	|	ПравилаСозданияВозвратовМФП.ДоговорКонтрагента,
	|	ПравилаСозданияВозвратовМФП.ПроцентНаценки,
	|	ПравилаСозданияВозвратовМФП.Порядок
	|ПОМЕСТИТЬ ТаблицаПолитик
	|ИЗ
	|	&ПравилаСозданияВозвратовМФП КАК ПравилаСозданияВозвратовМФП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКПередаче.Склад,
	|	ТаблицаКПередаче.ВозвратПокупателя,
	|	ТаблицаКПередаче.Номенклатура,
	|	ТаблицаКПередаче.Качество,
	|	ТаблицаКПередаче.СтрокаПрихода,
	|	ТаблицаКПередаче.ОрганизацияПродавецСписаниеПартий,
	|	ТаблицаКПередаче.ОрганизацияПокупательСписаниеПартий,
	|	ТаблицаКПередаче.Количество,
	|	ТаблицаКПередаче.Цена
	|ПОМЕСТИТЬ ВозвратыМФП
	|ИЗ
	|	&ТаблицаКПередаче КАК ТаблицаКПередаче
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратыМФП.Склад,
	|	ВозвратыМФП.ВозвратПокупателя,
	|	ВозвратыМФП.Номенклатура,
	|	ВозвратыМФП.Качество,
	|	ВозвратыМФП.СтрокаПрихода,
	|	ВозвратыМФП.ОрганизацияПродавецСписаниеПартий КАК Возвраты_ОрганизацияПродавецСписаниеПартий,
	|	ВозвратыМФП.ОрганизацияПокупательСписаниеПартий КАК Возвраты_ОрганизацияПокупательСписаниеПартий,
	|	ТаблицаПолитик.ОрганизацияПродавец КАК ОрганизацияПродавецПолитика,
	|	ТаблицаПолитик.ОрганизацияПокупатель КАК ОрганизацияПокупательПолитика,
	|	ТаблицаПолитик.ОрганизацияПродавецСписаниеПартий КАК ОрганизацияПродавецСписаниеПартий,
	|	ТаблицаПолитик.ОрганизацияПокупательСписаниеПартий КАК ОрганизацияПокупательСписаниеПартий,
	|	ТаблицаПолитик.ДоговорКонтрагента,
	|	ВозвратыМФП.Количество,
	|	ВозвратыМФП.Цена,
	|	ТаблицаПолитик.Политика,
	|	ТаблицаПолитик.ПроцентНаценки,
	|	ТаблицаПолитик.Порядок
	|ПОМЕСТИТЬ ТаблицаПродажСПолитиками
	|ИЗ
	|	ВозвратыМФП КАК ВозвратыМФП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПолитик КАК ТаблицаПолитик
	|		ПО (ТаблицаПолитик.ОрганизацияПродавецСписаниеПартий = ВозвратыМФП.ОрганизацияПродавецСписаниеПартий)
	|			И (ТаблицаПолитик.ОрганизацияПокупательСписаниеПартий = ВозвратыМФП.ОрганизацияПокупательСписаниеПартий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПродажСПолитиками.Возвраты_ОрганизацияПродавецСписаниеПартий КАК ОрганизацияПродавец,
	|	ТаблицаПродажСПолитиками.Возвраты_ОрганизацияПокупательСписаниеПартий КАК ОрганизацияПокупатель
	|ИЗ
	|	ТаблицаПродажСПолитиками КАК ТаблицаПродажСПолитиками
	|ГДЕ
	|	ТаблицаПродажСПолитиками.Политика ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродажСПолитиками.Склад КАК Склад,
	|	ТаблицаПродажСПолитиками.ВозвратПокупателя,
	|	ТаблицаПродажСПолитиками.Номенклатура,
	|	ТаблицаПродажСПолитиками.Качество,
	|	ТаблицаПродажСПолитиками.СтрокаПрихода,
	|	ТаблицаПродажСПолитиками.ОрганизацияПродавецПолитика КАК ОрганизацияПродавец,
	|	ТаблицаПродажСПолитиками.ОрганизацияПокупательПолитика КАК ОрганизацияПокупатель,
	|	ТаблицаПродажСПолитиками.ОрганизацияПродавецСписаниеПартий КАК ОрганизацияПродавецСписаниеПартий,
	|	ТаблицаПродажСПолитиками.ОрганизацияПокупательСписаниеПартий КАК ОрганизацияПокупательСписаниеПартий,
	|	ТаблицаПродажСПолитиками.Количество,
	|	ТаблицаПродажСПолитиками.Цена КАК СебестоимостьЦена,
	|	ТаблицаПродажСПолитиками.Политика,
	|	ТаблицаПродажСПолитиками.ПроцентНаценки,
	|	ТаблицаПродажСПолитиками.Порядок
	|ИЗ
	|	ТаблицаПродажСПолитиками КАК ТаблицаПродажСПолитиками
	|ГДЕ
	|	НЕ ТаблицаПродажСПолитиками.Политика ЕСТЬ NULL"; 
	 
	Результаты = Запрос.ВыполнитьПакет();
	
	ОрганизацииБезПолитик = Результаты[Результаты.Количество() - 2].Выгрузить();
	
	Если ОрганизацииБезПолитик.Количество() > 0 Тогда
		лТекстОшибки = "Для данных организаций не заданы политики МФП!";
		Для каждого Стр ИЗ ОрганизацииБезПолитик Цикл
			лТекстОшибки = лТекстОшибки + Символы.ПС + "Продавец: "+Стр.ОрганизацияПродавец+". Покупатель: "+Стр.ОрганизацияПокупатель;
		КонецЦикла;
		Сообщить(лТекстОшибки);
		ВызватьИсключение лТекстОшибки;
	КонецЕсли;
	
	ТЗ = Результаты[Результаты.Количество() - 1].Выгрузить();
	
	Для каждого СтрокаТЗ ИЗ  ТЗ Цикл
		
		ПроцентыНаценки = Справочники.ПолитикиМФП.ПроцентыНаценкиПоСтроке(ПравилаСозданияВозвратовМФП, СтрокаТЗ);
		КоличествоПроцентов = ПроцентыНаценки.Количество();
		сч = 1;
		Для каждого ПроцентНаценки Из ПроцентыНаценки Цикл
			Если сч < КоличествоПроцентов Тогда
				СтрокаТЗ.СебестоимостьЦена = СтрокаТЗ.СебестоимостьЦена + СтрокаТЗ.СебестоимостьЦена*ПроцентНаценки/100;
			КонецЕсли;
			сч =сч+1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьТаблицуКПередачеМеждуОрганизациями(вхСсылкаНаДокумент, ТаблицаДляОбработки)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,Организация,ВидОперации,Контрагент,АктРассмотренияВозврата"); 
	
	//Сначала нужно определить сколько и какой организации мы можем вернуть
	//Для этого нужно учитывать сколько мы покупали и сколько мы уже возвращали
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнутренниеКонтрагенты", 			Справочники.ПолитикиМФП.СобственыеКонтрагенты(Реквизиты.Дата));
	Запрос.УстановитьПараметр("ВидОперацииМФП", 				Перечисления.ВидыОперацийВозвратаОтПокупателя.МФП);
	Запрос.УстановитьПараметр("Дата", 							Реквизиты.Дата);
	Запрос.УстановитьПараметр("Ссылка", 						вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ТаблицаДляОбработки", 			ТаблицаДляОбработки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДляОбработки.Номенклатура,
	               |	ТаблицаДляОбработки.Склад,
	               |	ТаблицаДляОбработки.Качество,
	               |	ТаблицаДляОбработки.СтрокаПрихода,
	               |	ТаблицаДляОбработки.Организация КАК Организация,
				   |    ТаблицаДляОбработки.Регистратор КАК Регистратор,
	               |	ТаблицаДляОбработки.Количество,
	               |	ТаблицаДляОбработки.СуммаРубли
	               |ПОМЕСТИТЬ ТаблицаДляОбработки
	               |ИЗ
	               |	&ТаблицаДляОбработки КАК ТаблицаДляОбработки 
	               | ;
				   |
				   |ВЫБРАТЬ
	               |	ТаблицаДляОбработки.Номенклатура,
	               |	ТаблицаДляОбработки.Склад,
	               |	ТаблицаДляОбработки.Качество,
	               |	ТаблицаДляОбработки.СтрокаПрихода,
	               |	ТаблицаДляОбработки.Организация КАК ОрганизацияПокупатель,
				   |    ТаблицаДляОбработки.Регистратор КАК ВозвратПокупателя,
	               |	ТаблицаДляОбработки.Регистратор.ДокументОснование КАК Реализация,
	               |	СУММА(ТаблицаДляОбработки.Количество) КАК Количество,
	               |	СУММА(ТаблицаДляОбработки.СуммаРубли) КАК Сумма,
	               |	СУММА(ТаблицаДляОбработки.СуммаРубли) / СУММА(ТаблицаДляОбработки.Количество) КАК Цена
	               |ПОМЕСТИТЬ ТаблицаВозвратовСОснованием
	               |ИЗ
	               |	ТаблицаДляОбработки КАК ТаблицаДляОбработки 
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаДляОбработки.Номенклатура,
	               |	ТаблицаДляОбработки.Качество,
	               |	ТаблицаДляОбработки.Склад,
	               |	ТаблицаДляОбработки.СтрокаПрихода,
	               |	ТаблицаДляОбработки.Организация,
				   |	ТаблицаДляОбработки.Регистратор,
	               |	ТаблицаДляОбработки.Регистратор.ДокументОснование
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаВозвратовСОснованием.Номенклатура,
	               |	ТаблицаВозвратовСОснованием.Склад,
	               |	ТаблицаВозвратовСОснованием.Качество,
	               |	ТаблицаВозвратовСОснованием.СтрокаПрихода,
	               |	ТаблицаВозвратовСОснованием.ОрганизацияПокупатель,
	               |	ТаблицаВозвратовСОснованием.ВозвратПокупателя,
	               |	СУММА(ТаблицаВозвратовСОснованием.Количество) КАК Количество,
	               |	СУММА(ТаблицаВозвратовСОснованием.Сумма) КАК Сумма,
	               |	СУММА(ТаблицаВозвратовСОснованием.Сумма) / СУММА(ТаблицаВозвратовСОснованием.Количество) КАК Цена
	               |ПОМЕСТИТЬ ТаблицаВозвратов
	               |ИЗ
	               |	ТаблицаВозвратовСОснованием КАК ТаблицаВозвратовСОснованием
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаВозвратовСОснованием.ВозвратПокупателя,
	               |	ТаблицаВозвратовСОснованием.Номенклатура,
	               |	ТаблицаВозвратовСОснованием.Качество,
	               |	ТаблицаВозвратовСОснованием.Склад,
	               |	ТаблицаВозвратовСОснованием.СтрокаПрихода,
	               |	ТаблицаВозвратовСОснованием.ОрганизацияПокупатель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаВозвратовСОснованием.СтрокаПрихода,
	               |	ТаблицаВозвратовСОснованием.Реализация
	               |ПОМЕСТИТЬ СтрокиПриходаВозвратов
	               |ИЗ
	               |	ТаблицаВозвратовСОснованием КАК ТаблицаВозвратовСОснованием
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПартииТоваровОбороты.Номенклатура,
	               |	ПартииТоваровОбороты.Качество,
	               |	ПартииТоваровОбороты.СтрокаПрихода,
	               |	ПартииТоваровОбороты.Организация КАК ОрганизацияПродавецСписаниеПартий,
	               |	ВЫРАЗИТЬ(ПартииТоваровОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).Организация КАК ОрганизацияПокупательСписаниеПартий,
	               |	СУММА(-ПартииТоваровОбороты.КоличествоОборот) КАК Количество
	               |ПОМЕСТИТЬ ТаблицаПродаж
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваров.Обороты(
	               |			,
	               |			&Дата,
	               |			Регистратор,
	               |			(Номенклатура, Качество, СтрокаПрихода) В
	               |				(ВЫБРАТЬ
	               |					ТаблицаВозвратов.Номенклатура,
	               |					ТаблицаВозвратов.Качество,
	               |					ТаблицаВозвратов.СтрокаПрихода
	               |				ИЗ
	               |					ТаблицаВозвратов)) КАК ПартииТоваровОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтрокиПриходаВозвратов КАК СтрокиПриходаВозвратов
	               |		ПО ПартииТоваровОбороты.СтрокаПрихода = СтрокиПриходаВозвратов.СтрокаПрихода
	               |			И ПартииТоваровОбороты.Регистратор = СтрокиПриходаВозвратов.Реализация
	               |ГДЕ
	               |	ПартииТоваровОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	               |	И ПартииТоваровОбороты.КоличествоОборот < 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПартииТоваровОбороты.Номенклатура,
	               |	ПартииТоваровОбороты.Качество,
	               |	ПартииТоваровОбороты.СтрокаПрихода,
	               |	ПартииТоваровОбороты.Организация,
	               |	ВЫРАЗИТЬ(ПартииТоваровОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВозвратыМФП.Номенклатура,
	               |	ВозвратыМФП.Качество,
	               |	ВозвратыМФП.СтрокаПрихода,
	               |	ВозвратыМФП.ОрганизацияПродавецСписаниеПартий КАК ОрганизацияПродавецСписаниеПартий,
	               |	ВозвратыМФП.ОрганизацияПокупательСписаниеПартий КАК ОрганизацияПокупательСписаниеПартий,
	               |	СУММА(ВозвратыМФП.Количество) КАК Количество
	               |ПОМЕСТИТЬ ВозвратыМФП
	               |ИЗ
	               |	РегистрСведений.ВозвратыМФП КАК ВозвратыМФП
	               |ГДЕ
	               |	ВозвратыМФП.Период < ДобавитьКДате(&Дата, День, -1)
	               |    И ВозвратПокупателя <> &Ссылка
	               |СГРУППИРОВАТЬ ПО
	               |	ВозвратыМФП.Номенклатура,
	               |	ВозвратыМФП.Качество,
	               |	ВозвратыМФП.СтрокаПрихода,
	               |	ВозвратыМФП.ОрганизацияПродавецСписаниеПартий,
	               |	ВозвратыМФП.ОрганизацияПокупательСписаниеПартий
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПродаж.Номенклатура,
	               |	ТаблицаПродаж.Качество,
	               |	ТаблицаПродаж.СтрокаПрихода,
	               |	ТаблицаПродаж.ОрганизацияПродавецСписаниеПартий,
	               |	ТаблицаПродаж.ОрганизацияПокупательСписаниеПартий,
	               |	ТаблицаПродаж.Количество - ЕСТЬNULL(ВозвратыМФП.Количество, 0) КАК Количество
	               |ИЗ
	               |	ТаблицаПродаж КАК ТаблицаПродаж
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВозвратыМФП КАК ВозвратыМФП
	               |		ПО ТаблицаПродаж.Номенклатура = ВозвратыМФП.Номенклатура
	               |			И ТаблицаПродаж.Качество = ВозвратыМФП.Качество
	               |			И ТаблицаПродаж.СтрокаПрихода = ВозвратыМФП.СтрокаПрихода
	               |			И ТаблицаПродаж.ОрганизацияПродавецСписаниеПартий = ВозвратыМФП.ОрганизацияПродавецСписаниеПартий
	               |			И ТаблицаПродаж.ОрганизацияПокупательСписаниеПартий = ВозвратыМФП.ОрганизацияПокупательСписаниеПартий
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ТаблицаПродаж.ОрганизацияПродавецСписаниеПартий = ТаблицаПродаж.ОрганизацияПокупательСписаниеПартий
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ,
	               |	ТаблицаПродаж.Количество - ЕСТЬNULL(ВозвратыМФП.Количество, 0),
	               |	ТаблицаПродаж.СтрокаПрихода.Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаВозвратов.ВозвратПокупателя,
	               |	ТаблицаВозвратов.Номенклатура,
	               |	ТаблицаВозвратов.Склад,
	               |	ТаблицаВозвратов.Качество,
	               |	ТаблицаВозвратов.СтрокаПрихода,
	               |	ТаблицаВозвратов.ОрганизацияПокупатель,
	               |	ТаблицаВозвратов.Количество,
	               |	ТаблицаВозвратов.Цена КАК Цена
	               |ИЗ
	               |	ТаблицаВозвратов КАК ТаблицаВозвратов";
	
	 Результаты = Запрос.ВыполнитьПакет();
	 
	 ТаблицаОстатков = Результаты[Результаты.Количество() - 2].Выгрузить();
	 ТаблицаВозвратов = Результаты[Результаты.Количество() - 1].Выгрузить();
	 
	 
	 ТаблицаДвижений = Неопределено;
	 ОбщегоНазначения.СоздатьСтруктуруРегистраСведений("ВозвратыМФП", ТаблицаДвижений);
	 
	 // Нужно определить организации, по которым еще есть остаток к возврату
	 Для каждого СтрокаВозвратов Из ТаблицаВозвратов Цикл
		 
		 СтруктураОтбора = Новый структура("Номенклатура, Качество, СтрокаПрихода, ОрганизацияПокупательСписаниеПартий");
		 ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаВозвратов);
		 СтруктураОтбора.ОрганизацияПокупательСписаниеПартий = СтрокаВозвратов.ОрганизацияПокупатель;
		 
		 СтрокиОстатков =  ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		 
		 Списать = СтрокаВозвратов.Количество;
		 
		 Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
			 
			 Списано = Мин(Списать, СтрокаОстатков.Количество);
			 
			 Если Списано <= 0 Тогда
				 Продолжить;
			 КонецЕсли;
			 
			 НоваяСтрока = ТаблицаДвижений.Добавить();
			 ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков, , "Количество");
			 НоваяСтрока.Количество 		= Списано;
			 НоваяСтрока.Цена 				= СтрокаВозвратов.Цена;
			 НоваяСтрока.Склад 				= СтрокаВозвратов.Склад;
			 НоваяСтрока.ВозвратПокупателя 	= СтрокаВозвратов.ВозвратПокупателя;
			 НоваяСтрока.Период				= Реквизиты.Дата;
			 
			 СтрокаОстатков.Количество = СтрокаОстатков.Количество - Списано;			 
			 
			 Списать = Списать -  Списано;
			 
		 КонецЦикла;
		 
		 Если Списать > 0 Тогда
			//Не можем вернуть. Ну и ладно.			 
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 Возврат ТаблицаДвижений;

КонецФункции

Функция РегистрыНакопления_Продажи(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Продажи", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,ВалютаДокумента,КратностьВзаиморасчетов,КурсВзаиморасчетов,ДокументОснование, ВидОперации");
	
	
	Если Реквизиты.Дата < глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Если Реквизиты.Дата < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый
		ИЛИ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	//#Убрал не нужные движения по мфп  Kalinin V.A. ( 2018-08-31 )
	// 
	Если ЗначениеЗаполнено(Реквизиты.ДокументОснование) 
		и ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДокументОснование,"ЭтоМФП") тогда 
		Возврат ТаблицаДвижений;		
	КонецЕсли; 	
	//Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
	//	Возврат ТаблицаДвижений;
	//КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийВозвратаОтПокупателя.МФП Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Качество,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад,
	|	ВозвратТоваровОтПокупателяТовары.СтрокаЗаявки,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.ТорговаяТочка,
	|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоВозврат,
	|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаРеглВозврат,
	|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаУпрВозврат,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Период,
	|	-ВозвратТоваровОтПокупателяТовары.Себестоимость КАК СебестоимостьРубли,
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Филиал
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Для Каждого СтрокаТЧ Из ТаблицаДвижений Цикл 
		Если Не Реквизиты.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			СтрокаТЧ.СуммаРеглВозврат = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаРеглВозврат, Реквизиты.ВалютаДокумента,
			ВалютаРегламентированногоУчета, Реквизиты.КурсВзаиморасчетов, 1, Реквизиты.КратностьВзаиморасчетов, 1);
		КонецЕсли;
		Если Не Реквизиты.ВалютаДокумента = ВалютаУправленческогоУчета Тогда
			КурсВалютыУправленческогоУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУправленческогоУчета, Реквизиты.Дата);
			
			СтрокаТЧ.СуммаУпрВозврат = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпрВозврат, Реквизиты.ВалютаДокумента,
			ВалютаУправленческогоУчета, Реквизиты.КурсВзаиморасчетов, КурсВалютыУправленческогоУчета.Курс, Реквизиты.КратностьВзаиморасчетов, КурсВалютыУправленческогоУчета.Кратность);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьМетаданные()
	Возврат Метаданные.Документы.ВозвратТоваровОтПокупателя;	
КонецФункции

Функция ПолучитьРеквизитыКонтроля(вхПараметр = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Если (вхПараметр = Метаданные.ПланыОбмена.ОбменПартКом83_77) тогда
		Результат = ОбменДаннымиКлиентСервер.РеквизитыКонтроляПоДокументу(ПолучитьМетаданные(), ИсключаемыеРеквизитыКонтроляРегистрации());
	Иначе
		Результат.Вставить("Шапка", "Дата,Проведен");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИсключаемыеРеквизитыКонтроляРегистрации() Экспорт
	
	ИсключаемыеРеквизиты = ОбменДаннымиКлиентСервер.ИнициализироватьТаблицуИсключаемыхРеквизитовКонтроля();
	ОбменДаннымиКлиентСервер.ДобавитьВИсключаемыеРевизиты(ИсключаемыеРеквизиты, "Ссылка");
	
	Возврат ИсключаемыеРеквизиты;
	
КонецФункции

Функция ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр = Неопределено) Экспорт
	Возврат	РаботаСПоследовательностямиКлиентСервер.ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр);
КонецФункции

Функция ПолучитьДанныеГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхФильтр = Неопределено) Экспорт
	
	Результат = Неопределено;
	лМетаданныеПоследовательности = Неопределено;
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеГраницПоследовательности]: неправильный параметр номер 2.";	
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.Взаиморасчеты, вхФильтр);
	ИначеЕсли лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет Тогда 	
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.ПартииТоваров, вхФильтр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Процедура ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Функция ПолучитьМассивСтатусовДокумента(Назначение = Неопределено) Экспорт
	
	Если Назначение = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СтатусыДокументов.Ссылка
		|ИЗ
		|	Справочник.СтатусыДокументов КАК СтатусыДокументов
		|ГДЕ
		|	СтатусыДокументов.Родитель = &Родитель
		|	И НЕ СтатусыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ)
		|	И НЕ СтатусыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяРазмещен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыДокументов.Код");
		Запрос.УстановитьПараметр("Родитель", Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателя);
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	ИначеЕсли Назначение = "ПоАктуВозврата" Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СтатусыДокументов.Ссылка
		|ИЗ
		|	Справочник.СтатусыДокументов КАК СтатусыДокументов
		|ГДЕ
		|	СтатусыДокументов.Родитель = &Родитель
		|	И НЕ СтатусыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыДокументов.Код");
		Запрос.УстановитьПараметр("Родитель", Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателя);
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	ИначеЕсли Назначение = "Движение по регистрам" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателя);
		Возврат Массив;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗаписиПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, Проведение) Экспорт 
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = вхСсылкаНаДокумент.Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СуммаДокумента,ДоговорКонтрагента,ДоговорКонтрагентаВзаиморасчетов");
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) Тогда
		Если Проведение 
			И Реквизиты.Дата >= ПараметрыСеанса.ДатаНачалаРаботыТовары 
			И Реквизиты.Дата >= глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Период,
			|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Регистратор,
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ЗаполнитьЗначенияСвойств(лРезультат.Добавить(), Выборка); 
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) Тогда
		Если Проведение И (Реквизиты.СуммаДокумента <> 0) И Реквизиты.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты Тогда
			лСтрокаРезультат = лРезультат.Добавить();
			лСтрокаРезультат.ДоговорКонтрагента = ?(ЗначениеЗаполнено(Реквизиты.ДоговорКонтрагентаВзаиморасчетов),Реквизиты.ДоговорКонтрагентаВзаиморасчетов, Реквизиты.ДоговорКонтрагента);
			лСтрокаРезультат.Период = Реквизиты.Дата;
			лСтрокаРезультат.Регистратор = вхСсылкаНаДокумент;
		КонецЕсли;
	Иначе 		
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТоварыРеализации(ДокументОснование, вхФильтр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
	|	РеализацияТоваровУслугТовары.Качество,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.СтрокаПрихода,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.ПроцентСкидкиНаценки,
	|	РеализацияТоваровУслугТовары.СтавкаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Если ТипЗнч(вхФильтр) = Тип("Структура") И вхФильтр.Свойство("Номенклатура") Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", " И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", вхФильтр.Номенклатура); 
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоНоменклатуре%", "");
	КонецЕсли;
	ТоварыРеализации = Запрос.Выполнить().Выгрузить();
	
	Возврат ТоварыРеализации;
	
КонецФункции

//// ОБМЕНЫ

//Выгрузка
Функция ВыгрузитьЭлементы(вхТаблицаСсылокНаОбъекты, вхПланОбмена) Экспорт
	
	Результат = Новый Массив;
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[ВыгрузитьЭлементы]: неправильный параметр номер 2.";
	КонецЕсли;
	
	Если лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog Тогда 
		
		лМенеджерПланаОбмена = ПланыОбмена[лМетаданныеПланаОбмена.Имя];
		
		лЗапрос = Новый Запрос;
		лЗапрос.УстановитьПараметр("ТаблицаСсылок", вхТаблицаСсылокНаОбъекты);
		лЗапрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
		лЗапрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	&ТаблицаСсылок КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка КАК Ссылка,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.АктРассмотренияВозврата.Штрихкод КАК Штрихкод,
		|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Ссылка.КодВозврата.Код, 0) КАК КодВозврата,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Склад.ФизическийСклад КАК Склад,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Номер КАК Номер,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата КАК Дата,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.АктРассмотренияВозврата.НомерНакладнойКлиента КАК НомерВходящегоДокумента,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.АктРассмотренияВозврата.ДатаНакладнойКлиента КАК ДатаВходящегоДокумента,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.АктРассмотренияВозврата.НомерСчетаФактурыКлиента КАК НомерВходящегоСФ,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.АктРассмотренияВозврата.ДатаСчетаФактурыКлиента КАК ДатаВходящегоСФ,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтПокупателяТовары.Ссылка.ТорговаяТочка.Код ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Ссылка.Контрагент.ОсновнаяТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка))
		|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Ссылка.ТорговаяТочка
		|	КОНЕЦ КАК Контрагент,
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.Организация КАК Организация,
		|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Ссылка.Склад.СкладVMI, ЛОЖЬ) КАК ОтветХранение,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
		|	ВозвратТоваровОтПокупателяТовары.Цена,
		|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.СтрокаЗаявки.ПрайсПоставщика.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладПолучатель,
		|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.СтрокаЗаявки.IDSite, """") КАК SSID,
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтПокупателяТовары.Ссылка.ТорговаяТочка.Код ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Ссылка.Контрагент.ОсновнаяТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка))
		|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Ссылка.ТорговаяТочка
		|	КОНЕЦ КАК Клиент,
		|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.СтрокаЗаявки.ПоследняяКорректировка.ТорговаяТочка.Город, ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.СтрокаЗаявки.Заявка.ТорговаяТочка.Город, ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка))) КАК Город,
		|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.СтрокаПрихода.НомерГТД.Представление, """") КАК ГТД,
		|	ВозвратТоваровОтПокупателяТовары.КоличествоПлан КАК Количество,
		|	ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка КАК Виртуальная
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Объекты КАК Объекты
		|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка = Объекты.Ссылка
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.АктРассмотренияВозврата <> ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|ИТОГИ ПО
		|	Ссылка";
		
		РезультатЗапроса = лЗапрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			лТипОбъектаXDTO = ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаПриемку");
			лВыборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
			
			Пока лВыборка.Следующий() Цикл
				
				лОбъект = ФабрикаXDTO.Создать(лТипОбъектаXDTO);
				ЗаполнитьЗначенияСвойств(лОбъект, лВыборка, "Номер,Дата,НомерВходящегоДокумента,ДатаВходящегоДокумента,НомерВходящегоСФ,ДатаВходящегоСФ,СуммаДокумента,ОтветХранение");
				лОбъект.ВидДокумента 		= "ВозвратТоваровОтПокупателя";
				лОбъект.Ссылка 				= XMLСтрока(лВыборка.Ссылка);
				лОбъект.СкладСсылка 		= XMLСтрока(лВыборка.Склад);
				лОбъект.КонтрагентСсылка 	= XMLСтрока(лВыборка.Контрагент);
				лОбъект.ОрганизацияСсылка 	= XMLСтрока(лВыборка.Организация);
				лОбъект.ШтрихКод 			= XMLСтрока(лВыборка.ШтрихКод);
				лОбъект.КодВозврата 		= XMLСтрока(лВыборка.КодВозврата);
				
				лТовары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаПриемку.Товары"));
				лТоварыСписок = лТовары.ПолучитьСписок("СтрокаТовары");
				
				ВыборкаПоТоварам = лВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ТТПополнениеСклада = Неопределено;
				
				Пока ВыборкаПоТоварам.Следующий() Цикл
					НоваяСтрока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), лТоварыСписок.ВладеющееСвойство.Тип.Имя)); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам, "НоменклатураНаименование,НоменклатураАртикул,SSID,Количество,Цена,ГТД");
					НоваяСтрока.НоменклатураСсылка = XMLСтрока(ВыборкаПоТоварам.Номенклатура);
					НоваяСтрока.КлиентСсылка = XMLСтрока(ВыборкаПоТоварам.Клиент);
					НоваяСтрока.ГородСсылка = XMLСтрока(ВыборкаПоТоварам.Город);
					НоваяСтрока.СкладПолучательСсылка = XMLСтрока(ВыборкаПоТоварам.Склад);
					
					лТоварыСписок.Добавить(НоваяСтрока);
					
				КонецЦикла;	
				
				лОбъект.Товары = лТовары;
				Результат.Добавить(лОбъект);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Загрузка
Процедура ЗагрузитьЭлемент(ОбъектXDTO, вхОтправитель, Отказ, вхПараметры = Неопределено, НомерСообщения = 0) Экспорт
	
	лМетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(вхОтправитель));
	
	Если лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog Тогда 
		НомерПотока = ?(лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 0, 1);
		Попытка
			ЗагрузитьРезультатПриемки(ОбъектXDTO, вхПараметры);
		Исключение
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ОбъектXDTO", ОбъектXDTO.Тип().Имя);
			СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ЗаказСсылка);
			СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ВозвратТоваровОтПокупателя");
			СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
			СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
			СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
			СтруктураОшибки.Вставить("НомерПотока", ?(лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 0, 1));
			ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
			
			ДокСсылка = Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
			Если НЕ ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
				РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокСсылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки: "+ОписаниеОшибки(), , Ложь, НомерПотока); 
			КонецЕсли;
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатПриемки(ОбъектXDTO, ДопПараметры = Неопределено)
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ЗаказСсылка) Тогда 
		ДокСсылка = Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
		
		Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
			ВызватьИсключение "Не найден возврат товаров от покупателя с guid = " + ОбъектXDTO.ЗаказСсылка;
		КонецЕсли;
	Иначе
		ДокСсылка = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(ОбщегоНазначения.ПреобразоватьНомер(ОбъектXDTO.ЗаказНомер), ТекущаяДата());
		Если Не ЗначениеЗаполнено(ДокСсылка) Тогда 
			ВызватьИсключение "Не найден возврат товаров от покупателя с номером = " + ОбъектXDTO.ЗаказНомер;
		КонецЕсли;
	КонецЕсли;
	
	СтатусДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "СтатусДокумента");
	
	//Загружаем приемку только для документа в статусе Новый
	Если НЕ СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый Тогда
		ВызватьИсключение "Приемка загружается только для документов в статусе ""Новый""";
	КонецЕсли;
	
	ЕстьВходящее = РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.ЕстьСообщениеПоОбъекту(ДокСсылка, Ложь);
	
	Если Не ЕстьВходящее Тогда 
		//Первая приемка
		Дата = ТекущаяДата();
	Иначе
		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "Дата");
	КонецЕсли;
	
	ТоварыXDTO = ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	СоотвSSID = ОбменДаннымиКлиентСервер.СоответствиеСтрокЗаявокИSSID(ТоварыXDTO, ДокСсылка);
	
	ТоварыВМС = Новый ТаблицаЗначений;
	ТоварыВМС.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ТоварыВМС.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	ТоварыВМС.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		
		СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтрокаТовары.SSID);
		
		Если Не ЗначениеЗаполнено(СтрокаЗаявки) Тогда 
			ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
		Иначе
			НоваяСтрока = ТоварыВМС.Добавить();
			НоваяСтрока.СтрокаЗаявки = СтрокаЗаявки;
		КонецЕсли;
		
		НоваяСтрока.Количество = СтрокаТовары.КоличествоПринято;
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
		
	КонецЦикла;
	
	ТоварыВМС.Свернуть("Номенклатура,СтрокаЗаявки", "Количество");
	
	ДокументОбъект = ДокСсылка.ПолучитьОбъект();
	
	ТоварыСтарые 	= ДокументОбъект.Товары.Выгрузить();
	ТоварыНовые 	= ТоварыСтарые.СкопироватьКолонки();
	
	Для каждого стрТовары Из ТоварыВМС Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура,СтрокаЗаявки");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, стрТовары);
		
		СтрокиОстатка = ТоварыСтарые.НайтиСтроки(СтруктураОтбора);
		
		Распределить = стрТовары.Количество;
		
		Если СтрокиОстатка.Количество() = 0 Тогда
			ВызватьИсключение "Не найдена строка с номенклатурой "+СтруктураОтбора.Номенклатура+", строкой заявки " + СтруктураОтбора.СтрокаЗаявки;
		КонецЕсли;
		
		Для каждого СтрокаОстатка Из СтрокиОстатка Цикл
			
			Распределено = Мин(Распределить, СтрокаОстатка.КоличествоПлан);
			Если Распределено <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			
			НоваяСтрока = ТоварыНовые.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
			НоваяСтрока.Количество = Распределено;
			
			Распределить = Распределить - Распределено;
			СтрокаОстатка.Количество = СтрокаОстатка.Количество - Распределено;
			
		КонецЦикла;
		
		Если Распределить > 0 Тогда
			//Остаток кидаем на последнюю строку
			НоваяСтрока.Количество = НоваяСтрока.Количество + Распределить;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ТоварыНовые);
	ДокументОбъект.ПересчитатьСуммуТабличнойЧасти();
	ДокументОбъект.Дата = Дата;
	ДокументОбъект.ПометкаУдаления = Ложь;
	
	КодВозвратаЧисло = Число(ОбъектXDTO.КодВозврата);
	Если КодВозвратаЧисло = 0 Тогда
		ВызватьИсключение "Не указан код возврата!";
	КонецЕсли;
	ДокументОбъект.КодВозврата = Справочники.КодыВозврата.НайтиПоКоду(КодВозвратаЧисло);
	
	СкладВСообщении = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.СкладСсылка));
	Если Не ЗначениеЗаполнено(СкладВСообщении.СкладВозвратов) Тогда
		ВызватьИсключение "Для склада "+СкладВСообщении+" не указан склад возврата!";
	Иначе
		ДокументОбъект.Склад = СкладВСообщении.СкладВозвратов;
	КонецЕсли;
	
	СтарыйСтатус = СтатусДокумента;
	
	Если ДокументОбъект.Товары.Итог("Количество") = 0 Тогда
		ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ;
	Иначе
		ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят;
	КонецЕсли;
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НомерСообщения = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерСообщения);
		НомерПотока = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерПотока);
		РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокументОбъект.Ссылка, НомерСообщения, , , , Ложь, НомерПотока); 
		
	Исключение
		ДокументОбъект.СтатусДокумента = СтарыйСтатус;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаДокумент.Установить(ДокументОбъект.Ссылка);
		Стр = Набор.Добавить();
		Стр.СсылкаНаДокумент = ДокументОбъект.Ссылка;
		Набор.Записать(Истина);
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
	
КонецПроцедуры

