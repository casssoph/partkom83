////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	УстановкаЦенНоменклатурыКонтрагентов.Номер,
	|	УстановкаЦенНоменклатурыКонтрагентов.Дата,
	|	УстановкаЦенНоменклатурыКонтрагентов.Ответственный.Представление КАК ОтветственныйПредставление,
	|	ВЫБОР КОГДА УстановкаЦенНоменклатурыКонтрагентов.Контрагент.НаименованиеПолное ПОДОБНО """" ТОГДА
	|		УстановкаЦенНоменклатурыКонтрагентов.Контрагент.Наименование
	|	ИНАЧЕ
	|		УстановкаЦенНоменклатурыКонтрагентов.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеКонтрагента
	|ИЗ
	|	Документ.УстановкаЦенНоменклатурыКонтрагентов КАК УстановкаЦенНоменклатурыКонтрагентов
	|ГДЕ
	|	УстановкаЦенНоменклатурыКонтрагентов.Ссылка = &ТекущийДокумент
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	(УстановкаЦенНоменклатурыКонтрагентов.ИндексСтрокиТаблицыЦен + 1)              КАК НомерСтроки,
	|	УстановкаЦенНоменклатурыКонтрагентов.Номенклатура,
	|	УстановкаЦенНоменклатурыКонтрагентов.Номенклатура.НаименованиеПолное           КАК Товар,
	|	NULL                                                                           КАК Серия,
	|	УстановкаЦенНоменклатурыКонтрагентов.ТипЦен                                    КАК ТипЦен,
	|	УстановкаЦенНоменклатурыКонтрагентов.Цена,
	|	УстановкаЦенНоменклатурыКонтрагентов.ЕдиницаИзмерения.Представление            КАК ЕдиницаИзмерения,
	|	УстановкаЦенНоменклатурыКонтрагентов.Валюта,
	|	УстановкаЦенНоменклатурыКонтрагентов.Валюта.Представление                      КАК ВалютаПредставление
	|
	|ИЗ
	|	Документ.УстановкаЦенНоменклатурыКонтрагентов.Товары КАК УстановкаЦенНоменклатурыКонтрагентов
	|
	|ГДЕ
	|	УстановкаЦенНоменклатурыКонтрагентов.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	УстановкаЦенНоменклатурыКонтрагентов.ИндексСтрокиТаблицыЦен,
	|	УстановкаЦенНоменклатурыКонтрагентов.ТипЦен
	|
	|ИТОГИ
	|ПО УстановкаЦенНоменклатурыКонтрагентов.ИндексСтрокиТаблицыЦен
	|";

	ЗапросПоТоварам = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УстановкаЦенНоменклатурыКонтрагентов_ИзменениеЦен";

	Макет = ПолучитьМакет("ИзменениеЦен");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Изменение цен номенклатуры");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Контрагент");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьШапкаНоменклатура   = Макет.ПолучитьОбласть("ШапкаТаблицы|Номенклатура");
	ОбластьШапкаТипЦен         = Макет.ПолучитьОбласть("ШапкаТаблицы|Цена");
	ОбластьСтрокаНоменклатура  = Макет.ПолучитьОбласть("Строка|Номенклатура");
	ОбластьСтрокаТипЦен        = Макет.ПолучитьОбласть("Строка|Цена");
	ОбластьПодвалНоменклатура  = Макет.ПолучитьОбласть("Подписи|Номенклатура");
	ОбластьПодвалТипЦен        = Макет.ПолучитьОбласть("Подписи|Цена");

	// Выведем шапку
	ТабДокумент.Вывести(ОбластьШапкаНоменклатура);
	ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоСтрокам.Следующий() Тогда
		Выборка = ВыборкаПоСтрокам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьШапкаТипЦен.Параметры.Заполнить(Выборка);
			ТабДокумент.Присоединить(ОбластьШапкаТипЦен);
		КонецЦикла;
	КонецЕсли;

	// Выведем таблицу
	ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл
		НоменклатураВыведена = Ложь;
		Выборка = ВыборкаПоСтрокам.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ НоменклатураВыведена Тогда
				ОбластьСтрокаНоменклатура.Параметры.Заполнить(Выборка);
				ОбластьСтрокаНоменклатура.Параметры.Товар = СокрЛП(Выборка.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(Выборка);
				ТабДокумент.Вывести(ОбластьСтрокаНоменклатура);
				НоменклатураВыведена = Истина;
			КонецЕсли;
			ОбластьСтрокаТипЦен.Параметры.Заполнить(Выборка);
			ТабДокумент.Присоединить(ОбластьСтрокаТипЦен);
		КонецЦикла;
	КонецЦикла;

	// Выведем подвал
	ОбластьПодвалНоменклатура.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьПодвалНоменклатура);
	ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоСтрокам.Следующий() Тогда
		Выборка = ВыборкаПоСтрокам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТабДокумент.Присоединить(ОбластьПодвалТипЦен);
		КонецЦикла;
	КонецЕсли;

	ТекОбласть = ТабДокумент.Области.ОтветственныйПредставление;

	ОбластьОтветственного = ТабДокумент.Область(ТекОбласть.Низ, 14, ТекОбласть.Низ, Мин(ТабДокумент.ШиринаТаблицы, 27));
	ОбластьОтветственного.Объединить();
	ОбластьОтветственного.ГраницаСнизу            = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ОбластьОтветственного.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Форма = Неопределено) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ПереченьЦен" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПереченьЦен","Перечень цен");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Возвращает доступные табличные части для заполнения
//
// Возвращаемое значение:
//   Список значений с именами табличных частей
//
Функция ПолучитьТабличныеЧастиДляЗаполнения() Экспорт

	ТабличныеЧасти = Новый СписокЗначений;
	ТабличныеЧасти.Добавить("ТаблицаЦен", "Таблица цен");
	
	Возврат ТабличныеЧасти;

КонецФункции // ПолучитьТабличныеЧастиДляЗаполнения()


#КонецЕсли
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент,ПрайсПоставщика");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Общую процедуру проверки в этом документе звать нельзя, потому что номер строки в форме документа
	// отличается от системного.
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.ИндексСтрокиТаблицыЦен + 1) +
			                    """ табличной части для типа цен """ 
			                   + СокрЛП(СтрокаТаблицы.ТипЦен) + """ ";

		// Номенклатура.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена Номенклатура.", Отказ, Заголовок);;
		
		КонецЕсли;

		// Валюта.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Валюта) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена Валюта.", Отказ, Заголовок);;
		
		КонецЕсли;

		// Единица для товаров.
		Если (ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура))
		   И (Не СтрокаТаблицы.Услуга)
		   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена единица измерения.", Отказ, Заголовок);;

		
		КонецЕсли;

		// Наборов-пакетов здесь быть не должно.
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) 
		   И  СтрокаТаблицы.Набор Тогда

				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится набор-пакет. " +
				                   "Наборов-пакетов здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Документы.УстановкаЦенНоменклатурыКонтрагентов.ВыполнитьПроведение(Ссылка, Отказ);

КонецПроцедуры	// ОбработкаПроведения

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Информация = ТорговаяТочка.Наименование + "; " + ПрайсПоставщика.Наименование;
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
    	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

//загрузка из файла
Процедура ОбработатьФайлы(ИмяФайлаКаталога, ЗадаватьВопросОЧтенииДанных = Истина) Экспорт

	//Проверка корректности имени файла
	Если ПустаяСтрока(ИмяФайлаКаталога) Тогда
		#Если Клиент Тогда
			Предупреждение("Не указано имя файла данных! Чтение данных невозможно!");
		#КонецЕсли
		Возврат;
	КонецЕсли;

	#Если Клиент Тогда
		Если ЗадаватьВопросОЧтенииДанных Тогда
			Ответ = Вопрос("Прочитать данные из файла?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Загрузка данных");
			Если Ответ <> КодВозвратаДиалога.ОК Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	#КонецЕсли

	Источник = Новый Файл(ИмяФайлаКаталога);
	Если НЕ Источник.Существует() Тогда
		#Если Клиент Тогда
			Предупреждение("Некорректное имя файла или каталога! Чтение данных невозможно!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	//ОчиститьТаблицы();
	
	Если Источник.ЭтоФайл() Тогда
		
		Если Источник.Расширение = ".xls" ИЛИ Источник.Расширение = ".xlsx" Тогда
			ПрочитатьФайлXLS(Источник.ПолноеИмя);
		ИначеЕсли Источник.Расширение = ".xml" Тогда
			ПрочитатьФайлXML(Источник.ПолноеИмя);
		ИначеЕсли Источник.Расширение = ".csv" Тогда
			ПрочитатьТекстФайл(Источник.ПолноеИмя);
		Иначе
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Источник.ЭтоКаталог() Тогда
		
		СписокФайлов = НайтиФайлы(Источник.ПолноеИмя, "*.xml");
		Для Каждого ФайлДляЗагрузки Из СписокФайлов Цикл
			ПрочитатьФайлXML(ФайлДляЗагрузки.ПолноеИмя);
		КонецЦикла;
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПрочитатьФайлXLS(ИмяФайла)
	
	Таблица = Новый ТаблицаЗначений;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		#Если Клиент Тогда
			Состояние("Обработка файла Microsoft Excel...");
		#КонецЕсли
		
	Исключение
		#Если Клиент Тогда
			Сообщить("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!");
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Возврат;
		
	КонецПопытки;
	
	Попытка
		//Открываем необходимый лист
		Excel.Sheets(1).Select(); // лист 1, по умолчанию
		
	Исключение
		//Закрываем Excel
		Excel.ActiveWorkbook.Close();
		Excel = 0;
		#Если Клиент Тогда
			Сообщить("Файл "+Строка(ИмяФайла)+" не соответствует необходимому формату! Первый лист не найден!");
		#КонецЕсли
		ОтменитьТранзакцию();
		Возврат;
		
	КонецПопытки;
	
	Версия = Лев(Excel.Version,Найти(Excel.Version,".")-1);
	Если Версия = "8" тогда
		ФайлСтрок = Excel.Cells.CurrentRegion.Rows.Count;
		ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
		
	Иначе
		ФайлСтрок = Excel.Cells(1,1).SpecialCells(11).Row;
		ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;
		
	Конецесли;
	
	//считываем первую строку и генерируем колонки
	Сч = 1;
	Пока ЗначениеЗаполнено(Excel.Cells(1, Сч).Text) Цикл
		ИмяКолонки = Excel.Cells(1, Сч).Text;
		ИмяБезПробелов = СтрЗаменить(ИмяКолонки," ",""); // убираем из имени колонок пробелы
		Таблица.Колонки.Добавить(ИмяБезПробелов,,ИмяКолонки);
		НоваяКолонка = Таблица.Колонки.Добавить(ИмяБезПробелов, ИмяКолонки);
		НоваяКолонка.Данные = ИмяБезПробелов;
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Для НС = 2 по ФайлСтрок Цикл // НС указываем с какой строки начинать обработку
		#Если Клиент Тогда
			Состояние("Файл "+Строка(ИмяФайла)+": Обрабатывается первый лист "+Строка(Формат(?(ФайлСтрок=0,0,((100*НС)/ФайлСтрок)),"ЧЦ=3; ЧДЦ=0"))+" %");
			ОбработкаПрерыванияПользователя(); //указав данный оператор, цикл можно прервать в любой момент нажатие ctrl+break
		#КонецЕсли
		
		НоваяСтрока = Таблица.Добавить();

		Для НомерКолонки = 1 по Таблица.Колонки.Количество() Цикл
			//заполняем строку значениями
			ТекущееЗначение = Excel.Cells(НС, НомерКолонки).Text;
			ИмяКолонки = Таблица.Колонки[НомерКолонки-1].Имя;
			НоваяСтрока[ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;

	КонецЦикла;
	
	Если Таблица.Количество() > 0 тогда
		ОбработатьЗагруженныеДанные(Таблица);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьФайлXML(ИмяФайла)

	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		
		Пока ОбъектXML.Прочитать() Цикл

			ТипУзла = ОбъектXML.ТипУзла;
			ИмяУзла = ОбъектXML.Имя;

			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ПолноеИмяУровня = СокрЛП(ИмяУзла) +"_" + ПолноеИмяУровня;
				ОбработатьЭлемент(ОбъектXML, ПолноеИмяУровня);

			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				ПозицияРазделителя = Найти(ПолноеИмяУровня, "_");
				Если ПозицияРазделителя Тогда
					ПолноеИмяУровня = Сред(ПолноеИмяУровня, ПозицияРазделителя + 1);
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
	Исключение
		ОписаниеОшибкиЗаписи = ОписаниеОшибки();
		ОбъектXML.Закрыть();		
		#Если клиент тогда
		Сообщить("Возникла ошибка при чтении данных для обмена: " + Символы.ПС + ОписаниеОшибкиЗаписи, СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецПопытки;
	
	ОбъектXML.Закрыть();

КонецПроцедуры

Процедура ПрочитатьТекстФайл(ИмяФайла)
	Таблица = Новый ТаблицаЗначений;
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(ИмяФайла);
	
	Шапка = ЗагружаемыйФайл.ПолучитьСтроку(1);//шапка по умолчанию первая строчка
	
	Разделитель = ";";
	
	МассивКол = Новый Массив;
	МассивКол.Добавить("Артикул");
	МассивКол.Добавить("Изготовитель");
	МассивКол.Добавить("Цена");
	МассивКол.Добавить("КодПоставщика");
	//МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Шапка,Разделитель);
	
	Для Каждого ИмяСтолбца Из МассивКол Цикл
		
		Таблица.Колонки.Добавить(ИмяСтолбца);
		//ИмяБезПробелов = СтрЗаменить(ИмяСтолбца," ",""); // убираем из имени пробелы
		//Таблица.Колонки.Добавить(ИмяБезПробелов);
		//НовыйСтолбец = Таблица.Колонки.Добавить(ИмяБезПробелов, ИмяСтолбца);
		//НовыйСтолбец.Данные = ИмяБезПробелов;

	КонецЦикла;
	
	Для НомерСтроки = 1 по ЗагружаемыйФайл.КоличествоСтрок() Цикл
		
		#Если Клиент Тогда
			Состояние("Обрабатывается "+Строка(Формат(?(ЗагружаемыйФайл.КоличествоСтрок()=0,0,((100*НомерСтроки)/ЗагружаемыйФайл.КоличествоСтрок())),"ЧЦ=3; ЧДЦ=0"))+" %");
			ОбработкаПрерыванияПользователя(); //указав данный оператор, цикл можно прервать в любой момент нажатие ctrl+break
		#КонецЕсли
			
		// получить стрoку с указанным номером и преобразуем её в массив
		Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель);
		НоваяСтрочка= Таблица.Добавить();
		
		Если МассивКол.Количество() <> Таблица.Колонки.Количество() Тогда
			Продолжить; // скорее всего в тексте содержит разделитель
		КонецЕсли;

		Для НомерСтолбца= 1 по МассивКол.Количество() Цикл
			//заполняем строчку значениями
			ТекущееЗначение = МассивКол[НомерСтолбца-1];
			ИмяКолонки = Таблица.Колонки[НомерСтолбца-1].Имя;
			НоваяСтрочка[ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;

	КонецЦикла;
	
	Если Таблица.Количество() > 0 тогда
		ОбработатьЗагруженныеДанные(Таблица);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиТоварПоАртикулу(вхАртикул)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул"
	);
	Запрос.УстановитьПараметр("Артикул", вхАртикул);
	ТабЗ = запрос.Выполнить().Выгрузить();
	Если ТабЗ.Количество() > 0 Тогда
		Возврат ТабЗ[0].Ссылка;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьЗагруженныеДанные(ЗагрТаблица) Экспорт
	Товары.Очистить();
	Для Каждого Стр Из ЗагрТаблица Цикл
		ном = НайтиТоварПоАртикулу(Стр[0]);
		Если ном <> Неопределено Тогда
			нс = Товары.Добавить();
			нс.Номенклатура = ном;
			Попытка
				нс.Цена = Число(Стр[2]);
			Исключение
				//Товары.Удалить(нс.НомерСтроки);
				Продолжить;
			КонецПопытки;
			нс.ЕдиницаИзмерения = нс.Номенклатура.ЕдиницаХраненияОстатков;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЭлемент(ОбъектXML, Ключ)
	
КонецПроцедуры
