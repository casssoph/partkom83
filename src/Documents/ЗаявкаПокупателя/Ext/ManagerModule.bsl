
//// ОБРАБОТЧИКИ МОДУЛЯ ОБЪЕКТА

Процедура ВыполнитьПроведение(вхОбъект, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	Документы.КорректировкаЗаявкиПокупателя.ВыполнитьПроведение(вхОбъект, вхОтказ, вхПараметры);
	
КонецПроцедуры

Процедура ВыполнитьОтменуПроведения(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	Документы.КорректировкаЗаявкиПокупателя.ВыполнитьОтменуПроведения(вхСсылкаНаДокумент, вхОтказ, вхПараметры);
	
КонецПроцедуры

//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьПоследнийДокументКорректировки(вхСсылкаНаДокумент) Экспорт
	
	Если Не ЗначениеЗаполнено(вхСсылкаНаДокумент) Тогда
		Возврат вхСсылкаНаДокумент
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаЗаявки.Ссылка
	|ИЗ
	|	Документ.КорректировкаЗаявкиПокупателя КАК КорректировкаЗаявки
	|ГДЕ
	|	КорректировкаЗаявки.Проведен
	|	И КорректировкаЗаявки.ДокументОснование = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаЗаявки.МоментВремени УБЫВ");
	Если ТипЗнч(вхСсылкаНаДокумент) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда
		Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	ИначеЕсли ТипЗнч(вхСсылкаНаДокумент) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда
		Запрос.УстановитьПараметр("Ссылка", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДокументОснование"));
	Иначе
		Возврат вхСсылкаНаДокумент
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат вхСсылкаНаДокумент
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка
		
	КонецЕсли;
	
КонецФункции

Функция ЕстьИзмененияДокумента(вхСсылкаНаДокумент, вхОбъект) Экспорт
	
	//ЕстьИзмененияПоДокументу = Ложь;
	
	МассивИсключаемыхРеквизитов = Новый Массив;
	МассивИсключаемыхРеквизитов.Добавить("ДокументОснование"); //В документе заявка и корректировка несут разный смысл
	МассивИсключаемыхРеквизитов.Добавить("Подтверждена"); //По данному реквизиту изменения расчитываются по статусу документа
	МассивИсключаемыхРеквизитов.Добавить("Ответственный"); 
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаЗаявки.Ссылка,
	|	КорректировкаЗаявки.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.КорректировкаЗаявкиПокупателя КАК КорректировкаЗаявки
	|ГДЕ
	|	КорректировкаЗаявки.Проведен
	|	И КорректировкаЗаявки.ДокументОснование = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ");
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПредыдущийДокумент = Выборка.Ссылка;
	Иначе
		ПредыдущийДокумент = вхСсылкаНаДокумент;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из вхОбъект.Метаданные().Реквизиты Цикл
		Если МассивИсключаемыхРеквизитов.Найти(ТекРеквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПредыдущийДокумент[ТекРеквизит.Имя] = вхОбъект[ТекРеквизит.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекТабЧасть Из вхОбъект.Метаданные().ТабличныеЧасти Цикл
		
		Если Не ПредыдущийДокумент[ТекТабЧасть.Имя].Количество() = вхОбъект[ТекТабЧасть.Имя].Количество() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ПредыдущийДокумент[ТекТабЧасть.Имя] Цикл
			
			ИндексТекущейСтроки = ПредыдущийДокумент[ТекТабЧасть.Имя].Индекс(ТекСтрока);
			СтрокаДокумента = вхОбъект[ТекТабЧасть.Имя].Получить(ИндексТекущейСтроки);
			Для Каждого ТекРеквизит Из ТекТабЧасть.Реквизиты Цикл
				Если Не ТекСтрока[ТекРеквизит.Имя] = СтрокаДокумента[ТекРеквизит.Имя] Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Обновление ссылки на последнюю корректировку в идентификаторах заявок
//
// Параметры:
//  вхСсылкаНаДокумент  - <ДокументСсылка.ЗаявкаПокупателя, ДокументСсылка.КорректировкаЗаявкиПокупателя> - ссылка на документ, в котором нужно обновить данные
//                 
//
Процедура ОбновитьПоследнююКорректировку(Знач вхСсылкаНаДокумент) Экспорт
	
	Если ТипЗнч(вхСсылкаНаДокумент) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда
		вхСсылкаНаДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "ДокументОснование");
	КонецЕсли;
	
	Если Не ТипЗнч(вхСсылкаНаДокумент) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	ПоследняяКорректировка = ПолучитьПоследнийДокументКорректировки(вхСсылкаНаДокумент);
	СостояниеЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследняяКорректировка, "СтатусДокумента");
	
	Если ТипЗнч(ПоследняяКорректировка) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда 
		ПоследняяКорректировка = Документы.КорректировкаЗаявкиПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ПоследняяКорректировка", ПоследняяКорректировка);
	Запрос.УстановитьПараметр("СостояниеЗаявки", СостояниеЗаявки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИдентификаторыСтрокЗаявок.Ссылка
	               |ИЗ
	               |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	               |ГДЕ
	               |	ИдентификаторыСтрокЗаявок.Заявка = &Заявка
	               |	И НЕ ИдентификаторыСтрокЗаявок.ПометкаУдаления
	               |	И (ИдентификаторыСтрокЗаявок.ПоследняяКорректировка <> &ПоследняяКорректировка
	               |			ИЛИ ИдентификаторыСтрокЗаявок.СостояниеЗаявки <> &СостояниеЗаявки)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		лОбъект = Выборка.Ссылка.ПолучитьОбъект();
		лОбъект.ПоследняяКорректировка = ПоследняяКорректировка;
		лОбъект.СостояниеЗаявки = СостояниеЗаявки;
		лОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивОбязательныхРеквизитов(ВидОперации) Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкаПокупателя.ЗаявкаПокупателя Тогда
		СписокЗначений.Добавить("Контрагент", "Контрагент");
		СписокЗначений.Добавить("ДоговорКонтрагента", "Договор контрагента");
		СписокЗначений.Добавить("ТорговаяТочка", "Торговая точка");
		СписокЗначений.Добавить("МаршрутДоставки", "Маршрут доставки");
	КонецЕсли;
	СписокЗначений.Добавить("Организация", "Организация");
	СписокЗначений.Добавить("Склад", "Склад");
	//СписокЗначений.Добавить("МаршрутДоставки", "Маршрут доставки");

	Возврат СписокЗначений
	
КонецФункции

Процедура ЗакрытьЗаявкиПокупателей() Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкиПокупателейОстатки.СтрокаЗаявки.Заявка КАК Заявка,
	               |	ЗаявкиПокупателейОстатки.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ЗаявкиПокупателейОстатки.КоличествоОстаток КАК Количество
	               |ПОМЕСТИТЬ втСтрокиЗаявок
	               |ИЗ
	               |	РегистрНакопления.ЗаявкиПокупателей.Остатки КАК ЗаявкиПокупателейОстатки
	               |ГДЕ
	               |	ЗаявкиПокупателейОстатки.КоличествоОстаток > 0
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПродажиОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ПродажиОбороты.КоличествоОборот КАК Количество
	               |ПОМЕСТИТЬ втВыполнено
	               |ИЗ
	               |	РегистрНакопления.Продажи.Обороты(
	               |			,
	               |			,
	               |			,
	               |			СтрокаЗаявки В
	               |				(ВЫБРАТЬ
	               |					втСтрокиЗаявок.СтрокаЗаявки
	               |				ИЗ
	               |					втСтрокиЗаявок)) КАК ПродажиОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПополнениеСкладаОбороты.СтрокаЗаявки,
	               |	ПополнениеСкладаОбороты.КоличествоОборот
	               |ИЗ
	               |	РегистрНакопления.ПополнениеСклада.Обороты(
	               |			,
	               |			,
	               |			,
	               |			СтрокаЗаявки В
	               |				(ВЫБРАТЬ
	               |					втСтрокиЗаявок.СтрокаЗаявки
	               |				ИЗ
	               |					втСтрокиЗаявок)) КАК ПополнениеСкладаОбороты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтказыПоЗаявкамОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	               |	ОтказыПоЗаявкамОбороты.КоличествоОборот КАК Количество
	               |ПОМЕСТИТЬ втОтказы
	               |ИЗ
	               |	РегистрНакопления.ОтказыПоЗаявкам.Обороты(
	               |			,
	               |			,
	               |			,
	               |			СтрокаЗаявки В
	               |				(ВЫБРАТЬ
	               |					втСтрокиЗаявок.СтрокаЗаявки
	               |				ИЗ
	               |					втСтрокиЗаявок)) КАК ОтказыПоЗаявкамОбороты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтрокаЗаявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втСтрокиЗаявок.Заявка
	               |ПОМЕСТИТЬ втЗаявкиНеЗакр
	               |ИЗ
	               |	втСтрокиЗаявок КАК втСтрокиЗаявок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втВыполнено КАК втВыполнено
	               |		ПО втСтрокиЗаявок.СтрокаЗаявки = втВыполнено.СтрокаЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
	               |		ПО втСтрокиЗаявок.СтрокаЗаявки = втОтказы.СтрокаЗаявки
	               |ГДЕ
	               |	втСтрокиЗаявок.Количество > ЕСТЬNULL(втВыполнено.Количество, 0) + ЕСТЬNULL(втОтказы.Количество, 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втСтрокиЗаявок.Заявка КАК Заявка
	               |ПОМЕСТИТЬ втПотенцЗаявки
	               |ИЗ
	               |	втСтрокиЗаявок КАК втСтрокиЗаявок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ втВыполнено
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ втОтказы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ втСтрокиЗаявок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 99999
	               |	втПотенцЗаявки.Заявка КАК Документ
	               |ИЗ
	               |	втПотенцЗаявки КАК втПотенцЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЗаявкиНеЗакр КАК втЗаявкиНеЗакр
	               |		ПО втПотенцЗаявки.Заявка = втЗаявкиНеЗакр.Заявка
	               |ГДЕ
	               |	втЗаявкиНеЗакр.Заявка ЕСТЬ NULL
	               |	И (ВЫРАЗИТЬ(втПотенцЗаявки.Заявка КАК Документ.ЗаявкаПокупателя)) <> &ПустаяЗаявка";
		Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
		
		ПрекратитьВыполнение = Ложь;		   
		Пока Не ПрекратитьВыполнение Цикл 
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); 
				РезультатЗапроса = Запрос.Выполнить();
			ЗафиксироватьТранзакцию();
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический); 
			Если Не РезультатЗапроса.Пустой() Тогда 
				Таблица = РезультатЗапроса.Выгрузить();
				Документ = Документы.ЗакрытиеЗаявокПокупателя.СоздатьДокумент();
				Документ.Заявки.Загрузить(Таблица);
				Документ.Дата = ТекущаяДата();
				Документ.Ответственный = ПолныеПрава.ТекущийПользователь();
				Документ.Организация = Константы.ОрганизацияПоУмолчаниюБезнал.Получить();
				Попытка
					Документ.Записать(РежимЗаписиДокумента.Проведение);
					ЗафиксироватьТранзакцию();
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					#Если Клиент Тогда 
						Сообщить(ОписаниеОшибки);
					#КонецЕсли
					ЗаписьЖурналаРегистрации("Закрытие заявок", ,,,ОписаниеОшибки);
					ПрекратитьВыполнение = Истина;
					ОтменитьТранзакцию();
				КонецПопытки;
			Иначе
				ПрекратитьВыполнение = Истина;
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 99999
		               |	ЗаявкиПокупателейОстатки.СтрокаЗаявки.Заявка КАК Документ
		               |ИЗ
		               |	РегистрНакопления.ЗаявкиПокупателей.Остатки КАК ЗаявкиПокупателейОстатки
		               |ГДЕ
		               |	ЗаявкиПокупателейОстатки.КоличествоОстаток = 0
		               |	И ЗаявкиПокупателейОстатки.СуммаРеглОстаток <> 0
		               |	И ЗаявкиПокупателейОстатки.СуммаУпрОстаток <> 0";
		ПрекратитьВыполнение = Ложь;		   
		Пока Не ПрекратитьВыполнение Цикл 
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);  
				РезультатЗапроса = Запрос.Выполнить();
			ЗафиксироватьТранзакцию();
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический); 
			Если Не РезультатЗапроса.Пустой() Тогда 
				Таблица = РезультатЗапроса.Выгрузить();
				Документ = Документы.ЗакрытиеЗаявокПокупателя.СоздатьДокумент();
				Документ.Заявки.Загрузить(Таблица);
				Документ.Дата = ТекущаяДата();
				Документ.Ответственный = ПолныеПрава.ТекущийПользователь();
				Документ.Организация = Константы.ОрганизацияПоУмолчаниюБезнал.Получить();
				Документ.Комментарий = "Коррекция ненулевых сумм";
				Попытка
					Документ.Записать(РежимЗаписиДокумента.Проведение);
					ЗафиксироватьТранзакцию();
				Исключение
					ПрекратитьВыполнение = Истина;
					ОтменитьТранзакцию();
				КонецПопытки;
			Иначе
				ПрекратитьВыполнение = Истина;
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	РезервыТоваровОстатки.СтрокаЗаявки.Заявка КАК Заявка,
		               |	РезервыТоваровОстатки.Номенклатура,
		               |	РезервыТоваровОстатки.Склад,
		               |	РезервыТоваровОстатки.Качество,
		               |	РезервыТоваровОстатки.СтрокаЗаявки,
		               |	РезервыТоваровОстатки.СтрокаПрихода
		               |ПОМЕСТИТЬ вт
		               |ИЗ
		               |	РегистрНакопления.РезервыТоваров.Остатки(, ЕСТЬNULL(СтрокаЗаявки.Заявка, &ПустаяЗаявка) <> &ПустаяЗаявка) КАК РезервыТоваровОстатки
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Заявка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 99999
		               |	вт.Заявка КАК Документ
		               |ИЗ
		               |	вт КАК вт
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеЗаявокПокупателя.Заявки КАК ЗакрытиеЗаявокПокупателяЗаявки
		               |		ПО вт.Заявка = ЗакрытиеЗаявокПокупателяЗаявки.Документ
		               |ГДЕ
		               |	ЗакрытиеЗаявокПокупателяЗаявки.Ссылка.Проведен";
		Запрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
		ПрекратитьВыполнение = Ложь;		   
		Пока Не ПрекратитьВыполнение Цикл 
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);  
				РезультатЗапроса = Запрос.Выполнить();
			ЗафиксироватьТранзакцию();
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический); 
			Если Не РезультатЗапроса.Пустой() Тогда 
				Таблица = РезультатЗапроса.Выгрузить();
				Документ = Документы.ЗакрытиеЗаявокПокупателя.СоздатьДокумент();
				Документ.Заявки.Загрузить(Таблица);
				Документ.Дата = ТекущаяДата();
				Документ.Ответственный = ПолныеПрава.ТекущийПользователь();
				Документ.Организация = Константы.ОрганизацияПоУмолчаниюБезнал.Получить();
				Документ.Комментарий = "Коррекция резервов";
				Попытка
					Документ.Записать(РежимЗаписиДокумента.Проведение);
					ЗафиксироватьТранзакцию();
				Исключение
					ПрекратитьВыполнение = Истина;
					ОтменитьТранзакцию();
				КонецПопытки;
			Иначе
				ПрекратитьВыполнение = Истина;
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		КонецЦикла;
КонецПроцедуры // ЗакрытьЗаявкиПокупателей()

Процедура ЗаполнитьЗаявкуПриОбмене(ДокументОбъект, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда 
		Параметры = Новый Структура;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Параметры);
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.СтатусДокумента) Тогда 
		ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ЗаявкаПокупателяПодтвержден;	
	КонецЕсли;
	
	Если ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ЗаявкаПокупателяПодтвержден Тогда 
		ДокументОбъект.Подтверждена = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Организации.ОсновнойБанковскийСчет
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			ДокументОбъект.БанковскийСчет = Выборка.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда 
		ДокументОбъект.ВалютаДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.ДоговорКонтрагента, "ВалютаВзаиморасчетов"); 	
		ВалютаРубль = Константы.ВалютаРубль.Получить();
		
		Дата = ?(ЗначениеЗаполнено(ДокументОбъект.Дата),ДокументОбъект.Дата, ТекущаяДата());
		Если ДокументОбъект.ВалютаДокумента = ВалютаРубль Тогда 
			ДокументОбъект.КурсВзаиморасчетов = 1;
			ДокументОбъект.КратностьВзаиморасчетов = 1;	
		Иначе
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ТекущаяДата());
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурса.Курс;
			ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурса.Кратность;	
		КонецЕсли;
	КонецЕсли;
	
	
	ДокументОбъект.УчитыватьНДС = Истина;
	ДокументОбъект.СуммаВключаетНДС = Истина;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ответственный) Тогда 
		ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Менеджер) Тогда 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТорговаяТочка", ДокументОбъект.ТорговаяТочка);
		Запрос.УстановитьПараметр("ВидМенеджера", Перечисления.ВидыМенеджеров.Продажи);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Р.Менеджер
		|ИЗ
		|	РегистрСведений.МенеджерыТорговыхТочек.СрезПоследних(
		|			,
		|			ТорговаяТочка = &ТорговаяТочка
		|				И ВидМенеджера = &ВидМенеджера) КАК Р";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			ДокументОбъект.Менеджер = Выборка.Менеджер;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.Контрагент, "Организация") = ДокументОбъект.Организация Тогда 
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкаПокупателя.ПополнениеСклада;
	Иначе
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаявкаПокупателя.ЗаявкаПокупателя;
	КонецЕсли;
	
	КлючСвязи = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл 
		
		НовыйИдентификатор = Справочники.ИдентификаторыСтрокЗаявок.СоздатьЭлемент();
		НовыйИдентификатор.Наименование = ДокументОбъект.Номер + "; " + СтрокаТабличнойЧасти.Номенклатура.Наименование + "; " + СтрокаТабличнойЧасти.Цена;
		НовыйИдентификатор.Заявка = ДокументОбъект.Ссылка;
		ЗаполнитьЗначенияСвойств(НовыйИдентификатор, СтрокаТабличнойЧасти, "IDSite,ПрайсПоставщика,СрокГарантированный,СрокОжидаемый,СрокГарантированныйЗаказа,СрокОжидаемыйЗаказа,Цена,ЦенаЗакупки,Количество,Поставщик");
		//Сергеев. Проблема в различии типов (ТТ и Контрагент), пока не меняем ни где, подменяем объект.
		НовыйИдентификатор.Поставщик=СтрокаТабличнойЧасти.Поставщик.Владелец;
		//
		НовыйИдентификатор.Записать();
		
		СтрокаТабличнойЧасти.СтрокаЗаявки = НовыйИдентификатор.Ссылка;
		СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
		
		СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;
		
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
	
КонецПроцедуры
