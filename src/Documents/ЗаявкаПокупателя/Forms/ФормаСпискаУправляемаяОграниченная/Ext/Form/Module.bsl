
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_ПриОткрытии";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	// ЛНА, Замер  APDEX ++(
	//APDEX_ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ЗаявкаПокупателя_ОткрытиеФормыСписка");
	//)--
	
	
	//// ЛНА, Альтернатива проблемной форме
	//Если ПараметрыСеанса.ТекущийПользователь.ОтладкаФормы = Истина Тогда
	//	Отказ = Истина;
	//	
	//	ПолучитьФорму("Документ.ЗаявкаПокупателя.Форма.ФормаСписка").Открыть();
	//КонецЕсли;
	
	//ХудинВВ 27032019 XX-2098
	ИспользоватьРасширенныеФормыСписков = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	"ИспользоватьРасширенныеФормыСписков");
	Если ИспользоватьРасширенныеФормыСписков = Истина Тогда
		ОткрытьФорму("Документ.ЗаявкаПокупателя.Форма.ФормаСпискаУправляемая");
		ЭтаФорма.Закрыть();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодчиненности(Команда)
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_СтруктураПодчиненности";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		//РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(Элементы.Список.ТекущаяСтрока));
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДокумента(Команда)
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_ДвиженияДокумента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		ОткрытьФорму("Отчет.ОтчетПоДвижениямДокумента.Форма", Новый Структура("Документ,СпособВыводаОтчета", Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(Элементы.Список.ТекущаяСтрока), "ПоВертикали"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияДокумента(Команда)
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_ИсторияДокумента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		ФормаСравненияКорректировок = Обработки.ИсторияДокумента.ПолучитьФорму("ФормаСравненияКорректировок");
		ФормаСравненияКорректировок.Документ = Элементы.Список.ТекущаяСтрока;
		ФормаСравненияКорректировок.ТолькоИзменения = Истина;
		ФормаСравненияКорректировок.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНомеру(Команда)
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_ПоискПоНомеру";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Номер = "";
	Если Не ВвестиЗначение(Номер, "Введите номер заявки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(11, ДопустимаяДлина.Фиксированная))) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(Номер) < 11 Тогда 
		Номер=Лев(Номер,4)+"0"+Сред(Номер,5);
	КонецЕсли;	
	
	Если СтрДлина(Номер) < 11 Тогда 
		Предупреждение("Введите 11-значный номер", 5);
		Возврат;
	КонецЕсли;
	
	ОтключитьОтборыСписка();
	
	ИскомыйЭлементОтбора = Неопределено;
	
	Для Каждого ЭлтОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл 
		Если ТипЗнч(ЭлтОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлтОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номер") Тогда
			ИскомыйЭлементОтбора = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлтОтбора.ИдентификаторПользовательскойНастройки);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИскомыйЭлементОтбора = Неопределено Тогда 
		ИскомыйЭлементОтбора = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИскомыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номер");
	КонецЕсли;
	
	ИскомыйЭлементОтбора.ПравоеЗначение = Номер;
	ИскомыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ИскомыйЭлементОтбора.Использование = Истина;
	Для Каждого Стр Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Попытка
			Для Каждого СТРР Из Стр.Элементы Цикл
				СТРР.Использование=ЛОжь;
			КонецЦикла;
		Исключение
		КонецПопытки;	
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборыСписка()
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_ОтключитьОтборыСписка";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Для Каждого ЭлтОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл 
		ЭлтОтбора.Использование = Ложь;
	КонецЦикла;
	Для Каждого ЭлтОтбора Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл 
		Если ТипЗнч(ЭлтОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭлтОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_ПриСозданииНаСервере";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	НеОграничиватьПериодВФормахСписков = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	"НеОграничиватьПериодВФормахСписков");
	
	Если НеОграничиватьПериодВФормахСписков = Ложь Тогда
		ОбщегоНазначения.УстановитьПериодДинамическогоСпискаПоУмолчанию(Элементы.Список);
	КонецЕсли;
	
	МассивЗапрещенныхПолейГруппировки = Новый Массив;
	Для каждого ЭлГруппировки ИЗ Список.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
		МассивЗапрещенныхПолейГруппировки.Добавить(Строка(ЭлГруппировки.Поле));
	КонецЦикла;
	Список.УстановитьОграниченияИспользованияВГруппировке(МассивЗапрещенныхПолейГруппировки);
	
	МассивЗапрещенныхПолейПорядка = Новый Массив;
	Для каждого ЭлПорядка ИЗ Список.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.Элементы Цикл
		МассивЗапрещенныхПолейПорядка.Добавить(Строка(ЭлПорядка.Поле));
	КонецЦикла;
	Список.УстановитьОграниченияИспользованияВПорядке(МассивЗапрещенныхПолейПорядка);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоSiteID(Команда)
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_ПоискПоSiteID";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	SiteID = "";
	МинимальнаяДлинаПоля = 6;
	
	Если Не ВвестиЗначение(SiteID, "Введите SiteID(от " + МинимальнаяДлинаПоля + " символов)", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(40, ДопустимаяДлина.Переменная))) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(SiteID) < МинимальнаяДлинаПоля Тогда
		Предупреждение("Минимальная длина поля: " + МинимальнаяДлинаПоля + " символов ");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИдентификаторыСтрокЗаявок.Ссылка
	                      |ИЗ
	                      |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                      |ГДЕ
	                      |	ИдентификаторыСтрокЗаявок.IDSite ПОДОБНО ""%"" + &IDSite + ""%""");

	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтрокЗаявок(Команда)
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_ИсторияСтрокЗаявок";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		Отчет = Отчеты.ИсторияВыгрузкиНаСайтИсторииСтрокЗаявок.Создать();
		Отчет.ДокументЗаявки = Элементы.Список.ТекущаяСтрока;
		Отчет.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыгрузитьИсториюСтрокЗаявок(Команда)
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_ВыгрузитьИсториюСтрокЗаявок";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		ВыгрузитьИсториюСтрокЗаявокСервер(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ВыгрузитьИсториюСтрокЗаявокСервер(Заявка)
	лКлючАлгоритма = "Документ_ЗявкаПокупателя_ФормаСпискаУправляемаяОграниченная_ВыгрузитьИсториюСтрокЗаявокСервер";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаявкаПокупателяТовары.СтрокаЗаявки
	                      |ПОМЕСТИТЬ СтрокиЗаявок
	                      |ИЗ
	                      |	Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
	                      |ГДЕ
	                      |	ЗаявкаПокупателяТовары.Ссылка = &Заявка
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки
	                      |ИЗ
	                      |	Документ.КорректировкаЗаявкиПокупателя.Товары КАК КорректировкаЗаявкиПокупателяТовары
	                      |ГДЕ
	                      |	КорректировкаЗаявкиПокупателяТовары.Ссылка.ДокументОснование = &Заявка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	СтрокиЗаявок.СтрокаЗаявки
	                      |ИЗ
	                      |	СтрокиЗаявок КАК СтрокиЗаявок");
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений._ИсторияСтрокЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СтрокаЗаявки.Установить(Выборка.СтрокаЗаявки);
		НаборЗаписей.Прочитать();
		Для Каждого Строка Из НаборЗаписей Цикл
			Строка.НомерСообщенияОтправленного = 0;
			Строка.ДатаОтправки = '00010101';
			Строка.ПолученоСайтом = Ложь;
			Строка.ДатаОбработкиСайтом = '00010101';
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПолнуюФормуСписка(Команда)
КонецПроцедуры



//Процедура УстановитьПериодДинамическогоСпискаПоУмолчанию(ЭлСписок)
//	 ПериодСписка = новый СтандартныйПериод;
//	 ПериодСписка.ДатаНачала = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), - 1));
//	 ПериодСписка.ДатаОкончания = КонецМесяца(ТекущаяДата()) ;
//	 ЭлСписок.Период = ПериодСписка;	
//КонецПроцедуры	

