
//// ОБРАБОТЧИКИ МОДУЛЯ ОБЪЕКТА

Процедура ВыполнитьПроведение(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_ОтказПоставщикаВВозврате_МодульМенеджера_ВыполнитьПроведение";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	лКонтроль = Неопределено;
	лФильтр = Неопределено;
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ДанныеОбъекта.Контроль", лКонтроль);
	ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "Фильтр", лФильтр);	

	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ТоварыНаСкладах") тогда
		ОбщегоНазначения.ЗаписатьДвиженияДокумента(вхСсылкаНаДокумент, "ТоварыНаСкладах",
		РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры));
	КонецЕсли;
	
	Если ПроведениеДокументовКлиентСервер.ПроводитсяПо(вхПараметры, "ПартииТоваров") тогда
		// регистр накопления "ПартииТоваров"
		
		НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		
		лБазовая = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров);	
		
		лРазделенныеБазовая = РаботаСПоследовательностямиКлиентСервер.РазделенныеДанные(лБазовая, лФильтр);
		лИсходная = лРазделенныеБазовая.Включенные;
								
		лТребуемая = РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры, лФильтр);
				
		лРазностныеДанные = РаботаСПоследовательностямиКлиентСервер.РазностныеДанные(лИсходная, лТребуемая); 
		ПроведениеДокументовКлиентСервер.ЗаписатьДвижения(вхСсылкаНаДокумент, Метаданные.РегистрыНакопления.ПартииТоваров,
		лРазностныеДанные, лРазделенныеБазовая.Исключенные);
		
		ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
		Если лФильтр = Неопределено Тогда 
			РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьОтменуПроведения(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_ОтказПоставщикаВВозврате_МодульМенеджера_ВыполнитьОтменуПроведения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	ПроведениеДокументовКлиентСервер.ОчиститьДвиженияДокумента(вхСсылкаНаДокумент);
	ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, Метаданные.Последовательности.ПартионныйУчет, вхПараметры);
	
	РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(вхСсылкаНаДокумент, "ПартионныйУчет", Ложь);
КонецПроцедуры

//// ТАБЛИЦЫ ДВИЖЕНИЙ ДОКУМЕНТОВ

Функция СформироватьТаблицуТоваровДокумента(вхСсылкаНаДокумент, вхПараметры)
	
	лКлючАлгоритма = "Документ_ОтказПоставщикаВВозврате_МодульМенеджера_СформироватьТаблицуТоваровДокумента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ВидДвижения,
	|	ОтказПоставщикаВВозвратеТовары.Ссылка КАК Регистратор,
	|	ОтказПоставщикаВВозвратеТовары.Ссылка.Дата КАК Период,
	|	ОтказПоставщикаВВозвратеТовары.Ссылка.Склад КАК Склад,
	|	ОтказПоставщикаВВозвратеТовары.Номенклатура,
	|	ОтказПоставщикаВВозвратеТовары.Качество,
	|	ОтказПоставщикаВВозвратеТовары.СтрокаПрихода КАК СтрокаПрихода,
	|	ОтказПоставщикаВВозвратеТовары.Количество,
	|	ОтказПоставщикаВВозвратеТовары.СтрокаПрихода.ТорговаяТочка КАК ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА ОтказПоставщикаВВозвратеТовары.Ссылка.ВалютаДокумента = &ВалютаРубль
	|			ТОГДА ОтказПоставщикаВВозвратеТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРубли,
	|	ВЫБОР
	|		КОГДА ОтказПоставщикаВВозвратеТовары.Ссылка.ВалютаДокумента = &ВалютаДоллар
	|			ТОГДА ОтказПоставщикаВВозвратеТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДоллары,
	|	ВЫБОР
	|		КОГДА ОтказПоставщикаВВозвратеТовары.Ссылка.ВалютаДокумента = &ВалютаЕвро
	|			ТОГДА ОтказПоставщикаВВозвратеТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаЕвро,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный) КАК СтатусПартии,
	|	ОтказПоставщикаВВозвратеТовары.Ссылка.Организация КАК Организация,
	|	ОтказПоставщикаВВозвратеТовары.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ОтказПоставщикаВВозвратеТовары.Ссылка.УчитыватьНДС
	|				И ОтказПоставщикаВВозвратеТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ОтказПоставщикаВВозвратеТовары.Сумма - ОтказПоставщикаВВозвратеТовары.СуммаНДС
	|		ИНАЧЕ ОтказПоставщикаВВозвратеТовары.Сумма
	|	КОНЕЦ КАК СуммаБезНДС
	|ИЗ
	|	Документ.ОтказПоставщикаВВозврате.Товары КАК ОтказПоставщикаВВозвратеТовары
	|ГДЕ
	|	ОтказПоставщикаВВозвратеТовары.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);         
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("ВалютаРубль", ПараметрыСеанса.ВалютаРубль);
	Запрос.УстановитьПараметр("ВалютаДоллар", ПараметрыСеанса.ВалютаДоллар);
	Запрос.УстановитьПараметр("ВалютаЕвро", ПараметрыСеанса.ВалютаЕвро);
	
	ТабТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ТабТоваров.Количество() > 0 Тогда
		ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");
		ВалютаДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ВалютаДокумента");
		КурсДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "КурсВзаиморасчетов");
		КратностьДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "КратностьВзаиморасчетов");
		КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаДоллар, ДатаДокумента);
		КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаЕвро, ДатаДокумента);
		Если ВалютаДокумента = ПараметрыСеанса.ВалютаРубль Тогда
			Для Каждого Товар Из ТабТоваров Цикл
				Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
				ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
				Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаРубли, ПараметрыСеанса.ВалютаРубль,
				ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
			КонецЦикла;
			
		ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаДоллар Тогда
			Для Каждого Товар Из ТабТоваров Цикл
				Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаДоллары, ПараметрыСеанса.ВалютаДоллар,
				ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаДоллары, ПараметрыСеанса.ВалютаЕвро,
				ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
				Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
				ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
			КонецЦикла;
			
		ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаЕвро Тогда
			Для Каждого Товар Из ТабТоваров Цикл
				Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаЕвро, ПараметрыСеанса.ВалютаЕвро,
				ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
				Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаЕвро, ПараметрыСеанса.ВалютаДоллар,
				ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
				ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроведениеДокументовКлиентСервер.ЗаписатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров);
	
	Возврат ТабТоваров;
	
КонецФункции

Функция РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт 
	
	лКлючАлгоритма = "Документ_ОтказПоставщикаВВозврате_МодульМенеджера_РегистрыНакопления_ТоварыНаСкладах";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыНаСкладах", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,Склад,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,ДокументОснование,Организация,АктРассмотренияВозврата,Склад.СкладНедостач"); 
	
	//Размещенное количество приходуем на склад
	//Неразмещенное количество приходуем на склад недостач
	СкладНедостач = ОбщегоНазначения.СкладНедостач(Реквизиты.Склад);
	Если Не ЗначениеЗаполнено(СкладНедостач) Тогда
		ВызватьИсключение "Не задан склад недостач для склада "+Реквизиты.Склад;
	КонецЕсли;
	
	Если НЕ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ОтказПоставщикаВВозвратеРазмещен Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ОтказПоставщикаВВозвратеТовары.Ссылка,
	               |	ОтказПоставщикаВВозвратеТовары.Номенклатура КАК Номенклатура,
	               |	ОтказПоставщикаВВозвратеТовары.Качество КАК Качество,
	               |	СУММА(ОтказПоставщикаВВозвратеТовары.КоличествоРазмещено) КАК КоличествоРазмещено,
	               |	СУММА(ОтказПоставщикаВВозвратеТовары.Количество) КАК КоличествоПринято
	               |ПОМЕСТИТЬ ВТТовары
	               |ИЗ
	               |	Документ.ОтказПоставщикаВВозврате.Товары КАК ОтказПоставщикаВВозвратеТовары
	               |ГДЕ
	               |	ОтказПоставщикаВВозвратеТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтказПоставщикаВВозвратеТовары.Ссылка,
	               |	ОтказПоставщикаВВозвратеТовары.Номенклатура,
	               |	ОтказПоставщикаВВозвратеТовары.Качество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТовары.Ссылка.Склад КАК Склад,
	               |	ВТТовары.Номенклатура,
	               |	ВТТовары.Качество,
	               |	ВЫБОР
	               |		КОГДА ВТТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ОтказПоставщикаВВозвратеПринят)
	               |			ТОГДА ВТТовары.КоличествоПринято
	               |		ИНАЧЕ ВТТовары.КоличествоРазмещено
	               |	КОНЕЦ КАК Количество,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               |	ВТТовары.Ссылка КАК Регистратор,
	               |	ВТТовары.Ссылка.Дата КАК Период
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ВТТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ОтказПоставщикаВВозвратеПринят)
	               |				ТОГДА ВТТовары.КоличествоПринято
	               |			ИНАЧЕ ВТТовары.КоличествоРазмещено
	               |		КОНЕЦ > 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&СкладНедостач,
	               |	ВТТовары.Номенклатура,
	               |	ВТТовары.Качество,
	               |	ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	               |	ВТТовары.Ссылка,
	               |	ВТТовары.Ссылка.Дата
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |ГДЕ
	               |	ВТТовары.КоличествоПринято > ВТТовары.КоличествоРазмещено
	               |	И ВТТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ОтказПоставщикаВВозвратеРазмещен)";
	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("СкладНедостач", СкладНедостач);
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция РегистрыНакопления_ПартииТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено, вхФильтр = Неопределено)
	
	лКлючАлгоритма = "Документ_ОтказПоставщикаВВозврате_МодульМенеджера_РегистрыНакопления_ПартииТоваров";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ТаблицаДвижений = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваров", ТаблицаДвижений);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата,СтатусДокумента,Склад,ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов,ДокументОснование,Организация,Контрагент, АктРассмотренияВозврата"); 
	
	
	//Заполнено основание и Акт возврата
	Если Не ЗначениеЗаполнено(Реквизиты.ДокументОснование) Тогда
		ВызватьИсключение "Не заполнен документ-основание!";			
	КонецЕсли;
	
	Если НЕ Реквизиты.СтатусДокумента = Справочники.СтатусыДокументов.ОтказПоставщикаВВозвратеРазмещен Тогда
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтказПоставщикаВВозвратеТовары.Ссылка КАК Ссылка,
	               |	ОтказПоставщикаВВозвратеТовары.Номенклатура,
	               |	ОтказПоставщикаВВозвратеТовары.Ссылка.Склад КАК Склад,
	               |	ОтказПоставщикаВВозвратеТовары.Качество,
	               |	ОтказПоставщикаВВозвратеТовары.СтрокаПрихода,
	               |	ОтказПоставщикаВВозвратеТовары.Ссылка.Организация КАК Организация,
	               |	ОтказПоставщикаВВозвратеТовары.Количество КАК КоличествоПринято,
	               |	ОтказПоставщикаВВозвратеТовары.КоличествоРазмещено КАК КоличествоРазмещено,
	               |	ОтказПоставщикаВВозвратеТовары.Сумма КАК Себестоимость,
	               |	ОтказПоставщикаВВозвратеТовары.Цена КАК СебестоимостьЦена,
	               |	ОтказПоставщикаВВозвратеТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	               |	ОтказПоставщикаВВозвратеТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ОтказПоставщикаВВозвратеТовары.СтавкаНДС,
	               |	ОтказПоставщикаВВозвратеТовары.НомерСтроки КАК НомерСтрокиВДокументе
	               |ПОМЕСТИТЬ ВТТовары
	               |ИЗ
	               |	Документ.ОтказПоставщикаВВозврате.Товары КАК ОтказПоставщикаВВозвратеТовары
	               |ГДЕ
	               |	ОтказПоставщикаВВозвратеТовары.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               |	ВТТовары.Ссылка КАК Регистратор,
	               |	ВТТовары.Ссылка.Дата КАК Период,
	               |	ВТТовары.Номенклатура,
	               |	ВТТовары.Склад,
	               |	ВТТовары.Качество,
	               |	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный) КАК СтатусПартии,
	               |	ВТТовары.СтрокаПрихода,
	               |	ВТТовары.Организация КАК Организация,
	               |	ВТТовары.КоличествоРазмещено КАК Количество,
	               |	ВТТовары.СебестоимостьЦена * ВТТовары.КоличествоРазмещено КАК Себестоимость,
	               |	ВТТовары.СебестоимостьЦена,
	               |	ВТТовары.УчитыватьНДС,
	               |	ВТТовары.СуммаВключаетНДС,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.НомерСтрокиВДокументе,
	               |	ВТТовары.СебестоимостьЦена * ВТТовары.КоличествоРазмещено КАК СуммаРубли,
	               |	0 КАК СуммаДоллары,
	               |	0 КАК СуммаЕвро,
	               |	ВТТовары.СебестоимостьЦена * ВТТовары.КоличествоРазмещено КАК СуммаБезНДС,
	               |	ЛОЖЬ КАК ВнутреннееПеремещение,
	               |	НЕОПРЕДЕЛЕНО КАК ДокументОснование
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |ГДЕ
	               |	ВТТовары.КоличествоРазмещено > 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	               |	ВТТовары.Ссылка,
	               |	ВТТовары.Ссылка.Дата,
	               |	ВТТовары.Номенклатура,
	               |	ВТТовары.Склад.СкладНедостач,
	               |	&КачествоНедостача,
	               |	ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.Собственный),
	               |	ВТТовары.СтрокаПрихода,
	               |	ВТТовары.Организация,
	               |	ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено,
	               |	ВТТовары.СебестоимостьЦена,
	               |	ВТТовары.СебестоимостьЦена * (ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено),
	               |	ВТТовары.УчитыватьНДС,
	               |	ВТТовары.СуммаВключаетНДС,
	               |	ВТТовары.СтавкаНДС,
	               |	ВТТовары.НомерСтрокиВДокументе,
	               |	ВТТовары.СебестоимостьЦена * (ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено),
	               |	0,
	               |	0,
	               |	ВТТовары.СебестоимостьЦена * (ВТТовары.КоличествоПринято - ВТТовары.КоличествоРазмещено),
	               |	ЛОЖЬ,
	               |	НЕОПРЕДЕЛЕНО
	               |ИЗ
	               |	ВТТовары КАК ВТТовары
	               |ГДЕ
	               |	ВТТовары.КоличествоПринято > ВТТовары.КоличествоРазмещено";
	
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("КачествоНедостача", Справочники.Качество.Недостача);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда 
		
		ВалютаДокумента = Реквизиты.ВалютаДокумента;
		КурсДокумента = Реквизиты.КурсВзаиморасчетов;
		КратностьДокумента = Реквизиты.КратностьВзаиморасчетов;
		
		КурсДоллара = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаДоллар, Реквизиты.Дата);
		КурсЕвро = МодульВалютногоУчета.ПолучитьКурсВалюты(ПараметрыСеанса.ВалютаЕвро, Реквизиты.Дата);
		Для Каждого Товар Из ТЗ Цикл
			Если Товар.УчитыватьНДС И Товар.СуммаВключаетНДС Тогда 
				СтНДС =  УчетНДС.ПолучитьСтавкуНДС(Товар.СтавкаНДС);
				Товар.СуммаБезНДС = 100 * Товар.СуммаБезНДС / (100 + СтНДС);
			КонецЕсли;
			Если ВалютаДокумента = ПараметрыСеанса.ВалютаРубль Тогда
				Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаРубль,
				ПараметрыСеанса.ВалютаДоллар, 1, КурсДоллара.Курс, 1, КурсДоллара.Кратность);
				Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаРубль,
				ПараметрыСеанса.ВалютаЕвро, 1, КурсЕвро.Курс, 1, КурсЕвро.Кратность);
			ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаДоллар Тогда
				Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаДоллар,
				ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				Товар.СуммаЕвро = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаЕвро,
				ПараметрыСеанса.ВалютаЕвро, КурсДоллара.Курс, КурсЕвро.Курс, КурсДоллара.Кратность, КурсЕвро.Кратность);
				Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
				ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
			ИначеЕсли ВалютаДокумента = ПараметрыСеанса.ВалютаЕвро Тогда
				Товар.СуммаДоллары = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаЕвро,
				ПараметрыСеанса.ВалютаДоллар, КурсЕвро.Курс, КурсДоллара.Курс, КурсЕвро.Кратность, КурсДоллара.Кратность);
				Товар.СуммаРубли = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.Себестоимость, ПараметрыСеанса.ВалютаДоллар,
				ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
				Товар.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Товар.СуммаБезНДС, ПараметрыСеанса.ВалютаДоллар,
				ПараметрыСеанса.ВалютаРубль, КурсДокумента, 1, КратностьДокумента, 1);
			КонецЕсли;
			
			
			ЗаполнитьЗначенияСвойств(ТаблицаДвижений.Добавить(), Товар);
			
		КонецЦикла;
	КонецЕсли;
	
		
	Возврат ТаблицаДвижений;
	
КонецФункции

//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьМетаданные()
	Возврат Метаданные.Документы.ОтказПоставщикаВВозврате;
КонецФункции

Функция ПолучитьРеквизитыКонтроля(вхПараметр = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Если (вхПараметр = Метаданные.ПланыОбмена.ОбменПартКом83_77) тогда
		Результат = ОбменДаннымиКлиентСервер.РеквизитыКонтроляПоДокументу(ПолучитьМетаданные(), ИсключаемыеРеквизитыКонтроляРегистрации());
	Иначе
		Результат.Вставить("Шапка", "Дата,Проведен");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр = Неопределено) Экспорт
	Возврат	РаботаСПоследовательностямиКлиентСервер.ПолучитьЗначенияРеквизитовКонтроля(вхСсылкаНаОбъект, вхПараметр);
КонецФункции

Функция ИсключаемыеРеквизитыКонтроляРегистрации() Экспорт
	
	ИсключаемыеРеквизиты = ОбменДаннымиКлиентСервер.ИнициализироватьТаблицуИсключаемыхРеквизитовКонтроля();
	ОбменДаннымиКлиентСервер.ДобавитьВИсключаемыеРевизиты(ИсключаемыеРеквизиты, "Ссылка");
	
	Возврат ИсключаемыеРеквизиты;
	
КонецФункции

Функция ПолучитьДанныеГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхФильтр = Неопределено) Экспорт
	
	Результат = Неопределено;
	лМетаданныеПоследовательности = Неопределено;
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеГраницПоследовательности]: неправильный параметр номер 2.";	
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) Тогда
		Результат = ПроведениеДокументовКлиентСервер.ЗначенияДвиженийДокумента(вхСсылкаНаДокумент,
		Метаданные.РегистрыНакопления.ПартииТоваров, вхФильтр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.НачатьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Процедура ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры = Неопределено)
	РаботаСПоследовательностямиКлиентСервер.ЗакончитьКорректировкуГраницПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, вхПараметры);	
КонецПроцедуры

Функция ПолучитьЗаписиПоследовательности(вхСсылкаНаДокумент, вхПоследовательность, Проведение) Экспорт 
	
	лКлючАлгоритма = "Документ_ОтказПоставщикаВВозврате_МодульМенеджера_ПолучитьЗаписиПоследовательности";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = вхСсылкаНаДокумент.Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	//лЭтоОтменаПроведения = Ложь;
	//лРежимЗаписи = Неопределено;
	//Если ЭтотОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи", лРежимЗаписи) тогда
	//	лЭтоОтменаПроведения = (лРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	//КонецЕсли;
	Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата");
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПартионныйУчет) тогда
		Если Проведение                                                                         
			И Дата >= ПараметрыСеанса.ДатаНачалаРаботыТовары 
			И Дата >= глЗначениеПеременной("ДатаЗапускаПервогоЭтапа") Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ОтказПоставщикаВВозвратеТовары.Ссылка.Дата КАК Период,
			               |	ОтказПоставщикаВВозвратеТовары.Ссылка КАК Регистратор,
			               |	ОтказПоставщикаВВозвратеТовары.Номенклатура КАК Номенклатура
			               |ИЗ
			               |	Документ.ОтказПоставщикаВВозврате.Товары КАК ОтказПоставщикаВВозвратеТовары
			               |ГДЕ
			               |	ОтказПоставщикаВВозвратеТовары.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				ЗаполнитьЗначенияСвойств(лРезультат.Добавить(), Выборка); 
			КонецЦикла;
			
		КонецЕсли;
		
		Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
		
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

//// ОБМЕНЫ

//Выгрузка
Функция ВыгрузитьЭлементы(вхТаблицаСсылокНаОбъекты, вхПланОбмена) Экспорт
	
	лКлючАлгоритма = "Документ_ОтказПоставщикаВВозврате_МодульМенеджера_ВыгрузитьЭлементы";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Результат = Новый Массив;
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[ВыгрузитьЭлементы]: неправильный параметр номер 2.";
	КонецЕсли;
	
	Если лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog Тогда 
		
		лМенеджерПланаОбмена = ПланыОбмена[лМетаданныеПланаОбмена.Имя];
		
		лЗапрос = Новый Запрос;
		лЗапрос.УстановитьПараметр("ТаблицаСсылок", вхТаблицаСсылокНаОбъекты);
		лЗапрос.УстановитьПараметр("ПустаяЗаявка", Документы.ЗаявкаПокупателя.ПустаяСсылка());
		лЗапрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	&ТаблицаСсылок КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтказПоставщикаВВозвратеТовары.Ссылка КАК Ссылка,
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.АктРассмотренияВозврата.Штрихкод КАК Штрихкод,
		|	"""" КАК КодВозврата,
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.Склад.ФизическийСклад КАК Склад,
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.Номер КАК Номер,
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.Дата КАК Дата,
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.АктРассмотренияВозврата.Номер КАК НомерВходящегоДокумента,
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.АктРассмотренияВозврата.Дата КАК ДатаВходящегоДокумента,
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.АктРассмотренияВозврата.Номер КАК НомерВходящегоСФ,
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.АктРассмотренияВозврата.Дата КАК ДатаВходящегоСФ,
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ЕСТЬNULL(ОтказПоставщикаВВозвратеТовары.Ссылка.Контрагент.ОсновнаяТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК Контрагент,
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.Организация КАК Организация,
		|	ЕСТЬNULL(ОтказПоставщикаВВозвратеТовары.Ссылка.Склад.СкладVMI, ЛОЖЬ) КАК ОтветХранение,
		|	ОтказПоставщикаВВозвратеТовары.Номенклатура,
		|	ОтказПоставщикаВВозвратеТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	ОтказПоставщикаВВозвратеТовары.Номенклатура.Артикул КАК НоменклатураАртикул,
		|	ОтказПоставщикаВВозвратеТовары.Цена,
		|	ЕСТЬNULL(ОтказПоставщикаВВозвратеТовары.СтрокаЗаявки.ПрайсПоставщика.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладПолучатель,
		|	ЕСТЬNULL(ОтказПоставщикаВВозвратеТовары.СтрокаЗаявки.IDSite, """") КАК SSID,
		|	ЕСТЬNULL(ОтказПоставщикаВВозвратеТовары.Ссылка.Контрагент.ОсновнаяТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК Клиент,
		|	ЕСТЬNULL(ОтказПоставщикаВВозвратеТовары.СтрокаЗаявки.ПоследняяКорректировка.ТорговаяТочка.Город, ЕСТЬNULL(ОтказПоставщикаВВозвратеТовары.СтрокаЗаявки.Заявка.ТорговаяТочка.Город, ЗНАЧЕНИЕ(Справочник.Города.ПустаяСсылка))) КАК Город,
		|	ЕСТЬNULL(ОтказПоставщикаВВозвратеТовары.СтрокаПрихода.НомерГТД.Представление, """") КАК ГТД,
		|	ОтказПоставщикаВВозвратеТовары.КоличествоПлан КАК Количество,
		|	ЕСТЬNULL(ОтказПоставщикаВВозвратеТовары.СтрокаЗаявки.Заявка, &ПустаяЗаявка) = &ПустаяЗаявка КАК Виртуальная
		|ИЗ
		|	Документ.ОтказПоставщикаВВозврате.Товары КАК ОтказПоставщикаВВозвратеТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Объекты КАК Объекты
		|		ПО ОтказПоставщикаВВозвратеТовары.Ссылка = Объекты.Ссылка
		|ГДЕ
		|	ОтказПоставщикаВВозвратеТовары.Ссылка.АктРассмотренияВозврата <> ЗНАЧЕНИЕ(Документ.АктРассмотренияВозврата.ПустаяСсылка)
		|	И ОтказПоставщикаВВозвратеТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ОтказПоставщикаВВозвратеНовый)
		|ИТОГИ ПО
		|	Ссылка";
		
		РезультатыЗапроса = лЗапрос.ВыполнитьПакет();
		
		РезультатЗапросаПриемка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
		
		Если НЕ РезультатЗапросаПриемка.Пустой() Тогда
			лТипОбъектаXDTO = ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаПриемку");
			лВыборка = РезультатЗапросаПриемка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
			
			Пока лВыборка.Следующий() Цикл
				
				лОбъект = ФабрикаXDTO.Создать(лТипОбъектаXDTO);
				ЗаполнитьЗначенияСвойств(лОбъект, лВыборка, "Номер,Дата,НомерВходящегоДокумента,ДатаВходящегоДокумента,НомерВходящегоСФ,ДатаВходящегоСФ,СуммаДокумента,ОтветХранение");
				лОбъект.ВидДокумента 		= "ОтказПоставщикаВВозврате";
				лОбъект.Ссылка 				= XMLСтрока(лВыборка.Ссылка);
				лОбъект.СкладСсылка 		= XMLСтрока(лВыборка.Склад);
				лОбъект.КонтрагентСсылка 	= XMLСтрока(лВыборка.Контрагент);
				лОбъект.ОрганизацияСсылка 	= XMLСтрока(лВыборка.Организация);
				лОбъект.ШтрихКод 			= XMLСтрока(лВыборка.ШтрихКод);
				лОбъект.КодВозврата 		= XMLСтрока(лВыборка.КодВозврата);
				
				лТовары = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), "Документы.ЗаказНаПриемку.Товары"));
				лТоварыСписок = лТовары.ПолучитьСписок("СтрокаТовары");
				
				ВыборкаПоТоварам = лВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ТТПополнениеСклада = Неопределено;
				
				Пока ВыборкаПоТоварам.Следующий() Цикл
					НоваяСтрока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(лМенеджерПланаОбмена.URIПространстваИмен(), лТоварыСписок.ВладеющееСвойство.Тип.Имя)); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам, "НоменклатураНаименование,НоменклатураАртикул,SSID,Количество,Цена,ГТД");
					НоваяСтрока.НоменклатураСсылка = XMLСтрока(ВыборкаПоТоварам.Номенклатура);
					НоваяСтрока.КлиентСсылка = XMLСтрока(ВыборкаПоТоварам.Клиент);
					НоваяСтрока.ГородСсылка = XMLСтрока(ВыборкаПоТоварам.Город);
					НоваяСтрока.СкладПолучательСсылка = XMLСтрока(ВыборкаПоТоварам.Склад);
					
					лТоварыСписок.Добавить(НоваяСтрока);
					
				КонецЦикла;	
				
				лОбъект.Товары = лТовары;
				Результат.Добавить(лОбъект);
				//Семенов И.П. 07.02.2019 XX-1768(
				ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(лВыборка.Ссылка, лОбъект);
				//)Семенов И.П
			КонецЦикла;

		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Загрузка
Процедура ЗагрузитьЭлемент(ОбъектXDTO, вхОтправитель, Отказ, вхПараметры = Неопределено, СтруктураОтчета = Неопределено) Экспорт // 26.03.19 Строганов Роман > Убираю лишний параметр (5) - НомерСообщения = 0. Он инициализирован в структуре «вхПараметры» 
	
	лКлючАлгоритма = "Документ_ОтказПоставщикаВВозврате_МодульМенеджера_ЗагрузитьЭлемент";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	лМетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(вхОтправитель));
	
	Если лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog Тогда
		НомерПотока = ?(лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 0, 1);
		Попытка
			
			ИмяТипаОбъекта =  ОбъектXDTO.Тип().Имя;
			
			Если ИмяТипаОбъекта = "РезультатПриемки" Тогда
				ЗагрузитьРезультатПриемки(ОбъектXDTO, вхПараметры, СтруктураОтчета);
			Иначе 
				ВызватьИсключение "Загрузка отказа поставщика в возврате для вида объекта "+ИмяТипаОбъекта+" не поддерживается!";
			КонецЕсли;
			
		Исключение
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("ОбъектXDTO", ИмяТипаОбъекта);
			СтруктураОшибки.Вставить("GUID", ОбъектXDTO.ЗаказСсылка);
			СтруктураОшибки.Вставить("ИмяОбъектаМетаданных", "ОтказПоставщикаВВозврате");
			СтруктураОшибки.Вставить("СообщениеОбОшибке", ОписаниеОшибки());
			СтруктураОшибки.Вставить("НомерСообщения", вхПараметры.НомерСообщения);
			СтруктураОшибки.Вставить("ДатаЗагрузкиСообщения", ТекущаяДата());
			СтруктураОшибки.Вставить("НомерПотока", ?(лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 0, 1));
			ОбменДаннымиКлиентСервер.ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки);
			
			ДокСсылка = Документы.ОтказПоставщикаВВозврате.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
			Если НЕ ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
				РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокСсылка, вхПараметры.НомерСообщения, Истина, "Ошибка загрузки: "+ОписаниеОшибки(), , Ложь, НомерПотока); 
			КонецЕсли;
			//Семенов И.П. 06.02.2019 XX-1768(
			ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(ДокСсылка, ОбъектXDTO, , Истина, СтруктураОшибки.СообщениеОбОшибке);
			//)Семенов И.П.
			
			// 25.03.19 Строганов Роман > 
			ОбменДаннымиКлиентСервер.ЗафиксироватьРезультатВСтруктуреОтчета(СтруктураОтчета, ДокСсылка, Истина, Истина, СтруктураОшибки.СообщениеОбОшибке);
			// 25.03.19 Строганов Роман <
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатПриемки(ОбъектXDTO, ДопПараметры = Неопределено, СтруктураОтчета = Неопределено)
	
	лКлючАлгоритма = "Документ_ОтказПоставщикаВВозврате_МодульМенеджера_ЗагрузитьРезультатПриемки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ЗаказСсылка) Тогда 
		ДокСсылка = Документы.ОтказПоставщикаВВозврате.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ЗаказСсылка));
		
		Если ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(ДокСсылка) Тогда 
			ВызватьИсключение "Не найден отказ поставщика в возврате с guid = " + ОбъектXDTO.ЗаказСсылка;
		КонецЕсли;
	Иначе
		ДокСсылка = Документы.ВозвратТоваровОтПокупателя.НайтиПоНомеру(ОбщегоНазначения.ПреобразоватьНомер(ОбъектXDTO.ЗаказНомер), ТекущаяДата());
		Если Не ЗначениеЗаполнено(ДокСсылка) Тогда 
			ВызватьИсключение "Не найденн отказ поставщика в возврате с номером = " + ОбъектXDTO.ЗаказНомер;
		КонецЕсли;
	КонецЕсли;
	
	СтатусДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "СтатусДокумента");
	
	//Загружаем приемку только для документа в статусе Новый или отменен
	Если НЕ СтатусДокумента = Справочники.СтатусыДокументов.ОтказПоставщикаВВозвратеНовый Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьВходящее = РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.ЕстьСообщениеПоОбъекту(ДокСсылка, Ложь);
	
	Если Не ЕстьВходящее Тогда 
		//Первая приемка
		Дата = ТекущаяДата();
	Иначе
		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСсылка, "Дата");
	КонецЕсли;
	
	ТоварыXDTO = ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары");
	СоотвSSID = ОбменДаннымиКлиентСервер.СоответствиеСтрокЗаявокИSSID(ТоварыXDTO, ДокСсылка);
	
	ТоварыВМС = Новый ТаблицаЗначений;
	ТоварыВМС.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ТоварыВМС.Колонки.Добавить("СтрокаЗаявки", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыСтрокЗаявок"));
	ТоварыВМС.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	
	ПричинаОтказаНаименованиеТопЛог = "";
	
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.Качество) Тогда
			ПричинаОтказаНаименованиеТопЛог = СтрокаТовары.Качество;			
		КонецЕсли;
		
		Если СтрокаТовары.ЭтоБрак Тогда 
			Продолжить;
		КонецЕсли;

		СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтрокаТовары.SSID);
		
		Если Не ЗначениеЗаполнено(СтрокаЗаявки) Тогда 
			ВызватьИсключение "Не найдена строка заявки с IDSite = " + СтрокаТовары.SSID;
		Иначе
			НоваяСтрока = ТоварыВМС.Добавить();
			НоваяСтрока.СтрокаЗаявки = СтрокаЗаявки;
		КонецЕсли;
		
		НоваяСтрока.Количество = СтрокаТовары.КоличествоПринято;
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.НоменклатураСсылка));
		
	КонецЦикла;
	
	ТоварыВМС.Свернуть("Номенклатура,СтрокаЗаявки", "Количество");
	
	ДокументОбъект = ДокСсылка.ПолучитьОбъект();
	
	ТоварыСтарые 	= ДокументОбъект.Товары.Выгрузить();
	ТоварыНовые 	= ТоварыСтарые.СкопироватьКолонки();
	
	Для каждого стрТовары Из ТоварыВМС Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура,СтрокаЗаявки");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, стрТовары);
		
		СтрокиОстатка = ТоварыСтарые.НайтиСтроки(СтруктураОтбора);
		
		Распределить = стрТовары.Количество;
		
		Если СтрокиОстатка.Количество() = 0 Тогда
			ВызватьИсключение "Не найдена строка с номенклатурой "+СтруктураОтбора.Номенклатура+", строкой заявки " + СтруктураОтбора.СтрокаЗаявки;
		КонецЕсли;
		
		Для каждого СтрокаОстатка Из СтрокиОстатка Цикл
			
			Распределено = Мин(Распределить, СтрокаОстатка.КоличествоПлан);
			Если Распределено < 0 Тогда
				Продолжить;
			КонецЕсли;
			
			
			НоваяСтрока = ТоварыНовые.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
			НоваяСтрока.Количество = Распределено;
			
			Распределить = Распределить - Распределено;
			СтрокаОстатка.Количество = СтрокаОстатка.Количество - Распределено;
			
		КонецЦикла;
		
		Если Распределить > 0 Тогда
			//Остаток кидаем на последнюю строку
			НоваяСтрока.Количество = НоваяСтрока.Количество + Распределить;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если ТоварыНовые.Количество() = 0 Тогда
		//очистим принятое
		Для каждого Стр Из ДокументОбъект.Товары Цикл
			Стр.Количество = 0;
		КонецЦикла;
	Иначе
		ДокументОбъект.Товары.Загрузить(ТоварыНовые);
	КонецЕсли;
	ДокументОбъект.ПересчитатьСуммуТабличнойЧасти();
	ДокументОбъект.Дата = Дата;
	ДокументОбъект.ПометкаУдаления = Ложь;
	
	СкладВСообщении = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.СкладСсылка));
	Если Не ЗначениеЗаполнено(СкладВСообщении.СкладВозвратов) Тогда
		ВызватьИсключение "Для склада "+СкладВСообщении+" не указан склад возврата!";
	Иначе
		ДокументОбъект.Склад = СкладВСообщении.СкладВозвратов;
	КонецЕсли;
	
	СтарыйСтатус = СтатусДокумента;
	
	ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ОтказПоставщикаВВозвратеПринят;
	
	ДокументОбъект.ОбновленИзТопЛог = Истина;
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НомерСообщения = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерСообщения);
		НомерПотока = ?(ДопПараметры = Неопределено, 0, ДопПараметры.НомерПотока);
		РегистрыСведений.ИсторияОбменаСТопЛогПоОбъектам.Добавить(ДокументОбъект.Ссылка, НомерСообщения, , , , Ложь, НомерПотока); 
		//Семенов И.П. 06.02.2019 XX-1768(
		ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(ДокументОбъект.Ссылка, ОбъектXDTO);
		//)Семенов И.П.
		
		// 25.03.19 Строганов Роман > 
		ОбменДаннымиКлиентСервер.ЗафиксироватьРезультатВСтруктуреОтчета(СтруктураОтчета, ДокументОбъект.Ссылка, Истина, Ложь);
		// 25.03.19 Строганов Роман <
	Исключение
		//ДокументОбъект.СтатусДокумента = СтарыйСтатус;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Набор = РегистрыСведений.ОтложенноеПроведениеДокументовИзТопЛог.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаДокумент.Установить(ДокументОбъект.Ссылка);
		Стр = Набор.Добавить();
		Стр.СсылкаНаДокумент = ДокументОбъект.Ссылка;
		Набор.Записать();
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
	
КонецПроцедуры

