Функция ПолучитьПартииТоваровУпр(вхСсылкаНаДокумент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ВидДвижения,
	|	&вхСсылка КАК Регистратор,
	|	&вхДата КАК Период,
	|	&Склад,
	|	ПартииТоваровУпр.ЕдиницаИзмерения,
	|	ПартииТоваровУпр.СтрокаПрихода,
	|	ПартииТоваровУпр.Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровУпр КАК ПартииТоваровУпр
	|ГДЕ
	|	ПартииТоваровУпр.Регистратор = &Ссылка";
	
	вхДокументОснование = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ДокументОснование");
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("вхСсылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("вхДата", ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "Дата"));
	Запрос.УстановитьПараметр("Склад", ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхДокументОснование, "СкладПолучатель"));
	Запрос.УстановитьПараметр("Ссылка", вхДокументОснование);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
//--------------------------------------------------------
Функция РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		ТаблицаДвижений = Неопределено;
		ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыНаСкладах", ТаблицаДвижений);
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	вхПериод = вхСсылкаНаДокумент.МоментВремени();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ВидДвижения,
	|	ПеремещениеТоваров.Ссылка КАК Регистратор,
	|	&Дата КАК Период,
	|	ПеремещениеТоваров.Номенклатура,
	|	ПеремещениеТоваров.Ссылка.СкладПолучатель КАК Склад,
	|	ПеремещениеТоваров.Ссылка.СкладОтправитель КАК СкладОтправитель,
	|	ПеремещениеТоваров.Ссылка.СкладПолучатель КАК СкладПолучатель,
	|	ПеремещениеТоваров.Качество,
	|	ПеремещениеТоваров.Количество - ПеремещениеТоваров.КоличествоНеПринято КАК Количество,
	|	ПеремещениеТоваров.СтрокаПрихода КАК СтрокаПрихода
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &Ссылка
	|	И ПеремещениеТоваров.Количество - ПеремещениеТоваров.КоличествоНеПринято > 0";
		
	Запрос.УстановитьПараметр("Ссылка", ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаДокумент, "ДокументОснование"));
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Дата", вхПериод.Дата);
				
	ТабТоваров = Запрос.Выполнить().Выгрузить();
	
	ПроведениеДокументовКлиентСервер.ЗаписатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров);
	
	Возврат ТабТоваров;

КонецФункции

Функция РегистрыНакопления_ПартииТоваровУпр(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабТоваров = Новый ТаблицаЗначений;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		ТаблицаДвижений = Неопределено;
		ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваровУпр", ТаблицаДвижений);
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров) Тогда
		ТабТоваров = РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ);
	КонецЕсли;
	
	Возврат ТабТоваров;
	
	//ТабПартийУпр = Новый ТаблицаЗначений;
	//ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ПартииТоваровУпр", ТабПартийУпр);
	//
	//Для Каждого Товар Из ТабТоваров Цикл
	//	Если ЗначениеЗаполнено(Товар.СтрокаПрихода) Тогда
	//		нс = ТабПартийУпр.Добавить();
	//		нс.ВидДвижения = Товар.ВидДвижения;
	//		нс.Период = Товар.Период;
	//		нс.Регистратор = Товар.Регистратор;
	//		нс.Склад = Товар.Склад;
	//		нс.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
	//		нс.СтрокаПрихода = Товар.СтрокаПрихода;
	//		нс.Количество = Товар.Количество;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если ТабПартийУпр.Количество() = 0 Тогда
	//	ТабПартийУпр = ПолучитьПартииТоваровУпр(вхСсылкаНаДокумент);
	//	
	//КонецЕсли;
	
КонецФункции

Функция РегистрыНакопления_ТоварыПеремещения(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабТоваров = Новый ТаблицаЗначений;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		ТаблицаДвижений = Неопределено;
		ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("ТоварыПеремещения", ТаблицаДвижений);
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров) Тогда
		ТабТоваров = РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ);
	КонецЕсли;
	
	ТабПеремещений = ТабТоваров.Скопировать();
	ТабПеремещений.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	Возврат ТабПеремещений;
	
КонецФункции

Функция РегистрыНакопления_РезервыТоваров(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено)
	ТабРезервы = Новый ТаблицаЗначений;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Дата") < ПараметрыСеанса.ДатаНачалаРаботыТовары Тогда
		ТаблицаДвижений = Неопределено;
		ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("РезервыТоваров", ТаблицаДвижений);
		Возврат ТаблицаДвижений
	КонецЕсли;
	
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("РезервыТоваров", ТабРезервы);
	
	//ЗапросРазмещения = Новый Запрос;
	//ЗапросРазмещения.Текст = 
	//"ВЫБРАТЬ
	//|	РазмещенияСтрокЗаявокОбороты.СтрокаЗаявки,
	//|	РазмещенияСтрокЗаявокОбороты.КоличествоОборот КАК Количество
	//|ИЗ
	//|	РегистрНакопления.РазмещенияСтрокЗаявок.Обороты КАК РазмещенияСтрокЗаявокОбороты
	//|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещенияСтрокЗаказов.Обороты(, , , СтрокаПрихода = &СтрокаПрихода) КАК РазмещенияСтрокЗаказовОбороты
	//|	ПО РазмещенияСтрокЗаявокОбороты.СтрокаЗаказа = РазмещенияСтрокЗаказовОбороты.СтрокаЗаказа";
	//
	//ТабТоваров = Новый ТаблицаЗначений;
	//Если НЕ ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхПараметры, "ТаблицаТоваров", ТабТоваров) Тогда
	//	ТабТоваров = РегистрыНакопления_ТоварыНаСкладах(вхСсылкаНаДокумент, вхОтказ);
	//КонецЕсли;
	//
	//Для Каждого Товар Из ТабТоваров Цикл
	//	ЗапросРазмещения.УстановитьПараметр("СтрокаПрихода", Товар.СтрокаПрихода);
	//	ИтогТовар = Товар.Количество;
	//	Для Каждого Размещение Из ЗапросРазмещения.Выполнить().Выгрузить() Цикл
	//		Если ИтогТовар <= 0 Тогда Прервать; КонецЕсли;
	//		Если ИтогТовар <= Размещение.Количество Тогда
	//			нс = ТабРезервы.Добавить();
	//			нс.ВидДвижения = Товар.ВидДвижения;
	//			нс.Регистратор = Товар.Регистратор;
	//			нс.Период = Товар.Период;
	//			нс.Склад = товар.Склад;
	//			нс.Номенклатура = Товар.Номенклатура;
	//			нс.Качество = Товар.Качество;
	//			нс.СтрокаЗаявки = Размещение.СтрокаЗаявки;
	//			нс.Количество = Товар.Количество;
	//			Прервать;
	//		Иначе
	//			нс = ТабРезервы.Добавить();
	//			нс.ВидДвижения = Товар.ВидДвижения;
	//			нс.Регистратор = Товар.Регистратор;
	//			нс.Период = Товар.Период;
	//			нс.Склад = товар.Склад;
	//			нс.Номенклатура = Товар.Номенклатура;
	//			нс.Качество = Товар.Качество;
	//			нс.СтрокаЗаявки = Размещение.СтрокаЗаявки;
	//			нс.Количество = Размещение.Количество;
	//			ИтогТовар = ИтогТовар - Размещение.Количество;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	
	Возврат ТабРезервы;
	
КонецФункции
//--------------------------------------------------------
Процедура ВыполнитьПроведение(вхСсылкаНаДокумент, вхОтказ, вхПараметры = Неопределено) Экспорт
		
КонецПроцедуры