Перем мДокументЗаполнен Экспорт;
Перем мВалютаРегламентированногоУчета;


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	лКлючАлгоритма = "Документ_СчетФактураВыданный_МодульОбъекта_ОбработкаЗаполнения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////// 
	
	СтандартнаяОбработка = Ложь;
	Основание = ДанныеЗаполнения;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		//ЗаполнитьНаОснованииСчетаФактуры(Основание);
		мДокументЗаполнен = Истина;
	ИначеЕсли ЗначениеЗаполнено(Основание) 
		И ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		
		Дата = Основание.Дата;
		Организация = Основание.Организация;
		
		СтрокаОснованиеВТабличнойЧасти = ДокументыОснования.Добавить();
		СтрокаОснованиеВТабличнойЧасти.ДокументОснование = Основание;
		
		ДокументОснование = Основание;
		
		//ЗаполнитьДатуИНомерДокументовОплаты();
		
		Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) 
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				И Основание.ВидОперации = Перечисления.ВидыОперацийВозвратаОтПокупателя.Корректировка Тогда
				
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				
			Иначе
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		//	
		//	ДатаНомерДокументовОплаты.Очистить();
		//	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		//		Или ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		//		НомерПлатежноРасчетногоДокумента = Основание.НомерВходящегоДокумента;
		//		ДатаПлатежноРасчетногоДокумента =  Основание.ДатаВходящегоДокумента;
		//		
		//	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		//		НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
		//		ДатаПлатежноРасчетногоДокумента =  Основание.Дата;
		//	Иначе
		//		НомерПлатежноРасчетногоДокумента = "";
		//		ДатаПлатежноРасчетногоДокумента =  Неопределено;
		//	КонецЕсли;
		//	
		//	СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		//	СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		//	СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
		//	
		//	ДокументЗаполнен = Ложь;
		//	ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен);
		//	
		//	Если Не УчетНДС.ОрганизацияУчитываетНДС(Организация, Дата) И УчетНДС.ВедетсяУчетНДСПоФЗ134(Дата) Тогда
		//		ТекстСообщения = "Автоматическое заполнение счета-фактуры на предварительную оплату для организаций-неплательщиков НДС 
		//		|не предусмотрено. Заполните недостающие данные вручную.";
		//		ОбщегоНазначения.СообщитьИнформациюПользователю(ТекстСообщения);
		//	ИначеЕсли НЕ ДокументЗаполнен Тогда
		//		ТекстСообщения = "Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.";
		//		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		//	КонецЕсли;
		//	УстановитьКодВидаОперации();
		//	мДокументЗаполнен = Истина;
		//	
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			
			//// Ввод корректировочного/исправленного счета-фактуры на поступление, 
			//// требуется проверить существование ранее введенного счета-фактуры
			//СуществующийСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание, "СчетФактураВыданный");
			//Если СуществующийСчетФактура <> Неопределено Тогда
			//	ТекстСообщения = "На основании документа """ + СуществующийСчетФактура + """ уже был введен """ + СуществующийСчетФактура + """";					
			//	ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
			//	ДокументыОснования.Очистить();
			//	ДокументыОснования.Добавить();
			//	ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			//	Возврат;
			//КонецЕсли;
			
			Отказ = Ложь;
			ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснованиеВТабличнойЧасти, Отказ);
			Если Не Отказ Тогда
				ОпределениеПараметровСчетаФактуры();
				мДокументЗаполнен = Истина;
			КонецЕсли;
			
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			
			ОпределениеПараметровСчетаФактуры();
			УстановитьКодВидаОперации();
			мДокументЗаполнен = Истина;
			
		КонецЕсли;
		
		//{{ХудинВВ 20180625 XX-218
		Выставлен 					= Истина;
		СчетФактураНеВыставляется 	= Ложь;
		ДатаВыставления 			= Дата;
		КодСпособаВыставления 		= 1;		
		//}}
				
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснованиеВТабличнойЧасти, Отказ)
	
	лКлючАлгоритма = "Документ_СчетФактураВыданный_МодульОбъекта_ЗаполнитьНаОснованииИсправления";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////// 
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Контрагент.ОсновнаяТорговаяТочка.КПП, ДокументОснование, Дата");
	
	РеквизитыИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыОснования.ДокументОснование, "Номер, Дата"); 	
	ИсходныйДокумент = РеквизитыОснования.ДокументОснование;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Номер,
	|	ВозвратТоваровОтПокупателя.Дата
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка <> &Ссылка
	|	И ВозвратТоваровОтПокупателя.ДокументОснование = &ДокументОснование
	|	И ВозвратТоваровОтПокупателя.МоментВремени < &МоментВремени
	|	И ВозвратТоваровОтПокупателя.Ссылка.Проведен
	|	И НЕ ВозвратТоваровОтПокупателя.Ссылка.СтатусДокумента В (&ИсключаемыеСтатусы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровОтПокупателя.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументОснование", ИсходныйДокумент);
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.УстановитьПараметр("МоментВремени", Основание.МоментВремени());
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтменен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый);
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	ИсправляемыйДокумент = Неопределено;
	Если Выборка.Следующий() Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
		ИсправляемыйДокумент = Выборка.Ссылка;
	КонецЕсли;
	
	//Исходный
	ИсходныйДокументСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ИсходныйДокумент);
	Если ЗначениеЗаполнено(ИсходныйДокументСФ) Тогда
		НомерИсходногоДокумента = ИсходныйДокументСФ.Номер;
		ДатаИсходногоДокумента = ИсходныйДокументСФ.Дата;
	Иначе
		НомерИсходногоДокумента = РеквизитыИсходногоДокумента.Номер;
		ДатаИсходногоДокумента = РеквизитыИсходногоДокумента.Дата;
	КонецЕсли;
	СтрокаОснованиеВТабличнойЧасти.НомерИсходногоДокумента 	= НомерИсходногоДокумента;
	СтрокаОснованиеВТабличнойЧасти.ДатаИсходногоДокумента 	= ДатаИсходногоДокумента;
	
	//Предыдущая корректировка
	Если КорректировкаКорректировочногоСчетаФактуры Тогда
		
		ИсправляемыйДокументСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ИсправляемыйДокумент);
		
		Если ЗначениеЗаполнено(ИсправляемыйДокументСФ) И ИсправляемыйДокументСФ.Проведен Тогда
			НомерИсправляемогоКорректировочногоДокумента = ИсправляемыйДокументСФ.Номер;
			ДатаИсправляемогоКорректировочногоДокумента = ИсправляемыйДокументСФ.Дата;
		Иначе
			НомерИсправляемогоКорректировочногоДокумента = ИсправляемыйДокумент.Номер;
			ДатаИсправляемогоКорректировочногоДокумента = ИсправляемыйДокумент.Дата;
		КонецЕсли;
		СтрокаОснованиеВТабличнойЧасти.НомерИсходногоДокумента 	= НомерИсходногоДокумента;
		СтрокаОснованиеВТабличнойЧасти.ДатаИсходногоДокумента 	= ДатаИсходногоДокумента;
		
	КонецЕсли;
	
	КППКонтрагента = РеквизитыОснования.КонтрагентОсновнаяТорговаяТочкаКПП;
	
КонецПроцедуры


Процедура ЗаполнитьНаОснованииИсправления_(Основание, СтрокаОснованиеВТабличнойЧасти, Отказ)
	
	Если ТипЗнч(Основание.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ЗначениеЗаполнено(Основание.ИсправляемыйДокументРеализации)
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		И Основание.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		УточнениеСообщения = "корректировочных"; 
	Иначе
		УточнениеСообщения = "исправленных";
	КонецЕсли;
	
	ОснованиеДляВидаОперации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание);
	
	Если ЗначениеЗаполнено(ОснованиеДляВидаОперации.ВалютаДокумента) 
		И ОснованиеДляВидаОперации.ВалютаДокумента <> мВалютаРегламентированногоУчета 
		И ЗначениеЗаполнено(ОснованиеДляВидаОперации.ДоговорКонтрагента)
		И ОснованиеДляВидаОперации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для договоров в условных единицах, выставление " 
			+ УточнениеСообщения + " счетов-фактур, оформленных в валюте, не поддерживается.
			|Документ-основание должен быть оформлен в рублях.");
		Отказ = Истина;	
		Возврат;
	КонецЕсли;
	
	Если НЕ Основание.КорректироватьНДС Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для корректировки реализации с отражением корректировки ""Только в печатной форме"" счет-фактура не выставляется");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ЗначениеЗаполнено(Основание.ИсправляемыйДокументРеализации)
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		И Основание.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		ЭтотОбъект.Исправление = Истина;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		ЭтотОбъект.Исправление = Ложь;
	Иначе		
		
		СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);		
		СписокТиповКорректировочный = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		СписокТиповНаРеализацию = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		
		Если СписокТиповНаАванс.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда			
			Если ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			Иначе
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
			КонецЕсли;
		ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;	
		Иначе
			ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		КонецЕсли;
		
		ЭтотОбъект.Исправление = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Основание.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИсправляемыйСчетФактура = Основание.ИсправляемыйДокументРеализации;
	Иначе
		ИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание.ИсправляемыйДокументРеализации, "СчетФактураВыданный");
	КонецЕсли;	
	
	ДокументРеализации = Основание.ДокументРеализации;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	

	// Определение кода вида операции для исправления
	// Определение номера и даты исходного документа
	КодВидаОперацииОснования = "";
	НомерИсправленияСФ = 0;
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);

	ИсходныйДокумент = Неопределено;
	ИспользоватьПараметрыСчетаФактуры = Ложь;
	Если ТипЗнч(Основание.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИспользоватьПараметрыСчетаФактуры = Истина;
		ИсходныйДокумент = Основание.ДокументРеализации;
	ИначеЕсли ТипЗнч(Основание.ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание.ДокументРеализации);
		Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ИспользоватьПараметрыСчетаФактуры = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ИспользоватьПараметрыСчетаФактуры И ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		// Основанием первоначальной корректировки является документ "Счет-фактура выданный"
		// реквизиты необходимо взять из этого счета-фактуры
		
		ПараметрыСчетаФактуры = Новый Структура("НомерИсходногоДокумента, ДатаИсходногоДокумента");
		
		ДанныеИсходногоДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ИсходныйДокумент,
			"КодВидаОперации,КодВидаОперацииНаУменьшение,Дата");
			
		КодВидаОперацииОснования = ДанныеИсходногоДокумента.КодВидаОперации;
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
		   И ВерсияКодовВидовОпераций > 1 Тогда
			КодВидаОперацииНаУменьшение = ДанныеИсходногоДокумента.КодВидаОперацииНаУменьшение;
		КонецЕсли;
		
		ПараметрыСчетаФактуры.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ИсходныйДокумент.ПолучитьОбъект());
		ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ДанныеИсходногоДокумента.Дата;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОснованиеВТабличнойЧасти, ПараметрыСчетаФактуры);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры);
		КонецЕсли;
		
	Иначе
		Запрос = Новый Запрос;
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание.ДокументРеализации);							   
		
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		Запрос.УстановитьПараметр("КорректировочныйСчетФактура", Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Номер
		|	КОНЕЦ КАК НомерИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Дата
		|	КОНЕЦ КАК ДатаИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента
		|		КОГДА НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления
		|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента
		|		КОГДА НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Дата
		|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерИсправления,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректировочныйСчетФактура,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
		|			ТОГДА ВЫБОР
		|					КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|							И СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение <> """"
		|						ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперацииНаУменьшение
		|					ИНАЧЕ ""18""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КодВидаОперацииНаУменьшение
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	(СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
		|	ИЛИ СчетФактураВыданныйДокументыОснования.Ссылка = &ИсходныйДокумент)
		|	И (НЕ СчетФактураВыданныйДокументыОснования.Ссылка.Исправление)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			
			ТекущаяСтрока = РезультатЗапроса[0];
			
			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				
				СтрокаОснованиеВТабличнойЧасти.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());	
				СтрокаОснованиеВТабличнойЧасти.ДатаИсходногоДокумента  = ТекущаяСтрока.Дата;
				
				НомерИсправляемогоКорректировочногоДокумента = ТекущаяСтрока.НомерИсправляемогоКорректировочногоДокумента;
				ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.ДатаИсправляемогоКорректировочногоДокумента;
				
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				
			Иначе	
				
				ПараметрыСчетаФактуры = Новый Структура("НомерИсходногоДокумента, ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента,
					|ДатаИсправленияИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента");

				НомерИсправленияСФ = ТекущаяСтрока.НомерИсправления;
				
				Если НЕ ТекущаяСтрока.КорректировочныйСчетФактура И НЕ ТекущаяСтрока.Исправление Тогда
					ПараметрыСчетаФактуры.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());	
				Иначе
					ПараметрыСчетаФактуры.НомерИсходногоДокумента = ТекущаяСтрока.НомерИсходногоДокумента;
				КонецЕсли;
				
				ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ТекущаяСтрока.ДатаИсходногоДокумента;
				
				ПараметрыСчетаФактуры.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправленияИсходногоДокумента;
				ПараметрыСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправленияИсходногоДокумента;
				
				НомерИсправляемогоКорректировочногоДокумента = ТекущаяСтрока.НомерИсправляемогоКорректировочногоДокумента;
				ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.ДатаИсправляемогоКорректировочногоДокумента;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура 
					И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				КонецЕсли;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура И НЕ ТекущаяСтрока.Исправление Тогда
					НомерИсправляемогоКорректировочногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());
					ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.Ссылка.Дата;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправленияИсходногоДокумента)
					ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ДатаИсправленияИсходногоДокумента) Тогда
					ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
				
				Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					ЗаполнитьЗначенияСвойств(СтрокаОснованиеВТабличнойЧасти, ПараметрыСчетаФактуры);
				Иначе
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры);
				КонецЕсли;

			КонецЕсли;
			
			КодВидаОперацииОснования = ТекущаяСтрока.КодВидаОперации;
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
					И ВерсияКодовВидовОпераций > 1 Тогда
				КодВидаОперацииНаУменьшение = ТекущаяСтрока.КодВидаОперацииНаУменьшение;
			КонецЕсли;

		ИначеЕсли ЭтотОбъект.Исправление Тогда
			НомерИсправленияСФ = 0;		
		КонецЕсли;
	КонецЕсли;
	
	// Определение кода вида операции для исправления
	// и номера исправления
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныйДокумент", Основание.ДокументРеализации);		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		ТекущаяСтрока = РезультатЗапроса[0];
		НомерИсправленияСФ  = Макс(НомерИсправленияСФ, ТекущаяСтрока.НомерИсправления);			
		
		Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			Если НЕ СтрокаОснованиеВТабличнойЧасти.УчитыватьИсправлениеИсходногоДокумента Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправления) Тогда
					СтрокаОснованиеВТабличнойЧасти.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправления;
					СтрокаОснованиеВТабличнойЧасти.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.Ссылка.Дата;
					СтрокаОснованиеВТабличнойЧасти.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКодВидаОперации(КодВидаОперацииОснования);
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйСчетФактура) Тогда
		ЭтотОбъект.КППКонтрагента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотОбъект.ИсправляемыйСчетФактура, "КППКонтрагента");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КППКонтрагента) И ЭтотОбъект.ДокументыОснования.Количество() > 0 Тогда
		ЭтотОбъект.КППКонтрагента = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузополучатель");
	КонецЕсли;
	
	Если ЭтотОбъект.Исправление Тогда		
		ЭтотОбъект.НомерИсправления = НомерИсправленияСФ + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКодВидаОперации(КодВидаОперацииОснования = Неопределено) Экспорт
	
	лКлючАлгоритма = "Документ_СчетФактураВыданный_МодульОбъекта_УстановитьКодВидаОперации";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////// 
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Если ВерсияПостановления <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если Исправление ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда		
		Если НЕ КодВидаОперацииОснования = Неопределено Тогда
			КодВидаОперации = КодВидаОперацииОснования;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
				
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		
		КодВидаОперации = "02";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда	
		КодВидаОперации = "05";		
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Для Каждого СтрокаТабличнойЧасти ИЗ ДокументыОснования Цикл
			КодВидаОперации = "";
			Если ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				//ИЛИ ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
				КодВидаОперации = "03";
			ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				КодВидаОперации = "04";			
			Иначе
				КодВидаОперации = "01";
			КонецЕсли;
			
		КонецЦикла;
		
		Если КодВидаОперации = "" Тогда
			КодВидаОперации = "01";
		КонецЕсли;

	Иначе
		
		КодВидаОперации = "01";		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределениеПараметровСчетаФактуры(ЗаполнятьРеквизитыСчетаФактуры = Ложь) Экспорт
	
	лКлючАлгоритма = "Документ_СчетФактураВыданный_МодульОбъекта_ОпределениеПараметровСчетаФактуры";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////// 
	
	Если ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		// Основание не выбрано, параметры не определяем
		СуммаДокумента = 0;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаОснования Из ДокументыОснования Цикл
		Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;	
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И ПараметрыСФ.РеквизитыОснований.Количество() <> 0 Тогда
		
		Для Каждого Основание Из ДокументыОснования Цикл
			
			СтрокаСРеквизитами = ПараметрыСФ.РеквизитыОснований.Найти(Основание.ДокументОснование, "ДокументОснование");
			Если СтрокаСРеквизитами <> Неопределено Тогда
				Если Основание.СуммаУвеличение <> СтрокаСРеквизитами.СуммаУвеличение Тогда
					Основание.СуммаУвеличение = СтрокаСРеквизитами.СуммаУвеличение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаУменьшение <> СтрокаСРеквизитами.СуммаУменьшение Тогда
					Основание.СуммаУменьшение = СтрокаСРеквизитами.СуммаУменьшение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаНДСУвеличение <> СтрокаСРеквизитами.СуммаНДСУвеличение Тогда
					Основание.СуммаНДСУвеличение = СтрокаСРеквизитами.СуммаНДСУвеличение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаНДСУменьшение <> СтрокаСРеквизитами.СуммаНДСУменьшение Тогда
					Основание.СуммаНДСУменьшение = СтрокаСРеквизитами.СуммаНДСУменьшение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если ЗаполнятьРеквизитыСчетаФактуры Тогда
					Если Основание.НомерИсходногоДокумента <> СтрокаСРеквизитами.НомерИсходногоДокумента Тогда
						Основание.НомерИсходногоДокумента = СтрокаСРеквизитами.НомерИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.ДатаИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсходногоДокумента Тогда
						Основание.ДатаИсходногоДокумента = СтрокаСРеквизитами.ДатаИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.УчитыватьИсправлениеИсходногоДокумента <> СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента Тогда
						Основание.УчитыватьИсправлениеИсходногоДокумента = СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.НомерИсправленияИсходногоДокумента <> СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента Тогда
						Основание.НомерИсправленияИсходногоДокумента = СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.ДатаИсправленияИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента Тогда
						Основание.ДатаИсправленияИсходногоДокумента = СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыСФ.РеквизитыОснований.Количество() > 1 Тогда
			Если Не СводныйКорректировочный Тогда
				СводныйКорректировочный = Истина;
			КонецЕсли;
		Иначе
			Если СводныйКорректировочный Тогда
				СводныйКорректировочный = Ложь;
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если СводныйКорректировочный Тогда
			СводныйКорректировочный = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	РеквизитыОбновлены  = Ложь;
	
	Если не ПараметрыСФ.Организация = Неопределено 
		и не ПараметрыСФ.Организация = Организация 
		Тогда
		Номер = "";
		Организация		  = ПараметрыСФ.Организация;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если не ПараметрыСФ.Контрагент = Неопределено 
		и не ПараметрыСФ.Контрагент = Контрагент 
		Тогда
		Контрагент		  = ПараметрыСФ.Контрагент;
		// при изменении контрагента нужно изменить значение КППКонтрагента, но не в случае исправления - КППКонтрагента берется из исправляемого счета-фактуры
		Если НЕ ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
			КППКонтрагента = "";
		КонецЕсли;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если не ПараметрыСФ.Договор = Неопределено 
		и не ПараметрыСФ.Договор = ДоговорКонтрагента 
		Тогда
		ДоговорКонтрагента		  = ПараметрыСФ.Договор;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если не СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента    = ПараметрыСФ.СуммаДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если не ПараметрыСФ.ВалютаДокумента = Неопределено 
		и не ВалютаДокумента = ПараметрыСФ.ВалютаДокумента 
		Тогда
		ВалютаДокумента   = ПараметрыСФ.ВалютаДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Если СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение Тогда
			СуммаУвеличение = ПараметрыСФ.СуммаУвеличение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		Если СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение Тогда
			СуммаУменьшение = ПараметрыСФ.СуммаУменьшение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		Если СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение Тогда
			СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		Если СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение Тогда
			СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЭтоНовый() И ВерсияПостановления = 2 Тогда
		УстановитьКодВидаОперации();
	КонецЕсли;
	
	Если ВерсияПостановления = 2 Тогда
		
		Если СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента Тогда
			СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
			РеквизитыОбновлены  = Истина;
		КонецЕсли; 
		
		Если СчетФактураБезНДС <> ПараметрыСФ.СчетФактураБезНДС Тогда
			СчетФактураБезНДС = ПараметрыСФ.СчетФактураБезНДС;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если Ложь Тогда
		РезультатПоискаИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(
			ДокументыОснования[0].ДокументОснование.ИсправляемыйДокументРеализации, "СчетФактураВыданный");
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	Если ИсправляемыйСчетФактура <> РезультатПоискаИсправляемыйСчетФактура Тогда
		ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(КППКонтрагента) И ДокументыОснования.Количество() > 0 Тогда
		ОснованиеДокумент = ДокументыОснования[0].ДокументОснование;
		ОбновлятьКППКонтрагента = (НЕ ТипЗнч(ОснованиеДокумент) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		Если ОбновлятьКППКонтрагента Тогда
			КППКонтрагентаНовый = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ОснованиеДокумент, "Грузополучатель");
			Если НЕ ПустаяСтрока(КППКонтрагентаНовый) Тогда
				КППКонтрагента = КППКонтрагентаНовый;
				РеквизитыОбновлены	= Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыОбновлены 
		И ДополнительныеСвойства.Свойство("СообщитьОбИзмененииРеквизитов")
		И ДополнительныеСвойства.СообщитьОбИзмененииРеквизитов Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Реквизиты документа """ + Ссылка + """ перезаполнены автоматически");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактурыСписка, ЭтоИсправление = Ложь) Экспорт
	
	СписокТипов = Новый Массив;
	
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное"));
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	Иначе
		// Типы документов оплаты исключаются из состава доступных типом.
		// Дополним типами, не выбираемыми вручную
		СписокТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатковНДС"));
		
		СписокТипов = Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);//.Типы();
		СписокТипов = СписокТипов.Типы();
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

Функция ПроверитьДатуСчетаФактуры(СообщениеПользователю) Экспорт
	
	лКлючАлгоритма = "Документ_СчетФактураВыданный_МодульОбъекта_ПроверитьДатуСчетаФактуры";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////	
	
	СписокДокументов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// 	Для счетов-фактур, введенных по отчету комиссионера соответствие дат не проверяем
	Если ТипЗнч(СписокДокументов[0]) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		И УчетНДС.ПолучитьВерсиюПостановления(Дата) = 2 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	СообщениеПользователю = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(ДокументОснованиеСФ.Ссылка) КАК ПредставлениеДокумента,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ) < НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаСФМеньше,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаНеРавнаСФ
	               |ИЗ
	               |	Документ." + СписокДокументов[0].Метаданные().Имя + " КАК ДокументОснованиеСФ
	               |ГДЕ
	               |	ДокументОснованиеСФ.Ссылка В (&СписокДокументов)";
								  
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Результат.Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Если Результат.ДатаНеРавнаСФ Тогда
			СообщениеПользователю = "Дата счета-фактуры не равна дате документа-основания";
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Пока Результат.Следующий() Цикл
			Если Результат.ДатаСФМеньше Тогда
				СообщениеПользователю = СообщениеПользователю + Символы.ПС + Результат.ПредставлениеДокумента;
			КонецЕсли;
		КонецЦикла;
		Если СообщениеПользователю <> "" Тогда
			СообщениеПользователю = "Дата счета-фактуры меньше даты документов-оснований:" + СообщениеПользователю;
			Возврат Ложь;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьВозможностьЗаписиСФ(Отказ, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	лКлючАлгоритма = "Документ_СчетФактураВыданный_МодульОбъекта_ПроверитьВозможностьЗаписиСФ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////	
	
	Отказ = Ложь;
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ВидСчетаФактуры, ПометкаУдаления, Контрагент, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура", 
		ВидСчетаФактуры, Ложь, Контрагент, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура);
		
	Если Исправление Тогда
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если НЕ СуществующийСФ = Неопределено Тогда
			Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СуществующийСФ, "НомерИсправления, ИсправляемыйСчетФактура"); 
			Если Реквизиты.НомерИсправления = НомерИсправления
				И Реквизиты.ИсправляемыйСчетФактура = ИсправляемыйСчетФактура Тогда
				
				СтрокаСообщения = "На основании документа «" + ИсправляемыйСчетФактура + "» уже введен исправленный счет-фактура "
				+ Символы.ПС + "«" +Строка(СуществующийСФ) + "» с номером исправления «" + НомерИсправления + "»";
				
				Отказ = Истина;
				Возврат СтрокаСообщения;
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Если Ложь Тогда
		//// Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
		//СтруктураОтбора.Вставить("СтавкиНДС", Авансы.ВыгрузитьКолонку("СтавкаНДС"));
		//СтруктураОтбора.Вставить("Контрагент", Контрагент);
		//
		//Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		//	СтруктураОтбора.Вставить("Дата", Дата);
		//КонецЕсли; 
		//			
		//СуществующийСФ = Неопределено;
		//ИсключитьСФ = Новый Массив;
		//ИсключитьСФ.Добавить(Ссылка);
		//СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, ИсключитьСФ);
		//Пока СуществующийСФ <> Неопределено Цикл
		//	СтавкиНДС = "";
		//	СтрокиКУдалению = Новый Массив;
		//	Для Каждого СтрокаТаблицы Из СуществующийСФ.Авансы Цикл
		//		СтавкиНДС = СтавкиНДС + ?(СтавкиНДС = "", "", ", ") + СтрокаТаблицы.СтавкаНДС;
		//		Если УдалятьЛишниеСтроки Тогда
		//			СтрокиОтбора = Авансы.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицы.СтавкаНДС));
		//			Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
		//				СтрокиКУдалению.Добавить(СтрокаОтбора);
		//			КонецЦикла;
		//			СтрокиКУдалению = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтрокиКУдалению);
		//		КонецЕсли;
		//	КонецЦикла;
		//	СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура на аванс 
		//	|по договору «"+ДоговорКонтрагента+"» со ставками НДС "+СтавкиНДС+":"+Символы.ПС
		//	+ " - «"+ Строка(СуществующийСФ)+"»";
		//	
		//	Если УдалятьЛишниеСтроки Тогда
		//		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		//			Авансы.Удалить(СтрокаКУдалению);
		//		КонецЦикла;                                                         
		//		Сумма = Авансы.Итог("Сумма");
		//		СуммаДокумента = Сумма;
		//	КонецЕсли;
		//	Отказ = Отказ Или Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
		//	ИсключитьСФ.Добавить(СуществующийСФ);
		//	СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, ИсключитьСФ);
		//КонецЦикла;
	Иначе
		СтрокаСообщенияНеНуженСчетФактура = "";
		Для каждого ТекущееОснование Из ДокументыОснования Цикл
			
			Попытка ВидДокумента = ТекущееОснование.ДокументОснование.Метаданные().Имя Исключение КонецПопытки;
			Если ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
				Продолжить;
			КонецЕсли;
			
			//Проверка наличия других счетов-фактур на основании документа
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
			
			Если не СуществующийСФ = неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения +Символы.ПС+" - "+?(ДокументыОснования.Количество()>1," строка № "+ТекущееОснование.НомерСтроки+": для «"+ТекущееОснование.ДокументОснование+"» зарегистрирован счет-фактура ","")+" «"+СуществующийСФ+"»";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Запись еще одного документа ""Счет-фактура выданный"" не допускается!"
	КонецЕсли;
	Если Не ПустаяСтрока(СтрокаСообщенияНеНуженСчетФактура) Тогда
		СтрокаСообщения = СтрокаСообщения + СтрокаСообщенияНеНуженСчетФактура;
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()

Процедура УстановитьПризнакВыставлен() Экспорт
	
	лКлючАлгоритма = "Документ_СчетФактураВыданный_МодульОбъекта_ПроверитьВозможностьЗаписиСФ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////// 
	
	Если СчетФактураНеВыставляется Тогда
		Выставлен = Ложь;
		ДатаВыставления = '00010101';
		Возврат;
	Иначе
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			СтруктураЗапроса = ДокументОснование;
		Иначе
			СтруктураЗапроса = Новый Структура("Организация,Контрагент", Организация, Контрагент);
		КонецЕсли;	
		
		Если УчетНДС.НаличиеСоглашенияОбменаЭД(СтруктураЗапроса) Тогда
			КодСпособаВыставления = 2;
			Выставлен = Ложь;
			ДатаВыставления = '00010101';
		Иначе
			КодСпособаВыставления = 1;
			Выставлен = Истина;
			ДатаВыставления = ?(Дата = '00010101', ОбщегоНазначения.ПолучитьРабочуюДату(), Дата);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ

#Если Клиент Тогда
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	ИначеЕсли СформированПриВводеНачальныхОстатковНДС Тогда
		Предупреждение("Печать сформированных при вводе начальных остатков документов не поддерживается!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ИмяМакета, "СчетФактура") <> 0 Тогда
		
		ДанныеДляПечати     = Неопределено;
		УчетнаяПолитика     = Неопределено;
		
		СобратьДанныеДляПечати(ДанныеДляПечати, УчетнаяПолитика);
		
		ТабДокумент = ПечатьСчетаФактуры1137(ДанныеДляПечати);
		
	ИначеЕсли Найти(ИмяМакета, "УниверсальныйПередаточныйДокумент") <> 0 Тогда
		
		Если Дата < УчетНДС.ДатаНачалаПримененияУПД() Тогда
			Предупреждение("Применение формы универсального передаточного (отгрузочного) документа возможно только с "+УчетНДС.ДатаНачалаПримененияУПД(Истина)+"!");
			Возврат;
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			Предупреждение("Форма универсального передаточного (отгрузочного) документа не предназначена для корректировочных счетов-фактур!");
			Возврат;
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			Предупреждение("Форма универсального передаточного документа не применяется для счетов-фактур на аванс");
			Возврат;
		КонецЕсли;

		Если ПометкаУдаления Тогда
			Предупреждение("Форма универсального передаточного (отгрузочного) документа не предназначена для помеченных на удаление документов!");
			Возврат;
		КонецЕсли;

		ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента();
		Если ДанныеДляПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ТабДокумент = ПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати);
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры

Функция ПечатьСчетаФактуры1137(ДанныеДляПечати, Макет = Неопределено) Экспорт

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0; //13;
	ТабДокумент.ПолеСлева  	= 0;
	ТабДокумент.ПолеСнизу  	= 13; //0;
	ТабДокумент.ПолеСправа 	= 0;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.АвтоМасштаб	= Истина;
	
	// +++ Карпычев (26.01.18)
	//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура1137";
	//Макет = ПолучитьМакет("СчетФактура1137");
	ПечатьИзВнешнейОбработки = Макет <> Неопределено;
	Если ДанныеДляПечати.Дата < УчетНДС.НачалоДействияПостановления981() Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура1137";
		Макет = ?(ПечатьИзВнешнейОбработки, Макет, ПолучитьОбщийМакет("СчетФактура1137"));
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура981";
		Макет = ?(ПечатьИзВнешнейОбработки, Макет, ПолучитьОбщийМакет("СчетФактура981"));
	КонецЕсли;
	// --- Карпычев (16.01.18)
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// +++ Карпычев (26.01.18)
	Если ДанныеДляПечати.Свойство("ПунктДоставки") И ЗначениеЗаполнено(ДанныеДляПечати.ПунктДоставки) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПунктДоставкиГород");
		ОбластьМакета.Параметры.ПунктДоставкиГород = ДанныеДляПечати.ПунктДоставки;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	Если ПечатьИзВнешнейОбработки Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИнформация");
		Если ДанныеДляПечати.Дата >= Дата(2017, 07, 01, 0, 0, 0) Тогда
			ОбластьМакета.Параметры.ПечПриложение               = "Приложение № 1 к постановлению Правительства Российской Федерации от 26 декабря 2011 г. № 1137";
			ОбластьМакета.Параметры.ПечПриложение1              = "(в редакции постановления Правительства Российской Федерации от 25 мая 2017г. № 625)";
			Если ДанныеДляПечати.Дата >= Дата(2017, 10, 01, 0, 0, 0) Тогда
				ОбластьМакета.Параметры.ПечПриложение1              = "(в редакции постановления Правительства Российской Федерации от 19.08.2017г. № 981)";
			КонецЕсли;	
		Иначе
			ОбластьМакета.Параметры.ПечПриложение              = "Приложение № 1";
			ОбластьМакета.Параметры.ПечПриложение1             = "к постановлению Правительства Российской Федерации от 26 декабря 2011 г. № 1137";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	// --- Карпычев (26.01.18)
	
	// Выводим шапку
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № " + Строка(НомерИсправления) 
			+ " от " + Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
 	Иначе 	
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
	КонецЕсли;
	
	// Поставщик
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		
	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: "	+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	
	ИндексПодразделения = 0;
	
	Если ИндексПодразделения <> 0 Тогда
		ДанныеДляПечати.Номер = ДанныеДляПечати.Номер + "/" + ИндексПодразделения;
	КонецЕсли;		
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	
	ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
		
	// Грузоотправитель и Грузополучатель
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: --";
		
	Иначе
		
		ТолькоУслуги = Истина;
		Для каждого СтрокаТовар Из ДанныеДляПечати.ТабличнаяЧасть Цикл
			Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаТовар.Товар.Услуга) Тогда
				ТолькоУслуги = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТолькоУслуги Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: --";
		Иначе
			СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
				?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
			СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
			
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "
				+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
				"--", 
				ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузоотправитель, Дата),
				"ПолноеНаименование,ЮридическийАдрес"));
				//?(ДанныеДляПечати.Грузоотправитель = "он же", 
				//	ДанныеДляПечати.Грузоотправитель, 
				//	ФормированиеПечатныхФорм.ОписаниеОрганизации(
				//		СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,")));
			
			Если ДанныеДляПечати.Свойство("АдресДоставки") 
				И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
				ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
					+ ДанныеДляПечати.АдресДоставки;
					//+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					//ДанныеДляПечати.АдресДоставки,
					//ФормированиеПечатныхФорм.ОписаниеОрганизации(
					//	СведенияОГрузополучателе, "ПолноеНаименование") + ", " + ДанныеДляПечати.АдресДоставки);
			Иначе
				ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					"--",
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
			КонецЕсли;
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
				
		КонецЕсли;
	
	КонецЕсли;

	СтрокаПоДокументу = "";
	Для каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
		
		Если НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента)
			И НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) Тогда
		    Продолжить;
		КонецЕсли;
		СтрокаПоДокументу = СтрокаПоДокументу
			+ ?(ПустаяСтрока(СтрокаПоДокументу), "К платежно-расчетному документу № ",", ")
			+ ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy") + " г.";
		
	КонецЦикла; 
	Если ПустаяСтрока(СтрокаПоДокументу) Тогда
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			СтрокаПоДокументу = "К платежно-расчетному документу № -- от --";
		Иначе
			СтрокаПоДокументу = "К платежно-расчетному документу №    от";
		КонецЕсли; 
	КонецЕсли; 
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	// Покупатель
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
	
	Если ЗначениеЗаполнено(КППКонтрагента) Тогда
		КПП = КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код "
		+ ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
		ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, 
		"");		
			
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Дополнительная подготовка данных для вывода в табличную часть
	
	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
 	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);

		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если НЕ Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
			Если Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строчка.ЕдиницаИзмерения) Тогда
			Строчка.Количество = 0;
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Количество = 0 Тогда
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2);
		КонецЕсли;
		
	КонецЦикла;
	    
	// +++ Карпычев (26.01.18)
	//ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС,
	//	|НомерГТД, ПредставлениеГТД, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны", 
	//	"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	КолонкиДляСвертки = ?(ВыборкаСтрокТовары.Колонки.Найти("Контрагент") <> Неопределено, "Контрагент,", "")
		+ "Товар, ТоварНаименование, ТоварКодТНВЭД, ТоварКод, ТоварАртикул, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС,"
		+ "НомерГТД, ПредставлениеГТД, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны";
	ВыборкаСтрокТовары.Свернуть(КолонкиДляСвертки, "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	// --- Карпычев (26.01.18)
	
	// Выводим строки таблицы
	
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		Иначе
			ОбластьМакета.Параметры.ТоварНаименование = ?(ПустаяСтрока(Строчка.ТоварАртикул), "", Строчка.ТоварАртикул + " ") + Строчка.ТоварНаименование;
		КонецЕсли;
		
		// +++ Карпычев (26.01.18)
		Если ДанныеДляПечати.Дата >= УчетНДС.НачалоДействияПостановления981() Тогда
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ТоварКодТНВЭД)
				ИЛИ Строчка.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
				ОбластьМакета.Параметры.ТоварКодТНВЭД = "--";
			КонецЕсли;
		КонецЕсли;
		// --- Карпычев (26.01.18)
		
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			ОбластьМакета.Параметры.Цена   	  = Строчка.Цена;
		Иначе
			ОбластьМакета.Параметры.Стоимость = 0;
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
		КонецЕсли;	
		
		ОбластьМакета.Параметры.Всего     = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
		
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
		КонецЕсли;
		
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ОбластьМакета.Параметры.Акциз = "без акциза";
		КонецЕсли;	
		
		Если ВРег(Строка(Строчка.ПредставлениеСтраны)) = "РОССИЯ" 
			ИЛИ ВРег(Строка(Строчка.ПредставлениеСтраны)) = "РОССИЙСКАЯ ФЕДЕРАЦИЯ"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.СтраныМира.Россия Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		Иначе
			Если ЗначениеЗаполнено(Строчка.СтранаПроисхождения) Тогда
				ОбластьМакета.Параметры.ПредставлениеСтраны  = СокрЛП(Строчка.СтранаПроисхождения.Наименование);
			КонецЕсли;
		КонецЕсли; 
	
		// Проставляем прочерки в незаполненные графы в соответствии с Постановлением
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			
			ОбластьМакета.Параметры.Количество = "--";
			ОбластьМакета.Параметры.Цена       = "--";
			ОбластьМакета.Параметры.Стоимость  = "--";
			ОбластьМакета.Параметры.Акциз      = "--";
			
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
				ОбластьМакета.Параметры.Количество = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмерения = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
				ОбластьМакета.Параметры.Цена = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеСтраны) Тогда
				ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
				ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
				ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
		
	// Выводим строку "Всего к оплате"
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ВыборкаСтрокТовары.Итог("СуммаБезНДС");
	КонецЕсли;
	Если СчетФактураБезНДС Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ВыборкаСтрокТовары.Итог("СуммаНДС");
	КонецЕсли;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ВыборкаСтрокТовары.Итог("СуммаСНДС");
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим подвал
    	
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	Если ЭтоПБОЮЛ(ДанныеДляПечати.Поставщик) Тогда
		ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера = "";
	КонецЕсли;
	
	// +++ Карпычев (26.01.18)
	//ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(
	//		СведенияОПоставщике, "Свидетельство,");
	Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	Если Свидетельство = "свидетельство  от" Или Свидетельство="" Тогда
		//Рудаков из Элма (http://my.part-kom.ru/Tasks/Task/Execute/10572992)
		//Свидетельство = "";
		Свидетельство="ОГРН "+ДанныеДляПечати.Организация.ОГРН+" от "+Строка(Формат(ДанныеДляПечати.Организация.ОГРНДата,"ДЛФ=дд"));
	КонецЕсли;
	ОбластьМакетаПодвал.Параметры.Свидетельство = Свидетельство;
	// --- Карпычев (26.01.18)
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	ТабДокумент.ВерхнийКолонтитул.Выводить          = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 1;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	//ТабДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаголовокДляПечати;
	//ТабДокумент.ВерхнийКолонтитул.ТекстСправа  = "Лист [&НомерСтраницы]";
	ТабДокумент.НижнийКолонтитул.ТекстСправа           = ЗаголовокДляПечати + ".Страница [&НомерСтраницы] из [&СтраницВсего]";

	Возврат ТабДокумент;

КонецФункции  // ПечатьСчетаФактуры1137()

#КонецЕсли

Функция ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеСчетФактуры = Неопределено) Экспорт
	
	//Семенов И.П. 11.03.2019 XX-764(
	лКлючАлгоритма = "Документ_СчетФактураВыданный_МодульОбъекта_ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;
	///////////////////////////////////////////
	//)Семенов И.П.
	
	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
 	
	СобратьДанныеДляПечати(ДанныеДляПечати, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",			Дата);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Исправление", 	 		Исправление);
	ДанныеДляПечати.Вставить("НомерИсправления", 		НомерИсправления);
	ДанныеДляПечати.Вставить("ДоговорКонтрагента", 		ДоговорКонтрагента);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 		СчетФактураБезНДС);
	ДанныеДляПечати.Вставить("КППКонтрагента", 	 		КППКонтрагента);
	ДанныеДляПечати.Вставить("ДокументОснование", 	 	ДокументОснование);
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора", Неопределено);
	
	УчетНДС.СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати);
	
	ТипОснования = ТипЗнч(ДанныеДляПечати.ДокументОснование);
	
	ДанныеДляПечати.Вставить("СтатусУПД", 1);
	
	Основание = Строка(ДоговорКонтрагента);
	Если ДанныеДляПечати <> Неопределено И ДанныеДляПечати.Свойство("Доверенность") И ЗначениеЗаполнено(ДанныеДляПечати.Доверенность) Тогда
		ДанныеДляПечати.Вставить("Основание", Основание + ?(ПустаяСтрока(Основание), "", "; ") + ДанныеДляПечати.Доверенность);
		
	ИначеЕсли ДанныеСчетФактуры.Свойство("ДокументОснование") И ЗначениеЗаполнено(ДанныеСчетФактуры.ДокументОснование) 
		И ТипЗнч(ДанныеСчетФактуры.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")  Тогда
		
		ПТУ = ДанныеСчетФактуры.ДокументОснование;
		Основание = ОбщегоНазначения.СформироватьЗаголовокДокумента(ПТУ)+" (вх.№ "+ПТУ.НомерВходящегоДокумента+" от "+Формат(ПТУ.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")+"г.)";
		ДанныеДляПечати.Вставить("Основание", Основание);
	Иначе
		ДанныеДляПечати.Вставить("Основание", Основание);
	КонецЕсли;
	
	// Дата совершения факта хозяйственной жизни. Не может быть ранее даты составления УПД.
	ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", 	Дата);
	Попытка
		Если ТипЗнч(ДанныеСчетФактуры.ДокументСсылка)=ТипЗнч(Документы.ВозвратТоваровПоставщику.ПустаяСсылка()) Тогда 
			Для Каждого Стр Из ДанныеДляПечати.ТабличнаяЧасть Цикл
				//Семенов И.П. 07.03.2019 XX-764(
				Если ЗначениеЗаполнено(Стр.НомерГТД) Тогда 
					Продолжить;
				КонецЕсли;
				//)Семенов И.П.
				Если ТипЗнч(ДанныеСчетФактуры.ДокументОснование)=ТипЗнч(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка()) Тогда 
					СТРТТ=ДанныеСчетФактуры.ДокументОснование.Товары.НайтиСтроки(Новый Структура("Номенклатура",Стр.Товар));
					Если Не СТРТТ.Количество()=0 Тогда 
						ГТД=СТРТТ[0].НомерГТД;
						Страна=СТРТТ[0].СтранаПроисхождения;
						Стр.СтранаПроисхождения=Страна;
						Стр.СтранаПроисхожденияКод=Страна.Код;
						Стр.НомерГТД=ГТД;
					КонецЕсли;	
				Иначе
					Если НЕ ЗначениеЗаполнено(Стр.НомерГТД) Тогда
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ПартииТоваровОбороты.СтрокаПрихода.НомерГТД,
						|	ПартииТоваровОбороты.СтрокаПрихода.СтранаПроисхождения
						|ИЗ
						|	РегистрНакопления.ПартииТоваров.Обороты(, , Регистратор, ) КАК ПартииТоваровОбороты
						|ГДЕ
						|	ПартииТоваровОбороты.Регистратор = &Регистратор"; 
						Запрос.УстановитьПараметр("Регистратор", ДанныеСчетФактуры.ДокументОснование.Ссылка);
						Рез=Запрос.Выполнить().Выгрузить();
						ЕСли НЕ рез.Количество()=0 Тогда 
							Стр.СтранаПроисхождения=Рез[0].СтранаПроисхождения;
							Стр.СтранаПроисхожденияКод=Рез[0].СтранаПроисхождения.Код;
							Стр.НомерГТД=Рез[0].НомерГТД;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
	Исключение
		//Сообщить("!");
	КонецПопытки;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати, ТабДокумент = Неопределено, Макет = Неопределено) Экспорт

	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	// +++ Карпычев (29.01.18)
	//Если Дата < УчетНДС.НачалоДействияПостановления981() Тогда
	//	Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент");
	//	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	//Иначе
	//	Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент981");
	//	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент981";
	//КонецЕсли;
	если типзнч(ДанныеДляПечати.ДокументОснование)=типзнч(Документы.ВозвратТоваровПоставщику.ПустаяСсылка()) Тогда 
		ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	Иначе 
		ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
	КонецЕсли;	
	ТабДокумент.АвтоМасштаб                             = Истина;
	ТабДокумент.КоличествоЭкземпляров                   = 2;
	ТабДокумент.ПолеСверху                              = 10;
	ТабДокумент.ПолеСлева                               = 0;
	ТабДокумент.ПолеСнизу                               = 0;
	ТабДокумент.ПолеСправа                              = 0;
	ТабДокумент.ТолькоПросмотр                          = Истина;
	ТабДокумент.ВерхнийКолонтитул.Выводить          	= Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница 	= 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	НомерНаПечатьСтрокой 	= ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеДляПечати);
	ДатаНаПечатьСтрокой  	= Формат(ДанныеДляПечати.Дата, "ДФ='дд ММММ гггг'") + " г.";
	ЗаголовокДляПечати 	 	= "Универсальный передаточный документ № " + НомерНаПечатьСтрокой + " от " +  ДатаНаПечатьСтрокой;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева   			= ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа  			= "Лист [&НомерСтраницы]";
	ПечатьИзВнешнейОбработки = Макет <> Неопределено;
	Если ДанныеДляПечати.Дата < УчетНДС.НачалоДействияПостановления981() Тогда
		//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
		Макет = ?(ПечатьИзВнешнейОбработки, Макет, ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент"));
	Иначе
		//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент981";
		Макет = ?(ПечатьИзВнешнейОбработки, Макет, ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент981"));
	КонецЕсли;
	// --- Карпычев (29.01.18)
	
	УчетНДС.ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);	
	УчетНДС.ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	Возврат ТабДокумент;

КонецФункции

Процедура СобратьДанныеДляПечати(ДанныеДляПечати, УчетнаяПолитика) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Корректировочный = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	ДанныеДляПечати = Неопределено;
	
	Для Каждого СтрДокОснования Из ДокументыОснования Цикл
		// Получить экземпляр документа на печать
		Если Не ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда
			Продолжить;
		//ИначеЕсли Не СтрДокОснования.ДокументОснование.Проведен Тогда
		//	Продолжить;
		КонецЕсли;
		
		ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиПоДокументу(СтрДокОснования.ДокументОснование);
		
		// ЛНА, XX-1363, Подмена полей: ПредставлениеПоставщика, АдресПоставщика, ИННПоставщика, ПредставлениеГрузополучателя   
		лОрганизацияПолучатель = Неопределено;
		Если Организация.Префикс = "АК" Тогда 
			Если Типзнч(ДокументОснование)=ТипЗнч(документы.ВозвратТоваровПоставщику.Пустаяссылка()) Тогда 
				Если ДокументОснование.ДокументОснование.ЭтоМФП Тогда
					лОрганизацияПолучатель = Справочники.Организации.ПолучитьПоКонтрагенту(Контрагент);
				КонецЕсли;
			Иначе 	
				Если ДокументОснование.ЭтоМФП Тогда
					лОрганизацияПолучатель = Справочники.Организации.ПолучитьПоКонтрагенту(Контрагент);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(лОрганизацияПолучатель) 
			И лОрганизацияПолучатель.Франчайзи  Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т1.СтрокаПрихода.ДоговорКонтрагента.Владелец.ИНН КАК Инн,
			|	Т1.СтрокаПрихода.ДоговорКонтрагента.Владелец.КПП КАК Кпп,
			|	ВЫРАЗИТЬ(Т1.СтрокаПрихода.ДоговорКонтрагента.Владелец.НаименованиеПолное КАК СТРОКА(150)) КАК Поставщик
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Т1
			|ГДЕ
			|	Т1.Ссылка = &Ссылка";			
			лСтрокаПоставщиков	= "";
			лСтрокаИНН 			= "";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				лСтрокаПоставщиков = лСтрокаПоставщиков + ?(лСтрокаПоставщиков = "", "", ",") + Выборка.Поставщик;				
				
				ТекИНН = Выборка.ИНН;
				Если ЗначениеЗаполнено(Выборка.КПП) Тогда
					ТекИНН = ТекИНН + "/" + Выборка.КПП;
				КонецЕсли;
				
				лСтрокаИНН = лСтрокаИНН + ?(лСтрокаИНН = "", "", ",") + ТекИНН;
			КонецЦикла;
			
			СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);			
			ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
			
			ЭкземплярДанныхДляПечати.Вставить("ПредставлениеПоставщика", лСтрокаПоставщиков);			
			ЭкземплярДанныхДляПечати.Вставить("ИННПоставщика", лСтрокаИНН);			
			ЭкземплярДанныхДляПечати.Вставить("АдресПоставщика", "");			
			ЭкземплярДанныхДляПечати.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);			
		КонецЕсли;
		
		Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
			
			// +++ Карпычев (26.01.18)
			ЭкземплярДанныхДляПечати.Вставить("ВидСчетаФактуры", ВидСчетаФактуры);
			ЭкземплярДанныхДляПечати.Вставить("ИдентификаторГосКонтракта", УчетНДС.ТекстЗаголовкаИДГК(Дата) + ИдентификаторГосКонтракта);
			// --- Карпычев (26.01.18)
			
			Если ДанныеДляПечати = Неопределено Тогда
				ДанныеДляПечати = ЭкземплярДанныхДляПечати;
			Иначе
				Для Каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
					
					Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
						СтараяТабЧасть = ДанныеДляПечати.ТабличнаяЧасть;
						НоваяТабЧасть = СтрДанных.Значение;
						
						Для Каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
							СтрокаТабЧасти = СтараяТабЧасть.Добавить();
							
							Для Каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
								Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
									СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
								КонецЕсли;
							КонецЦикла;
							
						КонецЦикла;
						
					Иначе
						Если Не ДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
							// Если данный параметр для печати шапки документа еще не  определен - то определяем его
							ДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
			
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДатОплат = ДатаНомерДокументовОплаты.Выгрузить();
	ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
	СтрокиКУдалению = Новый массив();
	Для каждого СтрокаОплат Из ТаблицаДатОплат Цикл
		Если не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
			и ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
			СтрокиКУдалению.Добавить(СтрокаОплат);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДатОплат.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
	
	Если Корректировочный И ДанныеДляПечати <> Неопределено Тогда
		
		КолонкиГруппировок = ""
		+"Номенклатура,"
		// +++ Карпычев (26.01.18)
		+"ТоварКодТНВЭД,"
		+"ТоварКодТНВЭДДоИзменения,"
		// --- Карпычев (26.01.18)
		+"НаименованиеТовара,"
		+"Серия,"
		+"Характеристика,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЦенаДоИзменения,"	
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ДанныеДляПечати.ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
	КонецЕсли; 	

КонецПроцедуры

Функция СобратьДанныеДляПечатиПоДокументу(ДокОснование, ДанныеСчетаФактуры = Неопределено) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Корректировочный = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;

	ТипОснования = ТипЗнч(ДокОснование);
	
	Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщику(ДокОснование);
	Иначе
		ЭкземплярДанныхДляПечати = Неопределено;
	КонецЕсли;
	
	Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
		Если ВерсияПостановления = 2 И ВалютаДокумента <> мВалютаРегламентированногоУчета И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ПерезаполнитьСуммыПоУЕвРублях(ЭкземплярДанныхДляПечати, ДокОснование);
			ЭкземплярДанныхДляПечати.Валюта = мВалютаРегламентированногоУчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСчетаФактуры <> Неопределено Тогда
		ЭкземплярДанныхДляПечати.Вставить("Номер",            ДанныеСчетаФактуры.Номер);
		ЭкземплярДанныхДляПечати.Вставить("Дата",             ДанныеСчетаФактуры.Дата);
		ЭкземплярДанныхДляПечати.Вставить("НомерПРД",         ДанныеСчетаФактуры.НомерПлатежноРасчетногоДокумента);
		ЭкземплярДанныхДляПечати.Вставить("ДатаПРД",          ДанныеСчетаФактуры.ДатаПлатежноРасчетногоДокумента);
	КонецЕсли;
	
	Возврат ЭкземплярДанныхДляПечати;
	
КонецФункции

Функция ЭтоПБОЮЛ(Организация)
	
	Возврат Ложь;//(Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
КонецФункции

Функция СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.ДоговорКонтрагентаВзаиморасчетов.Организация КАК Организация,
	               |	РеализацияТоваровУслуг.ДоговорКонтрагентаВзаиморасчетов.Организация КАК Поставщик,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ""он же""
	               |		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	               |	КОНЕЦ КАК Грузоотправитель,
	               |	РеализацияТоваровУслуг.Склад.Подразделение КАК Подразделение,
	               |	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
				   |	РеализацияТоваровУслуг.Контрагент.Код КАК КодКлиента,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА РеализацияТоваровУслуг.Контрагент
	               |		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
	               |	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	               |	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
				   |	РеализацияТоваровУслуг.ДоговорКонтрагентаВзаиморасчетов.Организация.УчитыватьНДС КАК УчитыватьНДС_,
	               |	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	РеализацияТоваровУслуг.АдресДоставки,
	               |	РеализацияТоваровУслуг.ОтпускРазрешил,
	               |	РеализацияТоваровУслуг.ОтпускПроизвел,
	               |	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	               |	РеализацияТоваровУслуг.ДоверенностьНомер,
	               |	РеализацияТоваровУслуг.ДоверенностьДата,
	               |	РеализацияТоваровУслуг.ДоверенностьВыдана,
	               |	РеализацияТоваровУслуг.ДоверенностьЧерезКого
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	// +++ Карпычев (26.01.18)
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	//|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	//|	NULL КАК СтранаПроисхождения,
	//|	NULL КАК ПредставлениеСтраны,
	//|	NULL КАК НомерГТД,
	//|	NULL КАК ПредставлениеГТД,
	//|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	//|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	//|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	//|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	//|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	//|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	//|	NULL КАК Характеристика,
	//|	NULL КАК Серия,
	//|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	//|	1 КАК НомерТЧ,
	//|	NULL КАК СтранаПроисхожденияКод,
	//|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	//|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК ТоварКод,
	//|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ТоварАртикул
	//|ИЗ
	//|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//|ГДЕ
	//|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерТЧ,
	//|	НомерСтроки";
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	регПартииТоваров.Номенклатура,
	|	МАКСИМУМ(спрИдентификаторыСтрокПриходов.Ссылка) КАК СтрокаПрихода
	|ПОМЕСТИТЬ втПартии
	|ИЗ
	|	РегистрНакопления.ПартииТоваров КАК регПартииТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокПриходов КАК спрИдентификаторыСтрокПриходов
	|		ПО регПартииТоваров.СтрокаПрихода = спрИдентификаторыСтрокПриходов.Ссылка
	|ГДЕ
	|	регПартииТоваров.Регистратор = &ДокументОснование
	|	И спрИдентификаторыСтрокПриходов.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И спрИдентификаторыСтрокПриходов.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И спрИдентификаторыСтрокПриходов.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	регПартииТоваров.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК ТоварНаименованиеКраткое,
	|	"""" КАК ТоварКодТНВЭД,
	|	тПартии.СтрокаПрихода.СтранаПроисхождения КАК СтранаПроисхождения,
	|	тПартии.СтрокаПрихода.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	тПартии.СтрокаПрихода.НомерГТД КАК НомерГТД,
	|	тПартии.СтрокаПрихода.НомерГТД.Представление КАК ПредставлениеГТД,
	|	тПартии.СтрокаПрихода.НомерГТД КАК РегистрационныйНомерТД,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	|	NULL КАК Характеристика,
	|	NULL КАК Серия,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	1 КАК НомерТЧ,
	|	тПартии.СтрокаПрихода.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ТоварКод,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	РеализацияТоваровУслугТовары.Номенклатура.Изготовитель.Наименование КАК ПроизводительНаименование
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПартии КАК тПартии
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = тПартии.Номенклатура
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|	И РеализацияТоваровУслугТовары.Количество > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	"""",
	|	"""",
	|	NULL,
	|	NULL,
	|	"""",
	|	"""",
	|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков = &ПустаяЕдиница
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
	|	КОНЕЦ,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслугУслуги.НомерСтроки,
	|	2,
	|	NULL,
	|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Код,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул,
	|	""""
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|	И РеализацияТоваровУслугУслуги.Количество > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	// --- Карпычев (26.01.18)
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);			
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("АдресДоставки",    Шапка.АдресДоставки);
	ДанныеДляПечати.Вставить("КодКлиента",       Шапка.КодКлиента);
	ДанныеДляПечати.Вставить("ШК",       		 ОбщегоНазначения.СформироватьШК_дляДок(ЭтотОбъект.ДокументОснование.Ссылка));
	ДанныеДляПечати.Вставить("НомДок",       	 ДокументОснование.Номер);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары 		  = Ложь;
	ЕстьУслуги 		  = Ложь;

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		ЕстьТовары = ЕстьТовары ИЛИ (ВыборкаСтрокТовары.НомерТЧ = 1);
		ЕстьУслуги = ЕстьУслуги ИЛИ (ВыборкаСтрокТовары.НомерТЧ = 2);
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Если НЕ ПустаяСтрока(СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)) Тогда
			ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Иначе
			ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименованиеКраткое);
		КонецЕсли;
		Строчка.ТоварНаименование   = ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена = ?(ВыборкаСтрокТовары.Цена <> 0, ?(НЕ Шапка.СуммаВключаетНДС,?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.Сумма / ВыборкаСтрокТовары.Количество),ВыборкаСтрокТовары.Цена),
		                 ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0)) / ВыборкаСтрокТовары.Количество));
		Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		Строчка.СуммаНДС            = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СуммаНДС, 0); //ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;
		Строчка.Характеристика      = ВыборкаСтрокТовары.Характеристика;
		// +++ Карпычев (26.01.18)
		Строчка.ТоварКодТНВЭД             = ВыборкаСтрокТовары.ТоварКодТНВЭД;
		Строчка.РегистрационныйНомерТД    = ВыборкаСтрокТовары.РегистрационныйНомерТД;
		Строчка.ПроизводительНаименование = ВыборкаСтрокТовары.ПроизводительНаименование;
		// --- Карпычев (26.01.18)
		
	КонецЦикла;

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЕстьТовары И ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтпускПроизвел);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
	ИначеЕсли ЕстьУслуги Тогда
		Если ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 			Шапка.ОтпускРазрешил);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 		Шапка.ДатаДокумента);
		Иначе	
			ДанныеДляПечати.Вставить("ФИОКладовщика", 				Руководители.Руководитель);
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", 		Руководители.РуководительДолжность);
		КонецЕсли;
	КонецЕсли;
	ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", Неопределено);
	
	Если ЗначениеЗаполнено(Шапка.ДоверенностьНомер) ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьДата)
		ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьЧерезКого) Тогда
		Доверенность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'по доверенности №%1 от %2 выданной %3 %4'"),
		Шапка.ДоверенностьНомер, Формат(Шапка.ДоверенностьДата, "ДЛФ=ДД"),
		Шапка.ДоверенностьВыдана, Шапка.ДоверенностьЧерезКого);
		ДанныеДляПечати.Вставить("Доверенность", Доверенность);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// +++ Карпычев (14.02.18)
// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщику(ДокОснование)

	//Семенов И.П. 11.03.2019 XX-764(
	лКлючАлгоритма = "Документ_СчетФактураВыданный_МодульОбъекта_СобратьДанныеПоВозвратуТоваровПоставщику";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////
	//)Семенов И.П.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыДокОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокОснование, "Дата, Склад");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РеквизитыДокОснования.Склад);
	Запрос.УстановитьПараметр("ДатаСреза", 			РеквизитыДокОснования.Дата);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	               |	ВозвратТоваровПоставщику.Организация,
	               |	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ""он же""
	               |		ИНАЧЕ ВозвратТоваровПоставщику.Грузоотправитель
	               |	КОНЕЦ КАК Грузоотправитель,
	               |	ВозвратТоваровПоставщику.Склад.Подразделение КАК Подразделение,
	               |	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
				   |	ВозвратТоваровПоставщику.Контрагент.Код КАК КодКлиента,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ВозвратТоваровПоставщику.Контрагент
	               |		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	               |	ВозвратТоваровПоставщику.ВалютаДокумента КАК Валюта,
	               |	ВозвратТоваровПоставщику.Организация.УчитыватьНДС КАК УчитыватьНДС,
	               |	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, НЕОПРЕДЕЛЕНО) КАК ОтветственноеЛицо
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	               |		ПО ВозвратТоваровПоставщику.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	// +++ Карпычев (14.02.18)
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	//|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	//|	ВЫБОР
	//|		КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	//|			ТОГДА ВозвратТоваровПоставщикуТовары.КодТНВЭД
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	//|	КОНЕЦ КАК ТоварКодТНВЭД,
	//|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	//|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	//|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	//|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	//|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.РегистрационныйНомер КАК РегистрационныйНомерТД,
	//|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	//|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	//|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	//|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	//|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	//|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	//|	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	//|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры КАК Серия,
	//|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	//|	1 КАК НомерТЧ,
	//|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	//|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	//|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК ТоварКод,
	//|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул
	//|ИЗ
	//|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	//|ГДЕ
	//|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерТЧ,
	//|	НомерСтроки";
	//Семенов И.П. 07.03.2019 XX-764(
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	регПартииТоваров.Номенклатура,
	//|	МАКСИМУМ(спрИдентификаторыСтрокПриходов.Ссылка) КАК СтрокаПрихода
	//|ПОМЕСТИТЬ втПартии
	//|ИЗ
	//|	РегистрНакопления.ПартииТоваров КАК регПартииТоваров
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокПриходов КАК спрИдентификаторыСтрокПриходов
	//|		ПО регПартииТоваров.СтрокаПрихода = спрИдентификаторыСтрокПриходов.Ссылка
	//|ГДЕ
	//|	регПартииТоваров.Регистратор = &ДокументОснование
	//|	И спрИдентификаторыСтрокПриходов.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	//|	И спрИдентификаторыСтрокПриходов.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	//|	И спрИдентификаторыСтрокПриходов.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	регПартииТоваров.Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	//|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	//|	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование КАК ТоварНаименованиеКраткое,
	//|	"""" КАК ТоварКодТНВЭД,
	//|	ВЫБОР
	//|		КОГДА ВозвратТоваровПоставщикуТовары.СтранаПрисхождения ЕСТЬ NULL
	//|				ИЛИ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	//|			ТОГДА тПартии.СтрокаПрихода.СтранаПроисхождения
	//|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения
	//|	КОНЕЦ КАК СтранаПроисхождения,
	//|	ВЫБОР
	//|		КОГДА ВозвратТоваровПоставщикуТовары.СтранаПрисхождения ЕСТЬ NULL
	//|				ИЛИ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	//|			ТОГДА тПартии.СтрокаПрихода.СтранаПроисхождения.НаименованиеПолное
	//|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения.НаименованиеПолное
	//|	КОНЕЦ КАК ПредставлениеСтраны,
	//|	ВЫБОР
	//|		КОГДА ВозвратТоваровПоставщикуТовары.НомерГТД ЕСТЬ NULL
	//|				ИЛИ ВозвратТоваровПоставщикуТовары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	//|			ТОГДА тПартии.СтрокаПрихода.НомерГТД
	//|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.НомерГТД
	//|	КОНЕЦ КАК НомерГТД,
	//|	ВЫБОР
	//|		КОГДА ВозвратТоваровПоставщикуТовары.НомерГТД ЕСТЬ NULL
	//|				ИЛИ ВозвратТоваровПоставщикуТовары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	//|			ТОГДА тПартии.СтрокаПрихода.НомерГТД.Представление
	//|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.НомерГТД.Представление
	//|	КОНЕЦ КАК ПредставлениеГТД,
	//|	ВЫБОР
	//|		КОГДА ВозвратТоваровПоставщикуТовары.НомерГТД ЕСТЬ NULL
	//|				ИЛИ ВозвратТоваровПоставщикуТовары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	//|			ТОГДА тПартии.СтрокаПрихода.НомерГТД
	//|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.НомерГТД
	//|	КОНЕЦ КАК РегистрационныйНомерТД,
	//|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	//|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	//|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	//|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	//|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	//|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	//|	NULL КАК Характеристика,
	//|	NULL КАК Серия,
	//|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	//|	1 КАК НомерТЧ,
	//|	ВЫБОР
	//|		КОГДА ВозвратТоваровПоставщикуТовары.СтранаПрисхождения ЕСТЬ NULL
	//|				ИЛИ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	//|			ТОГДА тПартии.СтрокаПрихода.СтранаПроисхождения.Код
	//|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения.Код
	//|	КОНЕЦ КАК СтранаПроисхожденияКод,
	//|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	//|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварКод,
	//|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул,
	//|	ВозвратТоваровПоставщикуТовары.Номенклатура.Изготовитель.Наименование КАК ПроизводительНаименование
	//|ИЗ
	//|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ втПартии КАК тПартии
	//|		ПО ВозвратТоваровПоставщикуТовары.Номенклатура = тПартии.Номенклатура
	//|ГДЕ
	//|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерТЧ,
	//|	НомерСтроки";
	//// --- Карпычев (14.02.18)
	
	//ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ПартииТоваров.Количество) КАК Количество,
	               |	ПартииТоваров.Номенклатура КАК Номенклатура,
	               |	ПартииТоваров.СтрокаПрихода.НомерГТД КАК НомерГТД,
	               |	ПартииТоваров.СтрокаПрихода.СтранаПроисхождения КАК СтранаПроисхождения,
	               |	ПартииТоваров.СтрокаПрихода.СтранаПроисхождения.НаименованиеПолное КАК СтранаПроисхожденияНаименованиеПолное,
	               |	ПартииТоваров.СтрокаПрихода.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
	               |ГДЕ
	               |	ПартииТоваров.Регистратор = &ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПартииТоваров.СтрокаПрихода.НомерГТД,
	               |	ПартииТоваров.Номенклатура,
	               |	ПартииТоваров.СтрокаПрихода.СтранаПроисхождения,
	               |	ПартииТоваров.СтрокаПрихода.СтранаПроисхождения.Код,
	               |	ПартииТоваров.СтрокаПрихода.СтранаПроисхождения.НаименованиеПолное
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Количество УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугТовары.СтрокаПрихода.НомерГТД КАК НомерГТД,
	               |	ПоступлениеТоваровУслугТовары.СтрокаПрихода.СтранаПроисхождения КАК СтранаПроисхождения,
	               |	ПоступлениеТоваровУслугТовары.СтрокаПрихода.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	               |	ПоступлениеТоваровУслугТовары.Номенклатура,
	               |	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
	               |	ПоступлениеТоваровУслугТовары.СтрокаПрихода.СтранаПроисхождения.НаименованиеПолное КАК СтранаПроисхожденияНаименованиеПолное
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |ГДЕ
	               |	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслугТовары.Номенклатура,
	               |	ПоступлениеТоваровУслугТовары.СтрокаПрихода.СтранаПроисхождения,
	               |	ПоступлениеТоваровУслугТовары.СтрокаПрихода.НомерГТД,
	               |	ПоступлениеТоваровУслугТовары.СтрокаПрихода.СтранаПроисхождения.Код,
	               |	ПоступлениеТоваровУслугТовары.СтрокаПрихода.СтранаПроисхождения.НаименованиеПолное
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Количество УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование КАК ТоварНаименованиеКраткое,
	               |	"""" КАК ТоварКодТНВЭД,
	               |	ВЫБОР
	               |		КОГДА (ВозвратТоваровПоставщикуТовары.СтранаПрисхождения ЕСТЬ NULL
	               |				ИЛИ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	               |				И ВозвратТоваровПоставщикуТовары.СтрокаПрихода <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	               |			ТОГДА ВозвратТоваровПоставщикуТовары.СтрокаПрихода.СтранаПроисхождения
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения
	               |	КОНЕЦ КАК СтранаПроисхождения,
	               |	ВЫБОР
	               |		КОГДА (ВозвратТоваровПоставщикуТовары.СтранаПрисхождения ЕСТЬ NULL
	               |				ИЛИ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	               |				И ВозвратТоваровПоставщикуТовары.СтрокаПрихода <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	               |			ТОГДА ВозвратТоваровПоставщикуТовары.СтрокаПрихода.СтранаПроисхождения.НаименованиеПолное
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения.НаименованиеПолное
	               |	КОНЕЦ КАК ПредставлениеСтраны,
	               |	ВЫБОР
	               |		КОГДА (ВозвратТоваровПоставщикуТовары.НомерГТД ЕСТЬ NULL
	               |				ИЛИ ВозвратТоваровПоставщикуТовары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))
	               |				И ВозвратТоваровПоставщикуТовары.СтрокаПрихода <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	               |			ТОГДА ВозвратТоваровПоставщикуТовары.СтрокаПрихода.НомерГТД
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.НомерГТД
	               |	КОНЕЦ КАК НомерГТД,
	               |	ВЫБОР
	               |		КОГДА (ВозвратТоваровПоставщикуТовары.НомерГТД ЕСТЬ NULL
	               |				ИЛИ ВозвратТоваровПоставщикуТовары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))
	               |				И ВозвратТоваровПоставщикуТовары.СтрокаПрихода <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	               |			ТОГДА ВозвратТоваровПоставщикуТовары.СтрокаПрихода.НомерГТД
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.НомерГТД.Представление
	               |	КОНЕЦ КАК ПредставлениеГТД,
	               |	ВЫБОР
	               |		КОГДА (ВозвратТоваровПоставщикуТовары.НомерГТД ЕСТЬ NULL
	               |				ИЛИ ВозвратТоваровПоставщикуТовары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))
	               |				И ВозвратТоваровПоставщикуТовары.СтрокаПрихода <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	               |			ТОГДА ВозвратТоваровПоставщикуТовары.СтрокаПрихода.НомерГТД
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.НомерГТД
	               |	КОНЕЦ КАК РегистрационныйНомерТД,
	               |	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	               |	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	               |	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	               |	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	               |	NULL КАК Характеристика,
	               |	NULL КАК Серия,
	               |	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	               |	1 КАК НомерТЧ,
	               |	ВЫБОР
	               |		КОГДА (ВозвратТоваровПоставщикуТовары.СтранаПрисхождения ЕСТЬ NULL
	               |				ИЛИ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	               |				И ВозвратТоваровПоставщикуТовары.СтрокаПрихода <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка)
	               |			ТОГДА ВозвратТоваровПоставщикуТовары.СтрокаПрихода.СтранаПроисхождения.Код
	               |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.СтранаПрисхождения.Код
	               |	КОНЕЦ КАК СтранаПроисхожденияКод,
	               |	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварКод,
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул,
	               |	ВозвратТоваровПоставщикуТовары.Номенклатура.Изготовитель.Наименование КАК ПроизводительНаименование
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	               |ГДЕ
	               |	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерТЧ,
	               |	НомерСтроки";
	
	Запрос.УстановитьПараметр("Поступление", ДокОснование.ДокументОснование);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаГТДИзПартий = РезультатыЗапроса[0].Выгрузить();
	ТаблицаГТДИзПартий.Индексы.Добавить("Номенклатура");
	ТаблицаГТДИзПТУ    = РезультатыЗапроса[1].Выгрузить();
	ТаблицаГТДИзПТУ.Индексы.Добавить("Номенклатура");
	ВыборкаСтрокТовары = РезультатыЗапроса[2].Выбрать();
	//)Семенов И.П.
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	//ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     УчетНДС.ОпределитьСчетФактураТребуется(ДокОснование)); // ЛНА XX-1678
	ДанныеДляПечати.Вставить("КодКлиента",       Шапка.КодКлиента);
	ДанныеДляПечати.Вставить("Комментарий",      ДокОснование.Комментарий);
	//ДанныеДляПечати.Вставить("ШК",       		 ОбщегоНазначения.СформироватьШК_дляДок(ДокументОснование));
	//ДанныеДляПечати.Вставить("НомДок",       	 ДокументОснование.Номер);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Если НЕ ПустаяСтрока(СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)) Тогда
			Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Иначе
			Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименованиеКраткое);
		КонецЕсли;		
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.РегистрационныйНомерТД = ВыборкаСтрокТовары.РегистрационныйНомерТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена; 
		//Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		//Строчка.СуммаНДС            = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СуммаНДС, 0);  //ВыборкаСтрокТовары.СуммаНДС;
		
		Строчка.СтавкаНДС           = ?(ДанныеДляПечати.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС); // ЛНА XX-1678
		Строчка.СуммаНДС            = ?(ДанныеДляПечати.УчитыватьНДС, ВыборкаСтрокТовары.СуммаНДС, 0); // ЛНА XX-1678
		
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;
		Строчка.ТоварКодТНВЭД       = ВыборкаСтрокТовары.ТоварКодТНВЭД;
		// +++ Карпычев (14.02.18)
		Строчка.ПроизводительНаименование = ВыборкаСтрокТовары.ПроизводительНаименование;
		// --- Карпычев (14.02.18)

		//Семенов И.П. 07.03.2019 XX-764(
		ПодобратьДанныеПоГТД(Товары, Строчка, ТаблицаГТДИзПТУ, ТаблицаГТДИзПартий);
		//)Семенов И.П.
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Попытка
		Если ТипЗнч(ДокОснование)=ТипЗнч(Документы.ВозвратТоваровПоставщику.ПустаяСсылка()) Тогда 
			Для Каждого Стр Из ДанныеДляПечати.ТабличнаяЧасть Цикл
				//Семенов И.П. 07.03.2019 XX-764(
				Если ЗначениеЗаполнено(Стр.НомерГТД) Тогда 
					Продолжить;
				КонецЕсли;
				//)Семенов И.П.
				Если ТипЗнч(ДокОснование.ДокументОснование)=ТипЗнч(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка()) Тогда 
					СТРТТ=ДокОснование.ДокументОснование.Товары.НайтиСтроки(Новый Структура("Номенклатура",Стр.Товар));
					Если Не СТРТТ.Количество()=0 Тогда 
						ГТД=СТРТТ[0].НомерГТД;
						Страна=СТРТТ[0].СтранаПроисхождения;
						Стр.СтранаПроисхождения=Страна;
						Стр.СтранаПроисхожденияКод=Страна.Код;
						Стр.НомерГТД=ГТД;
					КонецЕсли;	
				Иначе
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ПартииТоваровОбороты.СтрокаПрихода.НомерГТД,
					|	ПартииТоваровОбороты.СтрокаПрихода.СтранаПроисхождения
					|ИЗ
					|	РегистрНакопления.ПартииТоваров.Обороты(, , Регистратор, ) КАК ПартииТоваровОбороты
					|ГДЕ
					|	ПартииТоваровОбороты.Регистратор = &Регистратор"; 
					Запрос.УстановитьПараметр("Регистратор", ДокОснование.Ссылка);
					Рез=Запрос.Выполнить().Выгрузить();
					ЕСли НЕ рез.Количество()=0 Тогда 
						Стр.СтранаПроисхождения=Рез[0].СтранаПроисхождения;
						Стр.СтранаПроисхожденияКод=Рез[0].СтранаПроисхождения.Код;
						Стр.НомерГТД=Рез[0].НомерГТД;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
	Исключение
		//Сообщить("!");
	КонецПопытки;
	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.ОтветственноеЛицо) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтветственноеЛицо);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	КонецЕсли;

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщику()

//Семенов И.П. 07.03.2019 XX-764(
Процедура ПодобратьДанныеПоГТД(ТаблицаТовары, СтрокаТовары, ТаблицаГТДИзПТУ, ТаблицаГТДИзПартий)
	
	//Семенов И.П. 11.03.2019 XX-764(
	лКлючАлгоритма = "Документ_СчетФактураВыданный_МодульОбъекта_ПодобратьДанныеПоГТД";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////
	//)Семенов И.П.
	
	Если ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда 
		Возврат;
	КонецЕсли;

	ТаблицаДанныхГТД = ?(ТаблицаГТДИзПТУ.Количество()=0,ТаблицаГТДИзПартий,ТаблицаГТДИзПТУ);
	
	НайденныеСтроки = ТаблицаДанныхГТД.НайтиСтроки(Новый Структура("Номенклатура",СтрокаТовары.Товар));
	КоличествоСтрокДанных = НайденныеСтроки.Количество();
	
	Количество = СтрокаТовары.Количество;
	СуммаНДС   = СтрокаТовары.СуммаНДС;
	Сумма      = СтрокаТовары.Сумма;
	
	ТекущаяСтрокаТовары = СтрокаТовары;
	
	КоличествоВСтроках = 0;  
	СуммаНДСВСтроках   = 0;
	СуммаВСтроках      = 0;
	
	Для Каждого СтрокаДанных Из НайденныеСтроки Цикл 
		
		Если КоличествоСтрокДанных = 1 
			ИЛИ ТекущаяСтрокаТовары.Количество <= СтрокаДанных.Количество Тогда 
			
			ТекущаяСтрокаТовары.СтранаПроисхождения    = СтрокаДанных.СтранаПроисхождения;
			ТекущаяСтрокаТовары.СтранаПроисхожденияКод = СтрокаДанных.СтранаПроисхожденияКод;
			ТекущаяСтрокаТовары.ПредставлениеСтраны    = ?(Не ЗначениеЗаполнено(СтрокаДанных.СтранаПроисхожденияНаименованиеПолное), СтрокаДанных.СтранаПроисхождения, СтрокаДанных.СтранаПроисхожденияНаименованиеПолное);
			ТекущаяСтрокаТовары.НомерГТД               = СтрокаДанных.НомерГТД;
			ТекущаяСтрокаТовары.ПредставлениеГТД       = СтрокаДанных.НомерГТД;
			ТекущаяСтрокаТовары.РегистрационныйНомерТД = СтрокаДанных.НомерГТД;
			
			СтрокаДанных.Количество = СтрокаДанных.Количество - ТекущаяСтрокаТовары.Количество;
			КоличествоВСтроках = КоличествоВСтроках + ТекущаяСтрокаТовары.Количество;
			СуммаНДСВСтроках   = СуммаНДСВСтроках   + ТекущаяСтрокаТовары.СуммаНДС;
			СуммаВСтроках      = СуммаВСтроках      + ТекущаяСтрокаТовары.Сумма;
			
			Прервать;
			
		ИначеЕсли СтрокаДанных.Количество > 0 Тогда
			
			ТекущаяСтрокаТовары.СтранаПроисхождения    = СтрокаДанных.СтранаПроисхождения;
			ТекущаяСтрокаТовары.СтранаПроисхожденияКод = СтрокаДанных.СтранаПроисхожденияКод;
			ТекущаяСтрокаТовары.ПредставлениеСтраны    = ?(Не ЗначениеЗаполнено(СтрокаДанных.СтранаПроисхожденияНаименованиеПолное), СтрокаДанных.СтранаПроисхождения, СтрокаДанных.СтранаПроисхожденияНаименованиеПолное);
			ТекущаяСтрокаТовары.НомерГТД               = СтрокаДанных.НомерГТД;
			ТекущаяСтрокаТовары.ПредставлениеГТД       = СтрокаДанных.НомерГТД;
			ТекущаяСтрокаТовары.РегистрационныйНомерТД = СтрокаДанных.НомерГТД;
			
			ТекущаяСтрокаТовары.Количество = СтрокаДанных.Количество;
			ТекущаяСтрокаТовары.СуммаНДС   = СуммаНДС * СтрокаДанных.Количество/Количество;
			ТекущаяСтрокаТовары.Сумма      = Сумма    * СтрокаДанных.Количество/Количество;
			
			КоличествоВСтроках = КоличествоВСтроках + ТекущаяСтрокаТовары.Количество;
			СуммаНДСВСтроках   = СуммаНДСВСтроках   + ТекущаяСтрокаТовары.СуммаНДС;
			СуммаВСтроках      = СуммаВСтроках      + ТекущаяСтрокаТовары.Сумма;

			СтрокаДанных.Количество = 0;
			
			Если КоличествоВСтроках <> Количество Тогда 
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ТекущаяСтрокаТовары);
				НоваяСтрокаТовары.Количество = Количество - КоличествоВСтроках;
				НоваяСтрокаТовары.СуммаНДС   = СуммаНДС * НоваяСтрокаТовары.Количество/Количество;
				НоваяСтрокаТовары.Сумма      = Сумма    * НоваяСтрокаТовары.Количество/Количество;
			
				ТекущаяСтрокаТовары = НоваяСтрокаТовары;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоСтрокДанных <> 0
		И КоличествоВСтроках <> Количество Тогда 
		
		СуммаНДСВСтроках   = СуммаНДСВСтроках - ТекущаяСтрокаТовары.СуммаНДС;
		СуммаВСтроках      = СуммаВСтроках    - ТекущаяСтрокаТовары.Сумма;
		
		ТекущаяСтрокаТовары.Количество = ТекущаяСтрокаТовары.Количество + Количество - КоличествоВСтроках;
		ТекущаяСтрокаТовары.СуммаНДС   = СуммаНДС * ТекущаяСтрокаТовары.Количество/Количество;
		ТекущаяСтрокаТовары.Сумма      = Сумма    * ТекущаяСтрокаТовары.Количество/Количество;

		СуммаНДСВСтроках   = СуммаНДСВСтроках + ТекущаяСтрокаТовары.СуммаНДС;
		СуммаВСтроках      = СуммаВСтроках    + ТекущаяСтрокаТовары.Сумма;
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаТовары.НомерГТД) Тогда 
			СтрокаДанных = ТаблицаДанныхГТД[0];
			ТекущаяСтрокаТовары.СтранаПроисхождения    = СтрокаДанных.СтранаПроисхождения;
			ТекущаяСтрокаТовары.СтранаПроисхожденияКод = СтрокаДанных.СтранаПроисхожденияКод;
			ТекущаяСтрокаТовары.ПредставлениеСтраны    = ?(Не ЗначениеЗаполнено(СтрокаДанных.СтранаПроисхожденияНаименованиеПолное), СтрокаДанных.СтранаПроисхождения, СтрокаДанных.СтранаПроисхожденияНаименованиеПолное);
			ТекущаяСтрокаТовары.НомерГТД               = СтрокаДанных.НомерГТД;
			ТекущаяСтрокаТовары.ПредставлениеГТД       = СтрокаДанных.НомерГТД;
			ТекущаяСтрокаТовары.РегистрационныйНомерТД = СтрокаДанных.НомерГТД;			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрокаТовары.СуммаНДС = ТекущаяСтрокаТовары.СуммаНДС + СуммаНДС - СуммаНДСВСтроках;
	ТекущаяСтрокаТовары.Сумма    = ТекущаяСтрокаТовары.Сумма + Сумма - СуммаВСтроках;
	
	
КонецПроцедуры
//)Семенов И.П.

Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("ТоварКод");
	Товары.Колонки.Добавить("ТоварАртикул");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");
	Товары.Колонки.Добавить("НомерСтроки");
	Товары.Колонки.Добавить("Характеристика");
	// +++ Карпычев (26.01.18)
	Товары.Колонки.Добавить("Контрагент");
	Товары.Колонки.Добавить("ТоварКодТНВЭД");
	Товары.Колонки.Добавить("РегистрационныйНомерТД");
	Товары.Колонки.Добавить("ПроизводительНаименование");
	// --- Карпычев (26.01.18)

	Возврат Товары;

КонецФункции

Процедура ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование)
	
	ДокументОбъект = ТекущееОснование.ПолучитьОбъект();
	ЕстьДокументыРасчетов = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") <> Неопределено;
	
	// Вычислим курс документа для печати
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета
		И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
		И ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом 
		И ЕстьДокументыРасчетов Тогда
				
		ИмяДокумента = ДокументОбъект.Метаданные().Имя;		
		
		ЗапросКурсАванса = Новый Запрос;
		ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", ТекущееОснование);
		ЗапросКурсАванса.Текст =
		"ВЫБРАТЬ
		|	Док.СуммаВзаиморасчетов,
		|	Док.СуммаРегл
		|ИЗ 
		|	Документ." + ИмяДокумента + ".ДокументыРасчетовСКонтрагентом КАК Док
		|ГДЕ Док.Ссылка = &ДокументСсылка
		|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
		
		Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			КурсОплаты                 = ?(Выборка.СуммаВзаиморасчетов = 0, 0, Выборка.СуммаРегл/Выборка.СуммаВзаиморасчетов);
			ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			ВыборкаСуммаРегл           = Выборка.СуммаРегл;
		Иначе
			КурсОплаты                 = 0;
			ВыборкаСуммаВзаиморасчетов = 0;
			ВыборкаСуммаРегл           = 0;
		КонецЕсли;
		
		СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект),
		ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов,
		ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета), ТекущееОснование.КурсВзаиморасчетов,
		ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета), ТекущееОснование.КратностьВзаиморасчетов);
		НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
		Если НеоплаченнаяСумма > 0 Тогда
			КурсДляПечати = (НеоплаченнаяСумма * ТекущееОснование.КурсВзаиморасчетов + ВыборкаСуммаРегл)/(НеоплаченнаяСумма + ВыборкаСуммаВзаиморасчетов);
		Иначе
			КурсДляПечати = КурсОплаты;
		КонецЕсли;
		
		Если КурсДляПечати = 0 Тогда
			Курс = ТекущееОснование.КурсВзаиморасчетов;
			Кратность = ТекущееОснование.КратностьВзаиморасчетов;
		Иначе
			Курс = КурсДляПечати;
			Кратность = 1;
		КонецЕсли;
		
	Иначе
		
		Курс = ЗаполнениеДокументов.КурсДокумента(ТекущееОснование.ПолучитьОбъект(), мВалютаРегламентированногоУчета);
		Кратность = ЗаполнениеДокументов.КратностьДокумента(ТекущееОснование.ПолучитьОбъект(), мВалютаРегламентированногоУчета);
		
	КонецЕсли;
			
	Для Каждого СтрокаСчетаФактуры Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		
		СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.Сумма * Курс / Кратность;
		СтрокаСчетаФактуры.СуммаНДС = СтрокаСчетаФактуры.СуммаНДС * Курс / Кратность;
		
	КонецЦикла;
	ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения(0, "Цена");
		
КонецПроцедуры

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("СчетФактура1137", "Счет-фактура");
	СтруктураМакетов.Вставить("УниверсальныйПередаточныйДокумент981", "Универсальный передаточный документ (УПД)");
	
	Возврат СтруктураМакетов;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	СозданВ77 = Ложь;
КонецПроцедуры

мДокументЗаполнен = Истина;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();