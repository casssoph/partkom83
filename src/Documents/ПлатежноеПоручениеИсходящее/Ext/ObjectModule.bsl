Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

//Определение периода движений документа
Перем ДатаДвижений;

Перем РасчетыВозврат;

Перем мСтруктураПараметровДенежныхСредств;
Перем АвтоЗначенияРеквизитов Экспорт;

Перем мИмяРеквизитаКодаТерритории Экспорт;
Перем мМенеджерОбъекта;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция ПолучитьЗаписиПоследовательности(вхПоследовательность) Экспорт
	
	лМетаданныеПоследовательности = Неопределено;	
	Если (ТипЗнч(вхПоследовательность) = Тип("Строка")) тогда
		лМетаданныеПоследовательности = Метаданные.Последовательности.Найти(вхПоследовательность);
	ИначеЕсли (ТипЗнч(вхПоследовательность) = Тип("ОбъектМетаданных")) И Метаданные.Последовательности.Содержит(вхПоследовательность) тогда
		лМетаданныеПоследовательности = вхПоследовательность;
	КонецЕсли;
	
	Если (лМетаданныеПоследовательности = Неопределено) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМетаданныеДокумента = Метаданные();
	Если НЕ лМетаданныеПоследовательности.Документы.Содержит(лМетаданныеДокумента) тогда
		ВызватьИсключение "[ПолучитьДанныеДляПоследовательности]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лЭтоОтменаПроведения = Ложь;
	лРежимЗаписи = Неопределено;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("РежимЗаписи", лРежимЗаписи) тогда
		лЭтоОтменаПроведения = (лРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	лРезультат = ОбщегоНазначения.СоздатьСтруктуруПоследовательности(лМетаданныеПоследовательности);
	Если (лМетаданныеПоследовательности = Метаданные.Последовательности.ПоРасчетамСКонтрагентами) тогда
		
		лМассивВидовОпераций = Новый Массив;
		лМассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
		лМассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
		лМассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами);
		лМассивВидовОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами);
		
		Если НЕ лЭтоОтменаПроведения
			И (лМассивВидовОпераций.Найти(ЭтотОбъект.ВидОперации) <> Неопределено)
			И (ЭтотОбъект.Дата >= ПараметрыСеанса.ДатаНачалаРаботыВзаиморасчеты) тогда
			Для Каждого лСтрокаРасшифровкаПлатежа Из ЭтотОбъект.РасшифровкаПлатежа цикл
				
				Если НЕ ОбщегоНазначения.ИспользоватьПогашениеПоРасчетнымДокументам(лСтрокаРасшифровкаПлатежа.ДоговорКонтрагента) тогда
					Продолжить;
				КонецЕсли;
				
				лСтрокаРезультат = лРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(лСтрокаРезультат, лСтрокаРасшифровкаПлатежа);
				лСтрокаРезультат.Период = ЭтотОбъект.Дата;
				лСтрокаРезультат.Регистратор = ЭтотОбъект.Ссылка;
			КонецЦикла;
		КонецЕсли;
		
		Результат = ПроведениеДокументовКлиентСервер.ПолучитьМоментыВремени(лМетаданныеПоследовательности, лРезультат);
		
	Иначе
		
		ВызватьИсключение "[ПолучитьЗаписиПоследовательности]: неправильный параметр номер 1.";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Если Клиент Тогда

// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() И Не ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПечать=ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, , Ложь);
	
	Если Прав(НомерПечать,3)="000" И Дата < '20120709' Тогда
		Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	МесяцПрописью   = СчетОрганизации.МесяцПрописью;
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(НЕ ЗначениеЗаполнено(СчетОрганизации.БанкДляРасчетов), СчетОрганизации.Банк, СчетОрганизации.БанкДляРасчетов);
	БанкКонтрагента = ?(НЕ ЗначениеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);

	Обл.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
	Обл.Параметры.ДатаДокумента           = Формат(Дата,ФорматДаты);
	Обл.Параметры.ВидПлатежа              = ВидПлатежа;
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	Обл.Параметры.ПлательщикИНН           = "ИНН " + ?(ПустаяСтрока(ИННПлательщика), Организация.ИНН, СокрЛП(ИННПлательщика));
	Обл.Параметры.ПлательщикКПП           = "КПП " + ?(ПустаяСтрока(КППплательщика),?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,"0",""),СокрЛП(КППплательщика));	
	
	Если СчетОрганизации.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондент="";
	Иначе	
		СтрКорреспондент= " р/с " + СчетОрганизации.НомерСчета+ " в " + СчетОрганизации.Банк + " " + СчетОрганизации.Банк.Город;	
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ТекстПлательщикПечать=?(ПустаяСтрока(Организация.НаименованиеПлательщикаПриПеречисленииНалогов),
								?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика)),Организация.НаименованиеПлательщикаПриПеречисленииНалогов+СтрКорреспондент);
	Иначе
        ТекстПлательщикПечать=?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика));
		
	КонецЕсли;
	
	Обл.Параметры.Плательщик              = ТекстПлательщикПечать;
	Обл.Параметры.БанкПлательщика         = "" + БанкОрганизации + " " + БанкОрганизации.Город;

	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(СчетОрганизации);

	Обл.Параметры.БикБанкаПлательщика     = БанкОрганизации.Код;
	Обл.Параметры.СчетБанкаПлательщика    = БанкОрганизации.КоррСчет;
	
	Если НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Контрагент.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),"",СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Контрагент.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		
	Иначе
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Организация.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),"",СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Организация.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		
	КонецЕсли;
		
	Обл.Параметры.БанкПолучателя          = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	Обл.Параметры.БикБанкаПолучателя      = БанкКонтрагента.Код;
	Обл.Параметры.СчетБанкаПолучателя     = БанкКонтрагента.КоррСчет;

	Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента);

	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	Обл.Параметры.Очередность             = ОчередностьПлатежа;
	Обл.Параметры.СрокПлатежа             = "";
	Обл.Параметры.ИдентификаторПлатежа 	  = ИдентификаторПлатежа;

	Если Дата < ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа() Тогда
		// Идентификатор можно указывать в печатной форме платежного поручения с 31.03.2014
		Обл.Параметры.ИдентификаторПлатежа = "";
	КонецЕсли;

	// Реквизиты для перечисления в бюджет
	
	Если ПеречислениеВБюджет Тогда
		
		// Подготовим унифицированные данные
		РеквизитыПлатежаВБюджет = Документы.ПлатежноеПоручениеИсходящее.РеквизитыПлатежаВБюджет(ЭтотОбъект);
		
		// В незаполненных полях проставим "0"
		ПлатежиВБюджетКлиентСервер.ОтметитьНезаполненныеЗначения(РеквизитыПлатежаВБюджет);
		
		Если ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ЭтотОбъект.Дата) Тогда
			Если Дата >= ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа126н() Тогда
				РеквизитыПлатежаВБюджет.ТипПлатежа = "0";
			КонецЕсли;
			
			// Проверим правильность оформления
			
			// Проверку выполняем только после даты вступления в силу 107н, 
			// так как до этой даты был переходный период,
			// в течение которого непонятно, выполнение каких правил контролировать
			РезультатПроверки = ПлатежиВБюджетКлиентСервер.ПроверитьЗаполнение(РеквизитыПлатежаВБюджет, 
				Документы.ПлатежноеПоручениеИсходящее.КонтекстПлатежногоДокумента(ЭтотОбъект));
			
			Для Каждого Ошибка Из РезультатПроверки.Ошибки Цикл
				Сообщить(Ошибка.Описание, СтатусСообщения.Важное);
			КонецЦикла;
		КонецЕсли;
		
		// Напечатаем
		ДанныеДляПечати = Новый Структура;
		Документы.ПлатежноеПоручениеИсходящее.УстановитьЗначенияРеквизитовПлатежаВБюджет(
			ДанныеДляПечати,         // Кладем сюда с именами из макета
			РеквизитыПлатежаВБюджет, // Берем отсюда, здесь имена из модуля ПлатежиВБюджетКлиентСервер
			Истина); // Добавляем новые свойства в ДанныеДляПечати
		Обл.Параметры.Заполнить(ДанныеДляПечати);
		
	КонецЕсли;

	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение","Платежное поручение");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = СчетОрганизации.ВалютаДенежныхСредств.ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0")-1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплата()

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");
	//СтруктураПолей.Вставить("ДатаОплаты","Не указана дата оплаты документа банком!");
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		СтруктураПолей.Вставить("ФизЛицо","Не указано подотчетное лицо");
		СтруктураПолей.Вставить("ВалютаВзаиморасчетовРаботника","Не указана валюта взаиморасчетов с подотчетным лицом");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	СтруктураПолей = Новый Структура("Организация, СуммаДокумента");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента", "Не указан банковский счет, на который производится перевод!");
	Иначе
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)

	Если НЕ ЗначениеЗаполнено(Значение) Тогда 

		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗначение()

Функция СформироватьСтруктуруКурсыВалютУпр()

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета").Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", ВалютаДокумента.Код);

	СтруктураКурсыВалют = УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);

	Возврат СтруктураКурсыВалют;

КонецФункции

// Процедура выполняет заполнение суммы документа и суммы взаиморасчетов по регистру расчетов с подотчетными лицами
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ФизЛицо",              ФизЛицо);
	Запрос.УстановитьПараметр("РасчетныйДокумент",    РасчетныйДокументРаботника);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовРаботника);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			,
	|			Организация = &Организация
	|				И ФизЛицо = &ФизЛицо
	|				И РасчетныйДокумент = &РасчетныйДокумент
	|				И Валюта = &ВалютаВзаиморасчетов) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток < 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
		    ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		    СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		    СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения_типовая(Основание)

	Если Основание = Неопределено ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) Тогда
		возврат;
	КонецЕсли;

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	УправлениеДенежнымиСредствами.ЗаполнитьРасходПоОснованию(
		ЭтотОбъект, Основание, 
		УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
			глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
  ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("НовыеЗначения",
	Новый Соответствие);
	ЭтотОбъект.ДополнительныеСвойства.Контроль.НовыеЗначения.Вставить(
	Метаданные.Последовательности.ПоРасчетамСКонтрагентами, 
	мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(ЭтотОбъект.Ссылка,
	Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьПроведение(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// + 20170307 Пушкин	
	// + 20170301 Пушкин
	//Процедура ПриЗаписи(Отказ)
		
		// + 20170220 Пушкин
		Если  ВидОперации = Перечисления.ВидыОперацийППИсходящее.СнятиеСДепозита тогда
			ПараметрыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РасшифровкаПлатежа[0].ДоговорКонтрагента, "ВидДоговора,ДоговорНаОферту");
			Если  ПараметрыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком тогда
				Если НЕ ПараметрыДоговора.ДоговорНаОферту тогда
					//#Если Клиент Тогда
					//	Сообщить("Вид операции не соответствует Договору");
					//	Если НЕ Проведен тогда
					//		Отказ = Истина;
					//	КонецЕсли;
					//#Иначе
						ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
					//#КонецЕсли
				КонецЕсли;
				// + 20170228 Пушкин		
			Иначе	
				//Если  НЕ ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() тогда
					//#Если Клиент Тогда
					//	Если НЕ Проведен тогда
					//		Отказ = Истина;
					//	КонецЕсли;
					//	Сообщить("Вид операции не соответствует виду Договора");
					//#Иначе
						//ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();	
						РасшифровкаПлатежа[0].ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					//#КонецЕсли
				//КонецЕсли;
				// - 20170228 Пушкин	
			КонецЕсли;	
		КонецЕсли;
		// - 20170220 Пушкин
	//КонецПроцедуры
	// - 20170301 Пушкин
	// - 20170307 Пушкин

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из РасшифровкаПлатежа Цикл
		
		// - 20170307 Пушкин		
		//Стр.ДоговорКонтрагента = ДоговорКонтрагента;		
		// - 20170307 Пушкин
		
		Если Стр.КурсВзаиморасчетов = 0 Тогда 
			Стр.КурсВзаиморасчетов = 1;
		КонецЕсли;
		Если Стр.КратностьВзаиморасчетов = 0 Тогда
			Стр.КратностьВзаиморасчетов = 1;
		КонецЕсли;
#Если Клиент Тогда
		Если НЕ ЗначениеЗаполнено(Стр.СтатьяДвиженияДенежныхСредств) Тогда
			Сообщить("не заполнена статья движения денежных средств");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
#КонецЕсли
	КонецЦикла;

	СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если (РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения) тогда
		ЭтотОбъект.ДополнительныеСвойства.Вставить("Контроль", Новый Структура);
		Если НЕ ЭтоНовый() тогда
			ЭтотОбъект.ДополнительныеСвойства.Контроль.Вставить("СтарыеЗначения", Новый Соответствие);
			ЭтотОбъект.ДополнительныеСвойства.Контроль.СтарыеЗначения.Вставить(
			Метаданные.Последовательности.ПоРасчетамСКонтрагентами, мМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(
			ЭтотОбъект.Ссылка, Метаданные.Последовательности.ПоРасчетамСКонтрагентами));
		КонецЕсли;
	КонецЕсли;

	СтруктураДействий = Новый Структура("ПроверитьНомер, УстановитьДоговор");
	УправлениеДенежнымиСредствами.ВыполнитьДействияПередЗаписьюПлатежногоДокумента(ЭтотОбъект, СтруктураДействий, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	лПараметры = Новый Структура;
	лПараметры.Вставить("ДанныеОбъекта", ЭтотОбъект.ДополнительныеСвойства);
	мМенеджерОбъекта.ВыполнитьОтменуПроведения(Ссылка, Отказ, лПараметры);
	
	Если Не глЗначениеПеременной("НовоеПроведениеПоВзаиморасчетам") Тогда 
		РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъект(ЭтотОбъект, "ПоРасчетамСКонтрагентами");
	КонецЕсли;
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		ВалютаВзаиморасчетовРаботника = ДанныеЗаполнения.ВалютаВзаиморасчетовРаботника;
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		ВидОперации = ДанныеЗаполнения.ВидОперации;
		ВидПеречисленияВБюджет = ДанныеЗаполнения.ВидПеречисленияВБюджет;
		ВидПлатежа = ДанныеЗаполнения.ВидПлатежа;
		ДатаПогашенияАванса = ДанныеЗаполнения.ДатаПогашенияАванса;
		ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		ИдентификаторБП = ДанныеЗаполнения.ИдентификаторБП;
		ИдентификаторПлатежа = ДанныеЗаполнения.ИдентификаторПлатежа;
		ИННПлательщика = ДанныеЗаполнения.ИННПлательщика;
		ИННПолучателя = ДанныеЗаполнения.ИННПолучателя;
		КодБК = ДанныеЗаполнения.КодБК;
		КодОКАТО = ДанныеЗаполнения.КодОКАТО;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Контрагент = ДанныеЗаполнения.Контрагент;
		КПППлательщика = ДанныеЗаполнения.КПППлательщика;
		КПППолучателя = ДанныеЗаполнения.КПППолучателя;
		НазначениеПлатежа = ДанныеЗаполнения.НазначениеПлатежа;
		Организация = ДанныеЗаполнения.Организация;
		ОчередностьПлатежа = ДанныеЗаполнения.ОчередностьПлатежа;
		ПеречислениеВБюджет = ДанныеЗаполнения.ПеречислениеВБюджет;
		Подразделение = ДанныеЗаполнения.Подразделение;
		ПоказательДаты = ДанныеЗаполнения.ПоказательДаты;
		ПоказательНомера = ДанныеЗаполнения.ПоказательНомера;
		ПоказательОснования = ДанныеЗаполнения.ПоказательОснования;
		ПоказательПериода = ДанныеЗаполнения.ПоказательПериода;
		ПоказательТипа = ДанныеЗаполнения.ПоказательТипа;
		РасчетныйДокументРаботника = ДанныеЗаполнения.РасчетныйДокументРаботника;
		РегионДляБюджета = ДанныеЗаполнения.РегионДляБюджета;
		СтатусСоставителя = ДанныеЗаполнения.СтатусСоставителя;
		СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		СчетКонтрагента = ДанныеЗаполнения.СчетКонтрагента;
		СчетОрганизации = ДанныеЗаполнения.СчетОрганизации;
		ТекстПлательщика = ДанныеЗаполнения.ТекстПлательщика;
		ТекстПолучателя = ДанныеЗаполнения.ТекстПолучателя;
		ФизЛицо = ДанныеЗаполнения.ФизЛицо;
		ЦФОДляБюджета = ДанныеЗаполнения.ЦФОДляБюджета;
		Для Каждого ТекСтрокаРасшифровкаПлатежа Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.ДоговорКонтрагента = ТекСтрокаРасшифровкаПлатежа.ДоговорКонтрагента;
			НоваяСтрока.ДокументРасчетовСКонтрагентом = ТекСтрокаРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом;
			НоваяСтрока.КратностьВзаиморасчетов = ТекСтрокаРасшифровкаПлатежа.КратностьВзаиморасчетов;
			НоваяСтрока.КурсВзаиморасчетов = ТекСтрокаРасшифровкаПлатежа.КурсВзаиморасчетов;
			НоваяСтрока.РегионДляБюджета = ТекСтрокаРасшифровкаПлатежа.РегионДляБюджета;
			НоваяСтрока.СтавкаНДС = ТекСтрокаРасшифровкаПлатежа.СтавкаНДС;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = ТекСтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.СуммаВзаиморасчетов = ТекСтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов;
			НоваяСтрока.СуммаНДС = ТекСтрокаРасшифровкаПлатежа.СуммаНДС;
			НоваяСтрока.СуммаПлатежа = ТекСтрокаРасшифровкаПлатежа.СуммаПлатежа;
			НоваяСтрока.ЦФОДляБюджета = ТекСтрокаРасшифровкаПлатежа.ЦФОДляБюджета;
		КонецЦикла;
		Для Каждого ТекСтрокаРеквизитыКонтрагента Из ДанныеЗаполнения.РеквизитыКонтрагента Цикл
			НоваяСтрока = РеквизитыКонтрагента.Добавить();
			НоваяСтрока.Значение = ТекСтрокаРеквизитыКонтрагента.Значение;
			НоваяСтрока.Представление = ТекСтрокаРеквизитыКонтрагента.Представление;
			НоваяСтрока.Реквизит = ТекСтрокаРеквизитыКонтрагента.Реквизит;
			НоваяСтрока.ТипКонтрагента = ТекСтрокаРеквизитыКонтрагента.ТипКонтрагента;
		КонецЦикла;
	КонецЕсли;
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
			глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
			
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные);
мМенеджерОбъекта = Документы[Метаданные().Имя];
