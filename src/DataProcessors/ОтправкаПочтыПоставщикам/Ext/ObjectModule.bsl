Функция ОтправитьПисьмо(Событие, ТекстПисьма = "Не опознанное Событие", ТемаПисьма = "Сообщение об ошибке из 1С8", 
					СписокАдресатов = Неопределено, КодировкаПисьма = "utf-8", ТипТекста = Неопределено, 
					лАдресФайлаВложения = "", лОтправитель = Неопределено, ОтправительСтрока = "order-reply@part-kom.ru")
	НетОшибок = Ложь;
	
	Если СписокАдресатов = Неопределено Тогда
		Возврат НетОшибок;
		
	КонецЕсли;
	
	Если ТипЗнч(СписокАдресатов) = Тип("Строка") Тогда
		//предполагаем, что разделитель только один ";"
		СписокАдресатов = СокрЛП(СписокАдресатов);
		СписокАдресатов = СтрЗаменить(СписокАдресатов, ",", ";");
		
		МассивАдресов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СписокАдресатов, ";");
		СписокАдресатов = Новый СписокЗначений;
		Для А = 0 По МассивАдресов.Количество() - 1 Цикл
			текАдрес = СокрЛП(МассивАдресов[А]);
			Если НЕ ПустаяСтрока(текАдрес) Тогда
				Если СписокАдресатов.НайтиПоЗначению(текАдрес) = Неопределено Тогда
					Если СтрНайти(текАдрес, "@") > 0 Тогда
						СписокАдресатов.Добавить(текАдрес);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ТипЗнч(СписокАдресатов) = Тип("СписокЗначений") Тогда
		СписокАдресатов = Новый СписокЗначений;
	КонецЕсли;
	Если СписокАдресатов.Количество() = 0 Тогда
		СписокАдресатов.Добавить("Gorohov-PE@Part-kom.ru", "Горохов Петр");
		СписокАдресатов.Добавить("sumv1@mail.ru", "Сумин Владимир");
		СписокАдресатов.Добавить("Pushkin-DS@Part-kom.ru", "Пушкин Денис");
		СписокАдресатов.Добавить("Golubev-SV@Part-kom.ru", "Голубев Сергей");
		СписокАдресатов.Добавить("Valiakmetov-AA@Part-kom.ru", "Валиахметов Артур");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(лОтправитель) Тогда
		УчетнаяЗапись = лОтправитель;
	Иначе
		УчетнаяЗапись = РассылкаСообщенийОбОшибках.ПолучитьСистемнуюУчетнуюЗапись();
	КонецЕсли;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
	Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
		Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;
	КонецЕсли; 
	Профиль.Пароль           = УчетнаяЗапись.Пароль;
	Профиль.Пользователь     = УчетнаяЗапись.Логин;
	Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
	Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
	Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		Профиль.ПарольSMTP         = УчетнаяЗапись.ПарольSMTP;
		Профиль.ПользовательSMTP   = УчетнаяЗапись.ЛогинSMTP;
	Иначе
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		Профиль.ПарольSMTP         = "";
		Профиль.ПользовательSMTP   = "";
	КонецЕсли; 
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
		
	Исключение
		ЗаписьЖурналаРегистрации("Отправка электронного сообщения", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		Возврат НетОшибок;
		
	КонецПопытки;
	
	ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
	ПочтовоеСообщение.Кодировка 		= КодировкаПисьма;
	ПочтовоеСообщение.ИмяОтправителя  	= УчетнаяЗапись.Наименование;
	ПочтовоеСообщение.Отправитель  	= УчетнаяЗапись.АдресЭлектроннойПочты;
	Если ПустаяСтрока(ОтправительСтрока) тогда
		ПочтовоеСообщение.ИмяОтправителя  	= УчетнаяЗапись.АдресЭлектроннойПочты;
	Иначе
		ПочтовоеСообщение.ИмяОтправителя  	= ОтправительСтрока;	
	КонецЕсли;
	ПочтовоеСообщение.Организация = "Парт-Ком";
	//ПочтовоеСообщение.Отправитель.Адрес = "order-reply@part-kom.ru";
	ПочтовоеСообщение.Отправитель.Кодировка = "utf-8";
	//ПочтовоеСообщение.Отправитель.ОтображаемоеИмя = "order-reply@part-kom.ru";
	//ПочтовоеСообщение.Отправитель.Сервер = "part-kom.ru";
	ПочтовоеСообщение.ОбратныйАдрес.Добавить(ОтправительСтрока);	
	//ПочтовоеСообщение.ОбратныйАдрес.Адрес = "order-reply@part-kom.ru";
	//ПочтовоеСообщение.ОбратныйАдрес.Кодировка = "utf-8";
	//ПочтовоеСообщение.ОбратныйАдрес.ОтображаемоеИмя = "order-reply@part-kom.ru";
	//ПочтовоеСообщение.ОбратныйАдрес.Сервер = "part-kom.ru";
	
	ПочтовоеСообщение.Тема            	= ТемаПисьма;
	Для каждого Кому Из СписокАдресатов Цикл
		Получатель = ПочтовоеСообщение.Получатели.Добавить();
		Получатель.Адрес           = Кому.Значение;
		Получатель.ОтображаемоеИмя = Кому.Представление;
		Получатель.Кодировка       = КодировкаПисьма;		
	КонецЦикла;
	ТекстСообщения = ПочтовоеСообщение.Тексты.Добавить();
	ТекстСообщения.Кодировка = КодировкаПисьма;
	
	Если ТипТекста = Неопределено Тогда
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Иначе
		ТекстСообщения.ТипТекста = ТипТекста;
	КонецЕсли;
	
	
	Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(Событие, "СлужебноеСобытие") Тогда
		// + 20180109 Пушкин	
		ТекстПисьма = "Источник: "  
					 + СтрокаСоединенияИнформационнойБазы()
					 + Символы.ПС
					 + "Это рабочая БД: "  
				 	+ Строка(ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза())
				 	+ Символы.ПС
				 	+ "Отправитель: "  
				 	+ Строка(ПараметрыСеанса.ТекущийПользователь.Код)
				 	+ Символы.ПС
				 	+ "Время отправки: " 
				 	+ Строка(ТекущаяДата())
				 	+ Символы.ПС
				 	+ ТекстПисьма;
		// - 20180109 Пушкин
	КонецЕсли;
	
	ТекстСообщения.Текст     = ТекстПисьма;
	
	Если ТипЗнч(лАдресФайлаВложения) = Тип("СписокЗначений") Тогда
		Для Каждого КлючИЗначение Из лАдресФайлаВложения Цикл 
			СтруктураВложения = КлючИЗначение.Значение;
			Если ТипЗнч(СтруктураВложения) = Тип("Структура") Тогда
				ВрКаталог = КаталогВременныхФайлов();
				ВрКаталог = ?(Прав(ВрКаталог,1) = "\", ВрКаталог, ВрКаталог + "\");
				тИмяФайла = ВрКаталог + СтруктураВложения.ИмяФайла;
				СтруктураВложения.Хранилище.Записать(тИмяФайла);
				ПолученныйФайл = Новый Файл(тИмяФайла);
				Если ПолученныйФайл.Существует() Тогда
					ПочтовоеСообщение.Вложения.Добавить(ПолученныйФайл.ПолноеИмя, СтруктураВложения.Наименование);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(лАдресФайлаВложения) = Тип("Строка") Тогда
		Если НЕ ПустаяСтрока(лАдресФайлаВложения) Тогда
			ПолученныйФайл = Новый Файл(лАдресФайлаВложения);
			Если ПолученныйФайл.Существует() Тогда
				ФайлВложения = ПочтовоеСообщение.Вложения.Добавить(ПолученныйФайл.ПолноеИмя);			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Попытка
		ИнтернетПочта.Послать(ПочтовоеСообщение);
		НетОшибок = Истина;
				
	Исключение
		ЗаписьЖурналаРегистрации("Отправка электронного сообщения", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		
	КонецПопытки;
	
	ИнтернетПочта.Отключиться();
	
	Возврат НетОшибок;

КонецФункции

Функция СформироватьСписокАдресовИзСтроки(вхСтрока)
	вхСтрока = СокрЛП(вхСтрока);
	вхСтрока = СтрЗаменить(вхСтрока, ",", ";");
		
	МассивАдресов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(вхСтрока, ";");
	
	СписокАдресатов = Новый СписокЗначений;
	Для А = 0 По МассивАдресов.Количество() - 1 Цикл
		текАдрес = СокрЛП(МассивАдресов[А]);
		
		Если РежимОтладки Тогда
			Сообщить("тек адрес - " + текАдрес);
					
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(МассивАдресов[А]) Тогда
			СписокАдресатов.Добавить(текАдрес);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СписокАдресатов;
	
КонецФункции

Функция ПолучитьСписокДокументов()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 5
	|	ИсторияОтправкиПисемПоставщикам.Объект,
	|	ИсторияОтправкиПисемПоставщикам.ДатаРегистрации,
	|	ИсторияОтправкиПисемПоставщикам.НомерРегистрации,
	|	ИсторияОтправкиПисемПоставщикам.Ответственный,
	|	ИсторияОтправкиПисемПоставщикам.Отправлен,
	|	ИсторияОтправкиПисемПоставщикам.ДатаОтправки,
	|	ИсторияОтправкиПисемПоставщикам.Ошибка,
	|	ИсторияОтправкиПисемПоставщикам.АдресПоставщика,
	|	ИсторияОтправкиПисемПоставщикам.КопияАдресМенеджера,
	|	ИсторияОтправкиПисемПоставщикам.ОтправленныеДанные
	|ИЗ
	|	РегистрСведений.ИсторияОтправкиПисемПоставщикам КАК ИсторияОтправкиПисемПоставщикам
	|ГДЕ
	|	НЕ ИсторияОтправкиПисемПоставщикам.Отправлен
	|	И НЕ ИсторияОтправкиПисемПоставщикам.Ошибка"
	);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВыполнитьРегламентноеЗадание() Экспорт
	Отправитель = Константы.УчетнаяЗаписьДляОтправкиПочтыПоставщикам.Получить();
	Отправитель = ?(ЗначениеЗаполнено(Отправитель), Отправитель, Неопределено);
	ОтправительСтрока = "order-reply@part-kom.ru";

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШаблоныТекстовПисем.ТемаПисьма,
	|	ШаблоныТекстовПисем.ТекстПисьма
	|ИЗ
	|	Справочник.ШаблоныТекстовПисем КАК ШаблоныТекстовПисем
	|ГДЕ
	|	ШаблоныТекстовПисем.СобытиеДляОтправки = &Событие
	|	И ШаблоныТекстовПисем.Используется"
	);
	
	ТекстПисьмаЗаказ = "сформирован новый заказ поставщику";
	ТемаПисьмаЗаказ = "новый заказ";
	
	Запрос.УстановитьПараметр("Событие", Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщику);
	Р = Запрос.Выполнить().Выбрать();
	Пока Р.Следующий() Цикл
		ТемаПисьмаЗаказ = Р.ТемаПисьма;
		ТекстПисьмаЗаказ = Р.ТекстПисьма;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Событие", Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщикуОП);
	Р = Запрос.Выполнить().Выбрать();
	Пока Р.Следующий() Цикл
		ТемаПисьмаЗаказОП = Р.ТемаПисьма;
		ТекстПисьмаЗаказОП = Р.ТекстПисьма;
	КонецЦикла;
	
	ТекстПисьмаПоступлениеМХ1 = "загружено новое поступление товаров";
	ТемаПисьмаПоступлениеМХ1 = "загрузка поступления МХ-1";
	
	Запрос.УстановитьПараметр("Событие", Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПоступленияТоваровУслуг);
	Р = Запрос.Выполнить().Выбрать();
	Пока Р.Следующий() Цикл
		ТемаПисьмаПоступлениеМХ1 = Р.ТемаПисьма;
		ТекстПисьмаПоступлениеМХ1 = Р.ТекстПисьма;
	КонецЦикла;
	
	ТекстПисьмаПоступлениеМХ1 = "сформирован новый отчет МХ-3";
	ТемаПисьмаПоступлениеМХ1 = "новый отчет МХ-3";
	
	Запрос.УстановитьПараметр("Событие", Справочники.СобытияДляОтправкиЭлектронныхПисем.ВыгрузкаПоступленияТоваровУслуг);
	Р = Запрос.Выполнить().Выбрать();
	Пока Р.Следующий() Цикл
		ТемаПисьмаПоступлениеМХ3 = Р.ТемаПисьма;
		ТекстПисьмаПоступлениеМХ3 = Р.ТекстПисьма;
	КонецЦикла;
	
	ТекстПисьмаПрайсЗагружен = "загружен новый прайс VMI";
	ТемаПисьмаПрайсЗагружен = "загрузка прайса VMI";
	
	Запрос.УстановитьПараметр("Событие", Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПрайсаVMI);
	Р = Запрос.Выполнить().Выбрать();
	Пока Р.Следующий() Цикл
		ТемаПисьмаПрайсЗагружен = Р.ТемаПисьма;
		ТекстПисьмаПрайсЗагружен = Р.ТекстПисьма;
	КонецЦикла;
	
	ТекстПисьмаПрайсОшибка = "частично загружен новый прайс VMI";
	ТемаПисьмаПрайсОшибка = "загрузка прайса VMI (ошибка)";
	
	Запрос.УстановитьПараметр("Событие", Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаVMI);
	Р = Запрос.Выполнить().Выбрать();
	Пока Р.Следующий() Цикл
		ТемаПисьмаПрайсОшибка = Р.ТемаПисьма;
		ТекстПисьмаПрайсОшибка = Р.ТекстПисьма;
	КонецЦикла;
	
	ТекстПисьмаПрайсПереоценка = "проведен новый прайс VMI";
	ТемаПисьмаПрайспереоценка = "проведение прайса VMI";
	
	Запрос.УстановитьПараметр("Событие", Справочники.СобытияДляОтправкиЭлектронныхПисем.ПереоценкаОстатковПоставщика);
	Р = Запрос.Выполнить().Выбрать();
	Пока Р.Следующий() Цикл
		ТемаПисьмаПрайсПереоценка = Р.ТемаПисьма;
		ТекстПисьмаПрайсПереоценка = Р.ТекстПисьма;
	КонецЦикла;
	
	ИмяВременногоКаталога  = КаталогВременныхФайлов();
	ИмяВременногоКаталога = ?(Прав(ИмяВременногоКаталога,1) = "\", ИмяВременногоКаталога, ИмяВременногоКаталога + "\");
	
	// + Пушкин 20180426
	тчОшибки = Новый ТаблицаЗначений; 
	тчОшибки.Колонки.Добавить("Объект");
	тчОшибки.Колонки.Добавить("АдресПоставщика");
	тчОшибки.Колонки.Добавить("Описание");
	// - Пушкин 20180426
	
	Для Каждого ЗаписьРегистра Из ПолучитьСписокДокументов() Цикл
		ТекВремя = ТекущаяДата();
		Пока ТекущаяДата() < ТекВремя + 1 Цикл
			//ждаааать
		КонецЦикла;

		Если РежимОтладки Тогда
			Сообщить("попытка отправить " + Строка(ЗаписьРегистра.Объект));
		КонецЕсли;
		
		// + Пушкин 20180426
		лОбъект = ЗаписьРегистра.Объект;
		лАдресПоставщика = ЗаписьРегистра.АдресПоставщика;
		лОписание = "";
		// - Пушкин 20180426
		
		Ошибка = Ложь;
		
		Если ТипЗнч(ЗаписьРегистра.Объект) = Тип("Строка") Тогда
			    ПараметрыПисьма = ЗаписьРегистра.ОтправленныеДанные.Получить();
				ТекстПисьма = "";
				ТемаПисьма = "";
				Если ТипЗнч(ПараметрыПисьма) = Тип("Структура") Тогда
					ПараметрыПисьма.Свойство("ТекстПисьма", ТекстПисьма);
					ПараметрыПисьма.Свойство("ТемаПисьма", ТемаПисьма);
				КонецЕсли;
				Если НЕ ПустаяСтрока(ЗаписьРегистра.КопияАдресМенеджера) Тогда
					ОтправительСтрока = ЗаписьРегистра.КопияАдресМенеджера;
				КонецЕсли;
				
				СписокАдресатов = СформироватьСписокАдресовИзСтроки(ЗаписьРегистра.АдресПоставщика + ";" + ЗаписьРегистра.КопияАдресМенеджера);
				Если НЕ ПустаяСтрока(ТекстПисьма) И НЕ ПустаяСтрока(ТемаПисьма) Тогда
					НачатьТранзакцию();
					Попытка
						Ошибка = НЕ	ОтправитьПисьмо(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщику,
						ТекстПисьма, ТемаПисьма, СписокАдресатов, , , , Отправитель, ОтправительСтрока);
					
						Если Ошибка тогда
							лОписание = лОписание + "[НЕ ОтправитьПисьмо]";
						КонецЕсли;
						аЗапись = РегистрыСведений.ИсторияОтправкиПисемПоставщикам.СоздатьМенеджерЗаписи();
						аЗапись.Объект = ЗаписьРегистра.Объект;
						аЗапись.ДатаРегистрации = ЗаписьРегистра.ДатаРегистрации;
						аЗапись.НомерРегистрации = ЗаписьРегистра.НомерРегистрации;
						аЗапись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
						Если НЕ Ошибка Тогда
							аЗапись.Отправлен = Истина;
							аЗапись.ДатаОтправки = ТекущаяДата();
							аЗапись.Ошибка = Ложь;
						Иначе
							аЗапись.Отправлен = Ложь;
							аЗапись.Ошибка = Истина;
						КонецЕсли;
						аЗапись.АдресПоставщика = ЗаписьРегистра.АдресПоставщика;
						аЗапись.КопияАдресМенеджера = ЗаписьРегистра.КопияАдресМенеджера;
						аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения(ПараметрыПисьма, Новый СжатиеДанных(9));
						аЗапись.Записать(Истина);
						
						ЗафиксироватьТранзакцию();
					Исключение
						лОписаниеОшибки = ОписаниеОшибки();
				
						ЗаписьЖурналаРегистрации("Отправка почты поставщикам", УровеньжурналаРегистрации.Ошибка, , , лОписаниеОшибки);
						ОтменитьТранзакцию();
				
						лОписание = лОписание + "[ОтменитьТранзакцию()] " + лОписаниеОшибки;
				
					КонецПопытки;
					
				КонецЕсли;
				
		ИначеЕсли ТипЗнч(ЗаписьРегистра.Объект) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			пар = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗаписьРегистра.Объект, "Дата,Номер,Контрагент,Склад");
			РаботаетОП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(пар.Контрагент, "РаботатьСОкномПоставщика");
			ЭтоВМИ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(пар.Склад, "СкладVMI");
			Если ЗаписьРегистра.Объект.Контрагент.ПечатнаяФорма="DENSO" тогда 
				ИмяВложения =  "DENSO_"+СокрЛП(пар.Номер)+"_"+СокрЛП(ЗаписьРегистра.Объект.Склад.Город.Наименование);
			иначеесли ЗаписьРегистра.Объект.Контрагент.ПечатнаяФорма="KOMPA" тогда 
				ИмяВложения =  "KOMPA_ZakPost_"+СокрЛП(пар.Номер);
			иначе 
				ИмяВложения =  Формат(пар.Дата,"ДФ=yyyy_MM_dd") + "_" + СокрЛП(пар.Номер);
			КонецЕсли;
				
			ВременныйФайл = ИмяВременногоКаталога + ИмяВложения + ".xls";
 			ОтправленныеДанные = Документы.ЗаказПоставщику.ПолучитьМакетДляОкнаПоставщика(ЗаписьРегистра.Объект);
			Если ТипЗнч(ОтправленныеДанные) <> Тип("ТабличныйДокумент") Тогда
				Ошибка = Истина;
				// + Пушкин 20180426
				лОписание = лОписание + "[ТипЗнч(ОтправленныеДанные) <> Тип(ТабличныйДокумент)]";
				// - Пушкин 20180426
			КонецЕсли;
			НачатьТранзакцию();
			Попытка
				ОтправленныеДанные.Записать(ВременныйФайл,ТипФайлаТабличногоДокумента.XLS);
				
				СписокАдресатов = СформироватьСписокАдресовИзСтроки(ЗаписьРегистра.АдресПоставщика + ";" + ЗаписьРегистра.КопияАдресМенеджера);
				
				Если НЕ ПустаяСтрока(ЗаписьРегистра.КопияАдресМенеджера) Тогда
					ОтправительСтрока = ЗаписьРегистра.КопияАдресМенеджера;
				КонецЕсли;
				
				Если РаботаетОП Тогда
					текТемаПисьмаЗаказ = ТемаПисьмаЗаказОП;
					текТекстПисьмаЗаказ = ТекстПисьмаЗаказОП;
					ОтправительСтрока = "order-reply@part-kom.ru";
					
				Иначе
					текТемаПисьмаЗаказ = ТемаПисьмаЗаказ;
					текТекстПисьмаЗаказ = ТекстПисьмаЗаказ;
					
				КонецЕсли;
				
				//Если ЭтоВМИ Тогда
				//	ОтправительСтрока = ЗаписьРегистра.КопияАдресМенеджера;
				//КонецЕсли;
				
				текТемаПисьмаЗаказ = СтрЗаменить(текТемаПисьмаЗаказ, "*НОМЕР*", СокрЛП(пар.Номер));
				текТемаПисьмаЗаказ = СтрЗаменить(текТемаПисьмаЗаказ, "*СКЛАД*", СокрЛП(пар.Склад));
 
				Если СписокАдресатов.Количество() = 0 Тогда
					Ошибка = Истина;
					// + Пушкин 20180426
					лОписание = лОписание + "[СписокАдресатов.Количество() = 0]";
					// - Пушкин 20180426
				Иначе
					Ошибка = НЕ	ОтправитьПисьмо(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщику,
						текТекстПисьмаЗаказ, текТемаПисьмаЗаказ, СписокАдресатов, , , ВременныйФайл, Отправитель, ОтправительСтрока);
					// + Пушкин 20180426
					Если Ошибка тогда
						лОписание = лОписание + "[НЕ ОтправитьПисьмо]";
					КонецЕсли;
					// - Пушкин 20180426
				КонецЕсли;
				аЗапись = РегистрыСведений.ИсторияОтправкиПисемПоставщикам.СоздатьМенеджерЗаписи();
				аЗапись.Объект = ЗаписьРегистра.Объект;
				аЗапись.ДатаРегистрации = ЗаписьРегистра.ДатаРегистрации;
				аЗапись.НомерРегистрации = ЗаписьРегистра.НомерРегистрации;
				аЗапись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				Если НЕ Ошибка Тогда
					аЗапись.Отправлен = Истина;
					аЗапись.ДатаОтправки = ТекущаяДата();
					аЗапись.Ошибка = Ложь;
				Иначе
					аЗапись.Отправлен = Ложь;
					аЗапись.Ошибка = Истина;
				КонецЕсли;
				аЗапись.АдресПоставщика = ЗаписьРегистра.АдресПоставщика;
				аЗапись.КопияАдресМенеджера = ЗаписьРегистра.КопияАдресМенеджера;
				Попытка
					аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения(Новый Структура("ТабДокумент", ОтправленныеДанные), Новый СжатиеДанных(9));
				Исключение
					// + Пушкин 20180426
					лОписаниеОшибки = ОписаниеОшибки();
					
					ЗаписьЖурналаРегистрации("Отправка почты поставщикам", УровеньЖурналаРегистрации.Ошибка, , , лОписаниеОшибки);
					
					лОписание = лОписание + "[Попытка аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения] " + лОписаниеОшибки;
					// - Пушкин 20180426
				КонецПопытки;
				аЗапись.Записать(Истина);
				
				КорректировкаСоздана = Ложь;
				Если НЕ Ошибка Тогда
					СтатусДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЗаписьРегистра.Объект, "СтатусДокумента");
					Если СтатусДокумента = Справочники.СтатусыДокументов.ПроведенЗаказПоставщику Тогда
						КорректировкаСоздана = Документы.ЗаказПоставщику.СоздатьНовуюКорректировкуЗаказа(Справочники.СтатусыДокументов.ОтправленПоставщику, ЗаписьРегистра.Объект);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
				Если НЕ КорректировкаСоздана Тогда
					//сообщить администраторам, что заказ поставщику отправлен, но в следующий статус не переведен
					
				КонецЕсли;
				
			Исключение
				// + Пушкин 20180426
				лОписаниеОшибки = ОписаниеОшибки();
				
				ЗаписьЖурналаРегистрации("Отправка почты поставщикам", УровеньжурналаРегистрации.Ошибка, , , лОписаниеОшибки);
				ОтменитьТранзакцию();
				
				лОписание = лОписание + "[ОтменитьТранзакцию()] " + лОписаниеОшибки;
				// - Пушкин 20180426
			КонецПопытки;
			
		ИначеЕсли ТипЗнч(ЗаписьРегистра.Объект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ВидОперации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЗаписьРегистра.Объект, "ВидОперацииПоступления");
			Если ВидОперации = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда
				//ОтправленныеДанные = Документы.ПоступлениеТоваровУслуг.ПечатьПоступлениеТоваров(ЗаписьРегистра.Объект);
				пар = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗаписьРегистра.Объект, "Дата,Номер,Контрагент,Склад");
				ВременныйФайл = ИмяВременногоКаталога + Формат(пар.Дата,"ДФ=yyyy_MM_dd") + "_" + СокрЛП(пар.Номер) + ".xls";
				ОтправленныеДанные = Документы.ПоступлениеТоваровУслуг.ПечатьМХ1(ЗаписьРегистра.Объект);
				Если ТипЗнч(ОтправленныеДанные) <> Тип("ТабличныйДокумент") Тогда
					Ошибка = Истина;
					// + Пушкин 20180426
					лОписание = лОписание + "[ТипЗнч(ОтправленныеДанные) <> Тип(ТабличныйДокумент)]";
					// - Пушкин 20180426
				КонецЕсли;
				НачатьТранзакцию();
				Попытка
					//ВременныйФайл = ПолучитьИмяВременногоФайла("xls");
					ОтправленныеДанные.Записать(ВременныйФайл,ТипФайлаТабличногоДокумента.XLS);
					СписокАдресатов = Новый СписокЗначений;
					//Если НЕ ПустаяСтрока(ЗаписьРегистра.АдресПоставщика) Тогда
					//	СписокАдресатов.Добавить(ЗаписьРегистра.АдресПоставщика, "поставщик");
					//КонецЕсли;
					
					//отправляем только менеджерам
					СписокАдресатов = СформироватьСписокАдресовИзСтроки(ЗаписьРегистра.АдресПоставщика + ";" + ЗаписьРегистра.КопияАдресМенеджера);
					
					текТекстПисьмаПоступлениеМХ1 = ТекстПисьмаПоступлениеМХ1;
					текТекстПисьмаПоступлениеМХ1 = СтрЗаменить(текТекстПисьмаПоступлениеМХ1,"*СКЛАД*", Строка(пар.Склад));
					текТекстПисьмаПоступлениеМХ1 = СтрЗаменить(текТекстПисьмаПоступлениеМХ1,"*ПЕРИОД*", Формат(пар.Дата,"ДЛФ=DD"));
					
					текТемаПисьмаПоступлениеМХ1 = ТемаПисьмаПоступлениеМХ1;
					текТемаПисьмаПоступлениеМХ1 = СтрЗаменить(текТемаПисьмаПоступлениеМХ1,"*СКЛАД*", Строка(пар.Склад));
					текТемаПисьмаПоступлениеМХ1 = СтрЗаменить(текТемаПисьмаПоступлениеМХ1,"*ПОСТАВЩИК*", Строка(пар.Склад));
					
					Если СписокАдресатов.Количество() = 0 Тогда
						Ошибка = Истина;
						// + Пушкин 20180426
						лОписание = лОписание + "[СписокАдресатов.Количество() = 0]";
						// - Пушкин 20180426
					Иначе
						Ошибка = НЕ	ОтправитьПисьмо(Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПоступленияТоваровУслуг,
						текТекстПисьмаПоступлениеМХ1, текТемаПисьмаПоступлениеМХ1, СписокАдресатов, , , ВременныйФайл, Отправитель);
						// + Пушкин 20180426
						Если Ошибка тогда
							лОписание = лОписание + "[НЕ ОтправитьПисьмо]";
						КонецЕсли;
						// - Пушкин 20180426
					КонецЕсли;
					
					аЗапись = РегистрыСведений.ИсторияОтправкиПисемПоставщикам.СоздатьМенеджерЗаписи();
					аЗапись.Объект = ЗаписьРегистра.Объект;
					аЗапись.ДатаРегистрации = ЗаписьРегистра.ДатаРегистрации;
					аЗапись.НомерРегистрации = ЗаписьРегистра.НомерРегистрации;
					аЗапись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					Если НЕ Ошибка Тогда
						аЗапись.Отправлен = Истина;
						аЗапись.ДатаОтправки = ТекущаяДата();
						аЗапись.Ошибка = Ложь;
					Иначе
						аЗапись.Отправлен = Ложь;
						аЗапись.Ошибка = Истина;
					КонецЕсли;
					аЗапись.АдресПоставщика = ЗаписьРегистра.АдресПоставщика;
					аЗапись.КопияАдресМенеджера = ЗаписьРегистра.КопияАдресМенеджера;
					Попытка
						аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения(Новый Структура("ТабДокумент", ОтправленныеДанные), Новый СжатиеДанных(9));
					Исключение
						// + Пушкин 20180426
						лОписаниеОшибки = ОписаниеОшибки();
						
						ЗаписьЖурналаРегистрации("Отправка почты поставщикам", УровеньЖурналаРегистрации.Ошибка, , , лОписаниеОшибки);
						
						лОписание = лОписание + "[Попытка аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения] " + лОписаниеОшибки;
						// - Пушкин 20180426
					КонецПопытки;
					аЗапись.Записать(Истина);
					
					Если РежимОтладки Тогда
						Сообщить("документ отправлен");
					
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
					Если РежимОтладки Тогда
						Сообщить("транзакция зафиксирована");
					
					КонецЕсли;
				
				Исключение
				    Если РежимОтладки Тогда
						Сообщить("неуспешно ");
						Сообщить(ОписаниеОшибки());
					КонецЕсли;
					
					// + Пушкин 20180426
					лОписаниеОшибки = ОписаниеОшибки();
					
					ЗаписьЖурналаРегистрации("Отправка почты поставщикам", УровеньжурналаРегистрации.Ошибка, , , лОписаниеОшибки);
					ОтменитьТранзакцию();
					
					лОписание = лОписание + "[ОтменитьТранзакцию()] " + лОписаниеОшибки;
					// - Пушкин 20180426
				КонецПопытки;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда
				ОтправленныеДанные = Документы.ПоступлениеТоваровУслуг.ПечатьМХ3(ЗаписьРегистра.Объект);
				Если ТипЗнч(ОтправленныеДанные) <> Тип("ТабличныйДокумент") Тогда
					Ошибка = Истина;
				КонецЕсли;
				НачатьТранзакцию();
				Попытка
					пар = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗаписьРегистра.Объект, "Дата,Номер,Склад,ПериодОтчетаМХ3");
					ВременныйФайл = ИмяВременногоКаталога + Формат(пар.Дата,"ДФ=yyyy_MM_dd") + "_" + СокрЛП(пар.Номер) +
									СокрЛП(Строка(пар.Склад)) + ".xls";
					ОтправленныеДанные.Записать(ВременныйФайл,ТипФайлаТабличногоДокумента.XLS);
					
					СписокАдресатов = СформироватьСписокАдресовИзСтроки(ЗаписьРегистра.АдресПоставщика + ";" + ЗаписьРегистра.КопияАдресМенеджера);
										
					текТемаПисьмаПоступлениеМХ3 = ТемаПисьмаПоступлениеМХ3;
					текТемаПисьмаПоступлениеМХ3 = СтрЗаменить(текТемаПисьмаПоступлениеМХ3, "*СКЛАД*", СокрЛП(Строка(пар.Склад)));
					текТемаПисьмаПоступлениеМХ3 = СтрЗаменить(текТемаПисьмаПоступлениеМХ3, "*ПЕРИОД*", пар.ПериодОтчетаМХ3);
					
					текТекстПисьмаПоступлениеМХ3 = ТекстПисьмаПоступлениеМХ3;
					текТекстПисьмаПоступлениеМХ3 = СтрЗаменить(текТекстПисьмаПоступлениеМХ3, "*СКЛАД*", СокрЛП(Строка(пар.Склад)));
					текТекстПисьмаПоступлениеМХ3 = СтрЗаменить(текТекстПисьмаПоступлениеМХ3, "*ПЕРИОД*", пар.ПериодОтчетаМХ3);
					
					СуммаСкидки = 0;
					Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ПоступлениеТоваровУслугТовары.Ссылка,
					|	СУММА(ПоступлениеТоваровУслугТовары.Количество * ПоступлениеТоваровУслугТовары.Цена) КАК СуммаБезСкидки,
					|	СУММА(ПоступлениеТоваровУслугТовары.Сумма) КАК Сумма
					|ИЗ
					|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
					|ГДЕ
					|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
					|
					|СГРУППИРОВАТЬ ПО
					|	ПоступлениеТоваровУслугТовары.Ссылка"
					);
					Запрос.УстановитьПараметр("Ссылка", ЗаписьРегистра.Объект);
					Результат = Запрос.Выполнить().Выбрать();
					Пока Результат.Следующий() Цикл
						СуммаСкидки = Результат.СуммаБезСкидки - Результат.Сумма;
					КонецЦикла;
					
					Если СуммаСкидки = 0 Тогда
						текТекстПисьмаПоступлениеМХ3 = СтрЗаменить(текТекстПисьмаПоступлениеМХ3, "*СУММАСКИДКИ*", "");
					Иначе
						текТекстПисьмаПоступлениеМХ3 = СтрЗаменить(текТекстПисьмаПоступлениеМХ3, "*СУММАСКИДКИ*", "сумма скидки - " + Строка(СуммаСкидки));
					КонецЕсли;
				    					
					Если СписокАдресатов.Количество() = 0 Тогда
						Ошибка = Истина;
						// + Пушкин 20180426
						лОписание = лОписание + "[СписокАдресатов.Количество() = 0]";
						// - Пушкин 20180426
					Иначе
						Ошибка = НЕ	ОтправитьПисьмо(Справочники.СобытияДляОтправкиЭлектронныхПисем.ВыгрузкаПоступленияТоваровУслуг,
						текТекстПисьмаПоступлениеМХ3, текТемаПисьмаПоступлениеМХ3, СписокАдресатов, , , ВременныйФайл, Справочники.УчетныеЗаписиЭлектроннойПочты.ТехПоддержка);
						// + Пушкин 20180426
						Если Ошибка тогда
							лОписание = лОписание + "[НЕ ОтправитьПисьмо]";
						КонецЕсли;
						// - Пушкин 20180426
					КонецЕсли;
					
					аЗапись = РегистрыСведений.ИсторияОтправкиПисемПоставщикам.СоздатьМенеджерЗаписи();
					аЗапись.Объект = ЗаписьРегистра.Объект;
					аЗапись.ДатаРегистрации = ЗаписьРегистра.ДатаРегистрации;
					аЗапись.НомерРегистрации = ЗаписьРегистра.НомерРегистрации;
					аЗапись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					Если НЕ Ошибка Тогда
						аЗапись.Отправлен = Истина;
						аЗапись.ДатаОтправки = ТекущаяДата();
						аЗапись.Ошибка = Ложь;
					Иначе
						аЗапись.Отправлен = Ложь;
						аЗапись.Ошибка = Истина;
					КонецЕсли;
					аЗапись.АдресПоставщика = ЗаписьРегистра.АдресПоставщика;
					аЗапись.КопияАдресМенеджера = ЗаписьРегистра.КопияАдресМенеджера;
					Попытка
						аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения(Новый Структура("ТабДокумент", ОтправленныеДанные), Новый СжатиеДанных(9));
					Исключение
						// + Пушкин 20180426
						лОписаниеОшибки = ОписаниеОшибки();
						
						ЗаписьЖурналаРегистрации("Отправка почты поставщикам", УровеньЖурналаРегистрации.Ошибка, , , лОписаниеОшибки);
						
						лОписание = лОписание + "[Попытка аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения] " + лОписаниеОшибки;
						// - Пушкин 20180426
					КонецПопытки;
					аЗапись.Записать(Истина);
				
					ЗафиксироватьТранзакцию();
				
				Исключение
				
					// + Пушкин 20180426
					лОписаниеОшибки = ОписаниеОшибки();
					
					ЗаписьЖурналаРегистрации("Отправка почты поставщикам", УровеньжурналаРегистрации.Ошибка, , , лОписаниеОшибки);
					ОтменитьТранзакцию();
					
					лОписание = лОписание + "[ОтменитьТранзакцию()] " + лОписаниеОшибки;
					// - Пушкин 20180426
				
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗаписьРегистра.Объект) = Тип("ДокументСсылка.ПереоценкаОстатковПоставщика") Тогда
			Если ЗаписьРегистра.НомерРегистрации = 0 Тогда
				ОтправленныеДанные = Документы.ПереоценкаОстатковПоставщика.ПечатьОшибкиПриЗагрузкеПрайса(ЗаписьРегистра.Объект);
				Если ТипЗнч(ОтправленныеДанные) <> Тип("ТабличныйДокумент") Тогда
					Ошибка = Истина;
					Если РежимОтладки Тогда
						Сообщить("нечего отправлять");
					КонецЕсли;
					
				КонецЕсли;
				
				пар = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗаписьРегистра.Объект, "Дата,Номер");
				ВременныйФайл = ИмяВременногоКаталога + Формат(пар.Дата,"ДФ=yyyy_MM_dd") + "_" + СокрЛП(пар.Номер) + ".xls";
				ОтправленныеДанные.Записать(ВременныйФайл, ТипФайлаТабличногоДокумента.XLS);

				
				//Список Некорректных цен
				ЗапросПоПрайсу = Новый Запрос(
				"ВЫБРАТЬ
				|	ЕСТЬNULL(ПереоценкаОстатковПоставщика.ПрайсПоставщикаVMI.ПроцентОтклонения, 0) КАК ПроцентОтклонения
				|ИЗ
				|	Документ.ПереоценкаОстатковПоставщика КАК ПереоценкаОстатковПоставщика
				|ГДЕ
				|	ПереоценкаОстатковПоставщика.Ссылка = &Ссылка"
				);
				ЗапросПоПрайсу.УстановитьПараметр("Ссылка", ЗаписьРегистра.Объект);
				Рез = ЗапросПоПрайсу.Выполнить().Выбрать();
				Рез.Следующий();
				
				Если Рез.ПроцентОтклонения > 0 Тогда
					ПроцентПлюс = Рез.ПроцентОтклонения;
					Если ПроцентПлюс > 100 Тогда
						ПроцентМинус = ПроцентПлюс - 100;
					Иначе
						ПроцентМинус = ПроцентПлюс;
					КонецЕсли;
					ЗапросОшибок = Новый Запрос(
					"ВЫБРАТЬ
					|	ПереоценкаОстатковПоставщикаТоварыПоставщика.НомерСтроки,
					|	ПереоценкаОстатковПоставщикаТоварыПоставщика.АртикулПоставщика,
					|	ПереоценкаОстатковПоставщикаТоварыПоставщика.ИзготовительПоставщика,
					|	ПереоценкаОстатковПоставщикаТоварыПоставщика.НоменклатураПоставщика,
					|	ПереоценкаОстатковПоставщикаТоварыПоставщика.Цена,
					|	ПереоценкаОстатковПоставщикаТоварыПоставщика.ЦенаСтарая,
					|	ПереоценкаОстатковПоставщикаТоварыПоставщика.ПроцентОтклонения,
					|	ПереоценкаОстатковПоставщикаТоварыПоставщика.НеПереоценивать
					|ИЗ
					|	Документ.ПереоценкаОстатковПоставщика.ТоварыПоставщика КАК ПереоценкаОстатковПоставщикаТоварыПоставщика
					|ГДЕ
					|	ПереоценкаОстатковПоставщикаТоварыПоставщика.Ссылка = &Ссылка
					|	И ПереоценкаОстатковПоставщикаТоварыПоставщика.НеПереоценивать = ИСТИНА"
					
					
					//#Убрал, т.к должны попадать все не переоцененые позиции Kalinin V.A. ( 2018-05-30 )
					//"ВЫБРАТЬ
					//|	Т.АртикулПоставщика,
					//|	Т.ИзготовительПоставщика,
					//|	Т.Цена,
					//|	Т.ЦенаСтарая,
					//|	NULL КАК НоменклатураПоставщика
					//|ИЗ
					//|	Документ.ПереоценкаОстатковПоставщика.ТоварыПоставщика КАК Т
					//|ГДЕ
					//|	Т.Ссылка = &Ссылка
					//|	И Т.Цена > Т.ЦенаСтарая
					//|	И Т.ПроцентОтклонения > &ПроцентПлюс
					//|
					//|ОБЪЕДИНИТЬ
					//|
					//|ВЫБРАТЬ
					//|	Т.АртикулПоставщика,
					//|	Т.ИзготовительПоставщика,
					//|	Т.Цена,
					//|	Т.ЦенаСтарая,
					//|	Т.НоменклатураПоставщика
					//|ИЗ
					//|	Документ.ПереоценкаОстатковПоставщика.ТоварыПоставщика КАК Т
					//|ГДЕ
					//|	Т.Ссылка = &Ссылка
					//|	И Т.Цена < Т.ЦенаСтарая
					//|	И Т.ПроцентОтклонения > &ПроцентМинус"
					);
					ЗапросОшибок.УстановитьПараметр("Ссылка", ЗаписьРегистра.Объект);
					ЗапросОшибок.УстановитьПараметр("ПроцентПлюс", ПроцентПлюс);
					ЗапросОшибок.УстановитьПараметр("ПроцентМинус", ПроцентМинус);
					
					Результат = ЗапросОшибок.Выполнить();
					Если Результат.Пустой() Тогда
						текТемаПисьмаПрайс = ТемаПисьмаПрайсЗагружен;
						текТекстПисьмаПрайс = ТекстПисьмаПрайсЗагружен;
						текТекстПисьмаПрайс = СтрЗаменить(текТекстПисьмаПрайс, "*ДАТА*", Формат(ТекущаяДата(),"ДЛФ=DD"));
						
					Иначе
						текТемаПисьмаПрайс = ТемаПисьмаПрайсОшибка;
						текТекстПисьмаПрайс = ТекстПисьмаПрайсОшибка;	
						текТекстПисьмаПрайс = СтрЗаменить(текТекстПисьмаПрайс, "*ДАТА*", Формат(ТекущаяДата(),"ДЛФ=DD"));
						
						СтрТовары = "";
						Выборка = Результат.Выбрать();
						Пока Выборка.Следующий() Цикл
							//СтрТовары = СтрТовары + Выборка.АртикулПоставщика + ";" + Выборка.ИзготовительПоставщика + ";"
							//			+ Выборка.Цена + ";" + Выборка.ЦенаСтарая + ";" + Символы.ПС;
							СтрТовары = СтрТовары +"["+ ?(ЗначениеЗаполнено(Выборка.АртикулПоставщика),Выборка.АртикулПоставщика,Выборка.НоменклатураПоставщика)
							+ " " + Выборка.ИзготовительПоставщика + " "
							+" цена (руб.): "+Выборка.ЦенаСтарая+" -> "+Выборка.Цена +"]
							| " + Символы.ПС;
						КонецЦикла;
						
						текТекстПисьмаПрайс = СтрЗаменить(текТекстПисьмаПрайс, "*ТОВАРЫНЕКОРРЕКТНАЯЦЕНА*", СтрТовары);
						
					КонецЕсли;
					
				Иначе
					текТемаПисьмаПрайс = ТемаПисьмаПрайсЗагружен;
					текТекстПисьмаПрайс = ТекстПисьмаПрайсЗагружен;
					текТекстПисьмаПрайс = СтрЗаменить(текТекстПисьмаПрайс, "*ДАТА*", Формат(ТекущаяДата(),"ДЛФ=DD"));
					
				КонецЕсли;
				//#PK83-324 Kalinin V.A. ( 2018-05-21 )
				// ДОбавил проверку на заполненость значений
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПереоценкаОстатковПоставщикаТоварыПоставщика.НомерСтроки,
				|	ПереоценкаОстатковПоставщикаТоварыПоставщика.АртикулПоставщика,
				|	ПереоценкаОстатковПоставщикаТоварыПоставщика.ИзготовительПоставщика,
				|	ПереоценкаОстатковПоставщикаТоварыПоставщика.НоменклатураПоставщика,
				|	ПереоценкаОстатковПоставщикаТоварыПоставщика.Цена,
				|	ПереоценкаОстатковПоставщикаТоварыПоставщика.ЦенаСтарая,
				|	ПереоценкаОстатковПоставщикаТоварыПоставщика.ПроцентОтклонения,
				|	ПереоценкаОстатковПоставщикаТоварыПоставщика.НеПереоценивать
				|ПОМЕСТИТЬ ТабДокумента
				|ИЗ
				|	Документ.ПереоценкаОстатковПоставщика.ТоварыПоставщика КАК ПереоценкаОстатковПоставщикаТоварыПоставщика
				|ГДЕ
				|	ПереоценкаОстатковПоставщикаТоварыПоставщика.Ссылка = &Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТабДокумента.НомерСтроки,
				|	ТабДокумента.АртикулПоставщика,
				|	ТабДокумента.ИзготовительПоставщика,
				|	ТабДокумента.НоменклатураПоставщика,
				|	ТабДокумента.Цена,
				|	ТабДокумента.ЦенаСтарая,
				|	ТабДокумента.ПроцентОтклонения,
				|	ТабДокумента.НеПереоценивать,
				|	""Артикул"" КАК НеЗаполненоеПоле
				|ИЗ
				|	ТабДокумента КАК ТабДокумента
				|ГДЕ
				|	ТабДокумента.АртикулПоставщика = """"
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТабДокумента.НомерСтроки,
				|	ТабДокумента.АртикулПоставщика,
				|	ТабДокумента.ИзготовительПоставщика,
				|	ТабДокумента.НоменклатураПоставщика,
				|	ТабДокумента.Цена,
				|	ТабДокумента.ЦенаСтарая,
				|	ТабДокумента.ПроцентОтклонения,
				|	ТабДокумента.НеПереоценивать,
				|	""Изготовитель поставщика""
				|ИЗ
				|	ТабДокумента КАК ТабДокумента
				|ГДЕ
				|	ТабДокумента.ИзготовительПоставщика = """"
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТабДокумента.НомерСтроки,
				|	ТабДокумента.АртикулПоставщика,
				|	ТабДокумента.ИзготовительПоставщика,
				|	ТабДокумента.НоменклатураПоставщика,
				|	ТабДокумента.Цена,
				|	ТабДокумента.ЦенаСтарая,
				|	ТабДокумента.ПроцентОтклонения,
				|	ТабДокумента.НеПереоценивать,
				|	""Новая цена""
				|ИЗ
				|	ТабДокумента КАК ТабДокумента
				|ГДЕ
				|	ТабДокумента.Цена = 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТабДокумента.НомерСтроки,
				|	ТабДокумента.АртикулПоставщика,
				|	ТабДокумента.ИзготовительПоставщика,
				|	ТабДокумента.НоменклатураПоставщика,
				|	ТабДокумента.Цена,
				|	ТабДокумента.ЦенаСтарая,
				|	ТабДокумента.ПроцентОтклонения,
				|	ТабДокумента.НеПереоценивать,
				|	""Номенклатура""
				|ИЗ
				|	ТабДокумента КАК ТабДокумента
				|ГДЕ
				|	ТабДокумента.НоменклатураПоставщика = ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.Пустаяссылка)";
				
				Запрос.УстановитьПараметр("Ссылка",  ЗаписьРегистра.Объект);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если РезультатЗапроса.Пустой() тогда 
					текТекстПисьмаПрайс = СтрЗаменить(текТекстПисьмаПрайс, "*ТОВАРЫОШИБКА*", "Ошибок в заполнении полей не обнаружено");
				КонецЕсли;	
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				СтрТоварыОшибка = "";	
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					СтрТоварыОшибка = СтрТоварыОшибка +"[строка №"+ВыборкаДетальныеЗаписи.НомерСтроки+" "+ВыборкаДетальныеЗаписи.АртикулПоставщика + " " + ВыборкаДетальныеЗаписи.ИзготовительПоставщика + " "
					+" цена (руб.): "+ВыборкаДетальныеЗаписи.Цена +" - не заполнено поле " +ВыборкаДетальныеЗаписи.НеЗаполненоеПоле + "]
					| "+ Символы.ПС;
								
				КонецЦикла;
				  	
					текТекстПисьмаПрайс = СтрЗаменить(текТекстПисьмаПрайс, "*ТОВАРЫОШИБКА*", СтрТоварыОшибка);

				//
			
			Иначе
				РезультатПереоценки = Документы.ПереоценкаОстатковПоставщика.СформироватьРезультатПереоценки(ЗаписьРегистра.Объект);
				Если НЕ РезультатПереоценки.ФайлыЕсть Тогда
					Ошибка = Истина;
					Если РежимОтладки Тогда
						Сообщить("нечего отправлять");
					КонецЕсли;
					Продолжить;
					// + Пушкин 20180426
					лОписание = лОписание + "[нечего отправлять]";
					// - Пушкин 20180426
				КонецЕсли;
				ОтправленныеДанные = Неопределено;
				
				Для Каждого Док Из РезультатПереоценки.СписокДокументов Цикл
					Если ОтправленныеДанные = Неопределено Тогда
						ИмяАрхива = ИмяВременногоКаталога + Док.МаскаФайла + ".zip";
						ОтправленныеДанные = Новый ЗаписьZipФайла(ИмяАрхива);
					
					КонецЕсли;
					ВременныйФайл = ИмяВременногоКаталога + Док.ИмяФайла;
					Док.ТабДокумент.Записать(ВременныйФайл, ТипФайлаТабличногоДокумента.XLS);
					ОтправленныеДанные.Добавить(ВременныйФайл, РежимСохраненияПутейZIP.НеСохранятьПути);
				
				КонецЦикла;
				ОтправленныеДанные.Записать();
				
				текТемаПисьмаПрайс = ТемаПисьмаПрайсПереоценка;
				текТекстПисьмаПрайс = ТекстПисьмаПрайсПереоценка;
				текТекстПисьмаПрайс = СтрЗаменить(текТекстПисьмаПрайс, "*ДАТА*", Формат(ТекущаяДата(),"ДЛФ=DD"));
				
				ВременныйФайл = ИмяАрхива;

			КонецЕсли;
			
			НачатьТранзакцию();
			Попытка
							
				СписокАдресатов = СформироватьСписокАдресовИзСтроки(ЗаписьРегистра.АдресПоставщика + ";" + ЗаписьРегистра.КопияАдресМенеджера);
				
				текТекстПисьмаПрайсЗагружен = ТекстПисьмаПрайсЗагружен;
				текТекстПисьмаПрайсЗагружен = СтрЗаменить(текТекстПисьмаПрайсЗагружен, "*ДАТА*", Формат(ТекущаяДата(),"ДЛФ=DD"));
				
				Если СписокАдресатов.Количество() = 0 Тогда
					Если РежимОтладки Тогда
						Сообщить("некому отправлять");
					КонецЕсли;

					Ошибка = Истина;
					// + Пушкин 20180426
					лОписание = лОписание + "[некому отправлять]";
					// - Пушкин 20180426
				Иначе
					Ошибка = НЕ	ОтправитьПисьмо(Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПрайсаVMI,
					текТекстПисьмаПрайс, текТемаПисьмаПрайс, СписокАдресатов, , , ВременныйФайл, Отправитель);
					// + Пушкин 20180426
					Если Ошибка тогда
						лОписание = лОписание + "[НЕ ОтправитьПисьмо]";
					КонецЕсли;
					// - Пушкин 20180426
				КонецЕсли;
				
				аЗапись = РегистрыСведений.ИсторияОтправкиПисемПоставщикам.СоздатьМенеджерЗаписи();
				аЗапись.Объект = ЗаписьРегистра.Объект;
				аЗапись.ДатаРегистрации = ЗаписьРегистра.ДатаРегистрации;
				аЗапись.НомерРегистрации = ЗаписьРегистра.НомерРегистрации;
				аЗапись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				Если НЕ Ошибка Тогда
					аЗапись.Отправлен = Истина;
					аЗапись.ДатаОтправки = ТекущаяДата();
					аЗапись.Ошибка = Ложь;
				Иначе
					аЗапись.Отправлен = Ложь;
					аЗапись.Ошибка = Истина;
				КонецЕсли;
				аЗапись.АдресПоставщика = ЗаписьРегистра.АдресПоставщика;
				аЗапись.КопияАдресМенеджера = ЗаписьРегистра.КопияАдресМенеджера;
				Попытка
					аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения(Новый Структура("ТабДокумент", ОтправленныеДанные), Новый СжатиеДанных(9));
				Исключение
					// + Пушкин 20180426
					лОписаниеОшибки = ОписаниеОшибки();
					
					ЗаписьЖурналаРегистрации("Отправка почты поставщикам", УровеньЖурналаРегистрации.Ошибка, , , лОписаниеОшибки);
					
					лОписание = лОписание + "[Попытка аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения] " + лОписаниеОшибки;
					// - Пушкин 20180426
				КонецПопытки;
				аЗапись.Записать(Истина);
				
				//ОтправленныеДанные.Удалить();
				
				Если РежимОтладки Тогда
					Сообщить("документ отправлен");
				
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
				Если РежимОтладки Тогда
					Сообщить("транзакция зафиксирована");
					
				КонецЕсли;
				
			Исключение
				Если РежимОтладки Тогда
					Сообщить("неуспешно ");
					Сообщить(ОписаниеОшибки());
				КонецЕсли;
				
				// + Пушкин 20180426
				лОписаниеОшибки = ОписаниеОшибки();
				
				ЗаписьЖурналаРегистрации("Отправка почты поставщикам", УровеньжурналаРегистрации.Ошибка, , , лОписаниеОшибки);
				ОтменитьТранзакцию();
				
				лОписание = лОписание + "[ОтменитьТранзакцию()] " + лОписаниеОшибки;
				// - Пушкин 20180426
				
			КонецПопытки;
			
			//НачатьТранзакцию();
			//Попытка
			//	пар = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗаписьРегистра.Объект, "Дата,Номер");
			//	ВременныйФайл = ИмяВременногоКаталога + Формат(пар.Дата,"ДФ=yyyy_MM_dd") + "_" + СокрЛП(пар.Номер) + ".xls";
			//	Попытка
			//		ОтправленныеДанные.Записать(ВременныйФайл,ТипФайлаТабличногоДокумента.XLS);
			//	Исключение
			//		Сообщить("неизвестный тип вложения");
			//		Сообщить(ТипЗнч(ОтправленныеДанные));
			//		
			//	КонецПопытки;
			//	
			//	СписокАдресатов = СформироватьСписокАдресовИзСтроки(ЗаписьРегистра.АдресПоставщика + ";" + ЗаписьРегистра.КопияАдресМенеджера);
			//	
			//	текТекстПисьмаПрайсЗагружен = ТекстПисьмаПрайсЗагружен;
			//	текТекстПисьмаПрайсЗагружен = СтрЗаменить(текТекстПисьмаПрайсЗагружен, "*ДАТА*", Формат(ТекущаяДата(),"ДЛФ=DD"));
			//	
			//	Если СписокАдресатов.Количество() = 0 Тогда
			//		Если РежимОтладки Тогда
			//			Сообщить("некому отправлять");
			//		КонецЕсли;

			//		Ошибка = Истина;
			//	Иначе
			//		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПрайсаVMI,
			//		текТекстПисьмаПрайс, текТемаПисьмаПрайс, СписокАдресатов, , , ВременныйФайл);
			//		
			//	КонецЕсли;
			//	
			//	аЗапись = РегистрыСведений.ИсторияОтправкиПисемПоставщикам.СоздатьМенеджерЗаписи();
			//	аЗапись.Объект = ЗаписьРегистра.Объект;
			//	аЗапись.ДатаРегистрации = ЗаписьРегистра.ДатаРегистрации;
			//	аЗапись.НомерРегистрации = ЗаписьРегистра.НомерРегистрации;
			//	аЗапись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			//	Если НЕ Ошибка Тогда
			//		аЗапись.Отправлен = Истина;
			//		аЗапись.ДатаОтправки = ТекущаяДата();
			//		аЗапись.Ошибка = Ложь;
			//	Иначе
			//		аЗапись.Отправлен = Ложь;
			//		аЗапись.Ошибка = Истина;
			//	КонецЕсли;
			//	аЗапись.АдресПоставщика = ЗаписьРегистра.АдресПоставщика;
			//	аЗапись.КопияАдресМенеджера = ЗаписьРегистра.КопияАдресМенеджера;
			//	аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения(ОтправленныеДанные, Новый СжатиеДанных(9));
			//	аЗапись.Записать(Истина);
			//	
			//	//ОтправленныеДанные.Удалить();
			//	
			//	Если РежимОтладки Тогда
			//		Сообщить("документ отправлен");
			//	
			//	КонецЕсли;
			//	
			//	ЗафиксироватьТранзакцию();
			//	
			//	Если РежимОтладки Тогда
			//		Сообщить("транзакция зафиксирована");
			//		
			//	КонецЕсли;
			//	
			//Исключение
			//	Если РежимОтладки Тогда
			//		Сообщить("неуспешно ");
			//		Сообщить(ОписаниеОшибки());
			//	КонецЕсли;
			//		
			//	ОтменитьТранзакцию();
			//	
			//КонецПопытки;

			
		КонецЕсли;
		
		// + Пушкин 20180426
		Если ЗначениеЗаполнено(лОписание) тогда
			лстр = тчОшибки.Добавить();		
			лстр.Объект = лОбъект;
			лстр.АдресПоставщика = лАдресПоставщика;
			лстр.Описание = лОписание;
		КонецЕсли;
		// - Пушкин 20180426
			
	КонецЦикла;
	
	// + Пушкин 20180426
	Если тчОшибки.Количество() > 0 тогда	
		алармстр = "Ошибки отправки почты из обработки, вызываемой регламентным заданием [Отправка почты поставщику] ";
		алармсч = 0;
		Для каждого лстр из тчОшибки цикл
			алармсч = алармсч + 1;
			
			алармстр = алармстр + Символы.ПС + 
					  СокрЛП(алармсч) + ". " + Символы.ПС +
					  "Объект = " + СокрлП(лстр.Объект) + Символы.ПС + 
					  "АдресПоставщика = " + СокрлП(лстр.АдресПоставщика) + Символы.ПС + 
					  "Описание = " + СокрлП(лстр.Описание);
			
		КонецЦикла;
		
		Попытка
			РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОтправкиПочтыПоставщику,алармстр,"err отправка почты поставщику");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	// - Пушкин 20180426
	
КонецПроцедуры