Перем мСтруктураНастроек Экспорт; // Хранит значения по умолчанию, используемые в обработке
Перем ФлагОтображениеОбновлено Экспорт; 	

Процедура НачальнаяИнициализацияПостроителяОтчета() Экспорт
	лКлючАлгоритма = "Обработка_МегаЛогист_АРМ_УправлениеЗаказами_МодульОбъекта_НачальнаяИнициализацияПостроителяОтчета";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ЗапросПоЗаказам.ЗаказПокупателя КАК ЗаказПокупателя,
		               |	ЗапросПоЗаказам.Контрагент КАК Контрагент,
		               |	ЗапросПоЗаказам.КонтактноеЛицоКонтрагента КАК КонтактноеЛицоКонтрагента,
		               |	ВЫРАЗИТЬ(ЗапросПоЗаказам.АдресДоставки КАК СТРОКА(500)) КАК АдресДоставки,
		               |	ЗапросПоЗаказам.НомерЗаказа КАК Номер,
		               |	ЗапросПоЗаказам.Сумма КАК Сумма,
		               |	ЗапросПоОплате.СтатусОплаты,
		               |	ЗапросПоОплатеОтгрузке.СостояниеОтгрузки КАК СтатусОтгрузки,
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗапросПоЗаказам.ЗаказПокупателя) КАК КоличествоЗаказов,
		               |	ЗапросПоЗаказам.ЗаказПокупателя.Дата КАК Дата,
		               |	ЛОЖЬ КАК Флаг,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Статус КАК СтатусЗаказа,
		               |	ЗапросПоЗаказам.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.ВремяДоставкиС,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.ВремяДоставкиПо КАК ВремяДоставкиПо,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Источник,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Курьер,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Самовывоз,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.РабочийКомментарий,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.ТребуетУточнения,
		               |	ЗапросПоДоставке.СтатусДоставки,
		               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(500)) КАК АдресДоставкиПредставлениеСокращенное
		               |{ВЫБРАТЬ
		               |	ЗаказПокупателя.*,
		               |	Контрагент.*,
		               |	КонтактноеЛицоКонтрагента,
		               |	АдресДоставки,
		               |	Номер,
		               |	Сумма,
		               |	СтатусОплаты.*,
		               |	СтатусОтгрузки,
		               |	КоличествоЗаказов.*,
		               |	Дата,
		               |	Флаг,
		               |	СтатусЗаказа.*,
		               |	ВремяДоставкиС,
		               |	ВремяДоставкиПо,
		               |	Источник,
		               |	Курьер.*,
		               |	Самовывоз,
		               |	РабочийКомментарий,
		               |	ТребуетУточнения,
		               |	ДатаОтгрузки,
		               |	СтатусДоставки.*,
		               |	АдресДоставкиПредставлениеСокращенное}
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ЗаказПокупателя.Ссылка КАК ЗаказПокупателя,
		               |		ЗаказПокупателя.Контрагент КАК Контрагент,
		               |		"""" КАК КонтактноеЛицоКонтрагента,
		               |		"""" КАК АдресДоставки,
		               |		ЗаказПокупателя.Номер КАК НомерЗаказа,
		               |		ВЫРАЗИТЬ(ВЫБОР
		               |				КОГДА ЗаказПокупателя.ВалютаДокумента = &ВалютаРегламентированногоУчета
		               |					ТОГДА ЗаказПокупателя.СуммаДокумента
		               |				КОГДА НЕ ЗаказПокупателя.ВалютаДокумента = &ВалютаРегламентированногоУчета
		               |						И НЕ ЗаказПокупателя.КратностьВзаиморасчетов = 0
		               |					ТОГДА ЗаказПокупателя.СуммаДокумента * ЗаказПокупателя.КурсВзаиморасчетов / ЗаказПокупателя.КратностьВзаиморасчетов
		               |				ИНАЧЕ 0
		               |			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
		               |		ЗаказПокупателяТовары.Номенклатура КАК Номенклатура
		               |	ИЗ
		               |		Документ.ЗаявкаПокупателя.Товары КАК ЗаказПокупателяТовары
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПокупателя КАК ЗаказПокупателя
		               |			ПО ЗаказПокупателяТовары.Ссылка = ЗаказПокупателя.Ссылка
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ЗаказПокупателя.Ссылка,
		               |		ЗаказПокупателя.Контрагент,
		               |		"""",
		               |		"""",
		               |		ЗаказПокупателя.Номер,
		               |		ВЫРАЗИТЬ(ВЫБОР
		               |				КОГДА ЗаказПокупателя.ВалютаДокумента = &ВалютаРегламентированногоУчета
		               |					ТОГДА ЗаказПокупателя.СуммаДокумента
		               |				КОГДА НЕ ЗаказПокупателя.ВалютаДокумента = &ВалютаРегламентированногоУчета
		               |						И НЕ ЗаказПокупателя.КратностьВзаиморасчетов = 0
		               |					ТОГДА ЗаказПокупателя.СуммаДокумента * ЗаказПокупателя.КурсВзаиморасчетов / ЗаказПокупателя.КратностьВзаиморасчетов
		               |				ИНАЧЕ 0
		               |			КОНЕЦ КАК ЧИСЛО(15, 2)),
		               |		ЗаказПокупателяУслуги.Номенклатура
		               |	ИЗ
		               |		Документ.ЗаявкаПокупателя.Услуги КАК ЗаказПокупателяУслуги
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПокупателя КАК ЗаказПокупателя
		               |			ПО ЗаказПокупателяУслуги.Ссылка = ЗаказПокупателя.Ссылка) КАК ЗапросПоЗаказам
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ЗаказыПокупателейОстаткиИОбороты.СтрокаЗаявки КАК ЗаказПокупателя,
		               |			ВЫБОР
		               |				КОГДА ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход = ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
		               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОтгрузки.НеОтгружен)
		               |				КОГДА ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток, 0) <= 0
		               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОтгрузки.Отгружен)
		               |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОтгрузки.ЧастичноОтгружен)
		               |			КОНЕЦ КАК СостояниеОтгрузки,
		               |			ВЫБОР
		               |				КОГДА РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрРасход = 0
		               |						ИЛИ РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрРасход ЕСТЬ NULL
		               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.НеОплачен)
		               |				КОГДА РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрРасход >= РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрПриход
		               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.Оплачен)
		               |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.ЧастичноОплачен)
		               |			КОНЕЦ КАК СостояниеОплаты
		               |		ИЗ
		               |			РегистрНакопления.ЗаявкиПокупателей.ОстаткиИОбороты(, , , , СтрокаЗаявки.Заявка ССЫЛКА Документ.ЗаявкаПокупателя) КАК ЗаказыПокупателейОстаткиИОбороты
		               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Взаиморасчеты.ОстаткиИОбороты(, , , , ДокументРасчетов ССЫЛКА Документ.РеализацияТоваровУслуг) КАК РасчетыСКонтрагентамиОстаткиИОбороты
		               |				ПО ЗаказыПокупателейОстаткиИОбороты.СтрокаЗаявки = РасчетыСКонтрагентамиОстаткиИОбороты.ДокументРасчетов) КАК ЗапросПоОплатеОтгрузке
		               |		ПО ЗапросПоЗаказам.ЗаказПокупателя = ЗапросПоОплатеОтгрузке.ЗаказПокупателя
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей КАК МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |			ПО МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ.Контрагент = КонтактнаяИнформация.Объект
		               |				И МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.АдресДоставкиВид = КонтактнаяИнформация.Вид
		               |				И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		               |		ПО ЗапросПоЗаказам.ЗаказПокупателя = МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ КАК Заказ,
		               |			ВЫБОР
		               |				КОГДА МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Самовывоз = ИСТИНА
		               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыДоставки.Самовывоз)
		               |				ИНАЧЕ ВЫБОР
		               |						КОГДА СтатусыПоПриоритетам.ПриоритетСтатусов = 3
		               |							ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыДоставки.Выполняется)
		               |						ИНАЧЕ ВЫБОР
		               |								КОГДА СтатусыПоПриоритетам.ПриоритетСтатусов = 2
		               |									ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыДоставки.Выполнена)
		               |								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыДоставки.НеВыполнена)
		               |							КОНЕЦ
		               |					КОНЕЦ
		               |			КОНЕЦ КАК СтатусДоставки
		               |		ИЗ
		               |			РегистрСведений.МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей КАК МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей
		               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |					ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.МаршрутноеЗадание.ЗаказПокупателя КАК ЗаказПокупателя,
		               |					МАКСИМУМ(ВЫБОР
		               |							КОГДА ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполняется)
		               |								ТОГДА 3
		               |							ИНАЧЕ ВЫБОР
		               |									КОГДА ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполнен)
		               |										ТОГДА 2
		               |									ИНАЧЕ 1
		               |								КОНЕЦ
		               |						КОНЕЦ) КАК ПриоритетСтатусов
		               |				ИЗ
		               |					РегистрСведений.МегаЛогист_ИсторияСтатусовМаршрутныхЗаданий.СрезПоследних(, ) КАК ИсторияСтатусовМаршрутныхЗаданийСрезПоследних
		               |				
		               |				СГРУППИРОВАТЬ ПО
		               |					ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.МаршрутноеЗадание.ЗаказПокупателя) КАК СтатусыПоПриоритетам
		               |				ПО МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ = СтатусыПоПриоритетам.ЗаказПокупателя) КАК ЗапросПоДоставке
		               |		ПО ЗапросПоЗаказам.ЗаказПокупателя = ЗапросПоДоставке.Заказ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ВЫБОР
		               |				КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрРасход, 0) = 0
		               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.НеОплачен)
		               |				КОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрРасход >= РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрПриход
		               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.Оплачен)
		               |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.ЧастичноОплачен)
		               |			КОНЕЦ КАК СтатусОплаты,
		               |			РасчетыСКонтрагентамиОстаткиИОбороты.ДокументРасчетов КАК ЗаказПокупателя
		               |		ИЗ
		               |			РегистрНакопления.Взаиморасчеты.ОстаткиИОбороты(, , , , ) КАК РасчетыСКонтрагентамиОстаткиИОбороты
		               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Взаиморасчеты.ОстаткиИОбороты(, , , , ) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты
		               |				ПО РасчетыСКонтрагентамиОстаткиИОбороты.ДокументРасчетов = ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДокументРасчетов) КАК ЗапросПоОплате
		               |		ПО ЗапросПоЗаказам.ЗаказПокупателя = ЗапросПоОплате.ЗаказПокупателя
		               |{ГДЕ
		               |	ЗапросПоЗаказам.Номенклатура.*,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.ТребуетУточнения,
		               |	ЗапросПоЗаказам.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки}
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗапросПоЗаказам.КонтактноеЛицоКонтрагента,
		               |	ЗапросПоЗаказам.Контрагент,
		               |	ЗапросПоОплатеОтгрузке.СостояниеОтгрузки,
		               |	ЗапросПоЗаказам.НомерЗаказа,
		               |	ЗапросПоЗаказам.ЗаказПокупателя,
		               |	ЗапросПоЗаказам.Сумма,
		               |	ЗапросПоЗаказам.ЗаказПокупателя.Дата,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Статус,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.ВремяДоставкиС,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.ВремяДоставкиПо,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Источник,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Курьер,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Самовывоз,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.РабочийКомментарий,
		               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.ТребуетУточнения,
		               |	ВЫРАЗИТЬ(ЗапросПоЗаказам.АдресДоставки КАК СТРОКА(500)),
		               |	ЗапросПоЗаказам.ЗаказПокупателя.ДатаОтгрузки,
		               |	ЗапросПоДоставке.СтатусДоставки,
		               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(500)),
		               |	ЗапросПоОплате.СтатусОплаты
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Дата УБЫВ
		               |{УПОРЯДОЧИТЬ ПО
		               |	Дата}";

	
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
	
	// Удалим из отбора служебное поле: оно нужно только для программной обработки
	// и не должно быть доступно для интерактивного изменения пользователями
	ДоступныеПоля = Построитель.Отбор.ПолучитьДоступныеПоля();
	ДоступныеПоля.Удалить(ДоступныеПоля.Найти("КоличествоЗаказов")); 
		
КонецПроцедуры

Процедура ЗаполнитьСтруктуруНастроек() Экспорт
	
	мСтруктураНастроек = Новый Структура;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	мСтруктураНастроек.Вставить("ТекущийПользователь"	, ТекущийПользователь);
	мСтруктураНастроек.Вставить("Валюта"				, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяВалютаВзаиморасчетов"));
	//мСтруктураНастроек.Вставить("ТипЦен"				, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойТипЦенПродажи"));
	мСтруктураНастроек.Вставить("Организация"			, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяОрганизация"));
	мСтруктураНастроек.Вставить("Склад"					, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойСклад"));
	мСтруктураНастроек.Вставить("СтавкаНДС"				, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяСтавкаНДС"));
	мСтруктураНастроек.Вставить("Касса"                 , УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяКасса"));
	
КонецПроцедуры

Функция ПолучитьВидКИ(ТипКИ, ВидКИ) Экспорт
	
	СправочникВКИ = Справочники.ВидыКонтактнойИнформации;
	НайденныйЭлемент = СправочникВКИ.НайтиПоНаименованию(ВидКИ, Истина);
	Если НайденныйЭлемент.Пустая() Тогда
		НовыйЭлемент = СправочникВКИ.СоздатьЭлемент();
		НовыйЭлемент.Наименование = ВидКИ;
		НовыйЭлемент.Тип = ТипКИ;
		НовыйЭлемент.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
		НовыйЭлемент.Записать();
		
		ВидКонтактнойИнформации = НовыйЭлемент.Ссылка;
	Иначе
		ВидКонтактнойИнформации = НайденныйЭлемент;	
	КонецЕсли;
	
	Возврат ВидКонтактнойИнформации;
	
КонецФункции

Функция ПолучитьКарту(Клиент) Экспорт 	
	
	Карта = Справочники.ИнформационныеКарты.ПустаяСсылка();
	Если Клиент.Пустая() Тогда
		Возврат Карта;
	КонецЕсли;    
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеКарты.Ссылка Как Карта
	               |ИЗ
	               |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	               |ГДЕ
	               |	ИнформационныеКарты.ВладелецКарты = &ВладелецКарты";
				   
	Запрос.УстановитьПараметр("ВладелецКарты", Клиент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Карта = Выборка.Карта;
	КонецЕсли;
	
	Возврат Карта;
	
КонецФункции

Процедура СформироватьОтчетАнализЗаказовПокупателей(ЗаказПокупателя, ФормаВладелец) Экспорт 
	
	Если Не ЗаказПокупателя.Пустая() Тогда
		
		ОтчетКонтрагента = Отчеты.АнализЗаказовПокупателей.Создать();
		
		ОтчетКонтрагента.УстановитьНачальныеНастройки();
			
		Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
				
		КонецЦикла;
			
		Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Цикл
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки[0]);
				
		КонецЦикла;
			
		Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Количество() > 0 Цикл
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля[0]);
				
		КонецЦикла;
			
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагентаВладелец");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("СостояниеОплаты");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ЗаказПокупателя");
		
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("СостояниеОтгрузки", ТипРазмещенияРеквизитовИзмерений.Отдельно,3);

		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗаказа",        "Запланировано",     Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОплатить",   "Осталось оплатить", Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Предоплата",         "Предоплата",        Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьСуммаВзаиморасчетов","Осталось отгрузить "+Символы.ПС+ "(в валюте взаиморасчетов)",Истина, "ЧЦ=15; ЧДЦ=2");
		
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Запланировано",      "Запланировано",       Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузить",  "Осталось отгрузить",  Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("СоСклада",           "Со склада",           Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Заказано",           "Заказано",            Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОбеспечить", "Осталось обеспечить", Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		
		ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["ДоговорКонтрагентаВладелец"];
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ?(ЗаказПокупателя.Контрагент.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
		ЭлементОтбора.Значение = ЗаказПокупателя.Контрагент;
		
		ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["ЗаказПокупателя"];
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
		ЭлементОтбора.Значение = ЗаказПокупателя;
		
		ОтчетКонтрагента.СостояниеОплатыПоЗаказу 	= Истина;
		ОтчетКонтрагента.НеОплачено 				= Истина;
		ОтчетКонтрагента.ОплаченоЧастично 			= Истина;
		ОтчетКонтрагента.ОплаченоПолностью          = Истина;
		
		ОтчетКонтрагента.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
			
		ФормаОтчета = ОтчетКонтрагента.ПолучитьФорму(,ФормаВладелец);
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	Иначе
		Сообщить("Заказ не записан! Невозможно сформировать отчет 'Анализ заказов покупателей'", СтатусСообщения.Важное);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьОтчетПоКонтрагенту(Клиент, ФормаВладелец) Экспорт 	
	Если Не Клиент.Пустая() Тогда   		
		Отчет = Отчеты.ОтчетПоДаннымКонтрагента.Создать();
		Отчет.КонтрагентОтчета = Клиент;
		Отчет.ДатаОтчета = ТекущаяДата();
		
		ФормаОтчета = Отчет.ПолучитьФорму(,ФормаВладелец);
		
		Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ПолеТабличногоДокумента); 			
		ФормаОтчета.Открыть();
	КонецЕсли;    
КонецПроцедуры

Процедура СформироватьОтчетВедомостьПоЗаказамПокупателей(Клиент) Экспорт
	
	СообщатьОбОшибках = Истина;
	
	Если Клиент.Пустая() Тогда
		Если СообщатьОбОшибках Тогда
			Сообщить("Не выбран клиент! Невозможно сформировать отчет 'Ведомость по заказам покупателей'", СтатусСообщения.Важное);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если Не УправлениеЗаказами.ПравоДоступаКОтчету("ВедомостьЗаказыПокупателей", СообщатьОбОшибках) Тогда
		Возврат;
	КонецЕсли;
	
	Ведомость = Отчеты.ВедомостьЗаказыПокупателей.Создать();
	ВедомостьФорма = Ведомость.ПолучитьФорму();
	
	Ведомость.УстановитьНачальныеНастройки();
	
	// Снимем лишние показатели
	Показатели = Ведомость.УниверсальныйОтчет.Показатели;
	Группа = Показатели.Строки.Найти("СуммаУпр", "Имя", Ложь);
	Группа.Использование = Ложь;
	Для каждого Строка Из Группа.Строки Цикл
		Строка.Использование = Ложь;
	КонецЦикла;

	// Установим нужный отбор
	ВедомостьОтбор = Ведомость.УниверсальныйОтчет.ПостроительОтчета.Отбор;
	НовыйОтбор = ВедомостьОтбор.Добавить("ДоговорКонтрагента.Владелец",,"Договор контрагента.Владелец");
	НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
	НовыйОтбор.Значение = Клиент;
	НовыйОтбор.Использование = Истина;

	Ведомость.СформироватьОтчет(ВедомостьФорма.ЭлементыФормы.ПолеТабличногоДокументаРезультат);
	
	Ведомость.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
	ВедомостьФорма.Открыть();

КонецПроцедуры

// Функция возвращает запись об адресе из регистра сведений "КонтактнаяИнформация"
Функция ПолучитьЗаписьКИ(ТипКИ, ВидКИ, Клиент) Экспорт
	
	НаборЗаписейКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписейКИ.Отбор.Объект.Установить(Клиент);
	НаборЗаписейКИ.Отбор.Тип.Установить(ТипКИ);
	НаборЗаписейКИ.Отбор.Вид.Установить(ВидКИ);
	НаборЗаписейКИ.Прочитать();
	
	Если НаборЗаписейКИ.Количество()=1 Тогда
		ЗаписьКИ = НаборЗаписейКИ[0];
	Иначе
		ЗаписьКИ = НаборЗаписейКИ.Добавить();
		ЗаписьКИ.Объект = Клиент;
		ЗаписьКИ.Тип = ТипКИ;
		ЗаписьКИ.Вид = ВидКИ;
	КонецЕсли;
	
	Возврат ЗаписьКИ;
	
КонецФункции

Функция ОставитьТолькоЦифры(Знач СтрокаТелефон) Экспорт
	
	СтрокаБезЦифр = "";
	
	СтрокаПроверки = СокрЛП(СтрокаТелефон);
	Длина = СтрДлина(СтрокаПроверки);
	
	Для а = 1 По Длина Цикл
		ТекСимвол = Сред(СтрокаПроверки, а, 1);
		Если Найти("0123456789", ТекСимвол) > 0 Тогда
			СтрокаБезЦифр = СтрокаБезЦифр + ТекСимвол; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат СтрокаБезЦифр;	
	
КонецФункции 

Функция ПолучитьНомерПоФормату(СтрокаТелефон, КодСтраны = Неопределено, КодГорода = Неопределено, НомерТелефона = Неопределено) Экспорт
	
	Телефон = СокрЛП(СтрокаТелефон);
	
	ТолькоЦифры = ОставитьТолькоЦифры(Телефон);
	ВсегоСимволов = СтрДлина(ТолькоЦифры);
	
	ПервыйСимвол = Лев(ТолькоЦифры, 1);
	Если ПервыйСимвол = "7" Или ПервыйСимвол = "8" И ВсегоСимволов = 11 Тогда
		КодСтраны     = "+7";
		КодГорода     = Сред(ТолькоЦифры, 2, 3);
        НомерТелефона = Сред(ТолькоЦифры, 5, 3)+"-"+Сред(ТолькоЦифры, 8, 2)+"-"+Сред(ТолькоЦифры, 10, 2);		
	ИначеЕсли ВсегоСимволов = 7 Тогда
		КодСтраны     = "+7";
		КодГорода     = "343";
        НомерТелефона = Сред(ТолькоЦифры, 1, 3)+"-"+Сред(ТолькоЦифры, 4, 2)+"-"+Сред(ТолькоЦифры, 6, 2)	
	ИначеЕсли ПервыйСимвол<>"7" И ПервыйСимвол<>"8" И ВсегоСимволов = 10 Тогда
		КодСтраны     = "+7";
		КодГорода     = Сред(ТолькоЦифры, 1, 3);
        НомерТелефона = Сред(ТолькоЦифры, 4, 3)+"-"+Сред(ТолькоЦифры, 7, 2)+"-"+Сред(ТолькоЦифры, 9, 2)
	Иначе
		КодСтраны = "";
		КодГорода = "";
		НомерТелефона = ТолькоЦифры;
	КонецЕсли;
	
	НомерПоФормату = КодСтраны+?(КодГорода="", "", " ("+КодГорода+") ")+НомерТелефона; 	
	Возврат НомерПоФормату;

КонецФункции

Процедура УстановитьНастройкиПостроителя(Настройки) Экспорт	
	
	// Восстановим все настройки для корректного восстановления сохраненных значений
	Построитель.ЗаполнитьНастройки();
	
	Если Настройки <> Неопределено Тогда
		Построитель.УстановитьНастройки(Настройки, Истина); 
	Иначе
		//Сообщить("Текущая настройка не содержит отборов!");
	КонецЕсли;   	
			
	// Удалим из отбора служебное поле: оно нужно только для программной обработки
	// и не должно быть доступно для интерактивного изменения пользователями
	ДоступныеПоля = Построитель.Отбор.ПолучитьДоступныеПоля();
	ДоступныеПоля.Удалить(ДоступныеПоля.Найти("КоличествоЗаказов")); 

КонецПроцедуры

Функция ПолучитьКодКартыHTML() Экспорт
	
	КодХТМЛ = "
	    |<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""> 
	    |<html xmlns=""http://www.w3.org/1999/xhtml""> 
	    |<head>
	    |	<title>Примеры. Геокодирование.</title>
	    |	<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
	    |	<script src=""http://api-maps.yandex.ru/1.1/index.xml?key=ANpUFEkBAAAAf7jmJwMAHGZHrcKNDsbEqEVjEUtCmufxQMwAAAAAAAAAAAAvVrubVT4btztbduoIgTLAeFILaQ=="" type=""text/javascript""></script> 
	    |	<script type=""text/javascript"">
		|
	    |		var map, geoResult;
		|		var BoundsCenter = new YMaps.GeoBounds(new YMaps.GeoPoint(37.13	, 55.95), new YMaps.GeoPoint(38.16, 55.45));
		|		var GroupPolygon	= new YMaps.Group();
		|		var GroupPoints		= new YMaps.Group();
		|
		|		var style = new YMaps.Style(""default#greenPoint"");
		|		style.polygonStyle = new YMaps.PolygonStyle();
		|		style.polygonStyle.fill = 0;
		|		style.polygonStyle.outline = 1;
		|		style.polygonStyle.strokeWidth = 2;
		|		style.polygonStyle.strokeColor = ""000000"";
		|		YMaps.Styles.add(""polygon#Example"", style);
		|
		|		var options = {
		|			draggable: true,
		|			hasBalloon: false,
		|			style: ""polygon#Example""
		|		};
		|
		|		// Создание обработчика для события window.onLoad 
	    |		YMaps.jQuery(function (){
	    |			// Создание экземпляра карты и его привязка к созданному контейнеру 
	    |			map = new YMaps.Map(YMaps.jQuery(""#YMapsID"")[0]);
	    |			// Установка для карты ее центра и масштаба 
	    |			map.setCenter(new YMaps.GeoPoint(37.64, 55.76), 10);
		|
		|           map.disableDblClickZoom();
		|			map.enableScrollZoom();
		|
		|			// Создание кнопки-флажка
		|			var button = new YMaps.ToolBarButton({caption: ""Объединить в группы""});
		|			YMaps.Events.observe(button, button.Events.Click, function () { StateGroupPoints(); });
		|
	    |			// Добавление элементов управления
		|			map.addControl(new YMaps.ToolBar(button));
		|			map.addControl(new YMaps.Zoom());
		|			map.addControl(new YMaps.TypeControl());
        |
		|			YMaps.Events.observe(
		|				map,
		|				map.Events.DblClick,
		|				function (map, mEvent){
		|					
		|					var x = mEvent.getGeoPoint().getLng();
		|					var y = mEvent.getGeoPoint().getLat();
		|					var polygon = new YMaps.Polygon([
		|								new YMaps.GeoPoint(x,     y),
		|								new YMaps.GeoPoint(x+0.2, y),
		|								new YMaps.GeoPoint(x+0.2, y-0.1),
		|								new YMaps.GeoPoint(x,     y-0.1)
		|								], options
		|					);
		|					map.addOverlay(polygon);
		|					GroupPolygon.add(polygon);
		|                   polygon.startEditing();
		|
		|					YMaps.Events.observe(
		|						polygon,
		|						polygon.Events.DblClick,
		|						function (polygon){
		|							if (polygon.isEditing()) {
		|								polygon.stopEditing();
		|							} else {
		|								polygon.startEditing();
		|							}
		|						}
		|					);
		|
		|					YMaps.Events.observe(
		|						polygon,
		|						polygon.Events.MouseEnter,
		|						function (polygon){
		|							for (a=0;a<GroupPoints.length();a++){
		|								var obj = GroupPoints.get(a);
		|								if (polygon.contains(obj._point) == 1) {
		|			                        obj.setStyle(""default#greenPoint"");
		|								} else {
		|			                        obj.setStyle(""default#lightBluePoint"");
		|			                    }
		|							}
		|						}
		|					);
		|
		|					YMaps.Events.observe(
		|						polygon,
		|						polygon.Events.MouseLeave,
		|						function (polygon){
		|							for (a=0;a<GroupPoints.length();a++){
		|								var obj = GroupPoints.get(a);
		|								if (polygon.contains(obj._point) == 1) {
		|			                        obj.setStyle(""default#lightBluePoint"");
		|			                    }
		|							}
		|						}
		|					);
		|
		|                   // Установка параметров редактирования ломанной
		|					polygon.setEditingOptions({
		|						menuManager: function (index, menuItems) {
		|							menuItems.push({
		|								id: ""RemovePolygon"",
		|								title: '<span style=""white-space:nowrap;"">Удалить выделение</span>',
		|								onClick: function (polygon, pointIndex) {
		|									GroupPolygon.remove(polygon); map.removeOverlay(polygon);
		|								}
		|							});
		|							return menuItems;
		|						}
		|					});
		|				}
		|			);
		|		});
		|
		|		function StateGroupPoints() {
		|			map.closeBalloon();
		|			if (GroupPolygon.length() == 0) {alert(""Невозможно выполнить объединение. Выделения групп не найдены.""); return;}
		|			if (GroupPoints.length() == 0) {alert(""Невозможно выполнить объединение. Не найдены метки на карте.""); return;}
		|           for (i=0; i<GroupPolygon.length(); i++){
		|				var polygon = GroupPolygon.get(i);
		|				polygon.metaDataProperty = (i+1);
		|				for (a=0; a<GroupPoints.length(); a++){
		|					var obj = GroupPoints.get(a);
		|					if (polygon.contains(obj._point) == 1) {
		|						obj.metaDataProperty = (i+1);
		|					}
		|				}
		|			}
		|			var res_elem = document.getElementById(""result_string"");
		|			res_elem.value = """";
		|			for (a=0; a<GroupPoints.length(); a++){
		|				var obj			= GroupPoints.get(a);
		|				res_elem.value	= res_elem.value + ""#"" + obj.description + ""|"" + obj.metaDataProperty;
		|			}
		|			if (res_elem.value != """") {alert(""Объединение успешно завершено!"");}
		|		}
		|
		|		function showA(CountPoint) {
		|			for(var a=1; a<=CountPoint; a++) {
		|				showAddress(document.getElementById(""address_string"" + a).value, document.getElementById(""number_string"" + a).value);
		|			};
		|		};
		|
		|		// Функция для отображения результата геокодирования 
		|		// Параметр value - адрес объекта для поиска 
		|		function showAddress (value, index) {
		|			// Запуск процесса геокодирования 
		|			var geocoder = new YMaps.Geocoder(value, {results: 1, boundedBy: map.getBounds(), strictBounds:true});
		|
		|			// Создание обработчика для успешного завершения геокодирования 
		|			YMaps.Events.observe(geocoder, geocoder.Events.Load, function () {
		|				// Если объект был найден, то добавляем его на карту 
		|				// и центрируем карту по области обзора найденного объекта 
		|
		|				if (this.length()) {
		|					geoResult = this.get(0);
		|					geoResult.description = index;
		|					GroupPoints.add(geoResult);
		|					map.addOverlay(geoResult);
		|					map.setBounds(BoundsCenter);		
		|				} else {
		|				}
		|			});
		|
		|			// Процесс геокодирования завершен неудачно 
		|			YMaps.Events.observe(
		|						geocoder,
		|						geocoder.Events.Fault,
		|						function (geocoder, error) {
		|							alert(""Произошла ошибка: "" + error);
		|						}
		|			);
		|
		|		};
		|	
	    |</script>
	    |</head>
	    |<body //~~onload~~> 
	    |	<div id=""YMapsID"" style=""width:100%;height:100%""></div>
		|	//~~FiendsData~~
		|	<input type=""hidden"" id=""result_string"" value=""""></form>
	    |</body>
	    |
	    |</html>
	    |";
		
		Возврат КодХТМЛ;
		
КонецФункции	

