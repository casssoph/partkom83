Функция КодыРегионовДляЗагрузки() Экспорт
	Результат = Новый Массив;
	
	Для Каждого Регион Из СубъектыРФ.НайтиСтроки( Новый Структура("Загружать", Истина) ) Цикл
			Результат.Добавить(Регион.КодСубъектаРФ);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ПроверитьДоступностьОбновления(Знач РезультатПроверки = Неопределено)
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РезультатПроверки);
	Если РезультатПроверки = Неопределено Тогда
		ДоступныеДляЗагрузки.Загрузить(АдресныйКлассификаторСлужебный.ДоступныеВерсииАдресныхСведений(АдресВоВременномХранилище));
		ИдентификаторыДляОбновления = Новый Массив;
		Если ДоступныеДлязагрузки.Количество() > 0 Тогда
			Для Каждого Регион Из ДоступныеДляЗагрузки Цикл
				ИдентификаторыДляОбновления.Добавить(Регион.Идентификатор);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Инициализировать(Отчет = Неопределено) Экспорт
	
	ПараметрыДлительнойОперации = Новый Структура("Завершено, АдресРезультата, Идентификатор, Ошибка, ПодробноеПредставлениеОшибки");
	ПараметрыДлительнойОперации.Вставить("ИнтервалОжидания", 5);

	// Получаем уже загруженные регионы.
	ТаблицаРегионов = АдресныйКлассификаторСлужебный.СведенияОЗагрузкеСубъектовРФ();
	ТаблицаРегионов.Колонки.Добавить("Загружать", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Регион Из ТаблицаРегионов Цикл
		Регион.Представление = " " + Формат(Регион.КодСубъектаРФ, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ", " + Регион.Представление;
	КонецЦикла;
	
	//ТаблицаРегионов.ЗагрузитьКолонку(ТаблицаРегионов.ВыгрузитьКолонку("Загружено"), "Загружать");
	ТекущийКодРегиона = Неопределено;
	АдресВоВременномХранилище = Неопределено;
	
	ПроверитьДоступностьОбновления();
	
	// Добавляем пометку для загружаемого региона-параметра и ставим его текущей строкой.
	ТипТекущегоКодаРегиона = ТипЗнч(ТекущийКодРегиона);
	ТипЧисло               = Новый ОписаниеТипов("Число");
	
	Если ИдентификаторыДляОбновления.Количество() > 0 Тогда
		// Обновление строго указанных.
		Фильтр = Новый Структура("Идентификатор");
		Для Каждого Идентификатор Из ИдентификаторыДляОбновления Цикл 
			Фильтр.Идентификатор = Идентификатор;
			Кандидаты = ТаблицаРегионов.НайтиСтроки(Фильтр); 
			Если Кандидаты.Количество() > 0 Тогда
				Кандидаты[0].Загружать = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Фильтр = Новый Структура("Загружено", Истина);
		Кандидаты = ТаблицаРегионов.НайтиСтроки(Фильтр); 
		Если Кандидаты.Количество() > 0 Тогда
			Для Каждого Кандидат Из Кандидаты Цикл
				Кандидат.Загружать = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРегионов.ЗагрузитьКолонку(ТаблицаРегионов.ВыгрузитьКолонку("Загружено"), "Загружать");

	//Если Отчет <> Неопределено Тогда
		
		Если СубъектыРФ.Количество() > 0 Тогда
			//таблица передана в качестве параметра регламентного задания
			Фильтр = Новый Структура("Загружать", Истина);
			ПереданныеПараметры = СубъектыРФ.НайтиСтроки(Фильтр);
			Для Каждого Передан Из ПереданныеПараметры Цикл
				Кандидаты = ТаблицаРегионов.НайтиСтроки(Новый Структура("КодСубъектаРФ", Передан.КодСубъектаРФ));
				Если Кандидаты.Количество() > 0 Тогда
					Кандидаты[0].Загружать = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	//КонецЕсли;
	СубъектыРФ.Загрузить(ТаблицаРегионов);
	
	Аутентификация = Новый Структура("Логин,Пароль","10089542","rfc123$qwe");
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторССайта(Отчет = Неопределено) 
	
	КодыРегионов = КодыРегионовДляЗагрузки();
	
	ЗапуститьФоновуюЗагрузкуССайтаНаСервере(КодыРегионов, Аутентификация, Отчет);
		
КонецПроцедуры

Процедура ЗапуститьФоновуюЗагрузкуССайтаНаСервере(КодыРегионов, Аутентификация, Отчет = Неопределено) Экспорт
	
	Если КодыРегионов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(КодыРегионов);
	ПараметрыМетода.Добавить(Аутентификация);
	
	ПараметрыДлительнойОперации.Идентификатор   = Неопределено;
	ПараметрыДлительнойОперации.Завершено       = Истина;
	ПараметрыДлительнойОперации.АдресРезультата = Неопределено;
	ПараметрыДлительнойОперации.ПодробноеПредставлениеОшибки = Неопределено;
	ПараметрыДлительнойОперации.Ошибка                       = Неопределено;
	
	Попытка
		РезультатЗапуска = ДлительныеОперации.ЗапуститьВыполнениеВФоне(ИдентификаторФормы,
			"АдресныйКлассификаторСлужебный.ФоновоеЗаданиеЗагрузкиКлассификатораАдресовССайта",
			ПараметрыМетода,
			НСтр("ru = 'Загрузка адресного классификатора с сайта'"));
	Исключение
		Информация = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Информация);
		ТекстОшибки = НСтр("ru = 'Не удается загрузить адресные сведения.'");
		ТекстОшибки = ТекстОшибки + НСтр("ru = 'Возможные причины:'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + НСтр("ru = '• Некорректно введен или не введен логин и пароль;'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + НСтр("ru = '• Нет подключения к Интернету;'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + НСтр("ru = '• На сайте ведутся технические работы. Попробуйте повторить загрузку позднее.'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + НСтр("ru = '• Брандмауэр или другое промежуточное ПО (антивирусы и т.п.) блокируют попытки программы подключиться к Интернету;'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + НСтр("ru = '• Подключение к Интернету выполняется через прокси-сервер, но его параметры не заданы в программе.'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + НСтр("ru = 'Техническая информация:'") + " " + Символы.ПС;
		ТекстОшибки = ТекстОшибки + СтрПолучитьСтроку(КраткоеПредставлениеОшибки(Информация), 1);
		ПараметрыДлительнойОперации.Ошибка = ТекстОшибки;
		ПараметрыДлительнойОперации.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Информация);
		ЗаписьЖурналаРегистрации("ошибка начала фоновой загрузки АК",УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	ПараметрыДлительнойОперации.Идентификатор   = РезультатЗапуска.ИдентификаторЗадания;
	ПараметрыДлительнойОперации.Завершено       = РезультатЗапуска.ЗаданиеВыполнено;
	ПараметрыДлительнойОперации.АдресРезультата = РезультатЗапуска.АдресХранилища;
	
КонецПроцедуры

Процедура ВыполнитьРегламентноеЗадание() Экспорт
	
	Инициализировать();
	ЗагрузитьКлассификаторССайта();
	
КонецПроцедуры