
Процедура ВыполнитьРегламентноеЗадание() Экспорт
	
	ГенерацияСобытий();
	
КонецПроцедуры

Процедура ГенерацияСобытий()
	
	//ОтразитьПросрочкуВозвратаТовараКлиентом();
	
	ОтразитьЗавершениеПоОтказам()
	
КонецПроцедуры

//После перевода в отказ ждем 30 дней и завершаем процесс
Процедура ОтразитьЗавершениеПоОтказам()
	
	лКлючАлгоритма = "Обработка_ГенераторСобытийПроцессаВозвратов_МодульОбъекта_ОтразитьЗавершениеПоОтказам";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияАктовРассмотренияВозвратаСрезПоследних.АктРассмотренияВозврата,
		|	СобытияАктовРассмотренияВозвратаСрезПоследних.АктРассмотренияВозврата.СтатусДокумента КАК СтатусДокумента,
		|	ЕСТЬNULL(РАЗНОСТЬДАТ(МАКСИМУМ(СобытияАктовРассмотренияВозвратаСрезПоследних.Период), &ТекущаяДата, ДЕНЬ), 0) КАК ПродолжительностьНахожденияВСтатусе
		|ИЗ
		|	РегистрСведений.СобытияАктовРассмотренияВозврата.СрезПоследних(
		|			,
		|			АктРассмотренияВозврата.СтатусДокумента = &СтатусДокумента
		|				И СтатусДокумента = &СтатусДокумента
		|				И НЕ ИдентификаторСобытияПрошлойСменыСтатуса = &ПустаяСтрока) КАК СобытияАктовРассмотренияВозвратаСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	СобытияАктовРассмотренияВозвратаСрезПоследних.АктРассмотренияВозврата,
		|	СобытияАктовРассмотренияВозвратаСрезПоследних.АктРассмотренияВозврата.СтатусДокумента
		|
		|ИМЕЮЩИЕ
		|	ЕСТЬNULL(РАЗНОСТЬДАТ(МАКСИМУМ(СобытияАктовРассмотренияВозвратаСрезПоследних.Период), &ТекущаяДата, ДЕНЬ), 0) > &МаксДней";
	
	Запрос.УстановитьПараметр("СтатусДокумента", 	Справочники.СтатусыДокументов.АРВ_ГПРКОтказ);
	Запрос.УстановитьПараметр("ТекущаяДата", 		ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяСтрока", 		"");
	Запрос.УстановитьПараметр("МаксДней", 			30);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(Выборка.АктРассмотренияВозврата, 
		Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьПереходВСледующийСтатус, Выборка.СтатусДокумента);	

	КонецЦикла;
	
КонецПроцедуры

Процедура  ОтразитьПросрочкуВозвратаТовараКлиентом()
	
	лКлючАлгоритма = "Обработка_ГенераторСобытийПроцессаВозвратов_МодульОбъекта_ОтразитьПросрочкуВозвратаТовараКлиентом";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	//Есть вопросы. почему не смотрим на срок возврата товара в акте?
	Возврат;

	ДнейПросрочкиМакс = Константы.КоличествоДнейОжиданияПриемкиВозврата.Получить();
	
	Если ДнейПросрочкиМакс = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобытияАктовРассмотренияВозвратаСрезПоследних.АктРассмотренияВозврата КАК АктРассмотренияВозврата,
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МАКСИМУМ(СобытияАктовРассмотренияВозвратаСрезПоследних.Период), &ТекущаяДата, МИНУТА), 0) КАК ПродолжительностьНахожденияВСтатусе
	|ИЗ
	|	РегистрСведений.СобытияАктовРассмотренияВозврата.СрезПоследних(
	|			,
	|			АктРассмотренияВозврата.СтатусДокумента = &СтатусДокумента
	|				И НЕ АктРассмотренияВозврата.ПометкаУдаления
	|				И СтатусДокумента = &СтатусДокумента
	|				И НЕ ИдентификаторСобытияПрошлойСменыСтатуса = &ПустаяСтрока) КАК СобытияАктовРассмотренияВозвратаСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СобытияАктовРассмотренияВозвратаСрезПоследних.АктРассмотренияВозврата
	|
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МАКСИМУМ(СобытияАктовРассмотренияВозвратаСрезПоследних.Период), &ТекущаяДата, МИНУТА), 0) > &МинутПросрочкиМакс";
	
	Запрос.УстановитьПараметр("СтатусДокумента", Справочники.СтатусыДокументов.АРВ_ГВЖдемТовар);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("МинутПросрочкиМакс", ДнейПросрочкиМакс*1440);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		 РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(Выборка.АктРассмотренияВозврата, 
		 																		Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ПросроченСрокВозвратаТовараКлиентом);	
	КонецЦикла;
	
	
КонецПроцедуры














