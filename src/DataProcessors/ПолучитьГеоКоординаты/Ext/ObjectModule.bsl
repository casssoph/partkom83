Процедура Обслужить(пар_адр = Неопределено, пар_ка = Неопределено) экспорт
	
	Ошибка = "";
	
	Если НЕ ЗначениеЗаполнено(пар_адр) Тогда
		Ошибка = "не указан адрес";
		Сообщить(Ошибка);
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(пар_ка) Тогда
		Ошибка = "не указан КА";
		Сообщить(Ошибка);
		Возврат;
	КонецЕсли;
	
	ЕстьПравоРедактироватьЭД = НастройкаПравДоступа.ПолучитьЗначениеПраваПользователя(УправлениеПользователями.ОпределитьТекущегоПользователя(), ПланыВидовХарактеристик.ПраваПользователей.РедактироватьПризнакЭД);
	Если НЕ ЕстьПравоРедактироватьЭД Тогда
		Ошибка = "У Вас нет права редактировать данные КА относительно услуги ЭД";
		Сообщить(Ошибка);
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета = ВыполнитьRestЗапрос(пар_адр);	
	Результат = СтруктураОтвета.Результат;
	
	Если Результат = Неопределено Тогда
		Ошибка = "Ошибка GET-запроса:" + Символы.ПС + СтруктураОтвета.ТекстОшибки;
		Сообщить(Ошибка);
		ЗаблокироватьУслугуЭД(пар_ка);
		Возврат;
	КонецЕсли;
	
	ТаблицаОтвета = ПотоковоеЧтениеJSON(Результат);
	Если ТаблицаОтвета.Количество() = 0 тогда
		Ошибка = "Ошибка чтения JSON: " + СокрЛП(Результат);
		Сообщить(Ошибка);
		ЗаблокироватьУслугуЭД(пар_ка);
		Возврат;
	КонецЕсли;
	
	КонечныйРезультат = НормализоватьТаблицуОтвета(ТаблицаОтвета);
	
	Если НЕ Врег(КонечныйРезультат.status) = Врег("OK") Тогда
		Ошибка = "Ошибка GET-запроса: success:false";
		Сообщить(Ошибка);
		ЗаблокироватьУслугуЭД(пар_ка);
		Возврат;
	КонецЕсли;
	
	адрстр = КонечныйРезультат.тч.ВыбратьСтроку("Укажите соответствие");
	Если адрстр = Неопределено Тогда
		ЗаблокироватьУслугуЭД(пар_ка);
		Возврат;
	КонецЕсли;
	
	стрВопроса = "Вы уверены, что адресу" + Символы.ПС + 
				 "[" + пар_адр +  "] " + Символы.ПС + 
				 " соответствует адрес" + Символы.ПС + 
				 "[" + адрстр.formatted_address +  "] " + Символы.ПС + 
				 "?";
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос(стрВопроса, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Сообщить("inf: запись данных в карточку КА отменена");	
		ЗаблокироватьУслугуЭД(пар_ка);
	    Возврат;
	КонецЕсли;
	
	Попытка
		ка = пар_ка.ПолучитьОбъект();
		ка.ДоступнаУслугаЭкспрессДоставки = Истина;
		ка.Широта = адрстр.lat;
		ка.Долгота = адрстр.lng;
		ка.Записать();
		Сообщить("inf: запись данных в карточку КА успешно выполнена");	
	Исключение
		Сообщить("err: ошибка записи данных в карточку КА");	
		ЗаблокироватьУслугуЭД(пар_ка);
	КонецПопытки;
	
КонецПроцедуры
Функция ВыполнитьRestЗапрос(пар_адр)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "");
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Сервер",		"maps.googleapis.com");
	ПараметрыЗапроса.Вставить("ТелоЗапроса",	"");
	ПараметрыЗапроса.Вставить("Заголовки",		Заголовки);
	ПараметрыЗапроса.Вставить("HTTPМетод",		"get");
	ПараметрыЗапроса.Вставить("АдресРесурса",	"/maps/api/geocode/json?address=" + пар_адр + "&key=AIzaSyA0QhE38oz3GbJJQbr4mKl03gZPwbY4SF4");
	
	ТекстОшибки = "";
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Авто),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	Результат = ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки, ssl1); 
	
	Возврат Новый Структура("Результат,ТекстОшибки",Результат,ТекстОшибки);	
КонецФункции
Функция НормализоватьТаблицуОтвета(ТаблицаОтвета)
	
	тч = Новый ТаблицаЗначений;
	тч.Колонки.Добавить("formatted_address");
	тч.Колонки.Добавить("lat");
	тч.Колонки.Добавить("lng");
	
	status	= "";
	formatted_address	= "";
	lat	= "";
	lng	= "";
	
	Для каждого стр из ТаблицаОтвета Цикл
		
		Если Врег(СокрлП(стр.св)) = Врег(СокрлП("formatted_address")) Тогда
			
			formatted_address = стр.Зн; 	
			lat	= "";
			lng	= "";
			стрн = тч.Добавить();
			стрн.formatted_address = formatted_address;
			
		ИначеЕсли Врег(СокрлП(стр.св)) = Врег(СокрлП("lat")) Тогда
			
			Если НЕ ЗначениеЗаполнено(lat) Тогда
				lat = стр.Зн; 	
				стрн = тч.Получить(тч.Количество() - 1);
				стрн.lat = lat;
			КонецЕсли;
			
		ИначеЕсли Врег(СокрлП(стр.св)) = Врег(СокрлП("lng")) Тогда
			
			Если НЕ ЗначениеЗаполнено(lng) Тогда
				lng = стр.Зн; 	
				стрн = тч.Получить(тч.Количество() - 1);
				стрн.lng = lng;
			КонецЕсли;
			
		ИначеЕсли Врег(СокрлП(стр.св)) = Врег(СокрлП("status")) Тогда
			
			status = стр.Зн; 	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("тч,status",тч,status);
КонецФункции
Процедура ЗаблокироватьУслугуЭД(пар_КА)
	Попытка
		ка = пар_ка.ПолучитьОбъект();
		ка.ДоступнаУслугаЭкспрессДоставки = Ложь;
		ка.Записать();
		Сообщить("inf: услуга экспресс-доставки у КА отключена");	
	Исключение
		Сообщить("err: услуга экспресс-доставки у КА НЕ отключена");	
	КонецПопытки;
КонецПроцедуры
Функция ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки, ssl = Неопределено) экспорт      
	
	ВозвращаемоеЗначение = Неопределено;
	
	Попытка
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыЗапроса.Сервер,,,,,,ssl,);
		
		Если HTTPСоединение = Неопределено Тогда
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса.АдресРесурса, ПараметрыЗапроса.Заголовки); 
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса.ТелоЗапроса , КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Если НРег(ПараметрыЗапроса.HTTPМетод) = "get" Тогда
			Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		Иначе
			Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли;
		
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		Если Ответ.КодСостояния = 200 Тогда
			ВозвращаемоеЗначение = ТекстОтвета;
		Иначе
			ТекстОшибки = ТекстОтвета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Сообщить("Ошибка выполнение запроса: "+Ответ.КодСостояния+", "+ТекстОшибки);
		КонецЕсли;
		
		HTTPСоединение = Неопределено;
		HTTPЗапрос = Неопределено;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
Функция ПотоковоеЧтениеJSON(Результат)
	
	Структура = Новый ТаблицаЗначений;
	Структура.Колонки.Добавить("пп",Новый ОписаниеТипов("Число"));
	Структура.Колонки.Добавить("Св",Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	Структура.Колонки.Добавить("Зн", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Результат);
	
	Пока ЧтениеJSON.Прочитать() Цикл
		
		Значение = Неопределено;
		Комментарий = Неопределено;
		Свойство = Неопределено;
		
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если ТипJSON = ТипЗначенияJSON.Число ИЛИ ТипJSON = ТипЗначенияJSON.Строка ИЛИ
			 ТипJSON = ТипЗначенияJSON.Булево ИЛИ ТипJSON = ТипЗначенияJSON.NULL Тогда
			 
			 Значение = ЧтениеJSON.ТекущееЗначение;
			 стр = Структура.Получить(Структура.Количество()-1);
			 стр.Зн = Значение;
			
	    ИначеЕсли ТипJSON = ТипЗначенияJSON.Комментарий Тогда
			 
			 Комментарий = ЧтениеJSON.ТекущееЗначение;	 
			
		ИначеЕсли ТипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			
			 Свойство = ЧтениеJSON.ТекущееЗначение;
			 
			 стр = Структура.Добавить();
			 стр.пп = Структура.Индекс(Стр);
			 стр.Св = Свойство;
			 
		ИначеЕсли ТипJSON = ТипЗначенияJSON.НачалоМассива ИЛИ ТипJSON = ТипЗначенияJSON.КонецМассива ИЛИ
				  ТипJSON = ТипЗначенияJSON.НачалоОбъекта ИЛИ ТипJSON = ТипЗначенияJSON.КонецОбъекта ИЛИ
				  ТипJSON = ТипЗначенияJSON.Ничего Тогда
			
		КонецЕсли;
		
		//Сообщить("Значение = [" + СокрлП(Значение)+ "] Комментарий = [" + СокрлП(Комментарий)+ "] Свойство = [" + СокрлП(Свойство)+ "]");
		
	КонецЦикла;

	ЧтениеJSON.Закрыть();
	
	//Структура.ВыбратьСтроку();
	
	ВозВрат Структура;
КонецФункции
