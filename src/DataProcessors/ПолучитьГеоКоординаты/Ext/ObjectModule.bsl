#region maps_googleapis

Процедура Обслужить(пар_адр = Неопределено, пар_ка = Неопределено) экспорт
	
	Ошибка = "";
	
	Если НЕ ЗначениеЗаполнено(пар_адр) Тогда
		Ошибка = "не указан адрес";
		Сообщить(Ошибка);
		Возврат;
	КонецЕсли;
	////////Если НЕ ЗначениеЗаполнено(пар_ка) Тогда
	////////	Ошибка = "не указан КА";
	////////	Сообщить(Ошибка);
	////////	Возврат;
	////////КонецЕсли;
	
	////////ЕстьПравоРедактироватьЭД = НастройкаПравДоступа.ПолучитьЗначениеПраваПользователя(УправлениеПользователями.ОпределитьТекущегоПользователя(), ПланыВидовХарактеристик.ПраваПользователей.РедактироватьПризнакЭД);
	////////Если НЕ ЕстьПравоРедактироватьЭД Тогда
	////////	Ошибка = "У Вас нет права редактировать данные КА относительно услуги ЭД";
	////////	Сообщить(Ошибка);
	////////	Возврат;
	////////КонецЕсли;
	
	СтруктураОтвета = ВыполнитьRestЗапрос(пар_адр);	
	Результат = СтруктураОтвета.Результат;
	
	Если Результат = Неопределено Тогда
		Ошибка = "Ошибка GET-запроса:" + Символы.ПС + СтруктураОтвета.ТекстОшибки;
		Сообщить(Ошибка);
		ЗаблокироватьУслугуЭД(пар_ка);
		Возврат;
	КонецЕсли;
	
	ТаблицаОтвета = ПотоковоеЧтениеJSON(Результат);
	Если ТаблицаОтвета.Количество() = 0 тогда
		Ошибка = "Ошибка чтения JSON: " + СокрЛП(Результат);
		Сообщить(Ошибка);
		ЗаблокироватьУслугуЭД(пар_ка);
		Возврат;
	КонецЕсли;
	
	КонечныйРезультат = НормализоватьТаблицуОтвета(ТаблицаОтвета);
	
	Если НЕ Врег(КонечныйРезультат.status) = Врег("OK") Тогда
		Ошибка = "Ошибка GET-запроса: success:false";
		Сообщить(Ошибка);
		ЗаблокироватьУслугуЭД(пар_ка);
		Возврат;
	КонецЕсли;
	
	адрстр = КонечныйРезультат.тч.ВыбратьСтроку("Укажите соответствие");
	
	//////////Если адрстр = Неопределено Тогда
	//////////	ЗаблокироватьУслугуЭД(пар_ка);
	//////////	Возврат;
	//////////КонецЕсли;
	//////////
	//////////стрВопроса = "Вы уверены, что адресу" + Символы.ПС + 
	//////////			 "[" + пар_адр +  "] " + Символы.ПС + 
	//////////			 " соответствует адрес" + Символы.ПС + 
	//////////			 "[" + адрстр.formatted_address +  "] " + Символы.ПС + 
	//////////			 "?";
	//////////
	//////////Режим = РежимДиалогаВопрос.ДаНет;
	//////////Ответ = Вопрос(стрВопроса, Режим, 0);
	//////////Если Ответ = КодВозвратаДиалога.Нет Тогда
	//////////	Сообщить("inf: запись данных в карточку КА отменена");	
	//////////	ЗаблокироватьУслугуЭД(пар_ка);
	//////////    Возврат;
	//////////КонецЕсли;
	//////////
	//////////Попытка
	//////////	ка = пар_ка.ПолучитьОбъект();
	//////////	ка.ДоступнаУслугаЭкспрессДоставки = Истина;
	//////////	ка.Широта = адрстр.lat;
	//////////	ка.Долгота = адрстр.lng;
	//////////	ка.Записать();
	//////////	Сообщить("inf: запись данных в карточку КА успешно выполнена");	
	//////////Исключение
	//////////	Сообщить("err: ошибка записи данных в карточку КА");	
	//////////	ЗаблокироватьУслугуЭД(пар_ка);
	//////////КонецПопытки;
	
КонецПроцедуры
Функция ВыполнитьRestЗапрос(пар_адр)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "");
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Сервер",		"maps.googleapis.com");
	ПараметрыЗапроса.Вставить("ТелоЗапроса",	"");
	ПараметрыЗапроса.Вставить("Заголовки",		Заголовки);
	ПараметрыЗапроса.Вставить("HTTPМетод",		"get");
	ПараметрыЗапроса.Вставить("АдресРесурса",	"/maps/api/geocode/json?address=" + пар_адр + "&key=AIzaSyA0QhE38oz3GbJJQbr4mKl03gZPwbY4SF4");
	
	ТекстОшибки = "";
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Авто),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	Результат = ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки, ssl1); 
	
	Возврат Новый Структура("Результат,ТекстОшибки",Результат,ТекстОшибки);	
КонецФункции
Функция НормализоватьТаблицуОтвета(ТаблицаОтвета)
	
	тч = Новый ТаблицаЗначений;
	тч.Колонки.Добавить("formatted_address");
	тч.Колонки.Добавить("lat");
	тч.Колонки.Добавить("lng");
	
	status	= "";
	formatted_address	= "";
	lat	= "";
	lng	= "";
	
	Для каждого стр из ТаблицаОтвета Цикл
		
		Если Врег(СокрлП(стр.св)) = Врег(СокрлП("formatted_address")) Тогда
			
			formatted_address = стр.Зн; 	
			lat	= "";
			lng	= "";
			стрн = тч.Добавить();
			стрн.formatted_address = formatted_address;
			
		ИначеЕсли Врег(СокрлП(стр.св)) = Врег(СокрлП("lat")) Тогда
			
			Если НЕ ЗначениеЗаполнено(lat) Тогда
				lat = стр.Зн; 	
				стрн = тч.Получить(тч.Количество() - 1);
				стрн.lat = lat;
			КонецЕсли;
			
		ИначеЕсли Врег(СокрлП(стр.св)) = Врег(СокрлП("lng")) Тогда
			
			Если НЕ ЗначениеЗаполнено(lng) Тогда
				lng = стр.Зн; 	
				стрн = тч.Получить(тч.Количество() - 1);
				стрн.lng = lng;
			КонецЕсли;
			
		ИначеЕсли Врег(СокрлП(стр.св)) = Врег(СокрлП("status")) Тогда
			
			status = стр.Зн; 	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("тч,status",тч,status);
КонецФункции
Процедура ЗаблокироватьУслугуЭД(пар_КА)
	Попытка
		ка = пар_ка.ПолучитьОбъект();
		ка.ДоступнаУслугаЭкспрессДоставки = Ложь;
		ка.Записать();
		Сообщить("inf: услуга экспресс-доставки у КА отключена");	
	Исключение
		Сообщить("err: услуга экспресс-доставки у КА НЕ отключена");	
	КонецПопытки;
КонецПроцедуры
Функция ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки, ssl = Неопределено) экспорт      
	
	ВозвращаемоеЗначение = Неопределено;
	
	Попытка
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыЗапроса.Сервер,,,,,,ssl,);
		
		Если HTTPСоединение = Неопределено Тогда
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса.АдресРесурса, ПараметрыЗапроса.Заголовки); 
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса.ТелоЗапроса , КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Если НРег(ПараметрыЗапроса.HTTPМетод) = "get" Тогда
			Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		Иначе
			Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли;
		
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		Если Ответ.КодСостояния = 200 Тогда
			ВозвращаемоеЗначение = ТекстОтвета;
		Иначе
			ТекстОшибки = ТекстОтвета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Сообщить("Ошибка выполнение запроса: "+Ответ.КодСостояния+", "+ТекстОшибки);
		КонецЕсли;
		
		HTTPСоединение = Неопределено;
		HTTPЗапрос = Неопределено;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
Функция ПотоковоеЧтениеJSON(Результат)
	
	Структура = Новый ТаблицаЗначений;
	Структура.Колонки.Добавить("пп",Новый ОписаниеТипов("Число"));
	Структура.Колонки.Добавить("Св",Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	Структура.Колонки.Добавить("Зн", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Результат);
	
	Пока ЧтениеJSON.Прочитать() Цикл
		
		Значение = Неопределено;
		Комментарий = Неопределено;
		Свойство = Неопределено;
		
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если ТипJSON = ТипЗначенияJSON.Число ИЛИ ТипJSON = ТипЗначенияJSON.Строка ИЛИ
			 ТипJSON = ТипЗначенияJSON.Булево ИЛИ ТипJSON = ТипЗначенияJSON.NULL Тогда
			 
			 Значение = ЧтениеJSON.ТекущееЗначение;
			 стр = Структура.Получить(Структура.Количество()-1);
			 стр.Зн = Значение;
			
	    ИначеЕсли ТипJSON = ТипЗначенияJSON.Комментарий Тогда
			 
			 Комментарий = ЧтениеJSON.ТекущееЗначение;	 
			
		ИначеЕсли ТипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			
			 Свойство = ЧтениеJSON.ТекущееЗначение;
			 
			 стр = Структура.Добавить();
			 стр.пп = Структура.Индекс(Стр);
			 стр.Св = Свойство;
			 
		ИначеЕсли ТипJSON = ТипЗначенияJSON.НачалоМассива ИЛИ ТипJSON = ТипЗначенияJSON.КонецМассива ИЛИ
				  ТипJSON = ТипЗначенияJSON.НачалоОбъекта ИЛИ ТипJSON = ТипЗначенияJSON.КонецОбъекта ИЛИ
				  ТипJSON = ТипЗначенияJSON.Ничего Тогда
			
		КонецЕсли;
		
		//Сообщить("Значение = [" + СокрлП(Значение)+ "] Комментарий = [" + СокрлП(Комментарий)+ "] Свойство = [" + СокрлП(Свойство)+ "]");
		
	КонецЦикла;

	ЧтениеJSON.Закрыть();
	
	//Структура.ВыбратьСтроку();
	
	ВозВрат Структура;
КонецФункции

#endregion

#region dadata
//Пушкин XX-2834 20190716 

Функция НормализоватьАдреса() Экспорт
	
	//проблему нормализации адресов можно решать, используя сторонние сервисы (например, Яндекс Геокодер и прочие). В нашем случае, был выбран сервис DaData.ru по причине его тесной связи с КЛАДР и ФИАС
	
	ТаблицаДанных = ПолучитьСтруктуруТаблицыАдресов();
	
	Если ЗначениеЗаполнено(СтрокаАдреса) Тогда
		
       	ДобавитьАдресДляНормализации(ТаблицаДанных, СтрокаАдреса);
			
		НормализоватьАдресаТаблицы(ТаблицаДанных, ПолучитьКлючиДоступа());
		
	КонецЕсли;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьКлючиДоступа() Экспорт
	
	//Механизм и ключи доступа работы с dadata описаны тут : https://docs.google.com/document/d/1Ju-vh1_dMxJijrezPUxRfDgU0oBKiMELZZbog0tQCJw/edit#
	
	//Login: admin@part-kom.ru
	//Pwd: RFEB4cqXV8cByi4
	
	КлючиДоступа = Новый Структура;
	КлючиДоступа.Вставить("APIКлюч"      , "3433ef8f37dcd0567e8468f885f4e498deba8855");
	КлючиДоступа.Вставить("СекретныйКлюч", "c9bf00d79132a7a53320f78a342c12878d79dc92");
	
	// ниже значения ключей, которые выдрал из примеров текста запросов - это для платного сервиса  "/api/v2/clean/address"
	//КлючиДоступа.Вставить("APIКлюч"      , "03916e0b076f60d3418058c4f9682618b9751efb");
	//КлючиДоступа.Вставить("СекретныйКлюч", "53dca3a6348a80c11ce37797586fa4771a5d7d0d");
	
	Возврат КлючиДоступа;
	
КонецФункции

Функция ПолучитьСтруктуруТаблицыАдресов()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("ИсходныйАдрес",,"Исходный Адрес");
	
	//https://dadata.ru/api/suggest/address/#request            // в эту таблицу можно добавить дополнительные поля, имена которых совпадают с именами свойств возвращаемого JSON-объекта - https://dadata.ru/api/clean/#response
	
	ТаблицаДанных.Колонки.Добавить("result",,"Нормализованный Адрес");// Нормализованный адрес
	
	ТаблицаДанных.Колонки.Добавить("qc");                       // Код проверки 
																	//0 - Адрес распознан уверенно. Вероятность ошибки в корректных адресах — 1 на 10 000 адресов.
																	//1	- Остались «лишние» части
																	//2	- Адрес пустой или заведомо «мусорный»
																	//3	- Есть альтернативные варианты
																	//коды 1 и 3 говорят о необходимости ручной проверки
																	
	ТаблицаДанных.Колонки.Добавить("qc_geo");                   // Код точности координат
																	//0 — точные координаты
																	//1 — ближайший дом
																	//2 — улица
																	//3 — населенный пункт
																	//4 — город
																	//5 — координаты не определены
																	// Если qc_geo > 1, то считаем валидацию неудачной	 
	
	ТаблицаДанных.Колонки.Добавить("geo_lat",,"Широта");                  // широта 
	ТаблицаДанных.Колонки.Добавить("geo_lon",,"Долгота");                  // долгота
	
	ТаблицаДанных.Колонки.Добавить("postal_code",,"Индекс");              // Индекс
	ТаблицаДанных.Колонки.Добавить("country",,"Страна");                  // Страна
	ТаблицаДанных.Колонки.Добавить("federal_district",,"Федеральный округ");         // Федеральный округ
	ТаблицаДанных.Колонки.Добавить("region_with_type",,"Регион");         // Регион
	ТаблицаДанных.Колонки.Добавить("city_with_type",,"Город");           // Город
	ТаблицаДанных.Колонки.Добавить("settlement_with_type",,"Населенный пункт");     // Населенный пункт
	ТаблицаДанных.Колонки.Добавить("city_district_with_type",,"Район");  // Район
	ТаблицаДанных.Колонки.Добавить("street_with_type",,"Улица");         // Улица
	ТаблицаДанных.Колонки.Добавить("block_type_full",,"Тип корпуса/строения");          // Тип корпуса/строения
	ТаблицаДанных.Колонки.Добавить("flat_type_full",,"Тип квартиры");           // Тип квартиры
	ТаблицаДанных.Колонки.Добавить("house",,"Дом");                    // Дом
	ТаблицаДанных.Колонки.Добавить("flat",,"Квартира");                     // Квартира
	
	ТаблицаДанных.Колонки.Добавить("value");                    // Адрес одной строкой (как показывается в списке подсказок)
	ТаблицаДанных.Колонки.Добавить("unrestricted_value");       // Адрес одной строкой (полный, от региона)

	ТаблицаДанных.Колонки.Добавить("capital_marker",,"Признак центра района/региона");             // Признак центра района или региона
																  //1 — центр района
																  //    (Московская обл, Одинцовский р-н, г Одинцово)
																  //2 — центр региона
																  //    (Новосибирская обл, г Новосибирск)
																  //3 — центр района и региона
																  //    (Томская обл, г Томск)
																  //4 — центральный район региона
																  //    (Тюменская обл, Тюменский р-н)
																  //0 — ничего из перечисленного
																  //    (Московская обл, г Балашиха)
	
	ТаблицаДанных.Колонки.Добавить("fias_level");               // Код ФИАС: HOUSE.HOUSEGUID, если дом найден в ФИАС по точному совпадению; ADDROBJ.AOGUID в противном случае.
	ТаблицаДанных.Колонки.Добавить("fias_code",,"Код ФИАС");                // Иерархический код адреса в ФИАС (СС+РРР+ГГГ+ППП+СССС+УУУУ+ДДДД)
	ТаблицаДанных.Колонки.Добавить("kladr_id",,"Код КЛАДР");                 // Код КЛАДР
	ТаблицаДанных.Колонки.Добавить("okato",,"Код ОКАТО");                    // Код ОКАТО
	ТаблицаДанных.Колонки.Добавить("oktmo",,"Код ОКТМО");                    // Код ОКТМО
	ТаблицаДанных.Колонки.Добавить("tax_office");               // Код ИФНС для физических лиц
	ТаблицаДанных.Колонки.Добавить("tax_office_legal");         // Код ИФНС для организаций
	
	ТаблицаДанных.Колонки.Добавить("flat_area");
	ТаблицаДанных.Колонки.Добавить("square_meter_price");
	ТаблицаДанных.Колонки.Добавить("flat_price");
	ТаблицаДанных.Колонки.Добавить("timezone");
	
	Возврат(ТаблицаДанных);
КонецФункции

Процедура ДобавитьАдресДляНормализации(ТаблицаДанных, Адрес)
	
	Строка = ТаблицаДанных.Добавить();
	Строка.ИсходныйАдрес = Адрес;
	
КонецПроцедуры

Процедура НормализоватьАдресаТаблицы(ТаблицаДанных, КлючиДоступа)
	
	Для Каждого лСтрокаАдреса Из ТаблицаДанных Цикл 
		
		ОтветСервиса = ЗапросСервисаНормализации(лСтрокаАдреса.ИсходныйАдрес, КлючиДоступа);
		
		Попытка
			//будет работать на платформе 8.3.6 и более, поскольку применены функции для работы с JSON 
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(ОтветСервиса);
			Данные = ПрочитатьJSON(Чтение)[0];  
			Чтение.Закрыть();
			
			ЗаполнитьЗначенияСвойств(лСтрокаАдреса, Данные);
		Исключение
			//{"detail":"Clean service is disabled. See https://dadata.userecho.com/topics/7784 for help."}
		    Сообщить("err : " + ОписаниеОшибки() + Символы.ПС + ОтветСервиса);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры
	
Функция ЗапросСервисаНормализации(Адрес, КлючиДоступа)
	
	//https://dadata.ru/api/clean/
	
	ТелоЗапроса = "[""" + Адрес + """]";	
	POST = "/api/v2/clean/address";
	HOST  = "dadata.ru";
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("accept" , "application/json");
	Заголовки.Вставить("Content-Type" , "application/json");
	Заголовки.Вставить("Authorization", "Token " + КлючиДоступа.APIКлюч);
	Заголовки.Вставить("X-Secret"     , КлючиДоступа.СекретныйКлюч);
	
	Запрос = Новый HTTPЗапрос(POST, Заголовки);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Соединение = Новый HTTPСоединение(HOST, 443,,,,,Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено),);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	ОтветСервера = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		
	Возврат(ОтветСервера);
	
КонецФункции

Функция ВернутьКовычку()
	Возврат """";	
КонецФункции

Функция ВариантыАдресов() Экспорт
	
	ТаблицаДанных = ПолучитьСтруктуруТаблицыАдресов();
	
	Если ЗначениеЗаполнено(СтрокаАдреса) Тогда
		
		ОтветСервиса = ЗапросСервисаПодсказок(СтрокаАдреса, ПолучитьКлючиДоступа());		
		
		Попытка
			
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(ОтветСервиса);
			Данные = ПрочитатьJSON(Чтение);
			Чтение.Закрыть();
			
			Для Каждого ЭлементМассива из Данные.suggestions Цикл
				
				ДобавитьАдресДляНормализации(ТаблицаДанных, ЭлементМассива.value);
				
				лСтрокаАдреса = ТаблицаДанных.Получить(ТаблицаДанных.Количество() - 1);
				
				лСтрокаАдреса.result = ЭлементМассива.unrestricted_value;
				
				ЗаполнитьЗначенияСвойств(лСтрокаАдреса, ЭлементМассива.data);
				
			КонецЦикла;
		
		Исключение
			//{"detail":"Clean service is disabled. See https://dadata.userecho.com/topics/7784 for help."}
			
			//Коды ответа на запрос
			//200	Запрос успешно обработан
			//400	Некорректный запрос (невалидный JSON или XML)
			//401	В запросе отсутствует API-ключ
			//403	В запросе указан несуществующий API-ключ
			//Или не подтверждена почта
			//Или исчерпан дневной лимит по количеству запросов
			//405	Запрос сделан с методом, отличным от POST
			//413	Слишком большая длина запроса или слишком много условий
			//429	Слишком много запросов в секунду
			//5xx	Произошла внутренняя ошибка сервиса
			
		    Сообщить("err : " + ОписаниеОшибки() + Символы.ПС + ОтветСервиса);
		КонецПопытки;
		
		
	КонецЕсли;
	
	Возврат ТаблицаДанных;
КонецФункции

Функция ЗапросСервисаПодсказок(Адрес, КлючиДоступа)
	
	ТелоЗапроса =	"{ ""query"": """ + Адрес + """, ""count"": 10 }";
	POST = "/suggestions/api/4_1/rs/suggest/address";
	HOST  = "suggestions.dadata.ru";
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("accept" , "application/json");
	Заголовки.Вставить("Content-Type" , "application/json");
	Заголовки.Вставить("Authorization", "Token " + КлючиДоступа.APIКлюч);
	//Заголовки.Вставить("X-Secret"     , КлючиДоступа.СекретныйКлюч);
	
	Запрос = Новый HTTPЗапрос(POST, Заголовки);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Соединение = Новый HTTPСоединение(HOST, 443,,,,,Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено),);
	
	ОтветHTTP  = Соединение.ОтправитьДляОбработки(Запрос);
	ОтветСервера = ОтветHTTP.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Возврат(ОтветСервера);
	
КонецФункции

Процедура АвтоматDaData() Экспорт
	
	ЗатеретьДанные();
	
	ОбработатьПодсказки();
	// ниже код, предназначенный для работы совместно с платным сервисом
	Возврат;
	
	тчРезультат = НормализоватьАдреса();
	
	лИндекс = 0;
	Для каждого стрр из тчРезультат Цикл
		Если стрр.qc = 0 и стрр.qc_geo < 2 Тогда
			СтрокаАдреса = стрр.result;
			Широта = стрр.geo_lat;
			Долгота = стрр.geo_lon;
			Проверено = Истина;
			лИндекс = тчРезультат.Индекс(стрр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Проверено Тогда
		
		УложитьРезультатыВТЗ(тчРезультат,лИндекс);
		
	Иначе
		
		тчРезультат = ВариантыАдресов();

		Если тчРезультат.Количество() = 0 Тогда
			ЗатеретьДанные();
			Возврат;
			
		ИначеЕсли тчРезультат.Количество() = 1 Тогда
			выбАдрес = тчРезультат.Получить(0);
			СтрокаАдреса = выбАдрес.result;
			
		Иначе
			выбАдрес = тчРезультат.выбратьСтроку("Подсказки:");
			
			Если выбАдрес = Неопределено Тогда
				ЗатеретьДанные();
				Возврат;
			Иначе
				СтрокаАдреса = выбАдрес.result;
				
				АвтоматDaData();
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПодсказки()
	
	тчРезультат = ВариантыАдресов();
	
	лИндекс = 0;
	Для каждого стрр из тчРезультат Цикл
		Если стрр.qc_geo = "0" или стрр.qc_geo = "1" Тогда
			СтрокаАдреса = стрр.result;
			Широта = стрр.geo_lat;
			Долгота = стрр.geo_lon;
			Проверено = Истина;
			лИндекс = тчРезультат.Индекс(стрр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Проверено Тогда
		
		УложитьРезультатыВТЗ(тчРезультат,лИндекс);
		
	Иначе
		
		Если тчРезультат.Количество() = 0 Тогда
			ЗатеретьДанные();
			Возврат;
			
		ИначеЕсли тчРезультат.Количество() = 1 Тогда
			выбАдрес = тчРезультат.Получить(0);
			СтрокаАдреса = выбАдрес.result;
			
		Иначе
			выбАдрес = тчРезультат.Скопировать(,"result").выбратьСтроку("Подсказки:");
			
			Если выбАдрес = Неопределено Тогда
				ЗатеретьДанные();
				Возврат;
			Иначе
				СтрокаАдреса = выбАдрес.result;
				
				АвтоматDaData();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗатеретьДанные() Экспорт
	//СтрокаАдреса = "";
	Широта = "";
	Долгота = "";
	Проверено = Ложь;
	ПолучитьСтруктуруТЗ();
КонецПроцедуры

Процедура ПолучитьСтруктуруТЗ()
	
	Т = Новый ТаблицаЗначений;
	Т.Колонки.Добавить("Описание");	
	Т.Колонки.Добавить("Значение");	
	Т.Очистить();
	
	ТЗ = Т;
КонецПроцедуры	

Процедура УложитьРезультатыВТЗ(тчРезультат,лИндекс)
	
	лСтрТЗ = тчРезультат.Получить(лИндекс);
	
	лРасшифровка = Новый Соответствие;
	лРасшифровка.Вставить("1","центр района");
	лРасшифровка.Вставить("2","центр региона");
	лРасшифровка.Вставить("3","центр района и региона");
	лРасшифровка.Вставить("4","центральный район региона");
	лРасшифровка.Вставить("0","не известно");
	
	Для Каждого Колонка Из тчРезультат.Колонки Цикл
		Если ЗначениеЗаполнено(Колонка.Заголовок) И ЗначениеЗаполнено(лСтрТЗ[Колонка.Имя]) Тогда
			
			НоваяСтр = ТЗ.Добавить();
			НоваяСтр.Описание = Колонка.Заголовок;
			НоваяСтр.Значение = лСтрТЗ[Колонка.Имя];
			
			Если Колонка.Имя = "capital_marker" Тогда
				НоваяСтр.Значение = лРасшифровка.Получить(НоваяСтр.Значение);
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#endregion

