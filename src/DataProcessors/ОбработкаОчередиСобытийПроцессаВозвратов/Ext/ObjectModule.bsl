Процедура ВыполнитьРегламентноеЗадание() Экспорт
	
	 ВыполнитьОбработку();
	
КонецПроцедуры

Процедура ВыполнитьОбработку() Экспорт
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ВыполнитьОбработку";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияКОбработкеАктовРассмотренияВозврата.Период КАК Период,
		|	СобытияКОбработкеАктовРассмотренияВозврата.АктРассмотренияВозврата,
		|	СобытияКОбработкеАктовРассмотренияВозврата.Событие,
		|	СобытияКОбработкеАктовРассмотренияВозврата.ПараметрСобытия,
		|	СобытияКОбработкеАктовРассмотренияВозврата.Пользователь,
		|	СобытияКОбработкеАктовРассмотренияВозврата.ДополнительныеСведения,
		|	СобытияКОбработкеАктовРассмотренияВозврата.КоличествоПопыток,
		|	СобытияКОбработкеАктовРассмотренияВозврата.Ошибка,
		|	СобытияКОбработкеАктовРассмотренияВозврата.ДатаОбработки,
		|	СобытияКОбработкеАктовРассмотренияВозврата.АктРассмотренияВозврата.ПометкаУдаления КАК ПометкаУдаления,
		|	СобытияКОбработкеАктовРассмотренияВозврата.АктРассмотренияВозврата.Проведен КАК Проведен
		|ИЗ
		|	РегистрСведений.СобытияКОбработкеАктовРассмотренияВозврата КАК СобытияКОбработкеАктовРассмотренияВозврата
		|ГДЕ
		|	(СобытияКОбработкеАктовРассмотренияВозврата.АктРассмотренияВозврата = &Документ
		|			ИЛИ &ВсеДокументы)
		|	И СобытияКОбработкеАктовРассмотренияВозврата.КоличествоПопыток < 49
		|	И СобытияКОбработкеАктовРассмотренияВозврата.Период <= &ТекущаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("КоличествоПопытокМакс", КоличествоПопытокМакс);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ВсеДокументы", Не ЗначениеЗаполнено(Документ));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекДата = ТекущаяДата(); 
	
	Пока Выборка.Следующий() Цикл
		
		//Записи с количеством ошибок больше максимального обрабатываем не чаще заданной периодичности
		Если Выборка.Ошибка И Выборка.КоличествоПопыток > КоличествоПопытокМакс  Тогда
			ПрошлоСМоментаОбработкиМинут = Цел((ТекДата -  Выборка.ДатаОбработки)/60);
			Если ПрошлоСМоментаОбработкиМинут <= ПериодичностьОбработкиОшибокМинут Тогда			
			    Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ТекстОшибки = "";
		Успешно = Истина;
		
		Если Выборка.Проведен Тогда
			Если Выборка.Событие = Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ЗагрузкаВозвратаОтПокупателяИзТопЛог Тогда
				Успешно = ОбработатьВозвратОтПокупателяИзТоплог(Выборка, ТекстОшибки);
			ИначеЕсли Выборка.Событие = Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ЗагрузкаВозвратаПоставщикуИзТопЛог Тогда
				Успешно = ОбработатьВозвратПоставщикуИзТоплог(Выборка, ТекстОшибки);
			ИначеЕсли Выборка.Событие = Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.КорректировкаДолга Тогда
				Успешно = ОбработатьКорректировкуДолга(Выборка, ТекстОшибки);
			ИначеЕсли Выборка.Событие = Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ИзменениеРеализацииТоваровУслуг Тогда
				Успешно = ОбработатьИзменениеРеализацииТоваровУслуг(Выборка, ТекстОшибки);
			ИначеЕсли Выборка.Событие = Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ПросроченСрокВозвратаТовараКлиентом Тогда
				Успешно = ОбработатьПросрочкуСрокаВозвратаТовараОтКлиента(Выборка, ТекстОшибки);
			ИначеЕсли Выборка.Событие = Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВходящееЭлектронноеПисьмо Тогда
				Успешно = ОбработатьВходящееЭлектронноеПисьмо(Выборка, ТекстОшибки);
			ИначеЕсли Выборка.Событие = Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ЗагрузкаРазмещенияИзТопЛог Тогда
				Успешно = ОбработатьРазмещениеИзТопЛог(Выборка, ТекстОшибки);
			ИначеЕсли Выборка.Событие = Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьПереходВСледующийСтатус Тогда
				Успешно = ОбработатьПереходВСледующийСтатус(Выборка, ТекстОшибки);
			ИначеЕсли Выборка.Событие = Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьКомандыТекущегоСтатуса Тогда
				Успешно = ВыполнитьКомандыТекущегоСтатуса(Выборка, ТекстОшибки);
			ИначеЕсли Выборка.Событие = Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ОбработатьЭтапПроцесса Тогда
				Успешно = ОбработатьЭтапПроцесса(Выборка, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если Успешно Тогда
			
			НЗ = РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.СоздатьНаборЗаписей();
			НЗ.Отбор.Период.Установить(Выборка.Период);
			НЗ.Отбор.АктРассмотренияВозврата.Установить(Выборка.АктРассмотренияВозврата);
			НЗ.Отбор.Событие.Установить(Выборка.Событие);
			НЗ.Записать();
			
		Иначе
			
			НЗ = РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.СоздатьНаборЗаписей();
			НЗ.Отбор.Период.Установить(Выборка.Период);
			НЗ.Отбор.АктРассмотренияВозврата.Установить(Выборка.АктРассмотренияВозврата);
			НЗ.Отбор.Событие.Установить(Выборка.Событие);
			НЗ.Прочитать();
			КоличествоПопыток = 0;
			Для каждого текЗапись Из НЗ Цикл
				текЗапись.ОписаниеОшибки 	= ТекстОшибки;
				текЗапись.Ошибка 		 	= Истина;
				текЗапись.КоличествоПопыток = текЗапись.КоличествоПопыток + 1;
				текЗапись.ДатаОбработки 	= ТекущаяДата();
				
				КоличествоПопыток = текЗапись.КоличествоПопыток;
			КонецЦикла;
			НЗ.Записать();
			
			НадоОтправлять = Истина;
			//Если ошибка связана с открытой формой, то отправлять сообщение не надо
			Если СтрНайти(ТекстОшибки, "Ошибка блокировки объекта. Объект уже заблокирован") > 0
				ИЛИ КоличествоПопыток > 1 Тогда
				НадоОтправлять = Ложь;				
			КонецЕсли;
			
			Если НадоОтправлять Тогда
				
				КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
				Выборка.АктРассмотренияВозврата, 
				Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбработкиОчередиСобытийПроцессаВозвратов,
				ТекстОшибки+Символы.ПС+" Количество попыток: "+КоличествоПопыток,
				,
				Истина,
				"Период: "+Выборка.Период+", Событие: "+Выборка.Событие+", Параметр: "+Выборка.ПараметрСобытия,
				"ОбработкаОчередиСобытийПроцессаВозвратов.ВыполнитьОбработку()");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Выполняет все команды текущего статуса и переход в следующий
//В качесте параметра должен быть указан текущий статус АРВ
Функция ОбработатьЭтапПроцесса(Выборка, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ОбработатьЭтапПроцесса";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	Если Не ЗначениеЗаполнено(Выборка.ПараметрСобытия) Тогда
		ТекстОшибки = "Не заполнен параметр события";
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ТипЗнч(Выборка.ПараметрСобытия) = Тип("СправочникСсылка.СтатусыДокументов") Тогда
		ТекстОшибки = "В качестве параметра события должен быть указан статус документа";
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.АктРассмотренияВозврата, "СтатусДокумента, Контрагент, Поставщик, Ответственный, Номер, Дата");
	Если НЕ РеквизитыАРВ.СтатусДокумента = Выборка.ПараметрСобытия Тогда
		//Возможно Акт уже перевели руками в другой статус, считаем что действие отработано
		Возврат Истина;
	КонецЕсли;
	
	УспешноКоманды = ВыполнитьКомандыТекущегоСтатуса(Выборка, 	 ТекстОшибки);
	
	Если Не УспешноКоманды Тогда
		Возврат УспешноКоманды;
	КонецЕсли;
	
	УспешноПереход = ОбработатьПереходВСледующийСтатус(Выборка, ТекстОшибки);
	
	Возврат УспешноПереход;	
	
КонецФункции

//Выполняет все команды текущего статуса
//В качесте параметра должен быть указан текущий статус АРВ
Функция  ВыполнитьКомандыТекущегоСтатуса(Выборка, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ВыполнитьКомандыТекущегоСтатуса";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	Если Не ЗначениеЗаполнено(Выборка.ПараметрСобытия) Тогда
		ТекстОшибки = "Не заполнен параметр события";
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ТипЗнч(Выборка.ПараметрСобытия) = Тип("СправочникСсылка.СтатусыДокументов") Тогда
		ТекстОшибки = "В качестве параметра события должен быть указан статус документа";
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.АктРассмотренияВозврата, "СтатусДокумента, Контрагент, Поставщик, Ответственный, Номер, Дата");
	Если НЕ РеквизитыАРВ.СтатусДокумента = Выборка.ПараметрСобытия Тогда
		//Возможно Акт уже перевели руками в другой статус, считаем что действие отработано
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		ДокументОбъект = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Успешно		= Ложь;
		Возврат Успешно;
	КонецПопытки;

	
	//Получим команды для выполнения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыДокументовКомандыПроцесса.НомерСтроки,
		|	СтатусыДокументовКомандыПроцесса.КомандаПроцесса
		|ИЗ
		|	Справочник.СтатусыДокументов.КомандыПроцесса КАК СтатусыДокументовКомандыПроцесса
		|ГДЕ
		|	СтатусыДокументовКомандыПроцесса.Ссылка = &ТекущийСтатус
		|	И НЕ СтатусыДокументовКомандыПроцесса.Ссылка.ПометкаУдаления
		|	И СтатусыДокументовКомандыПроцесса.КомандаПроцесса.Автоматически
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыДокументовКомандыПроцесса.НомерСтроки";
	Запрос.УстановитьПараметр("ТекущийСтатус", РеквизитыАРВ.СтатусДокумента);
	МассивКоманд = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КомандаПроцесса");
	
	УспешноВыполненоКоманд = 0;
	ТекстОшибокВыполнения = "";
	Для каждого КомандаКВыполнению Из МассивКоманд Цикл
		ТекстОшибкиВыполнения = "";
		Если ВозвратыОтПокупателяСервер.ВыполнитьКомандуДляАРВВТранзакции(КомандаКВыполнению,, Выборка.АктРассмотренияВозврата, ТекстОшибкиВыполнения) Тогда
			УспешноВыполненоКоманд = УспешноВыполненоКоманд+1;
		Иначе
			ТекстОшибокВыполнения = ТекстОшибокВыполнения + ?(ЗначениеЗаполнено(ТекстОшибокВыполнения), Символы.ПС, "")+ТекстОшибкиВыполнения;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ УспешноВыполненоКоманд = МассивКоманд.Количество() Тогда
		ТекстОшибки = "Выполнены не все команды. Выполнено: "+УспешноВыполненоКоманд+" из "+МассивКоманд.Количество();
		ТекстОшибки = ТекстОшибки + Символы.ПС + ТекстОшибокВыполнения;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Успешно;	
	
КонецФункции

//Выполняет переход в следующий статус, если для перехода доступен только один статус
//В качесте параметра должен быть указан текущий статус АРВ
Функция  ОбработатьПереходВСледующийСтатус(Выборка, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ОбработатьПереходВСледующийСтатус";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	Если Не ЗначениеЗаполнено(Выборка.ПараметрСобытия) Тогда
		ТекстОшибки = "Не заполнен параметр события";
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ТипЗнч(Выборка.ПараметрСобытия) = Тип("СправочникСсылка.СтатусыДокументов") Тогда
		ТекстОшибки = "В качестве параметра события должен быть указан статус документа";
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.АктРассмотренияВозврата, "СтатусДокумента, Контрагент, Поставщик, Ответственный, Номер, Дата");
	Если НЕ РеквизитыАРВ.СтатусДокумента = Выборка.ПараметрСобытия Тогда
		//Возможно Акт уже перевели руками в другой статус, считаем что действие отработано
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		ДокументОбъект = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Успешно		= Ложь;
		Возврат Успешно;
	КонецПопытки;
	
	//Получим список статусов для автоперехода
	СписокКВыполнению = Справочники.ВзаимосвязиСтатусовПроцессаВозвратаОтПокупателя.ДоступныеВзаимосвязиТекущегоСтатуса(РеквизитыАРВ.СтатусДокумента, "Автоматически");
	
	КомандаКВыполнению = Неопределено;
	КомандКПереходу = 0;
	Для каждого ЭлСписка Из СписокКВыполнению Цикл
		
		Если ВозвратыОтПокупателяСервер.УсловияКомандыВыполнены(ЭлСписка.Значение, ДокументОбъект,,,Истина) Тогда
			КомандаКВыполнению = ЭлСписка.Значение;
			КомандКПереходу = КомандКПереходу + 1;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если КомандКПереходу <> 1 Тогда
		ТекстОшибки = "Невозможно определить статус для перехода, доступно статусов: "+КомандКПереходу;
		Возврат Истина; //Считаем что отработали успешно
	Иначе
		//Пробуем перевести в новый статус
		ТекстОшибкиВыполнения = "";
		Успешно = ВозвратыОтПокупателяСервер.ВыполнитьКомандуДляАРВВТранзакции(КомандаКВыполнению,, Выборка.АктРассмотренияВозврата, ТекстОшибкиВыполнения, Истина);
		Если Не Успешно Тогда
			ТекстОшибки = "Ошибка выполнения команды "+КомандаКВыполнению+Символы.ПС+ТекстОшибкиВыполнения;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Успешно;	
	
КонецФункции

//Пришло письмо от покупателя или поставщика
Функция ОбработатьВходящееЭлектронноеПисьмо(Выборка, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ОбработатьВходящееЭлектронноеПисьмо";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	Если Не ЗначениеЗаполнено(Выборка.ПараметрСобытия) Тогда
		ТекстОшибки = "В качестве параметра события должен быть указан документ ""Электронное письмо!""";
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЭП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ПараметрСобытия, "Контрагент");
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.АктРассмотренияВозврата, "СтатусДокумента, Контрагент, Поставщик, Ответственный, Номер, Дата");
	
	ПисьмоОтКлиента 	= РеквизитыЭП.Контрагент = РеквизитыАРВ.Контрагент;
	ПисьмоОтПоставщика 	= РеквизитыЭП.Контрагент = РеквизитыАРВ.Поставщик;
	
	Если ПисьмоОтКлиента Тогда
		
		Если РеквизитыАРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ГПРКЗапросПокупателю Тогда
			
			
			Попытка
				АРВ = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
				АРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ГПРКПолученОтветОтПокупателя;
				АРВ.ДополнительныеСвойства.Вставить("СохранитьВИсториюИзменения", "Получен ответ от клиента: "+Выборка.ПараметрСобытия);
				
				АРВ.Записать(?(АРВ.Проведен, 
				РежимЗаписиДокумента.Проведение, 
				РежимЗаписиДокумента.Запись));
				
			Исключение
				ОтменитьТранзакцию();
				
				ТекстОшибки = ОписаниеОшибки();
				Успешно		= Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ПисьмоОтПоставщика Тогда
		
		Если РеквизитыАРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ГПРКЗапросПоставщику Тогда
			
			Попытка
				АРВ = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
				АРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ГПРКПолученОтветОтПоставщика;
				АРВ.ДополнительныеСвойства.Вставить("СохранитьВИсториюИзменения", "Получен ответ от поставщика: "+Выборка.ПараметрСобытия);
				
				АРВ.Записать(?(АРВ.Проведен, 
				РежимЗаписиДокумента.Проведение, 
				РежимЗаписиДокумента.Запись));
				
			Исключение
				ОтменитьТранзакцию();
				
				ТекстОшибки = ОписаниеОшибки();
				Успешно		= Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		//Это непонятно от кого письмо, не будем ничего менять
	КонецЕсли;
	
	//Отправим оповещение ответственному на почту
	Если Успешно И ЗначениеЗаполнено(РеквизитыАРВ.Ответственный) И ТипЗнч(РеквизитыАРВ.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
		
		АдресЭлПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыАРВ.Ответственный, Справочники.ВидыКонтактнойИнформации.EmailПользователя);;
		
		Если ЗначениеЗаполнено(АдресЭлПочты) Тогда
			
			СтрокаОт = "";
			Если ПисьмоОтКлиента Тогда
				СтрокаОт = "клиента";
			ИначеЕсли ПисьмоОтПоставщика Тогда
				СтрокаОт = "поставщика";
			КонецЕсли;
			
			Тема = "Входящее письмо от "+СтрокаОт+" "+РеквизитыЭП.Контрагент+" по акту возврата "+РеквизитыАРВ.Номер+" от "+Формат(РеквизитыАРВ.Дата, "ДФ=dd.MM.yyyy");
			
			ТекстПисьма = Документы.ЭлектронноеПисьмо.ТекстПисьмаТекстом(Выборка.ПараметрСобытия);
			Тело = Тема+"
			|
			| "+Выборка.ПараметрСобытия+":
			| 
			| "+ТекстПисьма;
			
			СтруктураНовогоПисьма = Новый Структура;
			СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
			СтруктураНовогоПисьма.Вставить("Тело", Тело);
			СтруктураНовогоПисьма.Вставить("Тема", Тема);	
			СтруктураНовогоПисьма.Вставить("Кому", АдресЭлПочты);

			РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ВходящееЭлектронноеПисьмоПоПроцессуВозвратов,
			СтруктураНовогоПисьма.Тело, СтруктураНовогоПисьма.Тема, СтруктураНовогоПисьма.Кому,,,);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Успешно;	
	
КонецФункции

//Переводим в отказ АРВ и возврат от покупателя, если вышел срок ожидания приемки возврата ПЕРЕРАБОТАТЬ!
Функция ОбработатьПросрочкуСрокаВозвратаТовараОтКлиента(Выборка, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ОбработатьПросрочкуСрокаВозвратаТовараОтКлиента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	ДнейПросрочкиМакс = Константы.КоличествоДнейОжиданияПриемкиВозврата.Получить();

	//Не заданы
	Если ДнейПросрочкиМакс = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.АктРассмотренияВозврата, "СтатусДокумента,УчитыватьНДС,СуммаВключаетНДС,ПометкаУдаления");
	
	Если РеквизитыАРВ.ПометкаУдаления Тогда
		Возврат Истина;
	КонецЕсли;
	
	//Переводим в отказ только из этого статуса
	Если РеквизитыАРВ.СтатусДокумента <> Справочники.СтатусыДокументов.АРВ_ГВЖдемТовар Тогда
		Возврат Истина;
	КонецЕсли;	
	
	МинутВСтатусе = Документы.АктРассмотренияВозврата.ПродолжительностьНахожденияВСтатусе(Выборка.АктРассмотренияВозврата);
	ДнейВСтатусе  = МинутВСтатусе/1440;
	
	//Еще рано
	Если ДнейВСтатусе <= ДнейПросрочкиМакс Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДокументыВозврата = Документы.АктРассмотренияВозврата.ДокументыВозвратаОтПокупателяПоАРВ(Выборка.АктРассмотренияВозврата, "Не ПометкаУдаления");
	
	ОписаниеИзменения = "Истекло количество дней ожидания приемки возврата. 
	| Максимум дней: "+ДнейПросрочкиМакс+"
	| Ждали: "+ВозвратыОтПокупателяСервер.МинутыВСтроку(МинутВСтатусе);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		
		//Переводим в отказ возвраты
		Для каждого СтрокаВозврата Из ДокументыВозврата Цикл
			
			ДокВозврата = СтрокаВозврата.Ссылка.ПолучитьОбъект();
			ДокВозврата.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ;
			//Для каждого СтрокаТЧ Из ДокВозврата.Товары Цикл
			//	СтрокаТЧ.Количество = 0;
			//	СтрокаТЧ.Сумма 		= 0;
			//	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокВозврата);
			//КонецЦикла; 
			
			ДокВозврата.Записать(?(ДокВозврата.Проведен, 
			РежимЗаписиДокумента.Проведение, 
			РежимЗаписиДокумента.Запись));
			
		КонецЦикла;
		
		//Переводим в отказ АРВ
		АРВ = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
		АРВ.Заблокировать();
		АРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ГВОтказ;
		
		//Отправим отказ клиенту
		ДанныеТоваров = ДанныеТоваровАктаДляОтказа(Выборка.АктРассмотренияВозврата);
		АРВ.ПричинаОтказаВВозврате 	= "Уважаемые покупатели! Срок передачи возврата ("+
		ДанныеТоваров.Наименование+", "+ДанныеТоваров.ИзготовительНаименование+", "+ДанныеТоваров.Артикул+" в кол-ве "+ДанныеТоваров.Количество+" шт.)"+
		" на наш склад истек.
		| Спасибо за понимание.";
		АРВ.МенеджерОтказаВВозврате = Справочники.Пользователи.ПустаяСсылка();
		АРВ.ОтправленаПричинаОтказаВВозврате = Истина;
		
		//Для каждого СтрокаТЧ Из АРВ.Товары Цикл
		//	
		//	СтрокаТЧ.Количество = 0;
		//	
		//	СтруктураДействий = Новый Структура;
		//	СтруктураДействий.Вставить("ПересчитатьСуммуАРВ");
		//	СтруктураДействий.Вставить("РассчитатьСуммуНДС", Новый Структура("УчитыватьНДС, СуммаВключаетНДС", РеквизитыАРВ.УчитыватьНДС, РеквизитыАРВ.СуммаВключаетНДС));			
		//	СтруктураДействий.Вставить("ПересчитатьСебестоимость",  ?(СтрокаТЧ.Количество > 0, "Количество", "КоличествоПлан"));
		//	ОбработкаТабличныхЧастей.ПересчитатьСтрокуТабличнойЧасти(СтрокаТЧ, СтруктураДействий, Неопределено); 
		//	
		//КонецЦикла;                 	
		
		АРВ.ДополнительныеСвойства.Вставить("СохранитьВИсториюИзменения", ОписаниеИзменения);
		
		РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(Выборка.АктРассмотренияВозврата, 
		Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ОбработатьЭтапПроцесса,
		АРВ.СтатусДокумента);
		
		АРВ.Записать(РежимЗаписиДокумента.Проведение);
		
		Документы.АктРассмотренияВозврата.ОтправитьТекстОтказаНаСайт(АРВ.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОписаниеОшибки();
		Успешно		= Ложь;
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

//- Меняем код возврата и количество в АРВ, если возврат принят
//- Ставим отказ в АРВ, если возврат принят с отказом (нулевое количество)
//- Пересчитываем количество принятое и размещенное
Функция ОбработатьВозвратОтПокупателяИзТоплог(Выборка, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ОбработатьВозвратОтПокупателяИзТоплог";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	Если НЕ ЗначениеЗаполнено(Выборка.ПараметрСобытия) 
		ИЛИ ТипЗнч(Выборка.ПараметрСобытия) <> Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ТекстОшибки = "В качестве параметра события должен быть указан документ ""Возврат товаров от покупателя!""";
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыВозврата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ПараметрСобытия, "ВидОперации, Проведен, СтатусДокумента, КодВозврата, ПричинаОтказа, СостояниеОтменыВТоплог, НомерВходящегоДокументаСФ, ДатаВходящегоДокументаСФ");
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.АктРассмотренияВозврата, "Ответственный, КодВозвратаОбновленИзТоплог, СтатусДокумента, КодВозврата, ДоговорКонтрагента.ВидОплаты, СтатусПроверкиДокументовПокупателя");
	
	Если Не РеквизитыВозврата.Проведен Тогда
		Возврат Успешно;
	КонецЕсли;
	
	//Если указали номер входящего документа, значит документы проверены
	Если РеквизитыВозврата.ВидОперации = Перечисления.ВидыОперацийВозвратаОтПокупателя.ОбратнаяРеализация
		И ЗначениеЗаполнено(РеквизитыВозврата.НомерВходящегоДокументаСФ) И ЗначениеЗаполнено(РеквизитыВозврата.ДатаВходящегоДокументаСФ)
		И НЕ РеквизитыАРВ.СтатусПроверкиДокументовПокупателя = Перечисления.АРВ_СтатусыПроверкиДокументовПокупателя.Проверены Тогда
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			
			АРВ = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
			АРВ.Заблокировать();
			
			НовыйСтатусПроверкиДокументовПокупателя = Перечисления.АРВ_СтатусыПроверкиДокументовПокупателя.Проверены;
			
			ОписаниеИзменения = "Изменен статус проверки документов покупателя.
			| было: "+АРВ.СтатусПроверкиДокументовПокупателя+", стало: "+НовыйСтатусПроверкиДокументовПокупателя;
			АРВ.ДополнительныеСвойства.Вставить("СохранитьВИсториюИзменения", ОписаниеИзменения);
			
			АРВ.СтатусПроверкиДокументовПокупателя = НовыйСтатусПроверкиДокументовПокупателя;
			
			АРВ.Записать(?(АРВ.Проведен, 
			РежимЗаписиДокумента.Проведение, 
			РежимЗаписиДокумента.Запись));
			
			ЗафиксироватьТранзакцию();
			
			РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.АктРассмотренияВозврата, "Ответственный, КодВозвратаОбновленИзТоплог, СтатусДокумента, КодВозврата, ДоговорКонтрагента.ВидОплаты, СтатусПроверкиДокументовПокупателя");
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ОписаниеОшибки();
			Успешно		= Ложь;
			
			Возврат Успешно;
			
		КонецПопытки;
	КонецЕсли;
	
	КодВозвратаНовый = РеквизитыВозврата.КодВозврата;
	
	//Приняли или разместили возврат в топлоге
	Если (РеквизитыВозврата.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят
		ИЛИ РеквизитыВозврата.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяРазмещен) 
		И (РеквизитыАРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ГВЖдемТовар
		ИЛИ РеквизитыАРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ПопыткаОтмены) 
		Тогда
		
		ОписаниеИзменения = "";
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			
			АРВ = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
			АРВ.Заблокировать();
			
			Если НЕ РеквизитыАРВ.КодВозвратаОбновленИзТоплог Тогда
				
				ОтправитьСообщениеКлиентуНаСайтПоПринятомуВозврату(Выборка.ПараметрСобытия);
				
				АРВ.КодВозврата = КодВозвратаНовый;
				АРВ.КодВозвратаОбновленИзТоплог = Истина;
				
				ОписаниеИзменения = "Изменение кода возврата из топлог.
				| старый код: "+РеквизитыАРВ.КодВозврата+", новый код: "+КодВозвратаНовый;
				
			КонецЕсли;
			
			ИзмененоПринятое 	= Ложь;
			ИзмененоРазмещенное = Ложь;
			Если РеквизитыВозврата.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят Тогда
				ИзмененоПринятое 	=  АРВ.ОбновитьКоличествоПоВозвратуОтПокупателя(Выборка.ПараметрСобытия, "Принятое");
			Иначе
				ИзмененоПринятое 	=  АРВ.ОбновитьКоличествоПоВозвратуОтПокупателя(Выборка.ПараметрСобытия, "Принятое");
				ИзмененоРазмещенное =  АРВ.ОбновитьКоличествоПоВозвратуОтПокупателя(Выборка.ПараметрСобытия, "Размещенное");
			КонецЕсли;
			
			Если ИзмененоПринятое Тогда
				ОписаниеИзменения = ОписаниеИзменения + Символы.ПС + "Обновлено принятое количество по данным возврата от покупателя";
			КонецЕсли;
			Если ИзмененоРазмещенное Тогда
				ОписаниеИзменения = ОписаниеИзменения + Символы.ПС + "Обновлено размещенное количество по данным возврата от покупателя";
			КонецЕсли;
			
			Если РеквизитыАРВ.ДоговорКонтрагентаВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда
				АРВ.СтатусПроверкиДокументовПокупателя = Перечисления.АРВ_СтатусыПроверкиДокументовПокупателя.Проверены;
				Если АРВ.СуммаКомпенсацииУтв > 0 Тогда
					РегистрыСведений.ДатыВозвратаДокументов.Добавить(Выборка.АктРассмотренияВозврата, Перечисления.ВидыПечатныхДокументов.Претензия);
				КонецЕсли;
			ИначеЕсли Не ЗначениеЗаполнено(АРВ.СтатусПроверкиДокументовПокупателя) Тогда
				АРВ.СтатусПроверкиДокументовПокупателя = Перечисления.АРВ_СтатусыПроверкиДокументовПокупателя.НеПроверены;
			КонецЕсли;
			
			//Если была попытка отмены, но товар приняли
			Если РеквизитыАРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ПопыткаОтмены Тогда
				АРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ГВЖдемТовар;
			КонецЕсли;
			   
			//СтатусПроверкиДокументовПоставщика должен меняться только когда появится возврат поставщику
			//Если Не ЗначениеЗаполнено(АРВ.СтатусПроверкиДокументовПоставщика) Тогда
			//	Если АРВ.КодВозврата = Справочники.КодыВозврата.ВозвратПоставщику Тогда
			//		АРВ.СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.НеПроверены;
			//	Иначе
			//		АРВ.СтатусПроверкиДокументовПоставщика = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.ПроверкаНеНужна;
			//	КонецЕсли;
			//КонецЕсли;
			
			
			Если ЗначениеЗаполнено(ОписаниеИзменения) Тогда
				АРВ.ДополнительныеСвойства.Вставить("СохранитьВИсториюИзменения", ОписаниеИзменения);
			КонецЕсли;
			
			АРВ.Записать(?(АРВ.Проведен, 
			РежимЗаписиДокумента.Проведение, 
			РежимЗаписиДокумента.Запись));
			
			ЗафиксироватьТранзакцию();
			
			Если РеквизитыВозврата.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяРазмещен Тогда
				РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(
				Выборка.АктРассмотренияВозврата, 
				Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьПереходВСледующийСтатус, 
				РеквизитыАРВ.СтатусДокумента);
			КонецЕсли;

		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = ОписаниеОшибки();
			Успешно		= Ложь;
		КонецПопытки;
		
	//Отказали в возврате в топлоге	
	ИначеЕсли РеквизитыВозврата.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтказ
		И (РеквизитыАРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ГВЖдемТовар
		ИЛИ РеквизитыАРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ПопыткаОтмены)   Тогда
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			АРВ = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
			АРВ.Заблокировать();
			АРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ГВОтказ;
			АРВ.ОбновитьКоличествоПоВозвратуОтПокупателя(Выборка.ПараметрСобытия);
			
			Если ЗначениеЗаполнено(РеквизитыВозврата.ПричинаОтказа) Тогда
				АРВ.ПричинаОтказаВВозврате = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыВозврата.ПричинаОтказа, "ТекстСообщенияНаСайт");
			КонецЕсли;
			
			АРВ.ДополнительныеСвойства.Вставить("СохранитьВИсториюИзменения", "Отказ в возврате из топлог");
			
			АРВ.Записать(?(АРВ.Проведен, 
			РежимЗаписиДокумента.Проведение, 
			РежимЗаписиДокумента.Запись));
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = ОписаниеОшибки();
			Успешно		= Ложь;
		КонецПопытки;
		
	//Отменили возврат в топлоге
	ИначеЕсли РеквизитыВозврата.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтменен
		И РеквизитыАРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_ПопыткаОтмены
		И ЗначениеЗаполнено(РеквизитыВозврата.СостояниеОтменыВТоплог) Тогда
		
		РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(
		Выборка.АктРассмотренияВозврата, 
		Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьПереходВСледующийСтатус, 
		РеквизитыАРВ.СтатусДокумента);
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

//Меняем статус проверки документов поставщика и двигаем дальше
Функция ОбработатьВозвратПоставщикуИзТоплог(Выборка, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ОбработатьВозвратПоставщикуИзТоплог";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	Если НЕ ЗначениеЗаполнено(Выборка.ПараметрСобытия) 
		ИЛИ ТипЗнч(Выборка.ПараметрСобытия) <> Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ТекстОшибки = "В качестве параметра события должен быть указан документ ""Возврат товаров поставщику!""";
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыВозврата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ПараметрСобытия, "Проведен, СтатусДокумента");
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.АктРассмотренияВозврата, "СтатусПроверкиДокументовПоставщика, СтатусДокумента");
	
	Если Не РеквизитыВозврата.Проведен Тогда
		Возврат Успешно;
	КонецЕсли;
	
	ОписаниеИзменения = "";
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		
		НадоЗаписывать = Ложь;
		
		АРВ = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
		АРВ.Заблокировать();
		
		ПризнакПроверенСтруктура = РаботаСоСтатусамиДокументов.ПолучитьПризнакПроверен(Выборка.ПараметрСобытия);
		ДокументыПроверены = Ложь;
		Если ТипЗнч(ПризнакПроверенСтруктура) = Тип("Структура") Тогда 
			ДокументыПроверены = ПризнакПроверенСтруктура.ПризнакПроверен;
		КонецЕсли;
		
		Если ДокументыПроверены Тогда
			НовыйСтатусПроверки = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.Проверены;
		Иначе
			НовыйСтатусПроверки = Перечисления.АРВ_СтатусыПроверкиДокументовПоставщика.НеПроверены;
		КонецЕсли;
		
		Если НЕ РеквизитыАРВ.СтатусПроверкиДокументовПоставщика = НовыйСтатусПроверки Тогда
			ОписаниеИзменения = "Обновлен статус проверки документов поставщика. Было: "+АРВ.СтатусПроверкиДокументовПоставщика+", стало: "+НовыйСтатусПроверки;
			АРВ.СтатусПроверкиДокументовПоставщика = НовыйСтатусПроверки;
			НадоЗаписывать = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеИзменения) Тогда
			АРВ.ДополнительныеСвойства.Вставить("СохранитьВИсториюИзменения", ОписаниеИзменения);
		КонецЕсли;
		
		Если НадоЗаписывать Тогда
			АРВ.Записать(?(АРВ.Проведен, 
			РежимЗаписиДокумента.Проведение, 
			РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Если РеквизитыВозврата.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровПоставщикуОтгружен Тогда
			РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(
			Выборка.АктРассмотренияВозврата, 
			Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьПереходВСледующийСтатус, 
			РеквизитыАРВ.СтатусДокумента);
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОписаниеОшибки();
		Успешно		= Ложь;
	КонецПопытки;	
	
	Возврат Успешно;
	
КонецФункции

//Отправить сообщение клиенту
Функция ОбработатьКорректировкуДолга(Выборка, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ОбработатьКорректировкуДолга";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	Если НЕ ЗначениеЗаполнено(Выборка.ПараметрСобытия) 
		ИЛИ ТипЗнч(Выборка.ПараметрСобытия) <> Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ТекстОшибки = "В качестве параметра события должен быть указан документ ""Коректировка долга!""";
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыКорректировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ПараметрСобытия, "Проведен");
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.АктРассмотренияВозврата, "ОтправленоСообщениеОКомпенсацииНаСайт");
	
	Если Не РеквизитыКорректировки.Проведен Тогда
		Возврат Успешно;
	КонецЕсли;
	
	Если РеквизитыАРВ.ОтправленоСообщениеОКомпенсацииНаСайт Тогда
		Возврат Успешно;
	КонецЕсли;
	
	АРВ =  Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
	
	Если Документы.АктРассмотренияВозврата.ЭтоРучнойВвод(АРВ) Тогда
		Возврат Успешно;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		
		АРВ = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
		АРВ.Заблокировать();

		АРВ.ОтправленоСообщениеОКомпенсацииНаСайт = Истина;
		
		ДокументыКорректировки = Документы.АктРассмотренияВозврата.ДокументыКорректировкиДолгаПоАРВ(АРВ.Ссылка, "Проведен");
		ДокКорректировки = ДокументыКорректировки[0];
		ТекстСообщения = "На ваш баланс зачислены "+ДокКорректировки.Сумма+" руб. за компенсацию работ";
		ОписаниеИзменения = " Текст сообщения:"+Символы.ПС+Символы.ПС+ТекстСообщения;
		АРВ.ДополнительныеСвойства.Вставить("СохранитьВИсториюИзменения", ОписаниеИзменения);
		
		АРВ.Записать(РежимЗаписиДокумента.Проведение);
		
		Документы.АктРассмотренияВозврата.ОтправитьЭлмаподобноеСообщениеНаСайт(АРВ.Ссылка, "robot", Строка(АРВ.КодВозврата.Код), , ТекстСообщения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОписаниеОшибки();
		Успешно		= Ложь;
	КонецПопытки;
	
	Возврат Успешно;

КонецФункции

//Заполняем размещенное количество в возврате от покупателя
//Меняем статус возврата на Размещен, если размещено все количество
Функция ОбработатьРазмещениеИзТопЛог(Выборка, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ОбработатьРазмещениеИзТопЛог";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	Если НЕ ЗначениеЗаполнено(Выборка.ПараметрСобытия)  Тогда
		ТекстОшибки = "Не заполнен параметр события";
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Выборка.ПараметрСобытия) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		РеквизитыВозврата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ПараметрСобытия, "Проведен, СтатусДокумента, ДатаЗавершенияРазмещения");
		
		Если ЗначениеЗаполнено(РеквизитыВозврата.ДатаЗавершенияРазмещения) Тогда
			Возврат Успешно;
		КонецЕсли;
		
		//Только в статусе принят
		Если НЕ (РеквизитыВозврата.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят
			ИЛИ РеквизитыВозврата.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый) Тогда
			//Если возврат не принят, но пришло размещение, то все равно обработаем его (считаем что приемка была)
			Возврат Успешно;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Выборка.ПараметрСобытия) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда //Перемещение
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ПараметрСобытия, "Проведен, СтатусДокумента, ВидОперации");
		
		//Только для возврата в продажу
		Если РеквизитыОснования.ВидОперации <> Перечисления.ВидыОперацийПеремещенияТоваров.ВозвратВПродажу Тогда
			Возврат Успешно;
		КонецЕсли;
		
		//Только в статусе новый
		Если РеквизитыОснования.СтатусДокумента <> Справочники.СтатусыДокументов.ПеремещениеТоваровНовый Тогда
			Возврат Успешно;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Выборка.ПараметрСобытия) = Тип("ДокументСсылка.ПерестикеровкаПереоценка") Тогда //ПерестикеровкаПереоценка
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ПараметрСобытия, "Проведен, СтатусДокумента, ВидОперации");
		
		//Только в статусе новый
		Если РеквизитыОснования.СтатусДокумента <> Справочники.СтатусыДокументов.ПерестикеровкаПереоценкаНовый Тогда
			Возврат Успешно;
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = "В качестве параметра события должен быть указан документ ""Возврат товаров от покупателя"" или ""Перемещение товаров"" или ""Перестикеровка/переоценка""";
		Возврат Ложь;
		
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		
		ДокументОбъект = Выборка.ПараметрСобытия.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ЗаполнитьРазмещенноеКоличество();
		
		Если ТипЗнч(Выборка.ПараметрСобытия) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			Если ДокументОбъект.ВсеПринятоеКоличествоРазмещено() Тогда
				ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяРазмещен;
				
				СкладРазмещенияПоОснованию = СкладРазмещенияПоОснованию(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(СкладРазмещенияПоОснованию) И СкладРазмещенияПоОснованию <> ДокументОбъект.Склад Тогда
					ДокументОбъект.Склад = СкладРазмещенияПоОснованию;					
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Выборка.ПараметрСобытия) = Тип("ДокументСсылка.ПерестикеровкаПереоценка") Тогда
			Если ДокументОбъект.ВсеПлановоеКоличествоРазмещено() Тогда
				ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПерестикеровкаПереоценкаЗавершен;
			КонецЕсли;
		Иначе//Перемещение
			Если ДокументОбъект.ВсеКоличествоРазмещено() Тогда
				ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПеремещениеТоваровПоступил;
				ДокументОбъект.Дата = ТекущаяДата();
			КонецЕсли;
			Документы.ПеремещениеТоваров.ЗаполнитьОрганизацииТЧТоварыПоПартиям(ДокументОбъект);
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОписаниеОшибки();
		Успешно		= Ложь;
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

//Переводим в отмену 
Функция ОбработатьИзменениеРеализацииТоваровУслуг(Выборка, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ОбработатьИзменениеРеализацииТоваровУслуг";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	Если НЕ ЗначениеЗаполнено(Выборка.ПараметрСобытия) 
		ИЛИ ТипЗнч(Выборка.ПараметрСобытия) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ТекстОшибки = "В качестве параметра события должен быть указан документ ""Реализация товаров и услуг!""";
		Возврат Ложь;
	КонецЕсли;
	
	//РеквизитыРТУ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ПараметрСобытия, "Проведен");
	РеквизитыАРВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.АктРассмотренияВозврата, "СтатусДокумента,Проведен");
	
	//Если Не РеквизитыАРВ.Проведен Тогда
	//	Возврат Успешно;
	//КонецЕсли;
	
	Если РеквизитыАРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_Отменен Тогда
		Возврат Успешно;
	КонецЕсли; 
	
	ВозвратСсылка = Неопределено;
	ТЗВозвраты = Документы.АктРассмотренияВозврата.ДокументыВозвратаОтПокупателяПоАРВ(Выборка.АктРассмотренияВозврата);
	Если ТЗВозвраты.Количество() > 0 Тогда
		ВозвратСсылка = ТЗВозвраты[0].Ссылка;
	КонецЕсли;
	
	ИзмененоКоличество 	= Ложь;
	ИзмененоСумма 		= Ложь;
	Если ЗначениеЗаполнено(Выборка.ДополнительныеСведения) Тогда
		СтруктураПараметров = ЗначениеИзСтрокиВнутр(Выборка.ДополнительныеСведения);
		ИзмененоКоличество 	= СтруктураПараметров.ИзмененоКоличество;
		ИзмененоСумма 		= СтруктураПараметров.ИзмененоСумма; 
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		
		АРВ = Выборка.АктРассмотренияВозврата.ПолучитьОбъект();
		АРВ.Заблокировать();
		
		Если ИзмененоКоличество Тогда
			
			//При изменени количества в РТУ, отменяем документы
			
			Если ЗначениеЗаполнено(ВозвратСсылка) 
				И (ВозвратСсылка.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят
				ИЛИ ВозвратСсылка.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяРазмещен) Тогда
				
				//помечаем на удаление возврат и остальные подчиненные документы
				ТабДокументов = Документы.АктРассмотренияВозврата.ДокументыПоАРВ(Выборка.АктРассмотренияВозврата,
				"Не ПометкаУдаления");
				
				Для каждого стрТабДокументов Из ТабДокументов Цикл
					
					Если ТипЗнч(стрТабДокументов.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
						Продолжить;
					КонецЕсли;
					
					ДокОбъект = стрТабДокументов.Ссылка.ПолучитьОбъект();
					ДокОбъект.УстановитьПометкуУдаления(Истина);				
					
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(ВозвратСсылка) Тогда
				
				//переводим возврат в статус отмены, чтобы он выгрузился в топлог
				ВозвратОбъект = ВозвратСсылка.ПолучитьОбъект();
				ВозвратОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяОтменен;
				ВозвратОбъект.Записать(?(ВозвратОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				
			КонецЕсли;	
			
			// Преводим АРВ в статус отмены
			АРВ.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_Отменен;
			АРВ.ПричинаОтмены = Справочники.ПричиныОтменыВозвратаОтПокупателя.КорректировкаРеализации;
			
			ОписаниеИзменения = "Отмена акта возврата по причине корректировки документа реализации (пользователь "+Выборка.Пользователь+")";
			АРВ.ДополнительныеСвойства.Вставить("СохранитьВИсториюИзменения", ОписаниеИзменения);
			
			АРВ.Записать(?(АРВ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
		ИначеЕсли ИзмененоСумма
			И НЕ (ЗначениеЗаполнено(ВозвратСсылка) И 
					(ВозвратСсылка.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят
					ИЛИ ВозвратСсылка.СтатусДокумента = Справочники.СтатусыДокументов.ВозвратТоваровОтПокупателяРазмещен)) Тогда
			
			//При изменении суммы, если возврат еще не принят, то меняем сумму в АРВ и возврате
			
			АРВ.ЗаполнитьЦеныПоДокументуРеализации();
			
			ОписаниеИзменения = "Изменена сумма документа реализации (пользователь "+Выборка.Пользователь+"), выполнен пересчет цены.";
			АРВ.ДополнительныеСвойства.Вставить("СохранитьВИсториюИзменения", ОписаниеИзменения);
			
			АРВ.Записать(?(АРВ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
			Если ЗначениеЗаполнено(ВозвратСсылка)  Тогда
				
				ВозвратОбъект = ВозвратСсылка.ПолучитьОбъект();
				Для каждого СтрокаТабличнойЧасти Из ВозвратОбъект.Товары Цикл
					
					СтрокиАРВ = АРВ.Товары.НайтиСтроки(Новый Структура("Номенклатура, СтрокаПрихода", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.СтрокаПрихода));
					Если СтрокиАРВ.Количество() = 0 Тогда
						СтрокиАРВ =  АРВ.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТабличнойЧасти.Номенклатура));
					КонецЕсли;
					
					Если СтрокиАРВ.Количество() > 0 Тогда
						СтрокаТабличнойЧасти.Цена = СтрокиАРВ[0].ЦенаПослеУценки;	
						ВозвратОбъект.ПересчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ВозвратОбъект); 
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ВозвратОбъект);
					КонецЕсли;
				КонецЦикла;

				ВозвратОбъект.Записать(?(ВозвратОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				
			КонецЕсли;			
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОписаниеОшибки();
		Успешно		= Ложь;
		
	КонецПопытки;
	
	Возврат Успешно;

КонецФункции


//ПРОЧЕЕ

Процедура ОтправитьСообщениеКлиентуНаСайтПоПринятомуВозврату(ВозвратСсылка)
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ОтправитьСообщениеКлиентуНаСайтПоПринятомуВозврату";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	//Возврат;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВозвратСсылка, 
	"АктРассмотренияВозврата, КодВозврата.Код, АктРассмотренияВозврата.СтатусДокумента, АктРассмотренияВозврата.Ответственный");
	
	Акт = Реквизиты.АктРассмотренияВозврата;
	Если ЗначениеЗаполнено(Реквизиты.КодВозвратаКод) Тогда
		КодВозврата = Реквизиты.КодВозвратаКод;
	Иначе
		КодВозврата = "0";
	КонецЕсли;
	Штрихкод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Акт, "Штрихкод");
	
	//Ручной ввод
	Префикс = Документы.АктРассмотренияВозврата.ПрефиксШтрихкодаДляРучногоСозданияАРВ();
	Если СтрНайти(Штрихкод, Префикс) > 0 Тогда
		Возврат;
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.ПричинаОтказа.Наименование КАК ПричинаОтказаНаименование,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Ссылка,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование КАК Наименование,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул КАК Артикул,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Изготовитель.Наименование КАК ИзготовительНаименование,
		|	СУММА(ВозвратТоваровОтПокупателяТовары.КоличествоПлан) - СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК НеПринято,
		|	СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК Количество,
		|	СУММА(ВозвратТоваровОтПокупателяТовары.Сумма) КАК Сумма,
		|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|ГДЕ
		|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровОтПокупателяТовары.Ссылка.ПричинаОтказа.Наименование,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Ссылка,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул,
		|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Изготовитель.Наименование,
		|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", ВозвратСсылка);
	
	ТЗ = Запрос.Выполнить().Выгрузить();	

	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТЗ = ТЗ[0];
	ТипКаталога = 3;
	ИмяФайла = "send_"+Штрихкод+".txt";
	
	//Вернули деньги
	ТипКаталога = 3;
	Строка2 = "robot";
	Строка3 = Строка(КодВозврата);
	Строка4 = "0";
	
	ПредставлениеНоменклатурыДляСайта =	ВозвратыОтПокупателяСервер.ПредставлениеНоменклатурыДляСайта(СтрокаТЗ.ИзготовительНаименование,
																									СтрокаТЗ.Артикул,
																									СтрокаТЗ.Наименование,
																									СтрокаТЗ.ЕдиницаИзмеренияНаименование,
																									СтрокаТЗ.Количество);
																									
	СтрокаПринято = "Товар "+ПредставлениеНоменклатурыДляСайта+" принят на региональный склад. ";
	Строка5 = СтрокаПринято + "На Ваш баланс зачислены средства в размере "+ Формат(СтрокаТЗ.Сумма, "ЧДЦ=2") +" руб.";
	
	Если СтрокаТЗ.НеПринято > 0 Тогда
		
		ПредставлениеНепринятойНоменклатурыДляСайта = ВозвратыОтПокупателяСервер.ПредставлениеНоменклатурыДляСайта(СтрокаТЗ.ИзготовительНаименование,
		СтрокаТЗ.Артикул,
		СтрокаТЗ.Наименование,
		СтрокаТЗ.ЕдиницаИзмеренияНаименование,
		СтрокаТЗ.НеПринято);
		
		ПричинаОтказа = ?(ЗначениеЗаполнено(СтрокаТЗ.ПричинаОтказаНаименование), СтрокаТЗ.ПричинаОтказаНаименование, "недостача");																						
		
		Строка5 = Строка5+Символы.ПС+"Внимание! Не принято! Товар "+ПредставлениеНепринятойНоменклатурыДляСайта+" по причине: "+ПричинаОтказа;
		
	КонецЕсли;

	
	Документы.АктРассмотренияВозврата.ОтправитьЭлмаподобноеСообщениеНаСайт(Акт, Строка2, Строка3, Строка4, Строка5, ТипКаталога, ИмяФайла);	
	
	
	ПараметрыСобытия 							= РегистрыСведений.СобытияАктовРассмотренияВозврата.ИнициализироватьСтруктуруПараметровСобытия();
	ПараметрыСобытия.Описание 					= "Отправлено сообщение на сайт о приеме товара: "+Строка5;
	ПараметрыСобытия.АктРассмотренияВозврата 	= Реквизиты.АктРассмотренияВозврата;
	ПараметрыСобытия.СтатусДокумента 			= Реквизиты.АктРассмотренияВозвратаСтатусДокумента;
	ПараметрыСобытия.Ответственный  			= Реквизиты.АктРассмотренияВозвратаОтветственный;
	ПараметрыСобытия.Изменил 					= ПараметрыСеанса.ТекущийПользователь;
	РегистрыСведений.СобытияАктовРассмотренияВозврата.ДобавитьСобытие(Реквизиты.АктРассмотренияВозврата, ПараметрыСобытия); 
	
КонецПроцедуры

Функция ДанныеТоваровАктаДляОтказа(АРВСсылка)
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_ДанныеТоваровАктаДляОтказа";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктРассмотренияВозвратаТовары.Номенклатура.Код КАК Код,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование КАК Наименование,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул КАК Артикул,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель.Наименование КАК ИзготовительНаименование,
		|	АктРассмотренияВозвратаТовары.Номенклатура,
		|	СУММА(АктРассмотренияВозвратаТовары.КоличествоПлан) КАК Количество
		|ИЗ
		|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
		|ГДЕ
		|	АктРассмотренияВозвратаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	АктРассмотренияВозвратаТовары.Номенклатура,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Код,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Наименование,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Артикул,
		|	АктРассмотренияВозвратаТовары.Номенклатура.Изготовитель.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", АРВСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка;	
	
КонецФункции

Функция СкладРазмещенияПоОснованию(ДокументОснование)
	
	лКлючАлгоритма = "Обработка_ОбработкаОчередиСобытийПроцессаВозвратов_МодульОбъекта_СкладРазмещенияПоОснованию";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////

	СкладРазмещенияПоОснованию = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РазмещениеТоваров.Склад.СкладВозвратов КАК Склад
	|ИЗ
	|	РегистрНакопления.РазмещениеТоваров КАК РазмещениеТоваров
	|ГДЕ
	|	РазмещениеТоваров.ДокументОснование = &ДокументОснование
	|	И РазмещениеТоваров.Активность";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СкладРазмещенияПоОснованию = Выборка.Склад;
	КонецЕсли;
	
	Возврат СкладРазмещенияПоОснованию;
	
КонецФункции


