Перем ПравилаИгры;

// настройка
Функция УстановитьПараметрыПоУмолчанию(это_фон_на_сервере = Ложь) экспорт
	
	ПравилаИгры = Новый Структура();
	
	Отказ = Ложь;
	ПравилаИгры.Вставить("Отказ",Отказ);
	ПравилаИгры.Вставить("Аларм", это_фон_на_сервере);
	ПравилаИгры.Вставить("Аларм_Источник", Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаФормированияСлужебногоЗадания);
	ПравилаИгры.Вставить("Аларм_Заголовок", Вход_НазваниеСценария);
	ПравилаИгры.Вставить("Аларм_Содержимое", "");
	
	// вспомогательные переменнные
	ПравилаИгры.Вставить("это_фон", это_фон_на_сервере);
	
	значениеискомогоключика = Дата(1,1,1);
	ключикнайден = ПравилаИгры.Свойство("ТекущаяДата",значениеискомогоключика);
	Если ключикнайден =  Ложь И значениеискомогоключика = Неопределено Тогда
		ПравилаИгры.Вставить("ТекущаяДата", ТекущаяДата());
	КонецЕсли;
	лДтВрм = ПравилаИгры.ТекущаяДата;
	
	ПравилаИгры.Вставить("РасчетнаяДата", Дата(1,1,1));
	ПравилаИгры.Вставить("РасчетнаяДатаКонец", Дата(1,1,1));
	ПравилаИгры.Вставить("МаксСекундДоПовторногоПересчетаОстатков", 60);
	
	ПравилаИгры.Вставить("ИспользоватьРеквизит_СкладДубль", Истина); // склад ответ-хранения
	ПравилаИгры.Вставить("ИспользоватьРеквизит_флОтгружатьЮрФизЛицам", Истина);
    ПравилаИгры.Вставить("глЭтоБазаСПб", Ложь);
	
	
	// логирование
	//ПравилаИгры.Вставить("РазрешитьВыводНаЭкран", ?(это_фон_на_сервере,Ложь,Истина));
	ПравилаИгры.Вставить("РазрешитьЗаписьВЛогФайл", Истина);
	
	ПравилаИгры.Вставить("Метка",
								 СокрЛП( Формат( ДеньГода(лДтВрм) , "ЧЦ=3; ЧДЦ=; ЧВН=")) + "_" +
								 
								 РазвернутьДатуВстроку(лДтВрм) + "_" + 
								 СокрЛП(Формат(Час(лДтВрм),"ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0")) + 
								 СокрЛП(Формат(Минута(лДтВрм),"ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0")) + 
								 СокрЛП(Формат(Секунда(лДтВрм),"ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0")) + "_" + 
								 
								 СокрЛП(УбратьТОчкиИПробелы(СтрокаСоединенияИнформационнойБазы())) + "_" +
								 СокрЛП(УбратьТОчкиИПробелы(Строка(ПараметрыСеанса.ТекущийПользователь.Код))) + "_" +
								 СокрЛП(Вход_НазваниеСценария)
								 
	);
	лКатЛог = "\\Srv1c-nn\1C_exch\ASTOR_1C\push\Log\";
	ПравилаИгры.Вставить("КаталогЛогФайлов",  лКатЛог);
	ПравилаИгры.Вставить("ИмяЛогФайлаПолное", лКатЛог + "1с83_СЗ_" + ПравилаИгры.метка + ".txt");
	
	
	ДобавитьВЛог(СокрЛП(ТекущаяДата()) + " установка правил . это_фон_на_сервере = [" + СокрЛП(это_фон_на_сервере) + "]");
	ОпубликоватьЛог();
	
	РеглЗаданиеНаИсполнение = Справочники.РегламентныеЗадания.ПустаяСсылка();
	//Если это_фон_на_сервере тогда
		РеглЗаданиеНаИсполнение = Справочники.РегламентныеЗадания.НайтиПоКоду("000000187");
		
		Если НЕ ЗначениеЗаполнено(РеглЗаданиеНаИсполнение) тогда
			 Отказ = Истина;
			 ДобавитьВЛог("err: не найдено РеглЗаданиеНаИсполнение. Проверить код Задания в текущей базе");
			 ОпубликоватьЛог();
			 ПравилаИгры.Вставить("Отказ",Отказ);
		КонецЕсли;
		
	//КонецЕсли;
	ПравилаИгры.Вставить("РеглЗаданиеНаИсполнение",РеглЗаданиеНаИсполнение);
	
	// проверим заполненность данных
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		 Отказ = Истина;
		 ДобавитьВЛог("err: ошибка формирования СЗ. ПараметрыСеанса.ТекущийПользователь не заполнен");
		 ОпубликоватьЛог();
		 ПравилаИгры.Вставить("Отказ",Отказ);
	КонецЕсли;
	Если ПравилаИгры.Отказ тогда
		ОпубликоватьЛог();
		Возврат ПравилаИгры;
	КонецЕсли;
	ПравилаИгры.Вставить("Ответственный",Ответственный);
	
	ДокументОбъектСЗ_Филиал = Справочники.Филиалы.ПустаяСсылка();
	ПараметрыПользователя = Запрос_ПолучитьПараметрыПользователяПоУмолчанию(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойФилиал);
	Если ПараметрыПользователя.Количество() > 0 тогда
		ДокументОбъектСЗ_Филиал = ПараметрыПользователя[0].Значение;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокументОбъектСЗ_Филиал) тогда
		 Отказ = Истина;
		 ДобавитьВЛог("err: ошибка формирования СЗ. НастройкиПользователей.ОсновнойФилиал не заполнен");
		 ОпубликоватьЛог();
		 ПравилаИгры.Вставить("Отказ",Отказ);
	КонецЕсли;
	//Если ПравилаИгры.Отказ тогда
	//	ОпубликоватьЛог();
	//	//Возврат ПравилаИгры;
	//КонецЕсли;
	ПравилаИгры.Вставить("ДокументОбъектСЗ_Филиал",ДокументОбъектСЗ_Филиал);
	
	ДокументОбъектСЗ_Организация = Справочники.Организации.ПустаяСсылка();
	ПараметрыПользователя = Запрос_ПолучитьПараметрыПользователяПоУмолчанию(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация);
	Если ПараметрыПользователя.Количество() > 0 тогда
		ДокументОбъектСЗ_Организация = ПараметрыПользователя[0].Значение;
	Иначе
		ДокументОбъектСЗ_Организация = Константы.ОрганизацияПоУмолчаниюБезнал.Получить();	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокументОбъектСЗ_Организация) тогда
		ДокументОбъектСЗ_Организация = Константы.ОрганизацияПоУмолчаниюНал.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокументОбъектСЗ_Организация) тогда
		 Отказ = Истина;
		 ДобавитьВЛог("err: ошибка формирования СЗ. НастройкиПользователей.ОсновнаяОрганизация не заполнена");
		 ОпубликоватьЛог();
		 ПравилаИгры.Вставить("Отказ",Отказ);
	КонецЕсли;
	//Если ПравилаИгры.Отказ тогда
	//	ОпубликоватьЛог();
	//	//Возврат ПравилаИгры;
	//КонецЕсли;
	ПравилаИгры.Вставить("ДокументОбъектСЗ_Организация",ДокументОбъектСЗ_Организация);
	
	// контроль взаиморасчетов
	Если ЗначениеЗаполнено(Вход_ПроцентОтПланРеалДляСниженияДолгаДляКонтроляБезнальныхДоговоров) тогда
		Если Вход_ПроцентОтПланРеалДляСниженияДолгаДляКонтроляБезнальныхДоговоров > 100 тогда
			Вход_ПроцентОтПланРеалДляСниженияДолгаДляКонтроляБезнальныхДоговоров = 20;
		КонецЕсли;
	Иначе
		Вход_ПроцентОтПланРеалДляСниженияДолгаДляКонтроляБезнальныхДоговоров = 20;
	КонецЕсли;
	
	Вход_ЗапретитьОтгрузкуДолжникамСоСкладаФилиалаСувБонУц = Ложь;
	
	Если ЗначениеЗаполнено(Вход_МинимальныйПроцентНаценки) тогда
		Если Вход_МинимальныйПроцентНаценки > 100 тогда
			Вход_МинимальныйПроцентНаценки = 3;
		КонецЕсли;
	Иначе
		Вход_МинимальныйПроцентНаценки = 3;
	КонецЕсли;
	
	
	
	
	
	
	// массивы данных
	ОчиститьТЗ();
	//ПравилаИгры.Вставить("ТабличноеПоле1",сзСклады_Гл);
	//ПравилаИгры.Вставить("ТабличноеПоле2",сзСклады_Бон);
	//ПравилаИгры.Вставить("ТабличноеПоле3",сзСклады_Сув);
	//ПравилаИгры.Вставить("ТабличноеПоле4",ID_Маршрутов);
	//ПравилаИгры.Вставить("ТабличноеПоле5",сзДоговоры);
	//ПравилаИгры.Вставить("ТабличноеПоле6",тзТМП);
	//ПравилаИгры.Вставить("ТабличноеПоле7",Нищеброды);
	//ПравилаИгры.Вставить("ТабличноеПоле8",Отщепенцы);
	//ПравилаИгры.Вставить("ТабличноеПоле9",КА);
	//ПравилаИгры.Вставить("ТабличноеПоле10",ИсторияСЗ);
	//ПравилаИгры.Вставить("ТабличноеПоле11",сзСклады_Уц);
	//ПравилаИгры.Вставить("ТабличноеПоле12",Изгои);
	//ПравилаИгры.Вставить("ТабличноеПоле13", сзСЗ);
	//ПравилаИгры.Вставить("ТабличноеПоле14", сзРТ);
	
		значениеискомогоключика = Новый ТаблицаЗначений;
		ключикнайден = ПравилаИгры.Свойство("ИсторияСЗ",значениеискомогоключика);
		Если ключикнайден =  Ложь И значениеискомогоключика = Неопределено Тогда
			ПравилаИгры.Вставить("ИсторияСЗ", Новый ТаблицаЗначений);
		КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.АдресЭП
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Ссылка
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";

	Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КИ = Запрос.Выполнить().Выгрузить();
	КИмэйл = "";
	Если КИ.Количество() > 0 тогда
		КИмэйл = КИ[0].АдресЭП;
		Если Найти(КИмэйл,"@") = 0 тогда
			КИмэйл = "";
		КонецЕсли;
	КонецЕсли;
	ПравилаИгры.Вставить("МылоЮзвера", КИмэйл);	
	ПравилаИгры.Вставить("ИмяЮзвера", СокрЛП(ПараметрыСеанса.ТекущийПользователь));
	
	
	
	ПравилаИгры.Вставить("МаксимальноеКоличествоПопытокЗаписатьДокумент", 3);	
	
	
	ВидОбработки = 0;
	//Если НЕ это_фон_на_сервере тогда
		
		// будем считать,что обработка НЕ предназначена для 'розницы' и никто её по ошибке не откроет
		
		//1c7:
		//Если ПустоеЗначение(Парам) = 0 Тогда
		//	ВидОбработки = 0;
		//ИначеЕсли (глНазваниеНабораПрав = "Администратор") Или (СокрЛП(глПользователь.Код) = "Орлинский_А") Или (СокрЛП(глПользователь.Код) = "Черных_Станислав") Тогда
		//	сзМеню = глВернутьПустойСЗ();
		//	сзМеню.ДобавитьЗначение(0, "Служебное задание для Юр.Лиц");
		//	сзМеню.ДобавитьЗначение(1, "Служебное задание для Физ.Лиц");
		//	ВидОбработки = 0;
		//	Если сзМеню.ВыбратьЗначение(ВидОбработки,,,10,1) <> 1 Тогда
		//		СтатусВозврата(0);
		//		Возврат;
		//	КонецЕсли;
		//ИначеЕсли Найти(ВРЕГ(глНазваниеНабораПрав), "РОЗНИЦА") > 0 Тогда
		//	ВидОбработки = 1;
		//ИначеЕсли Найти("/Менеджер_Снабжение_Сбыт/Менеджер_Снабжение_Сбыт_Нач/Склад_Оператор1/Менеджер_Сбыт/Склад_НачОтдела_Самара/Склад_Оператор1_ТМЦ/ГлБухгалтер/", глНазваниеНабораПрав) = 0 Тогда
		//	СтатусВозврата(0);
		//	Предупреждение("У Вас нет прав на использование этой обработки!", 10);
		//	Возврат;
		//Иначе
		//	ВидОбработки = 0;
		//КонецЕсли;
		//
		//Если ВидОбработки = 1 Тогда
		//	СтатусВозврата(0);
		//	ОткрытьФорму("Отчет",,КаталогИБ()+"ExtForms\Обработки\Создание_СлужЗадания_ДляРозницы.ert");
		//	Возврат;
		//КонецЕсли;
		
	//КонецЕсли;
	
	ПравилаИгры.Вставить("Отказ",Отказ);
	
	
	Если ПравилаИгры.Отказ тогда
		ОпубликоватьЛог();
		//Возврат ПравилаИгры;
	КонецЕсли;
	
	Возврат ПравилаИгры;
	
КонецФункции
Функция СформироватьСписокВозможныхСценариев()
	
	//1с7:
	//Если ПустоеЗначение(Парам) = 0 Тогда
		//Если Операция = "ЗаписьДокументов" Тогда
		//	Сообщить("*** Начало записи служебных заданий из таблицы SQL");
		//ИначеЕсли Операция = "Расчёт" Тогда
		//	Сообщить("*** Начало расчёта и запись в таблицу SQL служебных заданий");
	
	списокСценариев = Новый ТаблицаЗначений;
	списокСценариев.Колонки.Добавить("Комент");
	списокСценариев.Колонки.Добавить("ИмяПроцедуры");
	
	НовыйСценарий = списокСценариев.Добавить();
	НовыйСценарий.Комент = "шаг 0. Автозапуск";
	НовыйСценарий.ИмяПроцедуры = "АвтозапускФормированияСЗ()";
	
	//НовыйСценарий = списокСценариев.Добавить();
	//НовыйСценарий.Комент = "шаг 1. Рассчитать доступные резервы";
	//НовыйСценарий.ИмяПроцедуры = "ЗаполнитьДанныеПоРезервам()";
	//
	//НовыйСценарий = списокСценариев.Добавить();
	//НовыйСценарий.Комент = "шаг 3. Сформировать Служебные Задания";
	//НовыйСценарий.ИмяПроцедуры = "СформироватьДокументы()";
	
	Возврат списокСценариев;
КонецФункции

// расчет
Функция ЗаполнитьДанныеПоРезервам() экспорт
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "расчет резервов - старт"   ));					

	ОтобразитьФильтр();
	Если ПравилаИгры.Отказ тогда
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Ошибка,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "расчет резервов - ОтобразитьФильтр"   ));							
		
		ОпубликоватьЛог();
		Возврат ПравилаИгры;
	КонецЕсли;
	
	ПолучитьРезервыПоФильтру(Неопределено);
	Если ПравилаИгры.Отказ тогда
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Ошибка,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "расчет резервов - ПолучитьРезервыПоФильтру"   ));							
		
		ОпубликоватьЛог();
		Возврат ПравилаИгры;
	КонецЕсли;
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "расчет резервов - окончание"   ));					
	
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf : данные по резервам получены");
	ОпубликоватьЛог();
	Возврат ПравилаИгры;
	
КонецФункции
Функция ОтобразитьФильтр() экспорт
	ПравилаИгры.Вставить("РасчетнаяДата",ТекущаяДата());
	
	ОчиститьТЗ();
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - старт");
	
	ПроверкаНаЛося();
	Если ПравилаИгры.Отказ тогда
		ОпубликоватьЛог();
		Возврат ПравилаИгры;
	КонецЕсли;
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - проверка пройдена");
	
	ЗаполнитьСписокСкладов();
	Если ПравилаИгры.Отказ тогда
		ОпубликоватьЛог();
		Возврат ПравилаИгры;
	КонецЕсли;
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - список складов сформирован");
	
	ЗаполнитьСписокДоговоров();
	Если ПравилаИгры.Отказ тогда
		ОпубликоватьЛог();
		Возврат ПравилаИгры;
	КонецЕсли;
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - список договоров сформирован");
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "фильтр сформирован "   ));					
	
	ОпубликоватьЛог();
	Возврат ПравилаИгры;
КонецФункции
Процедура ПроверкаНаЛося()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Вход_Склад) тогда
		ДобавитьВЛог("err: не указан Склад");
		ОпубликоватьЛог();
		Отказ = Истина;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(Вход_МаршрутДоставки)) И (НЕ ЗначениеЗаполнено(Вход_КА)) тогда
		//ДобавитьВЛог("err: не указан МаршрутДоставки либо КА");
		Если ЗначениеЗаполнено(Вход_Основание) тогда
			ДобавитьВЛог("err: укажите МаршрутДоставки");
		Иначе
			ДобавитьВЛог("err: укажите КА");
		КонецЕсли;
		ОпубликоватьЛог();
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Вход_КА) тогда
		Если НЕ Вход_флРежРаботы_вВых = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Вход_КА, "РежРаботы_вВых") Тогда
			ДобавитьВЛог("err: Указанный покупатель ["+СокрлП(Вход_КА)+"] не работает в выходные. Выберите другого покупателя.");
			ОпубликоватьЛог();
			Отказ = Истина;
		КонецЕсли;
		Если НЕ Вход_флДополнительнаяДоставка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Вход_КА, "ДополнительнаяДоставка") Тогда
			ДобавитьВЛог("err: У указанного покупателя ["+СокрлП(Вход_КА)+"] не включен флаг [Нужна доп.доставка]. Выберите другого покупателя.");
			ОпубликоватьЛог();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПравилаИгры.Вставить("Отказ",Отказ);
	
КонецПроцедуры
Процедура ЗаполнитьСписокСкладов()
	
	Отказ = Ложь;
	
	сзСклады_Гл = Новый ТаблицаЗначений;	
	сзСклады_Гл.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
	сзСклады_Бон = сзСклады_Гл.Скопировать();	
	сзСклады_Сув = сзСклады_Гл.Скопировать();
	
	////==============================================================================
	//// с 19.05.2014 к основным складам добавлен склад Уценки
	//// с 08.06.2015 доступ к складам ограничен : филиалы должны выбирать только свой склад
	//выбСЗ_Склады = глВернутьПустойСЗ();
	//Если ПустоеЗначение(глПользователь.Подразделение) = 0 Тогда
	//	Если глПользователь.Подразделение.Склад <> глСклад_Основной Тогда
	//		выбСЗ_Склады.ДобавитьЗначение(глПользователь.Подразделение.Склад); // для филиалов только свой склад
	//	КонецЕсли;
	//КонецЕсли;
	////==============================================================================
	
	выбСклад = Вход_Склад;
	стр = сзСклады_Гл.Добавить();
	стр.Склад = выбСклад;
	
	Если ПравилаИгры.ИспользоватьРеквизит_СкладДубль тогда
		лСклДубль = ОбщегоНазначения.ПолучитьЗначениеРеквизита(выбСклад,"СкладДубль");
		Если ЗначениеЗаполнено(лСклДубль) тогда
			стр = сзСклады_Гл.Добавить();
			стр.Склад = лСклДубль;
		КонецЕсли;
	КонецЕсли;
	
	тмп_выбСклад_Основной = 0;
	глСклад_Основной = Константы.СкладОсновной.Получить();
	ПравилаИгры.Вставить("глСклад_Основной", глСклад_Основной);
	ПравилаИгры.Вставить("глСклад_Москва", Константы.Склад_Москва.Получить());
	
	Если выбСклад = глСклад_Основной Тогда
		
		тмп_выбСклад_Основной = 1;	
		
		СтрокаКода = "";
		Если ПравилаИгры.глЭтоБазаСПб тогда
			// 1с7: с 28.12.2015 ГПЕ для СПб добавил "Склад масел"
			//Если спрСклады.НайтиПоКоду("14", 0) = 1 Тогда
			//	сзСклады_Гл.ДобавитьЗначение(спрСклады.ТекущийЭлемент());
			//КонецЕсли;
			СтрокаКода = "000000014";
		Иначе
			// 1с7: с 31.03.2017 склад акционных товаров
			//Если спрСклады.НайтиПоКоду("105", 0) = 1 Тогда
			//	сзСклады_Гл.ДобавитьЗначение(спрСклады.ТекущийЭлемент());
			//КонецЕсли;
			СтрокаКода = "000000105"; 
		КонецЕсли;
		
		СпрСкл = Справочники.Склады;
		НайденнаяСсылка = СпрСкл.НайтиПоКоду(СтрокаКода);
		Если НЕ НайденнаяСсылка = СпрСкл.ПустаяСсылка() Тогда
			стр = сзСклады_Гл.Добавить();
			стр.Склад = НайденнаяСсылка;
		КонецЕсли;		
		
		//1с7: с 26.03.2012
		сзСклады_Бон = Запрос_ПолучитьСписокСкладов("Бонусный");		
		//Если ПравилаИгры.глЭтоБазаСПб И сзСклады_Бон.Количество() > 0 Тогда
		Для Каждого СтрБонус Из сзСклады_Бон Цикл
			стр = сзСклады_Гл.Добавить();
			стр.Склад = СтрБонус.Склад;
		КонецЦикла;
		//КонецЕсли;
		
		//1с7: с 14.04.2012
		сзСклады_Сув = Запрос_ПолучитьСписокСкладов("Сувенирный");		
		Для Каждого СтрСув Из сзСклады_Сув Цикл
			стр = сзСклады_Гл.Добавить();
			стр.Склад = СтрСув.Склад;
		КонецЦикла;
		
		//1с7:	сзСклады_Все.ДобавитьЗначение(глКонстанта_ИзКэша("СкладУценки"));
		сзСклады_Уц = Запрос_ПолучитьСписокСкладов("Уценка");		
		Для Каждого СтрУц Из сзСклады_Уц Цикл
			стр = сзСклады_Гл.Добавить();
			стр.Склад = Струц.Склад;
		КонецЦикла;
		
	КонецЕсли;
	
	ПравилаИгры.Вставить("ТабличноеПоле1",сзСклады_Гл);
	ПравилаИгры.Вставить("ТабличноеПоле2",сзСклады_Бон);
	ПравилаИгры.Вставить("ТабличноеПоле3",сзСклады_Сув);
	ПравилаИгры.Вставить("ТабличноеПоле11",сзСклады_Уц);
	
	Если сзСклады_Гл.Количество() = 0 тогда
		ПравилаИгры.Вставить("Отказ",Отказ);
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаполнитьСписокДоговоров()
	
	Отказ = Ложь;
	флОтгружатьВсем = Ложь;
	сзДоговоры  = Новый ТаблицаЗначений;
	ID_Маршрутов = Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(Вход_МаршрутДоставки) тогда
		
		ID_Маршрутов = Запрос_ПолучитьСписокМаршрутовДоставки();
		
		Если ID_Маршрутов.Количество() > 0 тогда
			
			Если ПравилаИгры.ИспользоватьРеквизит_флОтгружатьЮрФизЛицам тогда
				Если Вход_МаршрутДоставки.ЭтоГруппа тогда
					//строка_ОтдельныеСЗ = Новый Массив;
					Отбор = Новый Структура();
					Отбор.Вставить("флОтгружатьЮрФизЛицам",Истина);
					Строки = ID_Маршрутов.НайтиСтроки(Отбор);
					Если Строки.Количество() > 0 Тогда
						ДобавитьВЛог("err: ВНИМАНИЕ!!! По следующим маршрутам физ.лица не попадут в это служебное задание. Для них надо будет создать отдельные служебные задания:");
						cxcx = 0;
						Для Каждого ЭлементМассива из Строки Цикл
							cxcx = cxcx + 1;
					        //строка_ОтдельныеСЗ.Добавить(ЭлементМассива.ПунктДоставки);
							ДобавитьВЛог(СокрлП(cxcx) + ". " + СокрлП(ЭлементМассива.ПунктДоставки) + ";" + СокрлП(ЭлементМассива.ПунктДоставки.УникальныйИдентификатор()));
						КонецЦикла;				
						ОпубликоватьЛог();
					КонецЕсли;
				Иначе
					флОтгружатьВсем = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Вход_МаршрутДоставки,"флОтгружатьЮрФизЛицам");
					Если НЕ флОтгружатьВсем тогда
						Если ЗначениеЗаполнено(Вход_КА) тогда
							лТТ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Вход_КА,"ОсновнаяТорговаяТочка");
							лПунктДоставки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(лТТ,"МаршрутДоставки");
							Если ЗначениеЗаполнено(лПунктДоставки) тогда
								флОтгружатьВсем = ОбщегоНазначения.ПолучитьЗначениеРеквизита(лПунктДоставки,"флОтгружатьЮрФизЛицам");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПравилаИгры.Вставить("ТабличноеПоле4",ID_Маршрутов);
			ПравилаИгры.Вставить("флОтгружатьВсем",флОтгружатьВсем);
			
			сзДоговоры	= Запрос_ПолучитьСписокДоговоровПродажиПоПД();
			
		КонецЕсли;
		
		
	ИначеЕсли ЗначениеЗаполнено(Вход_КА) тогда
		
		Если ПравилаИгры.ИспользоватьРеквизит_флОтгружатьЮрФизЛицам тогда
			лТТ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Вход_КА,"ОсновнаяТорговаяТочка");
			лПД = ОбщегоНазначения.ПолучитьЗначениеРеквизита(лТТ,"МаршрутДоставки");
			Если ЗначениеЗаполнено(лПД) тогда
				флОтгружатьВсем = ОбщегоНазначения.ПолучитьЗначениеРеквизита(лПД,"флОтгружатьЮрФизЛицам");
				Если НЕ флОтгружатьВсем тогда
					лЮрФизЛицоВид = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Вход_КА,"ЮрФизЛицо");
					Если лЮрФизЛицоВид = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
						ДобавитьВЛог("err: Вы добавили физ.лицо, а Физ.лица не учитываются.");
						ОпубликоватьЛог();
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ тогда
			ПравилаИгры.Вставить("флОтгружатьВсем",флОтгружатьВсем);
			сзДоговоры	= Запрос_ПолучитьСписокДоговоровПродажиПоКА();
		КонецЕсли;
		
	КонецЕсли;
	
	Если сзДоговоры.Количество() = 0 тогда
		ДобавитьВЛог("inf: список договоров пуст.");
		Если ЗначениеЗаполнено(Вход_МаршрутДоставки) тогда
			ДобавитьВЛог("inf: по выбранным маршрутам договоров продажи не найдено.");
		ИначеЕсли ЗначениеЗаполнено(Вход_КА) тогда
			ДобавитьВЛог("inf: У выбранного КА нет договоров на продажу!");
		КонецЕсли;
		ОпубликоватьЛог();
		Отказ = Истина;
	КонецЕсли;
	
	ПравилаИгры.Вставить("ТабличноеПоле5",сзДоговоры);
	ПравилаИгры.Вставить("Отказ",Отказ);
	//ДопТекстЗапроса_Параметры_2 = "Условие( (Пункт_1 в выбМаршрут) или (Пункт_2 в выбМаршрут) или (Пункт_3 в выбМаршрут) );";
	
КонецПроцедуры
Процедура ПолучитьРезервыПоФильтру(тзТМП1)
	
	Отказ = Ложь;
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - старт процедуры расчета резервов");	
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "старт"   ));			
	Если ПравилаИгры.ТабличноеПоле5.Количество() = 0 тогда
		ДобавитьВЛог("inf: остатки по резервам не получены. список договоров пуст");
		ОпубликоватьЛог();
		Отказ = Ложь;//Истина;
		ПравилаИгры.Вставить("Отказ",Отказ);
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "список договоров пуст"   ));			
		
		Возврат;
	КонецЕсли;
	
	Попытка
		// запомним обрабатываемый список договоров
		АктивироватьДоговоры();
		
		РезультатРазмышленийНаТему =  Запрос_ПолучитьОстаткиПоРезервамПоФильтру();
		РезультатРазмышленийНаТему_Количество = РезультатРазмышленийНаТему.Количество();
		
		ДоговораОнЛайн = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 5].Выгрузить();
		тзТМП = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 4].Выгрузить();
		Нищеброды = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 3].Выгрузить();
		Отщепенцы = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 2].Выгрузить();
		ИсторияСЗ = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 1].Выгрузить();
		
		Если тзТМП.Количество() = 0 тогда
			ДобавитьВЛог("inf : резервы отсутствуют");
			Если ЗначениеЗаполнено(Вход_МаршрутДоставки) тогда
				ДобавитьВЛог("inf : Нет резервов по маршруту " + СокрлП(Вход_МаршрутДоставки));
			ИначеЕсли ЗначениеЗаполнено(Вход_КА) тогда
				ДобавитьВЛог("inf : Нет резервов по КА " + СокрлП(Вход_КА));
			КонецЕсли;
			ОпубликоватьЛог();
			
			//Если ПравилаИгры.это_фон тогда
				РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "данные по резервам отсутствуют"   ));	
			//КонецЕсли;
			
		Иначе	
			
			//Если ПравилаИгры.это_фон тогда
				РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "данные по резервам получены"   ));	
			//КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - окончание процедуры расчета резервов");	
		
		КА = тзТМП.Скопировать();
		КА.Свернуть("Контрагент,МаршрутДоставки,Филиал",",КоличествоПлан,СуммаПлан,Аларм");
		
		
		//Рудаков в происходит перезаполнение резервов, при этом игнорится то что скорректировано руками перед созданием СЗ
		//для исправления сформированный результат по резервам приводится в соответствие к таблице скорректированной руками
		Если тзТМП1=Неопределено Тогда 
			тзТМП2 = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 4].Выгрузить();
		Иначе 	
			тзТМП2 = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 4].Выгрузить();
			тзТМП2.Очистить();
			
			Для Каждого Стр Из тзТМП1 Цикл 
				Для Каждого СтрТ Из тзТМП Цикл
					Если СтрТ.IDSite=Стр.IDSite Тогда 
						НовСтр = тзТМП2.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, СтрТ);
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЕсли;	
		//Рудаков Конец
		ПравилаИгры.Вставить("ТабличноеПоле6",тзТМП2);//тзТМП);
		ПравилаИгры.Вставить("ТабличноеПоле7",Нищеброды);
		ПравилаИгры.Вставить("ТабличноеПоле8",Отщепенцы);
		ПравилаИгры.Вставить("ТабличноеПоле9",КА);
		ПравилаИгры.Вставить("ТабличноеПоле10",ИсторияСЗ);
		
		ПравилаИгры.Вставить("ТабличноеПоле15",ДоговораОнЛайн);
		
		ПравилаИгры.Вставить("Отказ",Отказ);
		ПравилаИгры.Вставить("РасчетнаяДатаКонец",ТекущаяДата());

		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "окончание"   ));			

	Исключение
		
		ДобавитьВЛог("err: остатки по резервам не получены. ошибка запроса");
		ОпубликоватьЛог();
		Отказ = Ложь;//Истина;
		ПравилаИгры.Вставить("Отказ",Отказ);
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Ошибка,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "ошибка запроса"   ));			
		
	Конецпопытки;
	
КонецПроцедуры

// интерактив
Функция ИсключитьКА(пар_КА) экспорт
	
	Если ЗначениеЗаполнено(пар_КА) тогда
		
		ТМЦ = ПравилаИгры.ТабличноеПоле6;
		КА = ПравилаИгры.ТабличноеПоле9;
		
		Изгои = ПравилаИгры.ТабличноеПоле12;
		Если Изгои.Колонки.Количество() = 0 Тогда
			Изгои.Колонки.Добавить("КА",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));	
		КонецЕсли;
		
		НоваяСтрока = Изгои.Добавить();
		НоваяСтрока.КА = пар_КА;
		
		КандидатыНаУдаление = ТМЦ.НайтиСтроки(Новый Структура("Контрагент",пар_КА));
	    Для каждого СтрокаТаблицы Из КандидатыНаУдаление Цикл
	    	ТМЦ.Удалить(СтрокаТаблицы);
		КонецЦикла;
		КандидатыНаУдаление = КА.НайтиСтроки(Новый Структура("Контрагент",пар_КА));
	    Для каждого СтрокаТаблицы Из КандидатыНаУдаление Цикл
	    	КА.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		ПравилаИгры.Вставить("ТабличноеПоле6",ТМЦ);
		ПравилаИгры.Вставить("ТабличноеПоле9",КА);
		ПравилаИгры.Вставить("ТабличноеПоле12",Изгои);
		
	КонецЕсли;
	
	Возврат ПравилаИгры;
КонецФункции

// запись
Функция СформироватьДокументы(тзТМП) экспорт
	
РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ФормированиеДокумента,Вход_Основание,Документы.РеализацияТоваровУслуг.ПустаяСсылка(),  "старт формирования СЗ"   ));	

	Отказ = Ложь;
	
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - старт процедуры формировани СЗ");	
	Если Не тзТМП=Неопределено Тогда 
		ПравилаИгры.Вставить("ТабличноеПоле6",тзТМП);
	КонецЕсли;	
	
	Если НЕ ПравилаИгры.Это_Фон тогда
		
				
		Если НЕ ЗначениеЗаполнено(Вход_ТипДоставки) тогда
			
РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Вход_Основание,Документы.РеализацияТоваровУслуг.ПустаяСсылка(),  "не указан ТипДоставки"   ));	
			
			ДобавитьВЛог("inf: Не Указан Тип Доставки");
			ОпубликоватьЛог();
			Отказ = Истина;
			ПравилаИгры.Вставить("Отказ",Отказ);
			Возврат ПравилаИгры;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Вход_Водитель) И (Вход_ТипДоставки <> Справочники.ТипыДоставки.Самовывоз) тогда
РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Вход_Основание,Документы.РеализацияТоваровУслуг.ПустаяСсылка(),  "не указан Водитель"   ));				
			ДобавитьВЛог("inf: Не Указан Водитель");
			ОпубликоватьЛог();
			Отказ = Истина;
			ПравилаИгры.Вставить("Отказ",Отказ);
			Возврат ПравилаИгры;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаДоставки) тогда		
РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Вход_Основание,Документы.РеализацияТоваровУслуг.ПустаяСсылка(),  "не указана ДатаДоставки"   ));				
			ДобавитьВЛог("err: Не Указана Дата Доставки");
			ОпубликоватьЛог();
			Отказ = Истина;
			ПравилаИгры.Вставить("Отказ",Отказ);
			Возврат ПравилаИгры;
		КонецЕсли;
		
		
		Если ДатаДоставки < ТекущаяДата() тогда		
РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Вход_Основание,Документы.РеализацияТоваровУслуг.ПустаяСсылка(),  "ДатаДоставки меньше текущей"   ));				
			ДобавитьВЛог("err: Дата Доставки меньше текущей");
			ОпубликоватьЛог();
			Отказ = Истина;
			ПравилаИгры.Вставить("Отказ",Отказ);
			Возврат ПравилаИгры;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравилаИгры.ТабличноеПоле5.Количество() = 0 тогда
		
РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Вход_Основание,Документы.РеализацияТоваровУслуг.ПустаяСсылка(),  "список договоров пуст"   ));		
		
		ДобавитьВЛог("inf: остатки по резервам не получены. список договоров пуст");
		ОпубликоватьЛог();
		Отказ = Истина;
		ПравилаИгры.Вставить("Отказ",Отказ);
		Возврат ПравилаИгры;
	КонецЕсли;
	
	сзСЗ = ПравилаИгры.ТабличноеПоле13;
	Если сзСЗ.Колонки.Количество() = 0 тогда
		сзСЗ.Колонки.Добавить("Документ",Новый ОписаниеТипов("ДокументСсылка.СлужебноеЗадание"));
	КонецЕсли;
	сзРТ = ПравилаИгры.ТабличноеПоле14;
	Если сзРТ.Колонки.Количество() = 0 тогда
		сзРТ.Колонки.Добавить("Документ",Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	КонецЕсли;
	
	Если НЕ ПравилаИгры.Это_Фон тогда
		// актуализируем расчет
		Если ТекущаяДата() - ПравилаИгры.РасчетнаяДатаКонец  > ПравилаИгры.МаксСекундДоПовторногоПересчетаОстатков тогда
			Если ДеАктивироватьДоговоры() тогда
				// караул
			КонецЕсли;
		КонецЕсли;
		
		ПолучитьРезервыПоФильтру(тзТМП);
		
		Если ПравилаИгры.Отказ тогда
			ОпубликоватьЛог();
			Возврат ПравилаИгры;
		КонецЕсли;
		ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - выполнен перерасчет по резервам");
	КонецЕсли;
	
	Если ПравилаИгры.ТабличноеПоле6.Количество() = 0 тогда
		
РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Вход_Основание,Документы.РеализацияТоваровУслуг.ПустаяСсылка(),  "остатки по резервам не получены"   ));				

		ДобавитьВЛог("inf : остатки по резервам не получены. таблица пуста");
		ОпубликоватьЛог();
		Отказ = Истина;
		ПравилаИгры.Вставить("Отказ",Отказ);
		Возврат ПравилаИгры;
	КонецЕсли;
	
	резервы_тмц_выборка = ПравилаИгры.ТабличноеПоле6;
	
	строка_группировки_для_служебных_заданий = "Организация,Склад,Филиал,Ответственный,МаршрутДоставкиГруппа";
	строка_группировки_для_реализаций = строка_группировки_для_служебных_заданий + 
	",СтатусДокумента,МаршрутДоставки,ВалютаДокумента,КратностьВзаиморасчетов,КурсВзаиморасчетов,УчитыватьНДС,СуммаВключаетНДС,ТипЦен,ДоговорКонтрагента,ТорговаяТочка,Менеджер,Контрагент,БанковскийСчет";
	
	резервы_тмц_выборка_СЗ = ПравилаИгры.ТабличноеПоле6.Скопировать();
	резервы_тмц_выборка_СЗ.Свернуть(строка_группировки_для_служебных_заданий,"КоличествоПлан");
	
	резервы_тмц_выборка_Ре = ПравилаИгры.ТабличноеПоле6.Скопировать();
	резервы_тмц_выборка_Ре.Свернуть(строка_группировки_для_реализаций,"КоличествоПлан");
	
	ПараметрыСеанса_ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ОкруглениеДо10Рублей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса_ТекущийПользователь, "ОкруглениеДо10Рублей");
	РежимОкругленияПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса_ТекущийПользователь, "ОкруглятьЦеныВЗаявкахИРеализациях"); 
	
	Для каждого стрсз из резервы_тмц_выборка_СЗ цикл
		
		лОрганизация = стрсз.Организация;
		лСкл = стрсз.Склад;
		
		// начало транзакции, создание СЗ, заполнение шапки                 
		
		СчПопытокЗаписатьСЗ = 0;
		Записано = Ложь;
		
		Пока Не Записано Цикл
			
			СчПопытокЗаписатьСЗ = СчПопытокЗаписатьСЗ + 1;
			Если СчПопытокЗаписатьСЗ > ПравилаИгры.МаксимальноеКоличествоПопытокЗаписатьДокумент тогда
				Прервать;
			КонецЕсли;
			
			Попытка
				НачатьТранзакцию();
				
				МоментВремениЗапроса = ТекущаяДата();
				ДокументОбъектСЗ = Неопределено;
				ДокументСсылкаСЗ = Документы.СлужебноеЗадание.ПустаяСсылка();
				
				СоздатьНовыйДокументСЗ = Истина;
				Если ПравилаИгры.это_фон тогда
					РезультатПоискаСЗ = Запрос_НайтиСЗ(лСкл);
					Если РезультатПоискаСЗ.Количество() > 0 тогда
						ДокументСсылкаСЗ = РезультатПоискаСЗ[0].ИскомаяСсылкаНаСЗ;	
						Если ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументСсылкаСЗ,"Номер")) тогда
							СоздатьНовыйДокументСЗ = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если СоздатьНовыйДокументСЗ тогда
					ДокументОбъектСЗ = Документы.СлужебноеЗадание.СоздатьДокумент();
				Иначе
					ДокументОбъектСЗ = ДокументСсылкаСЗ.ПолучитьОбъект(); 
				КонецЕсли;
				
				ДокументОбъектСЗ.МаршрутДоставки = стрсз.МаршрутДоставкиГруппа;
				ДокументОбъектСЗ.ТипДоставки = Вход_ТипДоставки;
				ДокументОбъектСЗ.Водитель = Вход_Водитель;
				ДокументОбъектСЗ.ТранспортнаяКомпания = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Вход_Водитель,"ТранспортнаяКомпания");
				ДокументОбъектСЗ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				ДокументОбъектСЗ.флДопЗадание = Вход_флДополнительнаяДоставка;
				
				Если ЗначениеЗаполнено(Вход_Основание) тогда
					
					текдн = МоментВремениЗапроса;
					нмрдн = ДеньНедели(текдн);
					ПараметрыОснования = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Вход_Основание,"ВремяЗапуска" + СокрлП(нмрдн) + ",ВремяНачалаУпаковки" + СокрлП(нмрдн) + ",ВремОкончанияДовыписки" + СокрлП(нмрдн) + ",ВремОтгрузки" + СокрлП(нмрдн));
					
					ДокументОбъектСЗ.ДатаСдачиЗадания	= текдн;
					т_знач = Ложь;
					Если ПараметрыОснования.Свойство("ВремяЗапуска" + СокрЛП(нмрдн),т_знач) Тогда
						ДокументОбъектСЗ.ВремяСдачиЗадания  = т_знач;
					КонецЕсли;
					ДокументОбъектСЗ.ДатаНачалаУпаковки = текдн;
					т_знач = Ложь;
					Если ПараметрыОснования.Свойство("ВремяНачалаУпаковки" + СокрЛП(нмрдн),т_знач) Тогда
						ДокументОбъектСЗ.ВремяНачалаУпаковки  = т_знач;
					КонецЕсли;
					ДокументОбъектСЗ.ДатаОкончанияДовыписки = текдн;
					т_знач = Ложь;
					Если ПараметрыОснования.Свойство("ВремОкончанияДовыписки" + СокрЛП(нмрдн),т_знач) Тогда
						ДокументОбъектСЗ.ВремяОкончанияДовыписки  = т_знач;
					КонецЕсли;
					ДокументОбъектСЗ.ДатаОтгрузки = текдн;
					т_знач = Ложь;
					Если ПараметрыОснования.Свойство("ВремОтгрузки" + СокрЛП(нмрдн),т_знач) Тогда
						ДокументОбъектСЗ.ВремяОтгрузки  = т_знач;
					КонецЕсли;
					
				Иначе
					
					ДокументОбъектСЗ.ДатаОтгрузки = Дата(Год(ДатаДоставки), Месяц(ДатаДоставки), День(ДатаДоставки), 0, 0, 0) ;
					ДокументОбъектСЗ.ВремяОтгрузки  = Дата(1, 1, 1, Час(ДатаДоставки), Минута(ДатаДоставки), Секунда(ДатаДоставки)) ;
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ДокументОбъектСЗ, стрсз);
				
				Отбор = Новый Структура();  
				Отбор.Вставить("Организация",стрсз.Организация);
				Отбор.Вставить("Склад",стрсз.Склад);
				Отбор.Вставить("Филиал",стрсз.Филиал);
				Отбор.Вставить("Ответственный",стрсз.Ответственный);
				Отбор.Вставить("МаршрутДоставкиГруппа",стрсз.МаршрутДоставкиГруппа);
				
				
				СтрокиРе = резервы_тмц_выборка_Ре.НайтиСтроки(Отбор);
				Если СтрокиРе.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого стрре из СтрокиРе цикл
					
					// начало заполнения табличной части СЗ , создание реализации
					
					ДокументОбъектРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
					ДокументОбъектРеализация.Дата = МоментВремениЗапроса;
					ЗаполнитьЗначенияСвойств(ДокументОбъектРеализация, стрре);
					ДокументОбъектРеализация.ДатаДоставки = Дата(Год(ДокументОбъектСЗ.ДатаОтгрузки), Месяц(ДокументОбъектСЗ.ДатаОтгрузки), День(ДокументОбъектСЗ.ДатаОтгрузки), Час(ДокументОбъектСЗ.ВремяОтгрузки), Минута(ДокументОбъектСЗ.ВремяОтгрузки), Секунда(ДокументОбъектСЗ.ВремяОтгрузки)) ;
					ДокументОбъектРеализация.ТипДоставки = Вход_ТипДоставки;
					
					Если ДокументОбъектРеализация.КурсВзаиморасчетов = 0 тогда
						ДокументОбъектРеализация.КурсВзаиморасчетов = 1;
					КонецЕсли;
					Если ДокументОбъектРеализация.КратностьВзаиморасчетов = 0 тогда
						ДокументОбъектРеализация.КратностьВзаиморасчетов = 1;
					КонецЕсли;
					
					Отбор2 = Новый Структура();  
					
					Отбор2.Вставить("Организация",стрсз.Организация);
					Отбор2.Вставить("Склад",стрсз.Склад);
					Отбор2.Вставить("Филиал",стрсз.Филиал);
					Отбор2.Вставить("Ответственный",стрсз.Ответственный);
					
					Отбор2.Вставить("МаршрутДоставкиГруппа",стрсз.МаршрутДоставкиГруппа);
					Отбор2.Вставить("МаршрутДоставки",стрре.МаршрутДоставки);
					
					Отбор2.Вставить("ВалютаДокумента",стрре.ВалютаДокумента);
					Отбор2.Вставить("КратностьВзаиморасчетов",стрре.КратностьВзаиморасчетов);
					Отбор2.Вставить("КурсВзаиморасчетов",стрре.КурсВзаиморасчетов);
					
					Отбор2.Вставить("УчитыватьНДС",стрре.УчитыватьНДС);
					Отбор2.Вставить("СуммаВключаетНДС",стрре.СуммаВключаетНДС);
					Отбор2.Вставить("ТипЦен",стрре.ТипЦен);
					Отбор2.Вставить("ДоговорКонтрагента",стрре.ДоговорКонтрагента);
					Отбор2.Вставить("ТорговаяТочка",стрре.ТорговаяТочка);
					Отбор2.Вставить("Контрагент",стрре.Контрагент);
					Отбор2.Вставить("БанковскийСчет",стрре.БанковскийСчет);
					
					СтрокиРе2 = резервы_тмц_выборка.НайтиСтроки(Отбор2);
					Если СтрокиРе2.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					мЗаявки = Новый Массив;
					
					КлючСвязи = 0;
					
					Для каждого стрре2 из СтрокиРе2 цикл
						КлючСвязи = КлючСвязи + 1;
						
						мЗаявки.Добавить(стрре2.СтрокаЗаявки);
						
						НоваяСтрока = ДокументОбъектРеализация.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, стрре2);
						НоваяСтрока.КлючСвязи = КлючСвязи;
						
						
						НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;// - НоваяСтрока.Количество * НоваяСтрока.Цена * НоваяСтрока.ПроцентСкидкиНаценки / 100;

						Если ОкруглениеДо10Рублей Тогда 
							НоваяСтрока.Сумма = Окр(НоваяСтрока.Сумма, -1);
							//Если ЗначениеЗаполнено(ДокументОбъектРеализация.ОбщаяСкидка) Тогда 
							//	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ДокументОбъектРеализация, ПараметрыСеанса_ТекущийПользователь, Ложь, Истина, Истина, Ложь, "Товары");
							//Иначе
							//	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ДокументОбъектРеализация, ПараметрыСеанса_ТекущийПользователь, Ложь, Истина, Ложь, Ложь, "Товары");
							//КонецЕсли;
						ИначеЕсли Не РежимОкругленияПользователя=0 Тогда  	
							НоваяСтрока.Сумма = Окр(НоваяСтрока.Сумма, РежимОкругленияПользователя);
							//Если ЗначениеЗаполнено(ДокументОбъектРеализация.ОбщаяСкидка) Тогда 
							//	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ДокументОбъектРеализация, ПараметрыСеанса_ТекущийПользователь, Ложь, Истина, Истина, Ложь, "Товары");
							//Иначе
							//	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ДокументОбъектРеализация, ПараметрыСеанса_ТекущийПользователь, Ложь, Истина, Ложь, Ложь, "Товары");
							//КонецЕсли;
						КонецЕсли;
						
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокументОбъектРеализация);
						
					КонецЦикла;
					
					Если мЗаявки.Количество() > 0 тогда
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ИдентификаторыСтрокЗаявок.Заявка,
						|	ИдентификаторыСтрокЗаявок.ПоследняяКорректировка,
						|	ВЫБОР
						|		КОГДА ИдентификаторыСтрокЗаявок.ПоследняяКорректировка = ЗНАЧЕНИЕ(Документ.КорректировкаЗаявкиПокупателя.ПустаяСсылка)
						|			ТОГДА ИдентификаторыСтрокЗаявок.Заявка
						|		КОГДА ИдентификаторыСтрокЗаявок.ПоследняяКорректировка ЕСТЬ NULL
						|			ТОГДА ИдентификаторыСтрокЗаявок.Заявка
						|		ИНАЧЕ ИдентификаторыСтрокЗаявок.ПоследняяКорректировка
						|	КОНЕЦ КАК Донор
						|ИЗ
						|	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
						|ГДЕ
						|	ИдентификаторыСтрокЗаявок.Ссылка В(&СтрокаЗаявки)";

						Запрос.УстановитьПараметр("СтрокаЗаявки", мЗаявки);
						Доноры = Запрос.Выполнить().Выгрузить();
						
						Для каждого лД из Доноры цикл
							
							сЦылкаНаДок = лД.Донор;
							
						вид_Донора = "ЗаявкаПокупателя";
						Если ТипЗнч(сЦылкаНаДок) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда
							вид_Донора = "КорректировкаЗаявкиПокупателя";
						КонецЕсли;
						
						Запрос = Новый Запрос;
						Запрос.Текст =
						 "ВЫБРАТЬ
						 |	КорректировкаЗаявкиПокупателяУслуги.Ссылка,
						 |	КорректировкаЗаявкиПокупателяУслуги.НомерСтроки,
						 |	КорректировкаЗаявкиПокупателяУслуги.Номенклатура,
						 |	КорректировкаЗаявкиПокупателяУслуги.Содержание,
						 |	КорректировкаЗаявкиПокупателяУслуги.Количество,
						 |	КорректировкаЗаявкиПокупателяУслуги.Цена,
						 |	КорректировкаЗаявкиПокупателяУслуги.Сумма,
						 |	КорректировкаЗаявкиПокупателяУслуги.СтавкаНДС,
						 |	КорректировкаЗаявкиПокупателяУслуги.СуммаНДС,
						 |	КорректировкаЗаявкиПокупателяУслуги.СтрокаЗаявки
						 |ИЗ
						 |	Документ." + вид_Донора + ".Услуги КАК КорректировкаЗаявкиПокупателяУслуги
						 |ГДЕ
						 |	КорректировкаЗаявкиПокупателяУслуги.Ссылка = &Док
						 |	И КорректировкаЗаявкиПокупателяУслуги.Номенклатура.Услуга = Истина";
						Запрос.УстановитьПараметр("Док",сЦылкаНаДок);
						Услуги = Запрос.Выполнить().Выгрузить();
						
						Если Услуги.Количество() > 0  тогда
							
							Для каждого струслуги из услуги цикл
								
								КлючСвязи = КлючСвязи + 1;
								
								НоваяСтрока = ДокументОбъектРеализация.Услуги.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, струслуги);
								//НоваяСтрока.КлючСвязи = КлючСвязи;
								
							КонецЦикла;
							
						КонецЕсли;
						
						КонецЦикла;
						
					КонецЕсли;
					
					// запишем РТУ
					ДокументОбъектРеализация.Записать(РежимЗаписиДокумента.Запись);
					ДокументСсылкаРеализация = ДокументОбъектРеализация.Ссылка;
					
					ДобавитьВЛог("inf : сформировано : " + СокрлП(ДокументСсылкаРеализация));
					ОпубликоватьЛог();
					
					//Если ПравилаИгры.это_фон тогда
						РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ФормированиеДокумента,Вход_Основание,ДокументСсылкаРеализация,  ""   ));	
					//КонецЕсли;
					
					
					нстррт = сзРТ.Добавить();
					нстррт.Документ = ДокументСсылкаРеализация.Ссылка; 
					
					// добавление строки СЗ
					Если ЗначениеЗаполнено(ДокументСсылкаРеализация) тогда
						лстр = ДокументОбъектСЗ.Покупатели.Добавить();
						лстр.ТорговаяТочка = стрре.ТорговаяТочка;
						лстр.Регион = ОбщегоНазначения.ПолучитьЗначениеРеквизита(стрре.ТорговаяТочка,"Регион");
						лстр.Реализация = ДокументСсылкаРеализация;
						лстр.ОрганизацияОплаты = ОбщегоНазначения.ПолучитьЗначениеРеквизита(стрре.ДоговорКонтрагента,"Организация");
					Иначе
						
						РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Ошибка,Вход_Основание,ДокументСсылкаРеализация,  "ошибка добавления с тч СЗ"   ));							
						
						ДобавитьВЛог("err: ошибка формирования СЗ. ДокументСсылкаРеализация не сформирован");
						ОпубликоватьЛог();
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
				
				// запись СЗ, деактивация договоров, окончание транзакции
				ДокументОбъектСЗ.Записать(РежимЗаписиДокумента.Запись);
				ДобавитьВЛог("inf : Служебное задание успешно сформировано : " + СокрлП(ДокументОбъектСЗ.Ссылка));
				ОпубликоватьЛог();
				
				нстрсз = сзСЗ.Добавить();
				нстрсз.Документ = ДокументОбъектСЗ.Ссылка; 
				
				Если ЗначениеЗаполнено(Вход_Основание) тогда
					Если ПравилаИгры.это_фон тогда
						
						НаборЗаписи  = РегистрыСведений.ДатыФормированияСлужебныхЗаданий.СоздатьНаборЗаписей();
						
						НаборЗаписи.Отбор.ПараметрФормированияСЗ.Установить(Вход_Основание);
						НаборЗаписи.Очистить();
						
						Наб = НаборЗаписи.Добавить();
						Наб.ПараметрФормированияСЗ = Вход_Основание;
						Наб.ДатаФормирования = ПравилаИгры.ТекущаяДата;
						
						НаборЗаписи.Записать();
						НаборЗаписи.Очистить();
						
					КонецЕсли;
				КонецЕсли;
				
				//Если ПравилаИгры.это_фон тогда
				
				ЗафиксироватьТранзакцию();
				Записано = Истина;
				
				РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ФормированиеДокумента,Вход_Основание,ДокументОбъектСЗ.Ссылка,  ""   ));					//КонецЕсли;
				
			Исключение
				
				РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "отмена транзакции"   ));	
				
				ДобавитьВЛог("err: ошибка при записи объекта : " + ОписаниеОшибки());
				ОпубликоватьЛог();
				ОтменитьТранзакцию();
			КонецПопытки;
			
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	ПравилаИгры.Вставить("ТабличноеПоле13", сзСЗ);
	ПравилаИгры.Вставить("ТабличноеПоле14", сзРТ);
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ФормированиеДокумента,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "окончание формирования СЗ"   ));					//КонецЕсли;
	
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - формирование заданий окончено. старт проведения РН");
	ОпубликоватьЛог();
	
	Для каждого стризрн из сзРТ цикл
		лРн = стризрн.Документ;
		оРн = лРн.ПолучитьОбъект();
		
		Попытка 
			оРн.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДобавитьВЛог("err : ошибка проведения : " + СокрлП(лРн) + " Описание: " + ОписаниеОшибки());
			ОпубликоватьЛог();
			
			зап = РегистрыСведений.ОтложенноеПроведениеПоТоварнымРегистрам.СоздатьМенеджерЗаписи();
			зап.СсылкаНаДокумент = лРн;
			зап.ДатаДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(лРн,"Дата");
			зап.Порядок = 7;
			зап.Записать(Истина);
			
			ДобавитьВЛог("inf : добавлено в отложенное проведение : " + СокрлП(лРн));
			ОпубликоватьЛог();
			
			//Если ПравилаИгры.это_фон тогда
				РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Вход_Основание,лРн,  "ошибка проведения"   ));	
			//КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ФормированиеДокумента,Вход_Основание,Документы.РеализацияТоваровУслуг.ПустаяСсылка(),  "окончание формирования СЗ"   ));		
	
	ДеАктивироватьДоговоры();

	Возврат ПравилаИгры;	
КонецФункции
Функция АктивироватьДоговоры() экспорт
	
	Отказ = Ложь;
	
	Если ПравилаИгры.ТабличноеПоле5.Количество() > 0 тогда
		
		ИсторияСЗ = ПравилаИгры.ИсторияСЗ;
		Если ИсторияСЗ.Колонки.Количество() = 0 тогда
			ИсторияСЗ.Колонки.Добавить("ДоговорКонтрагента");
		КонецЕсли;
		
		НаборЗаписи  = РегистрыСведений.ИсторияФормированияСлужебныхЗаданий.СоздатьНаборЗаписей();
		Для каждого ДКА из ПравилаИгры.ТабличноеПоле5 цикл
			
			нстрс = ИсторияСЗ.Добавить();
			нстрс.ДоговорКонтрагента = ДКА.ДоговорКонтрагента;
			
			НаборЗаписи.Отбор.ДоговорКонтрагента.Установить(ДКА.ДоговорКонтрагента);
			НаборЗаписи.Отбор.Активно.Установить(Истина);
			НаборЗаписи.Прочитать();
			НаборЗаписи.Очистить();
			
			Запись = НаборЗаписи.Добавить();
			Запись.Активно = Истина;
			Запись.ДоговорКонтрагента = ДКА.ДоговорКонтрагента;
			Запись.Сумма = 0;//ДКА.СуммаПлан;
			Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Запись.Склад = Справочники.Склады.пустаяСсылка();//ДКА.Склад;
			Запись.МаршрутДоставки = Справочники.МаршрутыДоставки.ПустаяСсылка();//ДКА.МаршрутДоставки;
			Запись.ДтВрм_Расчета = ПравилаИгры.РасчетнаяДата;
			
			НаборЗаписи.Записать();
		КонецЦикла;
		
		ПравилаИгры.Вставить("ИсторияСЗ",ИсторияСЗ);
		
		ДобавитьВЛог("inf : активация договоров КА выполнена ");
		ОпубликоватьЛог();
		
	КонецЕсли;
	
	Возврат Отказ;
КонецФункции
Функция ДеАктивироватьДоговоры() экспорт
	
	Отказ = Ложь;
	
	// сделать в одной транзакции
	
	ИсторияСЗ = ПравилаИгры.ИсторияСЗ;
	Если ИсторияСЗ.Количество() < 1 тогда
		Возврат Отказ;
	КонецЕсли;
	
	НаборЗаписи  = РегистрыСведений.ИсторияФормированияСлужебныхЗаданий.СоздатьНаборЗаписей();
	Для каждого ДКА из ИсторияСЗ цикл
		
		НаборЗаписи.Отбор.ДоговорКонтрагента.Установить(ДКА.ДоговорКонтрагента);
		НаборЗаписи.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
		НаборЗаписи.Прочитать();
		НаборЗаписи.Очистить();
		НаборЗаписи.Записать();
	КонецЦикла;
	                                         
	ПравилаИгры.Вставить("ТабличноеПоле10", Новый ТаблицаЗначений);
	
	ДобавитьВЛог("inf : деактивация договоров выполнена");
	ОпубликоватьЛог();
	
	Возврат Отказ;
КонецФункции

// запросы
Функция Запрос_ПолучитьСписокСкладов(пар_ИмяФлага)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады." + пар_ИмяФлага + " = ИСТИНА
	|	И Склады.ПометкаУдаления = ЛОЖЬ
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склады.Наименование";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция Запрос_ПолучитьСписокМаршрутовДоставки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутыДоставки.Ссылка КАК ПунктДоставки,
		|" + ?(ПравилаИгры.ИспользоватьРеквизит_флОтгружатьЮрФизЛицам,"МаршрутыДоставки.флОтгружатьЮрФизЛицам","Ложь") + " КАК флОтгружатьЮрФизЛицам
		|ИЗ
		|	Справочник.МаршрутыДоставки КАК МаршрутыДоставки
		|ГДЕ
		|	МаршрутыДоставки.Ссылка В ИЕРАРХИИ (&СсылкаНаВход_МаршрутДоставки)
		|	И МаршрутыДоставки.ПометкаУдаления = Ложь
		|	И МаршрутыДоставки.ЭтоГруппа = Ложь";
	Запрос.УстановитьПараметр("СсылкаНаВход_МаршрутДоставки",Вход_МаршрутДоставки);	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция Запрос_ПолучитьСписокДоговоровПродажиПоКА()
	
	// условия отбора по КА и ПД должны быть одинаковы!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	
	|	ДоговорыКонтрагентов.Владелец.ОсновнаяТорговаяТочка.МаршрутДоставки КАК МаршрутДоставкиТТ,
	|	ДоговорыКонтрагентов.Владелец.Код КАК КонтрагентКод,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Владелец.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ДоговорыКонтрагентов.Владелец.РежРаботы_вВых КАК вВыхНеРаботает,
	|	ДоговорыКонтрагентов.Владелец.ДополнительнаяДоставка КАК ДопДоставка,
	|	ДоговорыКонтрагентов.ДоговорПриостановлен,
	|	ДоговорыКонтрагентов.СлужебныйДоговор,
	//  на данный момент КА к ТТ один в один, поэтому пока так:
	//|	ДоговорыКонтрагентов.Владелец.ОсновнаяТорговаяТочка КАК ТТ,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.Код КАК ДоговорКонтрагентаКод,
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(_ДляПереносаДанных.Строка77,&ПустаяСтр) КАК УИД77
	
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений._ДляПереносаДанных КАК _ДляПереносаДанных
	|   ПО ДоговорыКонтрагентов.Ссылка = _ДляПереносаДанных.Объект 
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ПометкаУдаления = Ложь
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.ДоговорПриостановлен = ЛОЖЬ
	|	И (НЕ ДоговорыКонтрагентов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	
	|	И (НЕ ЕСТЬNULL(_ДляПереносаДанных.Строка77,&ПустаяСтр) = &ПустаяСтр)
	
	
	|" + ?(НЕ ПравилаИгры.флОтгружатьВсем," И ДоговорыКонтрагентов.Владелец.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) ","") + "
	|" + ?(Вход_флРежРаботы_вВых," И ДоговорыКонтрагентов.Владелец.РежРаботы_вВых = Ложь ","") + "
	|" + ?(Вход_флДополнительнаяДоставка," И ДоговорыКонтрагентов.Владелец.ДополнительнаяДоставка = Истина ","") + "
	
	|	И ( ЕСТЬNULL(ДоговорыКонтрагентов.Владелец.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) = ДАТАВРЕМЯ(1,1,1,0,0,0) ИЛИ ЕСТЬNULL(ДоговорыКонтрагентов.Владелец.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) > &СегодняшняяДт )
	|	И ( ЕСТЬNULL(ДоговорыКонтрагентов.Владелец.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) = ДАТАВРЕМЯ(1,1,1,0,0,0) ИЛИ ЕСТЬNULL(ДоговорыКонтрагентов.Владелец.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) > &СегодняшняяДт )
	|	И ( ЕСТЬNULL(ДоговорыКонтрагентов.Владелец.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента.ДоговорПриостановлен, Ложь) = Ложь )	
	
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Владелец.ОсновнаяТорговаяТочка.МаршрутДоставки.Наименование,
	|	ДоговорыКонтрагентов.Владелец.Наименование
	|";

	Запрос.УстановитьПараметр("ПустаяСтр","");
	Запрос.УстановитьПараметр("СегодняшняяДт",НачалоДня(ПравилаИгры.РасчетнаяДата));
	
	Запрос.УстановитьПараметр("Владелец",Вход_КА);
	Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КОнецФункции
Функция Запрос_ПолучитьСписокДоговоровПродажиПоПД()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ТТ.Владелец КАК Контрагент
	//|ПОМЕСТИТЬ ВладельцыДоговоровПодходящиеПоНаправлениюДоставки
	//|ИЗ
	//|	Справочник.ТорговыеТочки КАК ТТ
	//|ГДЕ
	//|	ТТ.МаршрутДоставки В(&СпсПД)
	//|" + ?(НЕ ПравилаИгры.флОтгружатьВсем," И ТТ.Владелец.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) ","") + "
	//|" + ?(Вход_флРежРаботы_вВых," И ТТ.Владелец.РежРаботы_вВых = Ложь ","") + "
	//|" + ?(Вход_флДополнительнаяДоставка," И ТТ.Владелец.ДополнительнаяДоставка = Истина ","") + "
	//
	//    // 1с7 :
	//	//тмп_Покупатель = ТекДоговор.Владелец;
	//	//Если (тмп_Покупатель.Блокировка_Отгрузок_Дата <= локТекущаяДата) и (ПустоеЗначение(тмп_Покупатель.Блокировка_Отгрузок_Дата) = 0) Тогда // Если тмп_Покупатель.флРаботаПриостановлена = 1 Тогда
	//	//	Если флВыводСообщений = 1 Тогда
	//	//		Сообщить("Удален покупатель "+тмп_Покупатель+", так как для него ""отгрузки приостановлены"" с "+тмп_Покупатель.Блокировка_Отгрузок_Дата+" !", "!");
	//	//	КонецЕсли;
	//	//	УдалитьПокупателя(ТекДоговор);
	//	//	Продолжить;
	//	//КонецЕсли;
	//
	//|	И ( ЕСТЬNULL(ТТ.Владелец.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) = ДАТАВРЕМЯ(1,1,1,0,0,0) ИЛИ ЕСТЬNULL(ТТ.Владелец.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) > &СегодняшняяДт )
	//
	//	//Сообщить("Удален покупатель "+тмп_Покупатель+", так как для его Головного контрагента ""отгрузки приостановлены"" с " + тмпДатаБлокировок + " !", "!");
	//	
	//|	И ( ЕСТЬNULL(ТТ.Владелец.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) = ДАТАВРЕМЯ(1,1,1,0,0,0) ИЛИ ЕСТЬNULL(ТТ.Владелец.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) > &СегодняшняяДт )
	//
	//	//Если тмп_Покупатель_ДоговорВзаиморасчетов.флРаботаПриостановлена = 1 Тогда 
	//	
	//|	И ( ЕСТЬNULL(ТТ.Владелец.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента.ДоговорПриостановлен, Ложь) = Ложь )	
	//
	//|ОБЪЕДИНИТЬ ВСЕ
	//
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент КАК Контрагент
	//|	РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ТорговаяТочка КАК ТТ,
	//|	СтрокаЗаявки.Заявка.МаршрутДоставки КАК  МаршрутДоставки
	
	//| ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.МаршрутДоставки, СтрокаЗаявки.Заявка.МаршрутДоставки) КАК МаршрутДоставки
	
	
	|ПОМЕСТИТЬ ВладельцыДоговоровПодходящиеПоНаправлениюДоставки
	
	|ИЗ
	|	РегистрНакопления.РезервыТоваров.Остатки(&ДтВрм, СтрокаЗаявки.Заявка.МаршрутДоставки В (&СпсПД) ИЛИ СтрокаЗаявки.ПоследняяКорректировка.МаршрутДоставки В (&СпсПД)    ) КАК РезервыТоваровОстатки                   
	|ГДЕ
	|	ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.МаршрутДоставки, СтрокаЗаявки.Заявка.МаршрутДоставки) В (&СпсПД)
	//|	НЕ РезервыТоваровОстатки.СтрокаЗаявки.Заявка.МаршрутДоставки ЕСТЬ NULL
	//|	И НЕ РезервыТоваровОстатки.СтрокаЗаявки.Заявка.МаршрутДоставки = Значение(Справочник.МаршрутыДоставки.ПустаяСсылка)
	//|   
	|	И ( ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) = ДАТАВРЕМЯ(1,1,1,0,0,0) ИЛИ ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) > &СегодняшняяДт )
	|	И ( ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) = ДАТАВРЕМЯ(1,1,1,0,0,0) ИЛИ ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(1,1,1,0,0,0)) > &СегодняшняяДт )
	|	И ( ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента.ДоговорПриостановлен, Ложь) = Ложь )	
	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец.ОсновнаяТорговаяТочка.МаршрутДоставки КАК МаршрутДоставкиТТ,
	|	ДоговорыКонтрагентов.Владелец.Код КАК КонтрагентКод,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Владелец.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ДоговорыКонтрагентов.Владелец.РежРаботы_вВых КАК вВыхНеРаботает,
	|	ДоговорыКонтрагентов.Владелец.ДополнительнаяДоставка КАК ДопДоставка,
	|	ДоговорыКонтрагентов.ДоговорПриостановлен,
	|	ДоговорыКонтрагентов.СлужебныйДоговор,
	//  на данный момент КА к ТТ один в один, поэтому пока так:
	//|	ДоговорыКонтрагентов.Владелец.ОсновнаяТорговаяТочка КАК ТТ,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.Код КАК ДоговорКонтрагентаКод,
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(_ДляПереносаДанных.Строка77,&ПустаяСтр) КАК УИД77
	
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений._ДляПереносаДанных КАК _ДляПереносаДанных
	|   ПО ДоговорыКонтрагентов.Ссылка = _ДляПереносаДанных.Объект 
	
	|ГДЕ
	
	|	ДоговорыКонтрагентов.Владелец В
	|			(ВЫБРАТЬ
	|				ВладельцыДоговоровПодходящиеПоНаправлениюДоставки.Контрагент
	|			ИЗ
	|				ВладельцыДоговоровПодходящиеПоНаправлениюДоставки)
	|	И ДоговорыКонтрагентов.ПометкаУдаления = Ложь
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	
	    // 1с7 :
		//Если ТекДоговор.флРаботаПриостановлена = 1 Тогда
		//	Если флВыводСообщений = 1 Тогда
		//		Сообщить("Удален покупатель "+ТекДоговор.Владелец+", так как для его договора ""отгрузки приостановлены"" !", "!");
		//	КонецЕсли;
		//	УдалитьПокупателя(ТекДоговор);
		//	Продолжить;
		//КонецЕсли; 
	
	|	И ДоговорыКонтрагентов.ДоговорПриостановлен = ЛОЖЬ
	|	И (НЕ ДоговорыКонтрагентов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	
	|	И (НЕ ЕСТЬNULL(_ДляПереносаДанных.Строка77,&ПустаяСтр) = &ПустаяСтр)
	
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Владелец.ОсновнаяТорговаяТочка.МаршрутДоставки.Наименование,
	|	ДоговорыКонтрагентов.Владелец.Наименование
	
	|";
	
	
	Запрос.УстановитьПараметр("ДтВрм",ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяСтр","");
	Запрос.УстановитьПараметр("СпсПД",ПравилаИгры.ТабличноеПоле4.ВыгрузитьКолонку("ПунктДоставки"));
	Запрос.УстановитьПараметр("ЮрФизЛицо",Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("СегодняшняяДт",НачалоДня(ПравилаИгры.РасчетнаяДата));
	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция Запрос_ПолучитьОстаткиПоРезервамПоФильтру()
	
	сзСклады_Фильтр = ПравилаИгры.ТабличноеПоле1.ВыгрузитьКолонку("Склад");
	сзДоговора_Фильтр = ПравилаИгры.ТабличноеПоле5.ВыгрузитьКолонку("ДоговорКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	сзДоговора_Фильтр.ДоговорКонтрагента
	|ПОМЕСТИТЬ сзДоговора_Фильтр
	|ИЗ
	|	&СпсДог КАК сзДоговора_Фильтр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговораОнЛайн.ДоговорКонтрагента,
	|	ДоговораОнЛайн.Пользователь,
	|	ДоговораОнЛайн.Склад,
	|	ДоговораОнЛайн.МаршрутДоставки
	|ПОМЕСТИТЬ ДоговораВРаботе
	|ИЗ
	|	РегистрСведений.ИсторияФормированияСлужебныхЗаданий КАК ДоговораОнЛайн
	|ГДЕ
	|	ДоговораОнЛайн.Активно = ИСТИНА
	|	И НЕ ДоговораОнЛайн.Пользователь = &Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СклФильтр.ДоговорКонтрагента
	|ПОМЕСТИТЬ ДоговораЗаВычетомОнЛайн
	|ИЗ
	|	сзДоговора_Фильтр КАК СклФильтр
	|ГДЕ
	|	НЕ СклФильтр.ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					ДоговораВРаботе.ДоговорКонтрагента
	|				ИЗ
	|					ДоговораВРаботе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыТоваровОстатки.Склад,
	|	ВЫБОР
	|		КОГДА РезервыТоваровОстатки.Склад = &глСклад_Основной
	|				ИЛИ РезервыТоваровОстатки.Склад = &глСклад_Москва
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоФилиал,
	|	РезервыТоваровОстатки.Склад.Бонусный КАК ЭтоБонусныйСклад,
	|	РезервыТоваровОстатки.Склад.Сувенирный КАК ЭтоСувенирныйСклад,
	|	РезервыТоваровОстатки.Склад.Уценка КАК ЭтоСкладУценки,
	|	1 КАК СчСтрокВсего,
	|	ВЫБОР
	|		КОГДА РезервыТоваровОстатки.Склад.Бонусный = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СчСтрокБонусныйСклад,
	|	ВЫБОР
	|		КОГДА РезервыТоваровОстатки.Склад.Сувенирный = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СчСтрокСувенирныйСклад,
	|	ВЫБОР
	|		КОГДА РезервыТоваровОстатки.Склад.Уценка = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СчСтрокСкладУценки,
	|	&СтатусДокумента КАК СтатусДокумента,
	|	&Ответственный КАК Ответственный,
	|	РезервыТоваровОстатки.СтрокаЗаявки.Заявка КАК Заявка,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Организация, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Организация) КАК Организация,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ТорговаяТочка, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ТорговаяТочка) КАК ТорговаяТочка,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.МаршрутДоставки, ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.МаршрутДоставки, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ТорговаяТочка.МаршрутДоставки)) КАК МаршрутДоставки,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.БанковскийСчет, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.БанковскийСчет) КАК БанковскийСчетОрганизации,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ТипЦен, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ТипЦен) КАК ТипЦен,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ВалютаДокумента, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ВалютаДокумента) КАК ВалютаДокумента,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.КурсВзаиморасчетов, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.КурсВзаиморасчетов) КАК КурсВзаиморасчетов,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.УчитыватьНДС, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.УчитыватьНДС) КАК УчитыватьНДС,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.СуммаВключаетНДС, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.СуммаВключаетНДС) КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Филиал, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Филиал) КАК Филиал,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.БанковскийСчет, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.БанковскийСчет) КАК БанковскийСчет,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.КратностьВзаиморасчетов, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.КратностьВзаиморасчетов) КАК КратностьВзаиморасчетов,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Менеджер, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Менеджер) КАК Менеджер,
	|	РезервыТоваровОстатки.Номенклатура.Артикул КАК Артикул,
	|	РезервыТоваровОстатки.Номенклатура.Изготовитель КАК Изготовитель,
	|	РезервыТоваровОстатки.Номенклатура,
	|	РезервыТоваровОстатки.Качество,
	|	РезервыТоваровОстатки.КоличествоОстаток КАК КоличествоПлан,
	|	РезервыТоваровОстатки.КоличествоОстаток КАК Количество,
	|	РезервыТоваровОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаявкаПокупателяТовары.Коэффициент, 1) КАК Коэффициент,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ЦенаЗакупки, 0) КАК ЦенаЗакупки,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Цена, 0) КАК Цена,
	|	0 КАК Сумма,
	|	ЗаявкаПокупателяТовары.СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	РезервыТоваровОстатки.СтрокаЗаявки,
	|	ЗаявкаПокупателяТовары.КомментарийИзСайта,
	|	РезервыТоваровОстатки.СтрокаЗаявки.IDSite КАК IDSite,
	|	РезервыТоваровОстатки.СтрокаПрихода,
	|	ВЫБОР
	|		КОГДА РезервыТоваровОстатки.Склад = &глСклад_Основной
	|				ИЛИ РезервыТоваровОстатки.Склад = &глСклад_Москва
	|			ТОГДА ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.МаршрутДоставки.МинимальнаяСуммаОтгрузки, ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.МаршрутДоставки.МинимальнаяСуммаОтгрузки, ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ТорговаяТочка.МаршрутДоставки.МинимальнаяСуммаОтгрузки, 0)))
	|		ИНАЧЕ ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.МаршрутДоставки.МинимальнаяСуммаОтгрузкиФилиал, ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.МаршрутДоставки.МинимальнаяСуммаОтгрузкиФилиал, ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ТорговаяТочка.МаршрутДоставки.МинимальнаяСуммаОтгрузкиФилиал, 0)))
	|	КОНЕЦ КАК МаршрутДоставкиМинимальнаяСуммаОтгрузки,
	|	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Цена, 0) * РезервыТоваровОстатки.КоличествоОстаток КАК СуммаПлан,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент)
	|		ИНАЧЕ ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент)
	|	КОНЕЦ КАК Холдинг,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ЦенаЗакупки, 0) = 0
	|			ТОГДА 100
	|		ИНАЧЕ 100 * (РезервыТоваровОстатки.СтрокаЗаявки.Цена / РезервыТоваровОстатки.СтрокаЗаявки.ЦенаЗакупки - 1)
	|	КОНЕЦ КАК ПроцентСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ЦенаЗакупки, 0) = 0
	|					ТОГДА 100
	|				ИНАЧЕ 100 * (РезервыТоваровОстатки.СтрокаЗаявки.Цена / РезервыТоваровОстатки.СтрокаЗаявки.ЦенаЗакупки - 1)
	|			КОНЕЦ < &МинНаценкаВПроцентах
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Аларм
	|ПОМЕСТИТЬ НайденныеРезервы
	|ИЗ
	|	РегистрНакопления.РезервыТоваров.Остатки(
	|			&ДтВрм,
	|			Склад В (&СпсСкл)
	|				И (СтрокаЗаявки.Заявка.ДоговорКонтрагента В
	|						(ВЫБРАТЬ
	|							ДоговораЗаВычетомОнЛайн.ДоговорКонтрагента
	|						ИЗ
	|							ДоговораЗаВычетомОнЛайн)
	|					ИЛИ СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента В
	|						(ВЫБРАТЬ
	|							ДоговораЗаВычетомОнЛайн.ДоговорКонтрагента
	|						ИЗ
	|							ДоговораЗаВычетомОнЛайн))) КАК РезервыТоваровОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
	|		ПО РезервыТоваровОстатки.СтрокаЗаявки = ЗаявкаПокупателяТовары.СтрокаЗаявки
	|			И РезервыТоваровОстатки.СтрокаЗаявки.IDSite = ЗаявкаПокупателяТовары.IDSite
	|			И РезервыТоваровОстатки.Номенклатура = ЗаявкаПокупателяТовары.Номенклатура
	|ГДЕ
	|	РезервыТоваровОстатки.КоличествоОстаток > 0
	|	И НЕ ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.МаршрутДоставки, ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.МаршрутДоставки, ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ТорговаяТочка.МаршрутДоставки, ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)))) = ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)
	|	И НЕ РезервыТоваровОстатки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Резервы.МаршрутДоставки,
	|	Резервы.Холдинг,
	|	МИНИМУМ(Резервы.МаршрутДоставкиМинимальнаяСуммаОтгрузки) КАК МаршрутДоставкиМинимальнаяСуммаОтгрузки,
	|	СУММА(Резервы.СуммаПлан) КАК СуммаПлан
	|ПОМЕСТИТЬ Отщепенцы
	|ИЗ
	|	НайденныеРезервы КАК Резервы
	|ГДЕ
	|	&флНеУдалятьМинСум = ЛОЖЬ
	|	И Резервы.МаршрутДоставкиМинимальнаяСуммаОтгрузки > 0
	|	И Резервы.ТорговаяТочка.VIP = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	Резервы.МаршрутДоставки,
	|	Резервы.Холдинг
	|
	|ИМЕЮЩИЕ
	|	СУММА(Резервы.СуммаПлан) < МИНИМУМ(Резервы.МаршрутДоставкиМинимальнаяСуммаОтгрузки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Резервы.МаршрутДоставки,
	|	Резервы.Холдинг,
	|	СУММА(Резервы.СчСтрокВсего) КАК СчСтрокВсего,
	|	СУММА(Резервы.СчСтрокБонусныйСклад) КАК СчСтрокБонусныйСклад,
	|	СУММА(Резервы.СчСтрокСувенирныйСклад) КАК СчСтрокСувенирныйСклад
	|ПОМЕСТИТЬ Халявщики
	|ИЗ
	|	НайденныеРезервы КАК Резервы
	|
	|СГРУППИРОВАТЬ ПО
	|	Резервы.МаршрутДоставки,
	|	Резервы.Холдинг
	|
	|ИМЕЮЩИЕ
	|	СУММА(Резервы.СчСтрокБонусныйСклад) + СУММА(Резервы.СчСтрокСувенирныйСклад) = СУММА(Резервы.СчСтрокВсего)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Резервы.ДоговорКонтрагента,
	|	МАКСИМУМ(Резервы.ДоговорКонтрагента.ДопустимаяСуммаЗадолженности) КАК СуммаКредита,
	|	СУММА(Резервы.СуммаПлан) КАК СуммаПлан
	|ПОМЕСТИТЬ ПлановаяОтгрузкаПоПроверяемымДоговорам
	|ИЗ
	|	НайденныеРезервы КАК Резервы
	|ГДЕ
	|	Резервы.ДоговорКонтрагента.НеКонтролироватьЛимит = Ложь
	|	И НЕ Резервы.ДоговорКонтрагента.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные)
	|	И НЕ Резервы.Холдинг В
	|				(ВЫБРАТЬ
	|					Отщепенцы.Холдинг
	|				ИЗ
	|					Отщепенцы
	|		
	|				ОБЪЕДИНИТЬ
	|		
	|				ВЫБРАТЬ
	|					Халявщики.Холдинг
	|				ИЗ
	|					Халявщики)
	|
	|СГРУППИРОВАТЬ ПО
	|	Резервы.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыОстатки.ДоговорКонтрагента КАК Договор,
	|	СУММА(ВзаиморасчетыОстатки.СуммаУпрОстаток) КАК Сумма
	|ПОМЕСТИТЬ СводныйОстПоДоговору1
	|ИЗ
	|	РегистрНакопления.Взаиморасчеты.Остатки(
	|			&ДтВрм,
	|			ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					ПлановаяОтгрузкаПоПроверяемымДоговорам.ДоговорКонтрагента
	|				ИЗ
	|					ПлановаяОтгрузкаПоПроверяемымДоговорам)) КАК ВзаиморасчетыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыОстатки.ДоговорКонтрагента
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ВзаиморасчетыОстатки.СуммаРеглОстаток) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДепозитыКонтрагентовОстатки.ДоговорКонтрагента КАК Договор,
	|	СУММА(ДепозитыКонтрагентовОстатки.СуммаУпрОстаток) КАК Сумма
	|ПОМЕСТИТЬ СводныйОстПоДоговору2
	|ИЗ
	|	РегистрНакопления.ДепозитыКонтрагентов.Остатки(
	|			&ДтВрм,
	|			ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					ПлановаяОтгрузкаПоПроверяемымДоговорам.ДоговорКонтрагента
	|				ИЗ
	|					ПлановаяОтгрузкаПоПроверяемымДоговорам)) КАК ДепозитыКонтрагентовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДепозитыКонтрагентовОстатки.ДоговорКонтрагента
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ДепозитыКонтрагентовОстатки.СуммаУпрОстаток) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ост.Договор,
	|	СУММА(Ост.Сумма) КАК СуммаДолга
	|ПОМЕСТИТЬ СводныйДолгПоДоговору
	|ИЗ
	|	(ВЫБРАТЬ
	|		СводныйОстПоДоговору1.Договор КАК Договор,
	|		СводныйОстПоДоговору1.Сумма КАК Сумма
	|	ИЗ
	|		СводныйОстПоДоговору1 КАК СводныйОстПоДоговору1
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		СводныйОстПоДоговору2.Договор,
	|		СводныйОстПоДоговору2.Сумма
	|	ИЗ
	|		СводныйОстПоДоговору2 КАК СводныйОстПоДоговору2) КАК Ост
	|
	|СГРУППИРОВАТЬ ПО
	|	Ост.Договор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Ост.Сумма) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	План.ДоговорКонтрагента,
	|	План.СуммаКредита,
	|	План.СуммаПлан,
	|	ЕСТЬNULL(Долги.СуммаДолга, 0) КАК СуммаДолга,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Долги.СуммаДолга, 0) + План.СуммаПлан * &Коэффициент > План.СуммаКредита
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Банкрот
	|ПОМЕСТИТЬ СверкаПоДебиторке
	|ИЗ
	|	ПлановаяОтгрузкаПоПроверяемымДоговорам КАК План
	|		ЛЕВОЕ СОЕДИНЕНИЕ СводныйДолгПоДоговору КАК Долги
	|		ПО План.ДоговорКонтрагента = Долги.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СверкаПоДебиторке.ДоговорКонтрагента,
	|	СверкаПоДебиторке.СуммаКредита,
	|	СверкаПоДебиторке.СуммаПлан,
	|	СверкаПоДебиторке.СуммаДолга,
	|	СверкаПоДебиторке.Банкрот
	|ПОМЕСТИТЬ Нищеброды
	|ИЗ
	|	СверкаПоДебиторке КАК СверкаПоДебиторке
	|ГДЕ
	|	СверкаПоДебиторке.Банкрот = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СверкаПоДебиторке.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговораВРаботе.Пользователь,
	|	ДоговораВРаботе.Склад,
	|	ДоговораВРаботе.МаршрутДоставки,
	|	ДоговораВРаботе.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ДоговораВРаботе.ДоговорКонтрагента
	|ИЗ
	|	ДоговораВРаботе КАК ДоговораВРаботе
	|ГДЕ
	|	ДоговораВРаботе.ДоговорКонтрагента В
	|			(ВЫБРАТЬ
	|				сзДоговора_Фильтр.ДоговорКонтрагента
	|			ИЗ
	|				сзДоговора_Фильтр)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Резервы.Склад,
	|	Резервы.ЭтоФилиал,
	|	Резервы.ЭтоБонусныйСклад,
	|	Резервы.ЭтоСувенирныйСклад,
	|	Резервы.ЭтоСкладУценки,
	|	Резервы.СчСтрокВсего,
	|	Резервы.СчСтрокБонусныйСклад,
	|	Резервы.СчСтрокСувенирныйСклад,
	|	Резервы.СчСтрокСкладУценки,
	|	Резервы.СтатусДокумента,
	|	Резервы.Ответственный,
	|	Резервы.Заявка,
	|	Резервы.Контрагент,
	|	Резервы.ДоговорКонтрагента,
	|	Резервы.Организация,
	|	Резервы.ТорговаяТочка,
	|	Резервы.МаршрутДоставки,
	|	ВЫБОР
	|		КОГДА НЕ &ЗаданыйМаршрут = ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)
	|			ТОГДА &ЗаданыйМаршрут
	|		ИНАЧЕ Резервы.МаршрутДоставки
	|	КОНЕЦ КАК МаршрутДоставкиГруппа,
	|	Резервы.БанковскийСчетОрганизации,
	|	Резервы.ТипЦен,
	|	Резервы.ВалютаДокумента,
	|	Резервы.КурсВзаиморасчетов,
	|	Резервы.УчитыватьНДС,
	|	Резервы.СуммаВключаетНДС,
	|	Резервы.Филиал,
	|	Резервы.БанковскийСчет,
	|	Резервы.КратностьВзаиморасчетов,
	|	Резервы.Менеджер,
	|	Резервы.Артикул,
	|	Резервы.Изготовитель,
	|	Резервы.Номенклатура,
	|	Резервы.Качество,
	|	Резервы.КоличествоПлан,
	|	Резервы.Количество,
	|	Резервы.ЕдиницаИзмерения,
	|	Резервы.Коэффициент,
	|	Резервы.ЦенаЗакупки,
	|	Резервы.Цена,
	|	Резервы.Сумма,
	|	Резервы.СтавкаНДС,
	|	Резервы.СуммаНДС,
	|	Резервы.СтрокаЗаявки,
	|	Резервы.КомментарийИзСайта,
	|	Резервы.IDSite,
	|	Резервы.СтрокаПрихода,
	|	Резервы.МаршрутДоставкиМинимальнаяСуммаОтгрузки,
	|	Резервы.СуммаПлан,
	|	Резервы.Холдинг,
	|	Резервы.ПроцентСкидкиНаценки,
	|	Резервы.Аларм,
	|	ЕСТЬNULL(Нищеброды.Банкрот, ЛОЖЬ) КАК Банкрот,
	|	ВЫБОР
	|		КОГДА Резервы.МаршрутДоставки.Отгружать_безКонтроляДолга = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &РазрешитьАкцепт = ИСТИНА
	|						И (Резервы.ЭтоБонусныйСклад = ИСТИНА
	|							ИЛИ Резервы.ЭтоСувенирныйСклад = ИСТИНА
	|							ИЛИ Резервы.ЭтоСкладУценки = ИСТИНА
	|							ИЛИ Резервы.ЭтоФилиал = ИСТИНА)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(Нищеброды.Банкрот, ЛОЖЬ) = ЛОЖЬ
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Провести,
	|	1 КАК Сч
	|ИЗ
	|	НайденныеРезервы КАК Резервы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Нищеброды КАК Нищеброды
	|		ПО Резервы.ДоговорКонтрагента = Нищеброды.ДоговорКонтрагента
	|ГДЕ
	|	НЕ Резервы.Холдинг В
	|				(ВЫБРАТЬ
	|					Отщепенцы.Холдинг
	|				ИЗ
	|					Отщепенцы
	|		
	|				ОБЪЕДИНИТЬ
	|		
	|				ВЫБРАТЬ
	|					Халявщики.Холдинг
	|				ИЗ
	|					Халявщики)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Резервы.Склад,
	|	Резервы.Контрагент,
	|	Резервы.ДоговорКонтрагента,
	|	Резервы.ТорговаяТочка,
	|	Резервы.Заявка,
	|	Резервы.Изготовитель,
	|	Резервы.Артикул,
	|	Резервы.Номенклатура,
	|	Резервы.IDSite
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Нищеброды.ДоговорКонтрагента.Владелец.ОсновнаяТорговаяТочка.МаршрутДоставки КАК МаршрутДоставки,
	|	Нищеброды.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	Нищеброды.ДоговорКонтрагента,
	|	Нищеброды.СуммаКредита,
	|	Нищеброды.СуммаПлан,
	|	Нищеброды.СуммаДолга,
	|	Нищеброды.Банкрот КАК ПревышенЛимит
	|ИЗ
	|	Нищеброды КАК Нищеброды
	|
	|УПОРЯДОЧИТЬ ПО
	|	Нищеброды.ДоговорКонтрагента.Владелец.ОсновнаяТорговаяТочка.МаршрутДоставки,
	|	Нищеброды.ДоговорКонтрагента.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отщепенцы.МаршрутДоставки,
	|	Отщепенцы.Холдинг,
	|	Отщепенцы.МаршрутДоставкиМинимальнаяСуммаОтгрузки,
	|	Отщепенцы.СуммаПлан
	|ИЗ
	|	Отщепенцы КАК Отщепенцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	История.ДоговорКонтрагента,
	|	СУММА(История.СуммаПлан) КАК СуммаПлан,
	|	МАКСИМУМ(История.Склад) КАК Склад,
	|	МАКСИМУМ(История.МаршрутДоставки) КАК МаршрутДоставки
	|ИЗ
	|	НайденныеРезервы КАК История
	|
	|СГРУППИРОВАТЬ ПО
	|	История.ДоговорКонтрагента";
	 
	 Запрос.УстановитьПараметр("Ответственный", ПравилаИгры.Ответственный);
	 Запрос.УстановитьПараметр("ДтВрм",ПравилаИгры.РасчетнаяДата);
	 Запрос.УстановитьПараметр("СпсСкл",сзСклады_Фильтр);
	 Запрос.УстановитьПараметр("СпсДог",ПравилаИгры.ТабличноеПоле5);//сзДоговора_Фильтр);
	 Запрос.УстановитьПараметр("СтатусДокумента",Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка);
	 Запрос.УстановитьПараметр("глСклад_Основной",ПравилаИгры.глСклад_Основной);
	 Запрос.УстановитьПараметр("глСклад_Москва",ПравилаИгры.глСклад_Москва);
	 Запрос.УстановитьПараметр("флНеУдалятьМинСум",Вход_флНеУдалятьМинСум);
	 Запрос.УстановитьПараметр("Коэффициент", (100 - Вход_ПроцентОтПланРеалДляСниженияДолгаДляКонтроляБезнальныхДоговоров)/100);
	 Запрос.УстановитьПараметр("РазрешитьАкцепт",НЕ Вход_ЗапретитьОтгрузкуДолжникамСоСкладаФилиалаСувБонУц);
	 Запрос.УстановитьПараметр("МинНаценкаВПроцентах",Вход_МинимальныйПроцентНаценки);
	 Запрос.УстановитьПараметр("ЗаданыйМаршрут",Вход_МаршрутДоставки);
	 
	Если ПравилаИгры.это_фон тогда
		//ДобавитьВЛог(Запрос.Текст);
		//ОпубликоватьЛог();
	Иначе
		Если СтрНайти(ПараметрыСеанса.ТекущийПользователь.Наименование,"Пушкин") > 0 тогда
			Сообщить(Запрос.Текст);
		КонецЕсли;
	КонецЕсли;
	
	//#Если Клиент Тогда
	//#Иначе
	//#КонецЕсли	
	 
	 Возврат Запрос.ВыполнитьПакет();
	
КонецФункции
Функция Запрос_ПолучитьСписокАктуальныхЗаданийНаФормированиеСЗ()
	
	МоментВремени = ПравилаИгры.ТекущаяДата;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ  *
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Ссылка КАК Задание_Ссылка,
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Склад КАК Задание_Склад,
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.МаршрутДоставки КАК Задание_МаршрутДоставки,
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Водитель КАК Задание_Водитель,
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ТипДоставки КАК Задание_ТипДоставки,
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ТипДоставки КАК Задание_флДополнительнаяДоставка
	//|ПОМЕСТИТЬ АктуальныеЗадания
	|ИЗ
	|	РегистрСведений.ДатыФормированияСлужебныхЗаданий КАК ДатыФормированияСлужебныхЗаданий
	
	|ГДЕ
	//  список параметров берем из регистра, куда пишутся строки при записи/перезаписи соответствющего элемента справочника,
	//  т.е. регистр содержит список ссылок на все существующие задания в привязке к дате обработки
	//  в случае, если формирования СЗ по этому заданию ранее не осущетсвлялось, дата будет пустой 1,1,1,0,0,0
	
	//  проверим, подходят ли параметры по дате/времени
	
	//  подходит ли по дню недели
	|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели" + СокрЛП(ДеньНедели(МоментВремени)) + " = ИСТИНА
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели1 = ИСТИНА
	
	//  чтобы запуск состоялся не раньше времени, указанного в спр.параметры запуска
	|	И &ДтТек >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска" + СокрЛП(ДеньНедели(МоментВремени)) + ", МИНУТА))
	//|	И &ДтТек >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска1, МИНУТА))
	
	//  чтобы с момента последнего успешного запуска/обработки задания прошло не менее, например, 30ти минут
	|	И РАЗНОСТЬДАТ(ДатыФормированияСлужебныхЗаданий.ДатаФормирования, &ДтТек, МИНУТА) > ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Интервал
	|	И ДатыФормированияСлужебныхЗаданий.ДатаФормирования < &ДтТек
	
	//  чтобы запуск состоялся не позже времени, указанного в спр.параметры запуска
	|	И &ДтТек <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки" + СокрЛП(ДеньНедели(МоментВремени)) + ", МИНУТА))
	
	//1с7:
	// проверка на текущее время - глупо создавать документ, если время отгрузки уже позади
	//	//Если ДатаПолучения = локТекущаяДата Тогда
	//	//	// значит время не может быть меньше текущего времени
	//	//	текЧас = "";
	//	//	текМин = "";
	//	//	ТекущееВремя(текЧас, текМин);
	//	//	Если (Часы + Минуты/60) < (текЧас + текМин/60) Тогда
	//	//		Предупреждение("Задание не создано!
	//	//		|Указано время отгрузки меньше текущего и дата отгрузки - ""Сегодня""!
	//	//		|Или увеличьте время, или увеличьте дату отгрузки!", 10);
	//	//		Возврат 0;
	//	//	КонецЕсли;
	//	//КонецЕсли;
	
	//	необходимые условия
	|	И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.АвтоСозданиеЗаданий = ИСТИНА
	|	И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ПометкаУдаления = ЛОЖЬ
	
	|УПОРЯДОЧИТЬ ПО
	|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.МаршрутДоставки,   
	|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Склад
	|";
	
	Запрос.УстановитьПараметр("ДтТек", МоментВремени);
	
	ДобавитьВЛог(Запрос.Текст);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция Запрос_НайтиСЗ(пар_Склад)
	
	// 1с7:
	//Для сч = 5 По 6 Цикл
	//	// 5 - создан
	//	// 6 - идет сборка на складе
	//	
	//	Док = СоздатьОбъект("Документ");
	//	Док.ВыбратьПоЗначению(локТекущаяДата,локТекущаяДата,"ПровереноЗадание", сч);
	//  Пока Док.ПолучитьДокумент() = 1 Цикл
	//		Если Док.ПометкаУдаления() = 1 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Если Док.флДопЗадание <> флДопЗадание Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		тмпСклад = Док.Склад_СлужЗадания;
	//		Если ПустоеЗначение(тмпСклад) = 1 Тогда
	//			тмпСклад = глСклад_Основной;
	//		КонецЕсли;
	//		Если тмпСклад <> выбСклад Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		тмпМаршрут = Док.ПунктДоставки;
	//		Если ПустоеЗначение(тмпМаршрут) = 1 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Если тмпМаршрут <> выбМаршрут Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Если Док.ДатаОтгрузки <> ДатаПолучения Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Если Док.ВремяОтгрузки <> ВремяОтгрузки Тогда
	//			Продолжить;
	//		КонецЕсли;
	
	//	где, 
	//	графа отбора 'ПровереноЗадание' = 	реквизит шапки 'флОбщПроверка' док-та СлужебноеЗадание_СВН
	//  в игноре помеченные на удаление, без флага ДопЗадание, не подходящие по складу, маршруту, дате/времени отгрузки
	
	//	по факту ручного запуска - формирования СЗ все время создается Новый
	//  в автозапуске 1 док на склад в день по заданию,т.е. основанию
	//  в маршрут доставки записывать маршрут-группу из параметра
	//  в организацию - из константы - для автонумерации 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СЗ.Ссылка КАК ИскомаяСсылкаНаСЗ
	|ИЗ
	|	Документ.СлужебноеЗадание КАК СЗ
	|ГДЕ
	|	СЗ.Дата >= &ДтВрм
	|	И СЗ.Авто = ИСТИНА
	|	И СЗ.Основание = &парРег
	|	И СЗ.Склад = &парСкл
	|	И СЗ.Филиал = &парФилиал
	|	И СЗ.Ответственный = &парОтветственный
	//|	И СЗ.МаршрутДоставки = &парПД
	//|	И СЗ.Водитель = &парВодЯтеЛ
	//|	И СЗ.ТипДоставки = &парТипДоставки
	//|	И СЗ.ВремяСдачиЗадания = &парПД
	//|	И СЗ.ВремяНачалаУпаковки = &парПД
	//|	И СЗ.ВремяОкончанияДовыписки = &парПД
	//|	И СЗ.ВремяОтгрузки = &парПД
	
	|	И СЗ.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СЗ.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДтВрм",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("парРег",Вход_Основание);
	Запрос.УстановитьПараметр("парСкл",пар_Склад);
	Запрос.УстановитьПараметр("парФилиал",ПравилаИгры.ДокументОбъектСЗ_Филиал);
	Запрос.УстановитьПараметр("парОтветственный",ПравилаИгры.Ответственный);	
	
	//Если ЗначениеЗаполнено(Вход_МаршрутДоставки) тогда
	//	Запрос.УстановитьПараметр("парПД",Вход_МаршрутДоставки);	
	//Иначе
	//	оснТТ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Вход_КА,"ОсновнаяТорговаяТочка");
	//	Запрос.УстановитьПараметр("парПД",ОбщегоНазначения.ПолучитьЗначениеРеквизита(оснТТ,"МаршрутДоставки"));	
	//КонецЕсли;
	
	//Запрос.УстановитьПараметр("парВодЯтеЛ",Вход_Водитель);
	//
	//ПараметрыОснования = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Вход_Основание,"ВремяСдачиЗадания,ВремяНачалаУпаковки,ВремяОкончанияДовыписки,ВремяОтгрузки");
	//
	//Запрос.УстановитьПараметр("парТипДоставки",Вход_ТипДоставки);
	//Запрос.УстановитьПараметр("парРег",Вход_Основание);
	//Запрос.УстановитьПараметр("ВремяСдачиЗадания",ПараметрыОснования.ВремяСдачиЗадания);
	//Запрос.УстановитьПараметр("ВремяНачалаУпаковки",ПараметрыОснования.ВремяНачалаУпаковки);
	//Запрос.УстановитьПараметр("ВремяОкончанияДовыписки",ПараметрыОснования.ВремяОкончанияДовыписки);
	//Запрос.УстановитьПараметр("ВремяОтгрузки",ПараметрыОснования.ВремяОтгрузки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция Запрос_ПолучитьПараметрыПользователяПоУмолчанию(пар_Настройка) экспорт
	
Запрос = Новый Запрос(
 "ВЫБРАТЬ
 |	НастройкиПользователей.Настройка,
 |	НастройкиПользователей.Значение
 |ИЗ
 |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
 |ГДЕ
 |	НастройкиПользователей.Пользователь = &Пользователь
 |	И НастройкиПользователей.Настройка = &Настройка");
 
 Запрос.УстановитьПараметр("Пользователь",ПравилаИгры.Ответственный);
 Запрос.УстановитьПараметр("Настройка",пар_Настройка);
 
 Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// сервис
Процедура ОчиститьТЗ()
	
	Для uio = 1 по 15 цикл
		ПравилаИгры.Вставить("ТабличноеПоле"+СокрЛП(uio),Новый ТаблицаЗначений);
	КонецЦикла;
	
КонецПРоцедуры
Функция УбратьТОчкиИПробелы(пстр)
	
	пстр = СтрЗаменить(пстр,".","");
	пстр = СтрЗаменить(пстр," ","");
	
	пстр = СтрЗаменить(пстр,";","_");
	пстр = СтрЗаменить(пстр,"""","");
	
	пстр = СтрЗаменить(пстр,"(","");
	пстр = СтрЗаменить(пстр,")","");
	
	Возврат пстр;
КонецФункции
Функция РазвернутьДатуВстроку(выбД,Разд="") 
	СД = "";
	ГД = Год(выбД);
	МД = Месяц(выбД);
	ДД = День(выбД);
	СД = СокрЛП(Формат(ГД, "ЧЦ=4; ЧН=; ЧВН=; ЧГ="))+Разд+СокрЛП(Формат(МД, "ЧЦ=2; ЧН=; ЧВН="))+Разд+СокрЛП(Формат(ДД, "ЧЦ=2; ЧН=; ЧВН="));
	Возврат СД;
КонецФункции

Функция СтруктуруВСтроку(пар_Стр)
	
	Стр = "";
	
    Для Каждого Элемент Из пар_Стр Цикл
        Стр = Стр + "[" + СокрЛП(Элемент.Ключ) + "] = [" + СокрЛП(Элемент.Значение) + "]; ";
    КонецЦикла;	
	
	Возврат Стр;
КонецФункции

// оповещение
Процедура ОпубликоватьЛог()
	
	Если НЕ ЗначениеЗаполнено(ПравилаИгры.Аларм_Содержимое) тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ПравилаИгры.Аларм_Содержимое,"err") > 0 ИЛИ
		 Найти(ПравилаИгры.Аларм_Содержимое,"inf") > 0 тогда   
		
		Если ПравилаИгры.Это_Фон тогда
			Если Найти(ПравилаИгры.Аларм_Содержимое,"err") > 0 тогда
				РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(ПравилаИгры.Аларм_Источник,ПравилаИгры.Аларм_Содержимое,ПравилаИгры.Аларм_Заголовок);
			КонецЕсли;
		Иначе
			
			//#Если Клиент Тогда
				Сообщить(СокрЛП(ПравилаИгры.Аларм_Содержимое));	
			//#Иначе
			//	СписокАдресатов = Новый СписокЗначений;
			//	
			//	Если ЗначениеЗаполнено(ПравилаИгры.МылоЮзвера) тогда
			//		СписокАдресатов.Добавить(ПравилаИгры.МылоЮзвера, ПравилаИгры.ИмяЮзвера);
			//	КонецЕсли;
			//	
			//	РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(
			//	Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаФормированияСлужебногоЗадания,
			//	ПравилаИгры.Аларм_Содержимое, 
			//	ПравилаИгры.Аларм_Заголовок,
			//	СписокАдресатов);
			//#КонецЕсли	
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьВЛогфайл(ПравилаИгры.Аларм_Содержимое);
	ПравилаИгры.Вставить("Аларм_Содержимое","");
	
	
КонецПроцедуры
Процедура ДобавитьВЛог(пар_стр)
	//Если ПравилаИгры.РазрешитьВыводНаЭкран тогда
	//	//Сообщить(пар_стр);	
	//КонецЕсли;
	ПравилаИгры.Вставить("Аларм_Содержимое", ПравилаИгры.Аларм_Содержимое + Символы.ПС + пар_стр);
КонецПроцедуры
Процедура ЗаписьВЛогфайл(строкаВЛог) 

	Если НЕ ПравилаИгры.РазрешитьЗаписьВЛогФайл тогда
		Возврат;
	КонецЕсли;
	
    ТекстовыйДокумент = Новый ТекстовыйДокумент;
    кодировка = "UTF8";
	
	ПравилаИгры_ИмяЛогФайлаПолное = ПравилаИгры.ИмяЛогФайлаПолное;//СтрЗаменить(ПравилаИгры.ИмяЛогФайлаПолное,"метка", ПравилаИгры.Метка);
	
    МассивФайлов = НайтиФайлы(ПравилаИгры_ИмяЛогФайлаПолное);        
    Если МассивФайлов.Количество() > 0 тогда        
        ТекстовыйДокумент.Прочитать(ПравилаИгры_ИмяЛогФайлаПолное,кодировка); 
		
		УдалитьФайлы(ПравилаИгры_ИмяЛогФайлаПолное);
		
    КонецЕсли;

    строкаВЛог = Символы.ПС + 
	             "------------------------------------------------------------------" + 
				 Символы.ПС + 
				 "[" + ТекущаяДата() + "] " + 
				 Символы.ПС + 
				 строкаВЛог; 
    
    ТекстовыйДокумент.ДобавитьСтроку(строкаВЛог);
    ТекстовыйДокумент.Записать(ПравилаИгры_ИмяЛогФайлаПолное,кодировка);

КонецПроцедуры

Процедура РегистрацияЭтапаВыполненияРегламентногоЗадания(пар_СтруктураЗаписи)
	
	//Если НЕ ПравилаИгры.это_фон тогда
	//	Возврат;
	//КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ИсторияВыполненияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
		
	МенеджерЗаписи.Задание = ПравилаИгры.РеглЗаданиеНаИсполнение;
	МенеджерЗаписи.МоментВремени = ТекущаяДата();
	МенеджерЗаписи.Пользователь = ПравилаИгры.Ответственный;
	
	МенеджерЗаписи.Этап = пар_СтруктураЗаписи.Этап;
	
	МенеджерЗаписи.Параметр = пар_СтруктураЗаписи.Параметр;
	МенеджерЗаписи.Результат = пар_СтруктураЗаписи.Результат;
	МенеджерЗаписи.Комментарий = пар_СтруктураЗаписи.Комментарий;
	
	МенеджерЗаписи.Записать();	
	
КонецПроцедуры
Функция ВернутьСтруктуруДляРегистрации(пар_Этап,пар_Параметр,пар_Результат,пар_Комментарий)
	
	Возврат Новый Структура("Этап,Параметр,Результат,Комментарий",пар_Этап,пар_Параметр,пар_Результат,пар_Комментарий);
	
КонецФункции

// регламент
Функция АвтозапускФормированияСЗ() экспорт
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Справочники.ПараметрыФормированияСлужебныхЗаданий.ПустаяСсылка(),Документы.СлужебноеЗадание.ПустаяСсылка(), "опрос расписания - старт"  ));		
	
	тзр = Запрос_ПолучитьСписокАктуальныхЗаданийНаФормированиеСЗ();
	Если тзр.Количество() = 0 тогда
		
		ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: заданий нет");
		ОпубликоватьЛог();
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Справочники.ПараметрыФормированияСлужебныхЗаданий.ПустаяСсылка(),Документы.СлужебноеЗадание.ПустаяСсылка(), "опрос расписания - заданий нет"  ));		
		
		Возврат ПравилаИгры;
	КонецЕсли;
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Справочники.ПараметрыФормированияСлужебныхЗаданий.ПустаяСсылка(),Документы.СлужебноеЗадание.ПустаяСсылка(), "опрос расписания - окончание. задания получены"  ));		
	
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: задания получены");
	ОпубликоватьЛог();
	
	Для каждого осн из тзр цикл
		 Вход_Основание = осн.ПараметрФормированияСЗ;
		 РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Справочники.ПараметрыФормированияСлужебныхЗаданий.ПустаяСсылка(),Документы.СлужебноеЗадание.ПустаяСсылка(), "Основание: " + СокрлП(Вход_Основание)  ));
		 ЗаполнитьПараметрыОбработкиСогласноОснованию();
		 ВыполнитьОбработкуОснования();
	КонецЦикла;
	
	Возврат ПравилаИгры;
КонецФункции
Процедура ЗаполнитьПараметрыОбработкиСогласноОснованию() экспорт
	Если ЗначениеЗаполнено(Вход_Основание) Тогда
		
		//текденьнедели = ДеньНедели(УстановитьПараметрыПоУмолчанию().ТекущаяДата);
		текденьнедели = ДеньНедели(ПравилаИгры.ТекущаяДата);
		
		ПараметрыОснования = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Вход_Основание,"Код,Склад,МаршрутДоставки,Водитель,ТипДоставки,флДополнительнаяДоставка,ДниНедели,ДниНедели" + СокрЛП(текденьнедели) + ",флНеУдалятьМинСум"+СокрЛП(текденьнедели)+ ",ВремОтгрузки"+СокрЛП(текденьнедели));
		
		пРасписание = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыОснования.ДниНедели,";");
		//Если пРасписание[ДеньНедели(УстановитьПараметрыПоУмолчанию().ТекущаяДата)-1] = 0 тогда 
		Если пРасписание[ДеньНедели(ПравилаИгры.ТекущаяДата)-1] = 0 тогда 
			Вход_Основание = Справочники.ПараметрыФормированияСлужебныхЗаданий.ПустаяСсылка();
			//Предупреждение("Параметры формирования СЗ не подходят по расписанию!",3);
			Возврат;
		КонецЕсли;
		
		Вход_КА = Справочники.Контрагенты.ПустаяСсылка();
		Вход_Склад = ПараметрыОснования.Склад;
		Вход_Водитель = ПараметрыОснования.Водитель;
		Вход_МаршрутДоставки = ПараметрыОснования.МаршрутДоставки;
		Вход_ТипДоставки = ПараметрыОснования.ТипДоставки;
		Вход_флДополнительнаяДоставка = ПараметрыОснования.флДополнительнаяДоставка;
		//Вход_флРежРаботы_вВых // решено было не использовать этот флаг. закрыл возможность его 'взвести', но из запроса не убрал
		 
		 тфлаг_знач = Ложь;
		 Если ПараметрыОснования.Свойство("ДниНедели" + СокрЛП(текденьнедели),тфлаг_знач) Тогда
			 Вход_флНеУдалятьМинСум = тфлаг_знач;
		 КонецЕсли;
		 
		ДатаДоставки = ТекущаяДата();
		лВремОтгрузки = "";
		Если ПараметрыОснования.Свойство("ВремОтгрузки"+СокрЛП(текденьнедели),лВремОтгрузки) тогда
			ДатаДоставки = НачалоДня(ТекущаяДата()) + Час(лВремОтгрузки)*60*60 + Минута(лВремОтгрузки)+60 + Секунда(лВремОтгрузки);	
		КонецЕсли;
		
		//ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: Вход_Основание [" + СокрЛП(ПараметрыОснования.Код) + "] " + СокрлП(Вход_Основание));
		//ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: ПараметрыОснования.Склад [" + СокрлП(ПараметрыОснования.Склад)+ "] ");
		//ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: ПараметрыОснования.Водитель [" + СокрлП(ПараметрыОснования.Водитель)+ "] ");
		//ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: ПараметрыОснования.МаршрутДоставки [" + СокрлП(ПараметрыОснования.МаршрутДоставки)+ "] ");
		//ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: ПараметрыОснования.ТипДоставки [" + СокрлП(ПараметрыОснования.ТипДоставки)+ "] ");
		//ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: ПараметрыОснования.флДополнительнаяДоставка [" + СокрлП(ПараметрыОснования.флДополнительнаяДоставка)+ "] ");
		//ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: Вход_флНеУдалятьМинСум [" + СокрлП(Вход_флНеУдалятьМинСум)+ "] ");
		//ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: ДатаДоставки [" + СокрлП(ДатаДоставки)+ "] ");
		
		ОписаниеПараметра = Новый Структура();
		ОписаниеПараметра.Вставить("Основание","inf: Вход_Основание [" + СокрЛП(ПараметрыОснования.Код) + "] " + СокрлП(Вход_Основание));
		ОписаниеПараметра.Вставить("Склад","inf: ПараметрыОснования.Склад [" + СокрлП(ПараметрыОснования.Склад)+ "] ");
		ОписаниеПараметра.Вставить("Водитель","inf: ПараметрыОснования.Водитель [" + СокрлП(ПараметрыОснования.Водитель)+ "] ");
		ОписаниеПараметра.Вставить("МаршрутДоставки","inf: ПараметрыОснования.МаршрутДоставки [" + СокрлП(ПараметрыОснования.МаршрутДоставки)+ "] ");
		ОписаниеПараметра.Вставить("ТипДоставки","inf: ПараметрыОснования.ТипДоставки [" + СокрлП(ПараметрыОснования.ТипДоставки)+ "] ");
		ОписаниеПараметра.Вставить("флДополнительнаяДоставка","inf: ПараметрыОснования.флДополнительнаяДоставка [" + СокрлП(ПараметрыОснования.флДополнительнаяДоставка)+ "] ");
		ОписаниеПараметра.Вставить("Вход_флНеУдалятьМинСум","inf: Вход_флНеУдалятьМинСум [" + СокрлП(Вход_флНеУдалятьМинСум)+ "] ");
		ОписаниеПараметра.Вставить("ДатаДоставки","inf: ДатаДоставки [" + СокрлП(ДатаДоставки)+ "] ");
		
		ДобавитьВЛог("Параметры: " + СтруктуруВСтроку(ОписаниеПараметра)   );
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Вход_Основание,Документы.СлужебноеЗадание.ПустаяСсылка(),  "Параметры расчета резервов: " + СтруктуруВСтроку(ОписаниеПараметра)   ));				

	КонецЕсли;
КонецПроцедуры
Процедура ВыполнитьОбработкуОснования() экспорт
	ЗаполнитьДанныеПоРезервам();
	СформироватьДокументы(Неопределено);
КонецПроцедуры
#Если Сервер тогда
Процедура ВыполнитьРегламентноеЗадание() Экспорт
	
	//РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Старт,Справочники.ПараметрыФормированияСлужебныхЗаданий.ПустаяСсылка(),Документы.СлужебноеЗадание.ПустаяСсылка(),"Попытка запуска"));
	
	ВызватьИсключение "Обработка не используется";
	
	УстановитьПараметрыПоУмолчанию(Истина);
	ДобавитьВЛог("старт регламентного задания " +  СокрЛП(ТекущаяДата()));
	ОпубликоватьЛог();
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Старт,Справочники.ПараметрыФормированияСлужебныхЗаданий.ПустаяСсылка(),Документы.СлужебноеЗадание.ПустаяСсылка(),"Настройки: " + СтруктуруВСтроку(ПравилаИгры)));
	
	//Если НЕ ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() тогда
	//	ДобавитьВЛог("err: это не рабочая БД ");
	//	ОпубликоватьЛог();
	//	Возврат;
	//КонецЕсли;
	
	СписокВозможныхСценариев = СформироватьСписокВозможныхСценариев();
	НайденнаяСтрока  = СписокВозможныхСценариев.Найти(Вход_НазваниеСценария,"ИмяПроцедуры");
	Если НайденнаяСтрока = Неопределено Тогда
		ДобавитьВЛог("err: отсутствует сценарий " + СокрЛП(Вход_НазваниеСценария));
		ОпубликоватьЛог();
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Ошибка,Справочники.ПараметрыФормированияСлужебныхЗаданий.ПустаяСсылка(),Документы.СлужебноеЗадание.ПустаяСсылка(),"err: отсутствует сценарий " + СокрЛП(Вход_НазваниеСценария)));
		
		Возврат;
	КонецЕсли;
	ИмяПроцедуры = НайденнаяСтрока.ИмяПроцедуры;
	Если НЕ ЗначениеЗаполнено(ИмяПроцедуры) тогда
		ДобавитьВЛог("err: отсутствует сценарий " + СокрЛП(Вход_НазваниеСценария));
		ОпубликоватьЛог();
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Ошибка,Справочники.ПараметрыФормированияСлужебныхЗаданий.ПустаяСсылка(),Документы.СлужебноеЗадание.ПустаяСсылка(),"err: отсутствует сценарий " + СокрЛП(Вход_НазваниеСценария)));
		
		Возврат;
	КонецЕсли;
	
	лД = ТекущаяДата();
	ДатаЗапускаЗаданияТипаДата = Дата(Год(лД),Месяц(лД),День(лД));
	ВидДня = РегистрыСведений.ДатыКалендарей.ПолучитьВидДня(ДатаЗапускаЗаданияТипаДата,Справочники.Календари.АвтоФормированиеСЗ);
	Если ВидДня = Перечисления.ВидыДнейКалендаря.Праздник Тогда
		ДобавитьВЛог("err: ВидДня " + СокрЛП(ВидДня));
		ОпубликоватьЛог();
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(),"err: ВидДня " + СокрЛП(ВидДня)));
		
		Возврат;
	КонецЕсли;
	
	Выполнить(Вход_НазваниеСценария);
	
	ДобавитьВЛог("окончание регламентного задания " +  СокрЛП(ТекущаяДата()));
	ОпубликоватьЛог();
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Окончание,Справочники.ПараметрыФормированияСлужебныхЗаданий.ПустаяСсылка(),Документы.СлужебноеЗадание.ПустаяСсылка(),""));
	
КонецПроцедуры
#КонецЕсли