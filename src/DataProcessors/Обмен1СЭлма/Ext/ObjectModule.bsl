Процедура ВыполнитьРегламентноеЗадание() Экспорт
	
	ЗагрузитьКонтрагентов();
	
КонецПроцедуры

//Загрузка//
Процедура ЗагрузитьКонтрагентов()
	
	КаталогФайлов = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Elma", "Папка загрузки контрагентов", "\\SRV1C-NN\1c_exchange\FromElmaTo1C\To1C83\");
	Для Каждого Файл Из НайтиФайлы(КаталогФайлов, "*newClient_*.xml") Цикл
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
		Тип = ФабрикаXDTO.Тип("1c2Elma", "ELMA");
		ДанныеКонтрагента = Новый Структура("Ошибка,ТекстОшибки", Ложь, "");
		
		Попытка
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, Тип);
			УстановитьДанныеКонтрагента(ДанныеКонтрагента, ОбъектXDTO);
			КонтрольДанныхКонтрагента(ДанныеКонтрагента);
			ЗаписатьКонтрагента(ДанныеКонтрагента);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ДанныеКонтрагента.Ошибка = Истина;
			ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, ОписаниеОшибки);
		КонецПопытки;
		ЧтениеXML.Закрыть();
		ЗаписьЛогаЗагрузки(Файл, ДанныеКонтрагента);
	КонецЦикла;
	
КонецПроцедуры
Процедура УстановитьДанныеКонтрагента(Структура, ОбъектXDTO)
	
	Структура = Новый Структура("Ошибка,ТекстОшибки", Ложь, "");
	CRM = ОбъектXDTO.CRM;
	
	//Реквизиты контрагента//
	УстановитьГруппуКонтрагента(Структура, CRM.Company.Industry.ID);
	УстановитьВидКонтрагента(Структура, CRM.Company.Type.Name);
	УстановитьОрганизациюКонтрагента(Структура, CRM.Company.Type.ID);
	УстановитьМенеджера(Структура, CRM.Company.AssignedTo.ID);
	УстановитьСегментКонтрагента(Структура, CRM.Company.CountEmployees);
	Структура.Вставить("Наименование",CRM.company.name.name);
	Структура.Вставить("НаименованиеПолное",CRM.Company.Industry.Name);
	Структура.Вставить("Телефон", CRM.Company.OtherPhone);
	Структура.Вставить("EMail", CRM.Company.Email);
	Структура.Вставить("ЮридическийАдрес", CRM.Company.BAdress.PostalAdress);
	Структура.Вставить("ФактическийАдрес", CRM.Company.PAdress.PostalAdress);
	Структура.Вставить("АдресДоставки", CRM.Company.PAdress.State);
	Структура.Вставить("ИНН", ОбъектXDTO.CRM.Company.INN);
	Структура.Вставить("КПП", ОбъектXDTO.CRM.Company.KPP);
	Структура.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
	
	//Реквизиты расчетного счета//
	Структура.Вставить("BIK", ОбъектXDTO.CRM.Company.BIK);
	Структура.Вставить("RS", ОбъектXDTO.CRM.Company.RS);
	Структура.Вставить("KS", ОбъектXDTO.CRM.Company.KS);
	
	//Реквизиты договора//
	
	Структура.Вставить("ДопустимаяСуммаЗадолженности", CRM.Company.Limit);
	Структура.Вставить("ДопустимоеЧислоДнейЗадолженности", Константы.ЛимитыДнейЗадолженностиЮрЛицо.Получить());
	Структура.Вставить("КоэффициентСуммыКредита", ?(CRM.Company.DelayOfPayment > 10, 3, CRM.Company.DelayOfPayment));
	
	//Реквизиты торговой точки//
	УстановитьРегионКонтрагента(Структура, CRM.Company.Region.Name);
	Структура.Вставить("Логин", СокрЛП(CRM.Company.AssignedTo.Login));
	Структура.Вставить("Пароль", СокрЛП(CRM.Company.Site));
	
	//Реквизиты контактного лица контрагента//
	Структура.Вставить("Контакт_ФИО", CRM.Contact.AssignedTo.Login);
	Структура.Вставить("Контакт_Должность", CRM.Contact.Post);
	Структура.Вставить("Контакт_Сайт", CRM.Contact.Site);
	Структура.Вставить("Контакт_Email", CRM.Contact.Email);
	Структура.Вставить("Контакт_Телефон", CRM.Contact.PhoneOffice);
	
КонецПроцедуры
Процедура КонтрольДанныхКонтрагента(ДанныеКонтрагента)
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиСайта.НайтиПоКоду(ДанныеКонтрагента.Логин);
	Если НЕ УчетнаяЗапись.Пустая() Тогда
		ДанныеКонтрагента.Ошибка = Истина;
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Контрагент с логином <" + ДанныеКонтрагента.Логин + "> уже существует(" + УчетнаяЗапись.Владелец.Владелец.Наименование + "/" + УчетнаяЗапись.Владелец.Владелец.Код + ")");
	КонецЕсли;
	
	Если	ДанныеКонтрагента.Организация.ТипОплаты <> Справочники.ВидыОплатЧекаККМ.Безнал И
			ДанныеКонтрагента.Организация.ТипОплаты <> Справочники.ВидыОплатЧекаККМ.Наличные Тогда
			
			ДанныеКонтрагента.Ошибка = Истина;
			ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "У организации <" + ДанныеКонтрагента.Организация + "> указан неправильный вид оплаты(должен быть либо <Наличные>, либо <Безналичный>");
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаписатьКонтрагента(ДанныеКонтрагента)
	
	Если ДанныеКонтрагента.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКонтрагента.Покупатель Тогда
		Родитель = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Elma", "Группа Покупатели", Справочники.Контрагенты.НайтиПоКоду("00000002"));
	Иначе
		Родитель = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Elma", "Группа Поставщики", Справочники.Контрагенты.НайтиПоКоду("00000001"));
	КонецЕсли;
	
	КонтрагентСсылкаНового = Справочники.Контрагенты.ПолучитьСсылку();
	
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	Контрагент.УстановитьНовыйКод();
	Контрагент.УстановитьСсылкуНового(КонтрагентСсылкаНового);
	
	НачатьТранзакцию();
	
	ТорговаяТочка = Справочники.ТорговыеТочки.СоздатьЭлемент();
	ТорговаяТочка.Владелец = КонтрагентСсылкаНового;
	ТорговаяТочка.Регион = ДанныеКонтрагента.Регион;
	ТорговаяТочка.Город = ДанныеКонтрагента.Город;
	ТорговаяТочка.Наименование = ДанныеКонтрагента.Наименование;
	ТорговаяТочка.Код = Контрагент.Код;
	ТорговаяТочка.ДополнительныйКомментарий = ДанныеКонтрагента.Контакт_ФИО + "(" + ДанныеКонтрагента.Контакт_Должность+ "); тел." + ДанныеКонтрагента.Контакт_Телефон + "; EMail:" + ДанныеКонтрагента.Контакт_Телефон;
	Попытка
		ТорговаяТочка.ОбменДанными.Загрузка = Истина;
		ТорговаяТочка.Записать();
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Записана торговая точка: " + ТорговаяТочка.Код);
	Исключение
		ОтменитьТранзакцию();
		ДанныеКонтрагента.Ошибка = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Не удалось записать торговую точку: " + ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиСайта.СоздатьЭлемент();
	УчетнаяЗапись.Код = ДанныеКонтрагента.Логин;
	УчетнаяЗапись.Наименование = "С Элма";
	УчетнаяЗапись.Пароль = ДанныеКонтрагента.Пароль;
	УчетнаяЗапись.Владелец = ТорговаяТочка.Ссылка;
	Попытка
		УчетнаяЗапись.ОбменДанными.Загрузка = Истина;
		УчетнаяЗапись.Записать();
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Записана учетная запись: " + УчетнаяЗапись.Код);
	Исключение
		ОтменитьТранзакцию();
		ДанныеКонтрагента.Ошибка = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Не удалось записать данные учетной записи: " + ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	Договор.УстановитьНовыйКод();
	Договор.ВидДоговора = ?(ДанныеКонтрагента.Покупатель, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	Договор.Владелец = КонтрагентСсылкаНового;
	Договор.Наименование = "Основной договор";
	Договор.Дата = ТекущаяДата();
	Договор.Организация = ДанныеКонтрагента.Организация;
	Договор.ДопустимаяСуммаЗадолженности = ДанныеКонтрагента.ДопустимаяСуммаЗадолженности;
	Договор.ДопустимоеЧислоДнейЗадолженности = ДанныеКонтрагента.ДопустимоеЧислоДнейЗадолженности;
	Договор.КоэффициентСуммыКредита = ДанныеКонтрагента.КоэффициентСуммыКредита;
	Договор.ВидОплаты = ?(ДанныеКонтрагента.Организация.ТипОплаты = Справочники.ВидыОплатЧекаККМ.Безнал, Перечисления.ВидыДенежныхСредств.Безналичные, Перечисления.ВидыДенежныхСредств.Наличные);
	Договор.ДоговорНаОферту = Договор.ВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные;
	Договор.НеКонтролироватьЛимит = Договор.ВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные;
	Договор.ДоговорПодписан = Договор.ВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные;
	Договор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Договор.Дата =  ДанныеКонтрагента.Организация.Договор_ОфертаПокупателя_Дата;
	Договор.Номер = ДанныеКонтрагента.Организация.Договор_ОфертаПокупателя_Номер;
	Договор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	Договор.ВидРасчетаДней = Перечисления.ВидыРасчетаДней.ПоБанковскимДням;
	
	Попытка
		Договор.ОбменДанными.Загрузка = Истина;
		Договор.Записать();
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Записан договор: " + Договор.Код);
	Исключение
		ОтменитьТранзакцию();
		ДанныеКонтрагента.Ошибка = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Не удалось записать договор контрагента: " + ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	НуженБанковскийСчет = Договор.ВидОплаты <> Перечисления.ВидыДенежныхСредств.Наличные;
	Если НуженБанковскийСчет Тогда
		Если ЗначениеЗаполнено(ДанныеКонтрагента.BIK) И ЗначениеЗаполнено(ДанныеКонтрагента.RS) Тогда
			Банк = Справочники.Банки.НайтиПоКоду(ДанныеКонтрагента.BIK);
			Если ЗначениеЗаполнено(Банк) Тогда
				Счет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				Счет.Банк = Банк;
				Счет.Владелец = КонтрагентСсылкаНового;
				Счет.НомерСчета = ДанныеКонтрагента.RS;
				Счет.ВидСчета = "Расчетный";
				Счет.ВалютаДенежныхСредств = Константы.ВалютаРубль.Получить();
				Счет.Наименование = "Основной";
				Счет.УстановитьНовыйКод();
				Попытка
					Счет.ОбменДанными.Загрузка = Истина;
					Счет.Записать();
					ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Записан банковский счет: " + Счет.Код);
					ОсновнойБанковскийСчет = Счет.Ссылка;
				Исключение
					ОтменитьТранзакцию();
					ДанныеКонтрагента.Ошибка = Истина;
					ОписаниеОшибки = ОписаниеОшибки();
					ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Не удалось записать банковский счет: " + ОписаниеОшибки);
					Возврат;
				КонецПопытки;			
			Иначе
				ДанныеКонтрагента.Ошибка = Истина;
				ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Не определен банк БИК: " + ДанныеКонтрагента.BIK);
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Контрагент.Родитель = Родитель;
	Контрагент.ГоловнойКонтрагент = КонтрагентСсылкаНового;
	Контрагент.ДатаСоздания = ТекущаяДата();
	Контрагент.ИмеетТорговыеТочки = Ложь;
	Контрагент.ОсновнаяТорговаяТочка = ТорговаяТочка.Ссылка;
	Если НуженБанковскийСчет Тогда
		Контрагент.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
	КонецЕсли;
	Контрагент.КоэффициентУвеличенияСуммыКредита = 1;
	Контрагент.ОсновнойДоговорКонтрагента = Договор.Ссылка;
	Контрагент.ЛогинДляСайта = ДанныеКонтрагента.Логин;
	Контрагент.ПарольДляСайта = ДанныеКонтрагента.Пароль;
	Контрагент.Регион = ДанныеКонтрагента.Регион;
	Контрагент.Комментарий = "Загружено из Элма: " + Формат(Контрагент.ДатаСоздания, "ДФ=dd.MM.yyyy");
	ЗаполнитьЗначенияСвойств(Контрагент, ДанныеКонтрагента, "Наименование,НаименованиеПолное,Покупатель,Поставщик,СайтГруппаКонтрагента,ИНН,КПП,ЮрФизЛицо,СегментКонтрагента");
	
	Попытка
		Контрагент.Записать();
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Записан Контрагент: " + Контрагент.Код);
	Исключение
		ОтменитьТранзакцию();
		ДанныеКонтрагента.Ошибка = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Не удалось записать контрагента: " + ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	//Записываем контактную информацию//
	ДобавитьКонтактнуюИнформацию(Новый Структура("Объект,Тип,Вид,Представление", 
												Контрагент.Ссылка,
												Перечисления.ТипыКонтактнойИнформации.Адрес,
												Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
												ДанныеКонтрагента.ЮридическийАдрес));
	ДобавитьКонтактнуюИнформацию(Новый Структура("Объект,Тип,Вид,Представление",
												Контрагент.Ссылка,
												Перечисления.ТипыКонтактнойИнформации.Адрес,
												Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
												ДанныеКонтрагента.ФактическийАдрес));
	ДобавитьКонтактнуюИнформацию(Новый Структура("Объект,Тип,Вид,Представление",
												Контрагент.Ссылка,
												Перечисления.ТипыКонтактнойИнформации.Адрес,
												Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента,
												ДанныеКонтрагента.АдресДоставки));
	ДобавитьКонтактнуюИнформацию(Новый Структура("Объект,Тип,Вид,Представление",
												Контрагент.Ссылка,
												Перечисления.ТипыКонтактнойИнформации.Телефон,
												Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
												ДанныеКонтрагента.Телефон));
	ДобавитьКонтактнуюИнформацию(Новый Структура("Объект,Тип,Вид,Представление",
												Контрагент.Ссылка,
												Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
												Справочники.ВидыКонтактнойИнформации.EmailДляОбменаДокументамиСКонтрагентами,
												ДанныеКонтрагента.EMail));
												
	//Записываем контактную информацию//
	Если ЗначениеЗаполнено(ДанныеКонтрагента.Контакт_ФИО) Тогда
		КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицо.Наименование = ДанныеКонтрагента.Контакт_ФИО;
		КонтактноеЛицо.Записать();
		
		КонтактноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
		КонтактноеЛицоКонтрагента.Наименование = ДанныеКонтрагента.Контакт_ФИО;
		КонтактноеЛицоКонтрагента.Владелец = Контрагент.Ссылка;
		КонтактноеЛицоКонтрагента.Должность = ДанныеКонтрагента.Контакт_Должность;
		КонтактноеЛицоКонтрагента.Комментарий = "Загружено из Элма:" + ТекущаяДата();
		КонтактноеЛицоКонтрагента.КонтактноеЛицо = КонтактноеЛицо.Ссылка;
		КонтактноеЛицоКонтрагента.Записать();
		
		ДобавитьКонтактнуюИнформацию(Новый Структура("Объект,Тип,Вид,Представление",
												КонтактноеЛицоКонтрагента.Ссылка,
												Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
												Справочники.ВидыКонтактнойИнформации.EmailПочтыКонтактногоЛицаКонтрагента,
												ДанныеКонтрагента.Контакт_Email));		
		
		ДобавитьКонтактнуюИнформацию(Новый Структура("Объект,Тип,Вид,Представление",
												КонтактноеЛицоКонтрагента.Ссылка,
												Перечисления.ТипыКонтактнойИнформации.Телефон,
												Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента,
												ДанныеКонтрагента.Контакт_Телефон));		
												
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Записано контактное лицо контрагента: " + КонтактноеЛицоКонтрагента.Код);
		ДополнитьОшибку(ДанныеКонтрагента.ТекстОшибки, "Записано контактное лицо: " + КонтактноеЛицо.Код);
		
	КонецЕсли;
	
	//Записываем менеджера//
	Если ЗначениеЗаполнено(ДанныеКонтрагента.Менеджер) Тогда
		ВидМенеджера = ?(ДанныеКонтрагента.Покупатель, Перечисления.ВидыМенеджеров.Продажи, Перечисления.ВидыМенеджеров.Снабжения);
		Запись = РегистрыСведений.МенеджерыТорговыхТочек.СоздатьМенеджерЗаписи();
		Запись.Период = ТекущаяДата();
		Запись.Контрагент = Контрагент.Ссылка;
		Запись.ВидМенеджера = ВидМенеджера;
		Запись.ТорговаяТочка = Контрагент.ОсновнаяТорговаяТочка;
		Запись.Менеджер = ДанныеКонтрагента.Менеджер;
		Запись.Записать();
	КонецЕсли;
	
	//Регистрируем договор к обмену
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбменПартКом83_Сайт.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.ОбменПартКом83_Сайт КАК ОбменПартКом83_Сайт
	                      |ГДЕ
	                      |	ОбменПартКом83_Сайт.Исходящий
	                      |	И НЕ ОбменПартКом83_Сайт.ЭтотУзел");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Узел = Выборка.Ссылка;
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Договор.Ссылка);
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаписьЛогаЗагрузки(Файл, ДанныеКонтрагента)
	
	ИмяФайла = СокрЛП(Файл.ИмяБезРасширения);
	Каталог = Файл.Путь;
	НовыйКаталог = Каталог + "Loaded";
	НовоеИмя = ИмяФайла + ?(ДанныеКонтрагента.Ошибка, "-err", "-ok"); 
	
	Каталог = Новый Файл(НовыйКаталог);
	Если НЕ Каталог.Существует() Тогда
		СоздатьКаталог(НовыйКаталог);
	КонецЕсли;
	
	ПереместитьФайл(Файл.ПолноеИмя, НовыйКаталог + "/" + НовоеИмя + ".xml");
	
	ИмяФайлаЛога = НовыйКаталог + "/" + ИмяФайла + ".log";
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ДанныеКонтрагента.ТекстОшибки);
	Текст.Записать(ИмяФайлаЛога);
	
	Если ДанныеКонтрагента.Ошибка Тогда
		ТекстПисьма =	"Загрузка файла: " + НовыйКаталог + "/" + НовоеИмя + ".xml" + Символы.ПС +
						"Контрагент: " + ДанныеКонтрагента.Наименование + Символы.ПС + 
						"ИНН: " + ДанныеКонтрагента.ИНН + Символы.ПС + Символы.ПС + ДанныеКонтрагента.ТекстОшибки;
		Событие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиКонтрагентовИзЭлма;
		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Событие, ТекстПисьма, "Ошибка загрузки контрагента из Элма");
	КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьГруппуКонтрагента(Структура, Код)
	
	Значение = Справочники.ГруппыКонтрагентов.НайтиПоКоду(Код);
	Если Значение.Пустая() Тогда
		Структура.Ошибка = Истина;
		ДополнитьОшибку(Структура.ТекстОшибки, "Не найдена группа контрагента по наименованию <" + Код + ">");
	КонецЕсли;
	
	Структура.Вставить("СайтГруппаКонтрагента", Значение);
	
КонецПроцедуры
Процедура УстановитьРегионКонтрагента(Структура, Наименование)
	
	Значение = Справочники.Регионы.НайтиПоНаименованию(Наименование);
	Если Значение.Пустая() Тогда
		Структура.Ошибка = Истина;
		ДополнитьОшибку(Структура.ТекстОшибки, "Не найден регион контрагента по наименованию <" + Наименование + ">");
	КонецЕсли;
	Структура.Вставить("Регион", Значение);
	
	Значение = Справочники.Города.НайтиПоНаименованию(Наименование);
	Если Значение.Пустая() Тогда
		Структура.Ошибка = Истина;
		ДополнитьОшибку(Структура.ТекстОшибки, "Не найден город контрагента по наименованию <" + Наименование + ">");
	КонецЕсли;
	Структура.Вставить("Город", Значение);
	
КонецПроцедуры
Процедура УстановитьВидКонтрагента(Структура, ВидКонтрагента)
	
	Структура.Вставить("Покупатель", Ложь);
	Структура.Вставить("Поставщик", Ложь);
	
	Если ВидКонтрагента = "" ИЛИ ВидКонтрагента = "Покупатель" Тогда
		Структура.Покупатель = Истина;
	ИначеЕсли ВидКонтрагента = "Поставщик" Тогда
		Структура.Поставщик = Истина;
	Иначе
		Структура.Ошибка = Истина;
		ДополнитьОшибку(Структура.ТекстОшибки, "Не определен вид контрагента <" + ВидКонтрагента + ">");
	КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьОрганизациюКонтрагента(Структура, Код)
	
	Значение = Справочники.Организации.НайтиПоКоду(Формат(Число(Код), "ЧЦ=9; ЧВН=; ЧГ="));
	Если Значение.Пустая() Тогда
		Структура.Ошибка = Истина;
		ДополнитьОшибку(Структура.ТекстОшибки, "Не найдена организация по коду  <" + Код + ">");
	КонецЕсли;
	
	Структура.Вставить("Организация", Значение);
	
КонецПроцедуры
Процедура УстановитьМенеджера(Структура, ЛогинЭЛМА)
	
	Менеджер = Справочники.Менеджеры.ПустаяСсылка();
	Если ЗначениеЗаполнено(ЛогинЭЛМА) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	Менеджеры.Ссылка
		                      |ИЗ
		                      |	Справочник.Менеджеры КАК Менеджеры
		                      |ГДЕ
		                      |	Менеджеры.Пользователь.ЛогинЭЛМА = &ЛогинЭЛМА");
		Запрос.УстановитьПараметр("ЛогинЭЛМА", ЛогинЭЛМА);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Менеджер = Выборка.Ссылка;
		Иначе
			Структура.Ошибка = Истина;
			ДополнитьОшибку(Структура.ТекстОшибки, "Не найден менеджер по логину Элма:  <" + ЛогинЭЛМА + ">");
		КонецЕсли;
		
	КонецЕсли;
	
	Структура.Вставить("Менеджер", Менеджер);
	
КонецПроцедуры
Процедура УстановитьСегментКонтрагента(Структура, Код)
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Сегмент = Справочники.СегментыКонтрагентов.ПустаяСсылка();
	Иначе
		Сегмент = Справочники.СегментыКонтрагентов.НайтиПоКоду(Код);
		Если Сегмент.Пустая() Тогда
			Структура.Ошибка = Истина;
			ДополнитьОшибку(Структура.ТекстОшибки, "Не определен сегмент контрагента по коду <" + Код + ">");
		КонецЕсли;
	КонецЕсли;
	
	Структура.Вставить("СегментКонтрагента", Сегмент);
	
КонецПроцедуры
	
//Общее//
Процедура ДополнитьОшибку(Строка, Дополнение)
	
	Строка = Строка + ?(Строка = "", "", Символы.ПС) + Дополнение;
	
КонецПроцедуры
Процедура ДобавитьКонтактнуюИнформацию(Структура)
	
	Если ЗначениеЗаполнено(Структура.Представление) Тогда
		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Структура);
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры

