
&НаСервереБезКонтекста
Процедура ОтметитьВсеНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)	
	ОбойтиДеревоНаСервере(1);	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокПремийНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Запрос.УстановитьПараметр("НачалоПериода",			Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",			Период.ДатаОкончания);
	Запрос.УстановитьПараметр("СуммаОборота",			СуммаОборота);
	Запрос.УстановитьПараметр("БезОтбораПоКонтрагентам",Не Поставщики.Количество());
	Запрос.УстановитьПараметр("СписокКонтрагентов", 	Поставщики);
	
	Запрос.УстановитьПараметр("БезИсключенийПоКонтрагентам", Не ПоставщикиИсключения.Количество());
	Запрос.УстановитьПараметр("СписокКонтрагентовИсключений", ПоставщикиИсключения);
	
	Запрос.УстановитьПараметр("БезОтбораПоОрганизациям", Не СписокОрганизаций.Количество());
	Запрос.УстановитьПараметр("СписокОрганизаций",		СписокОрганизаций);
	
	Запрос.УстановитьПараметр("БезИсключенийПоОрганизациям", Не СписокОрганизацийИсключений.Количество());
	Запрос.УстановитьПараметр("СписокОрганизацийИсключений", ОрганизацииИсключения);
	
	Запрос.УстановитьПараметр("ВидКорректировки",		ПредопределенноеЗначение("Справочник.ВидыКорректировок.БонусыОтПоставщиковКросс2"));
	Запрос.УстановитьПараметр("ПроцентПремии",			ПроцентПремии);
	Запрос.УстановитьПараметр("ФилиалыСПБ",				ФилиалСПБ); // Филиалы СПБ
	Запрос.УстановитьПараметр("УчитыватьОтраженные",	ПропускатьСозданные);
	Запрос.УстановитьПараметр("ОтборДоговорОферты",		ФильтрОферта);
	Запрос.УстановитьПараметр("ОтборДоговорНаКомиссию",	ФильтрVMI);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ПОМЕСТИТЬ ВТДоговоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборДоговорОферты = 1
	|				ТОГДА ИСТИНА
	|			КОГДА &ОтборДоговорОферты = 2
	|				ТОГДА ДоговорыКонтрагентов.ДоговорНаОферту
	|			КОГДА &ОтборДоговорОферты = 3
	|				ТОГДА НЕ ДоговорыКонтрагентов.ДоговорНаОферту
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборДоговорНаКомиссию = 1
	|				ТОГДА ИСТИНА
	|			КОГДА &ОтборДоговорНаКомиссию = 2
	|				ТОГДА ДоговорыКонтрагентов.ДоговорНаКомиссию
	|			КОГДА &ОтборДоговорНаКомиссию = 3
	|				ТОГДА НЕ ДоговорыКонтрагентов.ДоговорНаКомиссию
	|		КОНЕЦ
	|	И (&БезОтбораПоКонтрагентам
	|			ИЛИ ДоговорыКонтрагентов.Владелец В (&СписокКонтрагентов))
	|	И (&БезИсключенийПоКонтрагентам
	|			ИЛИ НЕ ДоговорыКонтрагентов.Владелец В (&СписокКонтрагентовИсключений))
	|	И (&БезОтбораПоОрганизациям
	|			ИЛИ ДоговорыКонтрагентов.Организация В (&СписокОрганизаций))
	|	И (&БезИсключенийПоОрганизациям
	|			ИЛИ НЕ ДоговорыКонтрагентов.Организация В (&СписокОрганизацийИсключений))
	|	И НЕ ДоговорыКонтрагентов.СлужебныйДоговор
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И НЕ ДоговорыКонтрагентов.ДоговорПриостановлен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслугТовары.СтрокаПрихода КАК СтрокаПрихода,
	|	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ИСТИНА КАК Приход
	|ПОМЕСТИТЬ ВТПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО (ПоступлениеТоваровУслугТовары.Ссылка = ПоступлениеТоваровУслуг.Ссылка)
	|ГДЕ
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента В
	|			(ВЫБРАТЬ
	|				ВТДоговоры.Ссылка
	|			ИЗ
	|				ВТДоговоры)
	// 27.11.18 Строганов Роман > 
	|	И ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	//|	И ПоступлениеТоваровУслуг.ДатаВходящегоДокументаСФ МЕЖДУ &НачалоПериода И &КонецПериода
	// 27.11.18 Строганов Роман <
	|	И ПоступлениеТоваровУслуг.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Организация КАК Организация,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
	|	ВозвратТоваровПоставщикуТовары.СтрокаПрихода КАК СтрокаПрихода,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.ДокументОснование КАК ДокументОснование,
	|	ЛОЖЬ КАК Возврат,
	|	ВозвратТоваровПоставщику.Ссылка
	|ПОМЕСТИТЬ ВТВозвраты
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ПО (ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка)
	|ГДЕ
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента В
	|			(ВЫБРАТЬ
	|				ВТДоговоры.Ссылка
	|			ИЗ
	|				ВТДоговоры)
	|	И ВозвратТоваровПоставщику.Проведен
	|	И ВозвратТоваровПоставщику.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	ВложенныйЗапрос.ДокументСсылка,
	|	ВложенныйЗапрос.СуммаБезНДС,
	|	ВложенныйЗапрос.СуммаПремии,
	|	ВложенныйЗапрос.СуммаСНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТПоступления.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВТПоступления.Ссылка КАК ДокументСсылка,
	|		СУММА(ВЫБОР
	|				КОГДА ВТПоступления.СуммаВключаетНДС
	|					ТОГДА ВТПоступления.Сумма - ВТПоступления.СуммаНДС
	|				ИНАЧЕ ВТПоступления.Сумма
	|			КОНЕЦ) КАК СуммаБезНДС,
	|		СУММА(ВЫБОР
	|				КОГДА ВТПоступления.СуммаВключаетНДС
	|					ТОГДА ВТПоступления.Сумма - ВТПоступления.СуммаНДС
	|				ИНАЧЕ ВТПоступления.Сумма
	|			КОНЕЦ * &ПроцентПремии / 100) КАК СуммаПремии,
	|		СУММА(ВЫБОР
	|				КОГДА ВТПоступления.СуммаВключаетНДС
	|					ТОГДА ВТПоступления.Сумма
	|				ИНАЧЕ ВТПоступления.Сумма + ВТПоступления.СуммаНДС
	|			КОНЕЦ) КАК СуммаСНДС,
	|		ИСТИНА КАК ЭтоПоступление
	|	ИЗ
	|		ВТПоступления КАК ВТПоступления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТПоступления.ДоговорКонтрагента,
	|		ВТПоступления.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТВозвраты.ДоговорКонтрагента,
	|		ВТВозвраты.Ссылка,
	|		СУММА(ВЫБОР
	|				КОГДА ВТВозвраты.СуммаВключаетНДС
	|					ТОГДА ВТВозвраты.Сумма - ВТВозвраты.СуммаНДС
	|				ИНАЧЕ ВТВозвраты.Сумма
	|			КОНЕЦ * -1),
	|		СУММА(ВЫБОР
	|				КОГДА ВТВозвраты.СуммаВключаетНДС
	|					ТОГДА ВТВозвраты.Сумма - ВТВозвраты.СуммаНДС
	|				ИНАЧЕ ВТВозвраты.Сумма
	|			КОНЕЦ * &ПроцентПремии / 100 * -1),
	|		СУММА(ВЫБОР
	|				КОГДА ВТВозвраты.СуммаВключаетНДС
	|					ТОГДА ВТВозвраты.Сумма
	|				ИНАЧЕ ВТВозвраты.Сумма + ВТВозвраты.СуммаНДС
	|			КОНЕЦ * -1),
	|		ЛОЖЬ
	|	ИЗ
	|		ВТВозвраты КАК ВТВозвраты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТВозвраты.ДоговорКонтрагента,
	|		ВТВозвраты.Ссылка) КАК ВложенныйЗапрос";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// 15.11.18 Строганов Роман > Список ссылок для записи в документ «Корректировка долга»
	СоответствиеДокументов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл			
		МассивДокументов = СоответствиеДокументов[Выборка.ДоговорКонтрагента];
		Если МассивДокументов = Неопределено Тогда
			МассивДокументов = Новый Массив;			
		КонецЕсли;
		МассивДокументов.Добавить(Новый Структура("Документ, СуммаСНДС, СуммаБезНДС, СуммаПремии", Выборка.ДокументСсылка, Выборка.СуммаСНДС, Выборка.СуммаБезНДС, Выборка.СуммаПремии));
		СоответствиеДокументов.Вставить(Выборка.ДоговорКонтрагента, МассивДокументов);				
	КонецЦикла;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СоответствиеДокументов, УникальныйИдентификатор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТПоступления.ДоговорКонтрагента,
	|	СУММА(ПартииТоваров.СуммаБезНДС) КАК СуммаБезНДС,
	|	ВТПоступления.Организация,
	|	ВТПоступления.Контрагент
	|ПОМЕСТИТЬ ВТОтгрузки
	|ИЗ
	|	ВТПоступления КАК ВТПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваров КАК ПартииТоваров
	|		ПО ВТПоступления.СтрокаПрихода = ПартииТоваров.СтрокаПрихода
	|			И (ПартииТоваров.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг)
	|ГДЕ
	|	ВЫРАЗИТЬ(ПартииТоваров.Регистратор КАК Документ.РеализацияТоваровУслуг).Контрагент В ИЕРАРХИИ (&ФилиалыСПБ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПоступления.ДоговорКонтрагента,
	|	ВТПоступления.Организация,
	|	ВТПоступления.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаДолгаСуммыДолга.ДоговорКонтрагента,
	|	СУММА(КорректировкаДолгаСуммыДолга.Сумма) КАК Сумма,
	|	КорректировкаДолга.Организация,
	|	КорректировкаДолга.КонтрагентДебитор
	|ПОМЕСТИТЬ ВТКорректировки
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолгаСуммыДолга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
	|		ПО КорректировкаДолгаСуммыДолга.Ссылка = КорректировкаДолга.Ссылка
	|ГДЕ
	|	КорректировкаДолга.ДоговорКонтрагента В
	|			(ВЫБРАТЬ
	|				ВТДоговоры.Ссылка
	|			ИЗ
	|				ВТДоговоры)
	|	И КорректировкаДолга.ВидКорректировки = &ВидКорректировки
	|	И КорректировкаДолга.ПериодАнализаНачало = НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ)
	|	И КорректировкаДолга.ПериодАнализаОкончание = НАЧАЛОПЕРИОДА(&КонецПериода, ДЕНЬ)
	|	И КорректировкаДолга.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаДолгаСуммыДолга.ДоговорКонтрагента,
	|	КорректировкаДолга.Организация,
	|	КорректировкаДолга.КонтрагентДебитор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДоговорКонтрагента,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТДоговорыКВыгрузке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТПоступления.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВЫБОР
	|			КОГДА ВТПоступления.СуммаВключаетНДС
	|				ТОГДА ВТПоступления.Сумма - ВТПоступления.СуммаНДС
	|			ИНАЧЕ ВТПоступления.Сумма
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		ВТПоступления КАК ВТПоступления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТВозвраты.ДоговорКонтрагента,
	|		-ВЫБОР
	|			КОГДА ВТВозвраты.СуммаВключаетНДС
	|				ТОГДА ВТВозвраты.Сумма - ВТВозвраты.СуммаНДС
	|			ИНАЧЕ ВТВозвраты.Сумма
	|		КОНЕЦ
	|	ИЗ
	|		ВТВозвраты КАК ВТВозвраты) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Сумма > &СуммаОборота
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЗ.Организация КАК Организация,
	|	ВЗ.Договор КАК Договор,
	|	ВЗ.Контрагент КАК Контрагент,
	|	СУММА(ЕСТЬNULL(ВЗ.СуммаЗакупки, 0)) КАК СуммаЗакупки,
	|	СУММА(ЕСТЬNULL(ВЗ.СуммаВозврата, 0)) КАК СуммаВозврата,
	|	СУММА(ЕСТЬNULL(ВЗ.СуммаОтражено, 0)) КАК СуммаОтражено,
	|	ЛОЖЬ КАК Пометка,
	|	СУММА(ЕСТЬNULL(ВЗ.СуммаОтгрузки, 0)) КАК СуммаОтгрузки,
	|	"""" КАК КорректировкаСсылка,
	|	ВЫБОР
	|		КОГДА СУММА(ЕСТЬNULL(ВЗ.СуммаЗакупки, 0)) - СУММА(ЕСТЬNULL(ВЗ.СуммаВозврата, 0)) <= 0
	|			ТОГДА 0
	|		ИНАЧЕ (СУММА(ЕСТЬNULL(ВЗ.СуммаЗакупки, 0)) - СУММА(ЕСТЬNULL(ВЗ.СуммаВозврата, 0))) * &ПроцентПремии / 100 
	//|				- ВЫБОР КОГДА &УчитыватьОтраженные
	//|					ТОГДА СУММА(ЕСТЬNULL(ВЗ.СуммаОтражено, 0))
	//|				ИНАЧЕ 0
	//|			КОНЕЦ
	|	КОНЕЦ КАК СуммаПремии
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТПоступления.Организация КАК Организация,
	|		ВТПоступления.ДоговорКонтрагента КАК Договор,
	|		ВТПоступления.Контрагент КАК Контрагент,
	|		ВЫБОР
	|			КОГДА ВТПоступления.СуммаВключаетНДС
	|				ТОГДА ВТПоступления.Сумма - ВТПоступления.СуммаНДС
	|			ИНАЧЕ ВТПоступления.Сумма
	|		КОНЕЦ КАК СуммаЗакупки,
	|		NULL КАК СуммаВозврата,
	|		NULL КАК СуммаОтражено,
	|		NULL КАК СуммаОтгрузки
	|	ИЗ
	|		ВТПоступления КАК ВТПоступления
	|	ГДЕ
	|		ВТПоступления.ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					ВТДоговорыКВыгрузке.ДоговорКонтрагента
	|				ИЗ
	|					ВТДоговорыКВыгрузке КАК ВТДоговорыКВыгрузке)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТВозвраты.Организация,
	|		ВТВозвраты.ДоговорКонтрагента,
	|		ВТВозвраты.Контрагент,
	|		NULL,
	|		ВЫБОР
	|			КОГДА ВТВозвраты.СуммаВключаетНДС
	|				ТОГДА ВТВозвраты.Сумма - ВТВозвраты.СуммаНДС
	|			ИНАЧЕ ВТВозвраты.Сумма
	|		КОНЕЦ,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ВТВозвраты КАК ВТВозвраты
	|	ГДЕ
	|		ВТВозвраты.ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					ВТДоговорыКВыгрузке.ДоговорКонтрагента
	|				ИЗ
	|					ВТДоговорыКВыгрузке КАК ВТДоговорыКВыгрузке)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТКорректировки.Организация,
	|		ВТКорректировки.ДоговорКонтрагента,
	|		ВТКорректировки.КонтрагентДебитор,
	|		NULL,
	|		NULL,
	|		ВТКорректировки.Сумма,
	|		NULL
	|	ИЗ
	|		ВТКорректировки КАК ВТКорректировки
	|	ГДЕ
	|		ВТКорректировки.ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					ВТДоговорыКВыгрузке.ДоговорКонтрагента
	|				ИЗ
	|					ВТДоговорыКВыгрузке КАК ВТДоговорыКВыгрузке)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТОтгрузки.Организация,
	|		ВТОтгрузки.ДоговорКонтрагента,
	|		ВТОтгрузки.Контрагент,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВТОтгрузки.СуммаБезНДС
	|	ИЗ
	|		ВТОтгрузки КАК ВТОтгрузки
	|	ГДЕ
	|		ВТОтгрузки.ДоговорКонтрагента В
	|				(ВЫБРАТЬ
	|					ВТДоговорыКВыгрузке.ДоговорКонтрагента
	|				ИЗ
	|					ВТДоговорыКВыгрузке КАК ВТДоговорыКВыгрузке)) КАК ВЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ.Договор,
	|	ВЗ.Организация,
	|	ВЗ.Контрагент
	|ИТОГИ ПО
	|	Организация
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Дерево = РеквизитФормыВЗначение("Данные"); 
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "Данные");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокПремий(Команда)
	СформироватьСписокПремийНаСервере();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДанные;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	ОбойтиДеревоНаСервере(0);
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыНаСервере()
	
	Если ЗначениеЗаполнено(АдресВременногоХранилища) Тогда
		СоответствиеДокументов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Иначе
		ВызватьИсключение "Ошибка получения данных из временного хранилища: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецЕсли; 
	
	Для Каждого СтрПолученногоДерева Из Данные.ПолучитьЭлементы() Цикл
		
		Если Не СтрПолученногоДерева.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПропускатьСозданные И ЗначениеЗаполнено(СтрПолученногоДерева.СуммаОтражено) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиДерева = СтрПолученногоДерева.ПолучитьЭлементы();
		
		Если СтрокиДерева.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
	
				Если Не СтрокаДерева.Пометка Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДерева.СуммаПремии) Тогда
					Продолжить;
				КонецЕсли;
				
				МассивДокументов = СоответствиеДокументов[СтрокаДерева.Договор];
				Если МассивДокументов = Неопределено Тогда
					СтрокаДерева.КорректировкаСсылка = "Не удалось получить документы для расчета премии";
					Продолжить;
				КонецЕсли;
				
				ПараметрыДокумента = 
				Новый Структура(
				"Организация, 
				|КонтрагентДебитор,
				|ВалютаДокумента,
				|Комментарий, 
				|ВидОперации, 
				|ДоговорКонтрагента, 
				|ВидКорректировки, 
				|ПериодАнализаНачало, 
				|ПериодАнализаОкончание,
				|СуммаКомпенсацииСПБ,
				|ПроцентБонуса,
				|СуммаОборота",
				СтрокаДерева.Организация,
				СтрокаДерева.Контрагент,
				Справочники.Валюты.НайтиПоКоду("643"),
				"Бонус 2%",
				ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности"),
				СтрокаДерева.Договор,
				ПредопределенноеЗначение("Справочник.ВидыКорректировок.БонусыОтПоставщиковКросс2"),
				Период.ДатаНачала,
				Период.ДатаОкончания,
				СтрокаДерева.СуммаОтгрузки,
				ПроцентПремии,
				СтрокаДерева.СуммаЗакупки - СтрокаДерева.СуммаВозврата);
								
				НовыйДокумент = Документы.КорректировкаДолга.СоздатьДокумент();
				НовыйДокумент.Дата = ТекущаяДатаСеанса();
				
				ЗаполнитьЗначенияСвойств(НовыйДокумент, ПараметрыДокумента);
				
				НоваяСтрока = НовыйДокумент.СуммыДолга.Добавить();
				НоваяСтрока.ДоговорКонтрагента = ПараметрыДокумента.ДоговорКонтрагента;
				НоваяСтрока.Сумма = СтрокаДерева.СуммаПремии;
				НоваяСтрока.СуммаРегл = СтрокаДерева.СуммаПремии;
				НоваяСтрока.СуммаНУ = СтрокаДерева.СуммаПремии;
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
				НоваяСтрока.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
				НоваяСтрока.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяНеНайдена;
				НоваяСтрока.Контрагент = ПараметрыДокумента.КонтрагентДебитор;
				
				Для Каждого СтруктураДанных Из МассивДокументов Цикл
					ЗаполнитьЗначенияСвойств(НовыйДокумент.ДокументыРасчетаПремии.Добавить(), СтруктураДанных);
				КонецЦикла;
				
				ПечатнаяФорма = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Акт о предоставлении премии");
				ОбработкаОбъект = ПечатнаяФорма.ПолучитьОбъект();
				
				ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("epf");
				ДанныеОбработки = ОбработкаОбъект.ХранилищеВнешнейОбработки.Получить();
				ДанныеОбработки.Записать(ИмяФайлаОтчета);
				
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаДерева.КорректировкаСсылка = НовыйДокумент.Ссылка;
				Исключение
					Попытка
						НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
						СтрокаДерева.КорректировкаСсылка = НовыйДокумент.Ссылка;
					Исключение
						СтрокаДерева.КорректировкаСсылка = "Не удалось записать документ «Корректировка долга» по причине: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					КонецПопытки;
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	ДокументыВыбраны = Ложь;
	Для Каждого Стр Из Данные.ПолучитьЭлементы() Цикл
		Если Стр.Пометка Тогда
			ДокументыВыбраны = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыВыбраны Тогда
		СоздатьДокументыНаСервере();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Пожалуйста, отметьте выгружаемые строки.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	ИДТекущейСтроки = Элементы["Данные"].ТекущаяСтрока;
	
	Если ИДТекущейСтроки <> Неопределено Тогда
		
		ЭлементКоллекции = ЭтаФорма["Данные"].НайтиПоИдентификатору(ИДТекущейСтроки);
		
		Если ЭлементКоллекции.Пометка = 2 Тогда
			ЭлементКоллекции.Пометка = 0;
		КонецЕсли;
		
		УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Пометка);
		
		Родитель = ЭлементКоллекции.ПолучитьРодителя();
		Пока Родитель <> Неопределено Цикл
			Родитель.Пометка = ?(УстановленноДляВсех(ЭлементКоллекции), ЭлементКоллекции.Пометка, 2);
			ЭлементКоллекции = Родитель;
			Родитель = ЭлементКоллекции.ПолучитьРодителя();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаФлажков(ЭлементКоллекции, ЗначениеПометки)

	ПодчинЭлементы = ЭлементКоллекции.ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из ПодчинЭлементы Цикл
		ТекЭлемент.Пометка = ЗначениеПометки;
		УстановкаФлажков(ТекЭлемент, ТекЭлемент.Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УстановленноДляВсех(ЭлементКоллекции)
	
	СоседниеЭлементы = ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из СоседниеЭлементы Цикл
		Если ТекЭлемент.Пометка <> ЭлементКоллекции.Пометка Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбойтиДеревоНаСервере(Пометка)
	
	Дерево = РеквизитФормыВЗначение("Данные");
	
	ОбходДереваДетально(Дерево, Пометка);
	
	ЗначениеВРеквизитФормы(Дерево, "Данные");
	
КонецПроцедуры

&НаСервере
Процедура ОбходДереваДетально(ПереданноеДер, Пометка)
	
	Для Каждого СтрПолученногоДерева Из ПереданноеДер.Строки Цикл
		
		СтрПолученногоДерева.Пометка = Пометка;
		
		Если СтрПолученногоДерева.Строки.Количество() > 0 Тогда
			
			ОбходДереваДетально(СтрПолученногоДерева, Пометка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФильтрОферта = 2; ФильтрVMI = 3;
	
	Если Не ЗначениеЗаполнено(ФилиалСПБ) Тогда
		ФилиалСПБ = Справочники.Контрагенты.НайтиПоКоду("Н0000144");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период.ДатаНачала) Тогда
		//НомерКвартала = Число(Формат(КонецКвартала(Период.ДатаНачала),"ДФ=" "к"));
		НомерКвартала = Формат(НачалоКвартала(Период.ДатаНачала),"ДФ='кк ""квартал"" гггг ""г.""'");
	КонецЕсли;
	
КонецПроцедуры

Процедура Сформировать()
	
	//Перем Запрос, ТекстЗапроса;
	//
	//ИмяФайла = КаталогВременныхФайлов() + "_CatalogBonus.1сk";
	//Файл = Новый Файл(ИмяФайла);
	//Если Не Файл.Существует() Тогда 
	//	СтрОшибки = "Отсутствует внешний файл - с указанием каталога для передачи файлов на сайт!
	//	|Создайте файл: "+ИмяФайла+"
	//	|Акты сформированы не будут!";
	//	Если лок_АвтоЗапуск = 1 Тогда
	//		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.РасчетПремии2Процента, СтрОшибки, "Ошибка при формировании Акта о начислении 2% бонуса", "Stroganov-RI@part-kom.ru");	
	//		//глЗаписьИнформации_ДляОтправкиПоЭлПочте(СтрОшибки, глПеречисл_СобытияДля_ЭлПисем.Программисту1С,, "-PE@Part-kom.ru",, "Ошибка при формировании Акта о начислении 2% бонуса");
	//	Иначе
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрОшибки);
	//	КонецЕсли;
	//	Возврат;
	//КонецЕсли;
	//
	//Текст = СоздатьОбъект("Текст");
	//Текст.Открыть(ИмяФайла);
	//КаталогФайлов_дляСайта = СокрЛП(Текст.ПолучитьСтроку(1));
	//
	//Если ПустаяСтрока(КаталогФайлов_дляСайта) = 1 Тогда
	//	СтрОшибки = "Не указан путь в файле: "+ИмяФайла+"
	//	|Акты сформированы не будут!";
	//	Если лок_АвтоЗапуск = 1 Тогда
	//		глЗаписьИнформации_ДляОтправкиПоЭлПочте(СтрОшибки, глПеречисл_СобытияДля_ЭлПисем.Программисту1С,, "Gorohov-PE@Part-kom.ru",, "Ошибка при формировании Акта о начислении 2% бонуса");
	//	Иначе
	//		Сообщить(СтрОшибки, "!");
	//	КонецЕсли;
	//	Возврат;
	//ИначеЕсли Прав(КаталогФайлов_дляСайта, 1) <> "\" Тогда
	//	КаталогФайлов_дляСайта = КаталогФайлов_дляСайта + "\";
	//КонецЕсли;
	//ИмяФайла = "";
	//
	//КаталогФайлов = КаталогИБ()+"SYSLOG\Bonus\";
	//Если ФС.СуществуетФайл(КаталогФайлов) = 0 Тогда
	//	ФС.СоздатьКаталог(КаталогФайлов);
	//КонецЕсли;
	//КаталогФайлов = КаталогФайлов + ДатаГод(лок_ТекущаяДата)+"-"+ДатаМесяц(лок_ТекущаяДата)+"-"+ДатаЧисло(лок_ТекущаяДата)+"\";
	//Если ФС.СуществуетФайл(КаталогФайлов) = 0 Тогда
	//	ФС.СоздатьКаталог(КаталогФайлов);
	//КонецЕсли; 
	//		
	//лок_Метаданные = СоздатьОбъект("ToyMetadata");
	//
	//тхт_Условие_поКонтрагентам = "";
	//
	//Если спсКонтрагентов.РазмерСписка() > 0 Тогда
	//	тхтID_КА = "";
	//	Для х = 1 По спсКонтрагентов.РазмерСписка() Цикл
	//		тхтID_КА = тхтID_КА + "'"+лок_Метаданные.ЗначВSQL(спсКонтрагентов.ПолучитьЗначение(х))+"',";
	//	КонецЦикла;
	//	
	//	Если ПустаяСтрока(тхтID_КА) = 0 Тогда
	//		тхтID_КА = Лев(тхтID_КА, СтрДлина(тхтID_КА)-1);
	//		тхт_Условие_поКонтрагентам = "IN ("+тхтID_КА+")";
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ПустаяСтрока(тхт_Условие_поКонтрагентам) = 1 Тогда
	//	тхтID_СвоиЮрЛица = "";
	//	сзБезМФП = глВернутьСЗ_СлужебныеКА();
	//	Для х = 1 По сзБезМФП.РазмерСписка() Цикл
	//		тхтID_СвоиЮрЛица = тхтID_СвоиЮрЛица + "'"+лок_Метаданные.ЗначВSQL(сзБезМФП.ПолучитьЗначение(х))+"',";
	//	КонецЦикла;
	//	
	//	Для х = 1 По спсКонтрагентовИскл.РазмерСписка() Цикл
	//		тхтID_СвоиЮрЛица = тхтID_СвоиЮрЛица + "'"+лок_Метаданные.ЗначВSQL(спсКонтрагентовИскл.ПолучитьЗначение(х))+"',";
	//	КонецЦикла;
	//	
	//	Если ПустаяСтрока(тхтID_СвоиЮрЛица) = 0 Тогда
	//		тхтID_СвоиЮрЛица = Лев(тхтID_СвоиЮрЛица, СтрДлина(тхтID_СвоиЮрЛица)-1);
	//		тхт_Условие_поКонтрагентам = "NOT IN ("+тхтID_СвоиЮрЛица+")";
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если глЭтоБазаСПб = 1 Тогда
	//	Поле_ДоговорЗакупки = "SP11348";
	//	Поле_флОферта		= "SP10914";
	//	Поле_флВМИ			= "SP11339";
	//	Поле_ДокОснование 	= "SP9915";
	//	Табл_АР				= "DH9927";
	//Иначе
	//	Если глЭтоБаза_Копия = 1 Тогда
	//		Поле_флОферта		= "SP12528"; 
	//		Поле_флВМИ			= "SP12960";
	//	Иначе
	//		Поле_флОферта		= "SP12635";
	//		Поле_флВМИ			= "SP13102";
	//	КонецЕсли;
	//	Поле_ДоговорЗакупки = "SP11070";
	//	Поле_ДокОснование 	= "SP9975";
	//	Табл_АР				= "DH9989";
	//КонецЕсли;
	//
	//тхт_Условие_поДоговору = "";
	//Если прклДоговорыОферта = 2 Тогда
	//	тхт_Условие_поДоговору = тхт_Условие_поДоговору + " and (SC204."+Поле_флОферта+" = 1)";
	//ИначеЕсли прклДоговорыОферта = 3 Тогда
	//	тхт_Условие_поДоговору = тхт_Условие_поДоговору + " and (SC204."+Поле_флОферта+" = 0)";
	//КонецЕсли;
	//
	//Если прклДоговорыVMI = 2 Тогда
	//	тхт_Условие_поДоговору = тхт_Условие_поДоговору + " and (SC204."+Поле_флВМИ+" = 1)";
	//ИначеЕсли прклДоговорыVMI = 3 Тогда
	//	тхт_Условие_поДоговору = тхт_Условие_поДоговору + " and (SC204."+Поле_флВМИ+" = 0)";
	//КонецЕсли;
	//
	//лок_Запрос = СоздатьОбъект("ToyQuery");
	//лок_Запрос.Соединиться(0);
	//
	//НачДата = Формат(ВыбНачПериода, "ДДДММГГГГ");
	//КонДата = Формат(ВыбКонПериода, "ДДДММГГГГ");
	//
	//ТекстЗапроса = "
	//|SELECT SP1555 as ID_КА, DH1582.IDDOC as ID_Док, SP1562 as СуммаВклНДС, SUM(SP1574) - CASE WHEN SP1562 = 1 THEN SUM(SP1575) ELSE 0 END as Сумма_ПН_безНДС
	//|FROM DH1582 (nolock) LEFT JOIN 
	//|	  _1SJOURN (nolock) ON DH1582.IDDOC = _1SJOURN.IDDOC LEFT JOIN
	//|	  SC204 (nolock) ON DH1582.SP1556 = SC204.ID LEFT JOIN
	//|	  SC172 (nolock) ON DH1582.SP1555 = SC172.ID
	//|WHERE (CLOSED = 1) and
	//|	   (SP2266 >= CONVERT(DATETIME, '" + НачДата + "', 104)) and
	//|      (SP2266 <= CONVERT(DATETIME, '" + КонДата + "', 104)) and
	//|      (DH1582.SP1556 = SC172."+Поле_ДоговорЗакупки+") and
	//|	   (SP1555 "+тхт_Условие_поКонтрагентам+")"+тхт_Условие_поДоговору+"
	//|GROUP BY SP1555, DH1582.IDDOC, SP1562
	//|ORDER BY SP1555, DH1582.IDDOC, SP1562";  
	//
	//// запрос по дате документа авто-размещение
	////ТекстЗапроса = "
	////|SELECT SP1555 as ID_КА, DH1582.IDDOC as ID_Док, SP1562 as СуммаВклНДС, SUM(SP1574) - CASE WHEN SP1562 = 1 THEN SUM(SP1575) ELSE 0 END as Сумма_ПН_безНДС
	////|FROM "+Табл_АР+" (nolock) LEFT JOIN 
	////|	  _1SJOURN as _1SJ (nolock)  ON "+Табл_АР+".IDDOC = _1SJ.IDDOC LEFT JOIN
	////|	  DH1582 (nolock) ON "+Табл_АР+"."+Поле_ДокОснование+" = ' 17Y'+DH1582.IDDOC LEFT JOIN 
	////|	  _1SJOURN as _1SJ1 (nolock) ON DH1582.IDDOC = _1SJ1.IDDOC LEFT JOIN
	////|	  SC204 (nolock) ON DH1582.SP1556 = SC204.ID LEFT JOIN
	////|	  SC172 (nolock) ON DH1582.SP1555 = SC172.ID
	////|WHERE (_1SJ1.CLOSED = 1) and
	////|	   (left(_1SJ.DATE_TIME_IDDOC, 8) >= CONVERT(DATETIME, '" + НачДата + "', 104)) and
	////|      (left(_1SJ.DATE_TIME_IDDOC, 8) <= CONVERT(DATETIME, '" + КонДата + "', 104)) and
	////|      (DH1582.SP1556 = SC172."+Поле_ДоговорЗакупки+") and
	////|	   (SP1555 "+тхт_Условие_поКонтрагентам+")"+тхт_Условие_поДоговору+"
	////|GROUP BY SP1555, DH1582.IDDOC, SP1562
	////|ORDER BY SP1555, DH1582.IDDOC, SP1562";
	//
	//ТЗ_Поступления_Док = глВернутьПустуюТЗ();
	//Если лок_Запрос.ВыполнитьЗапрос(ТекстЗапроса,0) <> 0 Тогда
	//	лок_Запрос.Выгрузить(ТЗ_Поступления_Док,0,1,1);
	//Иначе
	//	СтрОшибки = "Не удалось получить иформацию об остатках SQL-запросом для отправки отчета поставщику по запросу с сайта.
	//	|Ошибка запроса: "+лок_Запрос.Ошибка;
	//	Если лок_АвтоЗапуск = 1 Тогда
	//		глЗаписьИнформации_ДляОтправкиПоЭлПочте(СтрОшибки, глПеречисл_СобытияДля_ЭлПисем.Программисту1С,, "Gorohov-PE@Part-kom.ru",, "Ошибка при формировании Акта о начислении 2% бонуса");
	//	Иначе
	//		Сообщить(СтрОшибки, "!");
	//	КонецЕсли;
	//	Возврат;
	//КонецЕсли;
	//
	//ТекстЗапроса = "
	//|SELECT SP1657 as ID_КА, DH1684.IDDOC as ID_Док, SP1664 as СуммаВклНДС, SUM(SP1677)- CASE WHEN SP1664 = 1 THEN SUM(SP1678) ELSE 0 END as Сумма_Возвратов_безНДС
	//|FROM DH1684 (nolock) LEFT JOIN
	//|     _1SJOURN (nolock) ON DH1684.IDDOC = _1SJOURN.IDDOC LEFT JOIN
	//|     SC204 (nolock) ON DH1684.SP1658 = SC204.ID LEFT JOIN
	//|	  SC172 (nolock) ON DH1684.SP1657 = SC172.ID
	//|WHERE (CLOSED = 1) and
	//|      (left(_1SJOURN.DATE_TIME_IDDOC, 8) >= CONVERT(DATETIME, '"+НачДата+"', 104)) and
	//|      (left(_1SJOURN.DATE_TIME_IDDOC, 8) <= CONVERT(DATETIME, '"+КонДата+"', 104)) and
	//|      (DH1684.SP1658 = SC172."+Поле_ДоговорЗакупки+") and
	//|      (SP1657 "+тхт_Условие_поКонтрагентам+")"+тхт_Условие_поДоговору+"
	//|GROUP BY SP1657, DH1684.IDDOC, SP1664
	//|ORDER BY SP1657, DH1684.IDDOC, SP1664";
	//
	//ТЗ_Возвраты_Док = глВернутьПустуюТЗ();
	//Если лок_Запрос.ВыполнитьЗапрос(ТекстЗапроса,0) <> 0 Тогда
	//	лок_Запрос.Выгрузить(ТЗ_Возвраты_Док,0,1,1);
	//Иначе
	//	СтрОшибки = "Не удалось получить иформацию об остатках SQL-запросом для отправки отчета поставщику по запросу с сайта.
	//	|Ошибка запроса: "+лок_Запрос.Ошибка;
	//	Если лок_АвтоЗапуск = 1 Тогда
	//		глЗаписьИнформации_ДляОтправкиПоЭлПочте(СтрОшибки, глПеречисл_СобытияДля_ЭлПисем.Программисту1С,, "Gorohov-PE@Part-kom.ru",, "Ошибка при формировании Акта о начислении 2% бонуса");
	//	Иначе
	//		Сообщить(СтрОшибки, "!");
	//	КонецЕсли;
	//	Возврат;
	//КонецЕсли;
	//
	////Сообщить(""+ТекущееВремя());
	//
	////Сообщить("Поступления: "+ТЗ_Поступления.Итог("Сумма_ПН_безНДС"));
	////Сообщить("Возвраты: "+ТЗ_Возвраты.Итог("Сумма_Возвратов_безНДС"));
	//
	//ТЗ_Поступления = глВернутьПустуюТЗ();
	//ТЗ_Поступления_Док.Выгрузить(ТЗ_Поступления);
	//ТЗ_Возвраты = глВернутьПустуюТЗ();
	//ТЗ_Возвраты_Док.Выгрузить(ТЗ_Возвраты);
	//
	//ТЗ_Поступления.Свернуть("ID_КА", "Сумма_ПН_безНДС");
	//ТЗ_Поступления.НоваяКолонка("СуммаБонуса", "Число");
	//ТЗ_Возвраты.Свернуть("ID_КА", "Сумма_Возвратов_безНДС");
	//
	//х = 1;
	//Пока х <= ТЗ_Поступления.КоличествоСтрок() Цикл 
	//	ТЗ_Поступления.ПолучитьСтрокуПоНомеру(х);
	//	Если ТЗ_Поступления.Сумма_ПН_безНДС < СуммаОборота Тогда
	//		ТЗ_Поступления.УдалитьСтроку(х);
	//		Продолжить;
	//	КонецЕсли;
	//	нс = 0;
	//	Если ТЗ_Возвраты.НайтиЗначение(ТЗ_Поступления.ID_КА, нс, "ID_КА") = 1 Тогда
	//		ТЗ_Поступления.Сумма_ПН_безНДС = ТЗ_Поступления.Сумма_ПН_безНДС - ТЗ_Возвраты.ПолучитьЗначение(нс, "Сумма_Возвратов_безНДС");			
	//	КонецЕсли;
	//	Если ТЗ_Поступления.Сумма_ПН_безНДС < СуммаОборота Тогда
	//		ТЗ_Поступления.УдалитьСтроку(х);
	//		Продолжить;
	//	КонецЕсли;
	//	ТЗ_Поступления.СуммаБонуса = ТЗ_Поступления.Сумма_ПН_безНДС / 100 * ПроцентБонуса;
	//	х = х + 1;
	//КонецЦикла;
	//
	//сз_Файлов = СоздатьОбъект("СписокЗначений");
	//		
	//Файл_вPDF = 1;

	////ТЗ_Поступления.ВыбратьСтроку();
	////Сообщить(""+ТЗ_Поступления.КоличествоСтрок()); 
	////Возврат;
	//
	//Если флДовыписка = 1 Тогда
	//	// с 12.01.2018
	//	// добавим проверку на наличие уже созданных документов корректировка долга
	//	// и пропустим их
	//	Запрос_2 = СоздатьОбъект("Запрос");
	//	ТекстЗапроса_2 = "
	//	|Период с (НачМесяца(лок_ТекущаяДата)) по (лок_ТекущаяДата);
	//	|Контрагент = Документ.КорректировкаДолга.Контрагент;
	//	|флБонусПоставщику = Документ.КорректировкаДолга.флБонусПоставщику;
	//	|ДатаНач_Акта = Документ.КорректировкаДолга.ДатаНач_Акта;
	//	|ДатаКон_Акта = Документ.КорректировкаДолга.ДатаКон_Акта;
	//	|Группировка Контрагент без групп;
	//	|Условие(флБонусПоставщику = 1);
	//	|Условие(ДатаНач_Акта >= ВыбНачПериода);
	//	|Условие(ДатаКон_Акта <= ВыбКонПериода);
	//	|";
	//	Если Запрос_2.Выполнить(ТекстЗапроса_2) = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	локТЗ_КА_СделанныеАкты = глВернутьПустуюТЗ();
	//	Запрос_2.Выгрузить(локТЗ_КА_СделанныеАкты,0,0);
	//	Запрос_2 = "";
	//	
	//	Текст_Пропущены = СоздатьОбъект("Текст");
	//	Текст_Пропущены.ДобавитьСтроку("Список контрагентов, которые пропущены (у них уже есть Акты) :");
	//КонецЕсли;
	//
	//СтрОшибки = "";
	//
	//ТЗ_Поступления.НоваяКолонка("Контрагент", "Справочник.Контрагенты");
	//ТЗ_Поступления.НоваяКолонка("Каталог", "Строка");
	//ТЗ_Поступления.НоваяКолонка("ИмяФайла", "Строка");
	//
	//Для х = 1 По ТЗ_Поступления.КоличествоСтрок() Цикл
	//	ТЗ_Поступления.ПолучитьСтрокуПоНомеру(х);
	//	ТекКА = лок_Метаданные.ЗначИзSQL(ТЗ_Поступления.ID_КА,11,172);
	//	ТЗ_Поступления.Контрагент = ТекКА;
	//	
	//	Если флДовыписка = 1 Тогда
	//		стрТЗ = 0;
	//		Если локТЗ_КА_СделанныеАкты.НайтиЗначение(ТекКА, стрТЗ, "Контрагент") = 1 Тогда
	//			Сообщить("Пропущен контрагент "+ТекКА+", так как на него уже сделан акт и документ Корректировка долга.");
	//			Текст_Пропущены.ДобавитьСтроку(""+ТекКА.Код+";"+ТекКА.Наименование);
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;

	//	ЮрЛицо = ТекКА.ОснДоговорПокупки.Фирма_Закупок.ЮрЛицо;
	//	ПечПокупатель = СокрЛП(ЮрЛицо.ПолнНаименование) + ?(ПустоеЗначение(ЮрЛицо.ИНН)=0, ", ИНН " + СокрЛП(ЮрЛицо.ИНН), "");
	//	ЮрФизЛицо = ТекКА.ЮрФизЛицо;
	//	ПечПоставщик = СокрЛП(ЮрФизЛицо.ПолнНаименование) +	?(ПустоеЗначение(ЮрФизЛицо.ИНН) = 0, ", ИНН " + СокрЛП(ЮрФизЛицо.ИНН), "");
	//	
	//	ТекВремя = СтрЗаменить(ТекущееВремя(),":","");
	//	ТекКаталог = КаталогФайлов+СокрЛП(ТекКА.Код)+"\";
	//	Если ФС.СуществуетФайл(ТекКаталог) = 0 Тогда
	//		ФС.СоздатьКаталог(ТекКаталог);
	//	КонецЕсли;
	//
	//	ИсхТабл = СоздатьОбъект("Таблица");
	//	ИсхТабл.ИсходнаяТаблица("Таблица");
	//	ИсхТабл.Опции(0, 0, 0, 0);
	//	ИсхТабл.ВывестиСекцию("Шапка");
	//	
	//	тз_Док = глВернутьПустуюТЗ();
	//	тз_Док.НоваяКолонка("Документ", "Документ");
	//	тз_Док.НоваяКолонка("Сумма_ПН_безНДС", "Число");
	//	тз_Док.НоваяКолонка("Сумма_Возвратов_безНДС", "Число");
	//	
	//	нс = 0;
	//	Пока ТЗ_Поступления_Док.НайтиЗначение(ТЗ_Поступления.ID_КА, нс, "ID_КА") = 1 Цикл
	//		ТЗ_Поступления_Док.ПолучитьСтрокуПоНомеру(нс);
	//		ТекДокПН = лок_Метаданные.ЗначИзSQL(ТЗ_Поступления_Док.ID_Док,12,1582);
	//		
	//		тз_Док.НоваяСтрока();
	//		тз_Док.Документ = ТекДокПН;
	//		тз_Док.Сумма_ПН_безНДС = ТЗ_Поступления_Док.Сумма_ПН_безНДС;
	//		
	//		ТЗ_Поступления_Док.УдалитьСтроку(нс);
	//		нс = 0;
	//	КонецЦикла;
	//	нс = 0;
	//	Пока ТЗ_Возвраты_Док.НайтиЗначение(ТЗ_Поступления.ID_КА, нс, "ID_КА") = 1 Цикл
	//		ТЗ_Возвраты_Док.ПолучитьСтрокуПоНомеру(нс);
	//		ТекДокВозврат = лок_Метаданные.ЗначИзSQL(ТЗ_Возвраты_Док.ID_Док,12,1684);
	//		
	//		тз_Док.НоваяСтрока();
	//		тз_Док.Документ = ТекДокВозврат;
	//		тз_Док.Сумма_Возвратов_безНДС = ТЗ_Возвраты_Док.Сумма_Возвратов_безНДС;
	//		
	//		ТЗ_Возвраты_Док.УдалитьСтроку(нс);
	//		нс = 0;
	//	КонецЦикла;
	//	
	//	ПромежИтог = 0;
	//	тз_Док.Сортировать("Документ", 1); 
	//	тз_Док.ВыбратьСтроки();
	//	Пока тз_Док.ПолучитьСтроку() = 1 Цикл
	//		ТекДок = тз_Док.Документ;
	//		Если ТекДок.Вид() = "ПоступлениеТМЦ" Тогда
	//			НомерДокПоставщика = ТекДок.НомерДокВходящий;
	//			ДатаДокПоставщика = ТекДок.ДатаДокВходящий;
	//		Иначе
	//			НомерДокПоставщика = ТекДок.НомерДок; 
	//			ДатаДокПоставщика = ТекДок.ДатаДок;
	//		КонецЕсли;
	//		ПромежИтог = ПромежИтог + тз_Док.Сумма_ПН_безНДС - тз_Док.Сумма_Возвратов_безНДС;
	//		ИсхТабл.ВывестиСекцию("Строка");
	//	КонецЦикла;
	//	
	//	ИсхТабл.ВывестиСекцию("Итого");
	//	ИсхТабл.ПараметрыСтраницы(1,,,5,5,5,5,,,1,,);
	//	
	//	ИсхТабл.ТолькоПросмотр(1);
	//	ИсхТабл.Показать();
	//	Если Файл_вPDF = 0 Тогда
	//		ИмяФайла = "Расш_ведомость_"+ТекВремя+".xls";
	//		ИсхТабл.Записать(ТекКаталог+ИмяФайла, 1);
	//	Иначе
	//		ИмяФайла_mxl = "Расш_ведомость_"+ТекВремя+".mxl";
	//		ИсхТабл.Записать(ТекКаталог+ИмяФайла_mxl);
	//		
	//		Таб = СоздатьОбъект("ТабличныйДокумент");
	//		Таб.Открыть(ТекКаталог+ИмяФайла_mxl);
	//		
	//		// в формате PDF
	//		Конвертер = СоздатьОбъект("Йоксель.ГрафическийКонвертер.PDF");
	//		Конвертер.Документ = Таб;
	//		
	//		ИмяФайла = Лев(ИмяФайла_mxl, СтрДлина(ИмяФайла_mxl)-3)+"pdf";
	//		Попытка
	//			Конвертер.ЗаписатьВФайл(ТекКаталог+ИмяФайла);
	//		Исключение
	//			СтрОшибки = СтрОшибки + "
	//			|"+СокрЛП(ТекКА.Наименование)+" (код: "+СокрЛП(ТекКА.Код)+")";
	//			Продолжить;
	//		КонецПопытки;
	//		
	//		Если ФС.СуществуетФайл(ТекКаталог+ИмяФайла_mxl) = 1 Тогда
	//			ФС.УдалитьФайл(ТекКаталог+ИмяФайла_mxl);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	ТЗ_Поступления.Каталог = ТекКаталог;
	//	ТЗ_Поступления.ИмяФайла = ИмяФайла;
	//	
	//	//сз_Файлов.ДобавитьЗначение(ТекКаталог+ИмяФайла);
	//КонецЦикла;
	//
	//Если (флДовыписка = 1) и (лок_АвтоЗапуск = 0) Тогда
	//	Если Текст_Пропущены.КоличествоСтрок() > 1 Тогда
	//		Текст_Пропущены.Показать("Пропущены");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ПустаяСтрока(СтрОшибки) = 0 Тогда
	//	СтрОшибки = "Не удалось сохранить расш.ведомость в PDF. Возможно, табличный документ слишком большой или нет доступа у указанному каталогу.
	//	|Документы не созданы и не отправлены следующим поставщикам:"+СтрОшибки;
	//	Если лок_АвтоЗапуск = 1 Тогда
	//		глЗаписьИнформации_ДляОтправкиПоЭлПочте(СтрОшибки, глПеречисл_СобытияДля_ЭлПисем.Программисту1С,, "Gorohov-PE@Part-kom.ru",, "Ошибка при формировании Акта о начислении 2% бонуса");
	//	Иначе
	//		Сообщить(СтрОшибки, "!");
	//	КонецЕсли;
	//КонецЕсли;
	//
	////ТЗ_Поступления.ВыбратьСтроку();
	////Возврат;
	//
	//ДокКорр = СоздатьОбъект("Документ.КорректировкаДолга");
	//ТЗ_Док_дляОП = СоздатьОбъект("ТаблицаЗначений"); 
	//ТЗ_Док_дляОП.НоваяКолонка("ДокКорр", "Документ.КорректировкаДолга");
	//ТЗ_Док_дляОП.НоваяКолонка("Контрагент", "Справочник.Контрагенты");
	//ТЗ_Док_дляОП.НоваяКолонка("Каталог", "Строка");
	//ТЗ_Док_дляОП.НоваяКолонка("ФайлАкта", "Строка"); 
	//ТЗ_Док_дляОП.НоваяКолонка("ФайлРасш", "Строка");
	//ТЗ_Док_дляОП.НоваяКолонка("ВремяДатаФайлов", "Строка");
	//
	//СпрДДС = СоздатьОбъект("Справочник.ДвиженияДенежныхСредств");
	//лок_ДДС_Бонусы = "";
	//Если глЭтоБазаСПб = 1 Тогда
	//	КодДДС_Бонус = "С0211";
	//Иначе
	//	КодДДС_Бонус = "D0012";//КодДДС_Бонус = "Н0002";
	//КонецЕсли;
	//Если СпрДДС.НайтиПоКоду(КодДДС_Бонус, 0) = 1 Тогда
	//	лок_ДДС_Бонусы = СпрДДС.ТекущийЭлемент();
	//КонецЕсли;
	//
	////ТранзакцияОтменена = 0;
	//СтрОшибки = "";
	//
	//ТЗ_Поступления.ВыбратьСтроки();
	//Пока ТЗ_Поступления.ПолучитьСтроку() = 1 Цикл
	//	
	//	ТекКА = ТЗ_Поступления.Контрагент;
	//	
	//	Если ПустоеЗначение(ТЗ_Поступления.ИмяФайла) = 1 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//
	//	НачатьТранзакцию();
	//	Попытка
	//		ДокКорр.Новый();
	//	Исключение
	//		//ТранзакцияОтменена = 1;
	//		СтрОшибки = СтрОшибки + "
	//		|"+СокрЛП(ТекКА.Наименование)+" (код: "+СокрЛП(ТекКА.Код)+")";
	//		сз_Файлов.ДобавитьЗначение(ТЗ_Поступления.Каталог+ТЗ_Поступления.ИмяФайла);
	//		ОтменитьТранзакцию();
	//		Продолжить;
	//	КонецПопытки;
	//	ДокКорр.Фирма 					= ТекКА.ОснДоговорПокупки.Фирма_Закупок;
	//	глПриИзмененииФирмы(ДокКорр);
	//	глЗаполнитьШапку(ДокКорр, 0);
	//	ДокКорр.ВидОперации 			= лок_ВидОперации;
	//	глПриВыбореБухСчета(ДокКорр, 0);
	//	ДокКорр.Договор 				= ТекКА.ОснДоговорПокупки;
	//	ДокКорр.Контрагент 				= ТекКА;
	//	ДокКорр.Сумма 					= ТЗ_Поступления.СуммаБонуса;
	//	ДокКорр.СуммаВзаиморасчетов 	= ДокКорр.Сумма;
	//	ДокКорр.ДатаОплаты 				= лок_ТекущаяДата;
	//	ДокКорр.флБонусПоставщику 		= 1;
	//	ДокКорр.СуммаОборота 			= ТЗ_Поступления.Сумма_ПН_безНДС;
	//	ДокКорр.ДатаАкта 				= лок_ТекущаяДата;
	//	ДокКорр.ПроцентБонуса 			= ПроцентБонуса;
	//	ДокКорр.ДатаНач_Акта 			= НачДата;
	//	ДокКорр.ДатаКон_Акта 			= КонДата;
	//	ДокКорр.ДвижениеДенежныхСредств = лок_ДДС_Бонусы;
	//	ДокКорр.Комментарий 			= "Бонус 2%";
	//	ДокКорр.АвтоВремяТекущее();
	//	Попытка
	//		ДокКорр.Записать();
	//		чч=0; мм=0; сс=0;
	//		ПолучитьВремяТА(чч,мм,сс);
	//		ДокКорр.УстановитьВремя(чч, мм, сс);
	//		ДокКорр.Провести(3);
	//	Исключение
	//		//ТранзакцияОтменена = 1;
	//		СтрОшибки = СтрОшибки + "
	//		|"+СокрЛП(ТекКА.Наименование)+" (код: "+СокрЛП(ТекКА.Код)+")";
	//		сз_Файлов.ДобавитьЗначение(ТЗ_Поступления.Каталог+ТЗ_Поступления.ИмяФайла);
	//		ОтменитьТранзакцию();
	//		Продолжить;
	//	КонецПопытки;
	//	
	//	Попытка
	//		ЗафиксироватьТранзакцию();
	//	Исключение
	//		//ТранзакцияОтменена = 1;
	//		СтрОшибки = СтрОшибки + "
	//		|"+СокрЛП(ТекКА.Наименование)+" (код: "+СокрЛП(ТекКА.Код)+")";
	//		сз_Файлов.ДобавитьЗначение(ТЗ_Поступления.Каталог+ТЗ_Поступления.ИмяФайла);
	//		Продолжить;
	//	КонецПопытки;
	//	
	//	ТекВремя = ТекущееВремя();
	//	ТекВремяСтр = СтрЗаменить(ТекущееВремя(),":","");
	//	ТекКаталог = ТЗ_Поступления.Каталог; 
	//	ИмяФайла = "Акт_"+СокрЛП(ДокКорр.НомерДок)+"_"+СтрЗаменить(ДокКорр.ДатаДок, ".","")+"_"+ТекВремяСтр;
	//	ПолноеИмяФайла = ТекКаталог+"Акт_"+СокрЛП(ДокКорр.НомерДок)+"_"+СтрЗаменить(ДокКорр.ДатаДок, ".","")+"_"+ТекВремяСтр;
	//	
	//	Параметры = глВернутьПустойСЗ();
	//	Параметры.ДобавитьЗначение(ДокКорр.ТекущийДокумент(), "Контекст");
	//	Параметры.ДобавитьЗначение(0, "Устройство");
	//	Параметры.ДобавитьЗначение(1, "КоличествоКопий");
	//	Параметры.ДобавитьЗначение(Файл_вPDF, "PDF");
	//	Параметры.ДобавитьЗначение(ПолноеИмяФайла, "Сохранить_вФайл");
	//	
	//	ОткрытьФормуМодально("Отчет", Параметры, глКаталогПечФорм+"Печать_Акт_Бонусы_2%.ERT");
	//	
	//	//сз_Файлов.ДобавитьЗначение(ПолноеИмяФайла+?(Файл_вPDF = 1,".pdf",".xls"));
	//	
	//	НовоеИмяФайла_РасшВедомости = "Расш_ведомость_"+СокрЛП(ДокКорр.НомерДок)+"_"+СтрЗаменить(ДокКорр.ДатаДок, ".","")+"_"+ТекВремяСтр+?(Файл_вPDF = 1,".pdf",".xls");
	//    ФС.УстТекКаталог(ТекКаталог);
	//	ФС.ПереименоватьФайл(ТЗ_Поступления.ИмяФайла, НовоеИмяФайла_РасшВедомости, 1);
	//	//сз_Файлов.ДобавитьЗначение(ТекКаталог+НовоеИмяФайла_РасшВедомости);
	//	
	//	ТЗ_Док_дляОП.НоваяСтрока();
	//	ТЗ_Док_дляОП.ДокКорр = ДокКорр.ТекущийДокумент();
	//	ТЗ_Док_дляОП.Контрагент = ТекКА;
	//	ТЗ_Док_дляОП.Каталог = ТекКаталог;
	//	ТЗ_Док_дляОП.ФайлАкта = ИмяФайла+?(Файл_вPDF = 1,".pdf",".xls");
	//	ТЗ_Док_дляОП.ФайлРасш = НовоеИмяФайла_РасшВедомости;
	//	ТЗ_Док_дляОП.ВремяДатаФайлов = лок_MySQL_ПеревернутьДату(лок_ТекущаяДата)+" "+СокрЛП(ТекВремя);
	//	
	//КонецЦикла;                                                        
	//
	//Если ПустаяСтрока(СтрОшибки) = 0 Тогда
	//	СтрОшибки = "Не удалось создать/провести из-за блокировок документы ""Корректировка долга"" по следующим поставщикам:"+СтрОшибки;
	//	Если лок_АвтоЗапуск = 1 Тогда
	//		глЗаписьИнформации_ДляОтправкиПоЭлПочте(СтрОшибки, глПеречисл_СобытияДля_ЭлПисем.Программисту1С,, "Gorohov-PE@Part-kom.ru",, "Ошибка при формировании Акта о начислении 2% бонуса");
	//	Иначе
	//		Сообщить(СтрОшибки, "!");
	//	КонецЕсли;
	//	Для х = 1 По сз_Файлов.РазмерСписка() Цикл
	//		ТекФайл = сз_Файлов.ПолучитьЗначение(х);
	//		Если ФС.СуществуетФайл(ТекФайл) = 1 Тогда 
	//			ФС.УдалитьФайл(ТекФайл);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	////Если ТранзакцияОтменена = 1 Тогда
	////	Для х = 1 По сз_Файлов.РазмерСписка() Цикл
	////		ТекФайл = сз_Файлов.ПолучитьЗначение(х);
	////		Если ФС.СуществуетФайл(ТекФайл) = 1 Тогда 
	////			ФС.УдалитьФайл(ТекФайл);
	////		КонецЕсли;
	////	КонецЦикла;
	////	Возврат;
	////Иначе
	////	ЗафиксироватьТранзакцию();
	////КонецЕсли;
	//	
	//тхтСклад = ?(глЭтоБазаСПб=1, "Санкт-Петербург", "Нижний_Новгород");
	//Если ПустаяСтрока(тхтСклад) = 0 Тогда
	//	тхтСклад = " ("+тхтСклад+")";
	//КонецЕсли;
	//
	//Табл = СоздатьОбъект("Таблица");
	//Табл.ИсходнаяТаблица("КА");
	//Табл.ВывестиСекцию("Шапка");
	//Табл.Опции(0,0,Табл.ВысотаТаблицы(),0);
	//
	//ТЗ_Док_дляОП.ВыбратьСтроки();
	//Пока ТЗ_Док_дляОП.ПолучитьСтроку() = 1 Цикл
	//	
	//	ТекКА = ТЗ_Док_дляОП.Контрагент;
	//	
	//	Табл.ВывестиСекцию("Строка");
	//	
	//	сзПараметры = глВернутьПустойСЗ();
	//	
	//	ТекАдресОтКого = СокрЛП(глКонстанта_ИзКэша("АдресОтКогоОбщий"));
	//	ТекАдресКому = СокрЛП(ТекКА.ЭлПочта);
	//	
	//	ТекстПисьма = "Уважаемые коллеги!
	//	|
	//	|Направляем акт о начислении премии (согласно Приложения 4 к Оферте договора поставки).
	//	|Данная премия начисляется 1 раз в квартал и составляет  "+ПроцентБонуса+"% от общей стоимости Товаров, отгруженных Покупателю Поставщиком за указанный период.
	//	|В расшифровочной ведомости отображены приходные накладные и возвраты на основании которых происходил расчет итоговой суммы премии.
	//	|
	//	|Необходимо: 
	//	|• В срок до 17-го числа текущего месяца приложить скан подписанного и с печатью акта в личном кабинете Поставщика (окно поставщика – раздел Бонусы)"+"
	//	|• В срок до 20-го числа текущего месяца направить оригинал подписанного и с печатью акта
	//	|
	//	|По всем вопросам просьба обращаться к Вашему личному менеджеру ПартКом. 
	//	|
	//	|С уважением,
	//	|Компания ПартКом.";
	//	спрОтпрПочты = СоздатьОбъект("Справочник.ДляОтправкиЗаказов_поПочте");
	//	спрОтпрПочты.ВыбратьЭлементыПоРеквизиту("Поставщик",ТекКА,0,0);
	//	Пока спрОтпрПочты.ПолучитьЭлемент() = 1 Цикл
	//		Если (ПустаяСтрока(спрОтпрПочты.АдресОтКого) = 0) и (ПустаяСтрока(спрОтпрПочты.АдресПоставщика) = 0) Тогда
	//			ТекАдресОтКого	= СокрЛП(спрОтпрПочты.АдресОтКого); 
	//			Если ПустоеЗначение(ТекАдресКому) = 1 Тогда
	//				ТекАдресКому	= СокрЛП(спрОтпрПочты.АдресПоставщика);
	//			КонецЕсли;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	сзПараметры.ДобавитьЗначение(ТекАдресКому,   "АдресКому");
	//	сзПараметры.ДобавитьЗначение(ТекАдресОтКого, "АдресОтКого");
	//	сзПараметры.ДобавитьЗначение("Акт о начислении премии за период: "+ПериодСтр(ВыбНачПериода, ВыбКонПериода)+тхтСклад,"Тема");
	//	сзПараметры.ДобавитьЗначение(ТЗ_Док_дляОП.Каталог+ТЗ_Док_дляОП.ФайлАкта+";"+ТЗ_Док_дляОП.Каталог+ТЗ_Док_дляОП.ФайлРасш,"Файл");
	//	сзПараметры.ДобавитьЗначение(ТекстПисьма,"ТекстПисьма");
	//	
	//	глОтправитьПоЭлПочте_СВН(сзПараметры, 1);
	//	
	//	ФС.КопироватьФайл(ТЗ_Док_дляОП.Каталог+ТЗ_Док_дляОП.ФайлАкта, КаталогФайлов_дляСайта+ТЗ_Док_дляОП.ФайлАкта, 0);
	//	ФС.КопироватьФайл(ТЗ_Док_дляОП.Каталог+ТЗ_Док_дляОП.ФайлРасш, КаталогФайлов_дляСайта+ТЗ_Док_дляОП.ФайлРасш, 0);
	//	
	//	Если MySQL_гл_Выгрузить_вОкноПоставщика_Бонусы(ТЗ_Док_дляОП.ДокКорр.ТекущийДокумент(), ТЗ_Док_дляОП.ФайлАкта, ТЗ_Док_дляОП.ФайлРасш, ТЗ_Док_дляОП.ВремяДатаФайлов, ТЗ_Док_дляОП.ВремяДатаФайлов) = 0 Тогда
	//		Сообщить("Не удалось выгрузить в ОП", "!");
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если лок_АвтоЗапуск = 1 Тогда
	//Иначе
	//	Табл.ТолькоПросмотр(1);
	//	Табл.Показать();
	////КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Если КонецКвартала(Период.ДатаНачала) <> КонецКвартала(Период.ДатаОкончания) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Пожалуйста, укажите период внутри одного квартала.";
		Сообщение.Поле = "Элементы.Период";
		Сообщение.Сообщить(); 
		Период.ДатаНачала = Дата('00010101');
		Период.ДатаОкончания = Дата('00010101');
	Иначе
		НомерКвартала = Число(Формат(КонецКвартала(Период.ДатаНачала),"ДФ=" "к"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Если РольДоступна("РасширенныйРежимРасчетаПремии2Процента") Тогда
		Элементы.ПроцентПремии.ТолькоПросмотр = Ложь;
		Элементы.ФильтрОферта.ТолькоПросмотр = Ложь;
		Элементы.ФильтрVMI.ТолькоПросмотр = Ложь;
		Элементы.СуммаОборота.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтправитьНаПочтуНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаПочту(Команда)
	ОтправитьНаПочтуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВОкноПоставщикаНаСервере()
	
	Для Каждого СтрПолученногоДерева Из Данные.ПолучитьЭлементы() Цикл
		
		Если Не СтрПолученногоДерева.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиДерева = СтрПолученногоДерева.ПолучитьЭлементы();
		
		Если СтрокиДерева.Количество() > 0 Тогда
			
			Для Каждого Строка Из СтрокиДерева Цикл
				
				Если Строка.Пометка И ЗначениеЗаполнено(Строка.КорректировкаСсылка) Тогда
					
					ПечатнаяФорма = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Выгрузка акта поставщику в ОП");
					ОбработкаОбъект = ПечатнаяФорма.ПолучитьОбъект();
					
					ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("epf");
					ДанныеОбработки = ОбработкаОбъект.ХранилищеВнешнейОбработки.Получить();
					ДанныеОбработки.Записать(ИмяФайлаОтчета); 
					
					ПечатнаяФорма = ВнешниеОбработки.Создать(ИмяФайлаОтчета, Ложь);
					ПечатнаяФорма.Печать(Строка.КорректировкаСсылка);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВОкноПоставщика(Команда)
	ВыгрузитьВОкноПоставщикаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВОкноПоставщика2(Команда)
	ВыгрузитьВОкноПоставщикаНаСервере2();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВОкноПоставщикаНаСервере2()
	
	Для Каждого Строка Из ТаблицаДокументов Цикл
		
		ПечатнаяФорма = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Выгрузка акта поставщику в ОП");
		ОбработкаОбъект = ПечатнаяФорма.ПолучитьОбъект();
		
		ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("epf");
		ДанныеОбработки = ОбработкаОбъект.ХранилищеВнешнейОбработки.Получить();
		ДанныеОбработки.Записать(ИмяФайлаОтчета); 
		
		ПечатнаяФорма = ВнешниеОбработки.Создать(ИмяФайлаОтчета, Ложь);
		ПечатнаяФорма.Печать(Строка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписок(Команда)
	
	ЗаполнитьСписокСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСервер()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаДолга.Ссылка
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.Комментарий ПОДОБНО ""Загружен%""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументов.Добавить(), ВыборкаДетальныеЗаписи);	
	КонецЦикла;
		
КонецПроцедуры
