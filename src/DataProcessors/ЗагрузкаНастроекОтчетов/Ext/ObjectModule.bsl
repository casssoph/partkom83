Перем мНастройкаПериода Экспорт;
Перем мРежимВводаПериода Экспорт; // (-1) - не выбирать период, 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
Перем ПостроительОтчета;
Перем мРазмещениеПоложениеВыбранныхПолей;

Процедура ВыполнитьНажатие()  Экспорт
	// Вставить содержимое обработчика.
	
	
	УстановитьНастройкиКассы();
	УстановитьНастройкиБанка();

КонецПроцедуры

Функция УстановитьЗапрос()
		ОсновнаяКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
	//ОсновнаяКасса = (лСписокПрав.НайтиПоЗначению(Истина) <> Неопределено);
	УниверсальныйОтчет = Отчеты.УниверсальныйОтчет.Создать().ЭтотОбъект;
	
	//Построитель = Новый ПостроительОтчета;
	//Построитель.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваОстаткиИОбороты.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(ДенежныеСредстваОстаткиИОбороты.Период, ДЕНЬ) КАК ПериодДень,
	|	НАЧАЛОПЕРИОДА(ДенежныеСредстваОстаткиИОбороты.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	|	НАЧАЛОПЕРИОДА(ДенежныеСредстваОстаткиИОбороты.Период, ДЕКАДА) КАК ПериодДекада,
	|	НАЧАЛОПЕРИОДА(ДенежныеСредстваОстаткиИОбороты.Период, МЕСЯЦ) КАК ПериодМесяц,
	|	НАЧАЛОПЕРИОДА(ДенежныеСредстваОстаткиИОбороты.Период, КВАРТАЛ) КАК ПериодКвартал,
	|	НАЧАЛОПЕРИОДА(ДенежныеСредстваОстаткиИОбороты.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|	НАЧАЛОПЕРИОДА(ДенежныеСредстваОстаткиИОбороты.Период, ГОД) КАК ПериодГод,
	|	ДенежныеСредстваОстаткиИОбороты.ВидДенежныхСредств,
	|	ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаПриход КАК СуммаПриход,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаРасход КАК СуммаРасход,
	|	ВЫРАЗИТЬ(ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса.Владелец КАК Справочник.Организации) КАК Организация,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаОборот КАК СуммаОборот
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , ) КАК ДенежныеСредстваОстаткиИОбороты
	|{ГДЕ
	|	ДенежныеСредстваОстаткиИОбороты.Регистратор.* КАК Регистратор,
	|	ДенежныеСредстваОстаткиИОбороты.ПериодДень,
	|	ДенежныеСредстваОстаткиИОбороты.ПериодНеделя,
	|	ДенежныеСредстваОстаткиИОбороты.ПериодДекада,
	|	ДенежныеСредстваОстаткиИОбороты.ПериодМесяц,
	|	ДенежныеСредстваОстаткиИОбороты.ПериодКвартал,
	|	ДенежныеСредстваОстаткиИОбороты.ПериодПолугодие,
	|	ДенежныеСредстваОстаткиИОбороты.ПериодГод,
	|	(ВЫРАЗИТЬ(ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса.Владелец КАК Справочник.Организации)).* КАК Организация,
	|	ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса.*,
	|	ДенежныеСредстваОстаткиИОбороты.ВидДенежныхСредств.*,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаПриход КАК СуммаПриход,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаРасход КАК СуммаРасход,
	|	ДенежныеСредстваОстаткиИОбороты.СуммаОборот}
	|{УПОРЯДОЧИТЬ ПО
	|	Регистратор.* КАК Регистратор,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	ВидДенежныхСредств.*,
	|	БанковскийСчетКасса.*,
	|	Организация.* КАК Организация,
	|	СуммаКонечныйОстаток,
	|	СуммаПриход,
	|	СуммаРасход,
	|	СуммаОборот,
	|	СуммаНачальныйОстаток}
	|ИТОГИ
	|	СУММА(СуммаНачальныйОстаток),
	|	СУММА(СуммаКонечныйОстаток),
	|	СУММА(СуммаПриход),
	|	СУММА(СуммаРасход),
	|	СУММА(СуммаОборот)
	|ПО
	|	ОБЩИЕ
	|{ИТОГИ ПО
	|	Регистратор.*,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	Организация.*,
	|	ВидДенежныхСредств.*,
	|	БанковскийСчетКасса.*}";
	
	//Построитель.ЗаполнитьНастройки();
	
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;

	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	

	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДвижениеДенежныхСредствЦФО", "Центр финансовой ответственности");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДвижениеДенежныхСредствРегион", "Регион");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтатьяДвиженияДенежныхСредств", "Статьи движения ден.средств");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДокументРасчетовСКонтрагентом", "Документ расчетов");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВидДенежныхСредств", "Вид денежных средств");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("БанковскийСчетКасса", "Счет/касса");

	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаНачальныйОстаток", "Начальный остаток");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаКонечныйОстаток", "Конечный остаток");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаПриход", "Приход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаРасход", "Расход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаОборот", "Оборот");

	Возврат УниверсальныйОтчет;
КонецФункции


Процедура УстановитьНастройкиКассы()
	УниверсальныйОтчет = УстановитьЗапрос();
	ОсновнаяКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("БанковскийСчетКасса");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ПериодДень");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("БанковскийСчетКасса",Истина,,ОсновнаяКасса);
	УниверсальныйОтчет.ДобавитьОтбор("ВидДенежныхСредств",Истина,,Перечисления.ВидыДенежныхСредств.Наличные);
	//УниверсальныйОтчет.ДобавитьОтбор("ВалютаДенежныхСредств");
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("ВалютаДенежныхСредств");
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("ВидДенежныхСредств");
	
	// Установка представлений полей
	//УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
//Построитель.уст
	//Отбор = Построитель.Отбор;
	////Отбор.УстановитьДоступныеПоля("Счет/Касса");
	//Отбор.Добавить("БанковскийСчетКасса");
	//Отбор["БанковскийСчетКасса"].Использование = Истина;
	//Отбор["БанковскийСчетКасса"].Значение = ОсновнаяКасса;
	
	СохранитьНастройкиКассы(УниверсальныйОтчет, Отчеты.ОСВБанкКасса, Отчеты.ОСВБанкКасса.ПолучитьФорму("Форма"));
	
КонецПроцедуры

Процедура УстановитьНастройкиБанка()
	УниверсальныйОтчет = УстановитьЗапрос();

	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("БанковскийСчетКасса");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("БанковскийСчетКасса",Ложь,,Справочники.Кассы.ПустаяСсылка());
	УниверсальныйОтчет.ДобавитьОтбор("ВидДенежныхСредств",Истина,,Перечисления.ВидыДенежныхСредств.Безналичные);
	//УниверсальныйОтчет.ДобавитьОтбор("ВалютаДенежныхСредств");
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("ВалютаДенежныхСредств");
	//УниверсальныйОтчет.ДобавитьДополнительноеПоле("ВидДенежныхСредств");
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
//Построитель.уст
	//Отбор = Построитель.Отбор;
	////Отбор.УстановитьДоступныеПоля("Счет/Касса");
	//Отбор.Добавить("БанковскийСчетКасса");
	//Отбор["БанковскийСчетКасса"].Использование = Истина;
	//Отбор["БанковскийСчетКасса"].Значение = ОсновнаяКасса;
	
	СохранитьНастройкиБанка(УниверсальныйОтчет, Отчеты.ОСВБанкКасса, Отчеты.ОСВБанкКасса.ПолучитьФорму("Форма"));
	
КонецПроцедуры

Процедура СохранитьНастройкиКассы(Объект, Отчет, Форма, ИмяОбъекта = Неопределено) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек(Объект,СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь","");
	СтруктураНастройки.Вставить("ИмяОбъекта", "ОтчетОбъект.ОСВБанкКасса");
	СтруктураНастройки.Вставить("НаименованиеНастройки", "Касса");
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки, Неопределено);
	
	Если Результат <> Неопределено Тогда
			
		Объект.мТекущаяНастройка = Результат;
			
	Иначе
		
		Объект.мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
	//Объект.УстановитьЗаголовокФормы(Объект, Отчет, Форма);
	
КонецПроцедуры // СохранитьНастройки()

Процедура СохранитьНастройкиБанка(Объект, Отчет, Форма, ИмяОбъекта = Неопределено) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек(Объект,СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь","");
	СтруктураНастройки.Вставить("ИмяОбъекта", "ОтчетОбъект.ОСВБанкКасса");
	СтруктураНастройки.Вставить("НаименованиеНастройки", "Банк");
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки, Неопределено);
	
	Если Результат <> Неопределено Тогда
			
		Объект.мТекущаяНастройка = Результат;
			
	Иначе
		
		Объект.мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
	//Объект.УстановитьЗаголовокФормы(Объект, Отчет, Форма);
	
КонецПроцедуры // СохранитьНастройки()


Процедура СформироватьСтруктуруДляСохраненияНастроек(Объект, СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	//мНастройкаПериода.ДатаНачала = НачалоГода(ТекущаяДата());
	//мНастройкаПериода.ДатаОкончания = КонецДня(ТекущаяДата());
	
	СтруктураСНастройками.Вставить("НастройкиПостроителя", Объект.ПостроительОтчета.ПолучитьНастройки());
	//СтруктураСНастройками.Вставить("ИмяРегистра", "ДенежныеСредства");
	//СтруктураСНастройками.Вставить("НастройкаПериода", мНастройкаПериода);
	СтруктураСНастройками.Вставить("ОтрицательноеКрасным", Истина);
	

	//СтруктураСНастройками.Вставить("ВыводитьОбщиеИтоги", ВыводитьОбщиеИтоги);
	СтруктураСНастройками.Вставить("ВыводитьДетальныеЗаписи", ложь);
	СтруктураСНастройками.Вставить("ИспользоватьСвойстваИКатегории", ложь);
	//СтруктураСНастройками.Вставить("Показатели", Показатели.Скопировать());
	//СтруктураСНастройками.Вставить("ВариантОформления", ВариантОформления);
	//СтруктураСНастройками.Вставить("Интервалы", Интервалы.Скопировать());
	СтруктураСНастройками.Вставить("РазмещениеПоложениеВыбранныхПолей");
	
	//ПостроительОтчета.УстановитьНастройки(СтруктураСНастройками);
	СкопироватьРазмещениеПоложениеВыбранныхПолей(СтруктураСНастройками.РазмещениеПоложениеВыбранныхПолей, мРазмещениеПоложениеВыбранныхПолей= Новый Структура);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

Процедура СкопироватьРазмещениеПоложениеВыбранныхПолей(Приемник, Источник)
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ТипЗнч(Приемник) = Тип("Структура") Тогда
			
			Приемник.Очистить();
			
		Иначе
			
			Приемник = Новый Структура;
			
		КонецЕсли;
		
		Для каждого ЭлементИсточника Из Источник Цикл
			
			Приемник.Вставить(ЭлементИсточника.Ключ, Новый Структура("Размещение, Положение", ЭлементИсточника.Значение.Размещение, ЭлементИсточника.Значение.Положение));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СкопироватьРазмещениеПоложениеВыбранныхПолей()

Функция СохранениеНастроек(СтруктураНастройки) Экспорт
	
	ФормаУправленияНастройками = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	ФормаУправленияНастройками.мВосстановлениеНастройки = Ложь;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	//Результат.Закрыть();
	Возврат Результат;
	
КонецФункции // СохранитьНастройки()

//Если Показатели.Колонки.Количество() = 0 Тогда
//	
//	Показатели.Колонки.Добавить("Представление");
//	Показатели.Колонки.Добавить("ПредставлениеВОтчете");
//	Показатели.Колонки.Добавить("Ширина");
//	Показатели.Колонки.Добавить("Использование");
//	Показатели.Колонки.Добавить("Имя");
//	Показатели.Колонки.Добавить("ФорматнаяСтрока");
//	
//КонецЕсли;

//Если Интервалы.Колонки.Количество() = 0 Тогда
//	
//	Интервалы.Колонки.Добавить("ВГраница");
//	Интервалы.Колонки.Добавить("ИнтервальноеПоле");
//	Интервалы.Колонки.Добавить("Название");
//	
//КонецЕсли;

мРазмещениеПоложениеВыбранныхПолей = Новый Структура;

мСтруктураПредставлениеПолей = Новый Структура;
мСоответствиеСвойствКатегорийИИзмерений = Новый Соответствие;
мСоответствиеКонтактнойИнформацииИИзмерений = Новый Соответствие;
мСоответствиеДанныхОФизлицеИИзмерений = Новый Соответствие;
мСоответствиеПолейИИзмерений = Новый Соответствие;
мСоответствиеНазначений = Новый Соответствие;
мСоответствиеСвязьПолей = Новый Соответствие;
мСоответствиеТиповИнтервальныхПолей = Новый Соответствие;

мСтруктураФорматаПолей = Новый Структура;
мСтруктураФорматаПолей.Вставить("ПериодДень", "ДФ = дд.ММ.гггг");
мСтруктураФорматаПолей.Вставить("ПериодНеделя","ДФ = '""Неделя с"" дд.ММ.гггг '");
мСтруктураФорматаПолей.Вставить("ПериодДекада","ДФ = '""Декада с"" дд.ММ.гггг '");
мСтруктураФорматаПолей.Вставить("ПериодМесяц", "ДФ = 'ММММ гггг ""г.""'");
мСтруктураФорматаПолей.Вставить("ПериодКвартал", "ДФ = 'к ""квартал"" гггг ""г.""'");
мСтруктураФорматаПолей.Вставить("ПериодПолугодие","ДФ = '""Полугодие с"" дд.ММ.гггг'");
мСтруктураФорматаПолей.Вставить("ПериодГод", "ДФ = 'гггг ""г.""'");

мСтруктураПериодов = Новый Структура;
мСтруктураПериодов.Вставить("ПериодГод", 12);
мСтруктураПериодов.Вставить("ПериодПолугодие", 11);
мСтруктураПериодов.Вставить("ПериодКвартал", 10);
мСтруктураПериодов.Вставить("ПериодМесяц", 9);
мСтруктураПериодов.Вставить("ПериодДекада", 8);
мСтруктураПериодов.Вставить("ПериодНеделя", 7);
мСтруктураПериодов.Вставить("ПериодДень", 6);
мСтруктураПериодов.Вставить("Период", 3);
мСтруктураПериодов.Вставить("Регистратор", 2);

мТаблицаПолей = Новый ТаблицаЗначений;
мТаблицаПолей.Колонки.Добавить("ПутьКДанным");   // описание поля запроса, для которого добавляются свойства и категории
мТаблицаПолей.Колонки.Добавить("ИмяИзмерения");  // имя поля запроса, для которого добавляются свойства и категории
мТаблицаПолей.Колонки.Добавить("Представление"); // представление поля, для которого добавляются свойства и категории
мТаблицаПолей.Колонки.Добавить("Назначение");    // назначение свойств/категорий объектов для данного поля
мТаблицаПолей.Колонки.Добавить("НетКатегорий");  // признак НЕиспользования категорий для объекта

мТаблицаПолейКонтактнаяИнформация = Новый ТаблицаЗначений;
мТаблицаПолейКонтактнаяИнформация.Колонки.Добавить("ПутьКДанным");   // описание поля запроса, для которого добавляется контактная информация
мТаблицаПолейКонтактнаяИнформация.Колонки.Добавить("ИмяИзмерения");  // имя поля запроса, для которого добавляется контактная информация
мТаблицаПолейКонтактнаяИнформация.Колонки.Добавить("Представление"); // представление поля, для которого добавляется контактная информация
мТаблицаПолейКонтактнаяИнформация.Колонки.Добавить("ВидОбъекта");    // вид объекта-владельца контактной информации
мТаблицаПолейКонтактнаяИнформация.Колонки.Добавить("ТипОбъекта");    // тип объекта-владельца контактной информации

мТаблицаПолейДанныеОФизлице = Новый ТаблицаЗначений;
мТаблицаПолейДанныеОФизлице.Колонки.Добавить("ПутьКДанным");   // описание поля запроса, для которого добавляются данные о физ. лице
мТаблицаПолейДанныеОФизлице.Колонки.Добавить("ИмяИзмерения");  // имя поля запроса, для которого добавляются данные о физ. лице
мТаблицаПолейДанныеОФизлице.Колонки.Добавить("Представление"); // представление поля, для которого добавляются данные о физ. лице

мНастройкаПериода = Новый НастройкаПериода;
мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;

мРежимВводаПериода = 0;
мМинимальнаяШиринаКолонкиПоказатель = 14;
мВыбиратьИмяРегистра = Истина;
мВыбиратьИспользованиеСвойств = Истина;
мРежимФормыНастройкиБезГруппировокКолонок = Ложь;
мНазваниеОтчета = "";

ВыводитьОбщиеИтоги = Истина;

мВосстанавливатьНастройкиПриОткрытии = Истина;
мРассчитыватьШиринуКолонок = Истина;
мРассчитыватьШиринуКолонкиПоНазванию = Ложь;

// 0 - Авто (полное наименование группировок и сокращенное наименование выбранных полей)
// 1 - Полное наименование (полные наименования группировок и выбранных полей)
// 2 - Сокращенное наименование (сокращенные наименования группировок и выбранных полей)
мВидПредставленияПолей = 0;

мПутьКПостроителюОтчета = "ОтчетОбъект.УниверсальныйОтчет";
мИмяЭлементаУправленияПолеТабличногоДокументаРезультат = "ПолеТабличногоДокументаРезультат";
мИмяЭлементаУправленияБыстрыеОтборы = "ПолеТабличногоДокументаРезультат";
мИмяЭлементаУправленияДополнительныеЭлементы = "ПолеТабличногоДокументаРезультат";
мДействиеПолеВводаВидСравненияПриИзменении = Неопределено;
мДействиеПолеВводаЗначениеПриИзменении = Неопределено;
мДействиеКоманднаяПанельФормыПечать = Неопределено;


