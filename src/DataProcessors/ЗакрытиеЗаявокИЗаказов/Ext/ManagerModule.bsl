Процедура ЗакрытьЗаявкиИЗаказы(РазмерПакета) Экспорт
	лКлючАлгоритма = "Обработка_ЗакрытиеЗаявокИЗаказов_МодульМенеджера_ЗакрытьЗаявкиИЗаказы";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	
	//Заявки	
	РезультатЗапроса  = ЗапросЗаявокКЗакрытию(РазмерПакета);
	Если не РезультатЗапроса.Пустой() тогда 
		
		Выборка = РезультатЗапроса.выбрать();
		УстановитьСтатусВыборки(Выборка,Справочники.СтатусыДокументов.ЗаявкаПокупателяЗакрыт);
	КонецЕсли;
	
	РезультатЗапроса  = ЗапросНеВерноЗакрытыхЗаявок(РазмерПакета);
	Если не РезультатЗапроса.Пустой() тогда 
		
		Выборка = РезультатЗапроса.выбрать();
		УстановитьСтатусВыборки(Выборка,Справочники.СтатусыДокументов.ЗаявкаПокупателяПодтвержден);
	КонецЕсли;
	
	//ХудинВВ XX-2855 12072019 ((
	РезультатЗапроса  = ЗапросЗаявокКЗакрытию_Неподтвержденные(РазмерПакета);
	Если не РезультатЗапроса.Пустой() тогда 
		Выборка = РезультатЗапроса.выбрать();
		УстановитьПолныйОтказВыборки(Выборка, Справочники.СостоянияСтрокДокументов.ИстечениеСрокаЗаявки);
	КонецЕсли;
	//))	
	
	//Заказы	
	ВыборкаНезакрытых = ВыбратьНеЗакрытыеЗаказы(РазмерПакета);
	если НЕ ВыборкаНезакрытых = Неопределено тогда 
		УстановитьСтатусВыборки(ВыборкаНезакрытых,Справочники.СтатусыДокументов.ЗаказПоставщикуЗакрыт);	
	КонецЕсли;
	
	ВыборкаНеправильныхЗакрытий = ВыбратьНеВерноЗакрытыеЗаказы(РазмерПакета);
	если НЕ ВыборкаНеправильныхЗакрытий = Неопределено тогда 
		УстановитьСтатусВыборки(ВыборкаНеправильныхЗакрытий,Справочники.СтатусыДокументов.ОтгруженПоставщиком);	
	КонецЕсли;
	
	
КонецПроцедуры

//ХудинВВ XX-2855 12072019
Процедура УстановитьПолныйОтказВыборки(ВыборкаНезакрытых, ПричинаОтказа)
	
	лКлючАлгоритма = "Обработка_ЗакрытиеЗаявокИЗаказов_МодульМенеджера_УстановитьПолныйОтказВыборки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	Пока ВыборкаНезакрытых.Следующий() цикл
		
		Попытка 
			
			//Закроем заявку
			ПоследняяКорректировка = ОбщегоНазначения.ПолучитьПоследнююКорректировкуЗаявки(ВыборкаНезакрытых.ДокументСсылка);
			Если (Не ЗначениеЗаполнено(ПоследняяКорректировка)) ИЛИ ПоследняяКорректировка = ВыборкаНезакрытых.ДокументСсылка Тогда //В регистре корректировок заявок не всегда есть запись, добавим еще проверку по документам
				
				Документ = ВыборкаНезакрытых.ДокументСсылка.ПолучитьОбъект();
				Документ.Комментарий = ?(Документ.Комментарий = "", "", Документ.Комментарий+" / ")+"Снято по сроку";
				Документ.ПометкаУдаления = Истина;
				Документ.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета", Истина);
				Документ.ДополнительныеСвойства.Вставить("РежимБога", Истина);
				Документ.Записать(?(Документ.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
				
				Сообщить("успешно "+ВыборкаНезакрытых.ДокументСсылка);
			КонецЕсли;
			
			
			////Поставим полный отказ
			//ПоследняяКорректировка = Документы.ЗаявкаПокупателя.ПроставитьПолныйОтказНаДокумент(ВыборкаНезакрытых.ДокументСсылка, ТекущаяДата(), ПричинаОтказа);
			//
			////Подтвердим корректировку
			//Если ТипЗнч(ПоследняяКорректировка) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда
			//	
			//	Документ = ПоследняяКорректировка.ПолучитьОбъект();
			//	Документ.СтатусДокумента = Справочники.СтатусыДокументов.ЗаявкаПокупателяПодтвержден;
			//	Документ.Записать(РежимЗаписиДокумента.Проведение);
			//	
			//	//Закроем заявку
			//	Документ = ВыборкаНезакрытых.ДокументСсылка.ПолучитьОбъект();
			//	Документ.СтатусДокумента = Справочники.СтатусыДокументов.ЗаявкаПокупателяЗакрыт;
			//	Документ.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета", Истина);
			//	Документ.ДополнительныеСвойства.Вставить("РежимБога", Истина);
			//	ОбновлениеИнформационнойБазы.ЗаписатьДанные(документ);
			//	
			//	Сообщить("успешно "+ВыборкаНезакрытых.ДокументСсылка);
			//	
			//	ЗафиксироватьТранзакцию();
			//	
			//Иначе
			//	
			//	ВызватьИсключение "Не удалось записать корректировку заказа!";
			//	
			//КонецЕсли;
			
		Исключение
			
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗаписьЖурналаРегистрации("Ошибка обработки закрытия заказов/заявок",УровеньЖурналаРегистрации.Ошибка,, ВыборкаНезакрытых.ДокументСсылка,"Описание ошибки: "+ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

ПРоцедура УстановитьСтатусВыборки(ВыборкаНезакрытых,Статус)
	лКлючАлгоритма = "Обработка_ЗакрытиеЗаявокИЗаказов_МодульМенеджера_УстановитьСтатусВыборки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	
	Пока ВыборкаНезакрытых.Следующий() цикл
		Попытка 
			Документ = ВыборкаНезакрытых.ДокументСсылка.ПолучитьОбъект();
			документ.СтатусДокумента =  Статус;
			//ХудинВВ XX-2587 29052019 ((
			Документ.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета", Истина);
			Документ.ДополнительныеСвойства.Вставить("РежимБога", Истина);
			//))
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(документ);	
			
			Если ТипЗнч(ВыборкаНезакрытых.ДокументСсылка) = тип("ДокументСсылка.ЗаказПоставщику") 
				и ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаНезакрытых.ДокументСсылка,"Контрагент.РаботатьСОкномПоставщика") тогда		
				ОбменДаннымиКлиентСервер.ЗарегистрироватьИзмененияВПланеОбмена(ОбменССайтомСервер.УзелПланаОбмена("ОбменПартКом83_ОкноПоставщика",Ложь),Документ)
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			//ХудинВВ XX-2587 29052019 ((
			ЗаписьЖурналаРегистрации("Ошибка обработки закрытия заказов/заявок",УровеньЖурналаРегистрации.Ошибка,, ВыборкаНезакрытых.ДокументСсылка,"Описание ошибки: "+ОписаниеОшибки());
			//))
			
		КонецПопытки;
	КонецЦикла;	
	
	
КонецПроцедуры

Процедура ЗакрытьЗаказПоставщику(ЗаказСсылка) экспорт
	лКлючАлгоритма = "Обработка_ЗакрытиеЗаявокИЗаказов_МодульМенеджера_ЗакрытьЗаказПоставщику";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////
	Выборка  = ВыбратьНеЗакрытыеЗаказы(1,ЗаказСсылка) ;
	Если не  Выборка = Неопределено тогда 
		УстановитьСтатусВыборки(Выборка,ПредопределенноеЗначение("Справочник.СтатусыДокументов.ЗаказПоставщикуЗакрыт"));
	Конецесли;
КонецПроцедуры	

#Область Заказы


Функция ВыбратьНеЗакрытыеЗаказы(РазмерПакета,ЗаказСсылка = Неопределено)
	лКлючАлгоритма = "Обработка_ЗакрытиеЗаявокИЗаказов_МодульМенеджера_ВыбратьНеЗакрытыеЗаказы";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	
	ЗапросНезакрытых = Новый Запрос ;
	текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ  %1
	|	ЗаказыПоставщикам.Регистратор КАК ДокументСсылка,
	|	МАКСИМУМ(ЗаказыПоставщикамОстатки.СтрокаЗаявки) КАК СтрокаЗаявки
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
	|		ПО ЗаказыПоставщикам.СтрокаЗаявки = ЗаказыПоставщикамОстатки.СтрокаЗаявки
	|			И (ЗаказыПоставщикамОстатки.КоличествоОстаток > 0)
	|ГДЕ
	|	ЗаказыПоставщикам.Регистратор ССЫЛКА Документ.ЗаказПоставщику
	|	И НЕ ВЫРАЗИТЬ(ЗаказыПоставщикам.Регистратор КАК Документ.ЗаказПоставщику).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаказПоставщикуЗакрыт)
	| %2
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.Регистратор
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ЗаказыПоставщикамОстатки.СтрокаЗаявки) ЕСТЬ NULL";
	
	ЗапросНезакрытых.УстановитьПараметр("ЗаказСсылка",ЗаказСсылка); 
	
	ЗапросНезакрытых.Текст =   СтрШаблон(Текст,
	?(ЗначениеЗаполнено(РазмерПакета)," ПЕРВЫЕ "+ Формат(РазмерПакета,"ЧГ=0"),""),
	?(ЗаказСсылка = Неопределено,"","И ЗаказыПоставщикам.СтрокаЗаявки.Заказ = &ЗаказСсылка")
	);
	
	Результат = ЗапросНезакрытых.выполнить();
	если Результат.Пустой() тогда 
		возврат Неопределено;
	иначе 
		возврат  Результат.Выбрать();
	КонецЕсли;	
	
КонецФункции	

Функция ВыбратьНеВерноЗакрытыеЗаказы(РазмерПакета)
	лКлючАлгоритма = "Обработка_ЗакрытиеЗаявокИЗаказов_МодульМенеджера_ВыбратьНеВерноЗакрытыеЗаказы";
	
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
	
	
	
	ЗапросНезакрытых = Новый Запрос ;
	текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ %1
	|	ЗаказыПоставщикам.Регистратор КАК ДокументСсылка,
	|	МАКСИМУМ(ЗаказыПоставщикамОстатки.СтрокаЗаявки) КАК СтрокаЗаявки
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
	|		ПО ЗаказыПоставщикам.СтрокаЗаявки = ЗаказыПоставщикамОстатки.СтрокаЗаявки
	|			И (ЗаказыПоставщикамОстатки.КоличествоОстаток > 0)
	|ГДЕ
	|	ЗаказыПоставщикам.Регистратор ССЫЛКА Документ.ЗаказПоставщику
	|	И ВЫРАЗИТЬ(ЗаказыПоставщикам.Регистратор КАК Документ.ЗаказПоставщику).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаказПоставщикуЗакрыт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.Регистратор
	|
	|ИМЕЮЩИЕ
	|	НЕ МАКСИМУМ(ЗаказыПоставщикамОстатки.СтрокаЗаявки) ЕСТЬ NULL";
	
	ЗапросНезакрытых.Текст =   СтрШаблон(Текст,
	?(ЗначениеЗаполнено(РазмерПакета)," ПЕРВЫЕ "+ Формат(РазмерПакета,"ЧГ=0"),"")
	);
	
	Результат = ЗапросНезакрытых.выполнить();
	если Результат.Пустой() тогда 
		возврат Неопределено;
	иначе 
		возврат  Результат.Выбрать();
	КонецЕсли;	
	
КонецФункции	



#Конецобласти

#Область ЗАявки


Функция ЗапросЗаявокКЗакрытию(РазмерПакета)
	лКлючАлгоритма = "Обработка_ЗакрытиеЗаявокИЗаказов_МодульМенеджера_ЗапросЗаявокКЗакрытию";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	
	Запрос = новый Запрос;
	Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ %1
	|	ЗаявкиПокупателей.Регистратор КАК ДокументСсылка,
	|	МАКСИМУМ(ЗаявкиПокупателейОстатки.СтрокаЗаявки) КАК СтрокаЗаявки
	|ИЗ
	|	РегистрНакопления.ЗаявкиПокупателей КАК ЗаявкиПокупателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиПокупателей.Остатки КАК ЗаявкиПокупателейОстатки
	|		ПО ЗаявкиПокупателей.СтрокаЗаявки = ЗаявкиПокупателейОстатки.СтрокаЗаявки
	|ГДЕ
	|	ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	|	И ВЫРАЗИТЬ(ЗаявкиПокупателей.Регистратор КАК Документ.ЗаявкаПокупателя).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяПодтвержден)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиПокупателей.Регистратор
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ЗаявкиПокупателейОстатки.СтрокаЗаявки) ЕСТЬ NULL";
	Запрос.Текст = СтрШаблон(Текст,
	?(ЗначениеЗаполнено(РазмерПакета)," ПЕРВЫЕ "+ Формат(РазмерПакета,"ЧГ=0") +" " ,"")
	);
	Возврат Запрос.Выполнить();
	
	
КонецФункции

//ХудинВВ XX-2855 12072019
Функция ЗапросЗаявокКЗакрытию_Неподтвержденные(РазмерПакета)
	
	лКлючАлгоритма = "Обработка_ЗакрытиеЗаявокИЗаказов_МодульМенеджера_ЗапросЗаявокКЗакрытию_Неподтвержденные";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	ГруппаДляСайтаФЛ = Константы.ГруппаДляСайтаФЛ.Получить();
	ДнейОжидания 	 = Константы.ДнейОжиданияДляЗакрытияНеподтвержденныхРознЗаявок.Получить();
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаПокупателя.Ссылка КАК Заявка
	|ПОМЕСТИТЬ втЗаявки
	|ИЗ
	|	Документ.ЗаявкаПокупателя КАК ЗаявкаПокупателя
	|ГДЕ
	|	ЗаявкаПокупателя.Ссылка.ИсточникЗаявки = &ИсточникЗаявки
	|	И ЗаявкаПокупателя.Ссылка.СтатусДокумента = &СтатусЗаявки
	|	И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаявкаПокупателя.Ссылка.Дата, ДЕНЬ), НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ) >= &ДобавитьДней
	|	И ЗаявкаПокупателя.Проведен
	|	И  ЗаявкаПокупателя.Дата >= &ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ %1
	|	втЗаявки.Заявка КАК ДокументСсылка
	|ИЗ
	|	втЗаявки КАК втЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыКорректировок.СрезПоследних(, ) КАК ДокументыКорректировок
	|		ПО втЗаявки.Заявка = ДокументыКорректировок.Документ
	|			И втЗаявки.Заявка <> ДокументыКорректировок.ДокументКорректировки
	|ГДЕ
	|	ДокументыКорректировок.СтатусДокумента ЕСТЬ NULL";
	//|			ИЛИ ДокументыКорректировок.СтатусДокумента = &СтатусЗаявки)";

	//Выбираем неподтвержденные заявки по которым нет корректировок, //либо последняя корректировка неподтверждена
	
	Запрос.УстановитьПараметр("ДобавитьДней", ?(Не ЗначениеЗаполнено(ДнейОжидания), 3, ДнейОжидания));
	Запрос.УстановитьПараметр("ИсточникЗаявки", Перечисления.ИсточникиЗаявок.РозничныйОтдел);
	Запрос.УстановитьПараметр("СтатусЗаявки", Справочники.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаНачала", Дата(2019,6,1));
	
	Запрос.Текст = СтрШаблон(Текст,
	?(ЗначениеЗаполнено(РазмерПакета)," ПЕРВЫЕ "+ Формат(РазмерПакета,"ЧГ=0") +" " ,"")
	);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросНеВерноЗакрытыхЗаявок(РазмерПакета)
	лКлючАлгоритма = "Обработка_ЗакрытиеЗаявокИЗаказов_МодульМенеджера_ЗапросНеВерноЗакрытыхЗаявок";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	
	
	Запрос = новый Запрос;
	Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ  %1
	|	ЗаявкиПокупателей.Регистратор КАК ДокументСсылка,
	|	МАКСИМУМ(ЗаявкиПокупателейОстатки.СтрокаЗаявки) КАК СтрокаЗаявки
	|ИЗ
	|	РегистрНакопления.ЗаявкиПокупателей КАК ЗаявкиПокупателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиПокупателей.Остатки КАК ЗаявкиПокупателейОстатки
	|		ПО ЗаявкиПокупателей.СтрокаЗаявки = ЗаявкиПокупателейОстатки.СтрокаЗаявки
	|ГДЕ
	|	ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	|	И ВЫРАЗИТЬ(ЗаявкиПокупателей.Регистратор КАК Документ.ЗаявкаПокупателя).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяЗакрыт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиПокупателей.Регистратор
	|
	|ИМЕЮЩИЕ
	|	НЕ МАКСИМУМ(ЗаявкиПокупателейОстатки.СтрокаЗаявки) ЕСТЬ NULL";
	Запрос.Текст = СтрШаблон(Текст,
	?(ЗначениеЗаполнено(РазмерПакета)," ПЕРВЫЕ "+ Формат(РазмерПакета,"ЧГ=0") +" " ,"")
	);
	Возврат Запрос.Выполнить();
	
	
	
КонецФункции	
#Конецобласти