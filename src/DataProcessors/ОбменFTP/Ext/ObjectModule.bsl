#Область ОсновныеПроцедурыМодуля
//	1. получить настройки подключения по каждому контрагенту
//	2. подключиться к каждому серверу ftp
//		1). прочитать прайсы поставщиков
//		2). прочитать ответы по заказам
//		3). выгрузить заказы
//		4). прочитать МХ-1
//		5). выгрузить ответы по МХ-1
//		6). выгрузить МХ-3
//		7). прочитать ответы по МХ-3

Процедура ВыполнитьРегламентноеЗадание() Экспорт
	#Если Сервер Тогда
		ЗагрузитьПрайсы = Истина;
		ВыгрузитьЗаказы = Истина;
		ПрочитатьОтветыПоЗаказам = Истина;
		ЗагрузитьМХ1 = Истина;
		ВыгрузитьОтветПоМХ1 = Истина;
		ВыгрузитьМХ3 = Истина;
		ЗагрузитьОтветПоМХ3 = Истина;
		Отладка = Ложь;
		
	#КонецЕсли
	
	ТаблицаНастроекКонтрагентов = ОпроситьСправочникНастроек();
	//"Контрагент",	"СерверFTP",  "ПортFTP", "Логин", "Пароль", "КаталогFTP", "ИмяФайла", "РасширениеФайла", "Объект", "Форма", "ИмяФайлаОтвета"
	
	Для Каждого ТекНастройка Из ТаблицаНастроекКонтрагентов Цикл
		ВыполнитьОбмен(ТекНастройка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбмен(НастройкаОбмена)
	Если ЗагрузитьПрайсы Тогда
		Если НастройкаОбмена.Объект = "ПереоценкаОстатковПоставщика" Тогда
			ПрочитатьПрайсыПоставщиков(НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Если ПрочитатьОтветыПоЗаказам Тогда
		Если НастройкаОбмена.Объект = "ЗаказПоставщику" Тогда
			ПрочитатьОтветыПоЗаказамПоставщикам(НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыгрузитьЗаказы Тогда
		Если НастройкаОбмена.Объект = "ЗаказПоставщику" Тогда
			ВыгрузитьЗаказыПоставщикам(НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагрузитьМХ1 Тогда
		Если НастройкаОбмена.Объект = "ПоступлениеТоваровУслуг" И НастройкаОбмена.Форма = Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1 Тогда
			ПрочитатьПоступленияМХ1(НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыгрузитьОтветПоМХ1 Тогда
		Если НастройкаОбмена.Объект = "ПоступлениеТоваровУслуг" И НастройкаОбмена.Форма = Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1 Тогда
			ВыгрузитьОтветыПоПоступлениямМХ1(НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыгрузитьМХ3 Тогда
		Если НастройкаОбмена.Объект = "ПоступлениеТоваровУслуг" И НастройкаОбмена.Форма = Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ3 Тогда
			ВыгрузитьОтчетыМХ3(НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагрузитьОтветПоМХ3 Тогда
		Если НастройкаОбмена.Объект = "ПоступлениеТоваровУслуг" И НастройкаОбмена.Форма = Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ3 Тогда
			ЗагрузитьОтветыПоМХ3(НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ПрайсыПоставщиков
Процедура ПрочитатьПрайсыПоставщиков(НастройкаОбмена)
	ТабТоваров = СформироватьМакетТаблицы("ЗагрузкаПрайсаПоставщика");
		
	НастройкаОбмена.КаталогFTP = СтрЗаменить(НастройкаОбмена.КаталогFTP, "Import", "Export");
	ЗагрузитьТабличнуюЧастьИзФайлаFTP(НастройкаОбмена, ТабТоваров);
	
	Если ТабТоваров.Количество() > 0 Тогда
		ИзготовительЗаполнен = Ложь;
		
		Если НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("baac0c68-b7e1-4b28-80b3-b39573ec05f9")) Тогда
		//куб - возит KAYBA
			БрендПоставщика = Справочники.Изготовители.НайтиПоКоду("000000002");
			ТабТоваров.ЗаполнитьЗначения(БрендПоставщика, "Изготовитель");
			ИзготовительЗаполнен = Истина;
		
		ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("d2ce283e-cd25-4dc7-8064-439f0b26fd13")) Тогда
			//лн дистрибьюция - возит LYNX
			
			БрендПоставщика = Справочники.Изготовители.НайтиПоКоду("000000845");
			ТабТоваров.ЗаполнитьЗначения(БрендПоставщика, "Изготовитель");
			ИзготовительЗаполнен = Истина;
		
		ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("4ace13c5-f353-4442-9f10-9c966ee3137f")) Тогда
			//авто-мс - возит FEBEST
			БрендПоставщика = Справочники.Изготовители.НайтиПоКоду("000000590");
			ТабТоваров.ЗаполнитьЗначения(БрендПоставщика, "Изготовитель");
			ИзготовительЗаполнен = Истина;
		
		КонецЕсли;
		
		Если НЕ ИзготовительЗаполнен Тогда
			Для Каждого СтрокаТовара Из ТабТоваров Цикл
				СтрокаТовара.ИзготовительСтрока = СокрЛП(СтрокаТовара.ИзготовительПоставщика);
				СтрокаТовара.Изготовитель = Справочники.Изготовители.НайтиПоНаименованию(СтрокаТовара.ИзготовительСтрока);
			КонецЦикла;
		КонецЕсли;
	
		тДатаФайла = ТабТоваров[0].ДатаФайла;
		РезультатФормированияДокумента = ЭлектронныеДокументы.ЗагрузитьПрайсПоставщикаИзОП(НастройкаОбмена.Контрагент, тДатаФайла, ТабТоваров);
			
		Если РезультатФормированияДокумента.Результат Тогда
			ОбновитьЗаписьИсторииОбмена(РезультатФормированияДокумента.СсылкаНаДокумент, Перечисления.ФормыОбъектовДляРегистрацииFTP.ПустаяСсылка(), Текущаядата(),
			тДатаФайла, , , РезультатФормированияДокумента.Результат);
			
			Попытка
				Соединение = УстановитьСоединениеFTP(НастройкаОбмена);
				Соединение.Удалить("price.exh");
				Соединение = Неопределено;
				
			Исключение
				
			КонецПопытки;
		
		КонецЕсли;
						
	КонецЕсли;	
	
КонецПроцедуры
#КонецОбласти

#Область ЗаказыПоставщикам
Процедура ПрочитатьОтветыПоЗаказамПоставщикам(НастройкаОбмена)
	НастройкаОбмена.КаталогFTP = СтрЗаменить(НастройкаОбмена.КаталогFTP, "Import", "Export");
	
	Попытка
		Соединение = УстановитьСоединениеFTP(НастройкаОбмена);
	Исключение
		Возврат;
	КонецПопытки;
	
	ИмяФайла = ?(Лев(НастройкаОбмена.ИмяФайлаОтвета, 1) = "*", НастройкаОбмена.ИмяФайлаОтвета, НастройкаОбмена.ИмяФайлаОтвета + "*")  + "." + НастройкаОбмена.РасширениеФайла;
		
	ФайлыFTP = Соединение.НайтиФайлы(ИмяФайла);
	
	СписокФайлов = Новый ТаблицаЗначений;
	СписокФайлов.Колонки.Добавить("ИмяФайла");
	СписокФайлов.Колонки.Добавить("ИмяВременногоФайла");
	СписокФайлов.Колонки.Добавить("ДатаФайла");
	СписокФайлов.Колонки.Добавить("Удалить");
	
	Для А = 1 По ФайлыFTP.Количество() Цикл
		текФайл = ФайлыFTP[А-1];	
		ДатаФайла = текФайл.ПолучитьВремяИзменения();
		
		ВременныйФайл = ПолучитьИмяВременногоФайла("txt"); 
		Попытка
			Соединение.Получить(текФайл.Имя, ВременныйФайл);
			
			СкопироватьПринятыйФайл(НастройкаОбмена, ВременныйФайл, текФайл.Имя);
			
			нс = СписокФайлов.Добавить();
			нс.ИмяФайла = текФайл.Имя;
			нс.ИмяВременногоФайла = ВременныйФайл;
			нс.ДатаФайла = ДатаФайла;
			
		Исключение
			Продолжить;
		КонецПопытки;
				
	КонецЦикла;
	
	Соединение = Неопределено;
	
	Для Каждого тФайл из СписокФайлов Цикл
		
		ТабТоваров = СформироватьМакетТаблицы("ЗагрузкаОтветаПоЗаказу");
		
		Если ПрочитатьТекстФайл(тФайл.ИмяВременногоФайла, НастройкаОбмена.КодировкаФайла, ТабТоваров, тФайл.ДатаФайла) Тогда
			//файл прочитан. количество строк в ТабТоваров соответствует количеству строк в файле
			Если ТабТоваров.Количество() > 0 Тогда
		    	Если ОбновитьЗаказПоставщику(НастройкаОбмена, ТабТоваров) Тогда
					//статус заказа поставщику обновлен, исходный документ скопирован, можно попробовать удалить файл с ftp поставщика
					Попытка
						Соединение = УстановитьСоединениеFTP(НастройкаОбмена);
					Соединение.Удалить(тФайл.ИмяФайла);
					Соединение = Неопределено;
					
					Исключение
						Продолжить;
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ВыгрузитьЗаказыПоставщикам(НастройкаОбмена)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Р.Объект КАК ЗаказПоставщику,
	|	Р.Объект.Контрагент КАК Контрагент,
	|	Р.Объект.Склад.СкладVMI КАК СкладВМИ
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК Р
	|ГДЕ
	|	Р.Объект ССЫЛКА Документ.ЗаказПоставщику
	|	И НЕ Р.Объект.ПометкаУдаления
	|	И Р.Объект.Проведен
	|	И Р.Объект.Контрагент = &Контрагент
	|	И НЕ Р.Выгружен" 
	);
	
	Запрос.УстановитьПараметр("Контрагент", НастройкаОбмена.Контрагент);
	
	Р = Запрос.Выполнить();
	Если Р.Пустой() Тогда
		//Сообщить("Неудачная попытка выгрузки на ftp. Нечего выгружать."  + Строка(Результат.Контрагент));
		//Сообщить(ОписаниеОшибки());
		Возврат;
	КонецЕсли;
	
	Результат = Р.Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если НЕ Результат.СкладВМИ Тогда
			УдалитьЗаписьВРегистреИстории(Результат.ЗаказПоставщику);
			Продолжить;
		КонецЕсли;
		
		ТабТоваров = СформироватьМакетТаблицы("ВыгрузкаЗаказаПоставщику");
		ЗаполнитьТаблицуДляВыгрузки(Результат.ЗаказПоставщику, ТабТоваров, "ВыгрузкаЗаказаПоставщику");
		
		НастройкаОбмена.КаталогFTP = СтрЗаменить(НастройкаОбмена.КаталогFTP, "Export", "Import");
		ВыгрузитьТабличнуюЧастьВФайлFTP(НастройкаОбмена, ТабТоваров);
		
		НачатьТранзакцию();
		Попытка
			ЗаказПоставщикуОбъект = Результат.ЗаказПоставщику.ПолучитьОбъект();
			ЗаказПоставщикуОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ОтправленПоставщику;
			ЗаказПоставщикуОбъект.Записать(РежимЗаписиДокумента.Запись);
			СтруктураДокумента = Новый Структура;
			СтруктураДокумента.Вставить("ЭтоНовый", Ложь);
			СтруктураШапкиДокумента = Новый Структура;
			Для Каждого РеквизитДокумента Из ЗаказПоставщикуОбъект.Метаданные().Реквизиты Цикл
				СтруктураШапкиДокумента.Вставить(РеквизитДокумента.Имя, ЗаказПоставщикуОбъект[РеквизитДокумента.Имя]);		
			КонецЦикла;
			СтруктураДокумента.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
			СтруктураДокумента.Вставить("Товары", ЗаказПоставщикуОбъект.Товары.Выгрузить());
			СтруктураДокумента.Вставить("ПричиныОтказов", ЗаказПоставщикуОбъект.ПричиныОтказов.Выгрузить());
			СтруктураДокумента.Вставить("Услуги", ЗаказПоставщикуОбъект.Услуги.Выгрузить());
			ЗаказПоставщикуОбъект.СоздатьКорректировкуЗаказаПоставщику(СтруктураДокумента);
								
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
			
		ОбновитьЗаписьИсторииОбмена(Результат.ЗаказПоставщику, Перечисления.ФормыОбъектовДляРегистрацииFTP.ПустаяСсылка(), ТекущаяДата(), ТекущаяДата(), , Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбновитьЗаказПоставщику(НастройкаОбмена, ТабТоваров)
	ЗаказПоставщикуОбновлен = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияОбмена1с8FTP.Объект,
	|	ИсторияОбмена1с8FTP.ДатаОбмена,
	|	ИсторияОбмена1с8FTP.Объект.СтатусДокумента КАК СтатусДокумента
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
	|ГДЕ
	|	ИсторияОбмена1с8FTP.Объект ССЫЛКА Документ.ЗаказПоставщику
	|	И ИсторияОбмена1с8FTP.Объект.Контрагент = &Контрагент
	|	И ИсторияОбмена1с8FTP.Выгружен
	|	И НЕ ИсторияОбмена1с8FTP.Получен
	|	И ИсторияОбмена1с8FTP.Объект.Номер = &Номер"
	);
	Запрос.УстановитьПараметр("Контрагент", НастройкаОбмена.Контрагент);
	
	Для Каждого СтрокаДокумента Из ТабТоваров Цикл
		КодНашегоЗаказа = СокрЛП(СтрокаДокумента.КодНашегоЗаказа);
		НомерПозиции = СтрНайти(КодНашегоЗаказа, "_");
		Если НомерПозиции > 0 Тогда
			НомерДок = СокрЛП(Лев(КодНашегоЗаказа, НомерПозиции - 1));
		Иначе
			НомерДок = КодНашегоЗаказа;
		КонецЕсли;
		Если ПустаяСтрока(НомерДок) Тогда 
			//*сообщение* "ответ есть, но в нем не указан код нашего заказа"
			Продолжить;
		КонецЕсли;

		Запрос.УстановитьПараметр("Номер", НомерДок);
				
		Р = Запрос.Выполнить().Выбрать();
		Пока Р.Следующий() Цикл
			КодОтгрузкиПоставщика = СокрЛП(СтрокаДокумента.КодОтгрузкиПоставщика);
			Если ПустаяСтрока(КодОтгрузкиПоставщика) Тогда 
				//*сообщение* "ответ есть, но в нем не указан код отгрузки поставщика"
				Продолжить;
			КонецЕсли;
			
			Если Р.СтатусДокумента = Справочники.СтатусыДокументов.ПроведенЗаказПоставщику
				ИЛИ Р.СтатусДокумента = Справочники.СтатусыДокументов.ОтправленПоставщику Тогда
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				Попытка
					ДокументОбъект = Р.Объект.ПолучитьОбъект();
					ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ОбработанПоставщиком;
					ДокументОбъект.НомерПоступленияПоставщика = КодОтгрузкиПоставщика;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					НовКорректировка = Документы.КорректировкаЗаказаПоставщику.СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(НовКорректировка, ДокументОбъект);
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДокументОбъект.Товары, НовКорректировка.Товары);
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДокументОбъект.Услуги, НовКорректировка.Услуги);
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДокументОбъект.ПричиныОтказов, НовКорректировка.ПричиныОтказов);
					НовКорректировка.Дата = ТекущаяДата();
					НовКорректировка.ДокументОснование = ДокументОбъект.Ссылка;
					НовКорректировка.УстановитьНовыйНомер(ОбщегоНазначения.ПолучитьЗначениеРеквизита(НовКорректировка.Организация, "Префикс"));
					НовКорректировка.Записать(РежимЗаписиДокумента.Проведение);
					
					ОбновитьЗаписьИсторииОбмена(Р.Объект, Перечисления.ФормыОбъектовДляРегистрацииFTP.ПустаяСсылка(), 
					Р.ДатаОбмена, СтрокаДокумента.ДатаФайла, КодОтгрузкиПоставщика, Истина, Истина);
					
					ЗафиксироватьТранзакцию();
					
					ЗаказПоставщикуОбновлен = Истина;
					
				Исключение
					ОтменитьТранзакцию();
					
				КонецПопытки;
					
			КонецЕсли;
						
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗаказПоставщикуОбновлен;
	
КонецФункции
#КонецОбласти

#Область ПоступлениеМХ1
Процедура ПрочитатьПоступленияМХ1(НастройкаОбмена)
	НастройкаОбмена.КаталогFTP = СтрЗаменить(НастройкаОбмена.КаталогFTP, "Import", "Export");
	
	Попытка
		Соединение = УстановитьСоединениеFTP(НастройкаОбмена);
	Исключение
		Возврат;
	КонецПопытки;
	
	ИмяФайла = ?(Лев(НастройкаОбмена.ИмяФайла, 1) = "*", НастройкаОбмена.ИмяФайла, НастройкаОбмена.ИмяФайла + "*")  + "." + НастройкаОбмена.РасширениеФайла;
		
	ФайлыFTP = Соединение.НайтиФайлы(ИмяФайла);
	
	СписокФайлов = Новый ТаблицаЗначений;
	СписокФайлов.Колонки.Добавить("ИмяФайла");
	СписокФайлов.Колонки.Добавить("ИмяВременногоФайла");
	СписокФайлов.Колонки.Добавить("ДатаФайла");
	СписокФайлов.Колонки.Добавить("Удалить");
	
	Для А = 1 По ФайлыFTP.Количество() Цикл
		текФайл = ФайлыFTP[А-1];	
		ДатаФайла = текФайл.ПолучитьВремяИзменения();
		
		ВременныйФайл = ПолучитьИмяВременногоФайла("txt"); 
		Соединение.Получить(текФайл.Имя, ВременныйФайл);
		
		СкопироватьПринятыйФайл(НастройкаОбмена, ВременныйФайл, текФайл.Имя);
		
		нс = СписокФайлов.Добавить();
		нс.ИмяФайла = текФайл.Имя;
		нс.ИмяВременногоФайла = ВременныйФайл;
		нс.ДатаФайла = ДатаФайла;
		
	КонецЦикла;
	
	Соединение = Неопределено;
	
	Для Каждого тФайл из СписокФайлов Цикл
		
		ТабТоваров = СформироватьМакетТаблицы("ЗагрузкаМХ1");
		Если ПрочитатьТекстФайл(тФайл.ИмяВременногоФайла, НастройкаОбмена.КодировкаФайла, ТабТоваров, тФайл.ДатаФайла) Тогда
			Если ТабТоваров.Количество() > 0 Тогда
				Если СформироватьДокументПоступленияМХ1(НастройкаОбмена, ТабТоваров) Тогда
					Попытка
						Соединение = УстановитьСоединениеFTP(НастройкаОбмена);
						ВременныйФайл = ПолучитьИмяВременногоФайла("txt"); 
						Соединение.Получить(тФайл.ИмяФайла, ВременныйФайл);
						Копия = "PK_" + тФайл.ИмяФайла;
						Соединение.Записать(ВременныйФайл, Копия);
						Соединение.Удалить(тФайл.ИмяФайла);
						Соединение = Неопределено;
					
					Исключение
						Продолжить;
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ВыгрузитьОтветыПоПоступлениямМХ1(НастройкаОбмена)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияОбмена1с8FTP.Объект,
	|	ИсторияОбмена1с8FTP.КодФайла,
	|	ИсторияОбмена1с8FTP.ДатаФайла
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
	|ГДЕ
	|	ИсторияОбмена1с8FTP.Объект ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|	И ИсторияОбмена1с8FTP.ФормаОбъекта = ЗНАЧЕНИЕ(Перечисление.ФормыОбъектовДляРегистрацииFTP.МХ1)
	|	И ИсторияОбмена1с8FTP.Получен
	|	И НЕ ИсторияОбмена1с8FTP.Выгружен
	|	И (ИсторияОбмена1с8FTP.Объект.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровПринят)
	|			ИЛИ ИсторияОбмена1с8FTP.Объект.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровРазмещен))
	|	И ИсторияОбмена1с8FTP.Объект.Контрагент = &Контрагент"
	);
	
	Запрос.УстановитьПараметр("Контрагент", НастройкаОбмена.Контрагент);
		
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Если лок_ВыгрузитьФайлFTP(НастройкаОбмена, Результат.Объект) Тогда
				ОбновитьЗаписьИсторииОбмена(Результат.Объект, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1, ТекущаяДата(), 
				ТекущаяДата(), Результат.КодФайла, Истина, Истина);
			
				ЗафиксироватьТранзакцию();
				
			Иначе
				ОтменитьТранзакцию();
				
			КонецЕсли;
			
		Исключение
			//Сообщить("Неудачная попытка выгрузки на ftp." + ОписаниеОшибки());
			ОтменитьТранзакцию();
			
		КонецПопытки;
				
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьПустойДокументПоступления(вхКонтрагент)
	НовДок = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	НовДок.Дата = ТекущаяДата();
	НовДок.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение;
	НовДок.Контрагент = вхКонтрагент;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентов.ТипЦен
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И НЕ ДоговорыКонтрагентов.ДоговорПриостановлен
	|	И ДоговорыКонтрагентов.ДоговорПодписан
	|	И НЕ ДоговорыКонтрагентов.СлужебныйДоговор"
	);
	Запрос.УстановитьПараметр("Владелец", вхКонтрагент);
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение);
	Договоры = Запрос.Выполнить().Выгрузить();
	Если Договоры.Количество() > 0 Тогда
		НовДок.ДоговорКонтрагента = Договоры[0].Ссылка;
		НовДок.Организация = Договоры[0].Организация;
		НовДок.ДоговорКонтрагента = Договоры[0].Ссылка;
		Если ЗначениеЗаполнено(Договоры[0].ВалютаВзаиморасчетов) Тогда
			НовДок.ВалютаДокумента = Договоры[0].ВалютаВзаиморасчетов;
		Иначе
			НовДок.ВалютаДокумента = Константы.ВалютаРубль.Получить();
		КонецЕсли;
		НовДок.ТипЦен = Договоры[0].ТипЦен;
		НовДок.УчитыватьНДС = УчетНДСПовтИсп.УчитыватьНДСПоВариантуУчета(НовДок.Организация.ВариантУчетаНДС, НовДок.ДоговорКонтрагента.ВидОплаты); //ОбщегоНазначения.ПолучитьЗначениеРеквизита(НовДок.Организация, "УчитыватьНДС");
		НовДок.СуммаВключаетНДС = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовДок.ВалютаДокумента) Тогда
		НовДок.ВалютаДокумента = Константы.ВалютаРубль.Получить();
	КонецЕсли;
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(НовДок.ВалютаДокумента, ТекущаяДата());
	НовДок.КурсВзаиморасчетов = СтруктураКурса.Курс;
	НовДок.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	НовДок.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый;
	СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхКонтрагент, "ОсновнойБанковскийСчет,ОсновнаяТорговаяТочка");
	НовДок.БанковскийСчетКонтрагента = СтруктураРеквизитов.ОсновнойБанковскийСчет;
	НовДок.ТорговаяТочка = СтруктураРеквизитов.ОсновнаяТорговаяТочка;
	НовДок.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	//ОсновнаяТорговаяТочка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхКонтрагент, "ОснованяТорговаяТочка");
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МенеджерыТорговыхТочек.Менеджер
	|ИЗ
	|	РегистрСведений.МенеджерыТорговыхТочек КАК МенеджерыТорговыхТочек
	|ГДЕ
	|	МенеджерыТорговыхТочек.Контрагент = &Контрагент
	|	И МенеджерыТорговыхТочек.ВидМенеджера = ЗНАЧЕНИЕ(Перечисление.ВидыМенеджеров.Снабжения)";
	Запрос.УстановитьПараметр("Контрагент", вхКонтрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовДок.Менеджер = Выборка.Менеджер;
	КонецЦикла;
	
	//НовДок.Записать(РежимЗаписиДокумента.Запись); //запись в транзакции, неудачная транзакция - нет документа
	
	Возврат НовДок;
	
КонецФункции

Функция СформироватьДокументПоступленияМХ1(НастройкаОбмена, ТабТоваров) 
	ДокументПоступленияСформирован = Ложь;
	
	ДокументОбъект = Неопределено;
	
	КодФайла = ТабТоваров[0].КодФайла;
	КодОтгрузкиПоставщика = ТабТоваров[0].КодОтгрузкиПоставщика;
	ДатаОтгрузки = ТабТоваров[0].ДатаФайла;
	
	ПродолжитьПроверку = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияОбмена1с8FTP.Объект,
	|	ИсторияОбмена1с8FTP.Объект.Проведен КАК Проведен
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
	|ГДЕ
	|	ИсторияОбмена1с8FTP.Объект ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|	И ИсторияОбмена1с8FTP.КодФайла = &КодФайла"
	);
	Запрос.УстановитьПараметр("КодФайла", КодФайла);
	
	Р = Запрос.Выполнить();
	Если НЕ Р.Пустой() Тогда
		Выборка = Р.Выбрать();
		Выборка.Следующий();
		Попытка
			Если Выборка.Проведен Тогда
				//*сообщение* "МХ-1 не было загружено. такой документ уже есть и он проведен"
				ДокументПоступленияСформирован = Истина;
				Возврат ДокументПоступленияСформирован;
			Иначе
				ДокументОбъект = Выборка.Объект.ПолучитьОбъект();
				ДокументОбъект.Товары.Очистить();
				ПродолжитьПроверку = Ложь;
			КонецЕсли;
		Исключение
			Возврат ДокументПоступленияСформирован;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ПродолжитьПроверку Тогда
		Запрос.УстановитьПараметр("КодФайла", КодОтгрузкиПоставщика);
	
		Р = Запрос.Выполнить();
		Если НЕ Р.Пустой() Тогда
			Выборка = Р.Выбрать();
			Выборка.Следующий();
			Если Выборка.Проведен Тогда
				//*сообщение* "МХ-1 не было загружено. такой документ уже есть и он проведен"
				ДокументПоступленияСформирован = Истина;
				Возврат ДокументПоступленияСформирован;
			Иначе
				ДокументОбъект = Выборка.Объект.ПолучитьОбъект();
				ДокументОбъект.Товары.Очистить();
				ПродолжитьПроверку = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПродолжитьПроверку Тогда	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка,
		|	ПоступлениеТоваровУслуг.Проведен
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Контрагент = &Контрагент
		|	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента";
		Запрос.УстановитьПараметр("Контрагент", НастройкаОбмена.Контрагент);
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", КодОтгрузкиПоставщика);
		//дата файла и дата входящего документа могут не совпадать, поэтому ищем просто по коду отгрузки
		//потом нужно будет заменить на код отгрузки поставщика из регистра (номера документов могут быть циклическими)
		//Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		//	Запрос.Текст = Запрос.Текст + "
		//	|	И ПоступлениеТоваровУслуг.ДатаВходящегоДокумента = &ДатаВходящегоДокумента";
		//	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаОтгрузки);
		//КонецЕсли;
		
		Р = Запрос.Выполнить();
		Если НЕ Р.Пустой() Тогда
			Выборка = Р.Выбрать();
			Выборка.Следующий();
			Если Выборка.Проведен Тогда
				//*сообщение* "МХ-1 не было загружено. такой документ уже есть и он проведен"
				ДокументПоступленияСформирован = Истина;
				Возврат ДокументПоступленияСформирован;
			Иначе
				ДокументОбъект = Выборка.Объект.ПолучитьОбъект();
				ДокументОбъект.Товары.Очистить();
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияОбмена1с8FTP.Объект
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
	|ГДЕ
	|	ИсторияОбмена1с8FTP.Объект ССЫЛКА Документ.ЗаказПоставщику
	|	И ИсторияОбмена1с8FTP.Выгружен
	|	И ИсторияОбмена1с8FTP.Получен
	|	И ИсторияОбмена1с8FTP.КодФайла = &КодФайла";
	
	Запрос.УстановитьПараметр("КодФайла", КодОтгрузкиПоставщика);
	Р = Запрос.Выполнить();
	
	Если Р.Пустой() Тогда
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(НастройкаОбмена.Контрагент, "ЗаказРавенПриходу") Тогда
			//*сообщение* "МХ-1 не было загружено. невозможно определить документ-основание"
			Возврат ДокументПоступленияСформирован;
		КонецЕсли;
		ДокументОснование = Документы.ЗаказПоставщику.ПустаяСсылка();
	Иначе
		Выборка = Р.Выбрать();
		Выборка.Следующий();
		ДокументОснование = Выборка.Объект;
		
	КонецЕсли;
	
	КодСклада = СокрЛП(ТабТоваров[0].КодНашегоСклада);
	Пока СтрДлина(КодСклада) < 9 Цикл
		КодСклада = "0" + КодСклада;
	КонецЦикла;
	НашСклад = Справочники.Склады.НайтиПоКоду(КодСклада);
	Если НЕ ЗначениеЗаполнено(НашСклад) Тогда
		//*сообщение* "не найден наш склад"
		Возврат ДокументПоступленияСформирован;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасписанияОтчетовПоставщикамVMI.Организация
	|ИЗ
	|	РегистрСведений.РасписанияОтчетовПоставщикамVMI КАК РасписанияОтчетовПоставщикамVMI
	|ГДЕ
	|	РасписанияОтчетовПоставщикамVMI.ПрайсПоставщика.Владелец = &Владелец
	|	И РасписанияОтчетовПоставщикамVMI.Склад = &Склад";
	//|	И РасписанияОтчетовПоставщикамVMI.Используется"
	Запрос.УстановитьПараметр("Владелец", НастройкаОбмена.Контрагент);
	Запрос.УстановитьПараметр("Склад", НашСклад);
	
	Р = Запрос.Выполнить();
	Если Р.Пустой() Тогда
		//*сообщение* не найдена организация
		Возврат ДокументПоступленияСформирован;
	КонецЕсли;
	
	Выборка = Р.Выбрать();
	Выборка.Следующий();
	НашаОрганизация = Выборка.Организация;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = Значение(Перечисление.ВидыДоговоровКонтрагентов.ОтветХранение)
	|	И НЕ ДоговорыКонтрагентов.СлужебныйДоговор
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", НастройкаОбмена.Контрагент);
	Запрос.УстановитьПараметр("Организация", НашаОрганизация);
	
	Р = Запрос.Выполнить();
	Если Р.Пустой() Тогда
		//*сообщение* не найден договор контрагента
		Возврат ДокументПоступленияСформирован;
	КонецЕсли;
	
	Выборка = Р.Выбрать();
	Выборка.Следующий();
	ДоговорКонтрагента = Выборка.Ссылка;
	
	Если НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("baac0c68-b7e1-4b28-80b3-b39573ec05f9")) Тогда
		//куб - возит KAYBA
		БрендПоставщика = Справочники.Изготовители.НайтиПоКоду("000000002");
		ТабТоваров.ЗаполнитьЗначения(БрендПоставщика, "ИзготовительСсылка");
		
	ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("d2ce283e-cd25-4dc7-8064-439f0b26fd13")) Тогда
		//лн дистрибьюция - возит LYNX
		БрендПоставщика = Справочники.Изготовители.НайтиПоКоду("000000845");
		ТабТоваров.ЗаполнитьЗначения(БрендПоставщика, "ИзготовительСсылка");
		
	ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("4ace13c5-f353-4442-9f10-9c966ee3137f")) Тогда
		//авто-мс - возит FEBEST
		БрендПоставщика = Справочники.Изготовители.НайтиПоКоду("000000590");
		ТабТоваров.ЗаполнитьЗначения(БрендПоставщика, "ИзготовительСсылка");
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.КодОтгрузкиПоставщика,
	|	Т.КодНашегоСклада,
	|	Т.АртикулПоставщика,
	|	Т.ИзготовительПоставщика,
	|	Т.Количество,
	|	Т.НомерГТД,
	|	Т.КодСтраны,
	|	Т.ДатаФайла,
	|	Т.Артикул,
	|	Т.Изготовитель,
	|	Т.ИзготовительСсылка
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	&ТаблицаТоваров КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.КодОтгрузкиПоставщика,
	|	Т.КодНашегоСклада,
	|	Т.АртикулПоставщика,
	|	Т.ИзготовительПоставщика,
	|	Т.Количество,
	|	Т.НомерГТД,
	|	Т.КодСтраны,
	|	Т.ДатаФайла,
	|	Т.Артикул,
	|	Т.Изготовитель,
	|	Т.ИзготовительСсылка,
	|	Н.Ссылка КАК Номенклатура,
	|	Н.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Н.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент
	|ИЗ
	|	Т КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Н
	|		ПО Т.Артикул = Н.Артикул
	|			И Т.ИзготовительСсылка = Н.Изготовитель";
	
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТабТоваров);
			
	Товары = Запрос.Выполнить().Выгрузить();
	Если Товары.Количество() = 0 Тогда
		//*сообщение* не найдено товаров
		Возврат ДокументПоступленияСформирован;
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		ДокументОбъект = СоздатьПустойДокументПоступления(НастройкаОбмена.Контрагент);
		ДокументОбъект.НомерВходящегоДокумента = КодОтгрузкиПоставщика;
		ДокументОбъект.ДатаВходящегоДокумента = ДатаОтгрузки;
		ДокументОбъект.НомерВходящегоДокументаСФ = КодОтгрузкиПоставщика;
		ДокументОбъект.ДатаВходящегоДокументаСФ = ДатаОтгрузки;
	КонецЕсли;
	
	ДокументОбъект.Склад = НашСклад;
	ДокументОбъект.ДокументОснование = ДокументОснование;
	ДокументОбъект.Организация = НашаОрганизация;
	ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтраныМира.Ссылка,
	|	СтраныМира.КодАльфа3 КАК КодАльфа3
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.Код = &Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодАльфа3 УБЫВ";
		
	ПроверитьНаличиеАртикуловВПрайсеПоставщикаVMI(Товары, НастройкаОбмена.Контрагент);
	
	Для Каждого Товар Из Товары Цикл
		нс = ДокументОбъект.Товары.Добавить();
		нс.Номенклатура = Товар.Номенклатура;
		нс.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
		нс.Коэффициент = Товар.Коэффициент;
		нс.Количество = Товар.Количество;
		//нс.Цена = ПолучитьЦенуПоставщика(Результат.Прайс, Товар.НоменклатураПоставщика, Товар.ДатаФайла, ДокументОбъект.ВалютаДокумента);
		//нс.Сумма = нс.Количество*нс.Цена;
		//Если ДокументОбъект.УчитыватьНДС Тогда
		//	нс.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		//Иначе
		//	нс.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		//КонецЕсли;
		//нс.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(нс.Сумма, ДокументОбъект.УчитыватьНДС, Истина, нс.СтавкаНДС);
		
		Если НЕ ПустаяСтрока(Товар.НомерГТД) И НЕ Товар.НомерГТД = "-" Тогда
			ГТД = Справочники.НомераГТД.НайтиПоКоду(Товар.НомерГТД);
			Если ЗначениеЗаполнено(ГТД) Тогда
				нс.НомерГТД = ГТД;
			Иначе
				НовГТД = Справочники.НомераГТД.СоздатьЭлемент();
				НовГТД.Код = Товар.НомерГТД;
				Попытка
					НовГТД.Записать();
					нс.НомерГТД = новГТД.Ссылка;
				Исключение
					Сообщить(НастройкаОбмена.Контрагент);
					Сообщить(КодОтгрузкиПоставщика);
					Сообщить(ОписаниеОшибки());
				
				КонецПопытки;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Товар.КодСтраны) Тогда
			КодСтраны = Товар.КодСтраны;
			Пока СтрДлина(КодСтраны) < 3 Цикл
				КодСтраны = "0" + КодСтраны;
				
			КонецЦикла;
			//Запрос.УстановитьПараметр("Код", КодСтраны);
			//Выборка = Запрос.Выполнить().Выбрать();
			//Пока Выборка.Следующий() Цикл
			//	нс.СтранаПроисхождения = Выборка.Ссылка;
			//	
			//КонецЦикла;
			
			нс.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
			
		КонецЕсли;
		//нс.СтранаПроисхождения = Товар.СтранаПроисхождения;
		
	КонецЦикла;
	
	//ДокументОбъект.ОбменДанными.Загрузка = Истина;

	//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	НачатьТранзакцию();
	Попытка
		//ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
		ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ОбновитьЗаписьИсторииОбмена(ДокументОбъект.Ссылка, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1, ТекущаяДата(), 
		ДатаОтгрузки, КодОтгрузкиПоставщика, , Истина);
		
		ЗафиксироватьТранзакцию();
		
		ДокументПоступленияСформирован = Истина;
		
	Исключение
		Попытка
			ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ОбновитьЗаписьИсторииОбмена(ДокументОбъект.Ссылка, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1, ТекущаяДата(), 
			ДатаОтгрузки, КодОтгрузкиПоставщика, , Истина);
		
			ЗафиксироватьТранзакцию();
			
			ДокументПоступленияСформирован = Истина;
			
		Исключение
			//Сообщить(НастройкаОбмена.Контрагент);
			//Сообщить(КодОтгрузкиПоставщика);
			//Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецПопытки;
	
	Возврат ДокументПоступленияСформирован;
				
КонецФункции

Процедура ПроверитьНаличиеАртикуловВПрайсеПоставщикаVMI(Товары, Контрагент)
	Запрос = Новый Запрос(		
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Артикул,
	|	Товары.ИзготовительСсылка
	|ПОМЕСТИТЬ Н
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	С.Ссылка,
	|	С.Артикул,
	|	С.Изготовитель,
	|	С.Номенклатура КАК НК_Номенклатура
	|ПОМЕСТИТЬ С
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК С
	|ГДЕ
	|	С.Владелец = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Н.Номенклатура,
	|	ЕСТЬNULL(С.Ссылка, ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)) КАК НК,
	|	ЕСТЬNULL(С.НК_Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НК_Номенклатура
	|ИЗ
	|	Н КАК Н
	|		ЛЕВОЕ СОЕДИНЕНИЕ С КАК С
	|		ПО Н.Артикул = С.Артикул
	|			И Н.ИзготовительСсылка = С.Изготовитель"
	);
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
	Р = Запрос.Выполнить();
	
	Если Р.Пустой() Тогда
		//полная ошибка
	Иначе
		Выборка = Р.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.НК) Тогда
				Если ЗначениеЗаполнено(Выборка.НК_Номенклатура) Тогда
					Если Выборка.НК_Номенклатура <> Выборка.Номенклатура Тогда
						//не та номенклатура привязана
					КонецЕсли;
				Иначе
					Об = Выборка.НК.ПолучитьОбъект();
					Об.Номенклатура = Выборка.Номенклатура;
					Об.Записать();
				КонецЕсли;
			Иначе
				//не найдена номенклатура контрагента
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
					
КонецПроцедуры

Процедура СформироватьДокументПоступленияМХ1_запрос(НастройкаОбмена, ТабТоваров) 
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Контрагент = &Контрагент
	|	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента"
	);
	Запрос.УстановитьПараметр("Контрагент", НастройкаОбмена.Контрагент);
	КодОтгрузкиПоставщика = ТабТоваров[0].КодОтгрузкиПоставщика;
	ДатаОтгрузки = ТабТоваров[0].ДатаФайла;
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", КодОтгрузкиПоставщика);
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПоступлениеТоваровУслуг.ДатаВходящегоДокумента = &ДатаВходящегоДокумента";
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаОтгрузки);
	КонецЕсли;
		
	Р = Запрос.Выполнить();
	Если НЕ Р.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияОбмена1с8FTP.Объект
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
	|ГДЕ
	|	ИсторияОбмена1с8FTP.Объект ССЫЛКА Документ.ЗаказПоставщику
	|	И ИсторияОбмена1с8FTP.Выгружен
	|	И ИсторияОбмена1с8FTP.Получен
	|	И ИсторияОбмена1с8FTP.КодФайла = &КодФайла";
	
	Запрос.УстановитьПараметр("КодФайла", КодОтгрузкиПоставщика);
	Р = Запрос.Выполнить();
	
	Если Р.Пустой() Тогда
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(НастройкаОбмена.Контрагент, "ЗаказРавенПриходу") Тогда
			//*сообщение* "МХ-1 не было загружено. невозможно определить документ-основание"
			Возврат;
		КонецЕсли;
		ДокументОснование = Документы.ЗаказПоставщику.ПустаяСсылка();
	Иначе
		Выборка = Р.Выбрать();
		Выборка.Следующий();
		ДокументОснование = Выборка.Объект;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Артикул,
	|	Т.Изготовитель,
	|	Т.Количество,
	|	Т.НомерГТД,
	|	Т.КодСтраны
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	&ТаблицаТоваров КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Изготовитель,
	|	ЕСТЬNULL(С1.Ссылка, ЗНАЧЕНИЕ(Справочник.Изготовители.ПустаяСсылка)) КАК Ссылка
	|ПОМЕСТИТЬ С1
	|ИЗ
	|	Т КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Изготовители КАК С1
	|		ПО Т.Изготовитель = С1.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.НомерГТД,
	|	ЕСТЬNULL(С2.Ссылка, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК Ссылка
	|ПОМЕСТИТЬ С2
	|ИЗ
	|	Т КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК С2
	|		ПО Т.НомерГТД = С2.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.КодСтраны,
	|	ЕСТЬNULL(С3.Ссылка, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК Ссылка
	|ПОМЕСТИТЬ С3
	|ИЗ
	|	Т КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК С3
	|		ПО Т.КодСтраны = С3.Код
	|ГДЕ
	|	С3.КодАльфа3 <> &ПустаяСтрока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Артикул,
	|	Т.Изготовитель КАК ИзготовительСтрока,
	|	Т.Количество,
	|	Т.НомерГТД КАК НомерГТДСтрока,
	|	Т.КодСтраны,
	|	С1.Ссылка КАК Изготовитель,
	|	С2.Ссылка КАК НомерГТД,
	|	С3.Ссылка КАК СтранаПроисхождения
	|ПОМЕСТИТЬ Т1
	|ИЗ
	|	Т КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ С1 КАК С1
	|		ПО Т.Изготовитель = С1.Изготовитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ С2 КАК С2
	|		ПО Т.НомерГТД = С2.НомерГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ С3 КАК С3
	|		ПО Т.КодСтраны = С3.КодСтраны
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Н.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(Н.ЕдиницаХраненияОстатков, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Н.ЕдиницаХраненияОстатков.Коэффициент, 1) КАК Коэффициент,
	|	Т1.Количество,
	|	Т1.НомерГТД,
	|	Т1.СтранаПроисхождения,
	|	Т1.НомерГТДСтрока,
	|	Т1.КодСтраны,
	|	Т1.Артикул,
	|	Т1.Изготовитель
	|ИЗ
	|	Т1 КАК Т1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Н
	|		ПО Т1.Артикул = Н.Артикул
	|			И Т1.Изготовитель = Н.Изготовитель";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТабТоваров);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
	Товары = Запрос.Выполнить().Выгрузить();
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = СоздатьПустойДокументПоступления(НастройкаОбмена.Контрагент);
	ДокументОбъект.НомерВходящегоДокумента = КодОтгрузкиПоставщика;
	ДокументОбъект.ДатаВходящегоДокумента = ДатаОтгрузки;
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
		КодСклада = СокрЛП(ТабТоваров[0].КодНашегоСклада);
		Пока СтрДлина(КодСклада) < 9 Цикл
			КодСклада = "0" + КодСклада;
		КонецЦикла;
		ДокументОбъект.Склад = Справочники.Склады.НайтиПоКоду(КодСклада);
	КонецЕсли;
	ДокументОбъект.ДокументОснование = ДокументОснование;
	
	Для Каждого Товар Из Товары Цикл
		нс = ДокументОбъект.Товары.Добавить();
		нс.Номенклатура = Товар.Номенклатура;
		нс.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
		нс.Коэффициент = Товар.Коэффициент;
		нс.Количество = Товар.Количество;
		//нс.Цена = ПолучитьЦенуПоставщика(Результат.Прайс, Товар.НоменклатураПоставщика, Товар.ДатаФайла, ДокументОбъект.ВалютаДокумента);
		//нс.Сумма = нс.Количество*нс.Цена;
		//Если ДокументОбъект.УчитыватьНДС Тогда
		//	нс.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		//Иначе
		//	нс.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		//КонецЕсли;
		//нс.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(нс.Сумма, ДокументОбъект.УчитыватьНДС, Истина, нс.СтавкаНДС);
		
		Если НЕ ЗначениеЗаполнено(Товар.НомерГТД) И НЕ ПустаяСтрока(Товар.НомерГТДстрока) И НЕ Товар.НомерГТД = "-" Тогда
			НовГТД = Справочники.НомераГТД.СоздатьЭлемент();
			НовГТД.Код = Товар.НомерГТДстрока;
			Попытка
				НовГТД.Записать();
				нс.НомерГТД = новГТД.Ссылка;
			Исключение
				Сообщить(НастройкаОбмена.Контрагент);
				Сообщить(КодОтгрузкиПоставщика);
				Сообщить(ОписаниеОшибки());
				
			КонецПопытки;
			
		Иначе
			нс.НомерГТД = Товар.НомерГТД;
		КонецЕсли;
		нс.СтранаПроисхождения = Товар.СтранаПроисхождения;
		
	КонецЦикла;
		        
	НачатьТранзакцию();
	Попытка
		//ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ОбновитьЗаписьИсторииОбмена(ДокументОбъект.Ссылка, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1, ТекущаяДата(), 
		ДатаОтгрузки, КодотгрузкиПоставщика, , Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		Сообщить(НастройкаОбмена.Контрагент);
		Сообщить(КодОтгрузкиПоставщика);
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
				
КонецПроцедуры

#КонецОбласти

#Область ОтчетыМХ3
Процедура ВыгрузитьОтчетыМХ3(НастройкаОбмена)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияОбмена1с8FTP.Объект,
	|	ИсторияОбмена1с8FTP.Объект.Контрагент КАК Контрагент,
	|	ИсторияОбмена1с8FTP.ДатаОбмена,
	|	ИсторияОбмена1с8FTP.ДатаФайла,
	|	ИсторияОбмена1с8FTP.КодФайла
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
	|ГДЕ
	|	ИсторияОбмена1с8FTP.Объект ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|	И НЕ ИсторияОбмена1с8FTP.Объект.ПометкаУдаления
	|	И ИсторияОбмена1с8FTP.Объект.Проведен
	|	И ИсторияОбмена1с8FTP.Объект.Контрагент = &Контрагент
	|	И ИсторияОбмена1с8FTP.ФормаОбъекта = ЗНАЧЕНИЕ(Перечисление.ФормыОбъектовДляРегистрацииFTP.МХ3)
	|	И НЕ ИсторияОбмена1с8FTP.Выгружен"
	);
	Запрос.УстановитьПараметр("Контрагент", НастройкаОбмена.Контрагент);
		
	Результат = Запрос.Выполнить().Выбрать();
	
	НастройкаОбмена.КаталогFTP = СтрЗаменить(НастройкаОбмена.КаталогFTP, "Export", "Import");
	
	Пока Результат.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Если лок_ВыгрузитьФайлFTP(НастройкаОбмена, Результат.Объект) Тогда
				ОбновитьЗаписьИсторииОбмена(Результат.Объект, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ3, ТекущаяДата(), 
				ТекущаяДата(), , Истина);
			
				ЗафиксироватьТранзакцию();
				
			Иначе
				ОтменитьТранзакцию();
				
			КонецЕсли;
			
		Исключение
			//Сообщить("Неудачная попытка выгрузки на ftp." + ОписаниеОшибки());
			ОтменитьТранзакцию();
			
		КонецПопытки;
				
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ЗагрузитьОтветыПоМХ3(НастройкаОбмена)
	НастройкаОбмена.КаталогFTP = СтрЗаменить(НастройкаОбмена.КаталогFTP, "Import", "Export");
	
	Попытка
		Соединение = УстановитьСоединениеFTP(НастройкаОбмена);
	Исключение
		Возврат;
	КонецПопытки;
	
	ИмяФайла = ?(Лев(НастройкаОбмена.ИмяФайлаОтвета, 1) = "*", НастройкаОбмена.ИмяФайлаОтвета, НастройкаОбмена.ИмяФайлаОтвета + "*")  + "." + НастройкаОбмена.РасширениеФайла;
		
	ФайлыFTP = Соединение.НайтиФайлы(ИмяФайла);
	
	СписокФайлов = Новый ТаблицаЗначений;
	СписокФайлов.Колонки.Добавить("ИмяФайла");
	СписокФайлов.Колонки.Добавить("ИмяВременногоФайла");
	СписокФайлов.Колонки.Добавить("ДатаФайла");
	СписокФайлов.Колонки.Добавить("Удалить");
	
	Для А = 1 По ФайлыFTP.Количество() Цикл
		текФайл = ФайлыFTP[А-1];	
		ДатаФайла = текФайл.ПолучитьВремяИзменения();
		
		ВременныйФайл = ПолучитьИмяВременногоФайла("txt"); 
		Соединение.Получить(текФайл.Имя, ВременныйФайл);
		
		нс = СписокФайлов.Добавить();
		нс.ИмяФайла = текФайл.Имя;
		нс.ИмяВременногоФайла = ВременныйФайл;
		нс.ДатаФайла = ДатаФайла;
				
	КонецЦикла;
	
	Соединение = Неопределено;
	
	Для Каждого тФайл из СписокФайлов Цикл
		
		ТабТоваров = СформироватьМакетТаблицы("ЗагрузкаОтветаМХ3");
		Если ПрочитатьТекстФайл(тФайл.ИмяВременногоФайла, НастройкаОбмена.КодировкаФайла, ТабТоваров, тФайл.ДатаФайла) Тогда
			Если ТабТоваров.Количество() > 0 Тогда
				ОбновитьОтчетыМХ3(НастройкаОбмена, ТабТоваров);			
			
				//Попытка
				//	Соединение = УстановитьСоединениеFTP(НастройкаОбмена);
				//	Соединение.Удалить(тФайл.ИмяФайла);
				//	Соединение = Неопределено;
				//
				//Исключение
				//	Продолжить;
				//КонецПопытки;
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьОтчетыМХ3(НастройкаОбмена, ТабТоваров)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияОбмена1с8FTP.Объект,
	|	ИсторияОбмена1с8FTP.ДатаОбмена
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
	|ГДЕ
	|	ИсторияОбмена1с8FTP.Объект ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|	И ИсторияОбмена1с8FTP.ФормаОбъекта = ЗНАЧЕНИЕ(Перечисление.ФормыОбъектовДляРегистрацииFTP.МХ3)
	|	И ИсторияОбмена1с8FTP.Объект.Контрагент = &Контрагент
	|	И ИсторияОбмена1с8FTP.Выгружен
	|	И НЕ ИсторияОбмена1с8FTP.Получен
	|	И ИсторияОбмена1с8FTP.Объект.Номер = &Номер"
	);
	Запрос.УстановитьПараметр("Контрагент", НастройкаОбмена.Контрагент);
	
	Для Каждого СтрокаДокумента Из ТабТоваров Цикл
		КодНашейСФ = СтрокаДокумента.КодНашейСФ;
		НомерПозиции = СтрНайти(КодНашейСФ, "_");
		НомерДок = СокрЛП(Лев(КодНашейСФ, НомерПозиции - 1));
		Запрос.УстановитьПараметр("Номер", НомерДок);
				
		Р = Запрос.Выполнить().Выбрать();
		Пока Р.Следующий() Цикл
			Торг12Поставщика = СокрЛП(СтрокаДокумента.КодТорг12Поставщика);
			НомерПозиции = СтрНайти(Торг12Поставщика, "_");
			Торг12ПоставщикаНомер = СокрЛП(Лев(Торг12Поставщика, НомерПозиции - 1));
			Торг12ПоставщикаДатаСтрока = СокрЛП(Прав(Торг12Поставщика, СтрДлина(Торг12Поставщика) - НомерПозиции));
			Если СтрДлина(Торг12ПоставщикаДатаСтрока) = 8 Тогда
				День = Число(Лев(Торг12ПоставщикаДатаСтрока, 2));
				Месяц = Число(Лев(Прав(Торг12ПоставщикаДатаСтрока, 6), 2));
				Год = Число(Прав(Торг12ПоставщикаДатаСтрока, 4));
				Торг12ПоставщикаДата = Дата(Год, Месяц, День);
			Иначе
				Торг12ПоставщикаДата = '00010101000000';
			КонецЕсли;
			
			СФПоставщика = СокрЛП(СтрокаДокумента.КодСФПоставщика);
			НомерПозиции = СтрНайти(СФПоставщика, "_");
			СФПоставщикаНомер = СокрЛП(Лев(СФПоставщика, НомерПозиции - 1));
			СФПоставщикаДатаСтрока = СокрЛП(Прав(СФПоставщика, СтрДлина(СФПоставщика) - НомерПозиции));
			Если СтрДлина(СФПоставщикаДатаСтрока) = 8 Тогда
				День = Число(Лев(СФПоставщикаДатаСтрока, 2));
				Месяц = Число(Лев(Прав(СФПоставщикаДатаСтрока, 6), 2));
				Год = Число(Прав(СФПоставщикаДатаСтрока, 4));
				СФПоставщикаДата = Дата(Год, Месяц, День);
			Иначе
				СФПоставщикаДата = '00010101000000';
			КонецЕсли;
			
			ДокументОбъект = Р.Объект.ПолучитьОбъект();
			ДокументОбъект.НомерВходящегоДокумента = Торг12ПоставщикаНомер;
			ДокументОбъект.ДатаВходящегоДокумента = Торг12ПоставщикаДата;
			ДокументОбъект.НомерВходящегоДокументаСФ = СФПоставщикаНомер;
			ДокументОбъект.ДатаВходящегоДокументаСФ = СФПоставщикаДата;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ОбновитьЗаписьИсторииОбмена(ДокументОбъект.Ссылка, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ3, 
			Р.ДатаОбмена, СтрокаДокумента.ДатаФайла, СтрокаДокумента.КодТорг12Поставщика, Истина, Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры	

Функция лок_ВыгрузитьФайлFTP(НастройкаОбмена, вхСсылка)
	
	ФайлВыгружен = Ложь;
	
	ТабРезультат = Новый ТаблицаЗначений;
	
	Если ТипЗнч(вхСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылка, "ВидОперацииПоступления") = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI Тогда
			Если НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("46b62c03-f29e-4247-82f7-a885b6f8cd37")) Тогда
				//выгрузка денсо
				ТабРезультат.Колонки.Добавить("НашКод");
				ТабРезультат.Колонки.Добавить("КодСклада");
				ТабРезультат.Колонки.Добавить("АртикулПоставщика");
				ТабРезультат.Колонки.Добавить("Количество");
				ТабРезультат.Колонки.Добавить("Цена");
				ТабРезультат.Колонки.Добавить("НомерГТД");
				ТабРезультат.Колонки.Добавить("КодСтраны");
				ТабРезультат.Колонки.Добавить("ДокументПартии");
				
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Т.Ссылка.Номер КАК Номер,
				|	Т.Ссылка.Дата КАК Дата,
				|	Т.Ссылка.Склад.Код КАК КодСклада,
				|	НК.АртикулПоставщика,
				|	Т.Количество,
				|	Т.Цена,
				|	ВЫБОР
				|		КОГДА Т.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
				|			ТОГДА Т.СтрокаПрихода.НомерГТД.Код
				|		ИНАЧЕ Т.НомерГТД.Код
				|	КОНЕЦ КАК НомерГТД,
				|	ВЫБОР
				|		КОГДА Т.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
				|			ТОГДА Т.СтрокаПрихода.СтранаПроисхождения.Код
				|		ИНАЧЕ Т.СтранаПроисхождения.Код
				|	КОНЕЦ КАК КодСтраны,
				|	Т.СтрокаПрихода.Приход.НомерВходящегоДокумента КАК НомерМХ1,
				|	Т.СтрокаПрихода.Приход.ДатаВходящегоДокумента КАК ДатаМХ1
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг.Товары КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НК
				|		ПО Т.Ссылка.Контрагент = НК.Владелец
				|			И Т.Номенклатура = НК.Номенклатура
				|ГДЕ
				|	Т.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	Т.НомерСтроки"
				);
				
				Запрос.УстановитьПараметр("Ссылка", вхСсылка);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					нс = ТабРезультат.Добавить();
					нс.НашКод = Выборка.Номер + "_" + Формат(Выборка.Дата,"ДФ=ddMMyyyy");
					нс.КодСклада = СтроковыеФункцииКлиентСервер.УбратьЛидирующиеНули(Выборка.КодСклада);
					нс.АртикулПоставщика = СокрЛП(Выборка.АртикулПоставщика);
					Количество = Строка(Выборка.Количество);
					Количество = СтрЗаменить(Количество, Символы.НПП, "");
					Количество = СтрЗаменить(Количество, " ", "");
					Количество = СтрЗаменить(Количество, ",", ".");
					нс.Количество = Количество;
					Цена = Строка(Выборка.Цена);
					Цена = СтрЗаменить(Цена, Символы.НПП, "");
					Цена = СтрЗаменить(Цена, " ", "");
					Цена = СтрЗаменить(Цена, ",", ".");
					нс.Цена = Цена;
					нс.НомерГТД = Выборка.НомерГТД;
					нс.КодСтраны = Выборка.КодСтраны;
					нс.ДокументПартии = "№" + СокрЛП(Выборка.НомерМХ1) + " от " + Формат(Выборка.ДатаМХ1, "ДФ=dd.MM.yy");
					
				КонецЦикла;
				
			ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("baac0c68-b7e1-4b28-80b3-b39573ec05f9"))
				ИЛИ НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("9f83d524-248b-46d0-bb97-54dfee1725ee"))
				ИЛИ НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("f2476255-a4cc-48db-8631-0c4493fcfc01")) Тогда
				//выгрузка куб, лэтис, автомаркет
				ТабРезультат.Колонки.Добавить("НашКод");
				ТабРезультат.Колонки.Добавить("КодСклада");
				ТабРезультат.Колонки.Добавить("АртикулПоставщика");
				ТабРезультат.Колонки.Добавить("ИзготовительПоставщика");
				ТабРезультат.Колонки.Добавить("Количество");
				ТабРезультат.Колонки.Добавить("Цена");
				
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Т.Ссылка.Номер КАК Номер,
				|	Т.Ссылка.Дата КАК Дата,
				|	Т.Ссылка.Склад.Код КАК КодСклада,
				|	НК.АртикулПоставщика,
				|	НК.ИзготовительПоставщика,
				|	Т.Количество,
				|	Т.Цена
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг.Товары КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НК
				|		ПО Т.Ссылка.Контрагент = НК.Владелец
				|			И Т.Номенклатура = НК.Номенклатура
				|ГДЕ
				|	Т.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	Т.НомерСтроки"
				);
				
				Запрос.УстановитьПараметр("Ссылка", вхСсылка);
							
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					нс = ТабРезультат.Добавить();
					нс.НашКод = Выборка.Номер + "_" + Формат(Выборка.Дата,"ДФ=ddMMyyyy");
					нс.КодСклада = СтроковыеФункцииКлиентСервер.УбратьЛидирующиеНули(Выборка.КодСклада);
					нс.АртикулПоставщика = СокрЛП(Выборка.АртикулПоставщика);
					нс.ИзготовительПоставщика = СокрЛП(Выборка.ИзготовительПоставщика);
					Количество = Строка(Выборка.Количество);
					Количество = СтрЗаменить(Количество, Символы.НПП, "");
					Количество = СтрЗаменить(Количество, " ", "");
					Количество = СтрЗаменить(Количество, ",", ".");
					нс.Количество = Количество;
					Цена = Строка(Выборка.Цена);
					Цена = СтрЗаменить(Цена, Символы.НПП, "");
					Цена = СтрЗаменить(Цена, " ", "");
					Цена = СтрЗаменить(Цена, ",", ".");
					нс.Цена = Цена;
					
				КонецЦикла;
				
			ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("4ace13c5-f353-4442-9f10-9c966ee3137f"))Тогда
				//выгрузка авто-мс
				ТабРезультат.Колонки.Добавить("НашКод");
				ТабРезультат.Колонки.Добавить("КодСклада");
				ТабРезультат.Колонки.Добавить("АртикулПоставщика");
				//ТабРезультат.Колонки.Добавить("ИзготовительПоставщика");
				ТабРезультат.Колонки.Добавить("Количество");
				ТабРезультат.Колонки.Добавить("Цена");
				
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Т.Ссылка.Номер КАК Номер,
				|	Т.Ссылка.Дата КАК Дата,
				|	Т.Ссылка.Склад.Код КАК КодСклада,
				|	НК.АртикулПоставщика,
				//|	НК.ИзготовительПоставщика,
				|	Т.Количество,
				|	Т.Цена
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг.Товары КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НК
				|		ПО Т.Ссылка.Контрагент = НК.Владелец
				|			И Т.Номенклатура = НК.Номенклатура
				|ГДЕ
				|	Т.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	Т.НомерСтроки"
				);
				
				Запрос.УстановитьПараметр("Ссылка", вхСсылка);
							
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					нс = ТабРезультат.Добавить();
					нс.НашКод = Выборка.Номер + "_" + Формат(Выборка.Дата, "ДФ=ddMMyyyy");
					нс.КодСклада = СтроковыеФункцииКлиентСервер.УбратьЛидирующиеНули(Выборка.КодСклада);
					нс.АртикулПоставщика = СокрЛП(Выборка.АртикулПоставщика);
					//нс.ИзготовительПоставщика = СокрЛП(Выборка.ИзготовительПоставщика);
					Количество = Строка(Выборка.Количество);
					Количество = СтрЗаменить(Количество, Символы.НПП, "");
					Количество = СтрЗаменить(Количество, " ", "");
					Количество = СтрЗаменить(Количество, ",", ".");
					нс.Количество = Количество;
					Цена = Строка(Выборка.Цена);
					Цена = СтрЗаменить(Цена, Символы.НПП, "");
					Цена = СтрЗаменить(Цена, " ", "");
					Цена = СтрЗаменить(Цена, ",", ".");
					нс.Цена = Цена;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ФайлВыгружен = ВыгрузитьТабличнуюЧастьВФайлFTP(НастройкаОбмена, ТабРезультат);
			
		ИначеЕсли ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылка, "ВидОперацииПоступления") = Перечисления.ВидыПоступленияТоваров.ОтветХранение Тогда
			ТабРезультат.Колонки.Добавить("КодОтгрузкиПоставщика");
			ТабРезультат.Колонки.Добавить("КодСклада");
			ТабРезультат.Колонки.Добавить("АртикулПоставщика");
			ТабРезультат.Колонки.Добавить("Количество");
			ТабРезультат.Колонки.Добавить("ДатаПриемки");
			Если НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("4ace13c5-f353-4442-9f10-9c966ee3137f"))Тогда
				
			Иначе
				ТабРезультат.Колонки.Добавить("ИзготовительПоставщика");
			КонецЕсли;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Т.Ссылка.НомерВходящегоДокументаСФ КАК КодОтгрузкиПоставщика,
			|	Т.Ссылка.Дата КАК ДатаПриемки,
			|	Т.Ссылка.Склад.Код КАК КодСклада,
			|	НК.АртикулПоставщика,
			|	Т.Количество - Т.КоличествоНеПринято КАК Количество,
			|	НК.ИзготовительПоставщика
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НК
			|		ПО Т.Ссылка.Контрагент = НК.Владелец
			|			И Т.Номенклатура.Артикул = НК.Артикул
			|			И Т.Номенклатура.Изготовитель = НК.Изготовитель
			|ГДЕ
			|	Т.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Т.НомерСтроки"
			);
				
			Запрос.УстановитьПараметр("Ссылка", вхСсылка);
							
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				нс = ТабРезультат.Добавить();					
				нс.КодОтгрузкиПоставщика = СокрЛП(Выборка.КодОтгрузкиПоставщика);
				нс.КодСклада = СтроковыеФункцииКлиентСервер.УбратьЛидирующиеНули(Выборка.КодСклада);
				нс.АртикулПоставщика = СокрЛП(Выборка.АртикулПоставщика);
				Количество = Строка(Выборка.Количество);
				Количество = СтрЗаменить(Количество, Символы.НПП, "");
				Количество = СтрЗаменить(Количество, " ", "");
				Количество = СтрЗаменить(Количество, ",", ".");
				нс.Количество = Количество;
				нс.ДатаПриемки = Формат(Выборка.ДатаПриемки, "ДФ=ddMMyyyy");
				Если НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("4ace13c5-f353-4442-9f10-9c966ee3137f"))Тогда
					
				Иначе
					нс.ИзготовительПоставщика = СокрЛП(Выборка.ИзготовительПоставщика);
				КонецЕсли;
					
			КонецЦикла;
				
			ФайлВыгружен = ВыгрузитьОтветМХ1ВФайлFTP(НастройкаОбмена, ТабРезультат);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФайлВыгружен;
				
КонецФункции
#КонецОбласти

#Область СервисныеПроцедурыИФункции
Функция ОпроситьСправочникНастроек()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Н.Контрагент,
	|	ВЫРАЗИТЬ(Н.СерверFTP КАК СТРОКА(150)) КАК СерверFTP,
	|	Н.ПортFTP,
	|	Н.Логин,
	|	Н.Пароль,
	|	Н.КаталогFTP,
	|	Н.ИмяФайла,
	|	Н.РасширениеФайла,
	|	Н.КодировкаФайла,
	|	Н.Ссылка.ОбъектМетаданных КАК Объект,
	|	Н.Ссылка.ФормаДокумента КАК Форма,
	|	Н.ИмяФайлаОтвета
	|ИЗ
	|	Справочник.НастройкиFTP.Контрагенты КАК Н
	|ГДЕ
	|	Н.Ссылка.Используется
	|	И Н.Ссылка.ОбъектМетаданных = &Об
	|	И Н.Ссылка.ФормаДокумента = &Форма"
	);
	
	ТабНастроек = Новый ТаблицаЗначений;
	ТабНастроек.Колонки.Добавить("Контрагент");
	ТабНастроек.Колонки.Добавить("СерверFTP");
	ТабНастроек.Колонки.Добавить("ПортFTP");
	ТабНастроек.Колонки.Добавить("Логин");
	ТабНастроек.Колонки.Добавить("Пароль");
	ТабНастроек.Колонки.Добавить("КаталогFTP");
	ТабНастроек.Колонки.Добавить("ИмяФайла");
	ТабНастроек.Колонки.Добавить("РасширениеФайла");
	ТабНастроек.Колонки.Добавить("КодировкаФайла");
	ТабНастроек.Колонки.Добавить("Объект");
	ТабНастроек.Колонки.Добавить("Форма");
	ТабНастроек.Колонки.Добавить("ИмяФайлаОтвета");
	
		
	Если ЗагрузитьПрайсы Тогда
		Запрос.УстановитьПараметр("Об", "ПереоценкаОстатковПоставщика");
		Запрос.УстановитьПараметр("Форма", Перечисления.ФормыОбъектовДляРегистрацииFTP.ПустаяСсылка());
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабНастроек);
	КонецЕсли;
	
	Если ВыгрузитьЗаказы ИЛИ ПрочитатьОтветыПоЗаказам Тогда
		Запрос.УстановитьПараметр("Об", "ЗаказПоставщику");
		Запрос.УстановитьПараметр("Форма", Перечисления.ФормыОбъектовДляРегистрацииFTP.ПустаяСсылка());
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабНастроек);		
	КонецЕсли;
	
	Если ЗагрузитьМХ1 ИЛИ ВыгрузитьОтветПоМХ1 Тогда
		Запрос.УстановитьПараметр("Об", "ПоступлениеТоваровУслуг");
		Запрос.УстановитьПараметр("Форма", Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабНастроек);
	КонецЕсли;
	
	Если ВыгрузитьМХ3 ИЛИ ЗагрузитьОтветПоМХ3 Тогда
		Запрос.УстановитьПараметр("Об", "ПоступлениеТоваровУслуг");
		Запрос.УстановитьПараметр("Форма", Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ3);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТабНастроек);
	КонецЕсли;
	
	Возврат ТабНастроек;
	
КонецФункции

Функция УстановитьСоединениеFTP(НастройкаОбмена)
	FTPСоединение = Новый FTPСоединение(НастройкаОбмена.СерверFTP, НастройкаОбмена.ПортFTP, НастройкаОбмена.Логин, НастройкаОбмена.Пароль);
	Если НЕ ПустаяСтрока(НастройкаОбмена.КаталогFTP) Тогда
		FTPСоединение.УстановитьТекущийКаталог(НастройкаОбмена.КаталогFTP);
		
	КонецЕсли;
		
	Возврат FTPСоединение;
	
КонецФункции

Процедура СкопироватьПринятыйФайл(НастройкаОбмена, врФайл, ИмяФайлаОригинала)
	КаталогКопий = "\\nng9-v-1c-07\ОбменFTP\";
	
	Если НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("baac0c68-b7e1-4b28-80b3-b39573ec05f9")) Тогда
		//куб
		КаталогКопий = КаталогКопий + "КУБ\";
	ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("9f83d524-248b-46d0-bb97-54dfee1725ee")) Тогда
		//лэтис
		КаталогКопий = КаталогКопий + "ЛЭТИС\";
	ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("f2476255-a4cc-48db-8631-0c4493fcfc01")) Тогда
		//автомаркет
		КаталогКопий = КаталогКопий + "АВТОМАРКЕТ\";
	ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("46b62c03-f29e-4247-82f7-a885b6f8cd37")) Тогда
		//денсо
		КаталогКопий = КаталогКопий + "ДЕНСО\";
	ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("4ace13c5-f353-4442-9f10-9c966ee3137f")) Тогда
		//авто-мс
		КаталогКопий = КаталогКопий + "АВТОМС\";
	ИначеЕсли НастройкаОбмена.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор("4d2ce283e-cd25-4dc7-8064-439f0b26fd13")) Тогда
		//лн дистрибьюция
		КаталогКопий = КаталогКопий + "ЛНДИСТРИБ\";
				
	КонецЕсли;
	
	ИмяФайлаКопии = КаталогКопий + ИмяФайлаОригинала;
	
	Попытка
		КопироватьФайл(врФайл, ИмяФайлаКопии);
	Исключение
		//сообщить "не был скопирован файл
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьТабличнуюЧастьИзФайлаFTP(НастройкаОбмена, ТабТоваров)
	Попытка
		Соединение = УстановитьСоединениеFTP(НастройкаОбмена);
	Исключение
		Возврат;
	КонецПопытки;
	
	ИмяФайла = ?(Лев(НастройкаОбмена.ИмяФайла, 1) = "*", НастройкаОбмена.ИмяФайла, НастройкаОбмена.ИмяФайла + "*")  + "." + НастройкаОбмена.РасширениеФайла;
		
	ФайлыFTP = Соединение.НайтиФайлы(ИмяФайла);
	
	Если ФайлыFTP.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	текФайл = ФайлыFTP[0];
	Для А = 0 По ФайлыFTP.Количество() - 1 Цикл
		Если ФайлыFTP[А].ПолучитьВремяИзменения() > текФайл.ПолучитьВремяИзменения() Тогда
			текФайл = ФайлыFTP[А];
		КонецЕсли;
		
	КонецЦикла;
	
	ДатаФайла = текФайл.ПолучитьВремяИзменения();
		
	ВременныйФайл = ПолучитьИмяВременногоФайла("txt"); 
	Соединение.Получить(текФайл.Имя, ВременныйФайл);
	
	СкопироватьПринятыйФайл(НастройкаОбмена, ВременныйФайл, текФайл.Имя);
	
	ФайлПрочитан = ПрочитатьТекстФайл(ВременныйФайл, НастройкаОбмена.КодировкаФайла, ТабТоваров, ДатаФайла);
	
КонецПроцедуры

Функция ВыгрузитьТабличнуюЧастьВФайлFTP(НастройкаОбмена, ТабТоваров)
	ФайлВыгружен = Ложь;
	
	Если ТабТоваров.Количество() = 0 Тогда
		Возврат ФайлВыгружен;
	КонецЕсли;
	
	ТекстовыйДок = Новый ТекстовыйДокумент; 
	
	КолКолонок = ТабТоваров.Колонки.Количество();
	
	Для Каждого Стр Из ТабТоваров Цикл
		СтрокаФайла = "";
		Для а = 0 По КолКолонок - 1 Цикл
			Если а = 0 Тогда
				СтрокаФайла = СокрЛП(Стр[а]);
			Иначе
				СтрокаФайла = СтрокаФайла + ";" + СокрЛП(Стр[а]);
			КонецЕсли;
		КонецЦикла;
		ТекстовыйДок.ДобавитьСтроку(СтрокаФайла);
		
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("txt"); 
	ТекстовыйДок.Записать(ВременныйФайл, НастройкаОбмена.КодировкаФайла); 
	
	ДополнениеИмениФайла = "";
	Если ТабТоваров.Колонки.Найти("НашКод") <> Неопределено Тогда
		ДополнениеимениФайла = "_" + ТабТоваров[0].НашКод;
	КонецЕсли;
	
	Если Отладка тогда
		Приемник = КаталогДляОтладки + СокрЛП(НастройкаОбмена.Контрагент.Код) + "__" + НастройкаОбмена.Объект 
		+ "__" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ДополнениеИмениФайла + ".txt";
		Попытка
			ПереместитьФайл(ВременныйФайл, Приемник);
			ФайлВыгружен = Истина;
		Исключение
			
		КонецПопытки;
		
		Возврат ФайлВыгружен;
		
	КонецЕсли;
	
	ИмяФайла = НастройкаОбмена.ИмяФайла + ДополнениеИмениФайла + "." + НастройкаОбмена.РасширениеФайла;
	НастройкаОбмена.КаталогFTP = СтрЗаменить(НастройкаОбмена.КаталогFTP, "Export", "Import");
	
	Попытка
		Соединение = УстановитьСоединениеFTP(НастройкаОбмена);
		Соединение.Записать(ВременныйФайл, ИмяФайла);
		ФайлВыгружен = Истина;
		
	Исключение
		
	КонецПопытки;		
	
	Возврат ФайлВыгружен;
	
КонецФункции

Функция ВыгрузитьОтветМХ1ВФайлFTP(НастройкаОбмена, ТабТоваров)
	ФайлВыгружен = Ложь;
	
	Если ТабТоваров.Количество() = 0 Тогда
		Возврат ФайлВыгружен;
	КонецЕсли;
	
	ТекстовыйДок = Новый ТекстовыйДокумент; 
	
	КолКолонок = ТабТоваров.Колонки.Количество();
	
	Для Каждого Стр Из ТабТоваров Цикл
		СтрокаФайла = "";
		Для а = 0 По КолКолонок - 1 Цикл
			Если а = 0 Тогда
				СтрокаФайла = СокрЛП(Стр[а]);
			Иначе
				СтрокаФайла = СтрокаФайла + ";" + СокрЛП(Стр[а]);
			КонецЕсли;
		КонецЦикла;
		ТекстовыйДок.ДобавитьСтроку(СтрокаФайла);
		
	КонецЦикла;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("txt"); 
	ТекстовыйДок.Записать(ВременныйФайл, НастройкаОбмена.КодировкаФайла); 
	
	ДополнениеИмениФайла = "";
	Если табТоваров.Колонки.Найти("КодОтгрузкиПоставщика") <> Неопределено Тогда
		ДополнениеИмениФайла = "_" + ТабТоваров[0].КодОтгрузкиПоставщика;
	КонецЕсли;
	
	Если Отладка тогда
		Приемник = КаталогДляОтладки + СокрЛП(НастройкаОбмена.Контрагент.Код) + "__" + НастройкаОбмена.Объект 
		+ "__" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ДополнениеИмениФайла + ".txt";
		Попытка
			ПереместитьФайл(ВременныйФайл, Приемник);
			ФайлВыгружен = Истина;
		Исключение
			
		КонецПопытки;
		
		Возврат ФайлВыгружен;
		
	КонецЕсли;
	
	//ИмяФайла = НастройкаОбмена.ИмяФайла + ДополнениеИмениФайла + "." + НастройкаОбмена.РасширениеФайла;
	
	Если ПустаяСтрока(ДополнениеИмениФайла) Тогда 
		Возврат ФайлВыгружен;
		
	КонецЕсли;
	
	ИмяФайла = "receiptcommit" + ДополнениеИмениФайла + "." + НастройкаОбмена.РасширениеФайла;
	НастройкаОбмена.КаталогFTP = СтрЗаменить(НастройкаОбмена.КаталогFTP, "Export", "Import");
	
	Попытка
		Соединение = УстановитьСоединениеFTP(НастройкаОбмена);
		Соединение.Записать(ВременныйФайл, ИмяФайла);
		ФайлВыгружен = Истина;
	Исключение
		
	КонецПопытки;
	
	Возврат ФайлВыгружен;
	
КонецФункции

Процедура ЗаполнитьТаблицуДляВыгрузки(СсылкаНаДокумент, ТабТоваров, ВидДокумента)
	Если ВидДокумента = "ВыгрузкаЗаказаПоставщику" Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаЗаказаПоставщику.Ссылка
		|ИЗ
		|	Документ.КорректировкаЗаказаПоставщику КАК КорректировкаЗаказаПоставщику
		|ГДЕ
		|	КорректировкаЗаказаПоставщику.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаЗаказаПоставщику.Дата УБЫВ"
		);
		Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаДокумент);
		Р = Запрос.Выполнить();
		Если Р.Пустой() Тогда
			ТоварыДокумента = СсылкаНадокумент;
		Иначе
			Выборка = Р.Выбрать();
			Выборка.Следующий();
			ТоварыДокумента = Выборка.Ссылка;
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НК.АртикулПоставщика, Товары.СтрокаЗаявки.АртикулПоставщика) КАК АртикулПоставщика,
		|	ЕСТЬNULL(НК.ИзготовительПоставщика, Товары.СтрокаЗаявки.ИзготовительПоставщика) КАК ИзготовительПоставщика,
		|	Товары.Количество - Товары.КоличествоОтказ КАК Количество,
		|	ЕСТЬNULL(НК.Ссылка, ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)) КАК НоменклатураКонтрагента,
		|	Товары.Ссылка.Контрагент КАК Контрагент,
		|	Товары.Номенклатура
		|ИЗ
		|	Документ." + ТоварыДокумента.Метаданные().Имя + ".Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НК
		|		ПО Товары.Ссылка.Контрагент = НК.Владелец
		|			И Товары.Номенклатура = НК.Номенклатура
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И ЕСТЬNULL(НК.АртикулПоставщика, Товары.СтрокаЗаявки.АртикулПоставщика) <> &ПустаяСтрока
		|
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки";
		Запрос.УстановитьПараметр("Ссылка", ТоварыДокумента);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		ПараметрыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНадокумент, "Номер,Дата");
		КодНашегоЗаказа = СокрЛП(ПараметрыДокумента.Номер) + "_" + Формат(ПараметрыДокумента.Дата,"ДФ=ddMMyyyy");
		Склад = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТоварыДокумента, "Склад");
		КодНашегоСклада = СтроковыеФункцииКлиентСервер.УбратьЛидирующиеНули(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Склад, "Код"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураКонтрагента) Тогда
				Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
					ОбновитьНоменклатуруКонтрагента(Выборка.Контрагент, Выборка.АртикулПоставщика, Выборка.ИзготовительПоставщика, Выборка.Номенклатура);
				КонецЕсли;
			КонецЕсли;
				
			нс = ТабТоваров.Добавить();
			нс.НашКод = КодНашегоЗаказа;
			нс.КодНашегоСклада = КодНашегоСклада;
			нс.АртикулПоставщика = СокрЛП(Выборка.АртикулПоставщика);
			нс.ИзготовительПоставщика = СокрЛП(Выборка.ИзготовительПоставщика);
			Количество = Строка(Выборка.Количество);
			Количество = СтрЗаменить(Количество, Символы.НПП, "");
			Количество = СтрЗаменить(Количество, " ", "");
			Количество = СтрЗаменить(Количество, ",", ".");
			нс.Количество = СокрЛП(Количество);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНоменклатуруКонтрагента(Владелец, АртикулПоставщика, ИзготовительПоставщика, Номенклатура)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Владелец = &Владелец
	|	И НоменклатураКонтрагентов.АртикулПоставщика = &АртикулПоставщика
	|	И НоменклатураКонтрагентов.ИзготовительПоставщика = &ИзготовительПоставщика"
	);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("АртикулПоставщика", АртикулПоставщика);
	Запрос.УстановитьПараметр("ИзготовительПоставщика", ИзготовительПоставщика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Об.Номенклатура = Номенклатура;
		Об.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьМакетТаблицы(ВидДокумента)
	ТабТоваров = Новый ТаблицаЗначений;
	
	Если ВидДокумента = "ЗагрузкаПрайсаПоставщика" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ТабТоваров.Колонки.Добавить("АртикулПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(30)));
		ТабТоваров.Колонки.Добавить("ИзготовительПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(100)));
		Массив.Очистить();
		Массив.Добавить(Тип("Число"));
		ТабТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(15,4)));
		ТабТоваров.Колонки.Добавить("МинимальныйОстаток", Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(15,3)));
		Массив.Очистить();
		Массив.Добавить(Тип("Строка"));
		ТабТоваров.Колонки.Добавить("Артикул", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(25)));
		ТабТоваров.Колонки.Добавить("ИзготовительСтрока", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(100)));
		Массив.Очистить();
		Массив.Добавить(Тип("Дата"));
		ТабТоваров.Колонки.Добавить("ДатаФайла", Новый ОписаниеТипов(Массив, , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		Массив.Очистить();
		Массив.Добавить(Тип("СправочникСсылка.Изготовители"));
		ТабТоваров.Колонки.Добавить("Изготовитель", Новый ОписаниеТипов(Массив));
		
	ИначеЕсли ВидДокумента = "ВыгрузкаЗаказаПоставщику" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ТабТоваров.Колонки.Добавить("НашКод", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(20)));
		ТабТоваров.Колонки.Добавить("КодНашегоСклада", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(3)));
		ТабТоваров.Колонки.Добавить("АртикулПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(30)));
		ТабТоваров.Колонки.Добавить("ИзготовительПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(100)));
		ТабТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(50)));
		
	ИначеЕсли ВидДокумента = "ЗагрузкаОтветаПоЗаказу" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ТабТоваров.Колонки.Добавить("КодНашегоЗаказа", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(20)));
		ТабТоваров.Колонки.Добавить("КодОтгрузкиПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(30)));
		Массив.Очистить();
		Массив.Добавить(Тип("Дата"));
		ТабТоваров.Колонки.Добавить("ДатаФайла", Новый ОписаниеТипов(Массив, , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		
	ИначеЕсли ВидДокумента = "ЗагрузкаМХ1" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ТабТоваров.Колонки.Добавить("КодОтгрузкиПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(20)));
		ТабТоваров.Колонки.Добавить("КодНашегоСклада", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(3)));
		ТабТоваров.Колонки.Добавить("АртикулПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(30)));
		ТабТоваров.Колонки.Добавить("ИзготовительПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(100)));
		ТабТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(50)));
		ТабТоваров.Колонки.Добавить("НомерГТД", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(100)));
		ТабТоваров.Колонки.Добавить("КодСтраны", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(3)));
		Массив.Очистить();
		Массив.Добавить(Тип("Дата"));
		ТабТоваров.Колонки.Добавить("ДатаФайла", Новый ОписаниеТипов(Массив, , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		Массив.Очистить();
		Массив.Добавить(Тип("Строка"));
		ТабТоваров.Колонки.Добавить("Артикул", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(30)));
		ТабТоваров.Колонки.Добавить("Изготовитель", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(100)));
		Массив.Очистить();
		Массив.Добавить(Тип("СправочникСсылка.Изготовители"));
		ТабТоваров.Колонки.Добавить("ИзготовительСсылка", Новый ОписаниеТипов(Массив));
		Массив.Очистить();
		Массив.Добавить(Тип("Строка"));
		ТабТоваров.Колонки.Добавить("КодФайла", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(30)));
		
	ИначеЕсли ВидДокумента = "ЗагрузкаОтветаМХ3" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ТабТоваров.Колонки.Добавить("КодНашейСФ", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(20)));
		ТабТоваров.Колонки.Добавить("КодТорг12Поставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(30)));
		ТабТоваров.Колонки.Добавить("КодСФПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(30)));
		Массив.Очистить();
		Массив.Добавить(Тип("Дата"));
		ТабТоваров.Колонки.Добавить("ДатаФайла", Новый ОписаниеТипов(Массив, , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		
	КонецЕсли;
	
	Возврат ТабТоваров;
	
КонецФункции

Функция ПрочитатьТекстФайл(ТекИмяФайла, вхКодировка, вхТабТоваров, вхДатаФайла)
	Разделитель = ";";
		
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(ТекИмяФайла, вхКодировка);
	
	КоличествоСтрокФайла = ЗагружаемыйФайл.КоличествоСтрок();
	
	НормализоватьАртикул = Ложь;
	Если вхТабТоваров.Колонки.Найти("АртикулПоставщика") <> Неопределено И вхТабТоваров.Колонки.Найти("Артикул") <> Неопределено Тогда
		НормализоватьАртикул = Истина;
	КонецЕсли;
	
	НормализоватьИзготовителя = Ложь;
	Если вхТабТоваров.Колонки.Найти("ИзготовительПоставщика") <> Неопределено И вхТабТоваров.Колонки.Найти("Изготовитель") <> Неопределено Тогда
		НормализоватьИзготовителя = Истина;
	КонецЕсли;
	
	НайтиИзготовителяПоНаименованию = Ложь;
	Если вхТабТоваров.Колонки.Найти("Изготовитель") <> Неопределено И вхТабТоваров.Колонки.Найти("ИзготовительСсылка") <> Неопределено  Тогда
		НайтиИзготовителяПоНаименованию = Истина;
	КонецЕсли;
	
	КодФайла = Неопределено;
	Если вхТабТоваров.Колонки.Найти("КодФайла") <> Неопределено Тогда
		КодФайла = "";
	КонецЕсли;
	
	КоличествоПустыхСтрок = 0;
	Для НомерСтроки = 1 по ЗагружаемыйФайл.КоличествоСтрок() Цикл
		Строка = СокрЛП(ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки));
		
		Если ПустаяСтрока(Строка) Тогда
			КоличествоПустыхСтрок = КоличествоПустыхСтрок + 1;
			Продолжить;
		КонецЕсли;
		
		Если Лев(Строка, 1) = Символ(34) Тогда
			Строка = Прав(Строка, СтрДлина(Строка) - 1);
		КонецЕсли;
				
		Если Прав(Строка, 1) = Символ(34) Тогда
			Строка = Лев(Строка, СтрДлина(Строка) - 1);
		КонецЕсли;
				
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель);
		
		нс = вхТабТоваров.Добавить();
		Для а = 0 По МассивКол.Количество()-1 Цикл 
			текЗначение = СокрЛП(МассивКол[а]);
			Если Лев(текЗначение, 1) = Символ(34) Тогда
				текЗначение = Прав(текЗначение, СтрДлина(текЗначение) - 1);
			КонецЕсли;
			Если Прав(текЗначение, 1) = Символ(34) Тогда
				текЗначение = Лев(текЗначение, СтрДлина(Строка) - 1);
			КонецЕсли;
			
			Если КодФайла <> Неопределено Тогда
				Если ПустаяСтрока(КодФайла) и а = 0 Тогда
					КодФайла = текЗначение;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(нс[а]) = Тип("Строка") Тогда
				нс[а] = текЗначение;
			Иначе
				текЗначение = СтрЗаменить(текЗначение, ",", ".");
				Попытка
					нс[а] = Число(текЗначение);
				Исключение
					нс[а] = 0;
				КонецПопытки;
			
			КонецЕсли;
			
		КонецЦикла;
		Если НормализоватьАртикул Тогда
			//нс.Артикул = ЭлектронныеДокументы.НормализоватьСтрокуАртикула(нс.АртикулПоставщика);
			нс.Артикул = ОбщегоНазначения.НормализоватьАртикул(нс.АртикулПоставщика);
		КонецЕсли;
		Если НормализоватьИзготовителя Тогда
			нс.Изготовитель = ЭлектронныеДокументы.НормализоватьСтрокуИзготовителя(нс.ИзготовительПоставщика);
		КонецЕсли;
		Если НайтиИзготовителяПоНаименованию И НЕ ПустаяСтрока(нс.Изготовитель) Тогда
			нс.ИзготовительСсылка = Справочники.Изготовители.НайтиПоНаименованию(нс.Изготовитель);
		КонецЕсли;
				
	КонецЦикла;
	
	Если вхТабТоваров.Колонки.Найти("ДатаФайла") <> Неопределено Тогда
		вхТабТоваров.ЗаполнитьЗначения(вхДатаФайла, "ДатаФайла");
	КонецЕсли;
	
	Если КодФайла <> Неопределено Тогда
		Если вхТабТоваров.Колонки.Найти("КодФайла") <> Неопределено Тогда
			вхТабТоваров.ЗаполнитьЗначения(КодФайла, "КодФайла");
		КонецЕсли;
	КонецЕсли;
		
	//до вызова функции файл должен быть скопирован
	//если функция выполнена успешно, то файл на ftp можно удалить
	
	Если вхТабТоваров.Количество() = КоличествоСтрокФайла - КоличествоПустыхСтрок Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Процедура ОбновитьЗаписьИсторииОбмена(СсылкаНаДокумент, ФормаДокумента, ДатаОбмена, ДатаФайлаПоставщика, КодФайла = "", Выгружен = Ложь, Получен = Ложь)
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		нз = РегистрыСведений.ИсторияОбмена1с8FTP.СоздатьНаборЗаписей();
		нз.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
		нз.Отбор.Объект.Значение = СсылкаНаДокумент;
		нз.Отбор.Объект.Использование = Истина;
		нз.Отбор.ФормаОбъекта.ВидСравнения = ВидСравнения.Равно;
		нз.Отбор.ФормаОбъекта.Значение = ФормаДокумента;
		нз.Отбор.ФормаОбъекта.Использование = Истина;
		
		нз.Прочитать();
		
		Если нз.Количество() = 0 Тогда
			зап = нз.Добавить();
			зап.Объект = СсылкаНаДокумент;
			зап.ФормаОбъекта = ФормаДокумента;
			зап.ДатаОбмена = ДатаОбмена;
			зап.Выгружен = Выгружен;
			зап.Получен = Получен;
			зап.ДатаФайла = ДатаФайлаПоставщика;
			зап.КодФайла = КодФайла;
		Иначе
			Для Каждого зап Из нз Цикл
				зап.Выгружен = Выгружен;
				зап.Получен = Получен;
				зап.ДатаФайла = ДатаФайлаПоставщика;
				зап.КодФайла = КодФайла;
			КонецЦикла;
		КонецЕсли;
		
		нз.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаписьВРегистреИстории(СсылкаНаДокумент)
	нз = РегистрыСведений.ИсторияОбмена1с8FTP.СоздатьНаборЗаписей();
	нз.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
	нз.Отбор.Объект.Значение = СсылкаНаДокумент;
	нз.Отбор.Объект.Использование = Истина;
	
	нз.Записать(Истина);
	
КонецПроцедуры
#КонецОбласти