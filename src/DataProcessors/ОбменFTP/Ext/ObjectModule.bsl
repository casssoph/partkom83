Перем ЛогФайл;

//вспомогательные процедуры
Функция СоздатьПустойДокументПоступления(вхКонтрагент)
	НовДок = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	НовДок.Дата = ТекущаяДата();
	НовДок.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ОтветХранение;
	НовДок.Контрагент = вхКонтрагент;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентов.ТипЦен
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И НЕ ДоговорыКонтрагентов.ДоговорПриостановлен
	|	И ДоговорыКонтрагентов.ДоговорПодписан
	|	И НЕ ДоговорыКонтрагентов.СлужебныйДоговор"
	);
	Запрос.УстановитьПараметр("Владелец", вхКонтрагент);
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение);
	Договоры = Запрос.Выполнить().Выгрузить();
	Если Договоры.Количество() > 0 Тогда
		НовДок.ДоговорКонтрагента = Договоры[0].Ссылка;
		НовДок.Организация = Договоры[0].Организация;
		НовДок.ДоговорКонтрагента = Договоры[0].Ссылка;
		Если ЗначениеЗаполнено(Договоры[0].ВалютаВзаиморасчетов) Тогда
			НовДок.ВалютаДокумента = Договоры[0].ВалютаВзаиморасчетов;
		Иначе
			НовДок.ВалютаДокумента = Константы.ВалютаРубль.Получить();
		КонецЕсли;
		НовДок.ТипЦен = Договоры[0].ТипЦен;
		НовДок.УчитыватьНДС = ОбщегоНазначения.ПолучитьЗначениеРеквизита(НовДок.Организация, "УчитыватьНДС");
		НовДок.СуммаВключаетНДС = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовДок.ВалютаДокумента) Тогда
		НовДок.ВалютаДокумента = Константы.ВалютаРубль.Получить();
	КонецЕсли;
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(НовДок.ВалютаДокумента, ТекущаяДата());
	НовДок.КурсВзаиморасчетов = СтруктураКурса.Курс;
	НовДок.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	НовДок.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый;
	СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхКонтрагент, "ОсновнойБанковскийСчет,ОсновнаяТорговаяТочка");
	НовДок.БанковскийСчетКонтрагента = СтруктураРеквизитов.ОсновнойБанковскийСчет;
	НовДок.ТорговаяТочка = СтруктураРеквизитов.ОсновнаяТорговаяТочка;
	НовДок.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	//НовДок.Записать(РежимЗаписиДокумента.Запись); //запись в транзакции, неудачная транзакция - нет документа
	
	Возврат НовДок;
	
КонецФункции

Функция ПолучитьЦенуПоставщика(вхПрайс, вхНоменклатура, вхДата, вхВалюта, вхАртикул = "", вхИзготовитель = "")
	Если ЗначениеЗаполнено(вхНоменклатура) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
		|			&Дата,
		|			ПрайсПоставщика = &Прайс
		|				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних"
		);
		Запрос.УстановитьПараметр("Дата", вхДата);
		Запрос.УстановитьПараметр("Прайс", вхПрайс);
		Запрос.УстановитьПараметр("Номенклатура", вхНоменклатура);
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
		|			&Дата,
		|			ПрайсПоставщика = &Прайс
		|				И Номенклатура.Артикул = &Артикул
		|				И Номенклатура.Изготовитель = &Изготовитель) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних"
		);
		Запрос.УстановитьПараметр("Дата", вхДата);
		Запрос.УстановитьПараметр("Прайс", вхПрайс);
		Запрос.УстановитьПараметр("Артикул", вхАртикул);
		Запрос.УстановитьПараметр("Изготовитель", вхИзготовитель);
	КонецЕсли;
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		Если Результат[0].Валюта = вхВалюта Тогда
			Возврат Результат[0].Цена;
		Иначе
			СтруктураКурсаНач = МодульВалютногоУчета.ПолучитьКурсВалюты(Результат[0].Валюта, вхДата);
			СтруктураКурсаКон = МодульВалютногоУчета.ПолучитьКурсВалюты(вхВалюта, вхДата);
			Возврат МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Результат[0].Цена, Результат[0].Валюта, вхВалюта, 
				СтруктураКурсаНач.Курс, СтруктураКурсаКон.Курс, СтруктураКурсаКон.Кратность, СтруктураКурсаКон.Кратность);
			
		КонецЕсли;
	КонецЕсли;
КонецФункции

//Функция ЗагрузитьТабличнуюЧастьИзФайлаFTP(вхСсылка, вхКонтрагент, вхОбъектМетаданных, вхТЧОбъектаМетаданных) Экспорт
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	НастройкиFTP.Ссылка
//	|ИЗ
//	|	Справочник.НастройкиFTP.Контрагенты КАК НастройкиFTP
//	|ГДЕ
//	|	НастройкиFTP.Контрагент = &Контрагент
//	|	И НЕ НастройкиFTP.Ссылка.Выгрузка
//	|	И НастройкиFTP.Ссылка.Используется
//	|	И НастройкиFTP.Ссылка.ОбъектМетаданных = &ОбъектМетаданных
//	|	И НастройкиFTP.Ссылка.ТабличнаяЧастьОбъектаМетаданных = &ТЧОбъектаМетаданных"
//	);
//	Запрос.УстановитьПараметр("Контрагент", вхКонтрагент);
//	Запрос.УстановитьПараметр("ОбъектМетаданных", вхОбъектМетаданных);
//	Запрос.УстановитьПараметр("ТЧОбъектаМетаданных",вхТЧОбъектаМетаданных);
//	Результат = Запрос.Выполнить().Выгрузить();
//	
//	Если Результат.Количество() = 0 Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Обработка = Обработки.УниверсальнаяОбработкаЗагрузкиВыгрузкиИзВФайл.Создать();	
//	Обработка.Настройка = Результат[0].Ссылка;
//	Если вхСсылка = Неопределено Тогда
//		Обработка.ТекущийОбъект = вхКонтрагент;
//	Иначе
//		Обработка.ТекущийОбъект = вхСсылка;
//	КонецЕсли;
//	
//	Возврат Обработка.ВыполнитьОбработку();
//	
//КонецФункции

Функция ОставитьТолькоИзмененныеЦены(ТабТоваров, вхПрайс, вхДата, вхВалюта)
	КопияТабТоваров = ТабТоваров.СкопироватьКолонки();
	Для Каждого Товар Из ТабТоваров Цикл
		Если  Товар.Цена <> ПолучитьЦенуПоставщика(вхПрайс, , вхДата, вхВалюта, Товар.АртикулПоставщика, Товар.ИзготовительПоставщика) Тогда
			нс = КопияТабТоваров.Добавить();
			нс.АртикулПоставщика = Товар.АртикулПоставщика;
			нс.ИзготовительПоставщика = Товар.ИзготовительПоставщика;
			нс.НоменклатураПоставщика = Товар.НоменклатураПоставщика;
			нс.Цена = Товар.Цена;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КопияТабТоваров;
	
КонецФункции
//конец вспомогательных процедур

//область загрузки файлов
Процедура ПрочитатьТекстФайл(ТекИмяФайла, вхКодировка, ФайлОтвет = Ложь, вхДатаФайла = Неопределено, вхТабТоваров)
	//Если Настройка.ФормаДокумента = Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1 тогда
	//	Возврат;
	//КонецЕсли;
	
	Разделитель = ";";
		
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(ТекИмяФайла, вхКодировка);
	
	//Если Настройка.ОбъектМетаданных = "ПоступлениеТоваровУслуг" Тогда
	//	Для Каждого Стр Из Настройка.СоответствияПолей Цикл
	//		Если Стр.ФайлОтвет Тогда
	//			ТабРезультат.Колонки.Добавить(Стр.ПолеОбъекта);
	//		КонецЕсли;
	//	КонецЦикла;
	//Иначе
	//	Если НЕ ПустаяСтрока(ИмяФайлаОтвета) Тогда
	//		ТабРезультат.Колонки.Добавить("НашКод");
	//		ТабРезультат.Колонки.Добавить("КодОтвета");
	//	КонецЕсли;
	//КонецЕсли;
	
	//ДописыватьДатуФайла = Ложь;//колонка ДатаФайла - всегда должна быть последней
	//Если ТабРезультат.Колонки.Найти("ДатаФайла") <> Неопределено Тогда
	//	ДописыватьДатуФайла = Истина;
	//КонецЕсли;
	
	Для НомерСтроки = 1 по ЗагружаемыйФайл.КоличествоСтрок() Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
			
		// получить стрoку с указанным номером и преобразуем её в массив
		Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
		Если Лев(Строка, 1) = Символ(34) Тогда
			Строка = Прав(Строка, СтрДлина(Строка) - 1);
		КонецЕсли;
				
		Если Прав(Строка, 1) = Символ(34) Тогда
			Строка = Лев(Строка, СтрДлина(Строка) - 1);
		КонецЕсли;
		
		
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель);
		
		нс = вхТабТоваров.Добавить();
		Для а = 0 По МассивКол.Количество()-1 Цикл 
			текЗначение = СокрЛП(МассивКол[а]);
			Если а = 0 Тогда
				нс.АртикулПоставщика = текЗначение;
			ИначеЕсли а = 1 Тогда
				нс.ИзготовительПоставщика = текЗначение;
			ИначеЕсли а = 2 Тогда
				текЗначение = СтрЗаменить(текЗначение, ",", ".");
				Попытка
					нс.Цена = Число(текЗначение);
				Исключение
					нс.Цена = 0;
				КонецПопытки;
			ИначеЕсли а = 3 Тогда
				текЗначение = СтрЗаменить(текЗначение, ",", ".");
				Попытка
					нс.МинимальныйОстаток = Число(текЗначение);
				Исключение
					нс.МинимальныйОстаток = 0;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		нс.Артикул = ЭлектронныеДокументы.НормализоватьСтрокуАртикула(нс.АртикулПоставщика);
		нс.Изготовитель = ЭлектронныеДокументы.НормализоватьСтрокуИзготовителя(нс.ИзготовительПоставщика);
		
		//Если ДописыватьДатуФайла Тогда
		//	нс.ДатаФайла = вхДатаФайла;
		//КонецЕсли;
		
	КонецЦикла;
	
	Если вхТабТоваров.Количество() = ЗагружаемыйФайл.КоличествоСтрок() Тогда
		//удалить файл
		ЛогФайл.ЗаписатьСтроку("    файл полностью прочитан, количество строк в таблице: " + Строка(вхТабТоваров.Количество()));
	Иначе
		ЛогФайл.ЗаписатьСтроку("    файл прочитан не польностью, количество строк в таблице: " + Строка(вхТабТоваров.Количество()));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьТабличнуюЧастьИзФайлаFTP(вхНастройка, вхТабТоваров)
	Если вхНастройка.ТипФайла <> Перечисления.ТипыФайлов.txt Тогда
		ЛогФайл.ЗаписатьСтроку("    не определены параметры загрузки для такого типа файлов (" + Строка(вхНастройка.ТипФайла) + ")");
		Возврат;
		
	КонецЕсли;
		
	FTPСоединение = Новый FTPСоединение(вхНастройка.СерверFTP, вхНастройка.ПортFTP, вхНастройка.Логин, вхНастройка.Пароль);
	Если НЕ ПустаяСтрока(вхНастройка.КаталогFTP) Тогда
		FTPСоединение.УстановитьТекущийКаталог(вхНастройка.КаталогFTP);
		
	КонецЕсли;
	
	ИмяФайла = вхНастройка.ИмяФайла + "*";
	
	ФайлыFTP = FTPСоединение.НайтиФайлы(ИмяФайла);
	Если ФайлыFTP.Количество() = 0 Тогда
		ЛогФайл.ЗаписатьСтроку("    на сервере ftp не найдено файлов");
		Возврат; 
	КонецЕсли;
	
	текФайл = ФайлыFTP[0];
	Для А = 0 По ФайлыFTP.Количество() - 1 Цикл
		Если ФайлыFTP[А].ПолучитьВремяИзменения() > текФайл.ПолучитьВремяИзменения() Тогда
			текФайл = ФайлыFTP[А];
		КонецЕсли;
		
	КонецЦикла;
		
	ВременныйФайл = ПолучитьИмяВременногоФайла("txt"); 
	FTPСоединение.Получить(текФайл.Имя, ВременныйФайл);
	ПрочитатьТекстФайл(ВременныйФайл, вхНастройка.КодировкаФайла, , , вхТабТоваров);
	
КонецПроцедуры
//конец области загрузки файлов

//*********************************************************
//1. грузим прайс-лист
Процедура ВыполнитьЗагрузкуПрайсЛистов()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиFTPКонтрагенты.Ссылка КАК Настройка,
	|	НастройкиFTPКонтрагенты.Контрагент,
	|	Прайсы.Ссылка КАК Прайс,
	|	НастройкиFTPКонтрагенты.ИмяФайла,
	|	НастройкиFTPКонтрагенты.КаталогFTP,
	|	НастройкиFTPКонтрагенты.СерверFTP,
	|	НастройкиFTPКонтрагенты.ПортFTP,
	|	НастройкиFTPКонтрагенты.Логин,
	|	НастройкиFTPКонтрагенты.Пароль,
	|	НастройкиFTPКонтрагенты.КодировкаФайла,
	|	НастройкиFTPКонтрагенты.ТипФайла
	|ИЗ
	|	Справочник.НастройкиFTP.Контрагенты КАК НастройкиFTPКонтрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрайсыПоставщиковVMI КАК Прайсы
	|		ПО НастройкиFTPКонтрагенты.Контрагент = Прайсы.Владелец
	|ГДЕ
	|	НастройкиFTPКонтрагенты.Ссылка.Используется
	|	И НастройкиFTPКонтрагенты.Ссылка.ОбъектМетаданных = &ОбъектМетаданных"
	);
	Запрос.УстановитьПараметр("ОбъектМетаданных", "ПереоценкаОстатковПоставщика");

	Результат = Запрос.Выполнить().Выбрать();
	ЛогФайл.ЗаписатьСтроку("выполнен запрос по настройкам для переоценки " + Формат(ТекущаяДата(), "ДЛФ=DT"));
	
	Пока Результат.Следующий() Цикл
		ТабТоваров = Новый ТаблицаЗначений;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ТабТоваров.Колонки.Добавить("АртикулПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(30)));
		ТабТоваров.Колонки.Добавить("ИзготовительПоставщика", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(100)));
		ТабТоваров.Колонки.Добавить("Артикул", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(25)));
		ТабТоваров.Колонки.Добавить("Изготовитель", Новый ОписаниеТипов(Массив, , , ,Новый КвалификаторыСтроки(100)));
		Массив.Очистить();
		Массив.Добавить(Тип("Число"));
		ТабТоваров.Колонки.Добавить("МинимальныйОстаток", Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(15,3)));
		ТабТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(15,4)));
		
		ЛогФайл.ЗаписатьСтроку("создан макет таблицы для товаров поставщика " + Формат(ТекущаяДата(), "ДЛФ=DT"));
		
		ЗагрузитьТабличнуюЧастьИзФайлаFTP(Результат, ТабТоваров);
		
		ЛогФайл.ЗаписатьСтроку("таблица товаров прочитана из файла " + Формат(ТекущаяДата(), "ДЛФ=DT"));
		ЛогФайл.ЗаписатьСтроку("    количество строк в таблице: " + Строка(ТабТоваров.Количество()));
		
		//Для Каждого СтрокаТовара Из ТабТоваров Цикл
		//	СтрокаТовара.Артикул = ЭлектронныеДокументы.НормализоватьСтрокуАртикула(СтрокаТовара.АртикулПоставщика);
		//	СтрокаТовара.Изготовитель = ЭлектронныеДокументы.НормализоватьСтрокуИзготовителя(СтрокаТовара.ИзготовительПоставщика);
		//	СтрокаТовара.МинимальныйОстаток = 0;
		//	
		//КонецЦикла;
		
		//ЛогФайл.ЗаписатьСтроку("нормализованы артикулы и изготовители поставщика " + Формат(ТекущаяДата(), "ДЛФ=DT"));
		//ЛогФайл.ЗаписатьСтроку("    количество строк в таблице: " + Строка(ТабТоваров.Количество()));
		
		Если ТабТоваров.Количество() > 0 Тогда
			РезультатФормированияДокумента = ЭлектронныеДокументы.ЗагрузитьПрайсПоставщикаИзОП(Результат.Контрагент, , ТабТоваров);
			
			Если РезультатФормированияДокумента.Результат Тогда
				//попытка удалить файл
				//текНастройка = Результат.Настройка;
				FTPСоединение = Новый FTPСоединение(Результат.СерверFTP, Результат.ПортFTP, Результат.Логин, Результат.Пароль);
				Если НЕ ПустаяСтрока(Результат.КаталогFTP) Тогда
					FTPСоединение.УстановитьТекущийКаталог(Результат.КаталогFTP);
				КонецЕсли;
				ИмяФайла = Результат.ИмяФайла + "*";
			
				ФайлыFTP = FTPСоединение.НайтиФайлы(ИмяФайла);
				Если ФайлыFTP.Количество() > 0 Тогда
					текФайл = ФайлыFTP[0];
					Для А = 0 По ФайлыFTP.Количество() - 1 Цикл
						Если ФайлыFTP[А].ПолучитьВремяИзменения() > текФайл.ПолучитьВремяИзменения() Тогда
							текФайл = ФайлыFTP[А];
						КонецЕсли;
					КонецЦикла;
					Попытка
						FTPСоединение.Удалить(текФайл.Имя);
						ЛогФайл.ЗаписатьСтроку("    файл с фтп удален");
							
					Исключение
						//скорее всего нет доступа на фтп
						ЛогФайл.ЗаписатьСтроку("    файл с фтп не удален");
					КонецПопытки;
										
				КонецЕсли;
				
			КонецЕсли;

			ЛогФайл.ЗаписатьСтроку("получен результат формирования документа " + Формат(ТекущаяДата(), "ДЛФ=DT"));
			ЛогФайл.ЗаписатьСтроку("    документ создан =  " + РезультатФормированияДокумента.Результат);
			ЛогФайл.ЗаписатьСтроку("    описание ошибки =  " + РезультатФормированияДокумента.ОписаниеОшибки);
		
		КонецЕсли;
		
		ЛогФайл.ЗаписатьСтроку("    документ не создан. пустая таблица товаров  ");
				
	КонецЦикла;
			
КонецПроцедуры

//2. выгружаем заказ
Процедура ВыполнитьВыгрузкуЗаказа() 
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Р.Объект КАК ЗаказПоставщику,
	|	Р.Объект.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК Р
	|ГДЕ
	|	Р.Объект ССЫЛКА Документ.ЗаказПоставщику
	|	И НЕ Р.Получен
	|	И Р.Выгружен" 
	);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если ЭлектронныеДокументы.ПрочитатьОтветыFTP(Результат.ЗаказПоставщику, Результат.Контрагент, "ЗаказПоставщику", "Товары", Ложь) <> Неопределено Тогда
			НачатьТранзакцию();
			Попытка
				ЗаказПоставщикуОбъект = Результат.ЗаказПоставщику.ПолучитьОбъект();
				ЗаказПоставщикуОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПолученОтветПоставщика;
				ЗаказПоставщикуОбъект.Записать(РежимЗаписиДокумента.Запись);
				СтруктураДокумента = Новый Структура;
				СтруктураДокумента.Вставить("ЭтоНовый", Ложь);
				СтруктураШапкиДокумента = Новый Структура;
				Для Каждого РеквизитДокумента Из ЗаказПоставщикуОбъект.Метаданные().Реквизиты Цикл
					СтруктураШапкиДокумента.Вставить(РеквизитДокумента.Имя, ЗаказПоставщикуОбъект[РеквизитДокумента.Имя]);		
				КонецЦикла;
				СтруктураДокумента.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
				СтруктураДокумента.Вставить("Товары", ЗаказПоставщикуОбъект.Товары.Выгрузить());
				СтруктураДокумента.Вставить("ПричиныОтказов", ЗаказПоставщикуОбъект.ПричиныОтказов.Выгрузить());
				СтруктураДокумента.Вставить("Услуги", ЗаказПоставщикуОбъект.Услуги.Выгрузить());
				ЗаказПоставщикуОбъект.СоздатьКорректировкуЗаказаПоставщику(СтруктураДокумента);
				ЭлектронныеДокументы.ИзменитьРегистрациюДокументаВОбменеFTP(Результат.ЗаказПоставщику, , Текущаядата(), Истина, Истина);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
		Иначе
			Сообщить("Неудачная попытка чтения ответа на ftp.");
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Р.Объект КАК ЗаказПоставщику,
	|	Р.Объект.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК Р
	|ГДЕ
	|	Р.Объект ССЫЛКА Документ.ЗаказПоставщику
	|	И НЕ Р.Выгружен" 
	);
	
	Р = Запрос.Выполнить();
	Если Р.Пустой() Тогда
		Сообщить("Неудачная попытка выгрузки на ftp.");
		Возврат;
	КонецЕсли;
	
	Результат = Р.Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если ЭлектронныеДокументы.ВыгрузитьФайлFTP(Результат.ЗаказПоставщику, Результат.Контрагент, "ЗаказПоставщику", "Товары") <> Неопределено Тогда
			НачатьТранзакцию();
			Попытка
				ЗаказПоставщикуОбъект = Результат.ЗаказПоставщику.ПолучитьОбъект();
				ЗаказПоставщикуОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ОтправленПоставщику;
				ЗаказПоставщикуОбъект.Записать(РежимЗаписиДокумента.Запись);
				СтруктураДокумента = Новый Структура;
				СтруктураДокумента.Вставить("ЭтоНовый", Ложь);
				СтруктураШапкиДокумента = Новый Структура;
				Для Каждого РеквизитДокумента Из ЗаказПоставщикуОбъект.Метаданные().Реквизиты Цикл
					СтруктураШапкиДокумента.Вставить(РеквизитДокумента.Имя, ЗаказПоставщикуОбъект[РеквизитДокумента.Имя]);		
				КонецЦикла;
				СтруктураДокумента.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
				СтруктураДокумента.Вставить("Товары", ЗаказПоставщикуОбъект.Товары.Выгрузить());
				СтруктураДокумента.Вставить("ПричиныОтказов", ЗаказПоставщикуОбъект.ПричиныОтказов.Выгрузить());
				СтруктураДокумента.Вставить("Услуги", ЗаказПоставщикуОбъект.Услуги.Выгрузить());
				ЗаказПоставщикуОбъект.СоздатьКорректировкуЗаказаПоставщику(СтруктураДокумента);
				ЭлектронныеДокументы.ИзменитьРегистрациюДокументаВОбменеFTP(Результат.ЗаказПоставщику, , Текущаядата(), Истина);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
		Иначе
			Сообщить("Неудачная попытка выгрузки на ftp.");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//3. загружаем ответ о принятии заказа
Процедура ВыполнитьЗагрузкуЗаказаОтвет()
	
КонецПроцедуры

//4. загружаем МХ-1
Процедура ВыполнитьЗагрузкуПоступления() 
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиFTPКонтрагенты.Ссылка КАК Настройка,
	|	НастройкиFTPКонтрагенты.Контрагент,
	|	Прайсы.Ссылка КАК Прайс
	|ИЗ
	|	Справочник.НастройкиFTP.Контрагенты КАК НастройкиFTPКонтрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрайсыПоставщиковVMI КАК Прайсы
	|		ПО НастройкиFTPКонтрагенты.Контрагент = Прайсы.Владелец
	|ГДЕ
	|	НастройкиFTPКонтрагенты.Ссылка.Используется
	|	И НастройкиFTPКонтрагенты.Ссылка.Загрузка
	|	И НастройкиFTPКонтрагенты.Ссылка.ОбъектМетаданных = &ОбъектМетаданных"
	);
	Запрос.УстановитьПараметр("ОбъектМетаданных", "ПоступлениеТоваровУслуг");
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТекстЗапроса = "";
		НастройкаОбъект = Результат.Настройка.ПолучитьОбъект();
		Для Каждого Стр Из НастройкаОбъект.СоответствияПолей Цикл
			Если НЕ Стр.ФайлОтвет Тогда
				Если Стр.ПолеОбъекта = "ДатаФайла" Тогда
					КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
    				типДата = Новый ОписаниеТипов("Дата", , ,КвалификаторыДаты);
					ТаблицаТоваров.Колонки.Добавить(Стр.ПолеОбъекта, типДата);
				Иначе
					КвалификаторыСтроки = Новый КвалификаторыСтроки(200);
    				типСтрока = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
					ТаблицаТоваров.Колонки.Добавить(Стр.ПолеОбъекта, типСтрока);					
				КонецЕсли;
				Если ПустаяСтрока(ТекстЗапроса) Тогда
					ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
					|	Т." + Стр.ПолеОбъекта;
				Иначе
					ТекстЗапроса = ТекстЗапроса + ",
					|	Т." + Стр.ПолеОбъекта;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|ПОМЕСТИТЬ Т
		|ИЗ &ТаблицаТоваров КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ЭлектронныеДокументы.ЗагрузитьТабличнуюЧастьИзФайлаFTP( ,
		Результат.Контрагент, "ПоступлениеТоваровУслуг", "Товары"), ТаблицаТоваров);
		
		Если ТаблицаТоваров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапросТовары = Новый Запрос(ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Н.Ссылка КАК НоменклатураПоставщика,
		|	Н.АртикулПоставщика КАК АртикулПоставщика,
		|	Н.ИзготовительПоставщика КАК ИзготовительПоставщика,
		|	ЕСТЬNULL(Н.Номенклатура, Значение(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ЕСТЬNULL(Н.Номенклатура.ЕдиницаХраненияОстатков, Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(Н.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1) КАК Коэффициент
		|ПОМЕСТИТЬ Н
		|ИЗ Справочник.НоменклатураКонтрагентов КАК Н
		|ГДЕ Н.Владелец = &Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Р2.Объект, Значение(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)) КАК СсылкаНаДокумент,
		|	Т.ДатаФайла,
		|	Т.КодОтгрузкиПоставщика,
		|	Т.КодНашегоСклада,
		|	Н.Номенклатура,
		|	Н.НоменклатураПоставщика,
		|	Н.ЕдиницаИзмерения,
		|	Н.Коэффициент,
		|	Т.Количество,
		|	Т.НомерГТДстрока,
		|	ЕСТЬNULL(С1.Ссылка, Значение(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
		|	ЕСТЬNULL(С2.Ссылка, Значение(Справочник.СтраныМира.ПустаяСсылка)) КАК СтранаПроисхождения
		|ИЗ Т КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияОбмена1с8FTP КАК Р2
		|		ПО Т.КодОтгрузкиПоставщика = Р2.КодФайла
		|	ЛЕВОЕ СОЕДИНЕНИЕ Н КАК Н 
		|		ПО Т.АртикулПоставщика = Н.АртикулПоставщика
		|			И Т.ИзготовительПоставщика = Н.ИзготовительПоставщика
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК С1
		|		ПО Т.НомерГТДстрока = С1.Код
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК С2
		|		ПО Т.КодСтраны = С2.Код"
		);
		
		ЗапросТовары.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		ЗапросТовары.УстановитьПараметр("Контрагент", Результат.Контрагент);
		ЗапросТовары.УстановитьПараметр("Прайс", Результат.Прайс);
		
		Товары = ЗапросТовары.Выполнить().Выгрузить();
		Если Товары.Количество() = 0 тогда
			Продолжить;
		КонецЕсли;
		
		ПерваяСсылка = Товары[0].СсылкаНаДокумент;
		
		Если ЗначениеЗаполнено(ПерваяСсылка) Тогда
			ДокументОбъект = ПерваяСсылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = СоздатьПустойДокументПоступления(Результат.Контрагент);
		КонецЕсли;
		ПродолжитьБезЗаполнения = Ложь;
		Если ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый 
			ИЛИ ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен Тогда
			ДокументОбъект.Товары.Очистить();
		Иначе
			ПродолжитьБезЗаполнения = Истина;
		КонецЕсли;
		
		Для Каждого Товар Из Товары Цикл
			Если ПерваяСсылка <> Товар.СсылкаНаДокумент Тогда
				НачатьТранзакцию();
				Попытка
					ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					ЭлектронныеДокументы.ИзменитьРегистрациюДокументаВОбменеFTP(ДокументОбъект.Ссылка, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1,
					ТекущаяДата(), , , ДокументОбъект.НомерВходящегоДокумента, ДокументОбъект.ДатаВходящегоДокумента);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					Прервать;
				КонецПопытки;
				ПерваяСсылка = Товар.СсылкаНаДокумент;
				Если ЗначениеЗаполнено(ПерваяСсылка) Тогда
					ДокументОбъект = ПерваяСсылка.ПолучитьОбъект();
				Иначе
					ДокументОбъект = СоздатьПустойДокументПоступления(Результат.Контрагент);
				КонецЕсли;
				ПродолжитьБезЗаполнения = Ложь;
				Если ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровНовый 
					ИЛИ ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровОтгружен Тогда
					ДокументОбъект.Товары.Очистить();
				Иначе
					ПродолжитьБезЗаполнения = Истина;
				КонецЕсли;
				
			КонецЕсли;
			ДокументОбъект.НомерВходящегоДокумента = Товар.КодОтгрузкиПоставщика;
			Если НЕ ЗначениеЗаполнено(Товар.ДатаФайла) Тогда
				ДокументОбъект.ДатаВходящегоДокумента = ТекущаяДата();
			Иначе
				ДокументОбъект.ДатаВходящегоДокумента = Товар.ДатаФайла;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
				КодСклада = СокрЛП(Товар.КодНашегоСклада);
				Пока СтрДлина(КодСклада) < 9 Цикл
					КодСклада = "0" + КодСклада;
				КонецЦикла;
				ДокументОбъект.Склад = Справочники.Склады.НайтиПоКоду(КодСклада);
			КонецЕсли;
			
			Если НЕ ПродолжитьБезЗаполнения Тогда
				нс = ДокументОбъект.Товары.Добавить();
				нс.Номенклатура = Товар.Номенклатура;
				нс.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
				нс.Коэффициент = Товар.Коэффициент;
				нс.Количество = Товар.Количество;
				нс.Цена = ПолучитьЦенуПоставщика(Результат.Прайс, Товар.НоменклатураПоставщика, Товар.ДатаФайла, ДокументОбъект.ВалютаДокумента);
				нс.Сумма = нс.Количество*нс.Цена;
				Если ДокументОбъект.УчитыватьНДС Тогда
					нс.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				Иначе
					нс.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
				нс.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(нс.Сумма, ДокументОбъект.УчитыватьНДС, Истина, нс.СтавкаНДС);
				Если НЕ ЗначениеЗаполнено(Товар.НомерГТД) И НЕ ПустаяСтрока(Товар.НомерГТДстрока) Тогда
					НовГТД = Справочники.НомераГТД.СоздатьЭлемент();
					НовГТД.Код = Товар.НомерГТДстрока;
					НовГТД.Записать();
					нс.НомерГТД = новГТД.Ссылка;
				Иначе
					нс.НомерГТД = Товар.НомерГТД;
				КонецЕсли;
				нс.СтранаПроисхождения = Товар.СтранаПроисхождения;
			КонецЕсли;
			
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЭлектронныеДокументы.ИзменитьРегистрациюДокументаВОбменеFTP(ДокументОбъект.Ссылка, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1,
			ТекущаяДата(), , , ДокументОбъект.НомерВходящегоДокумента, ДокументОбъект.ДатаВходящегоДокумента);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		
		КонецПопытки;
						
	КонецЦикла;
	
КонецПроцедуры

//5. выгружаем количество принятого по МХ-1
Процедура ВыполнитьВыгрузкуПоступленияОтвет()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияОбмена1с8FTP.Объект,
	|	ИсторияОбмена1с8FTP.Объект.Контрагент КАК Контрагент,
	|	ИсторияОбмена1с8FTP.ДатаОбмена,
	|	ИсторияОбмена1с8FTP.ДатаФайла,
	|	ИсторияОбмена1с8FTP.КодФайла
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
	|ГДЕ
	|	ИсторияОбмена1с8FTP.Объект ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|	И ИсторияОбмена1с8FTP.Выгружен
	|	И НЕ ИсторияОбмена1с8FTP.Получен
	|	И ИсторияОбмена1с8FTP.ФормаОбъекта = ЗНАЧЕНИЕ(Перечисление.ФормыОбъектовДляРегистрацииFTP.МХ1)"
	);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Если ЭлектронныеДокументы.ВыгрузитьФайлFTP(Результат.Объект, Результат.Контрагент, "ПоступлениеТоваровУслуг", "Товары") Тогда
			    ЭлектронныеДокументы.ИзменитьРегистрациюДокументаВОбменеFTP(Результат.Объект, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ1,
				Результат.ДатаОбмена, Истина, Истина, Результат.КодФайла, Результат.ДатаФайла);
				ЗафиксироватьТранзакцию();
			Иначе
			    ВызватьИсключение("Неудачная попытка выгрузки на ftp.");
			КонецЕсли;
		Исключение
			Сообщить("Неудачная попытка выгрузки на ftp.");
			ОтменитьТранзакцию();
		КонецПопытки;
				
	КонецЦикла;
	
КонецПроцедуры

//6. выгружаем МХ-3
Процедура ВыполнитьВыгрузкуПоступления()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияОбмена1с8FTP.Объект,
	|	ИсторияОбмена1с8FTP.Объект.Контрагент КАК Контрагент,
	|	ИсторияОбмена1с8FTP.ДатаОбмена,
	|	ИсторияОбмена1с8FTP.ДатаФайла,
	|	ИсторияОбмена1с8FTP.КодФайла
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
	|ГДЕ
	|	ИсторияОбмена1с8FTP.ФормаОбъекта = ЗНАЧЕНИЕ(Перечисление.ФормыОбъектовДляРегистрацииFTP.МХ3)
	|	И НЕ ИсторияОбмена1с8FTP.Выгружен"
	);
	Запрос.УстановитьПараметр("ФормаОбъекта", "МХ-3");
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Если ЭлектронныеДокументы.ВыгрузитьФайлFTP(Результат.Объект, Результат.Контрагент, "ПоступлениеТоваровУслуг", "Товары") Тогда
			    ЭлектронныеДокументы.ИзменитьРегистрациюДокументаВОбменеFTP(Результат.Объект, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ3,
				Результат.ДатаОбмена, Истина, , Результат.КодФайла, Результат.ДатаФайла);
				ЗафиксироватьТранзакцию();
			Иначе
			    ВызватьИсключение("Неудачная попытка выгрузки на ftp.");
			КонецЕсли;
		Исключение
			Сообщить("Неудачная попытка выгрузки на ftp.");
			ОтменитьТранзакцию();
		КонецПопытки;
				
	КонецЦикла;
	
КонецПроцедуры

//7. загружаем ответ по МХ-3
Процедура ВыполнитьЗагрузкуПоступленияОтвет()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсторияОбмена1с8FTP.Объект КАк Ссылка,
	|	ИсторияОбмена1с8FTP.Объект.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.ИсторияОбмена1с8FTP КАК ИсторияОбмена1с8FTP
	|ГДЕ
	|	ИсторияОбмена1с8FTP.Объект ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|	И ИсторияОбмена1с8FTP.ФормаОбъекта = ЗНАЧЕНИЕ(Перечисление.ФормыОбъектовДляРегистрацииFTP.МХ3)
	|	И ИсторияОбмена1с8FTP.Выгружен
	|	И НЕ ИсторияОбмена1с8FTP.Получен"
	);
	Запрос.УстановитьПараметр("ОбъектМетаданных", "ПоступлениеТоваровУслуг");
	Запрос.УстановитьПараметр("ФормаДокумента", Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ3);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			РезультатЧтения = ЭлектронныеДокументы.ПрочитатьОтветыFTP(Результат.Ссылка, Результат.Контрагент, "ПоступлениеТоваровУслуг", "Товары", Истина);
			Если РезультатЧтения.Количество() > 0 Тогда
				КодТорг12 = РезультатЧтения[0].КодТорг12Поставщика;
				Об = Результат.Ссылка.ПолучитьОбъект();
				НомерПозиции = СтрНайти(КодТорг12,"_");
				Об.НомерВходящегоДокумента = Лев(КодТорг12, СтрДлина(КодТорг12) - НомерПозиции);
				ДатаТорг12 = Прав(КодТорг12,8);
				Об.ДатаВходящегоДокумента = Дата(Число(Прав(ДатаТорг12,4)), Число(Прав(Лев(ДатаТорг12,4),2)), Число(Лев(ДатаТорг12,2)));
				Об.Записать(режимЗаписиДокумента.Запись);
				ЭлектронныеДокументы.ИзменитьРегистрациюДокументаВОбменеFTP(Результат.Ссылка, Перечисления.ФормыОбъектовДляРегистрацииFTP.МХ3, 
				,Истина, Истина, Об.НомерВходящегоДокумента, Об.ДатаВходящегоДокумента);
				ЗафиксироватьТранзакцию();
				
			КонецЕсли;
			
		Исключение
			//сообщить не получены ответы
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
//*********************************************************
Функция ОпроситьСправочникНастроек()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Н.Ссылка.ОбъектМетаданных КАК ОбъектМетаданных,
	|	Н.Ссылка.Загрузка КАК Загрузка,
	|	Н.Ссылка.Выгрузка КАК Выгрузка,
	|	Н.ИмяФайлаОтвета
	|ИЗ
	|	Справочник.НастройкиFTP.Контрагенты КАК Н
	|ГДЕ
	|	Н.Ссылка.Используется"
	);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗагрузитьФайлы(ТекНастройка)
	Если ТекНастройка.ОбъектМетаданных = "ПереоценкаОстатковПоставщика" Тогда
		//Если ЛогФайлСоздан Тогда
			ЛогФайл.ЗаписатьСтроку("начало загрузки переоценки поставщика " + Формат(ТекущаяДата(), "ДЛФ=DT"));
		//КонецЕсли;
		ВыполнитьЗагрузкуПрайсЛистов();
	ИначеЕсли ТекНастройка.ОбъектМетаданных = "ПоступлениеТоваровУслуг" Тогда
		//загрузить МХ-1
		ВыполнитьЗагрузкуПоступления();
	Иначе
		//сообщить не определен тип объекта метаданных для загрузки
	КонецЕсли;	
КонецПроцедуры

Процедура ВыгрузитьФайлы(ТекНастройка)
	Если ТекНастройка.ОбъектМетаданных = "ЗаказПоставщику" Тогда
		ВыполнитьВыгрузкуЗаказа();
	ИначеЕсли ТекНастройка.ОбъектМетаданных = "ПоступлениеТоваровУслуг" Тогда
		//выгрузить МХ-3
		ВыполнитьВыгрузкуПоступления();
	Иначе
		//сообщить не определен тип объекта метаданных для выгрузки
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьФайлыОтвета(ТекНастройка)
	Если ТекНастройка.ОбъектМетаданных = "ЗаказПоставщику" Тогда
		ВыполнитьЗагрузкуЗаказаОтвет();
	ИначеЕсли ТекНастройка.ОбъектМетаданных = "ПоступлениеТоваровУслуг" Тогда
		//ответ на выгруженный МХ-3
		ВыполнитьЗагрузкуПоступленияОтвет();
	Иначе
		//сообщить не определен тип объекта метаданных для загрузки
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузитьФайлыОтвета(ТекНастройка)
	Если ТекНастройка.ОбъектМетаданных = "ПоступлениеТоваровУслуг" Тогда
		//ответ на выгруженный МХ-3
		ВыполнитьВыгрузкуПоступленияОтвет();
	Иначе
		//сообщить не определен тип объекта метаданных для загрузки
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьОбмен(ТекНастройки)
	Если ТекНастройки.Загрузка Тогда
		ЛогФайл.ЗаписатьСтроку("начало загрузки " + Формат(ТекущаяДата(), "ДЛФ=DT"));
		Если НЕ ПустаяСтрока(ТекНастройки.ИмяФайлаОтвета) Тогда
			ЛогФайл.ЗаписатьСтроку("начало выгрузки файла ответа " + Формат(ТекущаяДата(), "ДЛФ=DT"));
			ВыгрузитьФайлыОтвета(ТекНастройки);
		КонецЕсли;
		ЗагрузитьФайлы(ТекНастройки);
	КонецЕсли;
	
	Если ТекНастройки.Выгрузка тогда
		ЛогФайл.ЗаписатьСтроку("начало выгрузки " + Формат(ТекущаяДата(), "ДЛФ=DT"));
		Если НЕ ПустаяСтрока(ТекНастройки.ИмяФайлаОтвета) Тогда
			ЛогФайл.ЗаписатьСтроку("начало загрузки файла ответа " + Формат(ТекущаяДата(), "ДЛФ=DT"));
			ЗагрузитьФайлыОтвета(ТекНастройки);
		КонецЕсли;
		ВыгрузитьФайлы(ТекНастройки);
	КонецЕсли;
	
КонецПроцедуры
//*********************************************************
Процедура ВыполнитьРегламентноеЗадание() Экспорт
	Если ПустаяСтрока(ИмяОсновногоКаталогаЛога) Тогда
		ИмяОсновногоКаталогаЛога = "C:\Log\ОбменFTP\";
	Иначе
		ИмяОсновногоКаталогаЛога = СокрЛП(ИмяОсновногоКаталогаЛога);
		ИмяОсновногоКаталогаЛога = ИмяОсновногоКаталогаЛога + ?(Прав(ИмяОсновногоКаталогаЛога, 1) = "\", "", "\");
	КонецЕсли;
	КаталогЛога = Новый Файл(ИмяОсновногоКаталогаЛога);
	ИмяОсновногоКаталогаЛога = ИмяОсновногоКаталогаЛога + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "\";
	КаталогЛога = Новый Файл(ИмяОсновногоКаталогаЛога);
	Если НЕ КаталогЛога.Существует() тогда
		СоздатьКаталог(ИмяОсновногоКаталогаЛога);
		КаталогЛога = Новый Файл(ИмяОсновногоКаталогаЛога);
		Если НЕ КаталогЛога.Существует() тогда
			ЗаписьЖурналаРегистрации("загрузка ftp", 
			УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект,, "не удалось создать каталог лога загрузки");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	Если ПустаяСтрока(МаскаЛогФайла) Тогда
		МаскаЛогФайла = "загрузка_";
	Иначе
		МаскаЛогФайла = СокрЛП(МаскаЛогФайла);
		МаскаЛогФайла = МаскаЛогФайла + ?(Прав(МаскаЛогФайла, 1) = "_", "", "_");
	КонецЕсли;
	ТекущееВремя = Формат(ТекущаяДата(), "ДЛФ=T");
	ТекущееВремя = СтрЗаменить(ТекущееВремя, ":", "_");
	ИмяЛогФайла = КаталогЛога.ПолноеИмя;
	ИмяЛогФайла = ИмяЛогФайла + ?(Прав(ИмяЛогФайла, 1) = "\", "", "\");
	ИмяЛогФайла = ИмяЛогФайла + МаскаЛогФайла + ТекущееВремя + ".txt";
	
	Попытка
		ЛогФайл = Новый ЗаписьТекста(ИмяЛогФайла, КодировкаТекста.ANSI);
		ЛогФайл.ЗаписатьСтроку("начало работы регламента " + Формат(ТекущаяДата(), "ДЛФ=DT"));
	Исключение
		ЗаписьЖурналаРегистрации("загрузка ftp", 
		УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект,, "не удалось создать файл лога загрузки");
		Возврат;
	КонецПопытки;
		
	ТекущиеНастройкиОбмена = ОпроситьСправочникНастроек();
	
	Если ТекущиеНастройкиОбмена.Количество() > 0 Тогда
		ЛогФайл.ЗаписатьСтроку("настройки ftp определены " + Формат(ТекущаяДата(), "ДЛФ=DT"));
				
		Пока ТекущиеНастройкиОбмена.Следующий() Цикл
			Попытка
				ВыполнитьОбмен(ТекущиеНастройкиОбмена);
			Исключение
				ЛогФайл.ЗаписатьСтроку(ОписаниеОшибки());
				РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкиОбменаFTP, ОписаниеОшибки(), "ошибка обмена ftp");
			КонецПопытки;
		КонецЦикла;
		
	Иначе
		ЛогФайл.ЗаписатьСтроку("настройки ftp не заданы ни для одного поставщика " + Формат(ТекущаяДата(), "ДЛФ=DT"));
		
	КонецЕсли;
	
	
КонецПроцедуры

 