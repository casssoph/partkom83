
Перем мРегламентноеЗадание;

Функция ПолучитьПоследнийДокумент(вхДоговорКонтрагента)
	
	Результат = Неопределено;
	
	лЗапрос = Новый Запрос;
	лЗапрос.УстановитьПараметр("ДоговорКонтрагента", вхДоговорКонтрагента);
	лЗапрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоРасчетамСКонтрагентами.Регистратор
	|ИЗ
	|	Последовательность.ПоРасчетамСКонтрагентами КАК ПоРасчетамСКонтрагентами
	|ГДЕ
	|	ПоРасчетамСКонтрагентами.ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоРасчетамСКонтрагентами.Регистратор.МоментВремени УБЫВ";
	
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Если лВыборка.Следующий() тогда
		Результат = лВыборка.Регистратор;
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

Процедура ВыполнитьОбработку() Экспорт
	
	// получаем нарушенные последовательности   
	лЗапрос = ВыполнитьОбработкуФрагмент();
	лЗапрос.УстановитьПараметр("Договор", ДоговорКонтрагента);	
	лЗапрос.УстановитьПараметр("ВсеДоговоры", Не ЗначениеЗаполнено(ДоговорКонтрагента));
	
	лЗапросДокументы = ВыполнитьОбработкуФрагмент1();
	
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() цикл
		
		// для договоров, по которым не используется погашение по расчетным документам, просто сдвигаем границу на последний документ
		Если НЕ ОбщегоНазначения.ИспользоватьПогашениеПоРасчетнымДокументам(лВыборка.ДоговорКонтрагента) тогда
			
			лПоследнийДокумент = ПолучитьПоследнийДокумент(лВыборка.ДоговорКонтрагента);
			Если (лПоследнийДокумент <> Неопределено) тогда
				Последовательности.ПоРасчетамСКонтрагентами.УстановитьГраницу(лПоследнийДокумент.МоментВремени(), 
				Новый Структура("ДоговорКонтрагента", лВыборка.ДоговорКонтрагента));
			КонецЕсли;
			
		Иначе
			
			лЗапросДокументы.УстановитьПараметр("ДоговорКонтрагента", лВыборка.ДоговорКонтрагента);
			лЗапросДокументы.УстановитьПараметр("МоментВремени", Новый МоментВремени(лВыборка.Период, лВыборка.Регистратор));
			лЗапросДокументы.УстановитьПараметр("Период", лВыборка.Период);
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); //read committed
			лВыборкаДокументы = лЗапросДокументы.Выполнить().Выбрать();
			ЗафиксироватьТранзакцию();
			
			Сообщить("Обработка "+лВыборка.ДоговорКонтрагентаКод);
			сч = 0;
			Пока лВыборкаДокументы.Следующий() цикл
				
				лОтказ = Ложь;
				лМенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(лВыборкаДокументы.Регистратор);
				лПараметры = Новый Структура;
				лПараметры.Вставить("Фильтр", Новый Структура("ДоговорКонтрагента", лВыборка.ДоговорКонтрагента));
				лПараметры.Вставить("РегистрыДвижений", "Взаиморасчеты");
				лМетаданныеДокумента = лВыборкаДокументы.Регистратор.Метаданные();
				
				Попытка
					
					РежимУправленияБД = ?(Строка(лМетаданныеДокумента.РежимУправленияБлокировкойДанных) = "Управляемый", РежимУправленияБлокировкойДанных.Управляемый, РежимУправленияБлокировкойДанных.Автоматический);
				   
					//Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
						НачатьТранзакцию(РежимУправленияБД);
					//КонецЕсли;
					
					лМенеджерДокумента.ВыполнитьПроведение(лВыборкаДокументы.Регистратор, лОтказ, лПараметры);
					
					Если лОтказ тогда
						ВызватьИсключение "Документ не проведен: " + лВыборкаДокументы.Регистратор;
					КонецЕсли;
					//Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
						ЗафиксироватьТранзакцию();
					//КонецЕсли;
				Исключение
					//Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
						ОтменитьТранзакцию();
					//КонецЕсли;
					ЗаписьЖурналаРегистрации("Регламентные задания." + Метаданные().Синоним,
					УровеньЖурналаРегистрации.Ошибка, Метаданные.НайтиПоТипу(ТипЗнч(лВыборка.Регистратор)),
					лВыборка.Регистратор, ОписаниеОшибки());
					Прервать;
				КонецПопытки;
				
				сч = сч+1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьОбработкуФрагмент1()
	
	Перем лЗапросДокументы;
	
	лЗапросДокументы = Новый Запрос;
	лЗапросДокументы.Текст = 
	"ВЫБРАТЬ
	|	З.Регистратор
	|ИЗ
	|	Последовательность.ПоРасчетамСКонтрагентами КАК З
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ПоРасчетамСКонтрагентами.Границы КАК Г
	|		ПО З.ДоговорКонтрагента = Г.ДоговорКонтрагента
	|ГДЕ
	|	З.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И (Г.ДоговорКонтрагента ЕСТЬ NULL 
	//|			ИЛИ З.МоментВремени > Г.МоментВремени)
	|			ИЛИ З.Период >= НачалоПериода(Г.Период, День))
	|УПОРЯДОЧИТЬ ПО
	|	З.МоментВремени";
	Возврат лЗапросДокументы;

КонецФункции

Функция ВыполнитьОбработкуФрагмент_Старая()
	
	Перем лЗапрос;
	
	лЗапрос = Новый Запрос;
	лЗапрос.Текст = 
	"ВЫБРАТЬ" + ?(Порция > 0, " ПЕРВЫЕ " + Формат(Порция, "ЧГ="), "") + "
	|	З.ДоговорКонтрагента,
	|	З.Период КАК Период,
	|	З.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		З.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		З.Период КАК Период,
	|		МАКСИМУМ(З.Регистратор) КАК Регистратор
	|	ИЗ
	|		Последовательность.ПоРасчетамСКонтрагентами КАК З
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Т.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|				МАКСИМУМ(Т.Период) КАК Период
	|			ИЗ
	|				Последовательность.ПоРасчетамСКонтрагентами КАК Т Где (Т.ДоговорКонтрагента = &Договор ИЛИ &ВсеДоговоры) 
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Т.ДоговорКонтрагента  ) КАК П
	|			ПО З.ДоговорКонтрагента = П.ДоговорКонтрагента
	|				И З.Период = П.Период   Где (З.ДоговорКонтрагента = &Договор ИЛИ &ВсеДоговоры)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		З.ДоговорКонтрагента,
	|		З.Период) КАК З
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ПоРасчетамСКонтрагентами.Границы КАК Г
	|		ПО З.ДоговорКонтрагента = Г.ДоговорКонтрагента
	|ГДЕ
	|	(Г.ДоговорКонтрагента ЕСТЬ NULL 
	|			ИЛИ (З.Период > Г.Период
	|				ИЛИ З.Период = Г.Период
	|					И З.Регистратор > Г.Регистратор))";
	Возврат лЗапрос;

КонецФункции

Функция ВыполнитьОбработкуФрагмент()
	
	Перем лЗапрос;
	
	лЗапрос = Новый Запрос;
	
	лЗапрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПоРасчетамСКонтрагентами.Период) КАК Период,
	|	ПоРасчетамСКонтрагентами.ДоговорКонтрагента
	|ПОМЕСТИТЬ МаксПериоды
	|ИЗ
	|	Последовательность.ПоРасчетамСКонтрагентами КАК ПоРасчетамСКонтрагентами
	|   Где (ПоРасчетамСКонтрагентами.ДоговорКонтрагента = &Договор ИЛИ &ВсеДоговоры) 
	|СГРУППИРОВАТЬ ПО
	|	ПоРасчетамСКонтрагентами.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПоРасчетамСКонтрагентами.Регистратор) КАК Регистратор,
	|	ПоРасчетамСКонтрагентами.Период КАК Период,
	|	ПоРасчетамСКонтрагентами.ДоговорКонтрагента
	|ПОМЕСТИТЬ МаксДокументы
	|ИЗ
	|	Последовательность.ПоРасчетамСКонтрагентами КАК ПоРасчетамСКонтрагентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксПериоды КАК МаксПериоды
	|		ПО ПоРасчетамСКонтрагентами.ДоговорКонтрагента = МаксПериоды.ДоговорКонтрагента
	|			И ПоРасчетамСКонтрагентами.Период = МаксПериоды.Период
	|	Где (ПоРасчетамСКонтрагентами.ДоговорКонтрагента = &Договор ИЛИ &ВсеДоговоры)
	| Сгруппировать по ПоРасчетамСКонтрагентами.Период, ПоРасчетамСКонтрагентами.ДоговорКонтрагента	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " + ?(Порция > 0, " ПЕРВЫЕ " + Формат(Порция, "ЧГ="), "") + "
	|	МаксДокументы.Регистратор КАК ПоследнийВПоследовательности,
	|	МаксДокументы.Период КАК ПериодПоследнегоВПоследовательности,
	|	ПоРасчетамСКонтрагентами.Регистратор КАК Регистратор,
	|	ПоРасчетамСКонтрагентами.Период КАК Период,
	|	ПоРасчетамСКонтрагентами.ДоговорКонтрагента,
	|	ПоРасчетамСКонтрагентами.ДоговорКонтрагента.Код КАК ДоговорКонтрагентаКод
	|ИЗ
	|	Последовательность.ПоРасчетамСКонтрагентами.Границы КАК ПоРасчетамСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксДокументы КАК МаксДокументы
	|		ПО (МаксДокументы.ДоговорКонтрагента = ПоРасчетамСКонтрагентами.ДоговорКонтрагента)
	|ГДЕ 
	//|	МаксДокументы.Период >= ПоРасчетамСКонтрагентами.Период
	//|	И 
	|НЕ МаксДокументы.Регистратор = ПоРасчетамСКонтрагентами.Регистратор 
	|   И (ПоРасчетамСКонтрагентами.ДоговорКонтрагента = &Договор ИЛИ &ВсеДоговоры)
	//|   И ПоРасчетамСКонтрагентами.Период >= Датавремя(2018,1,1)
	|	И МаксДокументы.Регистратор.МоментВремени > ПоРасчетамСКонтрагентами.МоментВремени
	|УПОРЯДОЧИТЬ ПО
	|	ПоРасчетамСКонтрагентами.Период";
	
	Возврат лЗапрос;

КонецФункции


#Если Сервер тогда
	Процедура ВыполнитьРегламентноеЗадание() Экспорт
		мРегламентноеЗадание = Истина;
		Если РежимИсправленияГраниц Тогда 
			//ИсправитьЗаписиВПоследовательности();
			//ИсправитьЗаписиВПоследовательности2();
			ИсправитьГраницы();
		Иначе
			Если МаксимальноеКоличествоФоновыхЗаданий <=1 Тогда 
				ВыполнитьОбработку();
			Иначе
				ВыполнитьОбработкуМногопоточно();
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры
#КонецЕсли

Процедура ВыполнитьОбработкуМногопоточно() Экспорт  
	Если Порция = 0 Тогда 
		Порция = МаксимальноеКоличествоФоновыхЗаданий;
	КонецЕсли;
	
	Пока Истина Цикл 
		лЗапрос = ВыполнитьОбработкуФрагмент();
		лЗапрос.УстановитьПараметр("Договор", ДоговорКонтрагента);	
		лЗапрос.УстановитьПараметр("ВсеДоговоры", Не ЗначениеЗаполнено(ДоговорКонтрагента));
		Результат = лЗапрос.Выполнить();
		Если Результат.Пустой() Тогда 
			Прервать;
		КонецЕсли;
		лВыборка = Результат.Выбрать();
		
		КоличествоВКорзине = лВыборка.Количество()/МаксимальноеКоличествоФоновыхЗаданий;
		Если Окр(КоличествоВКорзине) <> КоличествоВКорзине Тогда 
			КоличествоВКорзине = Окр(КоличествоВКорзине) + 1;
		КонецЕсли;
		
		НомерПакета = 0;		
		МассивФоновыхЗаданий = Новый Массив;
		
		Шаг = 0;
		Массив = Новый Массив;
		
		ШаблонТаблицы = Новый ТаблицаЗначений;
		ШаблонТаблицы.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ШаблонТаблицы.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		ШаблонТаблицы.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
		
		Таблица = ШаблонТаблицы.СкопироватьКолонки();
		
		Пока лВыборка.Следующий() Цикл
			Если Шаг < КоличествоВКорзине Тогда 
				НоваяСтрока = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, лВыборка);
			Иначе
				Шаг = 0;
				ФоновоеЗадание = ЗапуститьФоновоеЗадание(НомерПакета, Таблица);
				Таблица = ШаблонТаблицы.СкопироватьКолонки();
				МассивФоновыхЗаданий.Добавить(ФоновоеЗадание);
				НомерПакета = НомерПакета + 1;
			КонецЕсли;
			Шаг = Шаг + 1;
		КонецЦикла;
		Если Таблица.Количество() Тогда 
			ФоновоеЗадание = ЗапуститьФоновоеЗадание(НомерПакета, Таблица);
			Таблица = ШаблонТаблицы.СкопироватьКолонки();
			МассивФоновыхЗаданий.Добавить(ФоновоеЗадание);
			НомерПакета = НомерПакета + 1;
		КонецЕсли;
		ФоновыеЗадания.ОжидатьЗавершения(МассивФоновыхЗаданий);
	КонецЦикла;
КонецПроцедуры

Функция ЗапуститьФоновоеЗадание(НомерПакета, Таблица)
	НаименованиеЗадания = НСтр("ru = 'Выполняется многопоточное восстановление по взаиморасчетам'");
	Алгоритм  = Алгоритм();
	Структура = Новый Структура;
	//Структура.Вставить("ДоговорКонтрагента", лВыборка.ДоговорКонтрагента);
	Структура.Вставить("Таблица", Таблица);
	Структура.Вставить("ПутьККаталогу", ПутьККаталогу);
	Структура.Вставить("НомерПакета", НомерПакета);
	//Структура.Вставить("Период", лВыборка.Период);
	//Структура.Вставить("Регистратор", лВыборка.Регистратор);
	Структура.Вставить("ЗапросДокументы", ВыполнитьОбработкуФрагмент1());
	Структура.Вставить("Синоним", Метаданные().Синоним);
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Алгоритм);
	ПараметрыЭкспортнойПроцедуры.Добавить(Структура);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("РаботаВБезопасномРежиме.ВыполнитьВБезопасномРежиме");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновоеЗадение = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, "МногопотВосстановление" + Строка(НомерПакета), НаименованиеЗадания);
	Возврат ФоновоеЗадение;
КонецФункции

Функция Алгоритм()
	
	Возврат "	Обр = 0; Для Каждого СтрокаТЧ Из Параметры.Таблица Цикл Если НЕ ОбщегоНазначения.ИспользоватьПогашениеПоРасчетнымДокументам(СтрокаТЧ.ДоговорКонтрагента) тогда
	|		
	|		лПоследнийДокумент = Неопределено;
	|		
	|		лЗапрос = Новый Запрос;
	|		лЗапрос.УстановитьПараметр(""ДоговорКонтрагента"", СтрокаТЧ.ДоговорКонтрагента);
	|		лЗапрос.Текст = 
	|		""ВЫБРАТЬ ПЕРВЫЕ 1
	|		|	ПоРасчетамСКонтрагентами.Регистратор
	|		|ИЗ
	|		|	Последовательность.ПоРасчетамСКонтрагентами КАК ПоРасчетамСКонтрагентами
	|		|ГДЕ
	|		|	ПоРасчетамСКонтрагентами.ДоговорКонтрагента = &ДоговорКонтрагента
	|		|
	|		|УПОРЯДОЧИТЬ ПО
	|		|	ПоРасчетамСКонтрагентами.Регистратор.МоментВремени УБЫВ"";
	|		
	|		лВыборка = лЗапрос.Выполнить().Выбрать();
	|		Если лВыборка.Следующий() тогда
	|			лПоследнийДокумент = лВыборка.Регистратор;
	|		КонецЕсли;
	|
	|		Если (лПоследнийДокумент <> Неопределено) тогда
	|			Последовательности.ПоРасчетамСКонтрагентами.УстановитьГраницу(лПоследнийДокумент.МоментВремени(), 
	|			Новый Структура(""ДоговорКонтрагента"", СтрокаТЧ.ДоговорКонтрагента));
	|		КонецЕсли;
	|		
	|	Иначе
	|	лЗапросДокументы = Новый Запрос;
	|	лЗапросДокументы.Текст = 
	|	""ВЫБРАТЬ
	||	З.Регистратор
	||	ИЗ
	||	Последовательность.ПоРасчетамСКонтрагентами КАК З
	||		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ПоРасчетамСКонтрагентами.Границы КАК Г
	||		ПО З.ДоговорКонтрагента = Г.ДоговорКонтрагента
	||ГДЕ
	||	З.ДоговорКонтрагента = &ДоговорКонтрагента
	||	И (Г.ДоговорКонтрагента ЕСТЬ NULL 
	||			ИЛИ З.Период >= НачалоПериода(Г.Период, День))
	||
	||УПОРЯДОЧИТЬ ПО
	||	З.МоментВремени"";
	|		лЗапросДокументы.УстановитьПараметр(""ДоговорКонтрагента"", СтрокаТЧ.ДоговорКонтрагента);
	|		лЗапросДокументы.УстановитьПараметр(""МоментВремени"", Новый МоментВремени(СтрокаТЧ.Период, СтрокаТЧ.Регистратор));
	|		
	|		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); //read committed
	|		лВыборкаДокументы = лЗапросДокументы.Выполнить().Выбрать();
	|		ЗафиксироватьТранзакцию();
	|		
	|		Пока лВыборкаДокументы.Следующий() цикл
	|			
	|			лОтказ = Ложь;
	|			лМенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(лВыборкаДокументы.Регистратор);
	|			лПараметры = Новый Структура;
	|			лПараметры.Вставить(""Фильтр"", Новый Структура(""ДоговорКонтрагента"", СтрокаТЧ.ДоговорКонтрагента));
	|			лПараметры.Вставить(""РегистрыДвижений"", ""Взаиморасчеты"");
	|			лМетаданныеДокумента = лВыборкаДокументы.Регистратор.Метаданные();
	|			
	|			Попытка
	|				РежимУправленияБД = ?(Строка(лМетаданныеДокумента.РежимУправленияБлокировкойДанных) = ""Управляемый"", РежимУправленияБлокировкойДанных.Управляемый, РежимУправленияБлокировкойДанных.Автоматический);
	//|				Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
	|					НачатьТранзакцию(РежимУправленияБД);
	//|				КонецЕсли;
	|				
	|				лМенеджерДокумента.ВыполнитьПроведение(лВыборкаДокументы.Регистратор, лОтказ, лПараметры);
	|				Обр = Обр + 1;
	|				Если лОтказ тогда
	|					ВызватьИсключение ""Документ не проведен: "" + лВыборкаДокументы.Регистратор;
	|				КонецЕсли;
	//|				Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
	|					ЗафиксироватьТранзакцию();
	//|				КонецЕсли;
	|			Исключение
	//|				Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
	|					ОтменитьТранзакцию();
	//|				КонецЕсли;
	|				ЗаписьЖурналаРегистрации(""Регламентные задания."" + Параметры.Синоним,
	|				УровеньЖурналаРегистрации.Ошибка, Метаданные.НайтиПоТипу(ТипЗнч(лВыборкаДокументы.Регистратор)),
	|				лВыборкаДокументы.Регистратор, ОписаниеОшибки());
	|				Прервать;
	|			КонецПопытки;
	//|			Если Параметры.НомерПакета = 0 И Обр/10 = Окр(Обр/10) Тогда
	//|            Об = Справочники.НастройкиРеквизитовДляОбменов.НайтиПоКоду(""000000025"").ПолучитьОбъект();
	//|		     Об.Хранилище = Новый ХранилищеЗначения(Обр);
	//|            Об.Записать();
	//|
	//|			КонецЕсли;		
	|		КонецЦикла;
	|		
	|	КонецЕсли; КонецЦикла;";

КонецФункции

Процедура ИсправитьГраницы() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВзаиморасчетыОстатки.ДокументРасчетов
	               |ПОМЕСТИТЬ вт
	               |ИЗ
	               |	РегистрНакопления.Взаиморасчеты.Остатки(, ДоговорКонтрагента.Владелец.Организация = &ПустОрг) КАК ВзаиморасчетыОстатки
	               |ГДЕ
	               |	ВзаиморасчетыОстатки.СуммаУпрОстаток < 0
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДоговорКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВзаиморасчетыОстатки.ДокументРасчетов
	               |ПОМЕСТИТЬ вт2
	               |ИЗ
	               |	РегистрНакопления.Взаиморасчеты.Остатки(
	               |			,
	               |			ДоговорКонтрагента В
	               |				(ВЫБРАТЬ
	               |					вт.ДоговорКонтрагента
	               |				ИЗ
	               |					вт)) КАК ВзаиморасчетыОстатки
	               |ГДЕ
	               |	ВзаиморасчетыОстатки.СуммаУпрОстаток > 0
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДоговорКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	вт.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	вт.ДокументРасчетов,
	               |	вт2.ДокументРасчетов КАК ДокументРасчетов1
	               |ПОМЕСТИТЬ вт3
	               |ИЗ
	               |	вт КАК вт
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт2 КАК вт2
	               |		ПО вт.ДоговорКонтрагента = вт2.ДоговорКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Взаиморасчеты.ДоговорКонтрагента,
	               |	Взаиморасчеты.Регистратор,
	               |	Взаиморасчеты.Период
	               |ПОМЕСТИТЬ вт4
	               |ИЗ
	               |	вт3 КАК вт3
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Взаиморасчеты КАК Взаиморасчеты
	               |		ПО вт3.ДоговорКонтрагента = Взаиморасчеты.ДоговорКонтрагента
	               |			И вт3.ДокументРасчетов = Взаиморасчеты.ДокументРасчетов
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Взаиморасчеты.ДоговорКонтрагента,
	               |	Взаиморасчеты.Регистратор,
	               |	Взаиморасчеты.Период
	               |ИЗ
	               |	вт3 КАК вт3
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Взаиморасчеты КАК Взаиморасчеты
	               |		ПО вт3.ДоговорКонтрагента = Взаиморасчеты.ДоговорКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт4.ДоговорКонтрагента,
	               |	МИНИМУМ(вт4.Период) КАК Период
	               |ПОМЕСТИТЬ вт5
	               |ИЗ
	               |	вт4 КАК вт4
	               |ГДЕ
	               |	вт4.Период > ДАТАВРЕМЯ(2016, 2, 29, 0, 0, 0)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вт4.ДоговорКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт5.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ПоРасчетамСКонтрагентами.МоментВремени
	               |ИЗ
	               |	вт5 КАК вт5
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Последовательность.ПоРасчетамСКонтрагентами КАК ПоРасчетамСКонтрагентами
	               |		ПО вт5.ДоговорКонтрагента = ПоРасчетамСКонтрагентами.ДоговорКонтрагента
	               |			И вт5.Период = ПоРасчетамСКонтрагентами.Период
	               |ИТОГИ ПО
	               |	ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("ПустОрг", Справочники.Организации.ПустаяСсылка());
	
	ВыборкаПоДоговорам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДоговорКонтрагента");
	Пока ВыборкаПоДоговорам.Следующий() Цикл 
		Выборка = ВыборкаПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МоментВремени = Неопределено;
		Пока Выборка.Следующий() Цикл 
			Если МоментВремени = Неопределено Или МоментВремени.Сравнить(Выборка.МоментВремени) = 1 Тогда 
				МоментВремени = Выборка.МоментВремени; 
			КонецЕсли;
		КонецЦикла;
		
		Отбор = Новый Структура("ДоговорКонтрагента", ВыборкаПоДоговорам.ДоговорКонтрагента);
		Граница = Последовательности.ПоРасчетамСКонтрагентами.ПолучитьГраницу(Отбор);
		
		Если Граница.Сравнить(МоментВремени) = 1  Тогда 
			Последовательности.ПоРасчетамСКонтрагентами.УстановитьГраницу(МоментВремени, Отбор);
			//ДоговорКонтрагента = ВыборкаПоДоговорам.ДоговорКонтрагента;
			//ВыполнитьОбработку();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ИсправитьЗаписиВПоследовательности() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоРасчетамСКонтрагентами.Регистратор,
	               |	ПоРасчетамСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента
	               |ИЗ
	               |	Последовательность.ПоРасчетамСКонтрагентами КАК ПоРасчетамСКонтрагентами
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоВзаиморасчетам
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ВводНачальныхОстатковПоВзаиморасчетам).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ВозвратТоваровПоставщику).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.КорректировкаДолга).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ОтчетКомиссионераОПродажах).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ОтчетКомитентуОПродажах
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ОтчетКомитентуОПродажах).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ПлатежноеПоручениеВходящее).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ПлатежноеПоручениеИсходящее).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ПриходныйКассовыйОрдер).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.РасходныйКассовыйОрдер).Дата <> ПоРасчетамСКонтрагентами.Период
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.РеализацияТоваровУслуг).Дата <> ПоРасчетамСКонтрагентами.Период
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоВзаиморасчетам
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ВводНачальныхОстатковПоВзаиморасчетам).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ВозвратТоваровПоставщику).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.КорректировкаДолга).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ОтчетКомиссионераОПродажах).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ОтчетКомитентуОПродажах
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ОтчетКомитентуОПродажах).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ПлатежноеПоручениеВходящее).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ПлатежноеПоручениеИсходящее).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.ПриходныйКассовыйОрдер).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.РасходныйКассовыйОрдер).Проведен
	               |			КОГДА ПоРасчетамСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	               |				ТОГДА ВЫРАЗИТЬ(ПоРасчетамСКонтрагентами.Регистратор КАК Документ.РеализацияТоваровУслуг).Проведен
	               |		КОНЕЦ
	               |ИТОГИ ПО
	               |	ДоговорКонтрагента";
	лВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДоговорКонтрагента");
	Пока лВыборка.Следующий() Цикл 
		лВыборкаДокументы = лВыборка.Выбрать();
		Пока лВыборкаДокументы.Следующий() Цикл 
				лОтказ = Ложь;
				лМенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(лВыборкаДокументы.Регистратор);
				лПараметры = Новый Структура;
				лПараметры.Вставить("Фильтр", Новый Структура("ДоговорКонтрагента", лВыборка.ДоговорКонтрагента));
				лПараметры.Вставить("РегистрыДвижений", "Взаиморасчеты");
				лМетаданныеДокумента = лВыборкаДокументы.Регистратор.Метаданные();
				
				Попытка
					Отбор = Новый Структура("ДоговорКонтрагента", лВыборка.ДоговорКонтрагента);
					РежимУправленияБД = ?(Строка(лМетаданныеДокумента.РежимУправленияБлокировкойДанных) = "Управляемый", РежимУправленияБлокировкойДанных.Управляемый, РежимУправленияБлокировкойДанных.Автоматический);
				   
					//Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
						НачатьТранзакцию(РежимУправленияБД);
					//КонецЕсли;
					//лМенеджерДокумента.ВыполнитьПроведение(лВыборкаДокументы.Регистратор, лОтказ, лПараметры);
					РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(лВыборкаДокументы.Регистратор, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, Истина);
					//
					//Если лОтказ тогда
					//	ВызватьИсключение "Документ не проведен: " + лВыборкаДокументы.Регистратор;
					//КонецЕсли;
					//Граница = Последовательности.ПоРасчетамСКонтрагентами.ПолучитьГраницу(Отбор);
					//Если Граница.Сравнить(лВыборкаДокументы.Регистратор.МоментВремени()) = 1 Тогда 
					//	Последовательности.ПоРасчетамСКонтрагентами.УстановитьГраницу(лВыборкаДокументы.Регистратор.МоментВремени(), Отбор);
					//КонецЕсли;
					////Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
						ЗафиксироватьТранзакцию();
					//КонецЕсли;
				Исключение
					//Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
						ОтменитьТранзакцию();
					//КонецЕсли;
					ЗаписьЖурналаРегистрации("Регламентные задания." + Метаданные().Синоним,
					УровеньЖурналаРегистрации.Ошибка, Метаданные.НайтиПоТипу(ТипЗнч(лВыборка.Регистратор)),
					лВыборка.Регистратор, ОписаниеОшибки());
					Прервать;
				КонецПопытки;
				
			КонецЦикла;
		//ДоговорКонтрагента = лВыборка.ДоговорКонтрагента;
		//ВыполнитьОбработку();
	КонецЦикла;
КонецПроцедуры

Процедура ИсправитьЗаписиВПоследовательности2() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Взаиморасчеты.Регистратор,
	               |	Взаиморасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента
	               |ИЗ
	               |	РегистрНакопления.Взаиморасчеты КАК Взаиморасчеты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ПоРасчетамСКонтрагентами КАК ПоРасчетамСКонтрагентами
	               |		ПО Взаиморасчеты.Регистратор = ПоРасчетамСКонтрагентами.Регистратор
	               |			И Взаиморасчеты.ДоговорКонтрагента = ПоРасчетамСКонтрагентами.ДоговорКонтрагента
	               |ГДЕ
	               |	ПоРасчетамСКонтрагентами.Регистратор ЕСТЬ NULL
	               |	И НЕ Взаиморасчеты.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Взаиморасчеты.Период
	               |ИТОГИ ПО
	               |	ДоговорКонтрагента";
	лВыборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДоговорКонтрагента");
	Пока лВыборка.Следующий() Цикл 
		лВыборкаДокументы = лВыборка.Выбрать();
		Пока лВыборкаДокументы.Следующий() Цикл 
				лОтказ = Ложь;
				лМенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(лВыборкаДокументы.Регистратор);
				лПараметры = Новый Структура;
				лПараметры.Вставить("Фильтр", Новый Структура("ДоговорКонтрагента", лВыборка.ДоговорКонтрагента));
				лПараметры.Вставить("РегистрыДвижений", "Взаиморасчеты");
				лМетаданныеДокумента = лВыборкаДокументы.Регистратор.Метаданные();
				//Если Не лМетаданныеДокумента.Движения.Содержит(Метаданные.Последовательности.ПоРасчетамСКонтрагентами) Тогда 
				//	Продолжить;
				//КонецЕсли;
				Попытка
					Отбор = Новый Структура("ДоговорКонтрагента", лВыборка.ДоговорКонтрагента);
					РежимУправленияБД = ?(Строка(лМетаданныеДокумента.РежимУправленияБлокировкойДанных) = "Управляемый", РежимУправленияБлокировкойДанных.Управляемый, РежимУправленияБлокировкойДанных.Автоматический);
				   
					//Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
						НачатьТранзакцию(РежимУправленияБД);
					//КонецЕсли;
					//лМенеджерДокумента.ВыполнитьПроведение(лВыборкаДокументы.Регистратор, лОтказ, лПараметры);
					РаботаСПоследовательностямиКлиентСервер.ЗарегистрироватьОбъектПоСсылке(лВыборкаДокументы.Регистратор, Метаданные.Последовательности.ПоРасчетамСКонтрагентами, Истина);
					//
					//Если лОтказ тогда
					//	ВызватьИсключение "Документ не проведен: " + лВыборкаДокументы.Регистратор;
					//КонецЕсли;
					//Граница = Последовательности.ПоРасчетамСКонтрагентами.ПолучитьГраницу(Отбор);
					//Если Граница.Сравнить(лВыборкаДокументы.Регистратор.МоментВремени()) = 1 Тогда 
					//	Последовательности.ПоРасчетамСКонтрагентами.УстановитьГраницу(лВыборкаДокументы.Регистратор.МоментВремени(), Отбор);
					//КонецЕсли;
					////Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
						ЗафиксироватьТранзакцию();
					//КонецЕсли;
				Исключение
					//Если лМетаданныеДокумента = Метаданные.Документы.РеализацияТоваровУслуг Тогда 
						ОтменитьТранзакцию();
					//КонецЕсли;
					ЗаписьЖурналаРегистрации("Регламентные задания." + Метаданные().Синоним,
					УровеньЖурналаРегистрации.Ошибка, Метаданные.НайтиПоТипу(ТипЗнч(лВыборка.Регистратор)),
					лВыборка.Регистратор, ОписаниеОшибки());
					Прервать;
				КонецПопытки;
				
			КонецЦикла;
		//ДоговорКонтрагента = лВыборка.ДоговорКонтрагента;
		//ВыполнитьОбработку();
	КонецЦикла;
КонецПроцедуры
мРегламентноеЗадание = Ложь;
