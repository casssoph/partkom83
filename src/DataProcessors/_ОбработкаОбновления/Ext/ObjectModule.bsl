
Процедура ОбновлениеИнформационнойБазы_1_0_0_1() Экспорт
	
	лОбрабатываемыеЭлементы = Новый Структура("ГруппаИзготовителей1,ГруппаИзготовителей2,ГруппаИзготовителей3,ГруппаИзготовителей4");
	Для Каждого лЭлементСтруктуры Из лОбрабатываемыеЭлементы цикл
		
		лОбъект = ПланыВидовХарактеристик.СвойстваОбъектов[лЭлементСтруктуры.Ключ].ПолучитьОбъект();
		лОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		лОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_2() Экспорт
	
	Выборка = Справочники.ВидыКонтактнойИнформации.Выбрать();
	Пока Выборка.Следующий() Цикл
		Об = Выборка.ПолучитьОбъект();
		Если Не Об.ЭтоГруппа Тогда
			Если НЕ ЗначениеЗаполнено(Об.Тип) Тогда
				Если СтрНайти(Об.ИмяПредопределенныхДанных,"Адрес") Тогда
					Об.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				ИначеЕсли СтрНайти(Об.ИмяПредопределенныхДанных,"Телефон") Тогда
					Об.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				ИначеЕсли СтрНайти(Об.ИмяПредопределенныхДанных,"Email") Тогда
					Об.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				ИначеЕсли СтрНайти(Об.ИмяПредопределенныхДанных,"Skype") Тогда
					Об.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
				ИначеЕсли СтрНайти(Об.ИмяПредопределенныхДанных,"Факс") Тогда
					Об.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
				ИначеЕсли СтрНайти(Об.ИмяПредопределенныхДанных,"Друг") Тогда
					Об.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
				КонецЕсли;
				Об.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_3() Экспорт
	
	Россия = Справочники.СтраныМира.Россия.ПолучитьОбъект();				
	
	Россия.НаименованиеПолное 	= "Российская Федерация";
	Россия.КодАльфа2 			= "RU";
	Россия.КодАльфа3			= "RUS";
	
	Россия.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_8() Экспорт
	
	Константы.ВариантПроведенияДокументов.Установить(Перечисления.ВариантыПроведенияДокументов.Обычный);
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_9() Экспорт
	
	// забыли прописать некоторые виды контактной информации
	лОбъект = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.ПолучитьОбъект();
	лОбъект.Наименование = "Юр. адрес контрагента";
	лОбъект.Записать();
	
	лОбъект = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.ПолучитьОбъект();
	лОбъект.Наименование = "Телефон организации";
	лОбъект.Записать();
	
	лОбъект = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации.ПолучитьОбъект();
	лОбъект.Наименование = "Факт. адрес организации";
	лОбъект.Записать();
	
	лОбъект = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	лОбъект.Наименование = "Юр. адрес организации";
	лОбъект.Записать();
	
	лОбъект = Справочники.ВидыКонтактнойИнформации.EmailПользователя.ПолучитьОбъект();
	лОбъект.Наименование = "Электронная почта пользователя";
	лОбъект.Записать();
	
	лОбъект = Справочники.ВидыКонтактнойИнформации.ТелефонТорговойТочки.ПолучитьОбъект();
	лОбъект.Наименование = "Телефон торговой точки";
	лОбъект.Записать();
	
	лОбъект = Справочники.ВидыКонтактнойИнформации.ФактАдресТорговойТочки.ПолучитьОбъект();
	лОбъект.Наименование = "Факт. адрес торговой точки";
	лОбъект.Записать();
	
	лОбъект = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица.ПолучитьОбъект();
	лОбъект.Наименование = "Юр. адрес физического лица";
	лОбъект.Записать();
	
	лОбъект = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица.ПолучитьОбъект();
	лОбъект.Наименование = "Факт. адрес физического лица";
	лОбъект.Записать();
	
	лОбъект = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний.ПолучитьОбъект();
	лОбъект.Наименование = "Дом. телефон физического лица";
	лОбъект.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_10() Экспорт
	
	лЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
	Если НЕ ЗначениеЗаполнено(лЕдиницаПоКлассификатору) тогда
		лОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		лОбъект.Код = "796";
		лОбъект.Наименование = "шт";
		лОбъект.НаименованиеПолное = "Штука";
		лОбъект.МеждународноеСокращение = "PCE";
		лОбъект.Записать();
		лЕдиницаПоКлассификатору = лОбъект.Ссылка;
	КонецЕсли;
	
	Константы.ОсновнаяЕдиницаПоКлассификатору.Установить(лЕдиницаПоКлассификатору);
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_11() Экспорт
	Обработки.ЗагрузкаНастроекОтчетов.Создать().ВыполнитьНажатие();
	
	_Массив = Новый Массив;
	_Массив.Добавить("ОтказПокупателя");
	
	Для Каждого _Значение Из _Массив Цикл
		
		_Объект = Справочники.УдалитьСостоянияСтрокЗаявок[_Значение].ПолучитьОбъект();
		_Объект.ИспользоватьПриОтказе = Истина;
		_Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_12() Экспорт
	_ТекстПисьма = Справочники.ШаблоныТекстовПисем.Основной.ПолучитьОбъект();
	_ТекстПисьма.ТекстПисьма = "Уважаемые Коллеги!" + Символ(13) +
	"													"  + Символ (13) + 
	"Рады направить Вам очередной заказ!" + Символ(13) +
	"Просим ответить на заказ в кратчайшие сроки. Для отправки ответа в корректной форме воспользуйтесь нашими рекомендациями (http://www.part-kom.ru/how_2_respond_2_order/)."  + Символ(13) +
	"Напоминаем, что от скорости Вашего ответа объективно зависят показатели динамики заказов с Вашего склада и развитие партнерских отношений между нашими компаниями."  + Символ(13) +
	"Являясь крупным поставщиком, большую часть товаров мы продаём из наличия на нашем складе. Нам важно предложить Клиентам наилучшие условия и ассортимент."  + Символ(13) +
	"Накапливая статистику продаж, мы анализируем ее и поддерживаем минимальные остатки именно востребованных товаров."  + Символ(13) +
	"Длительно успешные отношения с Поставщиком, максимальная точность и оперативность выполнения заказов - основа для поддержания наличия его товаров на нашем складе."  + Символ(13) +
	"													"  + Символ (13) + 
	"У нас нет товарной специализации, поэтому мы готовы предоставить свои ресурсы любому Поставщику, располагающему яркой товарной или ценовой уникальностью."  + Символ (13) + 
	"В Вашем распоряжении:"  + Символ (13) + 
	"- 4 000 кв. м. склада, работающего круглосуточно в три смены общей численностью более 150 человек!"   + Символ (13) + 
	"- 120 единиц транспорта, ежедневно участвующих в доставке Ваших товаров по всему ПФО и за его пределы!"   + Символ (13) + 
	"- 40 персональных менеджеров по продажам, контролирующих отношения с аудиторией более  2 500 оптовых покупателей!"   + Символ (13) + 
	"													"  + Символ (13) + 
	"Мы ценим Вашу эффективную работу, осознавая, каких больших усилий это Вам стоит."  + Символ (13) + 
	"Выражаем Вам признательность за продуктивное сотрудничество с нашей компанией!"  + Символ (13) + 
	"													"  + Символ (13) + 
	"													"  + Символ (13) + 
	"С уважением,"  + Символ (13) + 
	"отдел снабжения компании ""ПартКом"". Телефон (831) 421-50-41.";
	_ТекстПисьма.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_13() Экспорт
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить()) Тогда
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить("У");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_14() Экспорт
	Выборка = Справочники.ВнешниеОбработки.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Стр = Выборка.Ссылка;
		
		Если Не Стр.ЭтоГруппа Тогда
			ЭтоОбработка = ?(Стр.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка, Истина, Ложь);
			ЭтоОтчет = ?(Стр.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет, Истина, Ложь);
			Если НЕ (ЭтоОбработка ИЛИ ЭтоОтчет) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = Стр.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			
			Если ЭтоОбработка Тогда
				ВнешнийОтчет = ВнешниеОбработки.Создать(ИмяФайла);
			Иначе
				ВнешнийОтчет = ВнешниеОтчеты.Создать(ИмяФайла);
			КонецЕсли;
			
			ИмяОтчета = Строка(ВнешнийОтчет);
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВнешниеОбработки.Ссылка
			|ИЗ
			|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
			|ГДЕ
			|	ВнешниеОбработки.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных
			|	И ВнешниеОбработки.Ссылка <> &Ссылка"
			);
			
			Запрос.УстановитьПараметр("ИмяОбъектаМетаданных", ИмяОтчета);
			Запрос.УстановитьПараметр("Ссылка", Стр);
			
			Если Запрос.Выполнить().Выгрузить().Количество() = 0 Тогда
				Обновить = Истина;
			Иначе
				Обновить = Ложь;
			КонецЕсли;
			
			Об = Стр.ПолучитьОбъект();
			Если Обновить Тогда
				Об.ИмяОбъектаМетаданных = ИмяОтчета;
				Об.Записать();
			Иначе
				Об.Удалить();
			КонецЕсли;
			
			УдалитьФайлы(ИмяФайла);
			
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	
	Константы.ФирмаДляЮрЛиц.Установить(Справочники.Организации.НайтиПоНаименованию("Детали иномарок"));
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_15() Экспорт
	
	Об = Справочники.УдалитьСостоянияСтрокЗаказов.НедостачаПоАктуПриемки.ПолучитьОбъект();
	Об.НедоступенИнтерактивно = Истина;
	Об.Записать();
	
	Об = Справочники.УдалитьСостоянияСтрокЗаказов.БракПоАктуПриемки.ПолучитьОбъект();
	Об.НедоступенИнтерактивно = Истина;
	Об.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_16() Экспорт
	
	ПолныеПрава.УстановитьДатыНачалаРаботы("ДатаНачалаРаботыВзаиморасчеты", Дата(2016, 03, 01));
	ПолныеПрава.УстановитьДатыНачалаРаботы("ДатаНачалаРаботыТовары", Дата(2016, 07, 01));
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_0_17() Экспорт
	Константы.ВалютаРубль.Установить(Справочники.Валюты.НайтиПоКоду("643"));
	Константы.ВалютаДоллар.Установить(Справочники.Валюты.НайтиПоКоду("840"));
	Константы.ВалютаЕвро.Установить(Справочники.Валюты.НайтиПоКоду("978"));
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_1_0() Экспорт
	Константы.СтратегияСписанияПартий.Установить(Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаСобственныеПотомПринятые);
	Константы.ОпределятьСтратегиюПогашенияПартийТоваровПоСкладу.Установить(Истина);
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_1_1() Экспорт
	Константы.ПроцентОтклоненияЦенПрихода.Установить(1);
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_1_2() Экспорт
	Константы.ЗакупочныйТипЦенРуб.Установить(Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"));
	Константы.ЗакупочныйТипЦенДолл.Установить(Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000002"));
	Константы.ЗакупочныйТипЦенЕвро.Установить(Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000003"));
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_1_3() Экспорт
	Константы.ОсновнаяУслуга.Установить(Справочники.Номенклатура.НайтиПоКоду("Н00671523"));
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_1_4() Экспорт
	
	лЗапись = РегистрыСведений.НеВыгружаемыеИзготовители.СоздатьМенеджерЗаписи();
	лЗапись.Изготовитель = Справочники.Изготовители.ПолучитьСсылку
	(Новый УникальныйИдентификатор("706fb474-943f-4f1a-8bc7-9017dd4692ed"));
	лЗапись.Записать(Истина);
	
	лЗапись = РегистрыСведений.НеВыгружаемыеИзготовители.СоздатьМенеджерЗаписи();
	лЗапись.Изготовитель = Справочники.Изготовители.ПолучитьСсылку
	(Новый УникальныйИдентификатор("87ebf8d1-2de9-4ccd-9686-160102d3440d"));
	лЗапись.Записать(Истина);
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_1_5() Экспорт
	
	Константы.ОрганизацияПоУмолчаниюБезнал.Установить(Справочники.Организации.ПолучитьСсылку
	(Новый УникальныйИдентификатор("dbe4dee2-8642-4289-a3b2-47dff6cfee87")));
	
	Константы.ОрганизацияПоУмолчаниюНал.Установить(Справочники.Организации.ПолучитьСсылку
	(Новый УникальныйИдентификатор("9d8066e8-c041-4af6-951b-791202b98acf")));
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_1_6() Экспорт
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтказПоСроку.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПокупателя;
	Объект.ИспользуетсяВЗаявках = Истина;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтказОтДетали.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПокупателя;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтсутствуетНаСкладеПартком.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПартком;
	Объект.ИспользуетсяВЗаявках = Истина;
	Объект.ИспользуетсяВЗаявкахПоУмолчанию = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ЗаказаноБольшеЧемВПрайсе.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПартком;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ЗакрытаРаботаСПоставщиком.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПартком;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтсутствиеОплатыПоставщику.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПартком;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.НеНайденоПриСборке.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПартком;
	Объект.ИспользуетсяВРеализациях = Истина;
	Объект.ИспользуетсяВРеализацияхПоУмолчанию = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ВыявленБракПриСборкеНаСкладеПартком.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПартком;
	Объект.ИспользуетсяВРеализациях = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.НетНаСкладе.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.НекорректнаяЗамена.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.НекорректнаяЦена.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ТехническийСбой.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтказПоставщикаБрак.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтказПоставщикаНедостача.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.ИспользуетсяВЗаказахПоУмолчанию = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_1_7() Экспорт
	
	Объект = Справочники.СостоянияСтрокДокументов.НовыйЗаказ.ПолучитьОбъект();
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтгруженПоставщиком.ПолучитьОбъект();
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ПринятНаСкладе.ПолучитьОбъект();
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.Выкуплен.ПолучитьОбъект();
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_1_8() Экспорт
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтказПоСроку.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПокупателя;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтказОтДетали.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПокупателя;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ЗаказаноБольшеЧемВПрайсе.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПартком;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ЗакрытаРаботаСПоставщиком.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПартком;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.НетНаСкладе.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.НекорректнаяЗамена.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.НекорректнаяЦена.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ТехническийСбой.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтказПоставщикаБрак.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтказПоставщикаНедостача.ПолучитьОбъект();
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.Записать();	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_1_9() Экспорт
	
	Объект = Справочники.СостоянияСтрокДокументов.СнятоПоСрокуПК.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПартком;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.ИспользуетсяВПоступлениях = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ПревышенСрокРезерва.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПартком;
	Объект.ИспользуетсяВПоступлениях = Истина;
	Объект.ИспользуетсяВРеализациях = Истина;
	Объект.Записать();
	
	Объект = Справочники.СостоянияСтрокДокументов.ОтказПоставщикаБракПриПриемке.ПолучитьОбъект();
	Объект.ДоступенПользователю = Истина;
	Объект.ВидОтказа = Справочники.ВидыОтказов.ОтказПоставщика;
	Объект.ИспользуетсяВЗаказах = Истина;
	Объект.ИспользуетсяВПоступлениях = Истина;
	Объект.Записать();
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_2_0() Экспорт
	Константы.ДатаНачалаПроведенияПоРегиструТоварыНаСкладах.Установить('20170701000000');
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_2_1() Экспорт
	Эл = Справочники.НастройкиРеквизитовДляОбменов.Обмен_1С_ОП.ПолучитьОбъект();
	Эл.СтрокаДляРабочейБазы = "http://exchange.part-kom.ru/exchange/wsdl";
	Эл.СтрокаДляТестовойБазы = "http://testexchange.part-kom.ru/exchange/swwsdl";
	Эл.Записать();
	
	Эл = Справочники.НастройкиРеквизитовДляОбменов.Обмен_1С_Сайт.ПолучитьОбъект();
	Эл.СтрокаДляРабочейБазы = "http://exchange.part-kom.ru/exchange/wsdl";
	Эл.СтрокаДляТестовойБазы = "http://testexchange.part-kom.ru/exchange/swwsdl";
	Эл.Записать();
	
	Эл = Справочники.НастройкиРеквизитовДляОбменов.Обмен_1С_Сайт_Заявки.ПолучитьОбъект();
	Эл.СтрокаДляРабочейБазы = "http://exchange.part-kom.ru/exchange/wsdl";
	Эл.СтрокаДляТестовойБазы = "http://testexchange.part-kom.ru/exchange/swwsdl";
	Эл.Записать();
	
	Эл = Справочники.НастройкиРеквизитовДляОбменов.Обмен_1С_БИТ.ПолучитьОбъект();
	Эл.СтрокаДляРабочейБазы = "\\partkom.local\ConfStorage1C\Exchange\1C83_bitf\";
	Эл.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_2_2() Экспорт
	Если НЕ ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Справочники.ПрайсыПоставщиков.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Лев(Выборка.Код,1) <> "0" Тогда
			Продолжить;
		КонецЕсли;
		Об = Выборка.ПолучитьОбъект();
		КодНовый = "";
		КодСтарый = Об.Код;
		Начало = Истина;
		Для А = 0 По СтрДлина(КодСтарый)-1 Цикл
			Символ = Прав(Лев(КодСтарый,1+А),1);
			Если Символ = "0" И Начало Тогда
				
			Иначе
				Начало = Ложь;
				КодНовый = КодНовый + Символ;
			КонецЕсли;
			
		КонецЦикла;
		Об.Код = КодНовый;
		Об.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_2_3() Экспорт
	
	Об = Справочники.НастройкиРеквизитовДляОбменов.АдресСервераMySQL.ПолучитьОбъект();
	Об.СтрокаДляРабочейБазы = "10.0.0.53";
	Об.СтрокаДляТестовойБазы = "10.0.0.53"; 
	Об.Записать();
	
	Об = Справочники.НастройкиРеквизитовДляОбменов.СтрокаПодключенияADO.ПолучитьОбъект(); 
	Об.СтрокаДляРабочейБазы = "Driver={MySQL ODBC 5.3 Unicode Driver};Server = %АдресСервера%;Database = %ИмяБазы%;UID = %ИмяПользователя%;PWD = %ПарольПользователя%";	
	Об.СтрокаДляТестовойБазы = "Driver={MySQL ODBC 5.3 Unicode Driver};Server = %АдресСервера%;Database = %ИмяБазы%;UID = %ИмяПользователя%;PWD = %ПарольПользователя%";	
	Об.Комментарий = "Замените в строке %АдресСервера%,%ИмяБазы%,%ИмяПользователя%,%ПарольПользователя% реальными данными.";
	Об.Записать();
	
	Об = Справочники.НастройкиРеквизитовДляОбменов.ИмяБазыMySQL.ПолучитьОбъект();
	Об.СтрокаДляРабочейБазы = "acceptNN";
	Об.СтрокаДляТестовойБазы = "acceptNN";
	Об.Записать();
	
	Об = Справочники.НастройкиРеквизитовДляОбменов.ИмяПользователяMySQL.ПолучитьОбъект();
	Об.СтрокаДляРабочейБазы = "acceptMSK";
	Об.СтрокаДляТестовойБазы = "acceptMSK";
	Об.Записать();
	
	Об = Справочники.НастройкиРеквизитовДляОбменов.ПарольПользователяMySQL.ПолучитьОбъект();
	Об.СтрокаДляРабочейБазы = "fdh37239hv";
	Об.СтрокаДляТестовойБазы = "fdh37239hv";
	Об.Записать();
	
	Об = Справочники.НастройкиРеквизитовДляОбменов.Обмен_1С_ТопЛог.ПолучитьОбъект();
	Об.СтрокаДляРабочейБазы = "http://nng9-v-ws1c/wms/ws/DataExchange.1cws?wsdl";
	Об.СтрокаДляТестовойБазы = "http://nng9-v-ws1c/wms_lyubavin/ws/DataExchange.1cws?wsdl";
	Об.Записать();
	
	Об = Справочники.НастройкиРеквизитовДляОбменов.ДатаНачалаРегистрацииОбъектовВТопЛог.ПолучитьОбъект();
	Об.ДатаДляРабочейБазы = Дата(2017, 12, 17);
	Об.ДатаДляТестовойБазы = Дата(2017, 12, 17);
	Об.Записать();
	
	Об = Справочники.НастройкиРеквизитовДляОбменов.ИмяТаблицыДляПоискаКА.ПолучитьОбъект();
	Об.СтрокаДляРабочейБазы = "Doc_order_Tab";
	Об.СтрокаДляТестовойБазы = "Doc_order_Tab";
	Об.Записать();
	
	Сообщить("Настройки обмен с ТопЛог, настройки MySQL перенесены в справочник ""Настройки реквизитов для обменов""");
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_2_4() Экспорт
	
	Константы.ДатаПереходаПроведенияПоПартиям.Установить(Дата(2017, 12, 16, 23,59,59));
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_2_5() Экспорт
	
	Константы.ДатаПереоценкиОстатковПоставщикаСоздаютсяВ83.Установить(Дата(2018,1,3));
	Константы.ДатаПереходаПроведенияПоПартиям.Установить(Дата(2018,1,3));
	Константы.ДатаВозвратыПоставщиковСоздаютсяВ83.Установить(Дата(2018,1,3));
	
	Об = Справочники.НастройкиРеквизитовДляОбменов.ДатаНачалаРегистрацииОбъектовВТопЛог.ПолучитьОбъект();
	Об.ДатаДляТестовойБазы = Дата(2017,12,12,9,0,0);
	Об.ДатаДляРабочейБазы = Дата(2018,1,3);
	
	Об.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_2_6() Экспорт
	Константы.ХранитьФайлВИсторииОтправленныхПисемПоставщикам.Установить(Истина);
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_2_7() Экспорт
	
	Константы.ДатаЗапускаПроведенияПоПартиямРезервам.Установить(Дата(2017, 12, 01));
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_2_8() Экспорт
	
	мДата =  Дата(2018,12,1);
	
	Константы.ДатаПереоценкиОстатковПоставщикаСоздаютсяВ83.Установить(мДата);
	//Константы.ДатаЗапускаПроведенияПоПартиямРезервам.Установить(мДата);
	Константы.ДатаВозвратыПоставщиковСоздаютсяВ83.Установить(мДата);
	Константы.ДатаЗаявкиСоздаютсяВ83.Установить(мДата);
	
	Об = Справочники.НастройкиРеквизитовДляОбменов.ДатаНачалаРегистрацииОбъектовВТопЛог.ПолучитьОбъект();
	Об.ДатаДляРабочейБазы = мДата;
	
	Об.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_2_9() Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВлЗапрос.Ссылка,
	|	ВлЗапрос.ТДок
	|ИЗ
	|	(ВЫБРАТЬ
	|		Д1.Ссылка КАК Ссылка,
	|		1 КАК ТДок,
	|		Д1.Дата КАК Дата
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее КАК Д1
	|	ГДЕ
	|		Д1.Дата >= &Дата
	|		И Д1.Проведен
	|		И Д1.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВнесениеНаДепозит)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Д2.Ссылка,
	|		2,
	|		Д2.Дата
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее КАК Д2
	|	ГДЕ
	|		Д2.Дата >= &Дата
	|		И Д2.Проведен
	|		И Д2.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.СнятиеСДепозита)) КАК ВлЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВлЗапрос.Дата"
	);
	Запрос.УстановитьПараметр("Дата", '20160301000000');
	
	Для Каждого Стр Из Запрос.Выполнить().Выгрузить() Цикл
		Если Стр.ТДок = 1 Тогда
			Документы.ПлатежноеПоручениеВходящее.ВыполнитьПроведение(Стр.Ссылка, Ложь);
		Иначе
			Документы.ПлатежноеПоручениеИсходящее.ВыполнитьПроведение(Стр.Ссылка, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_3_0() Экспорт
	ТекСостояние = Справочники.СостоянияСтрокДокументов.Заказано.ПолучитьОбъект();
	ТекСостояние.ИспользуетсяВЗаказахПоУмолчанию = Истина;
	ТекСостояние.ИспользуетсяВЗаказах = Истина;
	ТекСостояние.ВидСостояния = Справочники.ВидыСостоянийСтрокДокументов.Основное;
	ТекСостояние.Записать();
	
	ТекСостояние = Справочники.СостоянияСтрокДокументов.Выкуплено.ПолучитьОбъект();
	ТекСостояние.ИспользуетсяВЗаказах = Истина;
	ТекСостояние.ВидСостояния = Справочники.ВидыСостоянийСтрокДокументов.Основное;
	ТекСостояние.Записать();
	
	ТекСостояние = Справочники.СостоянияСтрокДокументов.ВыкупленоЧастично.ПолучитьОбъект();
	ТекСостояние.ИспользуетсяВЗаказах = Истина;
	ТекСостояние.ВидСостояния = Справочники.ВидыСостоянийСтрокДокументов.Основное;
	ТекСостояние.Записать();
	
	ТекСостояние = Справочники.СостоянияСтрокДокументов.ОтгруженПоставщиком.ПолучитьОбъект();
	ТекСостояние.ИспользуетсяВПоступленияхПоУмолчанию = Истина;
	ТекСостояние.ИспользуетсяВЗаказах = Ложь;
	ТекСостояние.ИспользуетсяВПоступлениях = Истина;
	ТекСостояние.ВидСостояния = Справочники.ВидыСостоянийСтрокДокументов.Основное;
	ТекСостояние.Записать();
	
	ТекСостояние = Справочники.СостоянияСтрокДокументов.ПринятНаСкладе.ПолучитьОбъект();
	ТекСостояние.ИспользуетсяВЗаказах = Ложь;
	ТекСостояние.ИспользуетсяВПоступлениях = Истина;
	ТекСостояние.ВидСостояния = Справочники.ВидыСостоянийСтрокДокументов.Основное;
	ТекСостояние.Записать();
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_3_1() Экспорт
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.Автораспределение.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.Банк.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗадолженностьКА.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.Касса.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаАкцептаОферты.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаВыгрузкиВ1С7.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиПрайсаПоставщика.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаССайтом.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаССайтом_ВыгрузкаБалансов.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаФормированияЗаказаПоставщику.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаФормированияСлужебногоЗадания.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.СнятиеБлокировкиКонтрагентов.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
	текСобытие = Справочники.СобытияДляОтправкиЭлектронныхПисем.СравнениеДокументовТ7Т8.ПолучитьОбъект();
	текСобытие.СлужебноеСобытие = Истина;
	текСобытие.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_3_2() Экспорт
	
	тмп = Справочники.Склады.НайтиПоНаименованию("Склад в Екатеринбурге");
	Если ЗначениеЗаполнено(тмп) Тогда 
		Об = тмп.ПолучитьОбъект();
		Об.НеИмеетСобственногоСтока = Истина;
		Об.Записать();
		Сообщить("У склада в Екатеринбурге проставлен признак ""НеИмеетСобственногоСтока"" = Да");
	КонецЕсли;
	
	тмп = Константы.Склад_Москва.Получить();
	Если ЗначениеЗаполнено(тмп) Тогда 
		Об = тмп.ПолучитьОбъект();
		Об.НеИмеетСобственногоСтока = Истина;
		Об.Записать();
		Сообщить("У склада в Москве проставлен признак ""НеИмеетСобственногоСтока"" = Да");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_3_3() Экспорт
	Выборка = Справочники.ШаблоныТекстовПисем.Выбрать();
	Пока Выборка.Следующий() Цикл
		Об = Выборка.ПолучитьОбъект();
		Об.Используется = Ложь;
		Об.Записать();
		
	КонецЦикла;
	
	Выборка = Справочники.СобытияДляОтправкиЭлектронныхПисем.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = Справочники.СобытияДляОтправкиЭлектронныхПисем.ВыгрузкаПоступленияТоваровУслуг
			ИЛИ Выборка.Ссылка = Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПоступленияТоваровУслуг
			ИЛИ Выборка.Ссылка = Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПрайсаVMI
			ИЛИ Выборка.Ссылка = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщику
			ИЛИ Выборка.Ссылка = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщикуНетПотребности
			ИЛИ Выборка.Ссылка = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщикуОП
			ИЛИ Выборка.Ссылка = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиПрайсаПоставщика
			ИЛИ Выборка.Ссылка = Справочники.СобытияДляОтправкиЭлектронныхПисем.ПереоценкаОстатковПоставщика  Тогда
			
			Об = Выборка.ПолучитьОбъект();
			Об.СлужебноеСобытие = Ложь;
			Об.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Об = Справочники.ШаблоныТекстовПисем.ЗаказПоставщику.ПолучитьОбъект();
	Об.СобытиеДляОтправки = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщику;
	Об.Используется  = Истина;
	Об.ТемаПисьма =  "Заказ_от_ПартКом_№*НОМЕР*";
	Об.ТекстПисьма = 
	"Уважаемые Коллеги!
	|												
	|	Рады направить Вам очередной заказ!
	|	Просим ответить на заказ в кратчайшие сроки. Для отправки ответа в корректной форме воспользуйтесь нашими рекомендациями (http://www.part-kom.ru/how_2_respond_2_order/).
	|	Напоминаем, что от скорости Вашего ответа объективно зависят показатели динамики заказов с Вашего склада и развитие партнерских отношений между нашими компаниями.
	|	Являясь крупным поставщиком, большую часть товаров мы продаём из наличия на нашем складе. Нам важно предложить Клиентам наилучшие условия и ассортимент.
	|	Накапливая статистику продаж, мы анализируем ее и поддерживаем минимальные остатки именно востребованных товаров.
	|	Длительно успешные отношения с Поставщиком, максимальная точность и оперативность выполнения заказов - основа для поддержания наличия его товаров на нашем складе.
	|
	|	У нас нет товарной специализации, поэтому мы готовы предоставить свои ресурсы любому Поставщику, располагающему яркой товарной или ценовой уникальностью.
	|	В Вашем распоряжении:
	|	- 4 000 кв. м. склада, работающего круглосуточно в три смены общей численностью более 150 человек!
	|	- 120 единиц транспорта, ежедневно участвующих в доставке Ваших товаров по всему ПФО и за его пределы!
	|	- 40 персональных менеджеров по продажам, контролирующих отношения с аудиторией более  2 500 оптовых покупателей!
	|
	|	Мы ценим Вашу эффективную работу, осознавая, каких больших усилий это Вам стоит.
	|	Выражаем Вам признательность за продуктивное сотрудничество с нашей компанией!
	|
	|
	|	С уважением,
	|	отдел снабжения компании ""ПартКом"". Телефон (831) 421-50-41.";
	Об.Записать();
	
	Об = Справочники.ШаблоныТекстовПисем.ЗаказПоставщикуОП.ПолучитьОбъект();
	Об.СобытиеДляОтправки = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщикуОП;
	Об.Используется  = Истина;
	Об.ТемаПисьма = "Заказ_от_ПартКом_№*НОМЕР*";
	Об.ТекстПисьма = 
	"Уважаемые Коллеги!
	|												
	|	Рады направить Вам очередной заказ!
	|	Просим ответить на заказ в кратчайшие сроки. Для отправки ответа в корректной форме воспользуйтесь нашими рекомендациями (http://www.part-kom.ru/how_2_respond_2_order/).
	|	Напоминаем, что от скорости Вашего ответа объективно зависят показатели динамики заказов с Вашего склада и развитие партнерских отношений между нашими компаниями.
	|	Являясь крупным поставщиком, большую часть товаров мы продаём из наличия на нашем складе. Нам важно предложить Клиентам наилучшие условия и ассортимент.
	|	Накапливая статистику продаж, мы анализируем ее и поддерживаем минимальные остатки именно востребованных товаров.
	|	Длительно успешные отношения с Поставщиком, максимальная точность и оперативность выполнения заказов - основа для поддержания наличия его товаров на нашем складе.
	|
	|	У нас нет товарной специализации, поэтому мы готовы предоставить свои ресурсы любому Поставщику, располагающему яркой товарной или ценовой уникальностью.
	|	В Вашем распоряжении:
	|	- 4 000 кв. м. склада, работающего круглосуточно в три смены общей численностью более 150 человек!
	|	- 120 единиц транспорта, ежедневно участвующих в доставке Ваших товаров по всему ПФО и за его пределы!
	|	- 40 персональных менеджеров по продажам, контролирующих отношения с аудиторией более  2 500 оптовых покупателей!
	|
	|	Мы ценим Вашу эффективную работу, осознавая, каких больших усилий это Вам стоит.
	|	Выражаем Вам признательность за продуктивное сотрудничество с нашей компанией!
	|
	|
	|	С уважением,
	|	отдел снабжения компании ""ПартКом"". Телефон (831) 421-50-41.";
	Об.Записать();
	
	Об = Справочники.ШаблоныТекстовПисем.ЗаказПоставщикуНПКлиенты.ПолучитьОбъект();
	Об.СобытиеДляОтправки = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщикуНетПотребности;
	Об.Используется  = Истина;
	Об.ТемаПисьма = "Заказ_от_ПартКом_Потребности_Нет";
	Об.ТекстПисьма = 
	"Уважаемые Коллеги!
	|												
	|	На *ДАТАВРЕМЯЗАПУСКА*  потребность в заказах (для клиентов) отсутствует.
	|
	|	С уважением,
	|	отдел снабжения компании ""ПартКом"". Телефон (831) 421-50-41.";
	Об.Записать();
	
	Об = Справочники.ШаблоныТекстовПисем.ЗаказПоставщикуНПСток.ПолучитьОбъект();
	Об.СобытиеДляОтправки = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОтправкаЗаказаПоставщикуНетПотребности;
	Об.Используется  = Истина;
	Об.ТемаПисьма = "Заказ_от_ПартКом_Потребности_Нет";
	Об.ТекстПисьма = 
	"Уважаемые Коллеги!
	|												
	|	На *ДАТАВРЕМЯЗАПУСКА*  потребность в заказах (для пополнения склада) отсутствует.
	|
	|	С уважением,
	|	отдел снабжения компании ""ПартКом"". Телефон (831) 421-50-41.";
	Об.Записать();
	
	Об = Справочники.ШаблоныТекстовПисем.ПрайсVMI.ПолучитьОбъект();
	Об.СобытиеДляОтправки = Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПрайсаVMI;
	Об.Используется  = Истина;
	Об.ТемаПисьма = "ПартКом: успешная загрузка файла с ценами по товару на ответ.хранении";
	Об.ТекстПисьма = 
	"Здравствуйте.
	|												
	|	Коллеги, *ДАТА* от Вашей компании был получен и успешно записан в базу данных файл с новыми ценами по товару на ответ.хранении.
	|	Во вложении файл со списком товаров, подлежащих переоценке.
	|	При необходимости проведите повторную проверку на корректность цен.
	|
	|	Напоминаем, что переоценка товара производится ночью после 00:00:00.
	|	До этого времени действуют старые цены.
	|
	|	Данное письмо сформировано системой и ответа не требует.		|
	|
	|	С уважением,
	|	ПартКом.";
	Об.Записать();
	
	Об = Справочники.ШаблоныТекстовПисем.ПрайсVMIОшибка.ПолучитьОбъект();
	Об.СобытиеДляОтправки = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаVMI;
	Об.Используется  = Истина;
	Об.ТемаПисьма = "ПартКом: успешная ЧАСТИЧНАЯ загрузка файла с ценами по товару на ответ.хранении";
	Об.ТекстПисьма = 
	"Здравствуйте.
	|
	|	Коллеги, *ДАТА* от Вашей компании был получен и ЧАСТИЧНО успешно записан в базу данных файл с новыми ценами по товару на ответ.хранении.
	|	Причина: ошибочные цены у следующих товаров.
	|
	|	*ТОВАРЫ*
	|
	|	Во вложении файл со списком товаров, подлежащих переоценке.
	|	При необходимости проведите повторную проверку на корректность цен.
	|
	|	Напоминаем, что переоценка товара производится ночью после 00:00:00.
	|	До этого времени действуют старые цены.
	|
	|	Данное письмо сформировано системой и ответа не требует.		|
	|
	|	С уважением,
	|	ПартКом";
	Об.Записать();
	
	Об = Справочники.ШаблоныТекстовПисем.ПереоценкаОстатковПоставщика.ПолучитьОбъект();
	Об.СобытиеДляОтправки = Справочники.СобытияДляОтправкиЭлектронныхПисем.ПереоценкаОстатковПоставщика;
	Об.Используется  = Истина;
	Об.ТемаПисьма = "ПартКом: переоценка остатков по складам ответ.хранения";
	Об.ТекстПисьма = 
	"Здравствуйте.
	|
	|	Коллеги, *ДАТА* была произведена успешная переоценка по складам ответ.хранения.
	|	Начиная с указанного времени для нашей компании и клиентов действуют обновленные цены.
	|	Во вложении результаты переоценки.
	|
	|	Данное письмо сформировано системой и ответа не требует.
	|
	|	С уважением,
	|	ПартКом";
	Об.Записать();
	
	Об = Справочники.ШаблоныТекстовПисем.ПоступлениеМХ1.ПолучитьОбъект();
	Об.СобытиеДляОтправки = Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗагрузкаПоступленияТоваровУслуг;
	Об.Используется  = Истина;
	Об.ТемаПисьма = "ПартКом: ожидается новое поступление (форма МХ-1) товара: *СКЛАД* за период: *ПЕРИОД*";
	Об.ТекстПисьма = 
	"Здравствуйте.
	|
	|	Коллеги, во вложении:
	|	- поступление (форма МХ-1) товара: *СКЛАД* от *ПОСТАВЩИК*
	|
	|	С уважением,
	|	Отдел по работе с поставщиками
	|	ПартКом";
	Об.Записать();
	
	Об = Справочники.ШаблоныТекстовПисем.ПоступлениеМХ3.ПолучитьОбъект();
	Об.СобытиеДляОтправки = Справочники.СобытияДляОтправкиЭлектронныхПисем.ВыгрузкаПоступленияТоваровУслуг;
	Об.Используется  = Истина;
	Об.ТемаПисьма = "ПартКом: отчет по продаже (форма МХ-3) товара: *СКЛАД* за период: *ПЕРИОД*";
	Об.ТекстПисьма = 
	"Здравствуйте.
	|
	|	Коллеги, во вложении:
	|	- отчет по продаже (форма МХ-3) товара: *СКЛАД* за период: *ПЕРИОД*
	|	- наш вариант ТОРГ-12 на проданный товар
	|
	|	*СУММАСКИДКИ*
	|
	|	От Вас нам необходимо получить ТОРГ-12 и счет-фактуру по товару указанному в МХ-3.
	|	Вы можете воспользоваться нашим образцом (просто внесите свой номер документа), либо со своей стороны сформируйте необходимый комплект документов.
	|
	|	Важно: обратите, пожалуйста, внимание на дату в образце ТОРГ-12.
	|	В Вашем комплекте документов необходимо указать именно её.
	|
	|	С уважением,
	|	Отдел по работе с поставщиками
	|	ПартКом";
	Об.Записать();
	
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_3_4() Экспорт
	Если Справочники.МаршрутыДоставки.Самовывоз.Код = "000000232" Тогда 
		Возврат;
	КонецЕсли;
	
	Справочники.МаршрутыДоставки.Самовывоз.ПолучитьОбъект().Удалить();
	
	Сс = Справочники.МаршрутыДоставки.НайтиПоКоду("000000232");
	Если ЗначениеЗаполнено(Сс) Тогда 
		Об = Сс.ПолучитьОбъект();
		Об.ИмяПредопределенныхДанных = "Самовывоз";
		Об.Записать();
		Сообщить("Для маршрута доставки " + Об.Наименование + " установлени предопределенный элемент ""Самовывоз""");
	КонецЕсли;
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_3_5() Экспорт
	Константы.СкладУцененногоТовара.Установить(Справочники.Склады.НайтиПоКоду("000000010"));
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_3_6() Экспорт
	Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
	Запись = Набор.Добавить();
	Запись.ГраницаЗапретаИзменений = Константы.ДатаЗаявкиСоздаютсяВ83.Получить();
	Запись.Организация = Справочники.Организации.ПустаяСсылка();
	Набор.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Запись = Набор.Добавить();
		Запись.ГраницаЗапретаИзменений = Константы.ДатаЗаявкиСоздаютсяВ83.Получить();
		Запись.Организация = Выборка.Организация;
		Набор.Записать();
	КонецЦикла;
	
	Сообщить("Обновлены границы запрета редактирования данных");
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_3_7() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГраницыЗапретаИзмененияДанных.Организация,
	|	ГраницыЗапретаИзмененияДанных.Пользователь
	|ИЗ
	|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
	|ГДЕ
	|	ГраницыЗапретаИзмененияДанных.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.Пользователь.Установить(Выборка.Пользователь);
		Набор.Записать();
	КонецЦикла;
	
	Сообщить("Обновлены границы запрета редактирования данных");
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_3_8() Экспорт
	СобытиеОбъект = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаПриЗаписиИсторииСтрокЗаявок.ПолучитьОбъект();
	СобытиеОбъект.СлужебноеСобытие = Истина;
	СобытиеОбъект.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_3_9() Экспорт
	Константы.URL_ДляЗапросаУИД_Номенклатуры.Установить("http://exchange.part-kom.ru/uuid/part");
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_4_0() Экспорт
	Об = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкиОбменаFTP.ПолучитьОбъект();
	Об.СлужебноеСобытие = Истина;
	Об.Записать();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_4_1() Экспорт
	
	Попытка
		НаборЗаписей = РегистрыСведений.НастройкиОтправкиСообщенийОбОшибках.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Событие.Установить(Справочники.СобытияДляОтправкиЭлектронныхПисем.СЗПокупателиСПревышеннымЛимитомОтгрузки);
		
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Пользователь = Справочники.Пользователи.НайтиПоКоду("Носырева_Наталия");
		СтрокаНабора.Событие = Справочники.СобытияДляОтправкиЭлектронныхПисем.СЗПокупателиСПревышеннымЛимитомОтгрузки;
		СтрокаНабора.АдресЭлПочты = "nosireva-nv@Part-kom.ru";
		СтрокаНабора.Настройка = Истина;
		
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Пользователь = Справочники.Пользователи.НайтиПоКоду("Мохова_Ольга");
		СтрокаНабора.Событие = Справочники.СобытияДляОтправкиЭлектронныхПисем.СЗПокупателиСПревышеннымЛимитомОтгрузки;
		СтрокаНабора.АдресЭлПочты = "Mokhova-OV@Part-kom.ru";
		СтрокаНабора.Настройка = Истина;                   
		
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Пользователь = Справочники.Пользователи.НайтиПоКоду("Андреева_Кристина");
		СтрокаНабора.Событие = Справочники.СобытияДляОтправкиЭлектронныхПисем.СЗПокупателиСПревышеннымЛимитомОтгрузки;
		СтрокаНабора.АдресЭлПочты = "Andreeva-KI@Part-kom.ru";
		СтрокаНабора.Настройка = Истина;
		
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Пользователь = Справочники.Пользователи.НайтиПоКоду("Кипяткова А.А");
		СтрокаНабора.Событие = Справочники.СобытияДляОтправкиЭлектронныхПисем.СЗПокупателиСПревышеннымЛимитомОтгрузки;
		СтрокаНабора.АдресЭлПочты = "Kipyatkova-AA@Part-kom.ru";
		СтрокаНабора.Настройка = Истина;
		
		СтрокаНабора = НаборЗаписей.Добавить();            
		СтрокаНабора.Пользователь = Справочники.Пользователи.НайтиПоКоду("Ходалева_Елена");
		СтрокаНабора.Событие = Справочники.СобытияДляОтправкиЭлектронныхПисем.СЗПокупателиСПревышеннымЛимитомОтгрузки;
		СтрокаНабора.АдресЭлПочты = "Khodaleva-EN@part-kom.ru";
		СтрокаНабора.Настройка = Истина;
		
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Пользователь = Справочники.Пользователи.НайтиПоКоду("Усанова Е.А.");
		СтрокаНабора.Событие = Справочники.СобытияДляОтправкиЭлектронныхПисем.СЗПокупателиСПревышеннымЛимитомОтгрузки;
		СтрокаНабора.АдресЭлПочты = "Usanova-EA@part-kom.ru";
		СтрокаНабора.Настройка = Истина;
		
		НаборЗаписей.Записать();
	Исключение
		Сообщить("Не удалось проставить адреса отправки для ГПК");
	КонецПопытки;	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_4_2() Экспорт
	
	Попытка
		НаборЗаписей = РегистрыСведений.НастройкиОтправкиСообщенийОбОшибках.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Событие.Установить(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаРазмещенияПТУПоЗаявкам);
		
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Пользователь = Справочники.Пользователи.НайтиПоКоду("Куделина И.В.");
		СтрокаНабора.Событие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаРазмещенияПТУПоЗаявкам;
		СтрокаНабора.АдресЭлПочты = "Kudelina-IV@Part-kom.ru";
		СтрокаНабора.Настройка = Истина;
		
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Пользователь = Справочники.Пользователи.НайтиПоКоду("Шацкова А.А.");
		СтрокаНабора.Событие = Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаРазмещенияПТУПоЗаявкам;
		СтрокаНабора.АдресЭлПочты = "Shatskova-AA@Part-kom.ru";
		СтрокаНабора.Настройка = Истина;                   
				
		НаборЗаписей.Записать();
	Исключение
		Сообщить("Не удалось проставить адреса отправки для ГПК");
	КонецПопытки;	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_4_3() Экспорт
	мДата = Константы.ДатаНачалаРазделенияРТУ_СПБ.Получить();
	Если Не ЗначениеЗаполнено(мДата) Тогда 
		Константы.ДатаНачалаРазделенияРТУ_СПБ.Установить(ТекущаяДата());
	КонецЕсли;
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_1_0_4_4() Экспорт
	Об = Справочники.ОбменFTP_ВидыДокументов.ПрайсПоставщика.ПолучитьОбъект();
	Об.МаскаФайлаЗагрузки = "price*";
	Об.Записать();
	
	Об = Справочники.ОбменFTP_ВидыДокументов.ЗаказПоставщику.ПолучитьОбъект();
	Об.МаскаФайлаВыгрузки = "orderreceipt*";
	Об.МаскаФайлаЗагрузки = "ordercommit*";	
	Об.Записать();
	
	Об = Справочники.ОбменFTP_ВидыДокументов.ПоступлениеМХ1.ПолучитьОбъект();
	Об.МаскаФайлаВыгрузки = "receiptcommit*";
	Об.МаскаФайлаЗагрузки = "receipt*";	
	Об.Записать();
	
	Об = Справочники.ОбменFTP_ВидыДокументов.ОтчетМХ3.ПолучитьОбъект();
	Об.МаскаФайлаВыгрузки = "orderpicking*";
	Об.МаскаФайлаЗагрузки = "salecommit*";	
	Об.Записать();
	
	//НаборЗаписей = РегистрыСведений.ОбменFTP_ИсторияРасширенная.СоздатьНаборЗаписей();
	//НаборЗаписей.Прочитать();
	//
	//Для Каждого запись Из НаборЗаписей Цикл
	//	Если Запись.ВидДокументаУдалить = "ПрайсПоставщика" Тогда
	//		Запись.ВидДокумента = Справочники.ОбменFTP_ВидыДокументов.ПрайсПоставщика;
	//	ИначеЕсли Запись.ВидДокументаУдалить = "ЗаказПоставщику" Тогда
	//		Запись.ВидДокумента = Справочники.ОбменFTP_ВидыДокументов.ЗаказПоставщику;
	//	ИначеЕсли Запись.ВидДокументаУдалить = "ПоступлениеМХ1" Тогда
	//		Запись.ВидДокумента = Справочники.ОбменFTP_ВидыДокументов.ПоступлениеМХ1;
	//	ИначеЕсли Запись.ВидДокументаУдалить = "ОтчетМХ3" Тогда
	//		Запись.ВидДокумента = Справочники.ОбменFTP_ВидыДокументов.ОтчетМХ3;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//НаборЗаписей.Записать(Истина);
	
КонецПроцедуры