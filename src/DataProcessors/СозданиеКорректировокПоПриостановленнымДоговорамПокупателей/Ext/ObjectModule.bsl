			   
Процедура ВыполнитьРегламентноеЗадание() Экспорт
	
	лКлючАлгоритма = "Обработка_СозданиеКорректировокПоПриостановленнымДоговорамПокупателей_ВыполнитьРегламентноеЗадание";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента,
	               |	ВзаиморасчетыОстатки.СуммаУпрОстаток КАК Сумма,
	               |	ВзаиморасчетыОстатки.СуммаРеглОстаток КАК СуммаРегл,
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец.ОсновнойДоговорКонтрагента КАК ОсновнойДоговорКонтрагента,
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.Организация КАК ТекущаяОрганизация,
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец.ОсновнойДоговорКонтрагента.Организация КАК Организация,
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.Код КАК Код1,
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец.Код КАК Код2,
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец.Наименование КАК НаименованиеКонтрагента
	               |ИЗ
	               |	РегистрНакопления.Взаиморасчеты.Остатки(
	               |			,
	               |			ДоговорКонтрагента.Владелец.Покупатель
	               |				И ДоговорКонтрагента.ДоговорПриостановлен
	               |				И НЕ ДоговорКонтрагента.СлужебныйДоговор
	               |				И ДоговорКонтрагента.ВидОплаты = &Нал
	               |				И ДоговорКонтрагента.Владелец.ОсновнойДоговорКонтрагента.ВидОплаты = &Нал
	               |				И ДоговорКонтрагента <> ДоговорКонтрагента.Владелец.ОсновнойДоговорКонтрагента) КАК ВзаиморасчетыОстатки
	               |ИТОГИ
	               |	МАКСИМУМ(ОсновнойДоговорКонтрагента),
	               |	МАКСИМУМ(Код2),
	               |	МАКСИМУМ(НаименованиеКонтрагента)
	               |ПО
	               |	Контрагент";
	Запрос.УстановитьПараметр("Нал", Перечисления.ВидыДенежныхСредств.Наличные);
	ВыборкаПоКонтрагентам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Контрагент"); 
	Колво = 0;
	ТабличныйДокумент = Неопределено;
	
	Пока ВыборкаПоКонтрагентам.Следующий() Цикл 
		ВыборкаСоздатьКорр = ВыборкаПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		//Сумма = 0;
		//СуммаРегл = 0;
		
		Сообщить("Контрагент " + ВыборкаПоКонтрагентам.Контрагент);
		
		Успешно = Истина;
		ТаблицаЗначений = Новый ТаблицаЗначений;
		ТаблицаЗначений.Колонки.Добавить("НаименованиеКонтрагента", ОбщегоНазначения.ОписаниеТипаСтрока(200));
		ТаблицаЗначений.Колонки.Добавить("Код1", ОбщегоНазначения.ОписаниеТипаСтрока(20));
		ТаблицаЗначений.Колонки.Добавить("Код2", ОбщегоНазначения.ОписаниеТипаСтрока(20));
		ТаблицаЗначений.Колонки.Добавить("НомерКорректировки", ОбщегоНазначения.ОписаниеТипаСтрока(20));
		ТаблицаЗначений.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический);
		Попытка
			Пока ВыборкаСоздатьКорр.Следующий() Цикл 
				
				Если ВыборкаСоздатьКорр.Сумма = NULL Тогда 
					Продолжить;
				КонецЕсли;
				
				//Сумма = Сумма + ВыборкаСоздатьКорр.Сумма;
				//СуммаРегл = СуммаРегл + ВыборкаСоздатьКорр.СуммаРегл;
				
				Док = СоздатьКорректировкуДолга(ВыборкаПоКонтрагентам.Контрагент, 
												ВыборкаСоздатьКорр.ДоговорКонтрагента, 
												ВыборкаСоздатьКорр.ТекущаяОрганизация, 
												ВыборкаСоздатьКорр.Сумма, 
												ВыборкаСоздатьКорр.СуммаРегл,
												ВыборкаСоздатьКорр.ОсновнойДоговорКонтрагента);
				Док.Записать(РежимЗаписиДокумента.Проведение);
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСоздатьКорр);
				НоваяСтрока.НомерКорректировки = Док.Номер;
				
				Сообщить("Создан документ " + Док.Ссылка);
				Колво = Колво + 1;
			КонецЦикла;
			
			//Если Сумма <> 0 Тогда 
			//	Док = СоздатьКорректировкуДолга(ВыборкаПоКонтрагентам.Контрагент, ВыборкаПоКонтрагентам.ОсновнойДоговорКонтрагента, ВыборкаПоКонтрагентам.Организация, -Сумма, -СуммаРегл);
			//	Док.Записать(РежимЗаписиДокумента.Проведение);
			//	Сообщить("Создан документ " + Док.Ссылка);
			//	Колво = Колво + 1;
			//КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Успешно = Ложь;
			Сообщить("Откат транзакции");
			ОтменитьТранзакцию();
		КонецПопытки;
		//Сообщить("Создано корректировок долга: " + Колво);
		Если Успешно Тогда
 			Макет = ПолучитьМакет("Макет");
			Если ТабличныйДокумент = Неопределено Тогда 
				ТабличныйДокумент = Новый ТабличныйДокумент;
				Шапка = Макет.ПолучитьОбласть("Шапка");
				ТабличныйДокумент.Вывести(Шапка);
			КонецЕсли;
			Для Каждого СтрокаТЧ из ТаблицаЗначений Цикл 
				Строка = Макет.ПолучитьОбласть("Строка");
				ЗаполнитьЗначенияСвойств(Строка.Параметры, СтрокаТЧ);
				ТабличныйДокумент.Вывести(Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТабличныйДокумент = Неопределено и ОтправлятьОтчет Тогда 
		ВыполнитьРассылку(ТабличныйДокумент);	
	КонецЕсли;
	
	Сообщить("Создано " + Колво + " документов");
	
КонецПроцедуры

Функция СоздатьКорректировкуДолга (Контрагент, ДоговорКонтрагента, Организация, Сумма, СуммаРегл, ОсновнойДоговорКонтрагента)
	лКлючАлгоритма = "Обработка_СозданиеКорректировокПоПриостановленнымДоговорамПокупателей_СоздатьКорректировкуДолга";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	

	Док = Документы.КорректировкаДолга.СоздатьДокумент();
	Док.Ответственный = ПолныеПрава.ТекущийПользователь();
	Док.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Док.КурсДокумента = 1;
	Док.КратностьДокумента = 1;
	
	Док.КонтрагентДебитор = Контрагент;
	Док.КонтрагентКредитор = Контрагент;
	
	Док.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
	
	Док.ВидКорректировки = Справочники.ВидыКорректировок.Другое;
	//Док.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;

	Док.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;
	
	Док.Организация = Организация;
	Док.Комментарий = "Перенос долгов покупателей с приостановленных договоров на основной договор";
	НоваяСтрока = Док.СуммыДолга.Добавить();
	Если Сумма > 0  Тогда 
		НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.СуммаРегл = СуммаРегл;
	Иначе
		НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская;
		НоваяСтрока.Сумма = - Сумма;
		НоваяСтрока.СуммаРегл = - СуммаРегл;
	КонецЕсли;
	НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
	НоваяСтрока.КурсВзаиморасчетов = 1;
	НоваяСтрока.КратностьВзаиморасчетов = 1;
	НоваяСтрока.Контрагент = Контрагент;
	
	Док.Дата = ТекущаяДата();
	Возврат Док;
КонецФункции

Процедура ВыполнитьРассылку(ТабличныйДокумент)
	ИмяФайла = "Данные по корректировкам";
	ФайлВФорматеXLS = ПолучитьИмяВременногоФайла();
	ТабличныйДокумент.Записать(ФайлВФорматеXLS, ТипФайлаТабличногоДокумента.XLS);
	СписокФайловВложений = Новый СписокЗначений;
	СписокФайловВложений.Добавить(Новый Структура("Хранилище, ИмяФайла, Наименование", ПолучитьДвоичныеДанные(ФайлВФорматеXLS), (ИмяФайла + ".XLS"), ИмяФайла));
	
	РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.СозданиеКорректировокДолгаПокупателей,
		ИмяФайла, ЭтотОбъект.Метаданные().Синоним, ,,,СписокФайловВложений);
	КонецПроцедуры
	
Функция ПолучитьДвоичныеДанные(ИмяФайла)

	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Существует() Тогда
		Данные = Новый ДвоичныеДанные(ИмяФайла);
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;
		Возврат Данные;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	

КонецФункции
