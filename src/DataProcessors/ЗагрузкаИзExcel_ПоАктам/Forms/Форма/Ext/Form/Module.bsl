&НаКлиенте
Перем ОткрывающаяФорма;

&НаКлиенте
Перем Текст;

&НаКлиенте
Процедура ФайлДляЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru = 'Выберите файл'");
	Диалог.ПолноеИмяФайла = ФайлДляЗагрузки;
	Диалог.МножественныйВыбор          = Ложь;
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Фильтр                      = "Книга MS Excel(*.xls,*.xlsx)|*.xls;*.xlsx" +
	"|Все файлы(*.*)|*.*";
	
	Если Диалог.Выбрать() Тогда
		ЭтаФорма.ФайлДляЗагрузки = Диалог.ПолноеИмяФайла;
		ОбновитьСписокЛистов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлДляЗагрузкиПриИзменении(Элемент)
	ОбновитьСписокЛистов();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтаФорма.Заголовок = "Загрузка дополнительных свойств ("+ПолучитьВерсию()+")";
КонецПроцедуры

&НаСервере
Функция ПолучитьВерсию()
	Возврат РеквизитФормыВЗначение("Объект").СведенияОВнешнейОбработке().Версия;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	АктуальнаяВерсияОбработки = "1.00";
	Если Найти(ЭтаФорма.Заголовок, "("+АктуальнаяВерсияОбработки+")") = 0 Тогда
		Предупреждение("Открылась старая кешированная форма. Попробуйте еще раз или перезапустите приложение.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСоединение(ИмяФайла)
	Соединение = Новый COMОбъект("ADODB.Connection"); 
	Если ВРЕГ(ПРАВ(ИмяФайла,4)) = ".XLS" Тогда
		Соединение.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source="+ ИмяФайла+";Extended Properties=""Excel 8.0;HDR=No; IMEX=1;"""; 
	Иначе
		Соединение.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source="+ИмяФайла+";Extended Properties=""Excel 12.0;HDR=NO;IMEX=1;""";
	КонецЕсли;
	Соединение.ConnectionTimeout = 15; 
	Соединение.CursorLocation = 3; 
	Соединение.Open(); 
	
	Возврат Соединение;
КонецФункции

&НаКлиенте
Процедура ОбработатьДанныеЛиста(ДанныеЛиста, ОписаниеТаблицы)		
	
	ИмяЛиста = Элементы.СтраницаФайла.СписокВыбора.НайтиПоЗначению(ЭтаФорма.СтраницаФайла).Представление;
	
	ОписаниеОшибок = Неопределено;
	ДанныеТаблицы = Новый Массив;
	
	ДанныеТаблицы = НайтиИВыбратьСтроки(ДанныеЛиста, ОписаниеТаблицы, 0, 10000);
	
	Если ОписаниеТаблицы.КолонокНайдено <> ОписаниеТаблицы.КолонокВсего Тогда
		ОписаниеОшибок = ПолучитьСообщенияОбОшибкахПоискаКолонок(ИмяЛиста, ОписаниеТаблицы);
		
	ИначеЕсли ДанныеТаблицы.Количество() = 0 Тогда
		
		ОписаниеОшибок = "Таблица  «" + ИмяЛиста +"», не найдены заполненные строки";
		
	КонецЕсли;
	
	Если ОписаниеОшибок <> Неопределено Тогда
		Сообщить(ОписаниеОшибок);
	Иначе
		
		АдресДанных = ПоместитьВоВременноеХранилище(ДанныеТаблицы);
		АдресДанных = НайтиИЗаполнитьСоответствия(АдресДанных, ЦенаВключаетНДС);
		
		МассивРезультатов = ПолучитьИзВременногоХранилища(АдресДанных);
		
		Таблица.Очистить();
		Для Каждого Строка Из МассивРезультатов Цикл 
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Строка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаФайлаПриИзменении(Элемент)
	Если ПустаяСтрока(ЭтаФорма.ФайлДляЗагрузки) Тогда
		Предупреждение("Не указан файл");
		Возврат;	
	КонецЕсли;
	
	Файл = Новый Файл(ЭтаФорма.ФайлДляЗагрузки);
	Если НЕ Файл.Существует() Тогда
		Предупреждение("Файл не найден");
		Возврат;
		
	ИначеЕсли НЕ Файл.ЭтоФайл() Тогда
		Предупреждение("Это не файл");
		Возврат;
		
	ИначеЕсли ТипЗнч(ЭтаФорма.СтраницаФайла) <> Тип("Число") Тогда
		//Предупреждение(ЭтаФорма.СтраницаФайла);
		Возврат;		
	КонецЕсли;
	
	Соединение = Неопределено;
	Попытка
		Соединение = ПолучитьСоединение(ЭтаФорма.ФайлДляЗагрузки);
	Исключение
		ИОШ = ИнформацияОбОшибке();
		Сообщить(КраткоеПредставлениеОшибки(ИОШ));
		Элементы.СтраницаФайла.СписокВыбора.Добавить(КраткоеПредставлениеОшибки(ИОШ));
	КонецПопытки;
	ОбработатьДанныеПоОткрытомуСоединению(Соединение);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокЛистов(Соединение)
	СписокЛистов = Новый СписокЗначений;
	
	Каталог = Новый COMОбъект("ADOX.Catalog"); 
	Каталог.ActiveConnection = Соединение;
	
	Для Индекс = 0 по Каталог.Tables.Count - 1 Цикл
		СписокЛистов.Добавить(Индекс, Каталог.Tables(Индекс).Name);
	КонецЦикла;
	
	Возврат СписокЛистов;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокЛистов()
	Элементы.СтраницаФайла.СписокВыбора.Очистить();
	
	Соединение = Неопределено;
	ДанныеЛиста = Неопределено;
	
	Если ПустаяСтрока(ЭтаФорма.ФайлДляЗагрузки) Тогда
		Элементы.СтраницаФайла.СписокВыбора.Добавить("Не указан файл");
	Иначе
		Файл = Новый Файл(ЭтаФорма.ФайлДляЗагрузки);
		Если НЕ Файл.Существует() Тогда
			Элементы.СтраницаФайла.СписокВыбора.Добавить("Файл не найден");
			
		ИначеЕсли НЕ Файл.ЭтоФайл() Тогда
			Элементы.СтраницаФайла.СписокВыбора.Добавить("Это не файл");
			
		Иначе
			
			Попытка
				Соединение = ПолучитьСоединение(ЭтаФорма.ФайлДляЗагрузки);
				
				СписокЛистов = ПолучитьСписокЛистов(Соединение);
				
				Если СписокЛистов.Количество() = 0 Тогда
					Элементы.СтраницаФайла.СписокВыбора.Добавить("Листы не обнаружены");
				ИначеЕсли СписокЛистов.Количество() > 1 Тогда
					Элементы.СтраницаФайла.СписокВыбора.Добавить("Лист не выбран");
				Иначе//СписокЛистов.Количество() = 1 Тогда
				КонецЕсли;
				
				Для Каждого ЗначениеСписка Из СписокЛистов Цикл
					Элементы.СтраницаФайла.СписокВыбора.Добавить(ЗначениеСписка.Значение, ЗначениеСписка.Представление);
				КонецЦикла;
				
			Исключение
				ИОШ = ИнформацияОбОшибке();
				Сообщить(КраткоеПредставлениеОшибки(ИОШ));
				Элементы.СтраницаФайла.СписокВыбора.Добавить(КраткоеПредставлениеОшибки(ИОШ));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.СтраницаФайла = Элементы.СтраницаФайла.СписокВыбора[0].Значение;
	ОбработатьДанныеПоОткрытомуСоединению(Соединение);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	Если ПустаяСтрока(ЭтаФорма.ФайлДляЗагрузки) Тогда
		Предупреждение("Не указан файл");
		Возврат;		
	КонецЕсли;
	
	Файл = Новый Файл(ЭтаФорма.ФайлДляЗагрузки);
	
	Если НЕ Файл.Существует() Тогда		
		
		Предупреждение("Файл не найден");
		Возврат;
		
	ИначеЕсли НЕ Файл.ЭтоФайл() Тогда		
		
		Предупреждение("Это не файл");
		Возврат;		   
		
	ИначеЕсли ТипЗнч(ЭтаФорма.СтраницаФайла) <> Тип("Число") Тогда
		
		Предупреждение(ЭтаФорма.СтраницаФайла);
		Возврат;
		
	КонецЕсли;
	
	Соединение = Неопределено;
	
	Попытка		
		Соединение = ПолучитьСоединение(ЭтаФорма.ФайлДляЗагрузки);		
	Исключение		
		ИОШ = ИнформацияОбОшибке();
		Сообщить(КраткоеПредставлениеОшибки(ИОШ));
		Элементы.СтраницаФайла.СписокВыбора.Добавить(КраткоеПредставлениеОшибки(ИОШ));		
	КонецПопытки;
	
	ОбработатьДанныеПоОткрытомуСоединению(Соединение);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоОткрытомуСоединению(Соединение)
	
	ОчиститьСообщения();
	
	Если ТипЗнч(ЭтаФорма.СтраницаФайла) = Тип("Число") И Соединение <> Неопределено Тогда
		Попытка
			ДанныеЛиста = ПрочитатьДанныеЛиста(Соединение,  Элементы.СтраницаФайла.СписокВыбора.НайтиПоЗначению(ЭтаФорма.СтраницаФайла).Представление);
		Исключение
			ИОШ = ИнформацияОбОшибке();
			Сообщить(КраткоеПредставлениеОшибки(ИОШ));
		КонецПопытки;
	КонецЕсли;	
	Если ДанныеЛиста <> Неопределено Тогда
		ОписаниеКолонок = СформироватьОписаниеКолонок();
		ОбработатьДанныеЛиста(ДанныеЛиста, ОписаниеКолонок);
	КонецЕсли;		
	
	Если Соединение <> Неопределено Тогда
		Соединение.Close();
		Соединение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьДанныеЛиста(Соединение, ИмяТаблицы)
	
	ДанныеЛиста = Новый Массив;
	
	Записи = Соединение.Execute("SELECT * From ["+ИмяТаблицы+"]");
	
	Пока НЕ Записи.Eof() Цикл
		ДанныеСтроки = Новый Структура;
		
		Для Каждого Поле ИЗ Записи.Fields Цикл
			ДанныеСтроки.Вставить(Поле.Name, Поле.Value);
		КонецЦикла;
		
		ДанныеЛиста.Добавить(ДанныеСтроки);
		
		Записи.MoveNext();
	КонецЦикла;
	
	Возврат ДанныеЛиста;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеКолонки(КонтекстТаблицы, ИмяКолонки, ЗаголовокКолонки, Опциональное = Ложь)
	
	Если КонтекстТаблицы = Неопределено Тогда
		КонтекстТаблицы = Новый Структура;
		КонтекстТаблицы.Вставить("Колонки", Новый Массив);
		КонтекстТаблицы.Вставить("КолонокВсего", 0);
		КонтекстТаблицы.Вставить("КолонокНайдено", 0);
		КонтекстТаблицы.Вставить("ПерваяСтрока", 0);
		КонтекстТаблицы.Вставить("ПоследняяСтрока", 0);
		КонтекстТаблицы.Вставить("ОбщийЗаголовок", "");
	КонецЕсли;
	
	КонтекстТаблицы.Колонки.Добавить(Новый Структура("ИмяКолонки,ЗаголовокКолонки,КлючКолонки,Опциональное,Строка",ИмяКолонки,ЗаголовокКолонки, Неопределено,Опциональное,0));
	КонтекстТаблицы.ОбщийЗаголовок = КонтекстТаблицы.ОбщийЗаголовок + ЗаголовокКолонки;
	КонтекстТаблицы.КолонокВсего = КонтекстТаблицы.КолонокВсего + 1;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСообщенияОбОшибкахПоискаКолонок(ИмяТаблицы, КонтекстТаблицы)
	
	Если КонтекстТаблицы.КолонокВсего = КонтекстТаблицы.КолонокНайдено Тогда
		Возврат Неопределено;
	КонецЕсли;
	тКолонкиБезКлючей = "";
	Для Каждого ОписаниеКолонки Из КонтекстТаблицы.Колонки Цикл
		Если ОписаниеКолонки.КлючКолонки = Неопределено Тогда
			тКолонкиБезКлючей = тКолонкиБезКлючей + ", " + ОписаниеКолонки.ИмяКолонки;
		КонецЕсли;
	КонецЦикла;
	Возврат "Таблица  «"+ИмяТаблицы+"», не найдены колонки: "+Сред(тКолонкиБезКлючей, 3);
	
КонецФункции

&НаКлиенте
Функция НайтиИВыбратьСтроки(ДанныеЛиста, КонтекстТаблицы, ПерваяСтрока, МаксимумСтрок)
	
	Результат = Новый Массив;
	Если ПерваяСтрока < ДанныеЛиста.Количество() Тогда
		Для Сч = ПерваяСтрока По ДанныеЛиста.Количество()-1 Цикл
			ТекущиеДанные = ДанныеЛиста[Сч];
			
			Если КонтекстТаблицы.КолонокНайдено < КонтекстТаблицы.КолонокВсего Тогда
				//ищем колонки по заголовку
				Для Каждого Пара Из ТекущиеДанные Цикл
					Если НЕ ПустаяСтрока(Пара.Значение) Тогда
						ЗаголовокКолонки = ПреобразоватьВЗаголовокКолонки(Пара.Значение);
						Если Найти(КонтекстТаблицы.ОбщийЗаголовок, ЗаголовокКолонки) <> 0 Тогда
							Для Каждого ОписаниеКолонки Из КонтекстТаблицы.Колонки Цикл
								Если ОписаниеКолонки.КлючКолонки = Неопределено И Найти(ОписаниеКолонки.ЗаголовокКолонки, ЗаголовокКолонки) <> 0 Тогда
									ОписаниеКолонки.КлючКолонки = Пара.Ключ;
									ОписаниеКолонки.Строка = Сч;
									КонтекстТаблицы.КолонокНайдено = КонтекстТаблицы.КолонокНайдено + 1;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			Иначе//все колонки найдены
				
				ДанныеСтроки = Новый Структура;
				
				Для Каждого ОписаниеКолонки Из КонтекстТаблицы.Колонки Цикл
					ЗначениеЯчейки = СокрЛП(ТекущиеДанные[ОписаниеКолонки.КлючКолонки]);
					Если Не ПустаяСтрока(ЗначениеЯчейки) ИЛИ ОписаниеКолонки.Опциональное Тогда
						ДанныеСтроки.Вставить(ОписаниеКолонки.ИмяКолонки, ЗначениеЯчейки);
					КонецЕсли;
				КонецЦикла;
				Если ДанныеСтроки.Количество() = КонтекстТаблицы.Колонки.Количество() Тогда
					Результат.Добавить(ДанныеСтроки);
					
					Если КонтекстТаблицы.ПерваяСтрока = 0 Тогда
						КонтекстТаблицы.ПерваяСтрока = Сч;
					КонецЕсли;
					
					КонтекстТаблицы.ПоследняяСтрока = Сч;
				КонецЕсли;
				
				Если Результат.Количество() >= МаксимумСтрок Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПреобразоватьВЗаголовокКолонки(Значение)
	Возврат "/"+УдалитьДополнительныеСимволы(Значение)+"/";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УдалитьДополнительныеСимволы(Значение)
	
	Результат = Нрег(Значение);
	Результат = СтрЗаменить(Результат, " ", "");
	Результат = СтрЗаменить(Результат, Символы.НПП, "");
	Результат = СтрЗаменить(Результат, Символы.Таб, "");
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	Результат = СтрЗаменить(Результат, ",", "");
	Результат = СтрЗаменить(Результат, ".", "");
	Результат = СтрЗаменить(Результат, "/", "");
	Результат = СтрЗаменить(Результат, "-", "");
	Результат = СтрЗаменить(Результат, "%", "");
	Результат = СтрЗаменить(Результат, "$", "");
	Результат = СтрЗаменить(Результат, """", "");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СформироватьОписаниеКолонок()
			
	ОписаниеТаблицы = Неопределено;
	
	ДобавитьОписаниеКолонки(ОписаниеТаблицы, "Штрихкод", ПреобразоватьВЗаголовокКолонки("ID запроса"), Ложь);  // Опциональное поле;
	ДобавитьОписаниеКолонки(ОписаниеТаблицы, "ПричинаВозврата", 	ПреобразоватьВЗаголовокКолонки("причина возврата"), Истина);
	ДобавитьОписаниеКолонки(ОписаниеТаблицы, "ПричинаОбратногоВозврата"	, 	ПреобразоватьВЗаголовокКолонки("Причина обратного возврата"), Истина);
	ДобавитьОписаниеКолонки(ОписаниеТаблицы, "ВозможностьУценки"				,	ПреобразоватьВЗаголовокКолонки("Возможность уценки"), Истина);
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиИЗаполнитьСоответствия(АдресДанных, ЦенаВключаетНДС)
	
	ДанныеТаблицы = ПолучитьИзВременногоХранилища(АдресДанных);
	
	СоответствиеПричинВозврата = Новый Соответствие;
	СоответствиеПричинВозврата.Вставить("Ошибка заказа (возврат товара с уценкой)", Справочники.ПричиныВозврата.БракВыявленныйДоУстановки);
	СоответствиеПричинВозврата.Вставить("БракДоУстановки", Справочники.ПричиныВозврата.БракВыявленныйДоУстановки);
	СоответствиеПричинВозврата.Вставить("БракПослеУстановки", Справочники.ПричиныВозврата.БракВыявленныйПослеУстановки);
	СоответствиеПричинВозврата.Вставить("НесоблюдениеСроков", Справочники.ПричиныВозврата.НарушенСрокПоставки);
	СоответствиеПричинВозврата.Вставить("Пересортица", Справочники.ПричиныВозврата.Пересортица);
	СоответствиеПричинВозврата.Вставить("Подозрение на контрафакт", Справочники.ПричиныВозврата.ПодозрениеНаКонтрафакт);
	СоответствиеПричинВозврата.Вставить("Механическое повреждение", Справочники.ПричиныВозврата.БракВыявленныйДоУстановки);
	СоответствиеПричинВозврата.Вставить("Недогруз", Справочники.ПричиныВозврата.Недогруз);
	СоответствиеПричинВозврата.Вставить("Некомплект", Справочники.ПричиныВозврата.Некомплект);
	
	Результат = новый Массив;
	
	Ключи = "Штрихкод,ПричинаВозврата,ПричинаОбратногоВозврата,ВозможностьУценки,Документ,ДокументНайден";
	
	СловарьКодов 	= Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АктРассмотренияВозврата.Штрихкод,
	|	АктРассмотренияВозврата.Ссылка
	|ИЗ
	|	Документ.АктРассмотренияВозврата КАК АктРассмотренияВозврата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО АктРассмотренияВозврата.Ссылка = ЗначенияСвойствОбъектов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	|		ПО АктРассмотренияВозврата.Ссылка = ЗначенияСвойствОбъектов1.Объект
	|			И (ЗначенияСвойствОбъектов1.Свойство.Наименование = ""ДополнительнаяИнформация"")
	|			И (ЗначенияСвойствОбъектов1.Значение.Наименование = ""Актуализирован"")
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство.Наименование = ""ДополнительнаяИнформация""
	|	И ЗначенияСвойствОбъектов.Значение.Наименование = ""ТребуетсяАктуализация""
	|	И ЗначенияСвойствОбъектов1.Объект ЕСТЬ NULL");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Штрихкод, Выборка.Ссылка);
	КонецЦикла;
	
	Для Каждого СтрокаДанных Из ДанныеТаблицы Цикл
		
		Ссылка = Соответствие[СтрокаДанных.Штрихкод];
		Если Ссылка <> Неопределено Тогда
			
			Строка = Новый Структура(Ключи);
			
			ЗаполнитьЗначенияСвойств(Строка, СтрокаДанных);
			
			ПричинаВозврата = СоответствиеПричинВозврата[Строка.ПричинаВозврата];
			Если ПричинаВозврата <> Неопределено Тогда
				Строка.ПричинаВозврата = ПричинаВозврата;
			КонецЕсли;
			
			Строка.ВозможностьУценки = ?(Строка.ВозможностьУценки = "TRUE", Истина, Ложь);
			
			Результат.Добавить(Строка);
			
			Строка.Документ = Ссылка;
			Строка.ДокументНайден = Истина;
			
		КонецЕсли;
		
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ
		//|	АктРассмотренияВозврата.Ссылка
		//|ИЗ
		//|	Документ.АктРассмотренияВозврата КАК АктРассмотренияВозврата
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		//|		ПО АктРассмотренияВозврата.Ссылка = ЗначенияСвойствОбъектов.Объект
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
		//|		ПО АктРассмотренияВозврата.Ссылка = ЗначенияСвойствОбъектов1.Объект
		//|			И (ЗначенияСвойствОбъектов1.Свойство.Наименование = ""ДополнительнаяИнформация""
		//|				И ЗначенияСвойствОбъектов1.Значение.Наименование = ""Актуализирован"")
		//|ГДЕ
		//|	АктРассмотренияВозврата.Штрихкод = &Штрихкод
		//|	И ЗначенияСвойствОбъектов.Свойство.Наименование = ""ДополнительнаяИнформация""
		//|	И ЗначенияСвойствОбъектов.Значение.Наименование = ""ТребуетсяАктуализация""
		////|	И АктРассмотренияВозврата.СтатусДокумента = &СтатусДокумента
		//|	И ЗначенияСвойствОбъектов1.Объект ЕСТЬ NULL");
		//
		////Запрос.УстановитьПараметр("СтатусДокумента", Справочники.СтатусыДокументов.АРВ_РаботаЗавершена);
		//Запрос.УстановитьПараметр("Штрихкод", СокрЛП(СтрокаДанных.Штрихкод));
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//
		//Если Не РезультатЗапроса.Пустой() Тогда
		//	
		//	Строка = Новый Структура(Ключи);
		//	
		//	ЗаполнитьЗначенияСвойств(Строка, СтрокаДанных);
		//	
		//	ПричинаВозврата = СоответствиеПричинВозврата[Строка.ПричинаВозврата];
		//	Если ПричинаВозврата <> Неопределено Тогда
		//		Строка.ПричинаВозврата = ПричинаВозврата;
		//	КонецЕсли;
		//	
		//	Строка.ВозможностьУценки = ?(Строка.ВозможностьУценки = "TRUE", Истина, Ложь);
		//	
		//	Результат.Добавить(Строка);
		//	
		//	Выборка = РезультатЗапроса.Выбрать();
		//	Выборка.Следующий();
		//	
		//	Строка.Документ = Выборка.Ссылка;
		//	Строка.ДокументНайден = Истина;
		//	
		//КонецЕсли;
			
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(Результат);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьСвойства(Команда)
	
	ЗаписатьСвойстваСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСвойстваСервер()
	
	Для Каждого Строка Из таблица Цикл
		
		Если Строка.ДокументНайден Тогда
			
			ДокументОбъект = Строка.Документ.ПолучитьОбъект();
			ДокументОбъект.ПричинаВозврата = Строка.ПричинаВозврата;
			
			Попытка
				ДокументОбъект.Записать();
				
				МЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				МЗ.Объект = ДокументОбъект.Ссылка;
				МЗ.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ДополнительнаяИнформация");
				МЗ.Значение = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("Актуализирован");
				МЗ.Записать();
				
				//Строка.КомментарийЗагрузки = "Обработан";
			Исключение
				//Строка.КомментарийЗагрузки = ОписаниеОшибки();
			КонецПопытки;
			//Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьТз(АдресДанных)
	ДанныеТаблицы = ПолучитьИзВременногоХранилища(АдресДанных);
	
	Для каждого ДанныеСтроки Из ДанныеТаблицы Цикл
		
	КонецЦикла;
	
	
КонецПроцедуры 

