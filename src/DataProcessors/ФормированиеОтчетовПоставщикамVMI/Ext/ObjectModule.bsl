Перем ЛогОшибок;

Функция ПолучитьЦенуНоменклатурыКонтрагента(тПрайс, тНоменклатура, тДата)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ц.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|			&тДата,
	|			ПрайсПоставщика = &тПрайс
	|				И Номенклатура.Номенклатура = &тНоменклатура) КАК Ц"
	);
	Запрос.УстановитьПараметр("тПрайс", тПрайс);
	Запрос.УстановитьПараметр("тНоменклатура", тНоменклатура);
	Запрос.УстановитьПараметр("тДата", тДата);
	
	тЦена = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		тЦена = Выборка.Цена;
	КонецЦикла;
	
	Возврат тЦена;
	
КонецФункции

Функция СоздатьПустойДокументПоступления(вхКонтрагент, вхДоговор, вхПериод)
	НовДок = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	НовДок.Дата = ДатаДок;
	НовДок.ВидОперацииПоступления = Перечисления.ВидыПоступленияТоваров.ЗачетТовараVMI;
	НовДок.Контрагент = вхКонтрагент;
	НовДок.ДоговорКонтрагента = вхДоговор;
	НовДок.Организация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхДоговор, "Организация");
	тВалюта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхДоговор, "ВалютаВзаиморасчетов");
	Если ЗначениеЗаполнено(тВалюта) Тогда
		НовДок.ВалютаДокумента = тВалюта;
	Иначе
		НовДок.ВалютаДокумента = Константы.ВалютаРубль.Получить();
	КонецЕсли;
	НовДок.ТипЦен = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхДоговор, "ТипЦен");
	НовДок.УчитыватьНДС = ОбщегоНазначения.ПолучитьЗначениеРеквизита(НовДок.Организация, "УчитыватьНДС");
	НовДок.СуммаВключаетНДС = Истина;
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(НовДок.ВалютаДокумента, ДатаДок);
	НовДок.КурсВзаиморасчетов = СтруктураКурса.Курс;
	НовДок.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	НовДок.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровЗачетVMI;
	СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(вхКонтрагент, "ОсновнойБанковскийСчет,ОсновнаяТорговаяТочка");
	НовДок.БанковскийСчетКонтрагента = СтруктураРеквизитов.ОсновнойБанковскийСчет;
	НовДок.ТорговаяТочка = СтруктураРеквизитов.ОсновнаяТорговаяТочка;
	НовДок.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Если НеОтправлятьПоставщику Тогда
		НовДок.ЗаблокироватьОтправкуПоставщику = Истина;
		
	КонецЕсли;
	
	НовДок.ПериодОтчетаМХ3 = вхПериод;
	
	Возврат НовДок;
	
КонецФункции

Процедура Сформировать() Экспорт
	ПрайсыПоставщиков.Очистить();
	Товары.Очистить();
	ТабДокументов.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Обработки.ФормированиеОтчетовПоставщикамVMI.ПолучитьСписокПрайсовПоставщиковНаДатуОтчета(ДатаДок, Контрагент, ЛогОшибок), ПрайсыПоставщиков);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Для Каждого Прайс ИЗ ПрайсыПоставщиков Цикл
			Прайс.ФормироватьДокументы = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Прайс Из ПрайсыПоставщиков Цикл
		Если ЗначениеЗаполнено(Прайс.Склад) Тогда
			Если ЗначениеЗаполнено(Прайс.Договор) Тогда
				Если ЗначениеЗаполнено(ДатаКон) Тогда
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
					Обработки.ФормированиеОтчетовПоставщикамVMI.ЗаполнитьОстаткамиПоРегиструПартий(Прайс.ПрайсПоставщика, ДатаКон, Прайс.Договор, Прайс.Склад), Товары);
					
				Иначе
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
					Обработки.ФормированиеОтчетовПоставщикамVMI.ЗаполнитьОстаткамиПоРегиструПартий(Прайс.ПрайсПоставщика, Прайс.ДатаКон, Прайс.Договор, Прайс.Склад), Товары);
					
				КонецЕсли;
				
			Иначе
				ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) +
				"по прайсу " + Строка(Прайс.ПрайсПоставщика) + " не сформирован отчет. в выборке отсутствует договор по нужной организации";
			
			КонецЕсли;
			
		Иначе
			ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) +
			"по прайсу " + Строка(Прайс.ПрайсПоставщика) + " не сформирован отчет. в выборке отсутствует склад";
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Товар Из Товары Цикл
		Если Товар.Количество = 0 Тогда
			Товар.Цена = ПолучитьЦенуНоменклатурыКонтрагента(Товар.ПрайсПоставщика, Товар.Номенклатура, Товар.ДатаПродажи);
		Иначе
			Товар.Цена = Товар.Сумма/Товар.Количество;
		КонецЕсли;
		Если Товар.СкидкаПроцент > 0 Тогда
			Товар.Сумма = Товар.Сумма - Окр(Товар.Сумма*Товар.СкидкаПроцент/100,2);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Товар.СтавкаНДС) Тогда
			Товар.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;
		Товар.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Товар.Сумма, Истина, Истина, Товар.СтавкаНДС);
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Если НЕ ПустаяСтрока(ЛогОшибок) Тогда
			Сообщить(ЛогОшибок);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Процедура ПолучитьСписокПрайсов() Экспорт
	ПрайсыПоставщиков.Очистить();
	Товары.Очистить();
	ТабДокументов.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Обработки.ФормированиеОтчетовПоставщикамVMI.ПолучитьСписокПрайсовПоставщиковНаДатуОтчета(ДатаДок, Контрагент, ЛогОшибок), ПрайсыПоставщиков);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Для Каждого Прайс ИЗ ПрайсыПоставщиков Цикл
			Прайс.ФормироватьДокументы = Истина;
		КонецЦикла;
		
	КонецЕсли;
		
	#Если Клиент Тогда
		Если НЕ ПустаяСтрока(ЛогОшибок) Тогда
			Сообщить(ЛогОшибок);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Процедура ПолучитьТовары() Экспорт
	Для Каждого Прайс Из ПрайсыПоставщиков Цикл
		Если НЕ Прайс.ФормироватьДокументы Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Прайс.Склад) Тогда
			Если ЗначениеЗаполнено(Прайс.Договор) Тогда
				Если ЗначениеЗаполнено(ДатаКон) Тогда
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
					Обработки.ФормированиеОтчетовПоставщикамVMI.ЗаполнитьОстаткамиПоРегиструПартий(Прайс.ПрайсПоставщика, ДатаКон, Прайс.Договор, Прайс.Склад), Товары);
					
				Иначе
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
					Обработки.ФормированиеОтчетовПоставщикамVMI.ЗаполнитьОстаткамиПоРегиструПартий(Прайс.ПрайсПоставщика, Прайс.ДатаКон, Прайс.Договор, Прайс.Склад), Товары);
					
				КонецЕсли;
				
			Иначе
				ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) +
				"по прайсу " + Строка(Прайс.ПрайсПоставщика) + " не сформирован отчет. в выборке отсутствует договор по нужной организации";
			
			КонецЕсли;
			
		Иначе
			ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) +
			"по прайсу " + Строка(Прайс.ПрайсПоставщика) + " не сформирован отчет. в выборке отсутствует склад";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Товар Из Товары Цикл
		Если Товар.Количество = 0 Тогда
			Товар.Цена = ПолучитьЦенуНоменклатурыКонтрагента(Товар.ПрайсПоставщика, Товар.Номенклатура, Товар.ДатаПродажи);
		Иначе
			Товар.Цена = Товар.Сумма/Товар.Количество;
		КонецЕсли;
		//Если Товар.СкидкаПроцент > 0 Тогда
		//	Товар.Сумма = Товар.Сумма - Окр(Товар.Сумма*Товар.СкидкаПроцент/100,2);
		//КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Товар.СтавкаНДС) Тогда
			Товар.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;
		Товар.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Товар.Сумма, Истина, Истина, Товар.СтавкаНДС);
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Если НЕ ПустаяСтрока(ЛогОшибок) Тогда
			Сообщить(ЛогОшибок);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбновитьЗаписьРасписания(тПрайс, тОрганизация, тСклад, тДатаКон)
	Если НЕ ЗначениеЗаполнено(тПрайс) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(тОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(тСклад) Тогда
		Возврат;
	КонецЕсли;
	
	нз = РегистрыСведений.РасписанияОтчетовПоставщикамVMI.СоздатьНаборЗаписей();
	
	нз.Отбор.ПрайсПоставщика.ВидСравнения = ВидСравнения.Равно;
	нз.Отбор.ПрайсПоставщика.Значение = тПрайс;
	нз.Отбор.ПрайсПоставщика.Использование = Истина;
	
	нз.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
	нз.Отбор.Организация.Значение = тОрганизация;
	нз.Отбор.Организация.Использование = Истина;
	
	нз.Отбор.Склад.ВидСравнения = ВидСравнения.Равно;
	нз.Отбор.Склад.Значение = тСклад;
	нз.Отбор.Склад.Использование = Истина;
	
	нз.Прочитать();
	
	Для Каждого зап Из нз Цикл
		зап.ДатаОкончанияПериодаПоследнегоОтчета = тДатаКон;
		
	КонецЦикла;
	
	нз.Записать(Истина);
	
КонецПроцедуры

Процедура СформироватьДокументПоНайденнымСтрокам(СтрокаПрайса, СтрокиТоваров, ДатаКонецМесяца = Неопределено, вхПериод,датадок)
	//Если СтрокиТоваров.Количество() > 0 Тогда
	//	СкидкаСумма = СтрокиТоваров[0].СкидкаСумма;
	//Иначе
	//	СкидкаСумма = 0;
	//КонецЕсли;
	
	Зачет = СоздатьПустойДокументПоступления(СтрокаПрайса.Поставщик, СтрокаПрайса.Договор, вхПериод);
	ДатаОкончанияПериодаОтчета = ДатаКон;
	//Если ДатаКонецМесяца <> Неопределено Тогда
	//	Если СтрокиТоваров[0].ДатаПродажи <= ДатаКонецМесяца Тогда
	//		//Зачет.Дата = НачалоДня(СтрокаПрайса.ДатаНач);
	//		Если ЗначениеЗаполнено(СтрокаПрайса.ДатаПоследнегоОтчета) Тогда
	//			Зачет.Дата = КонецДня(СтрокаПрайса.ДатаПоследнегоОтчета) + 1;
	//		Иначе
	//			Зачет.Дата = НачалоДня(СтрокаПрайса.ДатаНач);
	//		КонецЕсли;
	//		ДатаОкончанияПериодаОтчета = ДатаКонецМесяца;
	//		
	//	Иначе
	//		Зачет.Дата = ДатаКонецМесяца + 1;
	//		
	//	КонецЕсли;
	//Иначе
	//	Зачет.Дата = НачалоДня(СтрокаПрайса.ДатаНач);
	//	Если ЗначениеЗаполнено(СтрокаПрайса.ДатаПоследнегоОтчета) Тогда
	//		Зачет.Дата = КонецДня(СтрокаПрайса.ДатаПоследнегоОтчета) + 1;
	//	Иначе
	//		Зачет.Дата = НачалоДня(СтрокаПрайса.ДатаНач);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Зачет.Дата = НачалоДня(датадок) ;
	
	Зачет.Склад = СтрокаПрайса.Склад;
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтрокиТоваров, Зачет.Товары);
	Для Каждого Товар Из Зачет.Товары Цикл
		Товар.Сумма = Товар.Количество*Товар.Цена;
		Если НЕ Зачет.УчитыватьНДС Тогда
			Товар.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Товар.СуммаНДС = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	//Если СкидкаСумма > 0 Тогда
	//	МассивБазыРаспределения = Новый Массив;
	//	
	//	Для Каждого Товар Из Зачет.Товары Цикл
	//		МассивБазыРаспределения.Добавить(Товар.Сумма);
	//	КонецЦикла;
	//	
	//	Если Зачет.Товары.Количество() > 0 Тогда
	//		ТаблицаРаспределения = Зачет.Товары.Выгрузить();
	//		УчетНДС.РаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, СкидкаСумма, ТаблицаРаспределения, 9);
	//		Зачет.Товары.Очистить();
	//		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределения, Зачет.Товары);
	//		
	//	КонецЕсли;

	//	Если Зачет.УчитыватьНДС Тогда
	//		Для Каждого Товар Из Зачет.Товары Цикл
	//			Товар.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Товар.Сумма, Истина, Истина, Товар.СтавкаНДС);
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
	НачатьТранзакцию();
	Попытка
		Зачет.Записать(РежимЗаписиДокумента.Проведение);
		
		ОбновитьЗаписьРасписания(СтрокаПрайса.ПрайсПоставщика, Зачет.Организация, СтрокаПрайса.Склад, ДатаОкончанияПериодаОтчета);
		
		СтрДок = ТабДокументов.Добавить();
		СтрДок.Контрагент = Зачет.Контрагент;
		СтрДок.Организация = Зачет.Организация;
		СтрДок.Документ = Зачет.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) 
		+ "неудачная попытка формирования отчета по поставщику (проведение документа) - " + Строка(СтрокаПрайса.Поставщик);
		ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) + ОписаниеОшибки();
		
		Попытка
			Зачет.Записать(РежимЗаписиДокумента.Запись);
			
			ОбновитьЗаписьРасписания(СтрокаПрайса.ПрайсПоставщика, Зачет.Организация, СтрокаПрайса.Склад, ДатаОкончанияПериодаОтчета);
			
			СтрДок = ТабДокументов.Добавить();
			СтрДок.Контрагент = Зачет.Контрагент;
			СтрДок.Организация = Зачет.Организация;
			СтрДок.Документ = Зачет.Ссылка;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) 
			+ "неудачная попытка формирования отчета по поставщику (запись документа) - " + Строка(СтрокаПрайса.Поставщик);
			ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) + ОписаниеОшибки();
			
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьДокументы() Экспорт
	Для каждого Прайс Из ПрайсыПоставщиков Цикл
		Если НЕ ЭтоРегламент Тогда
			Если НЕ Прайс.ФормироватьДокументы Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Прайс.Склад) Тогда
			ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) 
			+ "неудачная попытка формирования отчета по поставщику (неоднозначное определение склада в расписании) - " 
			+ Строка(Прайс.Поставщик);
			ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) + ОписаниеОшибки();
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Прайс.Договор) Тогда
			ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) 
			+ "неудачная попытка формирования отчета по поставщику (неоднозначное определение договора в расписании) - " 
			+ Строка(Прайс.Поставщик);
			ЛогОшибок = ЛогОшибок + ?(ПустаяСтрока(ЛогОшибок), "", Символы.ПС) + ОписаниеОшибки();
			
			Продолжить;
			
		КонецЕсли;
			
		пар = Новый Структура("ПрайсПоставщика,Договор,Склад", Прайс.ПрайсПоставщика, Прайс.Договор, Прайс.Склад);
		СтрокиТоваров = Товары.НайтиСтроки(пар);
			
		//конец месяца отдельно
		ДатаКонцаМесяца = КонецМесяца(Прайс.ДатаНач);
		
		Если СтрокиТоваров.Количество() > 0 тогда
			
			
			
			
			Если Прайс.КонецМесяцаОтдельно И ДатаКонцаМесяца < Прайс.ДатаКон Тогда
				КопияСтрокДо = Товары.ВыгрузитьКолонки();
				КопияСтрокПосле = Товары.ВыгрузитьКолонки();
				Для Каждого Товар Из СтрокиТоваров Цикл
					Если Товар.ДатаПродажи < ДатаКонцаМесяца Тогда
						СтрокаКопии = КопияСтрокДо.Добавить();
					Иначе
						СтрокаКопии = КопияСтрокПосле.Добавить();
					КонецЕсли;
					СтрокаКопии.ДатаПродажи = Товар.ДатаПродажи;
					СтрокаКопии.ПрайсПоставщика = Товар.ПрайсПоставщика;
					СтрокаКопии.Договор = Товар.Договор;
					СтрокаКопии.Склад = Товар.Склад;
					СтрокаКопии.СтрокаПрихода = Товар.СтрокаПрихода;
					СтрокаКопии.Номенклатура = Товар.Номенклатура;
					СтрокаКопии.ЕдиницаИзмерения = Товар.ЕдиницаИзмерения;
					СтрокаКопии.Коэффициент = Товар.Коэффициент;
					СтрокаКопии.Количество = Товар.Количество;
					СтрокаКопии.Цена = Товар.Цена;
					СтрокаКопии.Сумма = Товар.Сумма;
					СтрокаКопии.СтавкаНДС = Товар.СтавкаНДС;
					СтрокаКопии.СуммаНДС = Товар.СуммаНДС;
					
				КонецЦикла;
				
				Если КопияСтрокДо.Количество() > 0 Тогда
					ПериодОтчета = Формат(Прайс.ДатаНач, "ДФ=dd.MM.yy") + "-" + Формат(ДатаКонцаМесяца, "ДФ=dd.MM.yy");
					СформироватьДокументПоНайденнымСтрокам(Прайс, КопияСтрокДо, ДатаКонцаМесяца, ПериодОтчета,прайс.ДатаПоследнегоотчета+86400);
					
				КонецЕсли;
				
				Если КопияСтрокПосле.Количество() > 0 Тогда
					ПериодОтчета = Формат(ДатаКонцаМесяца, "ДФ=dd.MM.yy") + "-" + Формат(Прайс.ДатаКон, "ДФ=dd.MM.yy");
					СформироватьДокументПоНайденнымСтрокам(Прайс, КопияСтрокПосле, ДатаКонцаМесяца, ПериодОтчета,ДатаКонцаМесяца+86400);
					
				КонецЕсли;

			Иначеесли  Прайс.ДелитьОтчетVMI тогда 
				//# Kalinin V.A. ( 2018-06-25 )
				КопияСтрокДо = Товары.ВыгрузитьКолонки();
				КопияСтрокПосле = Товары.ВыгрузитьКолонки();
				
				
				
				Для Каждого Товар Из СтрокиТоваров Цикл
					Если Товар.ДатаПоступления < прайс.ДатаПоследнегоотчета+172800 Тогда
						СтрокаКопии = КопияСтрокДо.Добавить();
					Иначе
						СтрокаКопии = КопияСтрокПосле.Добавить();
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтрокаКопии,Товар);
							
				КонецЦикла;
	
				Если КопияСтрокДо.Количество() > 0 Тогда
					ПериодОтчета = Формат(прайс.ДатаПоследнегоотчета+86400, "ДФ=dd.MM.yy") + "-" + Формат(ДатаКон, "ДФ=dd.MM.yy");
					СформироватьДокументПоНайденнымСтрокам(Прайс, КопияСтрокДо, ДатаКонцаМесяца, ПериодОтчета, прайс.ДатаПоследнегоотчета+86400);
					
				КонецЕсли;
				
				МассивДат=новый массив;
				Для Каждого Стр Из КопияСтрокПосле Цикл
 					Если МассивДат.Найти(Стр.ДатаПоступления) = неопределено Тогда
 						МассивДат.Добавить(Стр.ДатаПоступления);
  					КонецЕсли;
 				КонецЦикла;
				
							 
				 Для каждого Дата из МассивДат цикл
					СтрокиНаДату = КопияСтрокПосле.НайтиСтроки(новый Структура("ДатаПоступления",Дата)); 
					ПериодОтчета = Формат(Дата, "ДФ=dd.MM.yy") + "-" + Формат(ДатаКон, "ДФ=dd.MM.yy");
					СформироватьДокументПоНайденнымСтрокам(Прайс, СтрокиНаДату, , ПериодОтчета, Дата); 
				 КонецЦикла;	 
				
				
				
				
				//Если КопияСтрокПосле.Количество() > 0 Тогда
				//	ПериодОтчета = Формат(ДатаКонцаМесяца, "ДФ=dd.MM.yy") + "-" + Формат(Прайс.ДатаКон, "ДФ=dd.MM.yy");
				//	СформироватьДокументПоНайденнымСтрокам(Прайс, КопияСтрокПосле, ДатаКонцаМесяца, ПериодОтчета);
				//	
				//КонецЕсли;

				
				
			Иначе
				ПериодОтчета = Формат(прайс.ДатаПоследнегоотчета+86400, "ДФ=dd.MM.yy") + "-" + Формат(ДатаКон, "ДФ=dd.MM.yy");
				СформироватьДокументПоНайденнымСтрокам(Прайс, СтрокиТоваров, , ПериодОтчета,прайс.ДатаПоследнегоотчета+86400);
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

	
	
	

Процедура ВыполнитьРегламентноеЗадание() Экспорт
	ЭтоРегламент = Истина;
	ДатаДок = ТекущаяДата();
	
	Сформировать();
	
	СформироватьДокументы();
	
	//Если НЕ ПустаяСтрока(ЛогОшибок) Тогда
	//	РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаVMI,
	//	ЛогОшибок, "ошибка при формировании отчета МХ-3");
	//	
	//КонецЕсли;
	
КонецПроцедуры

ЛогОшибок = "";