Перем Дата;
Перем Товары Экспорт;
Перем мПричинаИсключенияЛимитОтгрузки Экспорт;

Процедура ВыполнитьРегламентноеЗадание() Экспорт 
	ПараметрыФормированияСЗ = ПараметрыФормированияСЗ();
	Для Каждого СтрокаП Из ПараметрыФормированияСЗ Цикл 
		Параметры = ЗаполнитьПараметрыОбработкиСогласноОснованию(СтрокаП.ПараметрФормированияСЗ, СтрокаП);	
		Если Не Параметры.Запускать Тогда 
			Возврат;
		КонецЕсли;
		
		ЗаполнитьТаблицы(Параметры);
		СоздатьДокументыСЗ(Параметры);
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьДокументыСЗ(Параметры) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Структура = НайтиСлужебныеЗаданияИРТУ(Параметры);	
	СлужебныеЗадания = Структура.СлужебныеЗадания;
	ТаблицаРеализаций = Структура.ТаблицаРеализаций;
		
	Если СлужебныеЗадания.Количество() = 0 Тогда 
		ДокСЗ = Документы.СлужебноеЗадание.СоздатьДокумент();
		ДокСЗ.Дата = ТекущаяДата();
		ДокСЗ.МаршрутДоставки = Параметры.МаршрутДоставки;
		ДокСЗ.ТипДоставки = Параметры.ТипДоставки;
		ДокСЗ.Водитель = Параметры.Водитель;
		ДокСЗ.ТранспортнаяКомпания = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокСЗ.Водитель,"ТранспортнаяКомпания");
		ДокСЗ.Ответственный = ПолныеПрава.ТекущийПользователь();
		ДокСЗ.флДопЗадание = Параметры.Дополнительное;
		ДокСЗ.Склад = Параметры.Склад;
	ИначеЕсли Параметры.Довыписка Тогда 
		ДокСЗ = СлужебныеЗадания.Получить(0).ПолучитьОбъект();
	КонецЕсли;
	ДокСЗ.СтатусДокумента = Справочники.СтатусыДокументов.СлужебноеЗаданиеИдетСборка;
	
	
	Если Параметры.Свойство("Основание") Тогда 
		ДеньНедели = ДеньНедели(Дата);
		ПараметрыОснования = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Параметры.Основание,"ВремяЗапуска" + СокрлП(ДеньНедели) + ",ВремяНачалаУпаковки" + СокрлП(ДеньНедели) + ",ВремОкончанияДовыписки" + СокрлП(ДеньНедели) + ",ВремОтгрузки" + СокрлП(ДеньНедели));
		
		//ДокСЗ.ДатаСдачиЗадания	= Дата;
		//ДокСЗ.ВремяСдачиЗадания  = ПараметрыОснования["ВремяЗапуска" + СокрЛП(ДеньНедели)];
		//
		//ДокСЗ.ДатаНачалаУпаковки = Дата;
		//ДокСЗ.ВремяНачалаУпаковки  = ПараметрыОснования["ВремяНачалаУпаковки" + СокрЛП(ДеньНедели)];
		//
		//ДокСЗ.ДатаОкончанияДовыписки = Дата;
		//ДокСЗ.ВремяОкончанияДовыписки  = ПараметрыОснования["ВремОкончанияДовыписки" + СокрЛП(ДеньНедели)];
		//
		//ДокСЗ.ДатаОтгрузки = Дата;
		//ДокСЗ.ВремяОтгрузки  = ПараметрыОснования["ВремОтгрузки" + СокрЛП(ДеньНедели)];
		ДокСЗ.ДатаСдачиЗадания	= Параметры.ДатаЗапуска;
		ДокСЗ.ВремяСдачиЗадания  = Дата(1,1,1) + 60*60*Час(Параметры.ДатаЗапуска) + 60*Минута(Параметры.ДатаЗапуска) + Секунда(Параметры.ДатаЗапуска);
		
		ДокСЗ.ДатаНачалаУпаковки = Параметры.ДатаНачалаУпаковки;
		ДокСЗ.ВремяНачалаУпаковки  =  Дата(1,1,1) + 60*60*Час(Параметры.ДатаНачалаУпаковки) + 60*Минута(Параметры.ДатаНачалаУпаковки) + Секунда(Параметры.ДатаНачалаУпаковки);
		
		ДокСЗ.ДатаОкончанияДовыписки = Параметры.ДатаОкончания;
		ДокСЗ.ВремяОкончанияДовыписки  = Дата(1,1,1) + 60*60*Час(Параметры.ДатаОкончания) + 60*Минута(Параметры.ДатаОкончания) + Секунда(Параметры.ДатаОкончания);
		
		ДокСЗ.ДатаОтгрузки = Параметры.ДатаОтгрузки;
		ДокСЗ.ВремяОтгрузки  = Дата(1,1,1) + 60*60*Час(Параметры.ДатаОтгрузки) + 60*Минута(Параметры.ДатаОтгрузки) + Секунда(Параметры.ДатаОтгрузки);
		
		ДокСЗ.Основание = Параметры.Основание;
	Иначе
		ДокСЗ.ДатаОтгрузки = Дата(Год(Параметры.ДатаОтгрузки), Месяц(Параметры.ДатаОтгрузки), День(Параметры.ДатаОтгрузки), 0, 0, 0) ;
		ДокСЗ.ВремяОтгрузки  = Дата(1, 1, 1, Час(Параметры.ДатаОтгрузки), Минута(Параметры.ДатаОтгрузки), Секунда(Параметры.ДатаОтгрузки)) ;
	КонецЕсли;
		
	ДокСЗ.Организация = Константы.ОрганизацияПоУмолчаниюБезнал.Получить();
	ДокСЗ.Филиал = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСЗ.Склад, "Филиал");
	
	//Удаляем нулевые строки
	Строки = Товары.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТЧ Из Строки Цикл 
		Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	//Питерские выписываются первыми
	Покупатели.Сортировать("ПокупательИзДрБазы Убыв");
	
	ИспользоватьРазделениеРТУПоДатеОплаты = ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ИспользоватьРазделениеРТУПоДатеОплаты");	
	
	СтрокаОтбораБезДатыОплаты = "Склад,ДоговорКонтрагента,МаршрутДоставки";
	СтрокаОтбора = СтрокаОтбораБезДатыОплаты+?(ИспользоватьРазделениеРТУПоДатеОплаты, ",ДатаОплаты", "");
	
	Для Каждого СтрокаП Из Покупатели Цикл 
		Строки = Товары.НайтиСтроки(Новый Структура("Контрагент", СтрокаП.Контрагент));
		Если Строки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ТоварыКонтрагента = Товары.Скопировать(Строки);
				
		ВремТаблица = ТоварыКонтрагента.Скопировать(, СтрокаОтбора);
		
		ВремТаблица.Свернуть(СтрокаОтбора);
		Для Каждого СтрокаТЧ Из ВремТаблица Цикл 
			Отбор = Новый Структура(СтрокаОтбора);
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			
			ОтборБезДатыОплаты = Новый Структура(СтрокаОтбора);
			ЗаполнитьЗначенияСвойств(ОтборБезДатыОплаты, СтрокаТЧ);
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); //Для того чтобы рту попадало в сз сразу
			
			Если Параметры.Довыписка Тогда
				
				Если Справочники.ДоговорыКонтрагентов.ЕстьОсобыеУсловияОтсрочкиПоДоговору(СтрокаТЧ.ДоговорКонтрагента) Тогда
					//Если по договору заданы особые условия отсрочки, то создаем новый документ, тк мы не можем определить в какую РТУ пихать (в них нет даты оплаты)
					ДокументРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Иначе

					СтрокиР = ТаблицаРеализаций.НайтиСтроки(ОтборБезДатыОплаты);
					Если СтрокиР.Количество() = 0 Тогда
						ДокументРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
					Иначе
						Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокиР.Получить(0).Реализация, "Проведен") Тогда 
							Продолжить;
						КонецЕсли;
						ДокументРеализация = СтрокиР.Получить(0).Реализация.ПолучитьОбъект(); 
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДокументРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			КонецЕсли;
			
			ДокументРеализация.Дата = Дата;
			
			Если ДокументРеализация.ЭтоНовый() Тогда 
				ЗаполнитьЗначенияСвойств(ДокументРеализация, СтрокаТЧ);
			КонецЕсли;
			
			ДокументРеализация.Контрагент = СтрокаП.Контрагент;
			ДокументРеализация.ТорговаяТочка = СтрокаП.Контрагент.ОсновнаяТорговаяТочка;
			ДокументРеализация.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета");
			ДокументРеализация.ТипДоставки = Параметры.ТипДоставки;
			ДокументРеализация.КурсВзаиморасчетов = 1;      
			ДокументРеализация.КратностьВзаиморасчетов = 1;  
			ДокументРеализация.ДатаДоставки = Дата(Год(ДокСЗ.ДатаОтгрузки), Месяц(ДокСЗ.ДатаОтгрузки), День(ДокСЗ.ДатаОтгрузки), Час(ДокСЗ.ВремяОтгрузки), Минута(ДокСЗ.ВремяОтгрузки), Секунда(ДокСЗ.ВремяОтгрузки));
		    ДокументРеализация.Организация = ДокументРеализация.ДоговорКонтрагента.Организация;
			ДокументРеализация.БанковскийСчетОрганизации = Справочники.ДоговорыКонтрагентов.БанковскийСчетПоДоговору(ДокументРеализация.ДоговорКонтрагента); 
			ДокументРеализация.БанковскийСчет = ДокументРеализация.БанковскийСчетОрганизации; 
			ДокументРеализация.УчитыватьНДС = ДокументРеализация.Организация.УчитыватьНДС;
			ДокументРеализация.СуммаВключаетНДС = Истина;
			ДокументРеализация.Ответственный = ПолныеПрава.ТекущийПользователь();
			ДокументРеализация.Филиал = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализация.Склад, "Филиал");
			ДокументРеализация.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка;
			
			Если ЗначениеЗаполнено(ДокументРеализация.ТорговаяТочка) Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ТорговаяТочка", ДокументРеализация.ТорговаяТочка);
				Запрос.УстановитьПараметр("ВидМенеджера", Перечисления.ВидыМенеджеров.Продажи);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Р.Менеджер
				|ИЗ
				|	РегистрСведений.МенеджерыТорговыхТочек.СрезПоследних(
				|			,
				|			ТорговаяТочка = &ТорговаяТочка
				|				И ВидМенеджера = &ВидМенеджера) КАК Р";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() тогда
					ДокументРеализация.Менеджер = Выборка.Менеджер;
				КонецЕсли;
				
			КонецЕсли;
			
			мКлючСвязи = 1;
			ВремТаблица2 = ДокументРеализация.Товары.Выгрузить(, "КлючСвязи");
			ВремТаблица2.Сортировать("КлючСвязи Убыв");
			Если ВремТаблица2.Количество() > 0 Тогда 
				мКлючСвязи = ВремТаблица2.Получить(0).КлючСвязи + 1;
			КонецЕсли;
			
			СтрокиТоваров = ТоварыКонтрагента.НайтиСтроки(Отбор);
			Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл 
				НоваяСтрока = ДокументРеализация.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
				
				Если Не ДокументРеализация.УчитыватьНДС Тогда 
					НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;	
				КонецЕсли;
				
				НоваяСтрока.КоличествоПлан = НоваяСтрока.Количество;
				НоваяСтрока.КлючСвязи = мКлючСвязи;
				мКлючСвязи = мКлючСвязи + 1;
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				
				ОкруглениеДо10Рублей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПолныеПрава.ТекущийПользователь(), "ОкруглениеДо10Рублей");
				РежимОкругленияПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПолныеПрава.ТекущийПользователь(), "ОкруглятьЦеныВЗаявкахИРеализациях"); 
				
				Если ОкруглениеДо10Рублей Тогда 
					НоваяСтрока.Сумма = Окр(НоваяСтрока.Сумма, -1);
					ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ДокументРеализация, ПолныеПрава.ТекущийПользователь(), Ложь, Истина, Ложь, Ложь, "Товары");
				ИначеЕсли Не РежимОкругленияПользователя = 0 Тогда  	
					НоваяСтрока.Сумма = Окр(НоваяСтрока.Сумма, РежимОкругленияПользователя);
						ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ДокументРеализация, ПолныеПрава.ТекущийПользователь(), Ложь, Истина, Ложь, Ложь, "Товары");
				КонецЕсли;
				
				//После округления сумма все равно должна = количество * цена 
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокументРеализация);
				
			КонецЦикла;
			
			Попытка 
				
				ДокументРеализация.ДополнительныеСвойства.Вставить("НеРегистрироватьВОбменСТоплог");  //Регистрация после создания служебного задания
				
				//Если СтрокаП.ДолгПревышаетРазрешенный Тогда
				//	ДокументРеализация.Записать(РежимЗаписиДокумента.Запись); //временно отключено Валиахметов А.А. 05.06.2018
				//Иначе
					ДокументРеализация.Записать(РежимЗаписиДокумента.Проведение);
				//КонецЕсли;
				
				СтрокаР = ДокСЗ.Покупатели.Найти(ДокументРеализация.Ссылка, "Реализация");
				Если СтрокаР = Неопределено Тогда 
					СтрокаР = ДокСЗ.Покупатели.Добавить();
				КонецЕсли;
				СтрокаР.Реализация = ДокументРеализация.Ссылка;
				СтрокаР.ТорговаяТочка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаР.Реализация, "ТорговаяТочка");
				СтрокаР.Регион = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаР.ТорговаяТочка,"Регион");
				СтрокаР.ОрганизацияОплаты = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаР.Реализация,"ДоговорКонтрагента.Организация");
				
				ДокСЗ.Записать();
				
				//Регистрируем в обмен
				Узел = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 3);
		 		ПланыОбмена.ЗарегистрироватьИзменения(Узел, ДокументРеализация.Ссылка);
				
				ЗафиксироватьТранзакцию();
			Исключение
				
				ОписаниеОшибки = ОписаниеОшибки();
				Сообщить(ОписаниеОшибки);
				ОтменитьТранзакцию();
				
				Сообщить("Не удалось создать РТУ на контрагента " + СтрокаТЧ.ДоговорКонтрагента.Владелец);
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Если Не Параметры.Довыписка Тогда 
		Для Каждого СтрокаД Из ЭтотОбъект.ДокументыДобавляемые Цикл 
			СтрокаР = ДокСЗ.Покупатели.Найти(ДокументРеализация.Ссылка, "Реализация");
			Если СтрокаР <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаР = ДокСЗ.Покупатели.Добавить();
			СтрокаР.Реализация = СтрокаД.Документ;
			СтрокаР.ТорговаяТочка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаР.Реализация, "ТорговаяТочка");
			СтрокаР.Регион = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаР.ТорговаяТочка,"Регион");
			СтрокаР.ОрганизацияОплаты = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаР.Реализация,"ДоговорКонтрагента.Организация");
		КонецЦикла;
	КонецЕсли;
	
	ДокСЗ.Авто = Параметры.Довыписка;
	Если ДокСЗ.Покупатели.Количество() > 0 Тогда 
		ДокСЗ.Записать(РежимЗаписиДокумента.Запись);
		Параметры.Вставить("СлужебноеЗадание", ДокСЗ.Ссылка);
		
		//// Регистрация в ТопЛог
		//
		//Узел = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 3);
		//Если ЗначениеЗаполнено(Узел) Тогда 
		//	Для Каждого СтрокаТЧ Из ДокСЗ.Покупатели Цикл 
		//		Если СтрокаТЧ.Реализация.Проведен Тогда 
		//			ПланыОбмена.ЗарегистрироватьИзменения(Узел, СтрокаТЧ.Реализация);
		//		КонецЕсли;
		//	КонецЦикла;
		//	Сообщить("Документы зарегистрированы в обмене с Топ Лог");
		//Иначе
		//	Сообщить("Не найден узел обмена для выгрузки в Топ Лог");
		//КонецЕсли;
		
	Иначе
		Сообщить("Нет данных для создания служебного задания");
	КонецЕсли;
	Если Параметры.Довыписка Тогда 						
		НаборЗаписи  = РегистрыСведений.ДатыФормированияСлужебныхЗаданий.СоздатьНаборЗаписей();
		
		НаборЗаписи.Отбор.ПараметрФормированияСЗ.Установить(Параметры.Основание);
		
		Наб = НаборЗаписи.Добавить();
		Наб.ПараметрФормированияСЗ = Параметры.Основание;
		Наб.ДатаФормирования = Дата;
		
		НаборЗаписи.Записать();
	КонецЕсли;
	
	
	//ЗафиксироватьТранзакцию();
	
	Товары.Очистить();
	Покупатели.Очистить();
	ИсключенныеПокупатели.Очистить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//Код взят у Пушкина Дениса
Функция ПараметрыФормированияСЗ() 
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ  *
	////|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Ссылка КАК Задание_Ссылка,
	////|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Склад КАК Задание_Склад,
	////|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.МаршрутДоставки КАК Задание_МаршрутДоставки,
	////|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Водитель КАК Задание_Водитель,
	////|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ТипДоставки КАК Задание_ТипДоставки,
	////|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ТипДоставки КАК Задание_флДополнительнаяДоставка
	////|ПОМЕСТИТЬ АктуальныеЗадания
	//|ИЗ
	//|	РегистрСведений.ДатыФормированияСлужебныхЗаданий КАК ДатыФормированияСлужебныхЗаданий
	//
	//|ГДЕ
	////  список параметров берем из регистра, куда пишутся строки при записи/перезаписи соответствющего элемента справочника,
	////  т.е. регистр содержит список ссылок на все существующие задания в привязке к дате обработки
	////  в случае, если формирования СЗ по этому заданию ранее не осущетсвлялось, дата будет пустой 1,1,1,0,0,0
	//
	////  проверим, подходят ли параметры по дате/времени
	//
	////  подходит ли по дню недели
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели" + СокрЛП(ДеньНедели(Дата)) + " = ИСТИНА
	////|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели1 = ИСТИНА
	//
	////  чтобы запуск состоялся не раньше времени, указанного в спр.параметры запуска
	//|	И &ДтТек >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска" + СокрЛП(ДеньНедели(Дата)) + ", МИНУТА))
	////|	И &ДтТек >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска1, МИНУТА))
	//
	////  чтобы с момента последнего успешного запуска/обработки задания прошло не менее, например, 30ти минут
	//|	И РАЗНОСТЬДАТ(ДатыФормированияСлужебныхЗаданий.ДатаФормирования, &ДтТек, МИНУТА) > ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Интервал
	//|	И ДатыФормированияСлужебныхЗаданий.ДатаФормирования < &ДтТек
	//
	////  чтобы запуск состоялся не позже времени, указанного в спр.параметры запуска
	//|	И &ДтТек <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки" + СокрЛП(ДеньНедели(Дата)) + ", МИНУТА))
	//
	//
	////1с7:
	//// проверка на текущее время - глупо создавать документ, если время отгрузки уже позади
	////	//Если ДатаПолучения = локТекущаяДата Тогда
	////	//	// значит время не может быть меньше текущего времени
	////	//	текЧас = "";
	////	//	текМин = "";
	////	//	ТекущееВремя(текЧас, текМин);
	////	//	Если (Часы + Минуты/60) < (текЧас + текМин/60) Тогда
	////	//		Предупреждение("Задание не создано!
	////	//		|Указано время отгрузки меньше текущего и дата отгрузки - ""Сегодня""!
	////	//		|Или увеличьте время, или увеличьте дату отгрузки!", 10);
	////	//		Возврат 0;
	////	//	КонецЕсли;
	////	//КонецЕсли;
	//
	////	необходимые условия
	//|	И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.АвтоСозданиеЗаданий = ИСТИНА
	//|	И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ПометкаУдаления = ЛОЖЬ
	//
	//|УПОРЯДОЧИТЬ ПО
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.МаршрутДоставки,   
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Склад
	//|";
	//
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ,
	//               |	ДатыФормированияСлужебныхЗаданий.ДатаФормирования,
	//               |	РАЗНОСТЬДАТ(ДатыФормированияСлужебныхЗаданий.ДатаФормирования, ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки4, МИНУТА)), МИНУТА) <= ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Интервал КАК Поле1,
	//               |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Интервал,
	//               |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки" + СокрЛП(ДеньНедели(Дата)) + ", МИНУТА) - 1) КАК Поле2
	//               |ИЗ
	//               |	РегистрСведений.ДатыФормированияСлужебныхЗаданий КАК ДатыФормированияСлужебныхЗаданий
	//               |ГДЕ
	//               |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели4 = ИСТИНА
	//			   //запуск после даты запуска
	//			   |	И &ДтТек >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска4, МИНУТА))
	//			   //если после прошлого формирования прошел интервал и время окончания еще не истекло
	//			   |	И (РАЗНОСТЬДАТ(ДатыФормированияСлужебныхЗаданий.ДатаФормирования, &ДтТек, МИНУТА) > ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Интервал
	//               |				И &ДтТек <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки4, МИНУТА))
	//			            	//последний запуск, если время интервала не прошло, но подоошло время окончания 
	//			   |			ИЛИ РАЗНОСТЬДАТ(ДатыФормированияСлужебныхЗаданий.ДатаФормирования, ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки4, МИНУТА)), МИНУТА) <= ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Интервал
	//               |				И ДатыФормированияСлужебныхЗаданий.ДатаФормирования < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки4, МИНУТА))
	//               |				И (&ДтТек МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки4, МИНУТА) - 1) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки4, МИНУТА) + 2))
	//			              //если время запуска = время окончания, чтобы запустилось хотя бы раз
	//			   |			ИЛИ ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска4 = ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки4
	//               |				И ДатыФормированияСлужебныхЗаданий.ДатаФормирования < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки4, МИНУТА))
	//               |				И (&ДтТек МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки4, МИНУТА) - 1) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки4, МИНУТА) + 2)))
	//               |	И ДатыФормированияСлужебныхЗаданий.ДатаФормирования < &ДтТек
	//               |	И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.АвтоСозданиеЗаданий = ИСТИНА
	//               |	И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ПометкаУдаления = ЛОЖЬ
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.МаршрутДоставки,
	//               |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Склад"
	//Запрос.УстановитьПараметр("ДтТек", Дата);
	//
	ДН = ДеньНедели(Дата);
	Если ДН = 1 Тогда 
		ДнПред = 7;
	Иначе
		ДнПред = Дн - 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ,
	                |	ДатыФормированияСлужебныхЗаданий.ДатаФормирования,
	                |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели1 КАК ДниНедели1,
	                |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели2 КАК ДниНедели2,
	                |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели2
	                |		И &ДтТек >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска2, МИНУТА)) КАК УсловиеЭтогоДня,
	                |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели1
	                |		И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки1 < ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска1
	                |		И &ДтТек < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, НЕДЕЛЯ), МИНУТА, (&Дн - 1) * 24 * 60 + РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки1, МИНУТА)) КАК УсловиеПредДня
	                |ПОМЕСТИТЬ вт
	                |ИЗ
	                |	РегистрСведений.ДатыФормированияСлужебныхЗаданий КАК ДатыФормированияСлужебныхЗаданий
	                |ГДЕ
	                |	(ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели2
	                |				И &ДтТек >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска2, МИНУТА))
	                |			ИЛИ ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели1
	                |				И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки1 < ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска1
	                |				И &ДтТек < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, НЕДЕЛЯ), МИНУТА, (&Дн - 1) * 24 * 60 + РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки1, МИНУТА)))
	                |	И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.АвтоСозданиеЗаданий
	                |	И НЕ ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ПометкаУдаления
	                |	И ДатыФормированияСлужебныхЗаданий.ДатаФормирования < &ДтТек
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	вт.ПараметрФормированияСЗ,
	                |	вт.ДатаФормирования,
	                |	вт.УсловиеЭтогоДня,
	                |	вт.УсловиеПредДня,
	                |	ВЫБОР
	                |		КОГДА вт.УсловиеПредДня
	                |			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, НЕДЕЛЯ), МИНУТА, (&Дн - 2) * 24 * 60 + РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), вт.ПараметрФормированияСЗ.ВремяЗапуска1, МИНУТА))
	                |		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, НЕДЕЛЯ), МИНУТА, (&Дн - 1) * 24 * 60 + РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), вт.ПараметрФормированияСЗ.ВремяЗапуска2, МИНУТА))
	                |	КОНЕЦ КАК ДатаЗапуска,
	                |	ВЫБОР
	                |		КОГДА вт.УсловиеПредДня
	                |			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, НЕДЕЛЯ), МИНУТА, (&Дн - 1) * 24 * 60 + РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), вт.ПараметрФормированияСЗ.ВремОкончанияДовыписки1, МИНУТА))
	                |		ИНАЧЕ ВЫБОР
	                |				КОГДА вт.ПараметрФормированияСЗ.ВремОкончанияДовыписки2 < вт.ПараметрФормированияСЗ.ВремяЗапуска2
	                |					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, НЕДЕЛЯ), МИНУТА, &Дн * 24 * 60 + РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), вт.ПараметрФормированияСЗ.ВремОкончанияДовыписки2, МИНУТА))
	                |				ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, НЕДЕЛЯ), МИНУТА, (&Дн - 1) * 24 * 60 + РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), вт.ПараметрФормированияСЗ.ВремОкончанияДовыписки2, МИНУТА))
	                |			КОНЕЦ
	                |	КОНЕЦ КАК ДатаОкончания
	                |ПОМЕСТИТЬ ДатыФормированияСлужебныхЗаданий
	                |ИЗ
	                |	вт КАК вт
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ,
	                |	ДатыФормированияСлужебныхЗаданий.ДатаФормирования,
	                |	ДатыФормированияСлужебныхЗаданий.ДатаЗапуска,
	                |	ДатыФормированияСлужебныхЗаданий.ДатаОкончания,
	                |	ВЫБОР
	                |		КОГДА ДатыФормированияСлужебныхЗаданий.УсловиеПредДня
	                |			ТОГДА &ДнПред
	                |		ИНАЧЕ &Дн
	                |	КОНЕЦ КАК День
	                |ИЗ
	                |	ДатыФормированияСлужебныхЗаданий КАК ДатыФормированияСлужебныхЗаданий
	                |ГДЕ
	                |	ДатыФормированияСлужебныхЗаданий.ДатаЗапуска <= &ДтТек
	                |	И (РАЗНОСТЬДАТ(ДатыФормированияСлужебныхЗаданий.ДатаФормирования, &ДтТек, МИНУТА) > ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Интервал
	                |				И &ДтТек <= ДатыФормированияСлужебныхЗаданий.ДатаОкончания
	                |			ИЛИ РАЗНОСТЬДАТ(ДатыФормированияСлужебныхЗаданий.ДатаФормирования, ДатыФормированияСлужебныхЗаданий.ДатаОкончания, МИНУТА) <= ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Интервал
	                |				И ДатыФормированияСлужебныхЗаданий.ДатаФормирования < ДатыФормированияСлужебныхЗаданий.ДатаОкончания
	                |				И (&ДтТек МЕЖДУ ДОБАВИТЬКДАТЕ(ДатыФормированияСлужебныхЗаданий.ДатаОкончания, МИНУТА, -1) И ДОБАВИТЬКДАТЕ(ДатыФормированияСлужебныхЗаданий.ДатаОкончания, МИНУТА, 2)
	                |					ИЛИ ДатыФормированияСлужебныхЗаданий.ДатаЗапуска = ДатыФормированияСлужебныхЗаданий.ДатаОкончания
	                |						И ДатыФормированияСлужебныхЗаданий.ДатаФормирования < ДатыФормированияСлужебныхЗаданий.ДатаОкончания
	                |						И (&ДтТек МЕЖДУ ДОБАВИТЬКДАТЕ(ДатыФормированияСлужебныхЗаданий.ДатаОкончания, МИНУТА, -1) И ДОБАВИТЬКДАТЕ(ДатыФормированияСлужебныхЗаданий.ДатаОкончания, МИНУТА, 2))))
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.МаршрутДоставки,
	                |	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Склад";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДниНедели1", "ДниНедели%");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДниНедели2", "ДниНедели" + Строка(Дн));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДниНедели%", "ДниНедели" + Строка(ДнПред));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВремяЗапуска1", "ВремяЗапуска%");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВремяЗапуска2", "ВремяЗапуска" + Строка(Дн));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВремяЗапуска%", "ВремяЗапуска" + Строка(ДнПред));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВремОкончанияДовыписки1", "ВремОкончанияДовыписки%");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВремОкончанияДовыписки2", "ВремОкончанияДовыписки" + Строка(Дн));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВремОкончанияДовыписки%", "ВремОкончанияДовыписки" + Строка(ДнПред));
	
	Запрос.УстановитьПараметр("Дн", Дн);
	Запрос.УстановитьПараметр("ДнПред", ДнПред);
	
	Запрос.УстановитьПараметр("ДтТек", Дата);
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("ДатаНачалаУпаковки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Таблица.Колонки.Добавить("ДатаОтгрузки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Для Каждого СтрокаТЧ Из Таблица Цикл 
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.ПараметрФормированияСЗ, "ВремяНачалаУпаковки" + СтрокаТЧ.День  + ",ВремОтгрузки" + СтрокаТЧ.День);
		ВремяНачалаУпаковки = Реквизиты["ВремяНачалаУпаковки" + СтрокаТЧ.День];
		ВремОтгрузки = Реквизиты["ВремОтгрузки" + СтрокаТЧ.День]; 
		СтрокаТЧ.ДатаНачалаУпаковки = НачалоДня(СтрокаТЧ.ДатаЗапуска) + 60*60*Час(ВремяНачалаУпаковки) + 60*Минута(ВремяНачалаУпаковки) + Секунда(ВремяНачалаУпаковки);
		Если СтрокаТЧ.ДатаНачалаУпаковки < СтрокаТЧ.ДатаЗапуска Тогда 
			СтрокаТЧ.ДатаНачалаУпаковки = СтрокаТЧ.ДатаНачалаУпаковки +24*60*60;
		КонецЕсли;
		СтрокаТЧ.ДатаОтгрузки = НачалоДня(СтрокаТЧ.ДатаЗапуска) + 60*60*Час(ВремОтгрузки) + 60*Минута(ВремОтгрузки) + Секунда(ВремОтгрузки);
		Если СтрокаТЧ.ДатаОтгрузки < СтрокаТЧ.ДатаЗапуска Тогда 
			СтрокаТЧ.ДатаОтгрузки = СтрокаТЧ.ДатаОтгрузки +24*60*60;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

Функция ЗаполнитьПараметрыОбработкиСогласноОснованию(ПараметрФормированияСЗ, СтрокаП) экспорт
	Параметры = Новый Структура;
		
	ТекДеньНедели = ДеньНедели(Дата);
	
	ПараметрыОснования = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПараметрФормированияСЗ,"Код,Склад,МаршрутДоставки,Водитель,ТипДоставки,флДополнительнаяДоставка,ДниНедели,ДниНедели" + ТекДеньНедели + ",флНеУдалятьМинСум" + ТекДеньНедели+ ",ВремОтгрузки" + ТекДеньНедели);
	
	пРасписание = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыОснования.ДниНедели,";");
	Если пРасписание[ТекДеньНедели - 1] = 0 тогда 
		Параметры.Вставить("Запускать", Ложь);
	Иначе
		Параметры.Вставить("Запускать", Истина);
	КонецЕсли;
	
	//Для Каждого КлючЗначение Из ПараметрыОснования Цикл 
	//	Параметры.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	//КонецЦикла;
	//
	Параметры.Вставить("Склад", ПараметрыОснования.Склад);
	Параметры.Вставить("МаршрутДоставки", ПараметрыОснования.МаршрутДоставки);
	Параметры.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Параметры.Вставить("ОтборМаршрутДоставки", 0);
	Параметры.Вставить("НеУдалятьМинСум", ПараметрыОснования["флНеУдалятьМинСум" + ТекДеньНедели]);
	Параметры.Вставить("СнижатьДолгКонтрагентаПоБезналРасчету", 20);
	Параметры.Вставить("МинимальнаяПроцентНаценки", 0);
	Параметры.Вставить("НеУчитыватьПокупателейНеработающихВВыходные", Ложь);
	Параметры.Вставить("ТолькоПокупателиДополнительнаяДоставка", ПараметрыОснования.флДополнительнаяДоставка);
	Параметры.Вставить("НеИскать", Истина);
	Параметры.Вставить("ГлубинаДней", 0);
	Параметры.Вставить("Водитель", ПараметрыОснования.Водитель);
	Параметры.Вставить("Дополнительное", Ложь);
	Параметры.Вставить("ТипДоставки", ПараметрыОснования.ТипДоставки);
	Параметры.Вставить("Довыписка", Истина);
	Параметры.Вставить("Основание", ПараметрФормированияСЗ);
	
	
	//лВремОтгрузки = ПараметрыОснования["ВремОтгрузки" + ТекДеньНедели];
	
	//ДатаОтгрузки = НачалоДня(ТекущаяДата()) + Час(лВремОтгрузки)*60*60 + Минута(лВремОтгрузки)*60 + Секунда(лВремОтгрузки);	
	//Параметры.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	Параметры.Вставить("ДатаЗапуска", СтрокаП.ДатаЗапуска);
	Параметры.Вставить("ДатаНачалаУпаковки", СтрокаП.ДатаНачалаУпаковки);
	Параметры.Вставить("ДатаОтгрузки", СтрокаП.ДатаОтгрузки);
	Параметры.Вставить("ДатаОкончания", СтрокаП.ДатаОкончания);
	//Параметры.Вставить("ВыбранМаршрутКонтрагента", Ложь);
	//Параметры.Вставить("МаршрутКонтрагента", Справочники.МаршрутыДоставки.ПустаяСсылка());

	Возврат Параметры;
	
	

КонецФункции
// Конец Код взят у Пушкина Дениса

Процедура ЗаполнитьТаблицы(Параметры) Экспорт 
	
	Дата = ТекущаяДата();
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РезервыТоваровОстатки.Номенклатура,
	               |	РезервыТоваровОстатки.Склад,
	               |	РезервыТоваровОстатки.Качество,
	               |	РезервыТоваровОстатки.СтрокаЗаявки,
	               |	РезервыТоваровОстатки.СтрокаЗаявки.Заявка КАК ЗаявкаПокупателя,
	               |	ВЫБОР
	               |		КОГДА &ОтборМаршрутДоставкиГруппа
	               |			ТОГДА ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка.МаршрутДоставки, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка.МаршрутДоставки)
	               |		ИНАЧЕ &МаршрутДоставки
	               |	КОНЕЦ КАК МаршрутДоставки,
	               |	(ВЫБОР
	               |			КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |				ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |			ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |		КОНЕЦ).Блокировка_Отгрузок_Дата < &ТекущаяДата
	               |		И (ВЫБОР
	               |			КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |				ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |			ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |		КОНЕЦ).Блокировка_Отгрузок_Дата <> ДАТАВРЕМЯ(1, 1, 1) КАК БлокировкаКонтрагента,
	               |	ВЫБОР
	               |		КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента.ДоговорПриостановлен ЕСТЬ NULL
	               |			ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ДоговорКонтрагента.ДоговорПриостановлен
	               |		ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента.ДоговорПриостановлен
	               |	КОНЕЦ КАК БлокировкаДоговораКонтрагента,
	               |	ЕСТЬNULL((ВЫБОР
	               |				КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент ЕСТЬ NULL
	               |					ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент
	               |				ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент
	               |			КОНЕЦ).Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(3999, 12, 31)) < &ТекущаяДата
	               |		И ЕСТЬNULL((ВЫБОР
	               |				КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент ЕСТЬ NULL
	               |					ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент
	               |				ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент
	               |			КОНЕЦ).Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(3999, 12, 31)) <> ДАТАВРЕМЯ(1, 1, 1) КАК БлокировкаГолКонтрагента,
	               |	ЕСТЬNULL((ВЫБОР
	               |			КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента ЕСТЬ NULL
	               |				ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента
	               |			ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента
	               |		КОНЕЦ).ДоговорПриостановлен, ЛОЖЬ) КАК БлокировкаДоговораГолКонтрагента,
	               |	РезервыТоваровОстатки.КоличествоОстаток КАК Количество,
	               |	ВЫБОР
	               |		КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка = ЗНАЧЕНИЕ(Документ.КорректировкаЗаявкиПокупателя.ПустаяСсылка)
	               |			ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка
	               |		ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка
	               |	КОНЕЦ КАК ПоследняяКорректировка,
	               |	ВЫБОР
	               |		КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |			ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |		ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |	КОНЕЦ КАК Контрагент,
	               |	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	               |	(ВЫБОР
	               |		КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |			ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |		ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |	КОНЕЦ).ОсновнаяТорговаяТочка КАК ТорговаяТочка,
	               |	(ВЫБОР
	               |		КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |			ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |		ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |	КОНЕЦ).ОсновнаяТорговаяТочка.VIP КАК VIP,
	               |	РезервыТоваровОстатки.Номенклатура.Артикул КАК Артикул,
	               |	РезервыТоваровОстатки.Номенклатура.Изготовитель КАК Изготовитель,
	               |	РезервыТоваровОстатки.Склад.Бонусный,
	               |	РезервыТоваровОстатки.Склад.Сувенирный,
	               |	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ЮрФизЛицо, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ЮрФизЛицо) = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	               |			И ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента.ВидОплаты, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ДоговорКонтрагента.ВидОплаты) = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные)
	               |		ИЛИ ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента.НеКонтролироватьЛимит, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ДоговорКонтрагента.НеКонтролироватьЛимит)
	               |		ИЛИ ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Организация.НеКонтролироватьКредит, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Организация.НеКонтролироватьКредит) КАК НеКонтролироватьКредит,
	               |	РезервыТоваровОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	РезервыТоваровОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	               |	РезервыТоваровОстатки.СтрокаЗаявки.IDSite КАК IDSite,
	               |	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.БлокировкаОтгрузки, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.БлокировкаОтгрузки) КАК БлокировкаОтгрузки,
	               |	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ПокупательИзДрБазы, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ПокупательИзДрБазы) КАК ПокупательИзДрБазы
	               |ПОМЕСТИТЬ втРезервы
	               |ИЗ
	               |	РегистрНакопления.РезервыТоваров.Остатки(
	               |			,
	               |			ВЫБОР
	               |					КОГДА &ОтборПоФизСкладу
	               |						ТОГДА Склад.ФизическийСклад = &Склад
	               |					ИНАЧЕ Склад = &Склад
	               |				КОНЕЦ
	               |				И НЕ Склад.Заблокирован
	               |				И ВЫБОР
	               |					КОГДА &ОтборМаршрутДоставки
	               |						ТОГДА (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки = &МаршрутДоставки
	               |								ИЛИ (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки2 = &МаршрутДоставки
	               |								ИЛИ (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки3 = &МаршрутДоставки
	               |					КОГДА &ОтборМаршрутДоставкиГруппа
	               |						ТОГДА (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки В ИЕРАРХИИ (&МаршрутДоставки)
	               |								ИЛИ (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки2 В ИЕРАРХИИ (&МаршрутДоставки)
	               |								ИЛИ (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки3 В ИЕРАРХИИ (&МаршрутДоставки)
	               |					ИНАЧЕ ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент, СтрокаЗаявки.Заявка.Контрагент) = &Контрагент
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &НеУчитыватьПокупателейНеработающихВВыходные
	               |						ТОГДА НЕ (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент, СтрокаЗаявки.Заявка.Контрагент)).РежРаботы_вВых
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &ТолькоПокупателиДополнительнаяДоставка
	               |						ТОГДА (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент, СтрокаЗаявки.Заявка.Контрагент)).ДополнительнаяДоставка
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК РезервыТоваровОстатки
	               |ГДЕ
	               |	РезервыТоваровОстатки.КоличествоОстаток > 0";
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("ОтборПоФизСкладу", Параметры.Склад <> Константы.СкладУцененногоТовара.Получить());
	
	Запрос.УстановитьПараметр("МаршрутДоставки", Параметры.МаршрутДоставки);
	Запрос.УстановитьПараметр("Контрагент", Параметры.Контрагент);
	Запрос.УстановитьПараметр("ОтборМаршрутДоставки", ?(Параметры.ОтборМаршрутДоставки = 0,Не Параметры.МаршрутДоставки.ЭтоГруппа, Ложь));
	Запрос.УстановитьПараметр("ОтборМаршрутДоставкиГруппа", ?(Параметры.ОтборМаршрутДоставки = 0,Параметры.МаршрутДоставки.ЭтоГруппа, Ложь));
	Запрос.УстановитьПараметр("НеУчитыватьПокупателейНеработающихВВыходные", Параметры.НеУчитыватьПокупателейНеработающихВВыходные);
	Запрос.УстановитьПараметр("ТолькоПокупателиДополнительнаяДоставка", Параметры.ТолькоПокупателиДополнительнаяДоставка);
	
	Запрос.Выполнить();
	
	ПодобратьПартииДляСПБ(МенеджерВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	втРезервы.ДоговорКонтрагента,
	               |	втРезервы.Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	               |	втРезервы.ДоговорКонтрагента.Организация КАК Организация,
	               |	втРезервы.ДоговорКонтрагента.ДоговорНаОферту КАК ДоговорНаОферту,
	               |	втРезервы.ДоговорКонтрагента.ВидОплаты КАК ВидОплаты,
	               |	втРезервы.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	               |ПОМЕСТИТЬ втДанныеПоГолКАГ
	               |ИЗ
	               |	втРезервы КАК втРезервы
	               |ГДЕ
	               |	втРезервы.Контрагент.ГоловнойКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И втРезервы.Контрагент <> втРезервы.Контрагент.ГоловнойКонтрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втДанныеПоГолКАГ.ДоговорКонтрагента,
	               |	МАКСИМУМ(ДоговорыКонтрагентов.Ссылка) КАК ДоговорГоловногоКонтрагента
	               |ПОМЕСТИТЬ втДанные1
	               |ИЗ
	               |	втДанныеПоГолКАГ КАК втДанныеПоГолКАГ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |		ПО втДанныеПоГолКАГ.ГоловнойКонтрагент = ДоговорыКонтрагентов.Владелец
	               |			И втДанныеПоГолКАГ.Организация = ДоговорыКонтрагентов.Организация
	               |			И втДанныеПоГолКАГ.ВидОплаты = ДоговорыКонтрагентов.ВидОплаты
	               |			И втДанныеПоГолКАГ.ВидДоговора = ДоговорыКонтрагентов.ВидДоговора
	               |			И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	               |			И (НЕ ДоговорыКонтрагентов.СлужебныйДоговор)
	               |			И втДанныеПоГолКАГ.ДоговорНаОферту = ДоговорыКонтрагентов.ДоговорНаОферту
	               |			И (НЕ ДоговорыКонтрагентов.ДоговорПриостановлен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втДанныеПоГолКАГ.ДоговорКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втДанныеПоГолКАГ.ДоговорКонтрагента,
	               |	МАКСИМУМ(ДоговорыКонтрагентов.Ссылка) КАК ДоговорГоловногоКонтрагента
	               |ПОМЕСТИТЬ втДанные2
	               |ИЗ
	               |	втДанныеПоГолКАГ КАК втДанныеПоГолКАГ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |		ПО втДанныеПоГолКАГ.ГоловнойКонтрагент = ДоговорыКонтрагентов.Владелец
	               |			И втДанныеПоГолКАГ.Организация = ДоговорыКонтрагентов.Организация
	               |			И втДанныеПоГолКАГ.ВидОплаты = ДоговорыКонтрагентов.ВидОплаты
	               |			И втДанныеПоГолКАГ.ВидДоговора = ДоговорыКонтрагентов.ВидДоговора
	               |			И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	               |			И (НЕ ДоговорыКонтрагентов.СлужебныйДоговор)
	               |			И (НЕ ДоговорыКонтрагентов.ДоговорПриостановлен)
	               |ГДЕ
	               |	НЕ втДанныеПоГолКАГ.ДоговорКонтрагента В
	               |				(ВЫБРАТЬ
	               |					втДанные1.ДоговорКонтрагента
	               |				ИЗ
	               |					втДанные1)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втДанныеПоГолКАГ.ДоговорКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ втДанныеПоГолКАГ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втДанные1.ДоговорКонтрагента,
	               |	втДанные1.ДоговорГоловногоКонтрагента
	               |ПОМЕСТИТЬ втДоговораГолКАГ
	               |ИЗ
	               |	втДанные1 КАК втДанные1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втДанные2.ДоговорКонтрагента,
	               |	втДанные2.ДоговорГоловногоКонтрагента
	               |ИЗ
	               |	втДанные2 КАК втДанные2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ втДанные1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ втДанные2
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаявкаПокупателяТовары.СтрокаЗаявки,
	               |	ЗаявкаПокупателяТовары.Цена КАК Цена,
	               |	ЗаявкаПокупателяТовары.КомментарийИзСайта,
	               |	НЕ ЗаявкаПокупателяТовары.Ссылка.УчитыватьНДС
	               |		ИЛИ ЗаявкаПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ЗаявкаПокупателяТовары.СтавкаНДС,
	               |	ЗаявкаПокупателяТовары.ПроцентСкидкиНаценки
	               |ПОМЕСТИТЬ втЦены
	               |ИЗ
	               |	Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
	               |ГДЕ
	               |	(ЗаявкаПокупателяТовары.Ссылка, ЗаявкаПокупателяТовары.СтрокаЗаявки) В
	               |			(ВЫБРАТЬ
	               |				втРезервы.ПоследняяКорректировка,
	               |				втРезервы.СтрокаЗаявки
	               |			ИЗ
	               |				втРезервы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки,
	               |	КорректировкаЗаявкиПокупателяТовары.Цена,
	               |	КорректировкаЗаявкиПокупателяТовары.КомментарийИзСайта,
	               |	НЕ КорректировкаЗаявкиПокупателяТовары.Ссылка.УчитыватьНДС
	               |		ИЛИ КорректировкаЗаявкиПокупателяТовары.Ссылка.СуммаВключаетНДС,
	               |	КорректировкаЗаявкиПокупателяТовары.СтавкаНДС,
	               |	КорректировкаЗаявкиПокупателяТовары.ПроцентСкидкиНаценки
	               |ИЗ
	               |	Документ.КорректировкаЗаявкиПокупателя.Товары КАК КорректировкаЗаявкиПокупателяТовары
	               |ГДЕ
	               |	(КорректировкаЗаявкиПокупателяТовары.Ссылка, КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки) В
	               |			(ВЫБРАТЬ
	               |				втРезервы.ПоследняяКорректировка,
	               |				втРезервы.СтрокаЗаявки
	               |			ИЗ
	               |				втРезервы)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец КАК Контрагент
	               |ПОМЕСТИТЬ втКонтрагентыСПросрочПлатежом
	               |ИЗ
	               |	РегистрНакопления.Взаиморасчеты.Остатки(
	               |			,
	               |			ДоговорКонтрагента.Владелец В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						втРезервы.Контрагент
	               |					ИЗ
	               |						втРезервы)
	               |				И ДокументРасчетов ССЫЛКА Документ.РеализацияТоваровУслуг
	               |				И КОНЕЦПЕРИОДА(ВЫРАЗИТЬ(ДокументРасчетов КАК Документ.РеализацияТоваровУслуг).ДатаОплаты, ДЕНЬ) < &ТекущаяДата) КАК ВзаиморасчетыОстатки
	               |ГДЕ
	               |	ВзаиморасчетыОстатки.СуммаУпрОстаток > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец КАК ГоловнойКонтрагент
	               |ПОМЕСТИТЬ втГоловныеКонтрагентыСПросрочПлатежом
	               |ИЗ
	               |	РегистрНакопления.Взаиморасчеты.Остатки(
	               |			,
	               |			ДоговорКонтрагента В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						втДоговораГолКАГ.ДоговорГоловногоКонтрагента
	               |					ИЗ
	               |						втДоговораГолКАГ)
	               |				И ДокументРасчетов ССЫЛКА Документ.РеализацияТоваровУслуг
	               |				И КОНЕЦПЕРИОДА(ВЫРАЗИТЬ(ДокументРасчетов КАК Документ.РеализацияТоваровУслуг).ДатаОплаты, ДЕНЬ) < &ТекущаяДата) КАК ВзаиморасчетыОстатки
	               |ГДЕ
	               |	ВзаиморасчетыОстатки.СуммаУпрОстаток > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец, ДепозитыКонтрагентовОстатки.ДоговорКонтрагента.Владелец) КАК Контрагент,
	               |	СУММА(ЕСТЬNULL(ВзаиморасчетыОстатки.СуммаУпрОстаток, 0) + ЕСТЬNULL(ДепозитыКонтрагентовОстатки.СуммаУпрОстаток, 0)) КАК СуммаДолга
	               |ПОМЕСТИТЬ втДолги
	               |ИЗ
	               |	РегистрНакопления.Взаиморасчеты.Остатки(
	               |			,
	               |			ДоговорКонтрагента.Владелец В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					втРезервы.Контрагент
	               |				ИЗ
	               |					втРезервы)) КАК ВзаиморасчетыОстатки
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ДепозитыКонтрагентов.Остатки(
	               |				,
	               |				ДоговорКонтрагента.Владелец В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						втРезервы.Контрагент
	               |					ИЗ
	               |						втРезервы)) КАК ДепозитыКонтрагентовОстатки
	               |		ПО ВзаиморасчетыОстатки.ДоговорКонтрагента = ДепозитыКонтрагентовОстатки.ДоговорКонтрагента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец, ДепозитыКонтрагентовОстатки.ДоговорКонтрагента.Владелец)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец, ДепозитыКонтрагентовОстатки.ДоговорКонтрагента.Владелец) КАК ГоловнойКонтрагент,
	               |	СУММА(ЕСТЬNULL(ВзаиморасчетыОстатки.СуммаУпрОстаток, 0) + ЕСТЬNULL(ДепозитыКонтрагентовОстатки.СуммаУпрОстаток, 0)) КАК СуммаДолга
	               |ПОМЕСТИТЬ втДолгиГолКонтрагента
	               |ИЗ
	               |	РегистрНакопления.Взаиморасчеты.Остатки(
	               |			,
	               |			ДоговорКонтрагента.Владелец В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					втДоговораГолКАГ.ДоговорГоловногоКонтрагента.Владелец
	               |				ИЗ
	               |					втДоговораГолКАГ)) КАК ВзаиморасчетыОстатки
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ДепозитыКонтрагентов.Остатки(
	               |				,
	               |				ДоговорКонтрагента.Владелец В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						втДоговораГолКАГ.ДоговорГоловногоКонтрагента.Владелец
	               |					ИЗ
	               |						втДоговораГолКАГ)) КАК ДепозитыКонтрагентовОстатки
	               |		ПО ВзаиморасчетыОстатки.ДоговорКонтрагента = ДепозитыКонтрагентовОстатки.ДоговорКонтрагента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец, ДепозитыКонтрагентовОстатки.ДоговорКонтрагента.Владелец)
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОсобыеУсловияОтсрочки.ДоговорКонтрагента,
	               |	ОсобыеУсловияОтсрочки.Изготовитель,
	               |	ОсобыеУсловияОтсрочки.ТипПоставки,
	               |	ОсобыеУсловияОтсрочки.ДопустимоеЧислоДнейЗадолженности,
	               |	ОсобыеУсловияОтсрочки.ВидРасчетаДней
	               |ПОМЕСТИТЬ втОсобыеУсловияОтсрочки
	               |ИЗ
	               |	РегистрСведений.ОсобыеУсловияОтсрочки.СрезПоследних() КАК ОсобыеУсловияОтсрочки
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезервы.Номенклатура,
	               |	втРезервы.Склад,
	               |	втРезервы.Качество,
	               |	втРезервы.СтрокаЗаявки,
	               |	втРезервы.МаршрутДоставки,
	               |	втРезервы.БлокировкаКонтрагента,
	               |	втРезервы.БлокировкаДоговораКонтрагента,
	               |	втРезервы.БлокировкаГолКонтрагента,
	               |	втРезервы.БлокировкаДоговораГолКонтрагента,
	               |	втРезервы.Количество,
	               |	втРезервы.ПоследняяКорректировка,
	               |	втЦены.Цена - втЦены.Цена * втЦены.ПроцентСкидкиНаценки / 100 КАК Цена,
	               |	втРезервы.Контрагент КАК Контрагент,
	               |	втЦены.КомментарийИзСайта,
	               |	втЦены.СтавкаНДС,
	               |	втРезервы.СтрокаЗаявки.ЦенаЗакупки КАК ЦенаЗакупки,
	               |	НЕ втГоловныеКонтрагентыСПросрочПлатежом.ГоловнойКонтрагент ЕСТЬ NULL
	               |		ИЛИ НЕ втКонтрагентыСПросрочПлатежом.Контрагент ЕСТЬ NULL КАК ПросроченнаяЗадолженность,
	               |	ВЫБОР
	               |		КОГДА &Склад В (&ОснСклады)
	               |			ТОГДА ЕСТЬNULL(втРезервы.МаршрутДоставки.МинимальнаяСуммаОтгрузки, 0)
	               |		ИНАЧЕ ЕСТЬNULL(втРезервы.МаршрутДоставки.МинимальнаяСуммаОтгрузкиФилиал, 0)
	               |	КОНЕЦ КАК МинимальнаяСуммаОтгрузки,
	               |	втРезервы.ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втРезервы.СтрокаЗаявки.ЦенаЗакупки, 0) = 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ 100 * (втЦены.Цена * (1 - втЦены.ПроцентСкидкиНаценки / 100) / втРезервы.СтрокаЗаявки.ЦенаЗакупки - 1) < &МинПроцентНаценки
	               |	КОНЕЦ КАК ПроблемаСНаценкой,
	               |	ЕСТЬNULL(втДолгиГолКонтрагента.СуммаДолга, ЕСТЬNULL(втДолги.СуммаДолга, 0)) КАК СуммаДолга,
	               |	ЕСТЬNULL(втРезервы.Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента.ДопустимаяСуммаЗадолженности, ЕСТЬNULL(втРезервы.Контрагент.ОсновнойДоговорКонтрагента.ДопустимаяСуммаЗадолженности, 0)) КАК ДопустимаяСуммаЗадолженности,
	               |	втРезервы.Контрагент.РежРаботы_вВых КАК РежимРаботыВВыходных,
	               |	втРезервы.Контрагент.ДополнительнаяДоставка КАК ДополнительнаяДоставка,
	               |	втЦены.СуммаВключаетНДС,
	               |	0 КАК ПроцентСкидкиНаценки,
	               |	втРезервы.ТорговаяТочка,
	               |	втРезервы.VIP,
	               |	втРезервы.ДоговорКонтрагента.ВидОплаты КАК ВидОплаты,
	               |	втРезервы.Артикул КАК Артикул,
	               |	втРезервы.Изготовитель,
	               |	втРезервы.ЗаявкаПокупателя,
	               |	0 КАК Сумма,
	               |	втРезервы.Количество КАК План,
	               |	втРезервы.СкладБонусный,
	               |	втРезервы.СкладСувенирный,
	               |	втРезервы.НеКонтролироватьКредит,
	               |	втРезервы.ЕдиницаИзмерения,
	               |	втРезервы.Коэффициент,
	               |	втРезервы.IDSite,
	               |	ЛОЖЬ КАК Услуга,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втРезервы.Контрагент.ГоловнойКонтрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) <> втРезервы.Контрагент
	               |			ТОГДА ЕСТЬNULL(втРезервы.Контрагент.ГоловнойКонтрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	КОНЕЦ КАК ГоловнойКонтрагент,
	               |	ЕСТЬNULL(втДоговораГолКАГ.ДоговорГоловногоКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорГоловногоКонтрагента,
	               |	втРезервы.БлокировкаОтгрузки,
				   |  	втРезервы.ПокупательИзДрБазы,
				   |	ВЫБОР
				   |		КОГДА isnull(втДоговораГолКАГ.ДоговорГоловногоКонтрагента.ВременнаяОтсрочка_Использовать, втРезервы.ДоговорКонтрагента.ВременнаяОтсрочка_Использовать)
				   |					И (isnull(втДоговораГолКАГ.ДоговорГоловногоКонтрагента.ВременнаяОтсрочка_СрокДействия, втРезервы.ДоговорКонтрагента.ВременнаяОтсрочка_СрокДействия) >= &ТекущаяДата
				   |				ИЛИ isnull(втДоговораГолКАГ.ДоговорГоловногоКонтрагента.ВременнаяОтсрочка_СрокДействия, втРезервы.ДоговорКонтрагента.ВременнаяОтсрочка_СрокДействия) = ДАТАВРЕМЯ(1, 1, 1))
				   |			ТОГДА isnull(втДоговораГолКАГ.ДоговорГоловногоКонтрагента.ВременнаяОтсрочка_ДопустимоеЧислоДнейЗадолженности, втРезервы.ДоговорКонтрагента.ВременнаяОтсрочка_ДопустимоеЧислоДнейЗадолженности)
				   |		ИНАЧЕ isnull(втДоговораГолКАГ.ДоговорГоловногоКонтрагента.ДопустимоеЧислоДнейЗадолженности, втРезервы.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
				   |	КОНЕЦ КАК ДопустимоеЧислоДнейЗадолженности,
				   |    isnull(втДоговораГолКАГ.ДоговорГоловногоКонтрагента.ВидРасчетаДней, втРезервы.ДоговорКонтрагента.ВидРасчетаДней) КАК ВидРасчетаДней,
	               |	ЕСТЬNULL(втОсобыеУсловияОтсрочки.ДопустимоеЧислоДнейЗадолженности, 0) КАК ДопустимоеЧислоДнейЗадолженностиОУ,
	               |	ЕСТЬNULL(втОсобыеУсловияОтсрочки.ВидРасчетаДней, НЕОПРЕДЕЛЕНО) КАК ВидРасчетаДнейОУ,
				   |	ДатаВремя(1,1,1) КАК ДатаОплаты
	               |ИЗ
	               |	втРезервы КАК втРезервы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
	               |		ПО втРезервы.СтрокаЗаявки = втЦены.СтрокаЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втКонтрагентыСПросрочПлатежом КАК втКонтрагентыСПросрочПлатежом
	               |		ПО втРезервы.Контрагент = втКонтрагентыСПросрочПлатежом.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втДолги КАК втДолги
	               |		ПО втРезервы.Контрагент = втДолги.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втДоговораГолКАГ КАК втДоговораГолКАГ
	               |		ПО втРезервы.ДоговорКонтрагента = втДоговораГолКАГ.ДоговорКонтрагента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втГоловныеКонтрагентыСПросрочПлатежом КАК втГоловныеКонтрагентыСПросрочПлатежом
	               |		ПО втРезервы.Контрагент.ГоловнойКонтрагент = втГоловныеКонтрагентыСПросрочПлатежом.ГоловнойКонтрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втДолгиГолКонтрагента КАК втДолгиГолКонтрагента
	               |		ПО втРезервы.Контрагент.ГоловнойКонтрагент = втДолгиГолКонтрагента.ГоловнойКонтрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОсобыеУсловияОтсрочки КАК втОсобыеУсловияОтсрочки
	               |		ПО втРезервы.ДоговорКонтрагента = втОсобыеУсловияОтсрочки.ДоговорКонтрагента
	               |			И втРезервы.Номенклатура.Изготовитель = втОсобыеУсловияОтсрочки.Изготовитель
	               |			И втРезервы.СтрокаЗаявки.ТипПоставки = втОсобыеУсловияОтсрочки.ТипПоставки
				   |УПОРЯДОЧИТЬ ПО
	               |	втРезервы.Контрагент.Наименование,
	               |	Артикул";
	
	//Временно убрана строка прихода из выборки, т.к. брались неверные резервы, если списана не та строка прихода 
	
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("ОтборПоФизСкладу", Параметры.Склад <> Константы.СкладУцененногоТовара.Получить());
	
	Запрос.УстановитьПараметр("МаршрутДоставки", Параметры.МаршрутДоставки);
	Запрос.УстановитьПараметр("Контрагент", Параметры.Контрагент);
	Запрос.УстановитьПараметр("ОтборМаршрутДоставки", ?(Параметры.ОтборМаршрутДоставки = 0,Не Параметры.МаршрутДоставки.ЭтоГруппа, Ложь));
	Запрос.УстановитьПараметр("ОтборМаршрутДоставкиГруппа", ?(Параметры.ОтборМаршрутДоставки = 0,Параметры.МаршрутДоставки.ЭтоГруппа, Ложь));
	Запрос.УстановитьПараметр("НеУчитыватьПокупателейНеработающихВВыходные", Параметры.НеУчитыватьПокупателейНеработающихВВыходные);
	Запрос.УстановитьПараметр("ТолькоПокупателиДополнительнаяДоставка", Параметры.ТолькоПокупателиДополнительнаяДоставка);
	
	//Запрос.УстановитьПараметр("ВыбранМаршрутКонтрагента", Параметры.ВыбранМаршрутКонтрагента);
	//Запрос.УстановитьПараметр("МаршрутКонтрагента", Параметры.МаршрутКонтрагента);
	
	ОснСклады = Новый Массив;
	ОснСклады.Добавить(Константы.Склад_Москва.Получить());
	ОснСклады.Добавить(Константы.СкладОсновной.Получить());
	
	Запрос.УстановитьПараметр("ОснСклады",ОснСклады);
	Запрос.УстановитьПараметр("МинПроцентНаценки", Параметры.МинимальнаяПроцентНаценки);
	
	//Результаты = Запрос.ВыполнитьПакет();
	//Товары = Результаты[Результаты.ВГраница()].Выгрузить();
	//Услуги = Результаты[Результаты.ВГраница()].Выгрузить();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); 
		Результат = Запрос.Выполнить();
	ЗафиксироватьТранзакцию();
	
	Товары = Результат.Выгрузить();
	МенеджерВТ.Закрыть();
	
	ОбрезатьТоварыПоСтрокамЗаявки();
	ОбрезатьПоТоварамНаСкладах();
	
	Товары.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	мИдентификатор = 1;
	Для Каждого СтрокаТЧ Из Товары Цикл 
		СтрокаТЧ.Идентификатор = мИдентификатор;
		мИдентификатор = мИдентификатор + 1;
	КонецЦикла;
	
	Товары.Индексы.Добавить("Контрагент,ДоговорКонтрагента");
	
	Для Каждого СтрокаТовары Из Товары Цикл 
		Если Не СтрокаТовары.СуммаВключаетНДС Тогда 	 
			ЦенаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТовары.Цена,
			Истина, СтрокаТовары.СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТовары.СтавкаНДС));
		Иначе
			ЦенаНДС = 0;
		КонецЕсли;
		СтрокаТовары.Цена = (СтрокаТовары.Цена + ЦенаНДС) * (1 - СтрокаТовары.ПроцентСкидкиНаценки/100);
		Если СтрокаТовары.ПокупательИзДрБазы Тогда 
			НаценкаКонтрагента = ОбщегоНазначения.НаценкаКонтрагента(СтрокаТовары.Контрагент, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.ДоговорКонтрагента, "Организация")); 	
			СтрокаТовары.Цена = Окр(СтрокаТовары.Цена * (1 + НаценкаКонтрагента/100), 2);
		КонецЕсли;
		СтрокаТовары.Сумма = СтрокаТовары.Цена * СтрокаТовары.Количество;
		
		//Считаем дату оплаты
		
		//Из условий договора
		СтрокаТовары.ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(Дата, СтрокаТовары.ДопустимоеЧислоДнейЗадолженности, СтрокаТовары.ВидРасчетаДней); 	
		//Добавим особые условия
		Если СтрокаТовары.ДопустимоеЧислоДнейЗадолженностиОУ > 0 И ЗначениеЗаполнено(СтрокаТовары.ВидРасчетаДнейОУ) Тогда
			СтрокаТовары.ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплатыПоДатеДокумента(СтрокаТовары.ДатаОплаты, СтрокаТовары.ДопустимоеЧислоДнейЗадолженностиОУ, СтрокаТовары.ВидРасчетаДнейОУ);
		КонецЕсли;
		
		
	КонецЦикла;
		
	Покупатели.Очистить(); 
	ИсключенныеПокупатели.Очистить();
	
	//16.06.2018 Расчет суммы долга для головного контрагента
    ВремТаблица = Товары.Скопировать(, "ГоловнойКонтрагент,СуммаДолга,ДопустимаяСуммаЗадолженности"); //,ДоговорГоловногоКонтрагента,ДопустимаяСуммаЗадолженности,СуммаДолга");
	ВремТаблица.Свернуть("ГоловнойКонтрагент,СуммаДолга,ДопустимаяСуммаЗадолженности"); //,ДоговорГоловногоКонтрагента,ДопустимаяСуммаЗадолженности,СуммаДолга");
	
	ДолгиГолКонтрагента = Новый ТаблицаЗначений;
	
	ДолгиГолКонтрагента.Колонки.Добавить("ГоловнойКонтрагент");
	ДолгиГолКонтрагента.Колонки.Добавить("СуммаИтоговогоДолга", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ДолгиГолКонтрагента.Колонки.Добавить("СуммаЛимита", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	ТаблицаКАГЛимит = Новый ТаблицаЗначений;
	ТаблицаКАГЛимит.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаКАГЛимит.Колонки.Добавить("СуммаИтоговогоДолга", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаКАГЛимит.Колонки.Добавить("СуммаЛимита", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Для Каждого СтрокаТовары Из ВремТаблица Цикл 
		
		Если Не (ЗначениеЗаполнено(СтрокаТовары.ГоловнойКонтрагент)) //И ЗначениеЗаполнено(СтрокаТовары.ДоговорГоловногоКонтрагента)) 
			Тогда 
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ГоловнойКонтрагент", СтрокаТовары.ГоловнойКонтрагент);
		Строки = Товары.НайтиСтроки(Отбор);
		
		
		СуммаИтоговогоДолга = 0;
		
		Для Каждого Строка Из Строки Цикл 
			Если Строка.ВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные Тогда 
				СуммаИтоговогоДолга = СуммаИтоговогоДолга + Строка.Цена * Строка.Количество * (1 - Параметры.СнижатьДолгКонтрагентаПоБезналРасчету/100);
			Иначе
				СуммаИтоговогоДолга = СуммаИтоговогоДолга + Строка.Цена * Строка.Количество;
			КонецЕсли;
		КонецЦикла;
		
		СуммаЛимита =  Макс(0, СтрокаТовары.ДопустимаяСуммаЗадолженности - СтрокаТовары.СуммаДолга);
		
		Отбор = Новый Структура("Контрагент", СтрокаТовары.ГоловнойКонтрагент);
		Строки = Товары.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из Строки Цикл 
			Если Строка.ВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные Тогда 
				СуммаИтоговогоДолга = СуммаИтоговогоДолга + Строка.Цена * Строка.Количество * (1 - Параметры.СнижатьДолгКонтрагентаПоБезналРасчету/100);
			Иначе
				СуммаИтоговогоДолга = СуммаИтоговогоДолга + Строка.Цена * Строка.Количество;
			КонецЕсли;
		КонецЦикла;
		
		//СуммаЛимита =  Макс(0, СтрокаТовары.ДопустимаяСуммаЗадолженности - СтрокаТовары.СуммаДолга);
		НоваяСтрока = ДолгиГолКонтрагента.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		НоваяСтрока.СуммаИтоговогоДолга = СуммаИтоговогоДолга;
		НоваяСтрока.СуммаЛимита = СуммаЛимита;
	КонецЦикла;
	
	ВремТаблица = Товары.Скопировать();
	ВремТаблица.Свернуть("Контрагент,СуммаДолга,ДопустимаяСуммаЗадолженности,VIP,ГоловнойКонтрагент,ДоговорГоловногоКонтрагента,МаршрутДоставки,БлокировкаКонтрагента,БлокировкаДоговораКонтрагента,БлокировкаГолКонтрагента,БлокировкаДоговораГолКонтрагента,БлокировкаОтгрузки,ПросроченнаяЗадолженность,МинимальнаяСуммаОтгрузки,ПокупательИзДрБазы");	
	
	// 16.06.2018 Если в служебном задании есть такой контрагент с таким маршрутом доставки, то не проверяем на мин. отгрузку
	Структура = НайтиСлужебныеЗаданияИРТУ(Параметры);
	ТаблицаРеализаций = Структура.ТаблицаРеализаций;
	
	Для Каждого СтрокаТЧ Из ВремТаблица Цикл 
		Исключен = Ложь;
		ПричинаИсключения = "";
		
		//Временно отключена проверка блокировок Валиахметов 05.06.2018;
		//Снова включил 09.06.2018
		
		//01.08.2018 Теперь если есть головной КАГ, то берем блокировки только из него, Валиахметов
		Если СтрокаТЧ.БлокировкаКонтрагента И Не ЗначениеЗаполнено(СтрокаТЧ.ГоловнойКонтрагент) Или
			СтрокаТЧ.БлокировкаДоговораКонтрагента И Не ЗначениеЗаполнено(СтрокаТЧ.ГоловнойКонтрагент) Или
			СтрокаТЧ.БлокировкаГолКонтрагента Или
			СтрокаТЧ.БлокировкаДоговораГолКонтрагента Или 
			СтрокаТЧ.БлокировкаОтгрузки Тогда
			
			Исключен = Истина;
			Если СтрокаТЧ.БлокировкаКонтрагента И Не ЗначениеЗаполнено(СтрокаТЧ.ГоловнойКонтрагент) Тогда 
				ПричинаИсключения = "Блокировка контрагента";	
			ИначеЕсли СтрокаТЧ.БлокировкаДоговораКонтрагента И Не ЗначениеЗаполнено(СтрокаТЧ.ГоловнойКонтрагент) Тогда 
				ПричинаИсключения = "Блокировка договора контрагента";	
			ИначеЕсли СтрокаТЧ.БлокировкаГолКонтрагента Тогда 
				ПричинаИсключения = "Блокировка гол. контрагента";	
			ИначеЕсли СтрокаТЧ.БлокировкаДоговораГолКонтрагента Тогда   
				ПричинаИсключения = "Блокировка дог.-ра гол. контрагента";
			Иначе
				ПричинаИсключения = "Блокировка в заявке";
			КонецЕсли;
		КонецЕсли;
		
		Строки = Товары.НайтиСтроки(Новый Структура("Контрагент", СтрокаТЧ.Контрагент));
		СтрокиБонусные = Товары.НайтиСтроки(Новый Структура("Контрагент, СкладБонусный", СтрокаТЧ.Контрагент, Истина));
		СтрокиСувенирные = Товары.НайтиСтроки(Новый Структура("Контрагент, СкладСувенирный", СтрокаТЧ.Контрагент, Истина));
		
		НеПроверятьМинОтгрузку = Ложь;
		
		// Закомментировано 30.05.2018. Теперь выписываем бонусы всегда  
		
		//Если Строки.Количество() = СтрокиБонусные.Количество() + СтрокиСувенирные.Количество() Тогда 
		//	//Удаляем бонусы
		//	Для Каждого СтрокаТовары Из СтрокиБонусные Цикл 
		//		Товары.Удалить(СтрокаТовары);
		//	КонецЦикла;
		//	Строки = Товары.НайтиСтроки(Новый Структура("Контрагент", СтрокаТЧ.Контрагент));
		//	НеПроверятьМинОтгрузку = СтрокиСувенирные.Количество() > 0; //Только сувенирку пропускаем	
		//КонецЕсли;
		
		СуммаОтгрузки = 0;
		Для Каждого СтрокаТовары Из Строки Цикл 
			СуммаОтгрузки = СуммаОтгрузки + СтрокаТовары.Цена * СтрокаТовары.Количество;
		КонецЦикла;
		
		//19.06.2018 
		VIP = СтрокаТЧ.VIP;
		
		// 16.06.2018 Если в служебном задании есть такой контрагент с таким маршрутом доставки, то не проверяем на мин. отгрузку
		СтрокиРеализаций = ТаблицаРеализаций.НайтиСтроки(Новый Структура("Контрагент,МаршрутДоставки", СтрокаТЧ.Контрагент, СтрокаТЧ.МаршрутДоставки));
		Если Не VIP И Не Параметры.ТипДоставки = Справочники.ТипыДоставки.Самовывоз И Не НеПроверятьМинОтгрузку И Не Параметры.НеУдалятьМинСум И СуммаОтгрузки < СтрокаТЧ.МинимальнаяСуммаОтгрузки И СтрокиРеализаций.Количество() = 0 Тогда  
			Исключен = Истина; 
			ПричинаИсключения = "Фильтр по миним. сумме отгрузки"
		КонецЕсли;
		
		СтрокиДолгиГолКонтрагента = ДолгиГолКонтрагента.НайтиСтроки(Новый Структура("ГоловнойКонтрагент", СтрокаТЧ.ГоловнойКонтрагент));
		СтрокиДолгиГолКонтрагента2 = ДолгиГолКонтрагента.НайтиСтроки(Новый Структура("ГоловнойКонтрагент", СтрокаТЧ.Контрагент));
		
		ВремТаблица2 = Товары.Скопировать(Строки, "ДоговорКонтрагента,ВидОплаты,НеКонтролироватьКредит");
		ВремТаблица2.Свернуть("ДоговорКонтрагента,ВидОплаты,НеКонтролироватьКредит");
		НеКонтролироватьКредит = Ложь;
		
		СуммаЛимита = 0;
		СуммаИтоговогоДолга = 0;
		
		Если СтрокиДолгиГолКонтрагента.Количество() = 0 И СтрокиДолгиГолКонтрагента2.Количество() = 0 Тогда 
			Для Каждого СтрокаТовары Из ВремТаблица2 Цикл 
				СуммаДолга = 0;
				Строки = Товары.НайтиСтроки(Новый Структура("Контрагент, ДоговорКонтрагента", СтрокаТЧ.Контрагент, СтрокаТовары.ДоговорКонтрагента));
				Для Каждого Строка Из Строки Цикл 
					Если СтрокаТовары.ВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные Тогда 
						СуммаДолга = СуммаДолга + Строка.Цена * Строка.Количество * (1 - Параметры.СнижатьДолгКонтрагентаПоБезналРасчету/100);
					Иначе
						СуммаДолга = СуммаДолга + Строка.Цена * Строка.Количество;
					КонецЕсли;
				КонецЦикла;
				//Если СуммаДолга + СтрокаТовары.СуммаДолга > СтрокаТовары.ДопустимаяСуммаЗадолженности Тогда 
				//	ДолгПревышаетРазрешенный = Истина;
				//КонецЕсли;
				//
				СуммаИтоговогоДолга = СуммаИтоговогоДолга + СуммаДолга;
				//СуммаЛимита =  Макс(0, СуммаЛимита + СтрокаТовары.ДопустимаяСуммаЗадолженности - СтрокаТовары.СуммаДолга);
				
				Если VIP Или СтрокаТовары.НеКонтролироватьКредит Тогда 
					НеКонтролироватьКредит = Истина;
				КонецЕсли;
			КонецЦикла;
			СуммаЛимита =  Макс(0, СтрокаТЧ.ДопустимаяСуммаЗадолженности - СтрокаТЧ.СуммаДолга);
		Иначе
			Если СтрокиДолгиГолКонтрагента.Количество() > 0 Тогда 
				СтрокаДолгиГолКонтрагента = СтрокиДолгиГолКонтрагента.Получить(0);
			Иначе
				СтрокаДолгиГолКонтрагента = СтрокиДолгиГолКонтрагента2.Получить(0);
			КонецЕсли;
			
			СуммаЛимита = СтрокаДолгиГолКонтрагента.СуммаЛимита;
			СуммаИтоговогоДолга = СтрокаДолгиГолКонтрагента.СуммаИтоговогоДолга;
			Для Каждого СтрокаТовары Из ВремТаблица2 Цикл 
				Если VIP Или СтрокаТовары.НеКонтролироватьКредит Тогда 
					НеКонтролироватьКредит = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//НеКонтролироватьКредит = Истина; // Временно отключено Валиахметов А.А. 05.06.2018
		
		
		Если НеКонтролироватьКредит Тогда 
			СуммаЛимита = СуммаИтоговогоДолга;	
		КонецЕсли;
		
		//22.06.2018 Покупатели с превышением лимита не должны отгружаться
		Если СуммаИтоговогоДолга > СуммаЛимита Тогда 
			Исключен = Истина;
			ПричинаИсключения = мПричинаИсключенияЛимитОтгрузки;	
			Если Параметры.Довыписка Тогда 
				НоваяСтрока = ТаблицаКАГЛимит.Добавить();
				НоваяСтрока.Контрагент = СтрокаТЧ.Контрагент;
				НоваяСтрока.СуммаИтоговогоДолга = СуммаИтоговогоДолга;
				НоваяСтрока.СуммаЛимита = СуммаЛимита;
			КонецЕсли;
		КонецЕсли;
		
		Если Исключен Тогда 
			НоваяСтрока = ИсключенныеПокупатели.Добавить();
			НоваяСтрока.СуммаОтгрузки = СуммаОтгрузки;
			НоваяСтрока.Маршрут = СтрокаТЧ.МаршрутДоставки;
			НоваяСтрока.ПричинаИсключения = ПричинаИсключения;
			НоваяСтрока.МинимальнаяСуммаОтгрузки = СтрокаТЧ.МинимальнаяСуммаОтгрузки;
		Иначе
			НоваяСтрока = Покупатели.Добавить();
			НоваяСтрока.ПросроченнаяЗадолженность = СтрокаТЧ.ПросроченнаяЗадолженность;
			НоваяСтрока.ДолгПревышаетРазрешенный = СуммаИтоговогоДолга > СуммаЛимита;
			НоваяСтрока.СуммаОтгрузки = СуммаОтгрузки;
			НоваяСтрока.СуммаЛимита = СуммаЛимита;
			НоваяСтрока.ПокупательИзДрБазы = СтрокаТЧ.ПокупательИзДрБазы;
		КонецЕсли;
		
		НоваяСтрока.Контрагент = СтрокаТЧ.Контрагент;
		
	КонецЦикла;
	
	//ВремТаблица = Услуги.Скопировать();
	//ВремТаблица.Свернуть("Контрагент,МаршрутДоставки,БлокировкаКонтрагента,БлокировкаДоговораКонтрагента,БлокировкаГолКонтрагента,БлокировкаДоговораГолКонтрагента");	
	//Для Каждого СтрокаТЧ Из Услуги Цикл 
	//	Исключен = Ложь;
	//	ПричинаИсключения = "";
	//	Если СтрокаТЧ.БлокировкаКонтрагента Или
	//		СтрокаТЧ.БлокировкаДоговораКонтрагента Или
	//		СтрокаТЧ.БлокировкаГолКонтрагента Или
	//		СтрокаТЧ.БлокировкаДоговораГолКонтрагента Тогда
	//		
	//		Исключен = Истина;
	//		Если СтрокаТЧ.БлокировкаКонтрагента Тогда 
	//			ПричинаИсключения = "Блокировка контрагента";	
	//		ИначеЕсли СтрокаТЧ.БлокировкаДоговораКонтрагента Тогда 
	//			ПричинаИсключения = "Блокировка договора контрагента";	
	//		ИначеЕсли СтрокаТЧ.БлокировкаГолКонтрагента Тогда 
	//			ПричинаИсключения = "Блокировка гол. контрагента";	
	//		Иначе 
	//			ПричинаИсключения = "Блокировка дог.-ра гол. контрагента";	
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если Исключен Тогда 
	//		СтрокаК = ИсключенныеПокупатели.Найти(СтрокаТЧ.Контрагент, "Контрагент");
	//		Если СтрокаК = Неопределено Тогда 
	//			СтрокаК = ИсключенныеПокупатели.Добавить();
	//			СтрокаК.Маршрут = СтрокаК.МаршрутДоставки;
	//			СтрокаК.ПричинаИсключения = ПричинаИсключения;
	//			Строка.Сумма
	//		КонецЕсли;
	//КонецЦикла;
	
	ЭтотОбъект.ДокументыДобавляемые.Очистить();
	Если Не Параметры.НеИскать Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СлужебноеЗаданиеПокупатели.Реализация КАК Документ,
		               |	СлужебноеЗаданиеПокупатели.Реализация.Контрагент КАК Покупатель,
		               |	СлужебноеЗаданиеПокупатели.Реализация.СуммаДокумента,
		               |	ЛОЖЬ КАК НетСЗ
		               |ИЗ
		               |	Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
		               |ГДЕ
		               |	СлужебноеЗаданиеПокупатели.Реализация.Контрагент В(&СписокКонтрагентов)
		               |	И СлужебноеЗаданиеПокупатели.Ссылка.МаршрутДоставки = &МаршрутДоставки
		               |	И НЕ СлужебноеЗаданиеПокупатели.Ссылка.ПометкаУдаления
		               |	И СлужебноеЗаданиеПокупатели.Ссылка.Склад = &Склад
		               |	И СлужебноеЗаданиеПокупатели.Реализация.СтатусДокумента <> ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугОтгружен)
		               |	И НЕ СлужебноеЗаданиеПокупатели.Реализация.ПометкаУдаления
		               |	И СлужебноеЗаданиеПокупатели.Ссылка.Дата >= &Дата
		               |	И НЕ СлужебноеЗаданиеПокупатели.Ссылка.Склад.Заблокирован
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслуг.Ссылка,
		               |	РеализацияТоваровУслуг.Контрагент,
		               |	РеализацияТоваровУслуг.СуммаДокумента,
		               |	ИСТИНА
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
		               |		ПО (СлужебноеЗаданиеПокупатели.Реализация = РеализацияТоваровУслуг.Ссылка)
		               |			И (НЕ СлужебноеЗаданиеПокупатели.Ссылка.ПометкаУдаления)
		               |ГДЕ
		               |	НЕ РеализацияТоваровУслуг.ПометкаУдаления
		               |	И РеализацияТоваровУслуг.СтатусДокумента <> ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугОтгружен)
		               |	И ВЫБОР
		               |			КОГДА &ОтборМаршрутДоставкиГруппа
		               |				ТОГДА РеализацияТоваровУслуг.МаршрутДоставки В ИЕРАРХИИ (&МаршрутДоставки)
		               |			ИНАЧЕ РеализацияТоваровУслуг.МаршрутДоставки = &МаршрутДоставки
		               |		КОНЕЦ
		               |	И РеализацияТоваровУслуг.Контрагент В(&СписокКонтрагентов)
		               |	И ВЫБОР
		               |			КОГДА &ОтборПоФизСкладу
		               |				ТОГДА РеализацияТоваровУслуг.Склад.ФизическийСклад = &Склад
		               |			ИНАЧЕ РеализацияТоваровУслуг.Склад = &Склад
		               |		КОНЕЦ
		               |	И НЕ РеализацияТоваровУслуг.ТипДоставки В (&ТипыДоставки)
		               |	И РеализацияТоваровУслуг.Дата >= &Дата
		               |	И СлужебноеЗаданиеПокупатели.Реализация ЕСТЬ NULL
		               |	И НЕ СлужебноеЗаданиеПокупатели.Реализация.Склад.Заблокирован";
		Запрос.УстановитьПараметр("Дата", Дата - Параметры.ГлубинаДней * 24*60*60);
		Запрос.УстановитьПараметр("Склад", Параметры.Склад);
		Запрос.УстановитьПараметр("СписокКонтрагентов", Покупатели.ВыгрузитьКолонку("Контрагент"));
		//Если Параметры.ОтборМаршрутДоставки = 0 Тогда 
			Запрос.УстановитьПараметр("МаршрутДоставки", Параметры.МаршрутДоставки);
		//Иначе
		//	Если Параметры.ВыбранМаршрутКонтрагента Тогда 
		//		Запрос.УстановитьПараметр("МаршрутДоставки", Параметры.МаршрутКонтрагента);
		//	Иначе 
		//		Запрос.УстановитьПараметр("МаршрутДоставки", Параметры.Контрагент.ОсновнаяТорговаяТочка.МаршрутДоставки);
		//	КонецЕсли;
		//КонецЕсли;
		Запрос.УстановитьПараметр("ОтборМаршрутДоставкиГруппа", ?(Параметры.ОтборМаршрутДоставки = 0,Параметры.МаршрутДоставки.ЭтоГруппа, Ложь));
		
		ТипыДоставки = Новый Массив;
		ТипыДоставки.Добавить(Справочники.ТипыДоставки.Самовывоз);
		ТипыДоставки.Добавить(Справочники.ТипыДоставки.ЭкспрессДоставка);
		Запрос.УстановитьПараметр("ТипыДоставки", ТипыДоставки);
		Запрос.УстановитьПараметр("ОтборПоФизСкладу", Параметры.Склад <> Константы.СкладУцененногоТовара.Получить());
		ЭтотОбъект.ДокументыДобавляемые.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если ТаблицаКАГЛимит.Количество() > 0 Тогда 
		Попытка
			Для Каждого СтрокаТЧ Из ТаблицаКАГЛимит Цикл 
				//ТекстПисьма = ТекстПисьма + СтрокаТЧ.Контрагент + " Код(" + СтрокаТЧ.Контрагент.Код + "). Сумма лимита: " + СтрокаТЧ.СуммаЛимита + ". Рассчитанная сумма отгрузки: " + 
				//СтрокаТЧ.СуммаИтоговогоДолга + Символы.ПС;
				НаборЗаписей = РегистрыСведений.РассылкаСообщенийОНеотгруженныхКлиентах.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Контрагент.Установить(СтрокаТЧ.Контрагент);
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ДатаФормированияСЗ = Дата;
				НаборЗаписей.Записать();
			КонецЦикла;
		Исключение
		КонецПопытки;
		//РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(
		//Справочники.СобытияДляОтправкиЭлектронныхПисем.СЗПокупателиСПревышеннымЛимитомОтгрузки, ТекстПисьма, "Список клиентов с превышенным лимитом отгрузки");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбрезатьТоварыПоСтрокамЗаявки() 
	
	ВремТаблица = Товары.Скопировать(, "СтрокаЗаявки");
	ВремТаблица.Свернуть("СтрокаЗаявки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("втСтрокиЗаявок", ВремТаблица);
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	втСтрокиЗаявок.СтрокаЗаявки
	                |ПОМЕСТИТЬ втСтрокиЗаявок
	                |ИЗ
	                |	&втСтрокиЗаявок КАК втСтрокиЗаявок
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ЗаявкиПокупателейОбороты.СтрокаЗаявки,
	                |	СУММА(ЗаявкиПокупателейОбороты.КоличествоПриход) КАК Количество
	                |ПОМЕСТИТЬ втЗаявки
	                |ИЗ
	                |	РегистрНакопления.ЗаявкиПокупателей.Обороты(
	                |			,
	                |			,
	                |			Регистратор,
	                |			СтрокаЗаявки В
	                |				(ВЫБРАТЬ
	                |					втСтрокиЗаявок.СтрокаЗаявки
	                |				ИЗ
	                |					втСтрокиЗаявок)) КАК ЗаявкиПокупателейОбороты
	                |ГДЕ
	                |	ЗаявкиПокупателейОбороты.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ЗаявкиПокупателейОбороты.СтрокаЗаявки
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЗаявкиПокупателейОбороты.СтрокаЗаявки,
	                |	СУММА(ЗаявкиПокупателейОбороты.КоличествоПриход)
	                |ИЗ
	                |	РегистрНакопления.ЗаявкиПокупателей.Обороты(
	                |			,
	                |			,
	                |			Регистратор,
	                |			СтрокаЗаявки В
	                |				(ВЫБРАТЬ
	                |					втСтрокиЗаявок.СтрокаЗаявки
	                |				ИЗ
	                |					втСтрокиЗаявок)) КАК ЗаявкиПокупателейОбороты
	                |ГДЕ
	                |	ЗаявкиПокупателейОбороты.Регистратор ССЫЛКА Документ.КорректировкаЗаявкиПокупателя
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ЗаявкиПокупателейОбороты.СтрокаЗаявки
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ПродажиОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	                |	ПродажиОбороты.КоличествоОборот КАК Количество
	                |ПОМЕСТИТЬ втПродажи
	                |ИЗ
	                |	РегистрНакопления.Продажи.Обороты(
	                |			,
	                |			,
	                |			,
	                |			СтрокаЗаявки В
	                |				(ВЫБРАТЬ
	                |					втСтрокиЗаявок.СтрокаЗаявки
	                |				ИЗ
	                |					втСтрокиЗаявок)) КАК ПродажиОбороты
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТоварыКОтгрузкеОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	                |	ТоварыКОтгрузкеОбороты.КоличествоОборот КАК Количество
	                |ПОМЕСТИТЬ втТоварыКОтгрузке
	                |ИЗ
	                |	РегистрНакопления.ТоварыКОтгрузке.Обороты(
	                |			,
	                |			,
	                |			,
	                |			СтрокаЗаявки В
	                |				(ВЫБРАТЬ
	                |					втСтрокиЗаявок.СтрокаЗаявки
	                |				ИЗ
	                |					втСтрокиЗаявок)) КАК ТоварыКОтгрузкеОбороты
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ОтказыПоЗаявкамОбороты.СтрокаЗаявки КАК СтрокаЗаявки,
	                |	ОтказыПоЗаявкамОбороты.КоличествоОборот КАК Количество
	                |ПОМЕСТИТЬ втОтказы
	                |ИЗ
	                |	РегистрНакопления.ОтказыПоЗаявкам.Обороты(
	                |			,
	                |			,
	                |			,
	                |			СтрокаЗаявки В
	                |				(ВЫБРАТЬ
	                |					втСтрокиЗаявок.СтрокаЗаявки
	                |				ИЗ
	                |					втСтрокиЗаявок)) КАК ОтказыПоЗаявкамОбороты
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втЗаявки.СтрокаЗаявки КАК СтрокаЗаявки,
	                |	ЕСТЬNULL(втЗаявки.Количество, 0) - ЕСТЬNULL(втОтказы.Количество, 0) - ЕСТЬNULL(втПродажи.Количество, 0) - ЕСТЬNULL(втТоварыКОтгрузке.Количество, 0) КАК Количество
	                |ИЗ
	                |	втЗаявки КАК втЗаявки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ втПродажи КАК втПродажи
	                |		ПО втЗаявки.СтрокаЗаявки = втПродажи.СтрокаЗаявки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ втОтказы КАК втОтказы
	                |		ПО втЗаявки.СтрокаЗаявки = втОтказы.СтрокаЗаявки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыКОтгрузке КАК втТоварыКОтгрузке
	                |		ПО втЗаявки.СтрокаЗаявки = втТоварыКОтгрузке.СтрокаЗаявки
	                |ГДЕ
	                |	ЕСТЬNULL(втЗаявки.Количество, 0) - ЕСТЬNULL(втОтказы.Количество, 0) - ЕСТЬNULL(втПродажи.Количество, 0) - ЕСТЬNULL(втТоварыКОтгрузке.Количество, 0) > 0";
	
	ОстаткиПоЗаявкам = Запрос.Выполнить().Выгрузить();
	НовыеТовары = Товары.СкопироватьКолонки();
	
	Для Каждого СтрокаТЧ Из ОстаткиПоЗаявкам Цикл 
		Строки = Товары.НайтиСтроки(Новый Структура("СтрокаЗаявки", СтрокаТЧ.СтрокаЗаявки));
		Индекс = 0;
		Пока СтрокаТЧ.Количество > 0 И Индекс < Строки.Количество() Цикл  
			СтрокаОст = Строки.Получить(Индекс);
			СписывамоеКоличество = Мин(СтрокаТЧ.Количество, СтрокаОст.План);
			Если СписывамоеКоличество > 0 Тогда 
				НоваяСтрока = НовыеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОст);
				НоваяСтрока.План = СписывамоеКоличество;
				НоваяСтрока.Количество = СписывамоеКоличество;
				
				СтрокаТЧ.Количество = СтрокаТЧ.Количество - СписывамоеКоличество;
				СтрокаОст.План = СтрокаОст.План - СписывамоеКоличество;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;
	
	Товары.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(НовыеТовары, Товары);
	
КонецПроцедуры

Процедура ОбрезатьПоТоварамНаСкладах()
	ВремТаблица = Товары.Скопировать(, "Номенклатура,Склад,Качество");
	ВремТаблица.Свернуть("Номенклатура,Склад,Качество");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("втТовары", ВремТаблица);
	
	Запрос.Текст = "ВЫБРАТЬ 
	               |	втТовары.Номенклатура,
	               |	втТовары.Склад,
	               |	втТовары.Качество
	               |ПОМЕСТИТЬ втТовары
	               |ИЗ
	               |	&втТовары КАК втТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ТоварыНаСкладахОстатки.Склад,
	               |	ТоварыНаСкладахОстатки.Качество,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			,
	               |			(Номенклатура, Склад, Качество) В
	               |				(ВЫБРАТЬ
	               |					втТовары.Номенклатура,
	               |					втТовары.Склад,
	               |					втТовары.Качество
	               |				ИЗ
	               |					втТовары)) КАК ТоварыНаСкладахОстатки
	               |ГДЕ
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0";
	
	ТоварыНаСкладах = Запрос.Выполнить().Выгрузить();
	НовыеТовары = Товары.СкопироватьКолонки();
	
	Для Каждого СтрокаТЧ Из ТоварыНаСкладах Цикл 
		Отбор = Новый Структура("Номенклатура,Склад,Качество");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
		
		Строки = Товары.НайтиСтроки(Отбор);
		Индекс = 0;
		Пока СтрокаТЧ.Количество > 0 И Индекс < Строки.Количество() Цикл
			СтрокаОст = Строки.Получить(Индекс);
			СписывамоеКоличество = Мин(СтрокаТЧ.Количество, СтрокаОст.План);
			Если СписывамоеКоличество > 0 Тогда
				НоваяСтрока = НовыеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОст);
				НоваяСтрока.План = СписывамоеКоличество;
				НоваяСтрока.Количество = СписывамоеКоличество;
				
				СтрокаТЧ.Количество = СтрокаТЧ.Количество - СписывамоеКоличество;
				СтрокаОст.План = СтрокаОст.План - СписывамоеКоличество;
			КонецЕсли;
			
			Индекс = Индекс + 1;

		КонецЦикла;
	КонецЦикла;
	Товары.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(НовыеТовары, Товары);

КонецПроцедуры

Процедура ПодобратьПартииДляСПБ(МенеджерВТ)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	втРезервы.Номенклатура,
	               |	втРезервы.Склад,
	               |	втРезервы.Качество,
	               |	втРезервы.СтрокаЗаявки,
	               |	втРезервы.ЗаявкаПокупателя,
	               |	втРезервы.МаршрутДоставки,
	               |	втРезервы.БлокировкаКонтрагента,
	               |	втРезервы.БлокировкаДоговораКонтрагента,
	               |	втРезервы.БлокировкаГолКонтрагента,
	               |	втРезервы.БлокировкаДоговораГолКонтрагента,
	               |	втРезервы.Количество,
	               |	втРезервы.ПоследняяКорректировка,
	               |	втРезервы.Контрагент,
	               |	втРезервы.ДоговорКонтрагента,
	               |	втРезервы.ТорговаяТочка,
	               |	втРезервы.VIP,
	               |	втРезервы.Артикул,
	               |	втРезервы.Изготовитель,
	               |	втРезервы.СкладБонусный,
	               |	втРезервы.СкладСувенирный,
	               |	втРезервы.НеКонтролироватьКредит,
	               |	втРезервы.ЕдиницаИзмерения,
	               |	втРезервы.Коэффициент,
	               |	втРезервы.IDSite,
	               |	втРезервы.БлокировкаОтгрузки,
	               |	втРезервы.ПокупательИзДрБазы
	               |ПОМЕСТИТЬ втРезерыСПБ_Сток
	               |ИЗ
	               |	втРезервы КАК втРезервы
	               |ГДЕ
	               |	втРезервы.ПокупательИзДрБазы
	               |	И НЕ ВЫРАЗИТЬ(втРезервы.Склад КАК Справочник.Склады).СкладVMI
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезервы.Номенклатура,
	               |	втРезервы.Склад,
	               |	втРезервы.Качество,
	               |	втРезервы.СтрокаЗаявки,
	               |	втРезервы.ЗаявкаПокупателя,
	               |	втРезервы.МаршрутДоставки,
	               |	втРезервы.БлокировкаКонтрагента,
	               |	втРезервы.БлокировкаДоговораКонтрагента,
	               |	втРезервы.БлокировкаГолКонтрагента,
	               |	втРезервы.БлокировкаДоговораГолКонтрагента,
	               |	втРезервы.Количество,
	               |	втРезервы.ПоследняяКорректировка,
	               |	втРезервы.Контрагент,
	               |	втРезервы.ДоговорКонтрагента,
	               |	втРезервы.ТорговаяТочка,
	               |	втРезервы.VIP,
	               |	втРезервы.Артикул,
	               |	втРезервы.Изготовитель,
	               |	втРезервы.СкладБонусный,
	               |	втРезервы.СкладСувенирный,
	               |	втРезервы.НеКонтролироватьКредит,
	               |	втРезервы.ЕдиницаИзмерения,
	               |	втРезервы.Коэффициент,
	               |	втРезервы.IDSite,
	               |	втРезервы.БлокировкаОтгрузки,
	               |	втРезервы.ПокупательИзДрБазы,
	               |	ВЫРАЗИТЬ(втРезервы.СтрокаЗаявки КАК Справочник.ИдентификаторыСтрокЗаявок).Поставщик КАК Поставщик
	               |ПОМЕСТИТЬ втРезерыСПБ_ВМИ
	               |ИЗ
	               |	втРезервы КАК втРезервы
	               |ГДЕ
	               |	втРезервы.ПокупательИзДрБазы
	               |	И ВЫРАЗИТЬ(втРезервы.Склад КАК Справочник.Склады).СкладVMI
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПартииТоваровОстатки.Номенклатура,
	               |	ПартииТоваровОстатки.Склад,
	               |	ПартииТоваровОстатки.Качество,
	               |	ПартииТоваровОстатки.Организация,
	               |	ПартииТоваровОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваров.Остатки(
	               |			,
	               |			(Номенклатура, Склад, Качество) В
	               |				(ВЫБРАТЬ
	               |					втРезерыСПб_Сток.Номенклатура,
	               |					втРезерыСПб_Сток.Склад,
	               |					втРезерыСПб_Сток.Качество
	               |				ИЗ
	               |					втРезерыСПб_Сток)) КАК ПартииТоваровОстатки
	               |ГДЕ
	               |	ПартииТоваровОстатки.КоличествоОстаток > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПартииТоваровОстатки.СтрокаПрихода.Дата УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезерыСПБ_Сток.Номенклатура,
	               |	втРезерыСПБ_Сток.Склад,
	               |	втРезерыСПБ_Сток.Качество,
	               |	втРезерыСПБ_Сток.СтрокаЗаявки,
	               |	втРезерыСПБ_Сток.ЗаявкаПокупателя,
	               |	втРезерыСПБ_Сток.МаршрутДоставки,
	               |	втРезерыСПБ_Сток.БлокировкаКонтрагента,
	               |	втРезерыСПБ_Сток.БлокировкаДоговораКонтрагента,
	               |	втРезерыСПБ_Сток.БлокировкаГолКонтрагента,
	               |	втРезерыСПБ_Сток.БлокировкаДоговораГолКонтрагента,
	               |	втРезерыСПБ_Сток.Количество,
	               |	втРезерыСПБ_Сток.ПоследняяКорректировка,
	               |	втРезерыСПБ_Сток.Контрагент,
	               |	втРезерыСПБ_Сток.ДоговорКонтрагента,
	               |	втРезерыСПБ_Сток.ТорговаяТочка,
	               |	втРезерыСПБ_Сток.VIP,
	               |	втРезерыСПБ_Сток.Артикул,
	               |	втРезерыСПБ_Сток.Изготовитель,
	               |	втРезерыСПБ_Сток.СкладБонусный,
	               |	втРезерыСПБ_Сток.СкладСувенирный,
	               |	втРезерыСПБ_Сток.НеКонтролироватьКредит,
	               |	втРезерыСПБ_Сток.ЕдиницаИзмерения,
	               |	втРезерыСПБ_Сток.Коэффициент,
	               |	втРезерыСПБ_Сток.IDSite,
	               |	втРезерыСПБ_Сток.БлокировкаОтгрузки,
	               |	втРезерыСПБ_Сток.ПокупательИзДрБазы
	               |ИЗ
	               |	втРезерыСПБ_Сток КАК втРезерыСПБ_Сток
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПартииТоваровОстатки.Номенклатура,
	               |	ПартииТоваровОстатки.Склад,
	               |	ПартииТоваровОстатки.Качество,
	               |	ПартииТоваровОстатки.Организация,
	               |	ПартииТоваровОстатки.СтрокаПрихода.ТорговаяТочка.Владелец КАК Поставщик,
	               |	СУММА(ПартииТоваровОстатки.КоличествоОстаток) КАК Количество,
	               |	ПартииТоваровОстатки.СтрокаПрихода.Дата
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваров.Остатки(
	               |			,
	               |			(Номенклатура, Склад, Качество, СтрокаПрихода.ТорговаяТочка.Владелец) В
	               |				(ВЫБРАТЬ
	               |					втРезерыСПБ_ВМИ.Номенклатура,
	               |					втРезерыСПБ_ВМИ.Склад,
	               |					втРезерыСПБ_ВМИ.Качество,
	               |					втРезерыСПБ_ВМИ.Поставщик
	               |				ИЗ
	               |					втРезерыСПБ_ВМИ)) КАК ПартииТоваровОстатки
	               |ГДЕ
	               |	ПартииТоваровОстатки.КоличествоОстаток > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПартииТоваровОстатки.Номенклатура,
	               |	ПартииТоваровОстатки.Склад,
	               |	ПартииТоваровОстатки.Качество,
	               |	ПартииТоваровОстатки.Организация,
	               |	ПартииТоваровОстатки.СтрокаПрихода.ТорговаяТочка.Владелец,
	               |	ПартииТоваровОстатки.СтрокаПрихода.Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПартииТоваровОстатки.СтрокаПрихода.Дата УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезерыСПБ_ВМИ.Номенклатура,
	               |	втРезерыСПБ_ВМИ.Склад,
	               |	втРезерыСПБ_ВМИ.Качество,
	               |	втРезерыСПБ_ВМИ.СтрокаЗаявки,
	               |	втРезерыСПБ_ВМИ.ЗаявкаПокупателя,
	               |	втРезерыСПБ_ВМИ.МаршрутДоставки,
	               |	втРезерыСПБ_ВМИ.БлокировкаКонтрагента,
	               |	втРезерыСПБ_ВМИ.БлокировкаДоговораКонтрагента,
	               |	втРезерыСПБ_ВМИ.БлокировкаГолКонтрагента,
	               |	втРезерыСПБ_ВМИ.БлокировкаДоговораГолКонтрагента,
	               |	втРезерыСПБ_ВМИ.Количество,
	               |	втРезерыСПБ_ВМИ.ПоследняяКорректировка,
	               |	втРезерыСПБ_ВМИ.Контрагент,
	               |	втРезерыСПБ_ВМИ.ДоговорКонтрагента,
	               |	втРезерыСПБ_ВМИ.ТорговаяТочка,
	               |	втРезерыСПБ_ВМИ.VIP,
	               |	втРезерыСПБ_ВМИ.Артикул,
	               |	втРезерыСПБ_ВМИ.Изготовитель,
	               |	втРезерыСПБ_ВМИ.СкладБонусный,
	               |	втРезерыСПБ_ВМИ.СкладСувенирный,
	               |	втРезерыСПБ_ВМИ.НеКонтролироватьКредит,
	               |	втРезерыСПБ_ВМИ.ЕдиницаИзмерения,
	               |	втРезерыСПБ_ВМИ.Коэффициент,
	               |	втРезерыСПБ_ВМИ.IDSite,
	               |	втРезерыСПБ_ВМИ.БлокировкаОтгрузки,
	               |	втРезерыСПБ_ВМИ.ПокупательИзДрБазы,
	               |	втРезерыСПБ_ВМИ.Поставщик
	               |ИЗ
	               |	втРезерыСПБ_ВМИ КАК втРезерыСПБ_ВМИ";
	
	Результаты = Запрос.ВыполнитьПакет();
	ОстаткиСток = Результаты[2].Выгрузить();
	ТоварыСток = Результаты[3].Выгрузить();
	ВыходнаяТаблицаСток = ТоварыСток.СкопироватьКолонки();
	ВыходнаяТаблицаСток.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	ОстаткиВМИ = Результаты[4].Выгрузить();
	ТоварыВМИ = Результаты[5].Выгрузить();
	
	ВыходнаяТаблицаВМИ = ТоварыВМИ.СкопироватьКолонки();
	ВыходнаяТаблицаВМИ.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Для Каждого СтрокаТЧ Из ТоварыСток Цикл 
		Отбор = Новый Структура("Номенклатура,Склад,Качество");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
		Строки = ОстаткиСток.НайтиСтроки(Отбор);
		КоличествоРаспределить = СтрокаТЧ.Количество;
		Индекс = 0;
		Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
			СтрокаОст = Строки.Получить(Индекс);
			СписываемокКоличество = Мин(КоличествоРаспределить, СтрокаОст.Количество);
			Если СписываемокКоличество > 0 Тогда 
				НоваяСтрока = ВыходнаяТаблицаСток.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				
				НоваяСтрока.Количество = СписываемокКоличество;
				НоваяСтрока.Организация = СтрокаОст.Организация;
				
				КоличествоРаспределить = КоличествоРаспределить - СписываемокКоличество;
				СтрокаОст.Количество = СтрокаОст.Количество - СписываемокКоличество;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ТоварыВМИ Цикл 
		Отбор = Новый Структура("Номенклатура,Склад,Качество,Поставщик");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
		Строки = ОстаткиВМИ.НайтиСтроки(Отбор);
		КоличествоРаспределить = СтрокаТЧ.Количество;
		Индекс = 0;
		Пока КоличествоРаспределить > 0 И Индекс < Строки.Количество() Цикл 
			СтрокаОст = Строки.Получить(Индекс);
			СписываемокКоличество = Мин(КоличествоРаспределить, СтрокаОст.Количество);
			Если СписываемокКоличество > 0 Тогда 
				НоваяСтрока = ВыходнаяТаблицаВМИ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				
				НоваяСтрока.Количество = СписываемокКоличество;
				НоваяСтрока.Организация = СтрокаОст.Организация;
				
				КоличествоРаспределить = КоличествоРаспределить - СписываемокКоличество;
				СтрокаОст.Количество = СтрокаОст.Количество - СписываемокКоличество;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(ВыходнаяТаблицаСток);
	МассивТаблиц.Добавить(ВыходнаяТаблицаВМИ);
	
	Для Каждого Таблица Из МассивТаблиц Цикл 
		ВремТаблица = Таблица.Скопировать(, "Контрагент,Организация");
		ВремТаблица.Свернуть("Контрагент,Организация");
		
		Для Каждого СтрокаТЧ Из ВремТаблица Цикл 
			//Заполнение договора
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
			                      |	ДоговорыКонтрагентов.ДоговорПриостановлен КАК БлокировкаДоговораКонтрагента,
			                      |	ДоговорыКонтрагентов.Владелец.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
			                      |			И ДоговорыКонтрагентов.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные)
			                      |		ИЛИ ДоговорыКонтрагентов.НеКонтролироватьЛимит
			                      |		ИЛИ ДоговорыКонтрагентов.Организация.НеКонтролироватьКредит КАК НеКонтролироватьКредит
			                      |ИЗ
			                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			                      |ГДЕ
			                      |	ДоговорыКонтрагентов.Владелец = &Контрагент
			                      |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
			                      |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
			                      |	И ДоговорыКонтрагентов.Организация = &Организация");
			Запрос.УстановитьПараметр("Контрагент", СтрокаТЧ.Контрагент);
			Запрос.УстановитьПараметр("Организация", СтрокаТЧ.Организация);
			
			Строки = Таблица.НайтиСтроки(Новый Структура("Контрагент,Организация", СтрокаТЧ.Контрагент, СтрокаТЧ.Организация));

			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда 
				Для Каждого Строка Из Строки Цикл
					ЗаполнитьЗначенияСвойств(Строка, Выборка);
				КонецЦикла;
			Иначе
				Для Каждого Строка Из Строки Цикл
					Таблица.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыходнаяТаблицаСток", ВыходнаяТаблицаСток);
	Запрос.УстановитьПараметр("ВыходнаяТаблицаВМИ", ВыходнаяТаблицаВМИ);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыходнаяТаблицаСток.Номенклатура,
	               |	ВыходнаяТаблицаСток.Склад,
	               |	ВыходнаяТаблицаСток.Качество,
	               |	ВыходнаяТаблицаСток.СтрокаЗаявки,
	               |	ВыходнаяТаблицаСток.ЗаявкаПокупателя,
	               |	ВыходнаяТаблицаСток.МаршрутДоставки,
	               |	ВыходнаяТаблицаСток.БлокировкаКонтрагента,
	               |	ВыходнаяТаблицаСток.БлокировкаДоговораКонтрагента,
	               |	ВыходнаяТаблицаСток.БлокировкаГолКонтрагента,
	               |	ВыходнаяТаблицаСток.БлокировкаДоговораГолКонтрагента,
	               |	ВыходнаяТаблицаСток.Количество,
	               |	ВыходнаяТаблицаСток.ПоследняяКорректировка,
	               |	ВыходнаяТаблицаСток.Контрагент,
	               |	ВыходнаяТаблицаСток.ДоговорКонтрагента,
	               |	ВыходнаяТаблицаСток.ТорговаяТочка,
	               |	ВыходнаяТаблицаСток.VIP,
	               |	ВыходнаяТаблицаСток.Артикул,
	               |	ВыходнаяТаблицаСток.Изготовитель,
	               |	ВыходнаяТаблицаСток.СкладБонусный,
	               |	ВыходнаяТаблицаСток.СкладСувенирный,
	               |	ВыходнаяТаблицаСток.НеКонтролироватьКредит,
	               |	ВыходнаяТаблицаСток.ЕдиницаИзмерения,
	               |	ВыходнаяТаблицаСток.Коэффициент,
	               |	ВыходнаяТаблицаСток.IDSite,
	               |	ВыходнаяТаблицаСток.БлокировкаОтгрузки,
	               |	ВыходнаяТаблицаСток.ПокупательИзДрБазы
	               |ПОМЕСТИТЬ ВыходнаяТаблицаСток
	               |ИЗ
	               |	&ВыходнаяТаблицаСток КАК ВыходнаяТаблицаСток
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыходнаяТаблицаВМИ.Номенклатура,
	               |	ВыходнаяТаблицаВМИ.Склад,
	               |	ВыходнаяТаблицаВМИ.Качество,
	               |	ВыходнаяТаблицаВМИ.СтрокаЗаявки,
	               |	ВыходнаяТаблицаВМИ.ЗаявкаПокупателя,
	               |	ВыходнаяТаблицаВМИ.МаршрутДоставки,
	               |	ВыходнаяТаблицаВМИ.БлокировкаКонтрагента,
	               |	ВыходнаяТаблицаВМИ.БлокировкаДоговораКонтрагента,
	               |	ВыходнаяТаблицаВМИ.БлокировкаГолКонтрагента,
	               |	ВыходнаяТаблицаВМИ.БлокировкаДоговораГолКонтрагента,
	               |	ВыходнаяТаблицаВМИ.Количество,
	               |	ВыходнаяТаблицаВМИ.ПоследняяКорректировка,
	               |	ВыходнаяТаблицаВМИ.Контрагент,
	               |	ВыходнаяТаблицаВМИ.ДоговорКонтрагента,
	               |	ВыходнаяТаблицаВМИ.ТорговаяТочка,
	               |	ВыходнаяТаблицаВМИ.VIP,
	               |	ВыходнаяТаблицаВМИ.Артикул,
	               |	ВыходнаяТаблицаВМИ.Изготовитель,
	               |	ВыходнаяТаблицаВМИ.СкладБонусный,
	               |	ВыходнаяТаблицаВМИ.СкладСувенирный,
	               |	ВыходнаяТаблицаВМИ.НеКонтролироватьКредит,
	               |	ВыходнаяТаблицаВМИ.ЕдиницаИзмерения,
	               |	ВыходнаяТаблицаВМИ.Коэффициент,
	               |	ВыходнаяТаблицаВМИ.IDSite,
	               |	ВыходнаяТаблицаВМИ.БлокировкаОтгрузки,
	               |	ВыходнаяТаблицаВМИ.ПокупательИзДрБазы
	               |ПОМЕСТИТЬ ВыходнаяТаблицаВМИ
	               |ИЗ
	               |	&ВыходнаяТаблицаВМИ КАК ВыходнаяТаблицаВМИ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезервы.Номенклатура,
	               |	втРезервы.Склад,
	               |	втРезервы.Качество,
	               |	втРезервы.СтрокаЗаявки,
	               |	втРезервы.ЗаявкаПокупателя,
	               |	втРезервы.МаршрутДоставки,
	               |	втРезервы.БлокировкаКонтрагента,
	               |	втРезервы.БлокировкаДоговораКонтрагента,
	               |	втРезервы.БлокировкаГолКонтрагента,
	               |	втРезервы.БлокировкаДоговораГолКонтрагента,
	               |	втРезервы.Количество,
	               |	втРезервы.ПоследняяКорректировка,
	               |	втРезервы.Контрагент,
	               |	втРезервы.ДоговорКонтрагента,
	               |	втРезервы.ТорговаяТочка,
	               |	втРезервы.VIP,
	               |	втРезервы.Артикул,
	               |	втРезервы.Изготовитель,
	               |	втРезервы.СкладБонусный,
	               |	втРезервы.СкладСувенирный,
	               |	втРезервы.НеКонтролироватьКредит,
	               |	втРезервы.ЕдиницаИзмерения,
	               |	втРезервы.Коэффициент,
	               |	втРезервы.IDSite,
	               |	втРезервы.БлокировкаОтгрузки,
	               |	втРезервы.ПокупательИзДрБазы
	               |ПОМЕСТИТЬ втРезервы_НеСПБ
	               |ИЗ
	               |	втРезервы КАК втРезервы
	               |ГДЕ
	               |	НЕ втРезервы.ПокупательИзДрБазы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ втРезервы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыходнаяТаблицаСток.Номенклатура,
	               |	ВыходнаяТаблицаСток.Склад,
	               |	ВыходнаяТаблицаСток.Качество,
	               |	ВыходнаяТаблицаСток.СтрокаЗаявки,
	               |	ВыходнаяТаблицаСток.ЗаявкаПокупателя,
	               |	ВыходнаяТаблицаСток.МаршрутДоставки,
	               |	ВыходнаяТаблицаСток.БлокировкаКонтрагента,
	               |	ВыходнаяТаблицаСток.БлокировкаДоговораКонтрагента,
	               |	ВыходнаяТаблицаСток.БлокировкаГолКонтрагента,
	               |	ВыходнаяТаблицаСток.БлокировкаДоговораГолКонтрагента,
	               |	ВыходнаяТаблицаСток.Количество,
	               |	ВыходнаяТаблицаСток.ПоследняяКорректировка,
	               |	ВыходнаяТаблицаСток.Контрагент,
	               |	ВыходнаяТаблицаСток.ДоговорКонтрагента,
	               |	ВыходнаяТаблицаСток.ТорговаяТочка,
	               |	ВыходнаяТаблицаСток.VIP,
	               |	ВыходнаяТаблицаСток.Артикул,
	               |	ВыходнаяТаблицаСток.Изготовитель,
	               |	ВыходнаяТаблицаСток.СкладБонусный,
	               |	ВыходнаяТаблицаСток.СкладСувенирный,
	               |	ВыходнаяТаблицаСток.НеКонтролироватьКредит,
	               |	ВыходнаяТаблицаСток.ЕдиницаИзмерения,
	               |	ВыходнаяТаблицаСток.Коэффициент,
	               |	ВыходнаяТаблицаСток.IDSite,
	               |	ВыходнаяТаблицаСток.БлокировкаОтгрузки,
	               |	ВыходнаяТаблицаСток.ПокупательИзДрБазы
	               |ПОМЕСТИТЬ втРезервы
	               |ИЗ
	               |	ВыходнаяТаблицаСток КАК ВыходнаяТаблицаСток
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВыходнаяТаблицаВМИ.Номенклатура,
	               |	ВыходнаяТаблицаВМИ.Склад,
	               |	ВыходнаяТаблицаВМИ.Качество,
	               |	ВыходнаяТаблицаВМИ.СтрокаЗаявки,
	               |	ВыходнаяТаблицаВМИ.ЗаявкаПокупателя,
	               |	ВыходнаяТаблицаВМИ.МаршрутДоставки,
	               |	ВыходнаяТаблицаВМИ.БлокировкаКонтрагента,
	               |	ВыходнаяТаблицаВМИ.БлокировкаДоговораКонтрагента,
	               |	ВыходнаяТаблицаВМИ.БлокировкаГолКонтрагента,
	               |	ВыходнаяТаблицаВМИ.БлокировкаДоговораГолКонтрагента,
	               |	ВыходнаяТаблицаВМИ.Количество,
	               |	ВыходнаяТаблицаВМИ.ПоследняяКорректировка,
	               |	ВыходнаяТаблицаВМИ.Контрагент,
	               |	ВыходнаяТаблицаВМИ.ДоговорКонтрагента,
	               |	ВыходнаяТаблицаВМИ.ТорговаяТочка,
	               |	ВыходнаяТаблицаВМИ.VIP,
	               |	ВыходнаяТаблицаВМИ.Артикул,
	               |	ВыходнаяТаблицаВМИ.Изготовитель,
	               |	ВыходнаяТаблицаВМИ.СкладБонусный,
	               |	ВыходнаяТаблицаВМИ.СкладСувенирный,
	               |	ВыходнаяТаблицаВМИ.НеКонтролироватьКредит,
	               |	ВыходнаяТаблицаВМИ.ЕдиницаИзмерения,
	               |	ВыходнаяТаблицаВМИ.Коэффициент,
	               |	ВыходнаяТаблицаВМИ.IDSite,
	               |	ВыходнаяТаблицаВМИ.БлокировкаОтгрузки,
	               |	ВыходнаяТаблицаВМИ.ПокупательИзДрБазы
	               |ИЗ
	               |	ВыходнаяТаблицаВМИ КАК ВыходнаяТаблицаВМИ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втРезервы_НеСПБ.Номенклатура,
	               |	втРезервы_НеСПБ.Склад,
	               |	втРезервы_НеСПБ.Качество,
	               |	втРезервы_НеСПБ.СтрокаЗаявки,
	               |	втРезервы_НеСПБ.ЗаявкаПокупателя,
	               |	втРезервы_НеСПБ.МаршрутДоставки,
	               |	втРезервы_НеСПБ.БлокировкаКонтрагента,
	               |	втРезервы_НеСПБ.БлокировкаДоговораКонтрагента,
	               |	втРезервы_НеСПБ.БлокировкаГолКонтрагента,
	               |	втРезервы_НеСПБ.БлокировкаДоговораГолКонтрагента,
	               |	втРезервы_НеСПБ.Количество,
	               |	втРезервы_НеСПБ.ПоследняяКорректировка,
	               |	втРезервы_НеСПБ.Контрагент,
	               |	втРезервы_НеСПБ.ДоговорКонтрагента,
	               |	втРезервы_НеСПБ.ТорговаяТочка,
	               |	втРезервы_НеСПБ.VIP,
	               |	втРезервы_НеСПБ.Артикул,
	               |	втРезервы_НеСПБ.Изготовитель,
	               |	втРезервы_НеСПБ.СкладБонусный,
	               |	втРезервы_НеСПБ.СкладСувенирный,
	               |	втРезервы_НеСПБ.НеКонтролироватьКредит,
	               |	втРезервы_НеСПБ.ЕдиницаИзмерения,
	               |	втРезервы_НеСПБ.Коэффициент,
	               |	втРезервы_НеСПБ.IDSite,
	               |	втРезервы_НеСПБ.БлокировкаОтгрузки,
	               |	втРезервы_НеСПБ.ПокупательИзДрБазы
	               |ИЗ
	               |	втРезервы_НеСПБ КАК втРезервы_НеСПБ";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция НайтиСлужебныеЗаданияИРТУ(Параметры)
	
	Структура = Новый Структура;
	
	Если Параметры.Довыписка Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		                |	СлужебноеЗадание.Ссылка
		                |ИЗ
		                |	Документ.СлужебноеЗадание КАК СлужебноеЗадание
		                |ГДЕ
		                |	СлужебноеЗадание.Склад = &Склад
		                |	И СлужебноеЗадание.МаршрутДоставки = &МаршрутДоставки
		                |	И НЕ СлужебноеЗадание.ПометкаУдаления
		                |	И СлужебноеЗадание.ДатаОтгрузки = &ДатаОтгрузки
		                |	И СлужебноеЗадание.ВремяОтгрузки = &ВремяОтгрузки
		                |	И НЕ СлужебноеЗадание.флДопЗадание";
		Запрос.УстановитьПараметр("Склад", Параметры.Склад);
		Запрос.УстановитьПараметр("МаршрутДоставки", Параметры.МаршрутДоставки);
		Запрос.УстановитьПараметр("ДатаОтгрузки", Дата(Год(Параметры.ДатаОтгрузки), Месяц(Параметры.ДатаОтгрузки), День(Параметры.ДатаОтгрузки),0,0,0));
		Запрос.УстановитьПараметр("ВремяОтгрузки", Дата(1,1,1, Час(Параметры.ДатаОтгрузки), Минута(Параметры.ДатаОтгрузки), Секунда(Параметры.ДатаОтгрузки)));
		Результат = Запрос.Выполнить();
		СлужебныеЗадания = Результат.Выгрузить().ВыгрузитьКолонку(0);
	Иначе
		СлужебныеЗадания = Новый Массив;
	КонецЕсли;
	
	Структура.Вставить("СлужебныеЗадания", СлужебныеЗадания);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебноеЗаданиеПокупатели.НомерСтроки,
	               |	СлужебноеЗаданиеПокупатели.Реализация,
	               |	СлужебноеЗаданиеПокупатели.Реализация.Контрагент КАК Контрагент,
	               |	СлужебноеЗаданиеПокупатели.Реализация.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	СлужебноеЗаданиеПокупатели.Реализация.МаршрутДоставки КАК МаршрутДоставки,
	               |	СлужебноеЗаданиеПокупатели.Реализация.Склад КАК Склад,
	               |	СлужебноеЗаданиеПокупатели.Реализация.Проведен КАК Проведен,
	               |	СлужебноеЗаданиеПокупатели.Реализация.ДатаОплаты КАК ДатаОплаты,
	               |	СлужебноеЗаданиеПокупатели.Ссылка.Организация КАК Организация
	               |ИЗ
	               |	Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
	               |ГДЕ
	               |	СлужебноеЗаданиеПокупатели.Ссылка = &Ссылка
	               |	И СлужебноеЗаданиеПокупатели.Реализация.СтатусДокумента = &СтатусДокумента
	               |	И НАЧАЛОПЕРИОДА(СлужебноеЗаданиеПокупатели.Реализация.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	               |	И &Довыписка";
	Запрос.УстановитьПараметр("Ссылка", ?(СлужебныеЗадания.Количество() = 0, Неопределено, СлужебныеЗадания.Получить(0)));
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СтатусДокумента", Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка);
	Запрос.УстановитьПараметр("Довыписка", Параметры.Довыписка);
	
	ТаблицаРеализаций = Запрос.Выполнить().Выгрузить();
	Структура.Вставить("ТаблицаРеализаций", ТаблицаРеализаций);
	
	Возврат Структура;
	
КонецФункции

Товары = Новый ТаблицаЗначений;

Дата = ТекущаяДата();

мПричинаИсключенияЛимитОтгрузки = "Превышение лимита отгрузки";