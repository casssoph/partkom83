Перем Дата;
Перем Товары Экспорт;

Процедура ВыполнитьРегламентноеЗадание() Экспорт 
	ПараметрыФормированияСЗ = ПараметрыФормированияСЗ();
	Для Каждого СтрокаП Из ПараметрыФормированияСЗ Цикл 
		Параметры = ЗаполнитьПараметрыОбработкиСогласноОснованию(СтрокаП.ПараметрФормированияСЗ);	
		Если Не Параметры.Запускать Тогда 
			Возврат;
		КонецЕсли;
		
		ЗаполнитьТаблицы(Параметры);
		СоздатьДокументыСЗ(Параметры);
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьДокументыСЗ(Параметры) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры.Довыписка Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		                |	СлужебноеЗадание.Ссылка
		                |ИЗ
		                |	Документ.СлужебноеЗадание КАК СлужебноеЗадание
		                |ГДЕ
		                |	СлужебноеЗадание.Склад = &Склад
		                |	И СлужебноеЗадание.МаршрутДоставки = &МаршрутДоставки
		                |	И НЕ СлужебноеЗадание.ПометкаУдаления
		                |	И СлужебноеЗадание.ДатаОтгрузки = &ДатаОтгрузки
		                |	И СлужебноеЗадание.ВремяОтгрузки = &ВремяОтгрузки
		                |	И НЕ СлужебноеЗадание.флДопЗадание";
		Запрос.УстановитьПараметр("Склад", Параметры.Склад);
		Запрос.УстановитьПараметр("МаршрутДоставки", Параметры.МаршрутДоставки);
		Запрос.УстановитьПараметр("ДатаОтгрузки", Дата(Год(Параметры.ДатаОтгрузки), Месяц(Параметры.ДатаОтгрузки), День(Параметры.ДатаОтгрузки),0,0,0));
		Запрос.УстановитьПараметр("ВремяОтгрузки", Дата(1,1,1, Час(Параметры.ДатаОтгрузки), Минута(Параметры.ДатаОтгрузки), Секунда(Параметры.ДатаОтгрузки)));
		Результат = Запрос.Выполнить();
		СлужебныеЗадания = Результат.Выгрузить().ВыгрузитьКолонку(0);
	Иначе
		СлужебныеЗадания = Новый Массив;
	КонецЕсли;
	
	//При довыписке не добвляются найденные документы
	
	//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический);
	
	Если СлужебныеЗадания.Количество() = 0 Тогда 
		ДокСЗ = Документы.СлужебноеЗадание.СоздатьДокумент();
		ДокСЗ.Дата = ТекущаяДата();
		ДокСЗ.МаршрутДоставки = Параметры.МаршрутДоставки;
		ДокСЗ.ТипДоставки = Параметры.ТипДоставки;
		ДокСЗ.Водитель = Параметры.Водитель;
		ДокСЗ.ТранспортнаяКомпания = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокСЗ.Водитель,"ТранспортнаяКомпания");
		ДокСЗ.Ответственный = ПолныеПрава.ТекущийПользователь();
		ДокСЗ.флДопЗадание = Параметры.Дополнительное;
		ДокСЗ.Склад = Параметры.Склад;
	ИначеЕсли Параметры.Довыписка Тогда 
		ДокСЗ = СлужебныеЗадания.Получить(0).ПолучитьОбъект();
	КонецЕсли;
	ДокСЗ.СтатусДокумента = Справочники.СтатусыДокументов.СлужебноеЗаданиеИдетСборка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебноеЗаданиеПокупатели.НомерСтроки,
	               |	СлужебноеЗаданиеПокупатели.Реализация,
	               |	СлужебноеЗаданиеПокупатели.Реализация.Контрагент КАК Контрагент,
	               |	СлужебноеЗаданиеПокупатели.Реализация.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	СлужебноеЗаданиеПокупатели.Реализация.МаршрутДоставки КАК МаршрутДоставки,
	               |	СлужебноеЗаданиеПокупатели.Реализация.Склад КАК Склад,
	               |	СлужебноеЗаданиеПокупатели.Реализация.Проведен КАК Проведен
	               |ИЗ
	               |	Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
	               |ГДЕ
	               |	СлужебноеЗаданиеПокупатели.Ссылка = &Ссылка
	               |	И СлужебноеЗаданиеПокупатели.Реализация.СтатусДокумента = &СтатусДокумента
	               |	И НАЧАЛОПЕРИОДА(СлужебноеЗаданиеПокупатели.Реализация.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	               |	И &Довыписка";
	Запрос.УстановитьПараметр("Ссылка", ?(СлужебныеЗадания.Количество() = 0, Неопределено, СлужебныеЗадания.Получить(0)));
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СтатусДокумента", Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка);
	Запрос.УстановитьПараметр("Довыписка", Параметры.Довыписка);
	ТаблицаРеализаций = Запрос.Выполнить().Выгрузить();
	
	Если Параметры.Свойство("Основание") Тогда 
		ДеньНедели = ДеньНедели(Дата);
		ПараметрыОснования = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Параметры.Основание,"ВремяЗапуска" + СокрлП(ДеньНедели) + ",ВремяНачалаУпаковки" + СокрлП(ДеньНедели) + ",ВремОкончанияДовыписки" + СокрлП(ДеньНедели) + ",ВремОтгрузки" + СокрлП(ДеньНедели));
		
		ДокСЗ.ДатаСдачиЗадания	= Дата;
		ДокСЗ.ВремяСдачиЗадания  = ПараметрыОснования["ВремяЗапуска" + СокрЛП(ДеньНедели)];
		ДокСЗ.ДатаНачалаУпаковки = Дата;
		ДокСЗ.ВремяНачалаУпаковки  = ПараметрыОснования["ВремяНачалаУпаковки" + СокрЛП(ДеньНедели)];
		ДокСЗ.ДатаОкончанияДовыписки = Дата;
		ДокСЗ.ВремяОкончанияДовыписки  = ПараметрыОснования["ВремОкончанияДовыписки" + СокрЛП(ДеньНедели)];
		ДокСЗ.ДатаОтгрузки = Дата;
		ДокСЗ.ВремяОтгрузки  = ПараметрыОснования["ВремОтгрузки" + СокрЛП(ДеньНедели)];
		ДокСЗ.Основание = Параметры.Основание;
	Иначе
		ДокСЗ.ДатаОтгрузки = Дата(Год(Параметры.ДатаОтгрузки), Месяц(Параметры.ДатаОтгрузки), День(Параметры.ДатаОтгрузки), 0, 0, 0) ;
		ДокСЗ.ВремяОтгрузки  = Дата(1, 1, 1, Час(Параметры.ДатаОтгрузки), Минута(Параметры.ДатаОтгрузки), Секунда(Параметры.ДатаОтгрузки)) ;
	КонецЕсли;
		
	ДокСЗ.Организация = Константы.ОрганизацияПоУмолчаниюБезнал.Получить();
	ДокСЗ.Филиал = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСЗ.Склад, "Филиал");
	
	//Удаляем нулевые строки
	Строки = Товары.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТЧ Из Строки Цикл 
		Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
		
	Для Каждого СтрокаП Из Покупатели Цикл 
		Строки = Товары.НайтиСтроки(Новый Структура("Контрагент", СтрокаП.Контрагент));
		Если Строки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ТоварыКонтрагента = Товары.Скопировать(Строки);
		ВремТаблица = ТоварыКонтрагента.Скопировать(, "Склад,ДоговорКонтрагента,МаршрутДоставки");
		
		ВремТаблица.Свернуть("Склад,ДоговорКонтрагента,МаршрутДоставки");
		Для Каждого СтрокаТЧ Из ВремТаблица Цикл 
			Отбор = Новый Структура("Склад,ДоговорКонтрагента,МаршрутДоставки");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			Если Параметры.Довыписка Тогда 
				СтрокиР = ТаблицаРеализаций.НайтиСтроки(Отбор);
				Если СтрокиР.Количество() = 0 Тогда
					ДокументРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Иначе
					Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокиР.Получить(0).Реализация, "Проведен") Тогда 
						Продолжить;
					КонецЕсли;
					ДокументРеализация = СтрокиР.Получить(0).Реализация.ПолучитьОбъект(); 
				КонецЕсли;
			Иначе
				ДокументРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			КонецЕсли;
			
			ДокументРеализация.Дата = Дата;
			
			Если ДокументРеализация.ЭтоНовый() Тогда 
				ЗаполнитьЗначенияСвойств(ДокументРеализация, СтрокаТЧ);
			КонецЕсли;
			
			ДокументРеализация.Контрагент = СтрокаП.Контрагент;
			ДокументРеализация.ТорговаяТочка = СтрокаП.Контрагент.ОсновнаяТорговаяТочка;
			ДокументРеализация.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета");
			ДокументРеализация.ТипДоставки = Параметры.ТипДоставки;
			ДокументРеализация.КурсВзаиморасчетов = 1;      
			ДокументРеализация.КратностьВзаиморасчетов = 1;  
			ДокументРеализация.ДатаДоставки = Дата(Год(ДокСЗ.ДатаОтгрузки), Месяц(ДокСЗ.ДатаОтгрузки), День(ДокСЗ.ДатаОтгрузки), Час(ДокСЗ.ВремяОтгрузки), Минута(ДокСЗ.ВремяОтгрузки), Секунда(ДокСЗ.ВремяОтгрузки));
		    ДокументРеализация.Организация = ДокументРеализация.ДоговорКонтрагента.Организация;
			ДокументРеализация.БанковскийСчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализация.Организация, "ОсновнойБанковскийСчет"); 
			ДокументРеализация.БанковскийСчет = ДокументРеализация.БанковскийСчетОрганизации; 
			ДокументРеализация.УчитыватьНДС = ДокументРеализация.Организация.УчитыватьНДС;
			ДокументРеализация.СуммаВключаетНДС = Истина;
			ДокументРеализация.Ответственный = ПолныеПрава.ТекущийПользователь();
			ДокументРеализация.Филиал = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализация.Склад, "Филиал");
			ДокументРеализация.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка;
			
			Если ЗначениеЗаполнено(ДокументРеализация.ТорговаяТочка) Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ТорговаяТочка", ДокументРеализация.ТорговаяТочка);
				Запрос.УстановитьПараметр("ВидМенеджера", Перечисления.ВидыМенеджеров.Продажи);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Р.Менеджер
				|ИЗ
				|	РегистрСведений.МенеджерыТорговыхТочек.СрезПоследних(
				|			,
				|			ТорговаяТочка = &ТорговаяТочка
				|				И ВидМенеджера = &ВидМенеджера) КАК Р";
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() тогда
					ДокументРеализация.Менеджер = Выборка.Менеджер;
				КонецЕсли;
				
			КонецЕсли;
			
			мКлючСвязи = 1;
			ВремТаблица2 = ДокументРеализация.Товары.Выгрузить(, "КлючСвязи");
			ВремТаблица2.Сортировать("КлючСвязи Убыв");
			Если ВремТаблица2.Количество() > 0 Тогда 
				мКлючСвязи = ВремТаблица2.Получить(0).КлючСвязи + 1;
			КонецЕсли;
			
			СтрокиТоваров = ТоварыКонтрагента.НайтиСтроки(Отбор);
			Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл 
				НоваяСтрока = ДокументРеализация.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
				
				Если Не ДокументРеализация.УчитыватьНДС Тогда 
					НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;	
				КонецЕсли;
				
				НоваяСтрока.КоличествоПлан = НоваяСтрока.Количество;
				НоваяСтрока.КлючСвязи = мКлючСвязи;
				мКлючСвязи = мКлючСвязи + 1;
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				
				ОкруглениеДо10Рублей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПолныеПрава.ТекущийПользователь(), "ОкруглениеДо10Рублей");
				РежимОкругленияПользователя = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПолныеПрава.ТекущийПользователь(), "ОкруглятьЦеныВЗаявкахИРеализациях"); 
				
				Если ОкруглениеДо10Рублей Тогда 
					НоваяСтрока.Сумма = Окр(НоваяСтрока.Сумма, -1);
					ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ДокументРеализация, ПолныеПрава.ТекущийПользователь(), Ложь, Истина, Ложь, Ложь, "Товары");
				ИначеЕсли Не РежимОкругленияПользователя = 0 Тогда  	
					НоваяСтрока.Сумма = Окр(НоваяСтрока.Сумма, РежимОкругленияПользователя);
						ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ДокументРеализация, ПолныеПрава.ТекущийПользователь(), Ложь, Истина, Ложь, Ложь, "Товары");
				КонецЕсли;
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ДокументРеализация);
				
			КонецЦикла;
			
			Попытка 
				
				ДокументРеализация.ДополнительныеСвойства.Вставить("НеРегистрироватьВОбменСТоплог");  //Регистрация после создания служебного задания
				
				//Если СтрокаП.ДолгПревышаетРазрешенный Тогда
				//	ДокументРеализация.Записать(РежимЗаписиДокумента.Запись); //временно отключено Валиахметов А.А. 05.06.2018
				//Иначе
					ДокументРеализация.Записать(РежимЗаписиДокумента.Проведение);
				//КонецЕсли;
			Исключение
				Сообщить("Не удалось создать РТУ на контрагента " + СтрокаТЧ.ДоговорКонтрагента.Владелец);
				Продолжить;
			КонецПопытки;
			
			СтрокаР = ДокСЗ.Покупатели.Найти(ДокументРеализация.Ссылка, "Реализация");
			Если СтрокаР = Неопределено Тогда 
				СтрокаР = ДокСЗ.Покупатели.Добавить();
			КонецЕсли;
			СтрокаР.Реализация = ДокументРеализация.Ссылка;
			СтрокаР.ТорговаяТочка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаР.Реализация, "ТорговаяТочка");
			СтрокаР.Регион = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаР.ТорговаяТочка,"Регион");
			СтрокаР.ОрганизацияОплаты = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаР.Реализация,"ДоговорКонтрагента.Организация");
		КонецЦикла;
	КонецЦикла;
	
	Если Не Параметры.Довыписка Тогда 
		Для Каждого СтрокаД Из ЭтотОбъект.ДокументыДобавляемые Цикл 
			СтрокаР = ДокСЗ.Покупатели.Найти(ДокументРеализация.Ссылка, "Реализация");
			Если СтрокаР <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаР = ДокСЗ.Покупатели.Добавить();
			СтрокаР.Реализация = СтрокаД.Документ;
			СтрокаР.ТорговаяТочка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаР.Реализация, "ТорговаяТочка");
			СтрокаР.Регион = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаР.ТорговаяТочка,"Регион");
			СтрокаР.ОрганизацияОплаты = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаР.Реализация,"ДоговорКонтрагента.Организация");
		КонецЦикла;
	КонецЕсли;
	
	ДокСЗ.Авто = Параметры.Довыписка;
	Если ДокСЗ.Покупатели.Количество() > 0 Тогда 
		ДокСЗ.Записать(РежимЗаписиДокумента.Запись);
		Параметры.Вставить("СлужебноеЗадание", ДокСЗ.Ссылка);
		
		// Регистрация в ТопЛог
		
		Узел = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, 3);
		Если ЗначениеЗаполнено(Узел) Тогда 
			Для Каждого СтрокаТЧ Из ДокСЗ.Покупатели Цикл 
				Если СтрокаТЧ.Реализация.Проведен Тогда 
					ПланыОбмена.ЗарегистрироватьИзменения(Узел, СтрокаТЧ.Реализация);
				КонецЕсли;
			КонецЦикла;
			Сообщить("Документы зарегистрированы в обмене с Топ Лог");
		Иначе
			Сообщить("Не найден узел обмена для выгрузки в Топ Лог");
		КонецЕсли;
		
	Иначе
		Сообщить("Нет данных для создания служебного задания");
	КонецЕсли;
	Если Параметры.Довыписка Тогда 						
		НаборЗаписи  = РегистрыСведений.ДатыФормированияСлужебныхЗаданий.СоздатьНаборЗаписей();
		
		НаборЗаписи.Отбор.ПараметрФормированияСЗ.Установить(Параметры.Основание);
		
		Наб = НаборЗаписи.Добавить();
		Наб.ПараметрФормированияСЗ = Параметры.Основание;
		Наб.ДатаФормирования = Дата;
		
		НаборЗаписи.Записать();
	КонецЕсли;
	
	
	//ЗафиксироватьТранзакцию();
	
	Товары.Очистить();
	Покупатели.Очистить();
	ИсключенныеПокупатели.Очистить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//Код взят у Пушкина Дениса
Функция ПараметрыФормированияСЗ() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ  *
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Ссылка КАК Задание_Ссылка,
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Склад КАК Задание_Склад,
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.МаршрутДоставки КАК Задание_МаршрутДоставки,
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Водитель КАК Задание_Водитель,
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ТипДоставки КАК Задание_ТипДоставки,
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ТипДоставки КАК Задание_флДополнительнаяДоставка
	//|ПОМЕСТИТЬ АктуальныеЗадания
	|ИЗ
	|	РегистрСведений.ДатыФормированияСлужебныхЗаданий КАК ДатыФормированияСлужебныхЗаданий
	
	|ГДЕ
	//  список параметров берем из регистра, куда пишутся строки при записи/перезаписи соответствющего элемента справочника,
	//  т.е. регистр содержит список ссылок на все существующие задания в привязке к дате обработки
	//  в случае, если формирования СЗ по этому заданию ранее не осущетсвлялось, дата будет пустой 1,1,1,0,0,0
	
	//  проверим, подходят ли параметры по дате/времени
	
	//  подходит ли по дню недели
	|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели" + СокрЛП(ДеньНедели(Дата)) + " = ИСТИНА
	//|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ДниНедели1 = ИСТИНА
	
	//  чтобы запуск состоялся не раньше времени, указанного в спр.параметры запуска
	|	И &ДтТек >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска" + СокрЛП(ДеньНедели(Дата)) + ", МИНУТА))
	//|	И &ДтТек >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремяЗапуска1, МИНУТА))
	
	//  чтобы с момента последнего успешного запуска/обработки задания прошло не менее, например, 30ти минут
	|	И РАЗНОСТЬДАТ(ДатыФормированияСлужебныхЗаданий.ДатаФормирования, &ДтТек, МИНУТА) > ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Интервал
	|	И ДатыФормированияСлужебныхЗаданий.ДатаФормирования < &ДтТек
	
	//  чтобы запуск состоялся не позже времени, указанного в спр.параметры запуска
	|	И &ДтТек <= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ВремОкончанияДовыписки" + СокрЛП(ДеньНедели(Дата)) + ", МИНУТА))
	
	//1с7:
	// проверка на текущее время - глупо создавать документ, если время отгрузки уже позади
	//	//Если ДатаПолучения = локТекущаяДата Тогда
	//	//	// значит время не может быть меньше текущего времени
	//	//	текЧас = "";
	//	//	текМин = "";
	//	//	ТекущееВремя(текЧас, текМин);
	//	//	Если (Часы + Минуты/60) < (текЧас + текМин/60) Тогда
	//	//		Предупреждение("Задание не создано!
	//	//		|Указано время отгрузки меньше текущего и дата отгрузки - ""Сегодня""!
	//	//		|Или увеличьте время, или увеличьте дату отгрузки!", 10);
	//	//		Возврат 0;
	//	//	КонецЕсли;
	//	//КонецЕсли;
	
	//	необходимые условия
	|	И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.АвтоСозданиеЗаданий = ИСТИНА
	|	И ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.ПометкаУдаления = ЛОЖЬ
	
	|УПОРЯДОЧИТЬ ПО
	|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.МаршрутДоставки,   
	|	ДатыФормированияСлужебныхЗаданий.ПараметрФормированияСЗ.Склад
	|";
	
	Запрос.УстановитьПараметр("ДтТек", Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ЗаполнитьПараметрыОбработкиСогласноОснованию(ПараметрФормированияСЗ) экспорт
	Параметры = Новый Структура;
		
	ТекДеньНедели = ДеньНедели(Дата);
	
	ПараметрыОснования = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПараметрФормированияСЗ,"Код,Склад,МаршрутДоставки,Водитель,ТипДоставки,флДополнительнаяДоставка,ДниНедели,ДниНедели" + ТекДеньНедели + ",флНеУдалятьМинСум" + ТекДеньНедели+ ",ВремОтгрузки" + ТекДеньНедели);
	
	пРасписание = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыОснования.ДниНедели,";");
	Если пРасписание[ТекДеньНедели - 1] = 0 тогда 
		Параметры.Вставить("Запускать", Ложь);
	Иначе
		Параметры.Вставить("Запускать", Истина);
	КонецЕсли;
	
	//Для Каждого КлючЗначение Из ПараметрыОснования Цикл 
	//	Параметры.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	//КонецЦикла;
	//
	Параметры.Вставить("Склад", ПараметрыОснования.Склад);
	Параметры.Вставить("МаршрутДоставки", ПараметрыОснования.МаршрутДоставки);
	Параметры.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Параметры.Вставить("ОтборМаршрутДоставки", 0);
	Параметры.Вставить("НеУдалятьМинСум", ПараметрыОснования["флНеУдалятьМинСум" + ТекДеньНедели]);
	Параметры.Вставить("СнижатьДолгКонтрагентаПоБезналРасчету", 20);
	Параметры.Вставить("МинимальнаяПроцентНаценки", 0);
	Параметры.Вставить("НеУчитыватьПокупателейНеработающихВВыходные", Ложь);
	Параметры.Вставить("ТолькоПокупателиДополнительнаяДоставка", ПараметрыОснования.флДополнительнаяДоставка);
	Параметры.Вставить("НеИскать", Истина);
	Параметры.Вставить("ГлубинаДней", 0);
	Параметры.Вставить("Водитель", ПараметрыОснования.Водитель);
	Параметры.Вставить("Дополнительное", Ложь);
	Параметры.Вставить("ТипДоставки", ПараметрыОснования.ТипДоставки);
	Параметры.Вставить("Довыписка", Истина);
	Параметры.Вставить("Основание", ПараметрФормированияСЗ);
	
	
	лВремОтгрузки = ПараметрыОснования["ВремОтгрузки" + ТекДеньНедели];
	
	ДатаОтгрузки = НачалоДня(ТекущаяДата()) + Час(лВремОтгрузки)*60*60 + Минута(лВремОтгрузки)*60 + Секунда(лВремОтгрузки);	
	Параметры.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	
	Возврат Параметры;
	
	

КонецФункции
// Конец Код взять у Пушкина Дениса

Процедура ЗаполнитьТаблицы(Параметры) Экспорт 
	
	Дата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РезервыТоваровОстатки.Номенклатура,
	               |	РезервыТоваровОстатки.Склад,
	               |	РезервыТоваровОстатки.Качество,
	               |	РезервыТоваровОстатки.СтрокаЗаявки,
	               |	РезервыТоваровОстатки.СтрокаЗаявки.Заявка КАК ЗаявкаПокупателя,
	               |	ВЫБОР
	               |		КОГДА &ОтборМаршрутДоставки
	               |			ТОГДА &МаршрутДоставки
	               |		ИНАЧЕ (ВЫБОР
	               |				КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |					ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |				ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |			КОНЕЦ).ОсновнаяТорговаяТочка.МаршрутДоставки
	               |	КОНЕЦ КАК МаршрутДоставки,
	               |	(ВЫБОР
	               |			КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |				ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |			ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |		КОНЕЦ).Блокировка_Отгрузок_Дата < &ТекущаяДата
	               |		И (ВЫБОР
	               |			КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |				ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |			ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |		КОНЕЦ).Блокировка_Отгрузок_Дата <> ДАТАВРЕМЯ(1, 1, 1) КАК БлокировкаКонтрагента,
	               |	ВЫБОР
	               |		КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента.ДоговорПриостановлен ЕСТЬ NULL
	               |			ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ДоговорКонтрагента.ДоговорПриостановлен
	               |		ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента.ДоговорПриостановлен
	               |	КОНЕЦ КАК БлокировкаДоговораКонтрагента,
	               |	ЕСТЬNULL((ВЫБОР
	               |				КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент ЕСТЬ NULL
	               |					ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент
	               |				ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент
	               |			КОНЕЦ).Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(3999, 12, 31)) < &ТекущаяДата
	               |		И ЕСТЬNULL((ВЫБОР
	               |				КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент ЕСТЬ NULL
	               |					ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент
	               |				ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент
	               |			КОНЕЦ).Блокировка_Отгрузок_Дата, ДАТАВРЕМЯ(3999, 12, 31)) <> ДАТАВРЕМЯ(1, 1, 1) КАК БлокировкаГолКонтрагента,
	               |	ЕСТЬNULL((ВЫБОР
	               |			КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента ЕСТЬ NULL
	               |				ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента
	               |			ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ГоловнойКонтрагент.ОсновнойДоговорКонтрагента
	               |		КОНЕЦ).ДоговорПриостановлен, ЛОЖЬ) КАК БлокировкаДоговораГолКонтрагента,
	               |	РезервыТоваровОстатки.КоличествоОстаток КАК Количество,
	               |	ВЫБОР
	               |		КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка = ЗНАЧЕНИЕ(Документ.КорректировкаЗаявкиПокупателя.ПустаяСсылка)
	               |			ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка
	               |		ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка
	               |	КОНЕЦ КАК ПоследняяКорректировка,
	               |	ВЫБОР
	               |		КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |			ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |		ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |	КОНЕЦ КАК Контрагент,
	               |	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	               |	(ВЫБОР
	               |		КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |			ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |		ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |	КОНЕЦ).ОсновнаяТорговаяТочка КАК ТорговаяТочка,
	               |	(ВЫБОР
	               |		КОГДА РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент ЕСТЬ NULL
	               |			ТОГДА РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Контрагент
	               |		ИНАЧЕ РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Контрагент
	               |	КОНЕЦ).ОсновнаяТорговаяТочка.VIP КАК VIP,
	               |	РезервыТоваровОстатки.Номенклатура.Артикул КАК Артикул,
	               |	РезервыТоваровОстатки.Номенклатура.Изготовитель КАК Изготовитель,
	               |	РезервыТоваровОстатки.Склад.Бонусный,
	               |	РезервыТоваровОстатки.Склад.Сувенирный,
	               |	ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента.ВидОплаты, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ДоговорКонтрагента.ВидОплаты) = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные)
	               |		ИЛИ ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.ДоговорКонтрагента.НеКонтролироватьЛимит, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.ДоговорКонтрагента.НеКонтролироватьЛимит)
	               |		ИЛИ ЕСТЬNULL(РезервыТоваровОстатки.СтрокаЗаявки.ПоследняяКорректировка.Организация.НеКонтролироватьКредит, РезервыТоваровОстатки.СтрокаЗаявки.Заявка.Организация.НеКонтролироватьКредит) КАК НеКонтролироватьКредит,
	               |	РезервыТоваровОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	РезервыТоваровОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	               |	РезервыТоваровОстатки.СтрокаЗаявки.IDSite КАК IDSite,
	               |	РезервыТоваровОстатки.СтрокаПрихода
	               |ПОМЕСТИТЬ втРезервы
	               |ИЗ
	               |	РегистрНакопления.РезервыТоваров.Остатки(
	               |			,
	               |			ВЫБОР
	               |					КОГДА &ОтборПоФизСкладу
	               |						ТОГДА Склад.ФизическийСклад = &Склад
	               |					ИНАЧЕ Склад = &Склад
	               |				КОНЕЦ
	               |				И НЕ Склад.Заблокирован
	               |				И ВЫБОР
	               |					КОГДА &ОтборМаршрутДоставки
	               |						ТОГДА (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки = &МаршрутДоставки
	               |								ИЛИ (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки2 = &МаршрутДоставки
	               |								ИЛИ (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки3 = &МаршрутДоставки
	               |					КОГДА &ОтборМаршрутДоставкиГруппа
	               |						ТОГДА (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки В ИЕРАРХИИ (&МаршрутДоставки)
	               |								ИЛИ (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки2 В ИЕРАРХИИ (&МаршрутДоставки)
	               |								ИЛИ (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент.ОсновнаяТорговаяТочка, СтрокаЗаявки.Заявка.Контрагент.ОсновнаяТорговаяТочка)).МаршрутДоставки3 В ИЕРАРХИИ (&МаршрутДоставки)
	               |					ИНАЧЕ ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент, СтрокаЗаявки.Заявка.Контрагент) = &Контрагент
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &НеУчитыватьПокупателейНеработающихВВыходные
	               |						ТОГДА НЕ (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент, СтрокаЗаявки.Заявка.Контрагент)).РежРаботы_вВых
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &ТолькоПокупателиДополнительнаяДоставка
	               |						ТОГДА (ЕСТЬNULL(СтрокаЗаявки.ПоследняяКорректировка.Контрагент, СтрокаЗаявки.Заявка.Контрагент)).ДополнительнаяДоставка
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК РезервыТоваровОстатки
	               |ГДЕ
	               |	РезервыТоваровОстатки.КоличествоОстаток > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаявкаПокупателяТовары.СтрокаЗаявки,
	               |	ЗаявкаПокупателяТовары.Цена - ЗаявкаПокупателяТовары.ПроцентСкидкиНаценки / 100 КАК Цена,
	               |	ЗаявкаПокупателяТовары.КомментарийИзСайта,
	               |	НЕ ЗаявкаПокупателяТовары.Ссылка.УчитыватьНДС
	               |		ИЛИ ЗаявкаПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ЗаявкаПокупателяТовары.СтавкаНДС,
	               |	ЗаявкаПокупателяТовары.ПроцентСкидкиНаценки
	               |ПОМЕСТИТЬ втЦены
	               |ИЗ
	               |	Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
	               |ГДЕ
	               |	(ЗаявкаПокупателяТовары.Ссылка, ЗаявкаПокупателяТовары.СтрокаЗаявки) В
	               |			(ВЫБРАТЬ
	               |				втРезервы.ПоследняяКорректировка,
	               |				втРезервы.СтрокаЗаявки
	               |			ИЗ
	               |				втРезервы)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки,
	               |	КорректировкаЗаявкиПокупателяТовары.Цена - КорректировкаЗаявкиПокупателяТовары.ПроцентСкидкиНаценки / 100,
	               |	КорректировкаЗаявкиПокупателяТовары.КомментарийИзСайта,
	               |	НЕ КорректировкаЗаявкиПокупателяТовары.Ссылка.УчитыватьНДС
	               |		ИЛИ КорректировкаЗаявкиПокупателяТовары.Ссылка.СуммаВключаетНДС,
	               |	КорректировкаЗаявкиПокупателяТовары.СтавкаНДС,
	               |	КорректировкаЗаявкиПокупателяТовары.ПроцентСкидкиНаценки
	               |ИЗ
	               |	Документ.КорректировкаЗаявкиПокупателя.Товары КАК КорректировкаЗаявкиПокупателяТовары
	               |ГДЕ
	               |	(КорректировкаЗаявкиПокупателяТовары.Ссылка, КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки) В
	               |			(ВЫБРАТЬ
	               |				втРезервы.ПоследняяКорректировка,
	               |				втРезервы.СтрокаЗаявки
	               |			ИЗ
	               |				втРезервы)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВзаиморасчетыОстатки.ДоговорКонтрагента.Владелец КАК Контрагент
	               |ПОМЕСТИТЬ втКонтрагентыСПросрочПлатежом
	               |ИЗ
	               |	РегистрНакопления.Взаиморасчеты.Остатки(
	               |			,
	               |			ДоговорКонтрагента.Владелец В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						втРезервы.Контрагент
	               |					ИЗ
	               |						втРезервы)
	               |				И ДокументРасчетов ССЫЛКА Документ.РеализацияТоваровУслуг
	               |				И КОНЕЦПЕРИОДА(ВЫРАЗИТЬ(ДокументРасчетов КАК Документ.РеализацияТоваровУслуг).ДатаОплаты, ДЕНЬ) < &ТекущаяДата) КАК ВзаиморасчетыОстатки
	               |ГДЕ
	               |	ВзаиморасчетыОстатки.СуммаУпрОстаток > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВзаиморасчетыОстатки.ДоговорКонтрагента, ДепозитыКонтрагентовОстатки.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	               |	ЕСТЬNULL(ВзаиморасчетыОстатки.СуммаУпрОстаток, 0) + ЕСТЬNULL(ДепозитыКонтрагентовОстатки.СуммаУпрОстаток, 0) КАК СуммаДолга
	               |ПОМЕСТИТЬ втДолги
	               |ИЗ
	               |	РегистрНакопления.Взаиморасчеты.Остатки(
	               |			,
	               |			ДоговорКонтрагента В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					втРезервы.ДоговорКонтрагента
	               |				ИЗ
	               |					втРезервы)) КАК ВзаиморасчетыОстатки,
	               |	РегистрНакопления.ДепозитыКонтрагентов.Остатки(
	               |			,
	               |			ДоговорКонтрагента В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					втРезервы.ДоговорКонтрагента
	               |				ИЗ
	               |					втРезервы)) КАК ДепозитыКонтрагентовОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезервы.Номенклатура,
	               |	втРезервы.Склад,
	               |	втРезервы.Качество,
	               |	втРезервы.СтрокаЗаявки,
	               |	втРезервы.МаршрутДоставки,
	               |	втРезервы.БлокировкаКонтрагента,
	               |	втРезервы.БлокировкаДоговораКонтрагента,
	               |	втРезервы.БлокировкаГолКонтрагента,
	               |	втРезервы.БлокировкаДоговораГолКонтрагента,
	               |	втРезервы.Количество,
	               |	втРезервы.ПоследняяКорректировка,
	               |	втЦены.Цена,
	               |	втРезервы.Контрагент КАК Контрагент,
	               |	втЦены.КомментарийИзСайта,
	               |	втЦены.СтавкаНДС,
	               |	втРезервы.СтрокаЗаявки.ЦенаЗакупки КАК ЦенаЗакупки,
	               |	НЕ втКонтрагентыСПросрочПлатежом.Контрагент ЕСТЬ NULL КАК ПросроченнаяЗадолженность,
	               |	ВЫБОР
	               |		КОГДА &Склад В (&ОснСклады)
	               |			ТОГДА ЕСТЬNULL(втРезервы.МаршрутДоставки.МинимальнаяСуммаОтгрузки, 0)
	               |		ИНАЧЕ ЕСТЬNULL(втРезервы.МаршрутДоставки.МинимальнаяСуммаОтгрузкиФилиал, 0)
	               |	КОНЕЦ КАК МинимальнаяСуммаОтгрузки,
	               |	втРезервы.ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(втРезервы.СтрокаЗаявки.ЦенаЗакупки, 0) = 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ 100 * (втЦены.Цена * (1 - втЦены.ПроцентСкидкиНаценки / 100) / втРезервы.СтрокаЗаявки.ЦенаЗакупки - 1) < &МинПроцентНаценки
	               |	КОНЕЦ КАК ПроблемаСНаценкой,
	               |	ЕСТЬNULL(втДолги.СуммаДолга, 0) КАК СуммаДолга,
	               |	втРезервы.ДоговорКонтрагента.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	               |	втРезервы.Контрагент.РежРаботы_вВых КАК РежимРаботыВВыходных,
	               |	втРезервы.Контрагент.ДополнительнаяДоставка КАК ДополнительнаяДоставка,
	               |	втЦены.СуммаВключаетНДС,
	               |	втЦены.ПроцентСкидкиНаценки,
	               |	втРезервы.ТорговаяТочка,
	               |	втРезервы.VIP,
	               |	втРезервы.ДоговорКонтрагента.ВидОплаты КАК ВидОплаты,
	               |	втРезервы.Артикул КАК Артикул,
	               |	втРезервы.Изготовитель,
	               |	втРезервы.ЗаявкаПокупателя,
	               |	0 КАК Сумма,
	               |	втРезервы.Количество КАК План,
	               |	втРезервы.СкладБонусный,
	               |	втРезервы.СкладСувенирный,
	               |	втРезервы.НеКонтролироватьКредит,
	               |	втРезервы.ЕдиницаИзмерения,
	               |	втРезервы.Коэффициент,
	               |	втРезервы.IDSite,
	               |	втРезервы.СтрокаПрихода,
	               |	ЛОЖЬ КАК Услуга
	               |ИЗ
	               |	втРезервы КАК втРезервы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
	               |		ПО втРезервы.СтрокаЗаявки = втЦены.СтрокаЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втКонтрагентыСПросрочПлатежом КАК втКонтрагентыСПросрочПлатежом
	               |		ПО втРезервы.Контрагент = втКонтрагентыСПросрочПлатежом.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втДолги КАК втДолги
	               |		ПО втРезервы.ДоговорКонтрагента = втДолги.ДоговорКонтрагента
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	втРезервы.Контрагент.Наименование,
	               |	Артикул";
	
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("ОтборПоФизСкладу", Параметры.Склад <> Константы.СкладУцененногоТовара.Получить());
	
	Запрос.УстановитьПараметр("МаршрутДоставки", Параметры.МаршрутДоставки);
	Запрос.УстановитьПараметр("Контрагент", Параметры.Контрагент);
	Запрос.УстановитьПараметр("ОтборМаршрутДоставки", ?(Параметры.ОтборМаршрутДоставки = 0,Не Параметры.МаршрутДоставки.ЭтоГруппа, Ложь));
	Запрос.УстановитьПараметр("ОтборМаршрутДоставкиГруппа", ?(Параметры.ОтборМаршрутДоставки = 0,Параметры.МаршрутДоставки.ЭтоГруппа, Ложь));
	Запрос.УстановитьПараметр("НеУчитыватьПокупателейНеработающихВВыходные", Параметры.НеУчитыватьПокупателейНеработающихВВыходные);
	Запрос.УстановитьПараметр("ТолькоПокупателиДополнительнаяДоставка", Параметры.ТолькоПокупателиДополнительнаяДоставка);
	
	ОснСклады = Новый Массив;
	ОснСклады.Добавить(Константы.Склад_Москва.Получить());
	ОснСклады.Добавить(Константы.СкладОсновной.Получить());
	
	Запрос.УстановитьПараметр("ОснСклады",ОснСклады);
	Запрос.УстановитьПараметр("МинПроцентНаценки", Параметры.МинимальнаяПроцентНаценки);
	
	//Результаты = Запрос.ВыполнитьПакет();
	//Товары = Результаты[Результаты.ВГраница()].Выгрузить();
	//Услуги = Результаты[Результаты.ВГраница()].Выгрузить();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); 
		Результат = Запрос.Выполнить();
	ЗафиксироватьТранзакцию();
	
	Товары = Результат.Выгрузить();
	Товары.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	мИдентификатор = 1;
	Для Каждого СтрокаТЧ Из Товары Цикл 
		СтрокаТЧ.Идентификатор = мИдентификатор;
		мИдентификатор = мИдентификатор + 1;
	КонецЦикла;
	
	Товары.Индексы.Добавить("Контрагент,ДоговорКонтрагента");
	
	Покупатели.Очистить(); 
	ИсключенныеПокупатели.Очистить();
	
	ВремТаблица = Товары.Скопировать();
	ВремТаблица.Свернуть("Контрагент,МаршрутДоставки,БлокировкаКонтрагента,БлокировкаДоговораКонтрагента,БлокировкаГолКонтрагента,БлокировкаДоговораГолКонтрагента,ПросроченнаяЗадолженность,МинимальнаяСуммаОтгрузки");	
	Для Каждого СтрокаТЧ Из ВремТаблица Цикл 
		Исключен = Ложь;
		ПричинаИсключения = "";
		
		//Временно отключена проверка блокировок Валиахметов 05.06.2018;
		
		
		//Если СтрокаТЧ.БлокировкаКонтрагента Или
		//	СтрокаТЧ.БлокировкаДоговораКонтрагента Или
		//	СтрокаТЧ.БлокировкаГолКонтрагента Или
		//	СтрокаТЧ.БлокировкаДоговораГолКонтрагента Тогда
		//	
		//	Исключен = Истина;
		//	Если СтрокаТЧ.БлокировкаКонтрагента Тогда 
		//		ПричинаИсключения = "Блокировка контрагента";	
		//	ИначеЕсли СтрокаТЧ.БлокировкаДоговораКонтрагента Тогда 
		//		ПричинаИсключения = "Блокировка договора контрагента";	
		//	ИначеЕсли СтрокаТЧ.БлокировкаГолКонтрагента Тогда 
		//		ПричинаИсключения = "Блокировка гол. контрагента";	
		//	Иначе 
		//		ПричинаИсключения = "Блокировка дог.-ра гол. контрагента";	
		//	КонецЕсли;
		//КонецЕсли;
		//
		Строки = Товары.НайтиСтроки(Новый Структура("Контрагент", СтрокаТЧ.Контрагент));
		СтрокиБонусные = Товары.НайтиСтроки(Новый Структура("Контрагент, СкладБонусный", СтрокаТЧ.Контрагент, Истина));
		СтрокиСувенирные = Товары.НайтиСтроки(Новый Структура("Контрагент, СкладСувенирный", СтрокаТЧ.Контрагент, Истина));
		
		НеПроверятьМинОтгрузку = Ложь;
		
		// Закомментировано 30.05.2018. Теперь выписываем бонусы всегда  
		
		//Если Строки.Количество() = СтрокиБонусные.Количество() + СтрокиСувенирные.Количество() Тогда 
		//	//Удаляем бонусы
		//	Для Каждого СтрокаТовары Из СтрокиБонусные Цикл 
		//		Товары.Удалить(СтрокаТовары);
		//	КонецЦикла;
		//	Строки = Товары.НайтиСтроки(Новый Структура("Контрагент", СтрокаТЧ.Контрагент));
		//	НеПроверятьМинОтгрузку = СтрокиСувенирные.Количество() > 0; //Только сувенирку пропускаем	
		//КонецЕсли;
		
		СуммаОтгрузки = 0;
		Для Каждого СтрокаТовары Из Строки Цикл 
			Если Не СтрокаТовары.СуммаВключаетНДС Тогда 	 
				ЦенаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТовары.Цена,
				Истина, СтрокаТовары.СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(СтрокаТовары.СтавкаНДС));
			Иначе
				ЦенаНДС = 0;
			КонецЕсли;
			СтрокаТовары.Цена = (СтрокаТовары.Цена + ЦенаНДС) * (1 - СтрокаТовары.ПроцентСкидкиНаценки/100);
			СтрокаТовары.Сумма = СтрокаТовары.Цена * СтрокаТовары.Количество;
			
			СуммаОтгрузки = СуммаОтгрузки + СтрокаТовары.Цена * СтрокаТовары.Количество;
		КонецЦикла;
		
		Если Не НеПроверятьМинОтгрузку И Не Параметры.НеУдалятьМинСум И СуммаОтгрузки < СтрокаТЧ.МинимальнаяСуммаОтгрузки Тогда  
			Исключен = Истина; 
			ПричинаИсключения = "Фильтр по миним. сумме отгрузки"
		КонецЕсли;
				
		ВремТаблица2 = Товары.Скопировать(Строки, "ДоговорКонтрагента,СуммаДолга,ДопустимаяСуммаЗадолженности,ВидОплаты,VIP,НеКонтролироватьКредит");
		ВремТаблица2.Свернуть("ДоговорКонтрагента,СуммаДолга,ДопустимаяСуммаЗадолженности,ВидОплаты,VIP,НеКонтролироватьКредит");
		НеКонтролироватьКредит = Ложь;
		
		СуммаЛимита = 0;
		СуммаИтоговогоДолга = 0;
		
		Для Каждого СтрокаТовары Из ВремТаблица2 Цикл 
			СуммаДолга = 0;
			Строки = Товары.НайтиСтроки(Новый Структура("Контрагент, ДоговорКонтрагента", СтрокаТЧ.Контрагент, СтрокаТовары.ДоговорКонтрагента));
			Для Каждого Строка Из Строки Цикл 
				Если СтрокаТовары.ВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные Тогда 
					СуммаДолга = СуммаДолга + Строка.Цена * Строка.Количество * (1 - Параметры.СнижатьДолгКонтрагентаПоБезналРасчету/100);
				Иначе
					СуммаДолга = СуммаДолга + Строка.Цена * Строка.Количество;
				КонецЕсли;
			КонецЦикла;
			//Если СуммаДолга + СтрокаТовары.СуммаДолга > СтрокаТовары.ДопустимаяСуммаЗадолженности Тогда 
			//	ДолгПревышаетРазрешенный = Истина;
			//КонецЕсли;
			//
			СуммаИтоговогоДолга = СуммаИтоговогоДолга + СуммаДолга;
			СуммаЛимита =  Макс(0, СуммаЛимита + СтрокаТовары.ДопустимаяСуммаЗадолженности - СтрокаТовары.СуммаДолга);
			
			Если СтрокаТовары.VIP Или СтрокаТовары.НеКонтролироватьКредит Тогда 
				НеКонтролироватьКредит = Истина;
			КонецЕсли;
		КонецЦикла;
		
		НеКонтролироватьКредит = Истина; // Временно отключено Валиахметов А.А. 05.06.2018
		
		Если НеКонтролироватьКредит Тогда 
			СуммаЛимита = СуммаИтоговогоДолга;	
		КонецЕсли;
		
		Если Исключен Тогда 
			НоваяСтрока = ИсключенныеПокупатели.Добавить();
			НоваяСтрока.СуммаОтгрузки = СуммаОтгрузки;
			НоваяСтрока.Маршрут = СтрокаТЧ.МаршрутДоставки;
			НоваяСтрока.ПричинаИсключения = ПричинаИсключения;
			НоваяСтрока.МинимальнаяСуммаОтгрузки = СтрокаТЧ.МинимальнаяСуммаОтгрузки;
		Иначе
			НоваяСтрока = Покупатели.Добавить();
			НоваяСтрока.ПросроченнаяЗадолженность = СтрокаТЧ.ПросроченнаяЗадолженность;
			НоваяСтрока.ДолгПревышаетРазрешенный = СуммаИтоговогоДолга > СуммаЛимита;
			НоваяСтрока.СуммаОтгрузки = СуммаОтгрузки;
			НоваяСтрока.СуммаЛимита = СуммаЛимита;
		КонецЕсли;
		
		НоваяСтрока.Контрагент = СтрокаТЧ.Контрагент;
		
	КонецЦикла;
	
	//ВремТаблица = Услуги.Скопировать();
	//ВремТаблица.Свернуть("Контрагент,МаршрутДоставки,БлокировкаКонтрагента,БлокировкаДоговораКонтрагента,БлокировкаГолКонтрагента,БлокировкаДоговораГолКонтрагента");	
	//Для Каждого СтрокаТЧ Из Услуги Цикл 
	//	Исключен = Ложь;
	//	ПричинаИсключения = "";
	//	Если СтрокаТЧ.БлокировкаКонтрагента Или
	//		СтрокаТЧ.БлокировкаДоговораКонтрагента Или
	//		СтрокаТЧ.БлокировкаГолКонтрагента Или
	//		СтрокаТЧ.БлокировкаДоговораГолКонтрагента Тогда
	//		
	//		Исключен = Истина;
	//		Если СтрокаТЧ.БлокировкаКонтрагента Тогда 
	//			ПричинаИсключения = "Блокировка контрагента";	
	//		ИначеЕсли СтрокаТЧ.БлокировкаДоговораКонтрагента Тогда 
	//			ПричинаИсключения = "Блокировка договора контрагента";	
	//		ИначеЕсли СтрокаТЧ.БлокировкаГолКонтрагента Тогда 
	//			ПричинаИсключения = "Блокировка гол. контрагента";	
	//		Иначе 
	//			ПричинаИсключения = "Блокировка дог.-ра гол. контрагента";	
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если Исключен Тогда 
	//		СтрокаК = ИсключенныеПокупатели.Найти(СтрокаТЧ.Контрагент, "Контрагент");
	//		Если СтрокаК = Неопределено Тогда 
	//			СтрокаК = ИсключенныеПокупатели.Добавить();
	//			СтрокаК.Маршрут = СтрокаК.МаршрутДоставки;
	//			СтрокаК.ПричинаИсключения = ПричинаИсключения;
	//			Строка.Сумма
	//		КонецЕсли;
	//КонецЦикла;
	
	ЭтотОбъект.ДокументыДобавляемые.Очистить();
	Если Не Параметры.НеИскать Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СлужебноеЗаданиеПокупатели.Реализация КАК Документ,
		               |	СлужебноеЗаданиеПокупатели.Реализация.Контрагент КАК Покупатель,
		               |	СлужебноеЗаданиеПокупатели.Реализация.СуммаДокумента,
		               |	ЛОЖЬ КАК НетСЗ
		               |ИЗ
		               |	Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
		               |ГДЕ
		               |	СлужебноеЗаданиеПокупатели.Реализация.Контрагент В(&СписокКонтрагентов)
		               |	И СлужебноеЗаданиеПокупатели.Ссылка.МаршрутДоставки = &МаршрутДоставки
		               |	И НЕ СлужебноеЗаданиеПокупатели.Ссылка.ПометкаУдаления
		               |	И СлужебноеЗаданиеПокупатели.Ссылка.Склад = &Склад
		               |	И СлужебноеЗаданиеПокупатели.Реализация.СтатусДокумента <> ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугОтгружен)
		               |	И НЕ СлужебноеЗаданиеПокупатели.Реализация.ПометкаУдаления
		               |	И СлужебноеЗаданиеПокупатели.Ссылка.Дата >= &Дата
		               |	И НЕ СлужебноеЗаданиеПокупатели.Ссылка.Склад.Заблокирован
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслуг.Ссылка,
		               |	РеализацияТоваровУслуг.Контрагент,
		               |	РеализацияТоваровУслуг.СуммаДокумента,
		               |	ИСТИНА
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
		               |		ПО (СлужебноеЗаданиеПокупатели.Реализация = РеализацияТоваровУслуг.Ссылка)
		               |			И (НЕ СлужебноеЗаданиеПокупатели.Ссылка.ПометкаУдаления)
		               |ГДЕ
		               |	НЕ РеализацияТоваровУслуг.ПометкаУдаления
		               |	И РеализацияТоваровУслуг.СтатусДокумента <> ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугОтгружен)
		               |	И ВЫБОР
		               |			КОГДА &ОтборМаршрутДоставкиГруппа
		               |				ТОГДА РеализацияТоваровУслуг.МаршрутДоставки В ИЕРАРХИИ (&МаршрутДоставки)
		               |			ИНАЧЕ РеализацияТоваровУслуг.МаршрутДоставки = &МаршрутДоставки
		               |		КОНЕЦ
		               |	И РеализацияТоваровУслуг.Контрагент В(&СписокКонтрагентов)
		               |	И ВЫБОР
		               |			КОГДА &ОтборПоФизСкладу
		               |				ТОГДА РеализацияТоваровУслуг.Склад.ФизическийСклад = &Склад
		               |			ИНАЧЕ РеализацияТоваровУслуг.Склад = &Склад
		               |		КОНЕЦ
		               |	И НЕ РеализацияТоваровУслуг.ТипДоставки В (&ТипыДоставки)
		               |	И РеализацияТоваровУслуг.Дата >= &Дата
		               |	И СлужебноеЗаданиеПокупатели.Реализация ЕСТЬ NULL
		               |	И НЕ СлужебноеЗаданиеПокупатели.Реализация.Склад.Заблокирован";
		Запрос.УстановитьПараметр("Дата", Дата - Параметры.ГлубинаДней * 24*60*60);
		Запрос.УстановитьПараметр("Склад", Параметры.Склад);
		Запрос.УстановитьПараметр("СписокКонтрагентов", Покупатели.ВыгрузитьКолонку("Контрагент"));
		Если Параметры.ОтборМаршрутДоставки = 0 Тогда 
			Запрос.УстановитьПараметр("МаршрутДоставки", Параметры.МаршрутДоставки);
		Иначе
			Запрос.УстановитьПараметр("МаршрутДоставки", Параметры.Контрагент.ОсновнаяТорговаяТочка.МаршрутДоставки);	
		КонецЕсли;
		Запрос.УстановитьПараметр("ОтборМаршрутДоставкиГруппа", ?(Параметры.ОтборМаршрутДоставки = 0,Параметры.МаршрутДоставки.ЭтоГруппа, Ложь));
		
		ТипыДоставки = Новый Массив;
		ТипыДоставки.Добавить(Справочники.ТипыДоставки.Самовывоз);
		ТипыДоставки.Добавить(Справочники.ТипыДоставки.ЭкспрессДоставка);
		Запрос.УстановитьПараметр("ТипыДоставки", ТипыДоставки);
		Запрос.УстановитьПараметр("ОтборПоФизСкладу", Параметры.Склад <> Константы.СкладУцененногоТовара.Получить());
		ЭтотОбъект.ДокументыДобавляемые.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
				   
КонецПроцедуры

Товары = Новый ТаблицаЗначений;

Дата = ТекущаяДата();