Функция ОбновитьЗаписьРегистра(вхОтбор, вхОтключено, вхВключено)
	Попытка
		ДанныеВклОткл = РегистрыСведений.ДанныеОВремениВключенияОтключенияРегламентныхЗаданий.СоздатьНаборЗаписей();
		ДанныеВклОткл.Отбор.Период.Установить(вхОтбор.Период);
		ДанныеВклОткл.Отбор.РегламентноеЗадание.Установить(вхОтбор.РегламентноеЗадание);
		ДанныеВклОткл.Отбор.ДатаОтключения.Установить(вхОтбор.ДатаОтключения);
		ДанныеВклОткл.Отбор.ДатаВключения.Установить(вхОтбор.ДатаВключения);
		ДанныеВклОткл.Прочитать();
		Для Каждого Запись Из ДанныеВклОткл Цикл
			Запись.Отключено = вхОтключено;
			Запись.Включено = вхВключено;
		КонецЦикла;
		
		ДанныеВклОткл.Записать(Истина);
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции
		
Процедура ВыполнитьРегламентноеЗадание() Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Р.РегламентноеЗадание.ИдентификаторРегламентногоЗадания КАК ИдентификаторРЗ,
	|	Р.Период,
	|	Р.РегламентноеЗадание,
	|	Р.ДатаОтключения,
	|	Р.ДатаВключения,
	|	Р.РегламентноеЗадание.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ДанныеОВремениВключенияОтключенияРегламентныхЗаданий КАК Р
	|ГДЕ
	|	НЕ Р.Отключено
	|	И Р.ДатаОтключения <= &ТекущаяДата
	|	И ВЫБОР
	|			КОГДА НЕ Р.ДатаВключения = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА Р.ДатаВключения > &ТекущаяДата
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ"
	);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	тхтТемаПисьма = "включение/отключение регламентных заданий";
	тхтТекстПисьма = "";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.ДатаОтключения) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			РЗ = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторРЗ);
			РЗ.Использование = Ложь;
			РЗ.Записать();
			
			Если НЕ ОбновитьЗаписьРегистра(Выборка, Истина, Ложь) Тогда
				ВызватьИсключение "не удалось обновить запись регистра данных о включении/отключении";
			КонецЕсли;
			
			ЭлементСправочника = Справочники.РегламентныеЗадания.НайтиПоРеквизиту("ИдентификаторРегламентногоЗадания", Выборка.ИдентификаторРЗ); 
			Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
				лОбъект = ЭлементСправочника.ПолучитьОбъект();
				лОбъект.Использование = Ложь;
				лОбъект.Записать();
			КонецЕсли;	
			
			ЗафиксироватьТранзакцию();
			
			тхтТекстПисьма = ?(ПустаяСтрока(тхтТекстПисьма), тхтТекстПисьма, тхтТекстПисьма + Символы.ПС);
			тхтТекстПисьма = тхтТекстПисьма + Формат(ТекущаяДата(), "") + " регламентное задание " + Выборка.Наименование + " было отключено";
			тхтТекстПисьма = тхтТекстПисьма + Символы.ПС;
			
		Исключение
			ОтменитьТранзакцию();
			
			тхтТекстПисьма = ?(ПустаяСтрока(тхтТекстПисьма), тхтТекстПисьма, тхтТекстПисьма + Символы.ПС);
			тхтТекстПисьма = тхтТекстПисьма + "регламентное задание " + Выборка.Наименование + " не было отключено" + Символы.ПС;
			тхтТекстПисьма = тхтТекстПисьма + ОписаниеОшибки();
			тхтТекстПисьма = тхтТекстПисьма + Символы.ПС;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Р.РегламентноеЗадание.ИдентификаторРегламентногоЗадания КАК ИдентификаторРЗ,
	|	Р.Период,
	|	Р.РегламентноеЗадание,
	|	Р.ДатаОтключения,
	|	Р.ДатаВключения,
	|	Р.РегламентноеЗадание.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ДанныеОВремениВключенияОтключенияРегламентныхЗаданий КАК Р
	|ГДЕ
	|	НЕ Р.Включено
	|	И Р.ДатаВключения <= &ТекущаяДата";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.ДатаВключения) Тогда
			Продолжить;
		КонецЕсли;
			
		НачатьТранзакцию();
		Попытка
			РЗ = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторРЗ);
			РЗ.Использование = Истина;
			РЗ.Записать();
			
			Если НЕ ОбновитьЗаписьРегистра(Выборка, Истина, Истина) Тогда
				ВызватьИсключение "не удалось обновить запись регистра данных о включении/отключении";
			КонецЕсли;
			
			ЭлементСправочника = Справочники.РегламентныеЗадания.НайтиПоРеквизиту("ИдентификаторРегламентногоЗадания", Выборка.ИдентификаторРЗ); 
			Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
				лОбъект = ЭлементСправочника.ПолучитьОбъект();
				лОбъект.Использование = Истина;
				лОбъект.Записать();
			КонецЕсли;	
			
			ЗафиксироватьТранзакцию();
			
			тхтТекстПисьма = ?(ПустаяСтрока(тхтТекстПисьма), тхтТекстПисьма, тхтТекстПисьма + Символы.ПС);
			тхтТекстПисьма = тхтТекстПисьма + Формат(ТекущаяДата(), "") + " регламентное задание " + Выборка.Наименование + " было включено";
			тхтТекстПисьма = тхтТекстПисьма + Символы.ПС;
			
		Исключение
			ОтменитьТранзакцию();
			
			тхтТекстПисьма = ?(ПустаяСтрока(тхтТекстПисьма), тхтТекстПисьма, тхтТекстПисьма + Символы.ПС);
			тхтТекстПисьма = тхтТекстПисьма + "регламентное задание " + Выборка.Наименование + " не было включено" + Символы.ПС;
			тхтТекстПисьма = тхтТекстПисьма + ОписаниеОшибки();
			тхтТекстПисьма = тхтТекстПисьма + Символы.ПС;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(тхтТекстПисьма) Тогда			
		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ВклОтклРегламентныхЗаданий, тхтТекстПисьма, тхтТемаПисьма);
		
	КонецЕсли;
			
КонецПроцедуры