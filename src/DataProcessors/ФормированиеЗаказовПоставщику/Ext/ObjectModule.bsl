Перем ПравилаИгры;

// настройка
//--------------------------------------------------------------------------------------------------------------------
Функция УстановитьПараметрыПоУмолчанию(это_фон_на_сервере = Ложь) экспорт
	
	ПравилаИгры = Новый Структура();
	
	Отказ = Ложь;
	ПравилаИгры.Вставить("Отказ",Отказ);
	ПравилаИгры.Вставить("Аларм", ЗначениеЗаполнено(Вход_НазваниеСценария) );
	ПравилаИгры.Вставить("Аларм_Источник", Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаФормированияЗаказаПоставщику);
	ПравилаИгры.Вставить("Аларм_Заголовок", Вход_НазваниеСценария);
	ПравилаИгры.Вставить("Аларм_Содержимое", "");
	ПравилаИгры.Вставить("это_фон", это_фон_на_сервере); // под "это_фон" понимается создание заказов в режиме по расписанию
	ПравилаИгры.Вставить("ВыполнитьEMAILРассылку", ВыполнитьEMAILРассылку);
	ПравилаИгры.Вставить("РасчетнаяДата", Дата(1,1,1));
	ПравилаИгры.Вставить("РасчетнаяДатаКонец", Дата(1,1,1));
	ПравилаИгры.Вставить("МаксимальноеКоличествоПопытокЗаписатьЗаявку", 3);
	
	ПравилаИгры.Вставить("РазрешитьЗаписьВЛогФайл", ЗначениеЗаполнено(Вход_НазваниеСценария));
	Если НЕ ПравилаИгры.Свойство("ТекущаяДата") тогда
		ПравилаИгры.Вставить("ТекущаяДата", ТекущаяДата());
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПравилаИгры.ТекущаяДата) тогда
		ПравилаИгры.Вставить("ТекущаяДата", ТекущаяДата());
	КонецЕсли;
	лДтВрм = ПравилаИгры.ТекущаяДата;
	ПравилаИгры.Вставить("Метка",СокрЛП( Формат( ДеньГода(лДтВрм) , "ЧЦ=3; ЧДЦ=; ЧВН=")) + "_" +
								 РазвернутьДатуВстроку(лДтВрм) + "_" + 
								 СокрЛП(Формат(Час(лДтВрм),"ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0")) + 
								 СокрЛП(Формат(Минута(лДтВрм),"ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0")) + 
								 СокрЛП(Формат(Секунда(лДтВрм),"ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0")) + "_" + 
								 СокрЛП(УбратьТОчкиИПробелы(СтрокаСоединенияИнформационнойБазы())) + "_" +
								 СокрЛП(УбратьТОчкиИПробелы(Строка(ПараметрыСеанса.ТекущийПользователь.Код))) + "_" +    
								 СокрЛП(Вход_НазваниеСценария));
	лКатЛог = ?(ЗначениеЗаполнено(КаталогЛогирования),КаталогЛогирования,"\\Srv1c-nn\1C_exch\ASTOR_1C\push\Log\");
	ПравилаИгры.Вставить("КаталогЛогФайлов",  лКатЛог);
	ПравилаИгры.Вставить("ИмяЛогФайлаПолное", лКатЛог + "1с83_Заказы_" + ПравилаИгры.метка + ".txt");
	
	ДобавитьВЛог(СокрЛП(ТекущаяДата()) + " установка правил . это_фон_на_сервере = [" + СокрЛП(это_фон_на_сервере) + "]");
	ОпубликоватьЛог();
	
	// найдем регламент, который укажем в журнале логов
	РеглЗаданиеНаИсполнение = Справочники.РегламентныеЗадания.ПустаяСсылка();
	СписокВозможныхСценариев = СформироватьСписокВозможныхСценариев();
	НайденнаяСтрока  = СписокВозможныхСценариев.Найти(Вход_НазваниеСценария,"ИмяПроцедуры");
	Если НайденнаяСтрока = Неопределено Тогда
		РеглЗаданиеНаИсполнение = Справочники.РегламентныеЗадания.НайтиПоКоду("000000188");
	Иначе
		РеглЗаданиеНаИсполнение = Справочники.РегламентныеЗадания.НайтиПоКоду(НайденнаяСтрока.КодРегламента);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РеглЗаданиеНаИсполнение) тогда
		 Отказ = Истина;
		 ДобавитьВЛог("err: не найдено РеглЗаданиеНаИсполнение. Проверить код Задания в текущей базе");
		 ОпубликоватьЛог();
		 ПравилаИгры.Вставить("Отказ",Отказ);
	КонецЕсли;
	ПравилаИгры.Вставить("РеглЗаданиеНаИсполнение",РеглЗаданиеНаИсполнение);
	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		 Отказ = Истина;
		 ДобавитьВЛог("err: ошибка формирования СЗ. ПараметрыСеанса.ТекущийПользователь не заполнен");
		 ПравилаИгры.Вставить("Отказ",Отказ);
	КонецЕсли;
	Если ПравилаИгры.Отказ тогда
		ОпубликоватьЛог();
		Возврат ПравилаИгры;
	КонецЕсли;
	ПравилаИгры.Вставить("Ответственный",Ответственный);

	// очистим все таблицы и массивы, в которые укладываются результаты расчетов
	ОчиститьТЗ();
	значениеискомогоключика = Новый ТаблицаЗначений;
	ключикнайден = ПравилаИгры.Свойство("ИсторияСЗ",значениеискомогоключика);
	Если ключикнайден =  Ложь И значениеискомогоключика = Неопределено Тогда
		ПравилаИгры.Вставить("ИсторияСЗ", Новый ТаблицаЗначений);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.АдресЭП
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Ссылка
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";

	Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КИ = Запрос.Выполнить().Выгрузить();
	КИмэйл = "";
	Если КИ.Количество() > 0 тогда
		КИмэйл = КИ[0].АдресЭП;
		Если Найти(КИмэйл,"@") = 0 тогда
			КИмэйл = "";
		КонецЕсли;
	КонецЕсли;
	ПравилаИгры.Вставить("МылоЮзвера", КИмэйл);	
	ПравилаИгры.Вставить("ИмяЮзвера", СокрЛП(ПараметрыСеанса.ТекущийПользователь));
	
	ПравилаИгры.Вставить("КоличествоНажатийКнопкиРассчитатьПользователем",0);
	
	ПравилаИгры.Вставить("Отказ",Отказ);
	Возврат ПравилаИгры;
	
КонецФункции
Функция СформироватьСписокВозможныхСценариев()
	
	списокСценариев = Новый ТаблицаЗначений;
	списокСценариев.Колонки.Добавить("Комент");
	списокСценариев.Колонки.Добавить("ИмяПроцедуры");
	списокСценариев.Колонки.Добавить("КодРегламента");
	
	НовыйСценарий = списокСценариев.Добавить();
	НовыйСценарий.Комент = "Формирование по спр.Параметров";
	НовыйСценарий.ИмяПроцедуры = "АвтозапускФормированияЗаказовПоставщику()";
	НовыйСценарий.КодРегламента = "000000188";
	
	НовыйСценарий = списокСценариев.Добавить();
	НовыйСценарий.Комент = "Формирование по спр.Аукционы по галке Заказов Нет";
	НовыйСценарий.ИмяПроцедуры = "ОбработкаАукционов()";
	НовыйСценарий.КодРегламента = "000000249";
	
	Возврат списокСценариев;
КонецФункции

// мясо
//--------------------------------------------------------------------------------------------------------------------
//#Если Сервер тогда
Процедура ВыполнитьРегламентноеЗадание() Экспорт
	
	УстановитьПараметрыПоУмолчанию(Истина);
	
	ДобавитьВЛог("старт регламентного задания " +  СокрЛП(ТекущаяДата()));
	ОпубликоватьЛог();
	
	//Если НЕ ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() тогда
	//	ДобавитьВЛог("err: это не рабочая БД ");
	//	ОпубликоватьЛог();
	//	Возврат;
	//КонецЕсли;
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Старт,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(),"Настройки: " + СтруктуруВСтроку(ПравилаИгры)));
	
	СписокВозможныхСценариев = СформироватьСписокВозможныхСценариев();
	НайденнаяСтрока  = СписокВозможныхСценариев.Найти(Вход_НазваниеСценария,"ИмяПроцедуры");
	Если НайденнаяСтрока = Неопределено Тогда
		ДобавитьВЛог("err: отсутствует сценарий " + СокрЛП(Вход_НазваниеСценария));
		ОпубликоватьЛог();
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Ошибка,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(),"err: отсутствует сценарий " + СокрЛП(Вход_НазваниеСценария)));
		Возврат;
	КонецЕсли;
	ИмяПроцедуры = НайденнаяСтрока.ИмяПроцедуры;
	Если НЕ ЗначениеЗаполнено(ИмяПроцедуры) тогда
		ДобавитьВЛог("err: отсутствует сценарий " + СокрЛП(Вход_НазваниеСценария));
		ОпубликоватьЛог();
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Ошибка,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(),"err: отсутствует сценарий " + СокрЛП(Вход_НазваниеСценария)));
		Возврат;
	КонецЕсли;
	
	Выполнить(Вход_НазваниеСценария);
	
	ДобавитьВЛог("окончание регламентного задания " +  СокрЛП(ТекущаяДата()));
	ОпубликоватьЛог();
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Окончание,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(),""));
	
КонецПроцедуры
//#КонецЕсли
Функция АвтозапускФормированияЗаказовПоставщику() экспорт // 1. регламентное задание для создания заказов по расписанию согласно спр.параметров
	ОпросСправочникаПараметровРассылкиЗаказовПоставщику();
	СформироватьДокументы();	
	Возврат ПравилаИгры;
КонецФункции
Процедура ОпросСправочникаПараметровРассылкиЗаказовПоставщику() экспорт
	
	Отказ = Ложь;
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(),"расчет - начало"));	
	
	ПравилаИгры.Вставить("РасчетнаяДата",ТекущаяДата());
	
	Результат = ЗапросПоПотребностиДляОбоихРежимовКонечнаяВерсия();
	Результат_Количество = Результат.Количество();
	
	АктуальныеЗаданияБезПотребностиДляРассылкиДляФона = Результат[Результат_Количество - 1].Выгрузить();
	ПотребностьПоАктуальнымЗаданиямДляФормированияЗаказов = Результат[Результат_Количество - 2].Выгрузить();
	ПотребностьСвертка = Результат[Результат_Количество - 3].Выгрузить();
	ПотребностьИсторияПоЗаданиям = Результат[Результат_Количество - 4].Выгрузить();
	ПотребностьИзгои = Результат[Результат_Количество - 5].Выгрузить();
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(),"расчет - окончание"  ));			
	Для каждого стрза из ПотребностьИсторияПоЗаданиям цикл
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,стрза.Задание_Ссылка,Документы.ЗаказПоставщику.ПустаяСсылка(),"Поставщик попавший в выборку: " +  СокрЛП(стрза.Задание_Поставщик)  ));	
	КонецЦикла;
	
	ПравилаИгры.Вставить("ТабличноеПоле2",ПотребностьПоАктуальнымЗаданиямДляФормированияЗаказов);
	ПравилаИгры.Вставить("ТабличноеПоле3",АктуальныеЗаданияБезПотребностиДляРассылкиДляФона);
	ПравилаИгры.Вставить("ТабличноеПоле5",ПотребностьИсторияПоЗаданиям);
	
	Если ПравилаИгры.Это_Фон тогда
		ЗаписатьВЛогТЗ(ПотребностьСвертка, "ПотребностьСвертка");
		ЗаписатьВЛогТЗ(ПотребностьИзгои, "ПотребностьИзгои");
		ЗаписатьВЛогТЗ(ПотребностьИсторияПоЗаданиям, "ПотребностьИсторияПоЗаданиям");
	КонецЕсли;
	
	Отказ = ?(ПотребностьСвертка.Количество()>0,Ложь,Истина);
	
	ПравилаИгры.Вставить("Отказ", Отказ);
	ПравилаИгры.Вставить("РасчетнаяДатаКонец",ТекущаяДата());
	
	АктивироватьДоговоры(ПотребностьСвертка);	
	
КонецПроцедуры
Функция ОбработкаАукционов() экспорт // 2. регламентное задание для работы с аукционными заявками
	
	// 2.1. определим потребность
	Запрос = Новый Запрос;
	Запрос.Текст = 
				 "ВЫБРАТЬ
				 |	АукционПоставщиков.Ссылка КАК сЦылка
				 |ИЗ
				 |	Справочник.АукционПоставщиков КАК АукционПоставщиков
				 |ГДЕ
				 |	АукционПоставщиков.ВсеЗаявкиЗагружены = Истина
				 |	И АукционПоставщиков.ЗаказыСозданы = Ложь
				 |	И АукционПоставщиков.ПометкаУдаления = Ложь";
	
	резтч = Запрос.Выполнить().Выгрузить();
	Для каждого ссс из резтч цикл
		Вход_Аукцион = ссс.сЦылка;
		СформироватьЗаказыПоАукциону();	
	КонецЦикла;
	
	// 2.2. проверим результат по ранее обработанным аукционам
	Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ИдентификаторыСтрокЗаявок.Заявка.Аукцион КАК сЦылка
				|ИЗ
				|	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
				|ГДЕ
				|	ИдентификаторыСтрокЗаявок.Заявка В
				|			(ВЫБРАТЬ
				|				АукционПоставщиковЗаявки.Заявка
				|			ИЗ
				|				Справочник.АукционПоставщиков.Заявки КАК АукционПоставщиковЗаявки
				|			ГДЕ
				|				АукционПоставщиковЗаявки.Ссылка.ВсеЗаявкиЗагружены = ИСТИНА
				|				И АукционПоставщиковЗаявки.Ссылка.ЗаказыСозданы = ИСТИНА
				|				И АукционПоставщиковЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ)
				|	И ИдентификаторыСтрокЗаявок.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)";
	
	резтч = Запрос.Выполнить().Выгрузить();
	
	Если резтч.Количество() > 0 тогда
		стрруганипоаукционам = "Список аукционов, с признаком 'ВсеЗаявкиЗагружены' и 'ЗаказыСозданы', однако в 'строках заявок' реквизит 'Заказ' пустой: ";
		счсчсч = 0;
		Для каждого ссс из резтч цикл
			счсчсч = счсчсч + 1;
			стрруганипоаукционам = стрруганипоаукционам + Символы.ПС + СОкрЛП(счсчсч) + ";" + СокрЛП(ссс.сЦылка.УникальныйИдентификатор()) + ";" + СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ссс.сЦылка,"Код"))+ ";";
		КонецЦикла;
		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(ПравилаИгры.Аларм_Источник,стрруганипоаукционам,ПравилаИгры.Аларм_Заголовок);
	КонецЕсли;
	
	Возврат ПравилаИгры;	
КонецФункции
Функция СформироватьЗаказыПоАукциону() экспорт
	
	Если НЕ ЗначениеЗаполнено(Вход_Аукцион) тогда
		Возврат Истина;			
	КонецЕсли;
	
	УстановитьПараметрыПоУмолчанию();
	Если ПравилаИгры.Отказ тогда
		Возврат Истина;			
	КонецЕсли;
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Старт,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(),"Аукцион: " + СокрЛП(Вход_Аукцион.Код)));
	
	ПравилаИгры.Вставить("РасчетнаяДата",ТекущаяДата());
	ПолучитьПотебностьПоФильтру(Истина);
	Если ПравилаИгры.Отказ тогда
		Возврат Истина;			
	КонецЕсли;
	
	СформироватьДокументы(Истина);
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Окончание,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(),"Аукцион: " + СокрЛП(Вход_Аукцион.Код)));
	
	Возврат ПравилаИгры.Отказ;
КонецФункции
Функция ЗаполнитьДанныеПоПотребности() экспорт // 3. пользовательский режим работы
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(), "Параметры: Поставщик = [" + СокрЛП(Вход_КА) + "]Прайс = [" + СокрЛП(Вход_Прайс) + "]Заявка = [" + СокрЛП(Вход_Заявка) + "]" ));				
	ОтобразитьФильтр();
	Если ПравилаИгры.Отказ тогда
		ОпубликоватьЛог();
		Возврат ПравилаИгры;
	КонецЕсли;
	
	ПолучитьПотебностьПоФильтру();
	Если ПравилаИгры.Отказ Тогда
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(), "окончание. потребность отсутствует" ));							
		
		ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: потребность отсутствует");
		ОпубликоватьЛог();
		
		Возврат ПравилаИгры;
	КонецЕсли;
	
	РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ЗапросПараметров,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(), "окончание. потребность получена" ));					
	
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + "inf: потребность получена");
	ОпубликоватьЛог();
	
	Возврат ПравилаИгры;
КонецФункции
Функция ОтобразитьФильтр() экспорт
	
	ПравилаИгры.Вставить("РасчетнаяДата",ТекущаяДата());
	
	ОчиститьТЗ();
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - старт");
	
	ПроверкаНаЛося();
	Если ПравилаИгры.Отказ тогда
		ДобавитьВЛог(СокрлП(ТекущаяДата()) + " err : КА проверку не прошел");
		ОпубликоватьЛог();
		Возврат ПравилаИгры;
	КонецЕсли;
	ДобавитьВЛог(СокрлП(ТекущаяДата()) + " - проверка КА пройдена");
	
	ОпубликоватьЛог();
	Возврат ПравилаИгры;
	
КонецФункции
Процедура ПроверкаНаЛося()
	
	Отказ = Ложь;
	
	Если ПравилаИгры.это_фон = Ложь тогда
		
		Если ЗначениеЗаполнено(Вход_КА) тогда
			
			ПараметрыКА = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Вход_КА,"Поставщик,ОсновнойДоговорКонтрагентаЗакупка,ОсновнойДоговорКонтрагентаЗакупка,ЮрФизЛицо");
			
			Если НЕ ПараметрыКА.Поставщик тогда
				ДобавитьВЛог("err: не указан признак Поставщика");
				ОпубликоватьЛог();
				Отказ = Истина;
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(ПараметрыКА.ОсновнойДоговорКонтрагентаЗакупка) тогда
			//	
			//	Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрыКА.ОсновнойДоговорКонтрагентаЗакупка,"ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком тогда
			//		ДобавитьВЛог("err: вид ОсновнойДоговорКонтрагентаЗакупка не соответсвует");
			//		Отказ = Истина;
			//	КонецЕсли;
			//	
			//Иначе
			//	ДобавитьВЛог("err: не указан ОсновнойДоговорКонтрагентаЗакупка");
			//	Отказ = Истина;
			//КонецЕсли;
			
			ТТ = Вход_КА.ОсновнаяТорговаяТочка;
			Если ЗначениеЗаполнено(Вход_Прайс) тогда
				Если НЕ Вход_Прайс.Владелец = ТТ тогда
					Вход_Прайс = Справочники.ПрайсыПоставщиков.ПустаяСсылка();		
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ТТ = Справочники.ТорговыеТочки.ПустаяСсылка();
			Вход_Прайс = Справочники.ПрайсыПоставщиков.ПустаяСсылка();
			
			ДобавитьВЛог("err: не указан КА-поставщик");
			ОпубликоватьЛог();
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Если Отказ тогда
		Вход_КА = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		ДобавитьВЛог("КА-поставщик : " + "[" + СокрЛП(Вход_КА) + "][" + СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Вход_КА,"Код")) + "]" );
	КонецЕсли;
	
	ПравилаИгры.Вставить("Отказ",Отказ);
	
КонецПроцедуры
Процедура ПолучитьПотебностьПоФильтру(пар_НеАктивироватьДоговоры = Ложь)
	
	Отказ = Ложь;
	
	РезультатРазмышленийНаТему =  ЗапросПоПотребностиДляОбоихРежимовКонечнаяВерсия();
	РезультатРазмышленийНаТему_Количество = РезультатРазмышленийНаТему.Количество();
	
	ПотребностьДерево            = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ПотребностьТаблица           = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 2].Выгрузить();
	ПотребностьСвертка           = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 3].Выгрузить();
	ПотребностьИсторияПоЗаданиям = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 4].Выгрузить();
	ПотребностьИзгои = РезультатРазмышленийНаТему[РезультатРазмышленийНаТему_Количество - 5].Выгрузить();
	
	ПравилаИгры.Вставить("ТабличноеПоле1",ПотребностьДерево);
	ПравилаИгры.Вставить("ТабличноеПоле2",ПотребностьТаблица);
	ПравилаИгры.Вставить("ТабличноеПоле5",ПотребностьИсторияПоЗаданиям);
	
	Если ПравилаИгры.Это_Фон тогда
		ЗаписатьВЛогТЗ(ПотребностьСвертка, "ПотребностьСвертка");
		ЗаписатьВЛогТЗ(ПотребностьИзгои, "ПотребностьИзгои");
		ЗаписатьВЛогТЗ(ПотребностьИсторияПоЗаданиям, "ПотребностьИсторияПоЗаданиям");
	КонецЕсли;

	Отказ = ?(ПотребностьТаблица.Количество()>0,Ложь,Истина);
	
	ПравилаИгры.Вставить("Отказ", Отказ);
	ПравилаИгры.Вставить("РасчетнаяДатаКонец",ТекущаяДата());
	
	Если пар_НеАктивироватьДоговоры тогда
	Иначе
		АктивироватьДоговоры(ПотребностьСвертка);	
	КонецЕсли;
	
КонецПроцедуры
Функция ЗапросПоДоговорамСоответствующимОрганизацииИзЗаявок(пар_КА,пар_ВидДог,пар_ВидОпVMI,пар_ВидОпСток,пар_ВидОпКросс,пар_Организация)
	
	ИскомыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Запрос_Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	  ДоговорыКонтрагентов.Владелец = &КА
	|	И ДоговорыКонтрагентов.Организация = &Фрм
	|	И ДоговорыКонтрагентов.ВидДоговора = &Вид
	|	И ДоговорыКонтрагентов.ДоговорПриостановлен = ЛОЖЬ
	|	И ДоговорыКонтрагентов.СлужебныйДоговор = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО	
	|";
	
	Если НЕ пар_ВидОпVMI тогда
		Если пар_ВидОпКросс тогда
			
			Запрос_Текст = Запрос_Текст + Символы.ПС + "
			|	ДоговорыКонтрагентов.ДоговорНаКросс УБЫВ,
			|	ДоговорыКонтрагентов.ДоговорНаСток УБЫВ,";
			
		Иначе
			
			Запрос_Текст = Запрос_Текст + Символы.ПС + "
			|	ДоговорыКонтрагентов.ДоговорНаСток УБЫВ,
			|	ДоговорыКонтрагентов.ДоговорНаКросс УБЫВ,";
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос_Текст = Запрос_Текст + Символы.ПС + "
	|	ДоговорыКонтрагентов.ДоговорНаОферту УБЫВ,
	|	ДоговорыКонтрагентов.ДоговорПодписан УБЫВ,
	|	ДоговорыКонтрагентов.ДатаДоговораОферты УБЫВ,
	|	ДоговорыКонтрагентов.Дата УБЫВ,
	|	ДоговорыКонтрагентов.Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст =  Запрос_Текст;
	Запрос.УстановитьПараметр("КА", пар_КА);
	Запрос.УстановитьПараметр("Вид", пар_ВидДог);
	Запрос.УстановитьПараметр("Фрм", пар_Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();	
	Если Результат.Количество() > 0 тогда
		ИскомыйДоговор = Результат[0].ДоговорКонтрагента
	КонецЕсли;
	
	Возврат ИскомыйДоговор;
	
КонецФункции
Функция ЗапросПоПотребностиДляОбоихРежимовКонечнаяВерсия() экспорт  // запрос, используемый для всех режимов: авто, интерактив, аукционы
	
	Запрос_Текст_Шапка = "";
	Запрос_Текст_Ядро = "";
	Запрос_Текст_Подвал = "";
	
	Если ЗначениеЗаполнено(Вход_Аукцион) тогда
		
		Запрос_Текст_Шапка = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ИдентификаторыСтрокЗаявок.ПрайсПоставщика.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
		|	ИдентификаторыСтрокЗаявок.ПрайсПоставщика КАК Задание_ПрайсПоставщика
		|ПОМЕСТИТЬ ПолныйСписосПрайсовУчаствующихВРассылке
		|ИЗ
		|	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
		|ГДЕ
		|	ИдентификаторыСтрокЗаявок.Заявка В
		|			(ВЫБРАТЬ
		|				АукционПоставщиковЗаявки.Заявка
		|			ИЗ
		|				Справочник.АукционПоставщиков.Заявки КАК АукционПоставщиковЗаявки
		|			ГДЕ
		|				АукционПоставщиковЗаявки.Ссылка.ВсеЗаявкиЗагружены = ИСТИНА
		|				И АукционПоставщиковЗаявки.Ссылка = &Вход_Аукцион)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокПрайсов.Задание_ПрайсПоставщика.Владелец.Владелец КАК Поставщик
		|ПОМЕСТИТЬ СписокПоставщиков
		|ИЗ
		|	ПолныйСписосПрайсовУчаствующихВРассылке КАК СписокПрайсов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрДат.Ссылка КАК Задание_Ссылка,
		|	РегистрДат.Владелец КАК Задание_ТТ_Поставщика,
		|	РегистрДат.Владелец.Владелец КАК Задание_Поставщик,
		|	РегистрДат.МинСуммаАвтоЗаказа КАК Задание_МинСуммаАвтоЗаказа,
		|	РегистрДат.СообщатьНетПотребности КАК Задание_СообщатьНетПотребности,
		|	РегистрДат.ПополнениеСкладаОтдельно КАК Задание_ПополнениеСкладаОтдельно,
		|	РегистрДат.ДелитьПоФирмамИзЗаявок КАК Задание_ДелитьПоФирмамИзЗаявок,
		|	РегистрДат.ДелитьПоКоличествуСтрок КАК Задание_ДелитьПоКоличествуСтрок,
		|	ВЫРАЗИТЬ(РегистрДат.АдресЭлПочтыТорговойТочки КАК СТРОКА(50)) КАК Задание_АдресЭлПочтыТорговойТочки,
		|	ВЫРАЗИТЬ(РегистрДат.АдресЭлПочтыОтправителя КАК СТРОКА(50)) КАК Задание_АдресЭлПочтыОтправителя,
		|	ВЫРАЗИТЬ(РегистрДат.ТекстПисьма КАК СТРОКА(100)) КАК Задание_ТекстПисьма
		|ПОМЕСТИТЬ ВсеТекущиеЗадания
		|ИЗ
		|	Справочник.ПараметрыФормированияЗаказовПоставщикам КАК РегистрДат
		|ГДЕ
		|	РегистрДат.Владелец.Владелец В
		|			(ВЫБРАТЬ
		|				СписокПоставщиков.Поставщик
		|			ИЗ
		|				СписокПоставщиков)
		|	И РегистрДат.АвтоСозданиеЗаказов = ИСТИНА
		|	И РегистрДат.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|";
		
		
	Иначе
		
		Если ПравилаИгры.это_фон тогда
			Запрос_Текст_Шапка = "
			|ВЫБРАТЬ
			|	РегистрДат.ПараметрФормированияЗаказовПоставщикам.Ссылка КАК Задание_Ссылка,
			|	РегистрДат.ПараметрФормированияЗаказовПоставщикам.Владелец КАК Задание_ТТ_Поставщика,
			|	РегистрДат.ПараметрФормированияЗаказовПоставщикам.Владелец.Владелец КАК Задание_Поставщик,
			|	РегистрДат.ПараметрФормированияЗаказовПоставщикам.МинСуммаАвтоЗаказа КАК Задание_МинСуммаАвтоЗаказа,
			|	РегистрДат.ПараметрФормированияЗаказовПоставщикам.СообщатьНетПотребности КАК Задание_СообщатьНетПотребности,
			|	РегистрДат.ПараметрФормированияЗаказовПоставщикам.ПополнениеСкладаОтдельно КАК Задание_ПополнениеСкладаОтдельно,
			|	РегистрДат.ПараметрФормированияЗаказовПоставщикам.ДелитьПоФирмамИзЗаявок КАК Задание_ДелитьПоФирмамИзЗаявок,
			|	РегистрДат.ПараметрФормированияЗаказовПоставщикам.ДелитьПоКоличествуСтрок КАК Задание_ДелитьПоКоличествуСтрок,
			|	ВЫРАЗИТЬ(РегистрДат.ПараметрФормированияЗаказовПоставщикам.АдресЭлПочтыТорговойТочки КАК СТРОКА(50)) КАК Задание_АдресЭлПочтыТорговойТочки,
			|	ВЫРАЗИТЬ(РегистрДат.ПараметрФормированияЗаказовПоставщикам.АдресЭлПочтыОтправителя КАК СТРОКА(50)) КАК Задание_АдресЭлПочтыОтправителя,
			|	ВЫРАЗИТЬ(РегистрДат.ПараметрФормированияЗаказовПоставщикам.ТекстПисьма КАК СТРОКА(100)) КАК Задание_ТекстПисьма
			|ПОМЕСТИТЬ ВсеТекущиеЗадания
			|ИЗ
			|	РегистрСведений.ДатыФормированияЗаказовПоставщикам КАК РегистрДат
			|ГДЕ
			|	  РегистрДат.ПараметрФормированияЗаказовПоставщикам.ДниНедели" + СокрЛП(ДеньНедели(ПравилаИгры.РасчетнаяДата)) + " = ИСТИНА	
			|	И &ДтТек >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДтТек, ДЕНЬ), МИНУТА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), РегистрДат.ПараметрФормированияЗаказовПоставщикам.ВремяЗапуска, МИНУТА))
			|	И РАЗНОСТЬДАТ(РегистрДат.ДатаФормирования, &ДтТек, ДЕНЬ) > 0
			|	И РегистрДат.ПараметрФормированияЗаказовПоставщикам.АвтоСозданиеЗаказов = ИСТИНА
			|	И РегистрДат.ПараметрФормированияЗаказовПоставщикам.ПометкаУдаления = ЛОЖЬ
			|	И РегистрДат.ПараметрФормированияЗаказовПоставщикам.Владелец.ПометкаУдаления = ЛОЖЬ
			//|	И РегистрДат.ПараметрФормированияЗаказовПоставщикам.Владелец.Владелец.ПометкаУдаления = ЛОЖЬ
			//|	И РегистрДат.ПараметрФормированияЗаказовПоставщикам.Владелец.Владелец.Поставщик = ИСТИНА
			//|	И РегистрДат.ПараметрФормированияЗаказовПоставщикам.Владелец.Владелец.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПараметрыФормированияЗаказовПоставщикамПрайсы.Ссылка КАК Задание_Ссылка,
			|	ПараметрыФормированияЗаказовПоставщикамПрайсы.ПрайсПоставщика.Склад КАК Склад,
			|	ПараметрыФормированияЗаказовПоставщикамПрайсы.ПрайсПоставщика КАК Задание_ПрайсПоставщика
			|ПОМЕСТИТЬ СписоксВведённыхПрайсов
			|ИЗ
			|	Справочник.ПараметрыФормированияЗаказовПоставщикам.Прайсы КАК ПараметрыФормированияЗаказовПоставщикамПрайсы
			|ГДЕ
			|	ПараметрыФормированияЗаказовПоставщикамПрайсы.Ссылка В
			|			(ВЫБРАТЬ
			|				ВсеТекущиеЗадания.Задание_Ссылка
			|			ИЗ
			|				ВсеТекущиеЗадания)
			|	И ПараметрыФормированияЗаказовПоставщикамПрайсы.ПрайсПоставщика.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВсеТекущиеЗадания.Задание_Ссылка,
			|	ВсеТекущиеЗадания.Задание_ТТ_Поставщика
			|ПОМЕСТИТЬ СписоксЗаданийПоКоторымВзятьВсеИмеющиесяПрайсы
			|ИЗ
			|	ВсеТекущиеЗадания КАК ВсеТекущиеЗадания
			|ГДЕ
			|	НЕ ВсеТекущиеЗадания.Задание_Ссылка В
			|				(ВЫБРАТЬ
			|					СписоксВведённыхПрайсов.Задание_Ссылка
			|				ИЗ
			|					СписоксВведённыхПрайсов)
			|ИНДЕКСИРОВАТЬ ПО
			|	ВсеТекущиеЗадания.Задание_ТТ_Поставщика
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СписоксЗаданийПоКоторымВзятьВсеИмеющиесяПрайсы.Задание_Ссылка,
			|	ПрайсыПоставщиков.Склад КАК Склад,
			|	ПрайсыПоставщиков.Ссылка КАК Задание_ПрайсПоставщика
			|ПОМЕСТИТЬ СписоксПрайсовПоУмолчанию
			|ИЗ
			|	Справочник.ПрайсыПоставщиков КАК ПрайсыПоставщиков
			|		ПОЛНОЕ СОЕДИНЕНИЕ СписоксЗаданийПоКоторымВзятьВсеИмеющиесяПрайсы КАК СписоксЗаданийПоКоторымВзятьВсеИмеющиесяПрайсы
			|		ПО ПрайсыПоставщиков.Владелец = СписоксЗаданийПоКоторымВзятьВсеИмеющиесяПрайсы.Задание_ТТ_Поставщика
			|ГДЕ
			|	ПрайсыПоставщиков.Владелец В
			|			(ВЫБРАТЬ
			|				СписоксЗаданийПоКоторымВзятьВсеИмеющиесяПрайсы.Задание_ТТ_Поставщика
			|			ИЗ
			|				СписоксЗаданийПоКоторымВзятьВсеИмеющиесяПрайсы)
			|	И ПрайсыПоставщиков.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СписоксВведённыхПрайсов.Склад,
			|	СписоксВведённыхПрайсов.Задание_ПрайсПоставщика
			|ПОМЕСТИТЬ ПолныйСписосПрайсовУчаствующихВРассылке
			|ИЗ
			|	СписоксВведённыхПрайсов КАК СписоксВведённыхПрайсов
			
			|" + ?(ЗначениеЗаполнено(Вход_Прайс)," И СписоксВведённыхПрайсов.Задание_ПрайсПоставщика = &Вход_Прайс ","") + "
			
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СписоксПрайсовПоУмолчанию.Склад,
			|	СписоксПрайсовПоУмолчанию.Задание_ПрайсПоставщика
			|ИЗ
			|	СписоксПрайсовПоУмолчанию КАК СписоксПрайсовПоУмолчанию
			
			|" + ?(ЗначениеЗаполнено(Вход_Прайс)," И СписоксПрайсовПоУмолчанию.Задание_ПрайсПоставщика = &Вход_Прайс ","") + "
			
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВсеТекущиеЗадания.Задание_Поставщик КАК Поставщик
			|ПОМЕСТИТЬ СписокПоставщиков
			|ИЗ
			|	ВсеТекущиеЗадания КАК ВсеТекущиеЗадания
			|;
			|
			|";
		Иначе
			
			Запрос_Текст_Шапка = "
			|ВЫБРАТЬ
			|	РегистрДат.Ссылка КАК Задание_Ссылка,
			|	РегистрДат.Владелец КАК Задание_ТТ_Поставщика,
			|	РегистрДат.Владелец.Владелец КАК Задание_Поставщик,
			|	РегистрДат.МинСуммаАвтоЗаказа КАК Задание_МинСуммаАвтоЗаказа,
			|	РегистрДат.СообщатьНетПотребности КАК Задание_СообщатьНетПотребности,
			|	РегистрДат.ПополнениеСкладаОтдельно КАК Задание_ПополнениеСкладаОтдельно,
			|	РегистрДат.ДелитьПоФирмамИзЗаявок КАК Задание_ДелитьПоФирмамИзЗаявок,
			|	РегистрДат.ДелитьПоКоличествуСтрок КАК Задание_ДелитьПоКоличествуСтрок,
			|	ВЫРАЗИТЬ(РегистрДат.АдресЭлПочтыТорговойТочки КАК СТРОКА(50)) КАК Задание_АдресЭлПочтыТорговойТочки,
			|	ВЫРАЗИТЬ(РегистрДат.АдресЭлПочтыОтправителя КАК СТРОКА(50)) КАК Задание_АдресЭлПочтыОтправителя,
			|	ВЫРАЗИТЬ(РегистрДат.ТекстПисьма КАК СТРОКА(100)) КАК Задание_ТекстПисьма
			|ПОМЕСТИТЬ ВсеТекущиеЗадания
			|ИЗ
			|	Справочник.ПараметрыФормированияЗаказовПоставщикам КАК РегистрДат
			|ГДЕ
			|	РегистрДат.Владелец.Владелец = &Контра
			|	И РегистрДат.АвтоСозданиеЗаказов = ИСТИНА
			|	И РегистрДат.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СписоксВведённыхПрайсов.Склад,
			|	СписоксВведённыхПрайсов.Ссылка КАК Задание_ПрайсПоставщика
			|ПОМЕСТИТЬ ПолныйСписосПрайсовУчаствующихВРассылке
			|ИЗ
			|	Справочник.ПрайсыПоставщиков КАК СписоксВведённыхПрайсов
			|ГДЕ
			|	СписоксВведённыхПрайсов.Владелец.Владелец = &Контра
			
			|" + ?(ЗначениеЗаполнено(Вход_Прайс)," И СписоксВведённыхПрайсов.Ссылка = &Вход_Прайс ","") + "
			
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ 
			|	ВсеТекущиеЗадания.Ссылка КАК Поставщик
			|ПОМЕСТИТЬ СписокПоставщиков
			|ИЗ
			|	Справочник.Контрагенты КАК ВсеТекущиеЗадания
			|ГДЕ
			|	ВсеТекущиеЗадания.Ссылка = &Контра
			|;
			|
			|";
		
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос_Текст_Ядро = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеТекущиеЗадания.Задание_Поставщик,
		|	МАКСИМУМ(ВсеТекущиеЗадания.Задание_МинСуммаАвтоЗаказа) КАК Задание_МинСуммаАвтоЗаказа,
		|	МАКСИМУМ(ВсеТекущиеЗадания.Задание_СообщатьНетПотребности) КАК Задание_СообщатьНетПотребности,
		|	МАКСИМУМ(ВсеТекущиеЗадания.Задание_ПополнениеСкладаОтдельно) КАК Задание_ПополнениеСкладаОтдельно,
		|	МАКСИМУМ(ВсеТекущиеЗадания.Задание_ДелитьПоФирмамИзЗаявок) КАК Задание_ДелитьПоФирмамИзЗаявок,
		|	МАКСИМУМ(ВсеТекущиеЗадания.Задание_ДелитьПоКоличествуСтрок) КАК Задание_ДелитьПоКоличествуСтрок,
		|	МАКСИМУМ(ВсеТекущиеЗадания.Задание_АдресЭлПочтыТорговойТочки) КАК Задание_АдресЭлПочтыТорговойТочки,
		|	МАКСИМУМ(ВсеТекущиеЗадания.Задание_АдресЭлПочтыОтправителя) КАК Задание_АдресЭлПочтыОтправителя,
		|	МАКСИМУМ(ВсеТекущиеЗадания.Задание_ТекстПисьма) КАК Задание_ТекстПисьма
		|ПОМЕСТИТЬ ПараметрыЗаданий
		|ИЗ
		|	ВсеТекущиеЗадания КАК ВсеТекущиеЗадания
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеТекущиеЗадания.Задание_Поставщик
		
		|ИНДЕКСИРОВАТЬ ПО
		|	ВсеТекущиеЗадания.Задание_Поставщик
		
		|;
		|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ДоговораОнЛайн.ДоговорКонтрагента,
|	ДоговораОнЛайн.Пользователь,
|	ДоговораОнЛайн.Склад,
|	ДоговораОнЛайн.МаршрутДоставки
|ПОМЕСТИТЬ ДоговораВРаботе
|ИЗ
|	РегистрСведений.ИсторияФормированияСлужебныхЗаданий КАК ДоговораОнЛайн
|ГДЕ
|	ДоговораОнЛайн.Активно = ИСТИНА
|	И НЕ ДоговораОнЛайн.Пользователь = &ТекПользователь
|;
|
|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Владелец КАК Поставщик,
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
		|	ДоговорыКонтрагентов.ВидДоговора,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком) И ДоговорыКонтрагентов.ДоговорНаКросс = Истина
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКросс,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ОтветХранение)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоWMI,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком) И ДоговорыКонтрагентов.ДоговорНаСток = Истина
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоСток
		
	//////PK83-635		
	////|ВЫБОР
	////|	КОГДА ДоговорыКонтрагентов.Ссылка = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагентаЗакупка
	////|		ТОГДА 1
	////|	ИНАЧЕ 0
	////|КОНЕЦ КАК ЭтоОсновной
		
		|ПОМЕСТИТЬ ДоговораПоставщиков
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец В
		|			(ВЫБРАТЬ
		|				СписокПоставщиков.Поставщик
		|			ИЗ
		|				СписокПоставщиков)
		|	И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|			ИЛИ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ОтветХранение))
		|	И ДоговорыКонтрагентов.ДоговорПриостановлен = ЛОЖЬ
		|	И ДоговорыКонтрагентов.СлужебныйДоговор = ЛОЖЬ
		|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		
		//|И	НЕ ДоговорыКонтрагентов.Ссылка В
		//|				(ВЫБРАТЬ
		//|					ДоговораВРаботе.ДоговорКонтрагента
		//|				ИЗ
		//|					ДоговораВРаботе)

		|" + ?(ЗначениеЗаполнено(Вход_Аукцион),"","
													|И	НЕ ДоговорыКонтрагентов.Ссылка В
													|				(ВЫБРАТЬ
													|					ДоговораВРаботе.ДоговорКонтрагента
													|				ИЗ
													|					ДоговораВРаботе)
		|") + "

		|;
		|
		
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ //ПЕРВЫЕ 1 
|	ДоговораПоставщиков.Поставщик,
|    МАКСИМУМ(ДоговораПоставщиков.ДоговорКонтрагента) КАК ДоговорКонтрагента
|ПОМЕСТИТЬ ДоговораПоставщиковWMI
|ИЗ
|	ДоговораПоставщиков КАК ДоговораПоставщиков
|ГДЕ
|	ДоговораПоставщиков.ЭтоWMI = ИСТИНА
|	//УПОРЯДОЧИТЬ ПО
|   	//ЭтоОсновной УБЫВ
|СГРУППИРОВАТЬ ПО
|	ДоговораПоставщиков.Поставщик
|ИНДЕКСИРОВАТЬ ПО
|	ДоговораПоставщиков.Поставщик
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ //ПЕРВЫЕ 1
|	ДоговораПоставщиков.Поставщик,
|    МАКСИМУМ(ДоговораПоставщиков.ДоговорКонтрагента) КАК ДоговорКонтрагента
|ПОМЕСТИТЬ ДоговораПоставщиковКрос
|ИЗ
|	ДоговораПоставщиков КАК ДоговораПоставщиков
|ГДЕ
|	ДоговораПоставщиков.ЭтоКросс = ИСТИНА
|	//УПОРЯДОЧИТЬ ПО
|   	//ЭтоОсновной УБЫВ
|СГРУППИРОВАТЬ ПО
|	ДоговораПоставщиков.Поставщик
|   	
|ИНДЕКСИРОВАТЬ ПО
|	ДоговораПоставщиков.Поставщик
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ //ПЕРВЫЕ 1
|	ДоговораПоставщиков.Поставщик,
|    МАКСИМУМ(ДоговораПоставщиков.ДоговорКонтрагента) КАК ДоговорКонтрагента
|ПОМЕСТИТЬ ДоговораПоставщиковСток
|ИЗ
|	ДоговораПоставщиков КАК ДоговораПоставщиков
|ГДЕ
|	ДоговораПоставщиков.ЭтоСток = ИСТИНА
|	//УПОРЯДОЧИТЬ ПО
|   	//ЭтоОсновной УБЫВ
|СГРУППИРОВАТЬ ПО
|	ДоговораПоставщиков.Поставщик
|ИНДЕКСИРОВАТЬ ПО
|	ДоговораПоставщиков.Поставщик
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ //ПЕРВЫЕ 1
|	ДоговораПоставщиков.Поставщик,
|    МАКСИМУМ(ДоговораПоставщиков.ДоговорКонтрагента) КАК ДоговорКонтрагента
|ПОМЕСТИТЬ ДоговораПоставщиковДефолт
|ИЗ
|	ДоговораПоставщиков КАК ДоговораПоставщиков
|ГДЕ
|	НЕ ДоговораПоставщиков.ЭтоWMI = ИСТИНА
|	//УПОРЯДОЧИТЬ ПО
|   	//ЭтоОсновной УБЫВ
|СГРУППИРОВАТЬ ПО
|	ДоговораПоставщиков.Поставщик
|ИНДЕКСИРОВАТЬ ПО
|	ДоговораПоставщиков.Поставщик
|;
|
|////////////////////////////////////////////////////////////////////////////////

		|ВЫБРАТЬ
		|	МенеджерыСнабжения.ТорговаяТочка.Владелец КАК Поставщик,
		|	МАКСИМУМ(МенеджерыСнабжения.Менеджер) КАК МенеджерСнабжения
		|ПОМЕСТИТЬ Менеджеры
		|ИЗ
		|	РегистрСведений.МенеджерыТорговыхТочек.СрезПоследних(
		|			&ДтТек,
		|			ТорговаяТочка.Владелец В
		|					(ВЫБРАТЬ
		|						СписокПоставщиков.Поставщик
		|					ИЗ
		|						СписокПоставщиков)
		|				И ВидМенеджера = ЗНАЧЕНИЕ(Перечисление.ВидыМенеджеров.Снабжения)) КАК МенеджерыСнабжения
		|
		|СГРУППИРОВАТЬ ПО
		|	МенеджерыСнабжения.ТорговаяТочка.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект КАК Поставщик,
		|	МАКСИМУМ(ЗначенияСвойствОбъектов.Значение) КАК Мэйл
		|ПОМЕСТИТЬ АдресаОтправкиЗаказовПоставщику
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.ЭлектронныйАдресДляОтправкиЗаказовПоставщику)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияСвойствОбъектов.Объект
		|ИНДЕКСИРОВАТЬ ПО
		|	Поставщик
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект КАК Поставщик,
		|	МАКСИМУМ(ЗначенияСвойствОбъектов.Значение) КАК КонтактноеЛицо
		|ПОМЕСТИТЬ КонтактыПоставщиков
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.ОтветственныйЗаПриемИОбработкуЗаказовПоставщика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияСвойствОбъектов.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Поставщик
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КА.Ссылка КАК Поставщик_Ссылка,
		|	КА.ОсновнаяТорговаяТочка КАК Поставщик_ОсновнаяТТ,
		
		//|	ВЫБОР
		//|		КОГДА НЕ КА.ОсновнойДоговорКонтрагентаЗакупка = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		//|			ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка
		//|		ИНАЧЕ ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента, КА.ОсновнойДоговорКонтрагентаЗакупка)
		//|	КОНЕЦ КАК Поставщик_ДоговорОсновной,
		|	ЕСТЬNULL(КА.ОсновнойДоговорКонтрагентаЗакупка,ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Поставщик_ДоговорОсновной,
		|	ВЫБОР
		|		КОГДА КА.ОсновнойДоговорКонтрагентаЗакупка = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				ИЛИ КА.ОсновнойДоговорКонтрагентаЗакупка ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Поставщик_ДоговорКонтрагентаОсновнойСч,
		
		|	ВЫБОР
		|		КОГДА НЕ КА.ОсновнойДоговорКонтрагентаЗакупка = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка.Организация
		|		ИНАЧЕ ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|	КОНЕЦ КАК Поставщик_ОрганизацияОсновная,
		|	ВЫБОР
		|		КОГДА НЕ КА.ОсновнойДоговорКонтрагентаЗакупка = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка.ВалютаВзаиморасчетов
		|		ИНАЧЕ ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|	КОНЕЦ КАК Поставщик_ВалютаДокументаОсновная,
		|	ВЫБОР
		|		КОГДА НЕ КА.ОсновнойДоговорКонтрагентаЗакупка = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка.Организация.УчитыватьНДС
		|		ИНАЧЕ ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента.Организация.УчитыватьНДС, ИСТИНА)
		|	КОНЕЦ КАК Поставщик_УчитыватьНДСОсновная,
		
		//ЕСТЬNULL(ДоговораПоставщиковWMI.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Поставщик_ДоговорКонтрагентаWMI_,
		|	ВЫБОР
		|		КОГДА ДоговораПоставщиковWMI.ДоговорКонтрагента ЕСТЬ NULL ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|		ИНАЧЕ
		|	         ВЫБОР 
		|	         	КОГДА ДоговораПоставщиковWMI.ДоговорКонтрагента.ВидДоговора = КА.ОсновнойДоговорКонтрагентаЗакупка.ВидДоговора ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка
		|	            Иначе ДоговораПоставщиковWMI.ДоговорКонтрагента
		|	         КОНЕЦ
		|	КОНЕЦ КАК Поставщик_ДоговорКонтрагентаWMI,
		
		|	ВЫБОР
		|		КОГДА ДоговораПоставщиковWMI.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				ИЛИ ДоговораПоставщиковWMI.ДоговорКонтрагента ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Поставщик_ДоговорКонтрагентаWMIСч,
		
		//|	ЕСТЬNULL(ДоговораПоставщиковКрос.ДоговорКонтрагента, ВЫБОР
		//|			КОГДА НЕ КА.ОсновнойДоговорКонтрагентаЗакупка = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		//|				ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка
		//|			ИНАЧЕ ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента, КА.ОсновнойДоговорКонтрагентаЗакупка)
		//|		КОНЕЦ) КАК Поставщик_ДоговорКонтрагентаКрос,
		
		//ЕСТЬNULL(ДоговораПоставщиковКрос.ДоговорКонтрагента, ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента,ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) ) КАК	Поставщик_ДоговорКонтрагентаКрос_,
	
		//|	ВЫБОР
		//|		КОГДА ДоговораПоставщиковКрос.ДоговорКонтрагента ЕСТЬ NULL ТОГДА ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента,ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		//|		ИНАЧЕ
		//|	         ВЫБОР 
		//|	         	КОГДА ДоговораПоставщиковКрос.ДоговорКонтрагента.ВидДоговора = КА.ОсновнойДоговорКонтрагентаЗакупка.ВидДоговора ТОГДА  КА.ОсновнойДоговорКонтрагентаЗакупка
		//|	            Иначе ДоговораПоставщиковКрос.ДоговорКонтрагента
		//|	         КОНЕЦ
		//|	КОНЕЦ КАК Поставщик_ДоговорКонтрагентаКрос,
		
		|	ВЫБОР
		|		КОГДА КА.ОсновнойДоговорКонтрагентаЗакупка.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком) ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|	КОНЕЦ КАК Поставщик_ДоговорКонтрагентаКрос,
		
		|	ВЫБОР
		|		КОГДА ДоговораПоставщиковКрос.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				ИЛИ ДоговораПоставщиковКрос.ДоговорКонтрагента ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Поставщик_ДоговорКонтрагентаКросСч,
		
		//|	ЕСТЬNULL(ДоговораПоставщиковСток.ДоговорКонтрагента, ВЫБОР
		//|			КОГДА НЕ КА.ОсновнойДоговорКонтрагентаЗакупка = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		//|				ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка
		//|			ИНАЧЕ ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента, КА.ОсновнойДоговорКонтрагентаЗакупка)
		//|		КОНЕЦ) КАК Поставщик_ДоговорКонтрагентаСток,
		
		//ЕСТЬNULL(ДоговораПоставщиковСток.ДоговорКонтрагента, ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента,ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) ) КАК	Поставщик_ДоговорКонтрагентаСток,
		
		//|	ВЫБОР
		//|		КОГДА ДоговораПоставщиковСток.ДоговорКонтрагента ЕСТЬ NULL ТОГДА ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента,ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		//|		ИНАЧЕ
		//|	         ВЫБОР 
		//|	         	КОГДА ДоговораПоставщиковСток.ДоговорКонтрагента.ВидДоговора = КА.ОсновнойДоговорКонтрагентаЗакупка.ВидДоговора И ДоговораПоставщиковСток.ДоговорКонтрагента.ДоговорНаСток = КА.ОсновнойДоговорКонтрагентаЗакупка.ДоговорНаСток ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка
		//|	            Иначе ДоговораПоставщиковСток.ДоговорКонтрагента
		//|	         КОНЕЦ
		//|	КОНЕЦ КАК Поставщик_ДоговорКонтрагентаСток,
		
		|	ВЫБОР
		|		КОГДА КА.ОсновнойДоговорКонтрагентаЗакупка.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком) ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|	КОНЕЦ КАК Поставщик_ДоговорКонтрагентаСток,
		
		|	ВЫБОР
		|		КОГДА ДоговораПоставщиковСток.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				ИЛИ ДоговораПоставщиковСток.ДоговорКонтрагента ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Поставщик_ДоговорКонтрагентаСтокСч,
		
		|	ВЫБОР
		|		КОГДА НЕ КА.ОсновнойДоговорКонтрагентаЗакупка = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА КА.ОсновнойДоговорКонтрагентаЗакупка.ТипЦен
		|		ИНАЧЕ ЕСТЬNULL(ДоговораПоставщиковДефолт.ДоговорКонтрагента.ТипЦен, ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка))
		|	КОНЕЦ КАК Поставщик_ТипЦенОсновной,
		|	ЕСТЬNULL(Манагеры.МенеджерСнабжения, ЗНАЧЕНИЕ(Справочник.Менеджеры.ПустаяСсылка)) КАК Поставщик_МенеджерСнабжения,
		|	ЕСТЬNULL(Мыло.Мэйл, """""""") КАК Поставщик_ЭлектронныйАдресОтправкиЗаказовПоставщику,
		|	ЕСТЬNULL(Лица.КонтактноеЛицо, КА.ОсновноеКонтактноеЛицо) КАК Поставщик_КонтактноеЛицоПоставщика,
		|	ЕСТЬNULL(КА.ОсновнаяТорговаяТочка.флВыгружать_Заказ_вДрБазу, ЛОЖЬ) КАК Поставщик_Выгружать_Заказ_вДрБазу
		|ПОМЕСТИТЬ ПараметрыПоставщиков
		|ИЗ
		|	Справочник.Контрагенты КАК КА
		|		ЛЕВОЕ СОЕДИНЕНИЕ Менеджеры КАК Манагеры
		|		ПО КА.Ссылка = Манагеры.Поставщик
		|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаОтправкиЗаказовПоставщику КАК Мыло
		|		ПО КА.Ссылка = Мыло.Поставщик
		|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактыПоставщиков КАК Лица
		|		ПО КА.Ссылка = Лица.Поставщик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговораПоставщиковWMI КАК ДоговораПоставщиковWMI
		|		ПО КА.Ссылка = ДоговораПоставщиковWMI.Поставщик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговораПоставщиковКрос КАК ДоговораПоставщиковКрос
		|		ПО КА.Ссылка = ДоговораПоставщиковКрос.Поставщик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговораПоставщиковСток КАК ДоговораПоставщиковСток
		|		ПО КА.Ссылка = ДоговораПоставщиковСток.Поставщик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговораПоставщиковДефолт КАК ДоговораПоставщиковДефолт
		|		ПО КА.Ссылка = ДоговораПоставщиковДефолт.Поставщик
		|ГДЕ
		|	КА.Ссылка В
		|			(ВЫБРАТЬ
		|				СписокПоставщиков.Поставщик
		|			ИЗ
		|				СписокПоставщиков)
		
		|ИНДЕКСИРОВАТЬ ПО
		|	Поставщик_Ссылка
		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АукционПоставщиковЗаявки.Заявка.Ссылка КАК ЗаявкаСсылка,
		|	АукционПоставщиковЗаявки.Ссылка КАК АукционСсылка,
		|	АукционПоставщиковЗаявки.Ссылка.ВсеЗаявкиЗагружены КАК ВсеЗаявкиЗагружены
		|ПОМЕСТИТЬ СписокАукционов
		|ИЗ
		|	Справочник.АукционПоставщиков.Заявки КАК АукционПоставщиковЗаявки
		|ГДЕ
		|	АукционПоставщиковЗаявки.Ссылка.ЗаказыСозданы = Ложь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Аукцион.ЗаявкаСсылка,
		|	Аукцион.АукционСсылка
		|ПОМЕСТИТЬ Аукцион_ЗагруженыйПолностью
		|ИЗ
		|	СписокАукционов КАК Аукцион
		|ГДЕ
		|	Аукцион.ВсеЗаявкиЗагружены = ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Аукцион.ЗаявкаСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Аукцион.ЗаявкаСсылка,
		|	Аукцион.АукционСсылка
		|ПОМЕСТИТЬ Аукцион_НЕ_ЗагруженыйПолностью
		|ИЗ
		|	СписокАукционов КАК Аукцион
		|ГДЕ
		|	Аукцион.ВсеЗаявкиЗагружены = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Ссылка КАК Склад,
		|	Склады.СкладVMI КАК ЭтоVMI,
		|	Склады.КонтрагентПополнениеСклада
		|ПОМЕСТИТЬ спсСкладов
		|ИЗ
		|	Справочник.Склады КАК Склады
		
		|ИНДЕКСИРОВАТЬ ПО Склад

		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	спсСкладов.Склад,
		|	спсСкладов.КонтрагентПополнениеСклада
		|ПОМЕСТИТЬ НашаКонтра
		|ИЗ
		|	спсСкладов КАК спсСкладов
		|ГДЕ
		|	НЕ спсСкладов.КонтрагентПополнениеСклада = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		
		|ИНДЕКСИРОВАТЬ ПО КонтрагентПополнениеСклада
		
		|;
		|
		
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ПрайсПоставщика.Владелец.Владелец КАК Поставщик,
|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.Номенклатура КАК Номенклатура,
|	//ЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта,
|	МАКСИМУМ(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена) КАК Цена
|ПОМЕСТИТЬ Цены_Поставщиков
|ИЗ
|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
|			&ДтТек,
|			ПрайсПоставщика.Владелец.Владелец В
|				(ВЫБРАТЬ
|					ПолныйСписосПрайсовУчаствующихВРассылке.Задание_ПрайсПоставщика.Владелец.Владелец
|				ИЗ
|					ПолныйСписосПрайсовУчаствующихВРассылке)) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
|СГРУППИРОВАТЬ ПО					
|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ПрайсПоставщика.Владелец.Владелец,
|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.Номенклатура
|
|ИНДЕКСИРОВАТЬ ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.ПрайсПоставщика.Владелец.Владелец,Номенклатура 
|;
|
|////////////////////////////////////////////////////////////////////////////////

		|ВЫБРАТЬ  
		|	ЗаявкиПокупателейОстатки.Склад КАК Заявки_Склад,
		|	ЗаявкиПокупателейОстатки.Номенклатура КАК Заявки_Номенклатура,
		|	ЗаявкиПокупателейОстатки.КоличествоОстаток КАК Заявки_Количество,
		|	ЗаявкиПокупателейОстатки.СтрокаЗаявки КАК Заявки_СтрокаЗаявки,
		|	ЗаявкиПокупателейОстатки.ТорговаяТочка КАК Заявки_ТТ_Покупателя,
		|	ЗаявкиПокупателейОстатки.ДоговорКонтрагента КАК Заявки_ДоговорПокупателя
		|ПОМЕСТИТЬ ВсеЗаявкиОст
		|ИЗ
		|	РегистрНакопления.ЗаявкиПокупателей.Остатки(
		|			&ДтТек,
		
		|			 СтрокаЗаявки.Поставщик В (ВЫБРАТЬ СписокПоставщиков.Поставщик ИЗ СписокПоставщиков)   И
		
		
		|			(СтрокаЗаявки.УдалитьСостояниеЗаказа ЕСТЬ NULL
		|				ИЛИ СтрокаЗаявки.УдалитьСостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПустаяСсылка))
		//|				И СтрокаЗаявки.Заявка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяПодтвержден)
		|               И СтрокаЗаявки.УдалитьСостояниеЗаявки = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяПодтвержден)
		
		|				И НЕ СтрокаЗаявки.Заявка.Ссылка В
		|						(ВЫБРАТЬ
		|							СпсЗаявокИсключений.ЗаявкаСсылка
		|						ИЗ
		|							" + ?(ЗначениеЗаполнено(Вход_Аукцион), "Аукцион_НЕ_ЗагруженыйПолностью" , "СписокАукционов" )+ " КАК СпсЗаявокИсключений )
		
		|				И (СтрокаЗаявки.Заявка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.ЗаявкаПокупателя)
		|						И СтрокаЗаявки.ПрайсПоставщика В
		|							(ВЫБРАТЬ
		|								ПолныйСписосПрайсовУчаствующихВРассылке.Задание_ПрайсПоставщика
		|							ИЗ
		|								ПолныйСписосПрайсовУчаствующихВРассылке
		|							ГДЕ
		|								(ПолныйСписосПрайсовУчаствующихВРассылке.Склад = NULL
		|									ИЛИ ПолныйСписосПрайсовУчаствующихВРассылке.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))
		
		|					ИЛИ СтрокаЗаявки.Заявка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.ПополнениеСклада)
		|						И СтрокаЗаявки.ПрайсПоставщика В
		|							(ВЫБРАТЬ
		|								ПолныйСписосПрайсовУчаствующихВРассылке.Задание_ПрайсПоставщика
		|							ИЗ
		|								ПолныйСписосПрайсовУчаствующихВРассылке))
		
		|" + ?(ЗначениеЗаполнено(Вход_Аукцион)," И СтрокаЗаявки.Заявка.Аукцион = &Вход_Аукцион ", ?(ЗначениеЗаполнено(Вход_Заявка)," И СтрокаЗаявки.Заявка = &Вход_Заявка ","") ) + "
		
		|												) КАК ЗаявкиПокупателейОстатки
		|ГДЕ
		|	ЗаявкиПокупателейОстатки.КоличествоОстаток  > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		
		
		
		
		
		|ВЫБРАТЬ 
		|	ОтказыПоЗаявкамОбороты.СтрокаЗаявки,
		|	СУММА(ОтказыПоЗаявкамОбороты.КоличествоОборот) КАК Количество
		|ПОМЕСТИТЬ Отказы
		|ИЗ
		|	РегистрНакопления.ОтказыПоЗаявкам.Обороты(, , Регистратор, СтрокаЗаявки В (ВЫБРАТЬ ВсеЗаявки1.Заявки_СтрокаЗаявки ИЗ ВсеЗаявкиОст КАК ВсеЗаявки1)) КАК ОтказыПоЗаявкамОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтказыПоЗаявкамОбороты.СтрокаЗаявки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ПродажиОбороты.СтрокаЗаявки,
		|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество
		|ПОМЕСТИТЬ Продажи
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(, , Регистратор, СтрокаЗаявки В (ВЫБРАТЬ ВсеЗаявки2.Заявки_СтрокаЗаявки ИЗ ВсеЗаявкиОст КАК ВсеЗаявки2)) КАК ПродажиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажиОбороты.СтрокаЗаявки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ПополнениеСкладаОбороты.СтрокаЗаявки,
		|	СУММА(ПополнениеСкладаОбороты.КоличествоОборот) КАК Количество
		|ПОМЕСТИТЬ ПополнениеСклада
		|ИЗ
		|	РегистрНакопления.ПополнениеСклада.Обороты(, , Регистратор, СтрокаЗаявки В (ВЫБРАТЬ ВсеЗаявки3.Заявки_СтрокаЗаявки ИЗ ВсеЗаявкиОст КАК ВсеЗаявки3)) КАК ПополнениеСкладаОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ПополнениеСкладаОбороты.СтрокаЗаявки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ВсеЗаявки4.Заявки_Склад,
		|	ВсеЗаявки4.Заявки_Номенклатура,
		|	ВсеЗаявки4.Заявки_Количество - ЕСТЬNULL(Отказы.Количество,0) - ЕСТЬNULL(Продажи.Количество,0) - ЕСТЬNULL(ПополнениеСклада.Количество,0) КАК Заявки_Количество,
		|	ВсеЗаявки4.Заявки_СтрокаЗаявки,
		|	ВсеЗаявки4.Заявки_ТТ_Покупателя,
		|	ВсеЗаявки4.Заявки_ДоговорПокупателя
		|ПОМЕСТИТЬ ВсеЗаявкиЧистые
		|ИЗ
		|	ВсеЗаявкиОст КАК ВсеЗаявки4
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Отказы КАК Отказы
		|		ПО ВсеЗаявки4.Заявки_СтрокаЗаявки = Отказы.СтрокаЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Продажи КАК Продажи
		|		ПО ВсеЗаявки4.Заявки_СтрокаЗаявки = Продажи.СтрокаЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПополнениеСклада КАК ПополнениеСклада
		|		ПО ВсеЗаявки4.Заявки_СтрокаЗаявки = ПополнениеСклада.СтрокаЗаявки
		|ГДЕ
		|	ВсеЗаявки4.Заявки_Количество - ЕСТЬNULL(Отказы.Количество,0) - ЕСТЬNULL(Продажи.Количество,0) - ЕСТЬNULL(ПополнениеСклада.Количество,0) > 0
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
	
		|ВЫБРАТЬ 
		
		//|	ВсеЗаявки5.Заявки_Склад,
		
		////+ XX-53 20180615 14:39
		//|	ВЫБОР
		//|		КОГДА спсСкладов.ЭтоVMI = ИСТИНА
		//|			ТОГДА ВсеЗаявки5.Заявки_Склад
		//|		КОГДА НЕ НашаКонтра.КонтрагентПополнениеСклада ЕСТЬ NULL
		//|			ТОГДА ВсеЗаявки5.Заявки_Склад
		//|		ИНАЧЕ &ЦС
		//|	КОНЕЦ КАК Заявки_Склад,
		////- XX-53
		
		//+ XX-211 20180622 11:08
		|ВЫБОР 
		|	КОГДА ВсеЗаявки5.Заявки_Склад = &СкладПитер1 ТОГДА ВсеЗаявки5.Заявки_Склад
		|	КОГДА ВсеЗаявки5.Заявки_Склад = &СкладПитер2 ТОГДА ВсеЗаявки5.Заявки_Склад
		|	ИНАЧЕ
			|	ВЫБОР
			|		КОГДА спсСкладов.ЭтоVMI = ИСТИНА
			|			ТОГДА ВсеЗаявки5.Заявки_Склад
			|		КОГДА НЕ НашаКонтра.КонтрагентПополнениеСклада ЕСТЬ NULL
			|			ТОГДА ВсеЗаявки5.Заявки_Склад
			|		ИНАЧЕ &ЦС
			|	КОНЕЦ 
		|	КОНЕЦ КАК Заявки_Склад,
		//- XX-211
		
		|	ВсеЗаявки5.Заявки_Номенклатура,
		|	ВсеЗаявки5.Заявки_Количество,
		|	ВсеЗаявки5.Заявки_Номенклатура.ЕдиницаХраненияОстатков КАК Заявки_ЕдиницаИзмерения,
		|	ВсеЗаявки5.Заявки_Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Заявки_Коэффициент,
		|	ВсеЗаявки5.Заявки_СтрокаЗаявки,
		|	ВсеЗаявки5.Заявки_СтрокаЗаявки.ЦенаЗакупки КАК Заявки_ЦенаЗакупки,
		|	ВсеЗаявки5.Заявки_СтрокаЗаявки.Заявка КАК Заявки_ЗаявкаСсылка,
		|	ВсеЗаявки5.Заявки_СтрокаЗаявки.IDSite КАК Заявки_IDSite,
		|	ВсеЗаявки5.Заявки_СтрокаЗаявки.СрокГарантированныйЗаказа КАК Заявки_СрокГарантированныйЗаказа,
		|	ВсеЗаявки5.Заявки_СтрокаЗаявки.СрокОжидаемыйЗаказа КАК Заявки_СрокОжидаемыйЗаказа,
		|	ВсеЗаявки5.Заявки_СтрокаЗаявки.ПрайсПоставщика КАК Заявки_ПрайсПоставщика,
		//|	ВсеЗаявки5.Заявки_СтрокаЗаявки.ПрайсПоставщика.Владелец.Владелец КАК Заявки_Поставщик,
		|	ВсеЗаявки5.Заявки_СтрокаЗаявки.Поставщик КАК Заявки_Поставщик,
		|	ВсеЗаявки5.Заявки_ТТ_Покупателя,
		|	ВсеЗаявки5.Заявки_ТТ_Покупателя.Владелец КАК Заявки_Покупатель,
		|	ВсеЗаявки5.Заявки_ДоговорПокупателя,
		|	ВсеЗаявки5.Заявки_ДоговорПокупателя.Организация КАК Заявки_ДоговорПокупателя_Организация,
		|	ВЫБОР
		|		КОГДА Аукцион.ЗаявкаСсылка ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.АукционПоставщиков.ПустаяСсылка)
		|		ИНАЧЕ Аукцион.АукционСсылка
		|	КОНЕЦ КАК Заявки_Аукцион,
		|	ВЫБОР
		|		КОГДА Аукцион.ЗаявкаСсылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Заявки_ЭтоАукцион,
		
		|	спсСкладов.ЭтоVMI КАК Заявки_ЭтоVMI,
		|	ВЫБОР
		|		КОГДА спсСкладов.ЭтоVMI = ИСТИНА
		|			ТОГДА ЛОЖЬ
		|		КОГДА НЕ НашаКонтра.КонтрагентПополнениеСклада ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Заявки_этоСток,
		|	ВЫБОР
		|		КОГДА спсСкладов.ЭтоVMI = ИСТИНА
		|			ТОГДА ЛОЖЬ
		|		КОГДА НЕ НашаКонтра.КонтрагентПополнениеСклада ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Заявки_этоКросс,
		|	ВЫБОР
		|		КОГДА спсСкладов.ЭтоVMI = ИСТИНА
		|			ТОГДА ""VMI""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НЕ НашаКонтра.КонтрагентПополнениеСклада ЕСТЬ NULL
		|					ТОГДА ""Сток""
		|				ИНАЧЕ ""Кросс""
		|			КОНЕЦ
		|	КОНЕЦ КАК Заявки_ВидОперации,
		
		|	ЕСТЬNULL(ЦЕНЫ_ПОСТАВЩИКОВ.Цена, 0) КАК Заявки_ЦенаПоставщика,
		|	ЕСТЬNULL(ВсеЗаявки5.Заявки_СтрокаЗаявки.ЦенаЗакупки, ЕСТЬNULL(ЦЕНЫ_ПОСТАВЩИКОВ.Цена, 0)) КАК Заявки_Цена,
		|	ЕСТЬNULL(ВсеЗаявки5.Заявки_СтрокаЗаявки.ЦенаЗакупки, ЕСТЬNULL(ЦЕНЫ_ПОСТАВЩИКОВ.Цена, 0)) * ВсеЗаявки5.Заявки_Количество КАК Заявки_Сумма,
		
		|	1 КАК Заявки_Сч,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВсеЗаявки5.Заявки_СтрокаЗаявки.ЦенаЗакупки, ЕСТЬNULL(ЦЕНЫ_ПОСТАВЩИКОВ.Цена, 0)) * ВсеЗаявки5.Заявки_Количество > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Вкл
		|
		|ПОМЕСТИТЬ ВсеЗаявки
		|ИЗ
		|	ВсеЗаявкиЧистые КАК ВсеЗаявки5
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Аукцион_ЗагруженыйПолностью КАК Аукцион
		|		ПО ВсеЗаявки5.Заявки_СтрокаЗаявки.Заявка = Аукцион.ЗаявкаСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ спсСкладов КАК спсСкладов
		|		ПО ВсеЗаявки5.Заявки_Склад = спсСкладов.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ НашаКонтра КАК НашаКонтра
		|		ПО ВсеЗаявки5.Заявки_ТТ_Покупателя.Владелец = НашаКонтра.КонтрагентПополнениеСклада
		|        И ВсеЗаявки5.Заявки_Склад  = НашаКонтра.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Цены_Поставщиков КАК ЦЕНЫ_ПОСТАВЩИКОВ
		|		ПО ВсеЗаявки5.Заявки_Номенклатура = ЦЕНЫ_ПОСТАВЩИКОВ.Номенклатура
		|			И ВсеЗаявки5.Заявки_СтрокаЗаявки.Поставщик = ЦЕНЫ_ПОСТАВЩИКОВ.Поставщик
		|
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеЗаявки.Заявки_Поставщик,
		|	ЕСТЬNULL(ПараметрыЗаданий.Задание_МинСуммаАвтоЗаказа, 1) КАК Задание_МинСуммаАвтоЗаказа,
		|	СУММА(ВсеЗаявки.Заявки_Сумма) КАК Заявки_Сумма
		|ПОМЕСТИТЬ Изгои
		|ИЗ
		|	ВсеЗаявки КАК ВсеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыЗаданий КАК ПараметрыЗаданий
		|		ПО ВсеЗаявки.Заявки_Поставщик = ПараметрыЗаданий.Задание_Поставщик
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеЗаявки.Заявки_Поставщик,
		|	ПараметрыЗаданий.Задание_МинСуммаАвтоЗаказа
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВсеЗаявки.Заявки_Сумма) < ЕСТЬNULL(ПараметрыЗаданий.Задание_МинСуммаАвтоЗаказа, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ * ИЗ Изгои 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеТекущиеЗадания.Задание_Ссылка,
		|	ВсеТекущиеЗадания.Задание_Поставщик,
		|	ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ЭлектронныйАдресОтправкиЗаказовПоставщику, """") КАК ЭлектронныйАдрес,
		|	&ДтТек КАК МоментВремениЗапроса
		|ИЗ
		|	ВсеТекущиеЗадания КАК ВсеТекущиеЗадания
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыПоставщиков
		|	ПО ВсеТекущиеЗадания.Задание_Поставщик = ПараметрыПоставщиков.Поставщик_Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеЗаявки.Заявки_ЭтоАукцион,
		|	ВсеЗаявки.Заявки_ЭтоVMI,
		|	ВсеЗаявки.Заявки_этоСток,
		|	ВсеЗаявки.Заявки_этоКросс,
		|	ВсеЗаявки.Заявки_ВидОперации,
		|	ВсеЗаявки.Заявки_Поставщик,
		|	ВсеЗаявки.Заявки_Склад,
		|	СУММА(ВсеЗаявки.Заявки_Количество) КАК Заявки_Количество,
		|	СУММА(ВсеЗаявки.Заявки_Сумма) КАК Заявки_Сумма,
		|	СУММА(ВсеЗаявки.Заявки_Сч) КАК Заявки_Сч
		|ИЗ
		|	ВсеЗаявки КАК ВсеЗаявки
		|ГДЕ
		|	НЕ ВсеЗаявки.Заявки_Поставщик В
		|				(ВЫБРАТЬ
		|					ИЗГОИ.Заявки_Поставщик
		|				ИЗ
		|					ИЗГОИ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеЗаявки.Заявки_ЭтоАукцион,
		|	ВсеЗаявки.Заявки_ЭтоVMI,
		|	ВсеЗаявки.Заявки_этоСток,
		|	ВсеЗаявки.Заявки_этоКросс,
		|	ВсеЗаявки.Заявки_ВидОперации,
		|	ВсеЗаявки.Заявки_Поставщик,
		|	ВсеЗаявки.Заявки_Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеЗаявки.Вкл,
		|
		|	ВсеЗаявки.Заявки_ЭтоАукцион,
		|	ВсеЗаявки.Заявки_ЭтоVMI,
		|	ВсеЗаявки.Заявки_этоСток,
		|	ВсеЗаявки.Заявки_этоКросс,
		|	ВсеЗаявки.Заявки_ВидОперации,
		|	ПараметрыПоставщиков.Поставщик_Ссылка КАК Контрагент,
		|	ПараметрыПоставщиков.Поставщик_ДоговорОсновной,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаОсновнойСч,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMI,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMIСч,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКросСч,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСток,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСтокСч,
		
		|	ВЫБОР
		|		КОГДА ВсеЗаявки.Заявки_ЭтоVMI = ИСТИНА ТОГДА  ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMI
		//|			 ВЫБОР
		//|					КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMIСч = 0
		//|						ТОГДА ПараметрыПоставщиков.Поставщик_ДоговорОсновной
		//|					ИНАЧЕ ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMI
		//|			 КОНЕЦ
		|		КОГДА ВсеЗаявки.Заявки_этоСток = ИСТИНА ТОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСток
		//|			 ВЫБОР
		//|					КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСтокСч = 0
		//|						ТОГДА ПараметрыПоставщиков.Поставщик_ДоговорОсновной
		//|					ИНАЧЕ ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос
		//|			 КОНЕЦ
		|		КОГДА ВсеЗаявки.Заявки_этоКросс = ИСТИНА ТОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос
		//|			ВЫБОР
		//|				КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКросСч = 0
		//|					ТОГДА ПараметрыПоставщиков.Поставщик_ДоговорОсновной
		//|				ИНАЧЕ ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос
		//|			КОНЕЦ
		|		Иначе
		|            											ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|	КОНЕЦ КАК ДоговорКонтрагента,
		
		|	ПараметрыПоставщиков.Поставщик_ВалютаДокументаОсновная,
		
		|	ВЫБОР
		|		КОГДА ВсеЗаявки.Заявки_ЭтоVMI = ИСТИНА  ТОГДА ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMI.ВалютаВзаиморасчетов,ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		//|			    ВЫБОР
		//|					КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMIСч = 0
		//|						ТОГДА ПараметрыПоставщиков.Поставщик_ВалютаДокументаОсновная
		//|					ИНАЧЕ ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMI.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		//|				КОНЕЦ
		|		КОГДА ВсеЗаявки.Заявки_этоСток = ИСТИНА ТОГДА ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСток.ВалютаВзаиморасчетов,ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		//|			    ВЫБОР
		//|					КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСтокСч = 0
		//|						ТОГДА ПараметрыПоставщиков.Поставщик_ВалютаДокументаОсновная
		//|					ИНАЧЕ ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		//|				КОНЕЦ
		|		КОГДА ВсеЗаявки.Заявки_этоКросс = ИСТИНА ТОГДА ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос.ВалютаВзаиморасчетов,ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		//|			ВЫБОР
		//|				КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКросСч = 0
		//|					ТОГДА ПараметрыПоставщиков.Поставщик_ВалютаДокументаОсновная
		//|				ИНАЧЕ ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		//|			КОНЕЦ
		|		ИНАЧЕ 
		|            											ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|	КОНЕЦ КАК ВалютаДокумента,
		
		
		|	ПараметрыПоставщиков.Поставщик_ОрганизацияОсновная,
		
		|	ВЫБОР
		|		КОГДА ВсеЗаявки.Заявки_ЭтоVMI = ИСТИНА ТОГДА   ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMI.Организация,ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		//|			 ВЫБОР
		//|					КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMIСч = 0
		//|						ТОГДА ПараметрыПоставщиков.Поставщик_ОрганизацияОсновная
		//|					ИНАЧЕ ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMI.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		//|				КОНЕЦ
		|		КОГДА ВсеЗаявки.Заявки_этоСток = ИСТИНА ТОГДА  ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСток.Организация,ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		//|			 ВЫБОР
		//|					КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСтокСч = 0
		//|						ТОГДА ПараметрыПоставщиков.Поставщик_ОрганизацияОсновная
		//|					ИНАЧЕ ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		//|				КОНЕЦ
		|		КОГДА ВсеЗаявки.Заявки_этоКросс = ИСТИНА ТОГДА ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос.Организация,ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		//|		    ВЫБОР
		//|				КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКросСч = 0
		//|					ТОГДА ПараметрыПоставщиков.Поставщик_ОрганизацияОсновная
		//|				ИНАЧЕ ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		//|			КОНЕЦ
		|		ИНАЧЕ                                             ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	КОНЕЦ КАК Организация,
		
		
		|	ПараметрыПоставщиков.Поставщик_УчитыватьНДСОсновная,
		|	ВЫБОР
		|		КОГДА ВсеЗаявки.Заявки_ЭтоVMI = ИСТИНА ТОГДА  ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMI.Организация.УчитыватьНДС,Истина)
		//|			 ВЫБОР
		//|					КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMIСч = 0
		//|						ТОГДА ПараметрыПоставщиков.Поставщик_УчитыватьНДСОсновная
		//|					ИНАЧЕ ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMI.Организация.УчитыватьНДС, ИСТИНА)
		//|				КОНЕЦ
		|		КОГДА ВсеЗаявки.Заявки_этоСток = ИСТИНА ТОГДА  ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСток.Организация.УчитыватьНДС,Истина)
		//|			 ВЫБОР
		//|					КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСтокСч = 0
		//|						ТОГДА ПараметрыПоставщиков.Поставщик_УчитыватьНДСОсновная
		//|					ИНАЧЕ ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос.Организация.УчитыватьНДС, ИСТИНА)
		//|				КОНЕЦ
		|		КОГДА ВсеЗаявки.Заявки_этоКросс = ИСТИНА ТОГДА ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос.Организация.УчитыватьНДС,Истина)
		//|			ВЫБОР
		//|				КОГДА ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКросСч = 0
		//|					ТОГДА ПараметрыПоставщиков.Поставщик_УчитыватьНДСОсновная
		//|				ИНАЧЕ ЕСТЬNULL(ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос.Организация.УчитыватьНДС, ИСТИНА)
		//|			КОНЕЦ
		|		ИНАЧЕ                                            ИСТИНА
		|	КОНЕЦ КАК УчитыватьНДС,
		
		
		|	ПараметрыПоставщиков.Поставщик_ОсновнаяТТ КАК ТорговаяТочка,
		|	ПараметрыПоставщиков.Поставщик_Выгружать_Заказ_вДрБазу,
		|	&ТекПользователь КАК Ответственный,
		|	&РежимФормирования КАК КомментарийШапка,
		|	ВсеЗаявки.Заявки_Склад КАК Склад,
		|	1 КАК КратностьВзаиморасчетов,
		|	1 КАК КурсВзаиморасчетов,
		|	ПараметрыПоставщиков.Поставщик_КонтактноеЛицоПоставщика КАК КонтактноеЛицоКонтрагента,
		|	ПараметрыПоставщиков.Поставщик_ЭлектронныйАдресОтправкиЗаказовПоставщику КАК ЭлектронныйАдрес,
		|	&СтатусДокумента КАК СтатусДокумента,
		|	ПараметрыПоставщиков.Поставщик_ТипЦенОсновной КАК ТипЦен,
		|	ИСТИНА КАК СуммаВключаетНДС,
		|	ПараметрыПоставщиков.Поставщик_МенеджерСнабжения КАК Менеджер,
		|	ЕСТЬNULL(ВсеЗаявки.Заявки_Склад.Филиал, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал,
		|	ВсеЗаявки.Заявки_Аукцион КАК Аукцион,
		|	ЕСТЬNULL(ПараметрыЗаданий.Задание_МинСуммаАвтоЗаказа, 1) КАК Задание_МинСуммаАвтоЗаказа,
		|	ЕСТЬNULL(ПараметрыЗаданий.Задание_СообщатьНетПотребности, ЛОЖЬ) КАК Задание_СообщатьНетПотребности,
		|	ЕСТЬNULL(ПараметрыЗаданий.Задание_ПополнениеСкладаОтдельно, ЛОЖЬ) КАК Задание_ПополнениеСкладаОтдельно,
		|	ЕСТЬNULL(ПараметрыЗаданий.Задание_ДелитьПоФирмамИзЗаявок, ЛОЖЬ) КАК Задание_ДелитьПоФирмамИзЗаявок,
		|	ЕСТЬNULL(ПараметрыЗаданий.Задание_ДелитьПоКоличествуСтрок, ЛОЖЬ) КАК Задание_ДелитьПоКоличествуСтрок,
		|	ЕСТЬNULL(ПараметрыЗаданий.Задание_АдресЭлПочтыТорговойТочки, """") КАК Задание_АдресЭлПочтыТорговойТочки,
		|	ЕСТЬNULL(ПараметрыЗаданий.Задание_АдресЭлПочтыОтправителя, """") КАК Задание_АдресЭлПочтыОтправителя,
		|	ЕСТЬNULL(ПараметрыЗаданий.Задание_ТекстПисьма, """") КАК Задание_ТекстПисьма,
		|	ВсеЗаявки.Заявки_СтрокаЗаявки КАК СтрокаЗаявки,
		|	ВсеЗаявки.Заявки_Номенклатура КАК Номенклатура,
		|	ВсеЗаявки.Заявки_Количество КАК Количество,
		|	ВсеЗаявки.Заявки_ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВсеЗаявки.Заявки_Коэффициент КАК Коэффициент,
		|	ВсеЗаявки.Заявки_ЦенаЗакупки,
		|	ВсеЗаявки.Заявки_ЦенаПоставщика,
		|	ВсеЗаявки.Заявки_Цена КАК Цена,
		|	ВсеЗаявки.Заявки_Сумма КАК Сумма,
		|	ВсеЗаявки.Заявки_Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	0 КАК СуммаНДС,
		|	"""" КАК Комментарий,
		|	ВсеЗаявки.Заявки_СрокГарантированныйЗаказа КАК СрокГарантированныйЗаказа,
		|	ВсеЗаявки.Заявки_СрокОжидаемыйЗаказа КАК СрокОжидаемыйЗаказа,
		|	ВсеЗаявки.Заявки_ЗаявкаСсылка,
		|	ВсеЗаявки.Заявки_IDSite,
		|	ВсеЗаявки.Заявки_ПрайсПоставщика,
		|	ВсеЗаявки.Заявки_ТТ_Покупателя,
		|	ВсеЗаявки.Заявки_Покупатель,
		|	ВсеЗаявки.Заявки_ДоговорПокупателя,
		|	ВсеЗаявки.Заявки_ДоговорПокупателя_Организация,
		|	ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка) КАК ДокументОснование,
		|	0 КАК СуммаДокумента,
		|	&ДтТек КАК МоментВремениЗапроса,
		|	ВсеЗаявки.Заявки_Сч,
		|	0 КАК СозданВ77,
		|	0 КАК КлючСвязи,
		|	ДАТАВРЕМЯ(1,1,1,0,0,0) КАК ДатаПоставки,
		|	"""" КАК СпособДоставки,
		|	"""" КАК НомерПоступленияПоставщика
		|ИЗ
		|	ВсеЗаявки КАК ВсеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыПоставщиков КАК ПараметрыПоставщиков
		|		ПО ВсеЗаявки.Заявки_Поставщик = ПараметрыПоставщиков.Поставщик_Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыЗаданий КАК ПараметрыЗаданий
		|		ПО ВсеЗаявки.Заявки_Поставщик = ПараметрыЗаданий.Задание_Поставщик
		|
		|";
	
	Если ПравилаИгры.это_фон тогда
		Запрос_Текст_Подвал = "
		|ГДЕ
		|	НЕ ВсеЗаявки.Заявки_Поставщик В
		|				(ВЫБРАТЬ
		|					ИЗГОИ.Заявки_Поставщик
		|				ИЗ
		|					ИЗГОИ)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеТекущиеЗадания.Задание_Ссылка,
		|	ВсеТекущиеЗадания.Задание_ТТ_Поставщика,
		|	ВсеТекущиеЗадания.Задание_Поставщик,
		|	ВсеТекущиеЗадания.Задание_МинСуммаАвтоЗаказа,
		|	ВсеТекущиеЗадания.Задание_СообщатьНетПотребности,
		|	ВсеТекущиеЗадания.Задание_ПополнениеСкладаОтдельно,
		|	ВсеТекущиеЗадания.Задание_АдресЭлПочтыТорговойТочки,
		|	ВсеТекущиеЗадания.Задание_АдресЭлПочтыОтправителя,
		|	ВсеТекущиеЗадания.Задание_ТекстПисьма,
		|	ПараметрыПоставщиков.Поставщик_МенеджерСнабжения,
		|	ПараметрыПоставщиков.Поставщик_КонтактноеЛицоПоставщика,
		|	ПараметрыПоставщиков.Поставщик_ОрганизацияОсновная,
		|	ПараметрыПоставщиков.Поставщик_ВалютаДокументаОсновная,
		|	ПараметрыПоставщиков.Поставщик_ДоговорОсновной,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаОсновнойСч,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMI,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаWMIСч,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКрос,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаКросСч,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСток,
		|	ПараметрыПоставщиков.Поставщик_ДоговорКонтрагентаСтокСч
		|ИЗ
		|	ВсеТекущиеЗадания КАК ВсеТекущиеЗадания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыПоставщиков КАК ПараметрыПоставщиков
		|		ПО ВсеТекущиеЗадания.Задание_Поставщик = ПараметрыПоставщиков.Поставщик_Ссылка
		|       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Заявки_Поставщик, СУММА(Заявки_Количество) КАК Заявки_Количество ИЗ ВсеЗаявки СГРУППИРОВАТЬ ПО Заявки_Поставщик) КАК ПотребОст
		|		ПО ВсеТекущиеЗадания.Задание_Поставщик = ПотребОст.Заявки_Поставщик
		|ГДЕ
		|	ВсеТекущиеЗадания.Задание_СообщатьНетПотребности = ИСТИНА
		|	И (
		|      ВсеТекущиеЗадания.Задание_Поставщик В
		|			(ВЫБРАТЬ
		|				ИЗГОИ.Заявки_Поставщик
		|			ИЗ
		|				ИЗГОИ)
		|      ИЛИ
		|
		|          ЕСТЬNULL(ПотребОст.Заявки_Количество,0) = 0
		|      )
		|";
	Иначе
		Запрос_Текст_Подвал = "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеЗаявки.Заявки_ВидОперации КАК ВидОперации,
		|	ВсеЗаявки.Заявки_Склад КАК Склад,
		|	ВсеЗаявки.Заявки_ПрайсПоставщика КАК Прайс,
		|	ВсеЗаявки.Заявки_IDSite КАК IDSite,
		|	МАКСИМУМ(ВсеЗаявки.Заявки_Номенклатура.Артикул) КАК Артикул,
		|	МАКСИМУМ(ВсеЗаявки.Заявки_Номенклатура.Изготовитель) КАК Изготовитель,
		|	МАКСИМУМ(ВсеЗаявки.Заявки_Номенклатура) КАК Номенклатура,
		|	СУММА(ВсеЗаявки.Заявки_Сч) КАК Сч,
		|	СУММА(ВсеЗаявки.Заявки_Количество) КАК Количество,
		|	МАКСИМУМ(ВсеЗаявки.Заявки_ЕдиницаИзмерения) КАК ЕИ,
		|	СУММА(ВсеЗаявки.Заявки_Цена) КАК Цена,
		|	СУММА(ВсеЗаявки.Заявки_Сумма) КАК СуммаПлан,
		|	СУММА(ВсеЗаявки.Заявки_Сумма) КАК Сумма,
		
		|	МАКСИМУМ(ВсеЗаявки.Вкл) КАК Вкл,
		
		|	МАКСИМУМ(ВсеЗаявки.Заявки_ЗаявкаСсылка.Номер) КАК Заявка,
		|	МАКСИМУМ(ВсеЗаявки.Заявки_Покупатель) КАК Покупатель,
		|	МАКСИМУМ(ПараметрыПоставщиков.Поставщик_ОрганизацияОсновная) КАК Организация,
		|	МАКСИМУМ(ПараметрыПоставщиков.Поставщик_ДоговорОсновной) КАК ДоговорОсновной,
		|	МАКСИМУМ(ПараметрыПоставщиков.Поставщик_МенеджерСнабжения) КАК Менеджер
		|ИЗ
		|	ВсеЗаявки КАК ВсеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыПоставщиков КАК ПараметрыПоставщиков
		|		ПО ВсеЗаявки.Заявки_Поставщик = ПараметрыПоставщиков.Поставщик_Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеЗаявки.Заявки_ВидОперации,
		|	ВсеЗаявки.Заявки_Склад,
		|	ВсеЗаявки.Заявки_ПрайсПоставщика,
		|	ВсеЗаявки.Заявки_IDSite
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сумма УБЫВ
		|ИТОГИ
		|	СУММА(Сч),
		|	СУММА(Количество),
		|	СУММА(СуммаПлан),
		|	СУММА(Сумма),
		|	МАКСИМУМ(Вкл)
		
		|ПО
		|	ВидОперации,
		|	Склад,
		|	Прайс
		|";
	КонецЕсли;
	
	Запрос_Текст = Запрос_Текст_Шапка + Символы.ПС + Запрос_Текст_Ядро + Символы.ПС + Запрос_Текст_Подвал;
	
	Если ПравилаИгры.это_фон тогда
		ДобавитьВЛог(Запрос_Текст);
		ОпубликоватьЛог();
	Иначе	
		Если СтрНайти(ПараметрыСеанса.ТекущийПользователь.Наименование,"Пушкин") > 0 тогда
			Сообщить(Запрос_Текст);
		КонецЕсли;
	КонецЕсли;
	
	//#Если Клиент Тогда
	//	Если СтрНайти(ПараметрыСеанса.ТекущийПользователь.Наименование,"Пушкин") > 0 тогда
	//		Сообщить(Запрос_Текст);
	//	КонецЕсли;
	//#Иначе
	//#КонецЕсли	
	
	Запрос = Новый Запрос;	
	Запрос.Текст = Запрос_Текст;
	
	Если ЗначениеЗаполнено(Вход_Аукцион) тогда
		Запрос.УстановитьПараметр("РежимФормирования", "Аукцион");
	Иначе
		Если ПравилаИгры.это_фон тогда
			Запрос.УстановитьПараметр("РежимФормирования", "АвтоЗаказ");
		Иначе
			Запрос.УстановитьПараметр("РежимФормирования", "Интерактив");
		КонецЕсли;
	Конецесли;
	
	Если ЗначениеЗаполнено(Вход_Аукцион) тогда
		Запрос.УстановитьПараметр("Вход_Аукцион", Вход_Аукцион);
	Иначе
		Если ЗначениеЗаполнено(Вход_КА) тогда
			Запрос.УстановитьПараметр("Контра", Вход_КА);
		КонецЕсли;
		Если ЗначениеЗаполнено(Вход_Заявка) тогда
			Запрос.УстановитьПараметр("Вход_Заявка", Вход_Заявка);
		КонецЕсли;
		Если ЗначениеЗаполнено(Вход_Прайс) тогда
			Запрос.УстановитьПараметр("Вход_Прайс", Вход_Прайс);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтатусДокумента", Справочники.СтатусыДокументов.ПроведенЗаказПоставщику);
	Запрос.УстановитьПараметр("ТипЦенПоставщика", Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДтТек", ПравилаИгры.РасчетнаяДата);
	Запрос.УстановитьПараметр("ТекПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("WMI", Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение);
	Запрос.УстановитьПараметр("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	Запрос.УстановитьПараметр("ЦС", Константы.СкладОсновной.Получить());
	Запрос.УстановитьПараметр("СкладПитер1", Справочники.Склады.НайтиПоКоду("000000049"));
	Запрос.УстановитьПараметр("СкладПитер2", Справочники.Склады.НайтиПоКоду("000000141"));
	
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции
Функция СформироватьДокументы(пар_НеАктивироватьДоговоры = Ложь) экспорт // общая для всех режимов процедура заполнения заказов по ранее рассчитанной потребности. фишка: разбивка потребности по документам
	
	//РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ФормированиеДокумента,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(), "старт" ));			
	Отказ = Ложь;
	ПравилаИгры.Вставить("Отказ",Отказ);
	
	Если ПравилаИгры.ТабличноеПоле2.Колонки.Количество() = 0 тогда
		Возврат ПравилаИгры;
	КонецЕсли;
	
	Если ПравилаИгры.КоличествоНажатийКнопкиРассчитатьПользователем = 0 И НЕ ПравилаИгры.это_фон И НЕ ЗначениеЗаполнено(Вход_Аукцион) тогда
		Возврат ПравилаИгры;
	КонецЕсли;
	
	ПустойСписокЗначений = Новый СписокЗначений;
	
	ПотребностьПоАктуальнымЗаданиямДляФормированияЗаказов = ПравилаИгры.ТабличноеПоле2.Скопировать(Новый Структура("Вкл",Истина));
	
	Если ПотребностьПоАктуальнымЗаданиямДляФормированияЗаказов.Количество() = 0 тогда
		
		РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Отказ,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(), "данные по потребности не заполнены" ));		
		
		ДобавитьВЛог("inf: данные по потребности не заполнены");
		ОпубликоватьЛог();
		Отказ = Истина;
		ПравилаИгры.Вставить("Отказ",Отказ);
		
		Если пар_НеАктивироватьДоговоры тогда
		Иначе
			ДеАктивироватьДоговоры();
		КонецЕсли;
		
		ДопМероприятия();
		
		Возврат ПравилаИгры;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Цена",0);
	СтрокиБезЦен = ПотребностьПоАктуальнымЗаданиямДляФормированияЗаказов.НайтиСтроки(Отбор);
	Если СтрокиБезЦен.Количество() > 0 Тогда
		
		ругань = "err: в данных по потребности не заполнены Цены ";                                                                                                                                      
		Для Каждого ЭлементМассива из СтрокиБезЦен Цикл
			стрРугань = "ВидОперации: " + СокрЛП( ЭлементМассива.Заявки_ВидОперации) + ";Склад: " + СокрЛП( ЭлементМассива.Склад) + ";Прайс: " + СокрЛП( ЭлементМассива.Заявки_ПрайсПоставщика) + ";IDSite: " + СокрЛП(ЭлементМассива.Заявки_IDSite) + "; ";
			ругань = ругань + Символы.ПС + стрРугань;
			РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Ошибка,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(), стрРугань ));
		КонецЦикла;
		ДобавитьВЛог(ругань);
		ОпубликоватьЛог();
		Отказ = Истина;
		ПравилаИгры.Вставить("Отказ",Отказ);
		
		Если пар_НеАктивироватьДоговоры тогда
		Иначе
			ДеАктивироватьДоговоры();
		КонецЕсли;
		
		ДопМероприятия();
		
		Возврат ПравилаИгры;
	КонецЕсли;
	
	МассивЗП = Новый ТаблицаЗначений;
	МассивЗП.Колонки.Добавить("Контрагент");
	МассивЗП.Колонки.Добавить("ЗаказПоставщику");
	
	//сформируем критерии группировки результатов запроса для последующего формирования заказов
	//------------------------------------------------------------------------------------------
	Шапка = СформироватьСтруктуруШапкиДокумента();
	
	СтрокаГруппировкиСтрок  = "ДоговорКонтрагента;Склад;Заявки_ЭтоАукцион;Аукцион;Заявки_ЭтоVMI";
	
	//|	ВсеЗаявки.Заявки_ЭтоАукцион,
	//|	ВсеЗаявки.Заявки_ЭтоVMI,
	//|	ВсеЗаявки.Заявки_этоСток,
	//|	ВсеЗаявки.Заявки_этоКросс,
	//|	ВсеЗаявки.Заявки_ВидОперации,
	//|	Задание_ПополнениеСкладаОтдельно
	//|	ПараметрыПоставщиков.Поставщик_Выгружать_Заказ_вДрБазу,  - делить если товар встречается в ТЧ более одного раза (под разные Заявки) (для Питерских Поставщиков)
	//|	Задание_ДелитьПоФирмамИзЗаявок  - Для Маханова
	//|	Задание_ДелитьПоКоличествуСтрок	- по умолчанию по 300	
	
	МассивИндентификаторовОтбораСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаГруппировкиСтрок,";");
	МаксимальныйИндексПараметровГруппировки = МассивИндентификаторовОтбораСтрок.Количество()-1;
	
	СтрокаСуммирования = "Количество,Сумма";
	
	//формирование заказов: обработка потребности + фиксация факта выполнения задания 
	//--------------------------------------------------------------------------------
	ТЗ_Группы = СвернутьТаблицуЗначений(ПотребностьПоАктуальнымЗаданиямДляФормированияЗаказов.Скопировать(), СтрокаГруппировкиСтрок, СтрокаСуммирования);
	ОшибкиОбработки = "";
	ОшибкиОбработки2 = "";
	
	Попытка
		
		Если ЗначениеЗаполнено(Вход_Аукцион) тогда
			НачатьТранзакцию();
			ДобавитьВЛог("inf: родительская транзакция стартовала");
		КонецЕсли;
			
		Для каждого СтрГр из ТЗ_Группы цикл
			
			Отбор = Новый Структура();
			Для ii = 0 по МаксимальныйИндексПараметровГруппировки Цикл
				имя_параметра_группировки = МассивИндентификаторовОтбораСтрок[ii];
				Отбор.Вставить(имя_параметра_группировки,СтрГр[имя_параметра_группировки]);
			КонецЦикла;
			
			Строки = ПотребностьПоАктуальнымЗаданиямДляФормированияЗаказов.Скопировать(Отбор);
			Если Строки.Количество() < 1 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаГруппировкиСтрокВнутриОсновнойРазбивки = "Менеджер;";
			
			Строки_Задание_ПополнениеСкладаОтдельно_Истина = Строки.НайтиСтроки(Новый Структура("Задание_ПополнениеСкладаОтдельно",Истина));
			Строки_Задание_ПополнениеСкладаОтдельно_Истина_сч = Строки_Задание_ПополнениеСкладаОтдельно_Истина.Количество();
			Если Строки_Задание_ПополнениеСкладаОтдельно_Истина_сч > 0 тогда
				СтрокаГруппировкиСтрокВнутриОсновнойРазбивки = СтрокаГруппировкиСтрокВнутриОсновнойРазбивки + "Заявки_ВидОперации;";
			КонецЕсли;
			
			Строки_Задание_ДелитьПоФирмамИзЗаявок_Истина = Строки.НайтиСтроки(Новый Структура("Задание_ДелитьПоФирмамИзЗаявок",Истина));
			Строки_Задание_ДелитьПоФирмамИзЗаявок_Истина_сч = Строки_Задание_ДелитьПоФирмамИзЗаявок_Истина.Количество();
			Если Строки_Задание_ДелитьПоФирмамИзЗаявок_Истина_сч > 0 тогда
				СтрокаГруппировкиСтрокВнутриОсновнойРазбивки = СтрокаГруппировкиСтрокВнутриОсновнойРазбивки + "Заявки_ДоговорПокупателя_Организация;";
			КонецЕсли;
			
			Строки_Поставщик_Выгружать_Заказ_вДрБазу_Истина = Строки.НайтиСтроки(Новый Структура("Поставщик_Выгружать_Заказ_вДрБазу",Истина));
			Строки_Поставщик_Выгружать_Заказ_вДрБазу_Истина_сч = Строки_Поставщик_Выгружать_Заказ_вДрБазу_Истина.Количество();
			Если Строки_Поставщик_Выгружать_Заказ_вДрБазу_Истина_сч > 0 тогда
				СтрокаГруппировкиСтрокВнутриОсновнойРазбивки = СтрокаГруппировкиСтрокВнутриОсновнойРазбивки + "ДопРасчет_IDSite_Сч;";
			КонецЕсли;
			
			Строки_Задание_ДелитьПоКоличествуСтрок_Истина = Строки.НайтиСтроки(Новый Структура("Задание_ДелитьПоКоличествуСтрок",Истина));
			Строки_Задание_ДелитьПоКоличествуСтрок_Истина_сч = Строки_Задание_ДелитьПоКоличествуСтрок_Истина.Количество();
			Если Строки_Задание_ДелитьПоКоличествуСтрок_Истина_сч > 0 тогда
				СтрокаГруппировкиСтрокВнутриОсновнойРазбивки = СтрокаГруппировкиСтрокВнутриОсновнойРазбивки + "ДопРасчет_Сотня;";
			КонецЕсли;
			
			Если Строки_Задание_ДелитьПоКоличествуСтрок_Истина_сч > 0 ИЛИ Строки_Поставщик_Выгружать_Заказ_вДрБазу_Истина_сч > 0 тогда
				
				Строки.Колонки.Добавить("ДопРасчет_Сотня",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6,0))); 
				Строки.Колонки.Добавить("ДопРасчет_IDSite_Сч",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6,0))); 
				
				ДопРасчет_IDSite_Сч = Новый Соответствие;
				
				счстрстр = 0;
				Для каждого стрстр из Строки цикл
					
					счстрстр = счстрстр + 1;
					стрстр.ДопРасчет_Сотня = Цел(счстрстр/100);
					
					Если Строки_Поставщик_Выгружать_Заказ_вДрБазу_Истина_сч > 0 > 0 тогда
						
						параметр_который_не_должен_повторяться_в_тч = стрстр.Номенклатура;
						
						Заявки_IDSite_сч = ДопРасчет_IDSite_Сч.Получить(параметр_который_не_должен_повторяться_в_тч);
						Если Заявки_IDSite_сч = Неопределено Тогда	
							Заявки_IDSite_сч = 1;
						Иначе
							Заявки_IDSite_сч = Заявки_IDSite_сч + 1;
						КонецЕсли;
						
						ДопРасчет_IDSite_Сч.Вставить(параметр_который_не_должен_повторяться_в_тч,Заявки_IDSite_сч);
						стрстр.ДопРасчет_IDSite_Сч = Заявки_IDSite_сч;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// свернем по доп.параметрам
			СтрокаГруппировкиСтрокВнутриОсновнойРазбивки = Лев(СтрокаГруппировкиСтрокВнутриОсновнойРазбивки,СтрДлина(СтрокаГруппировкиСтрокВнутриОсновнойРазбивки)-1);
			
			МассивИндентификаторовОтбораСтрок_Доп = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаГруппировкиСтрокВнутриОсновнойРазбивки,";");
			МаксимальныйИндексПараметровГруппировки_Доп = МассивИндентификаторовОтбораСтрок_Доп.Количество()-1;
			
			ТЗ_Группы_Доп = СвернутьТаблицуЗначений(Строки.Скопировать(), СтрокаГруппировкиСтрокВнутриОсновнойРазбивки, СтрокаСуммирования); 
			Для каждого СтрГр_Доп из ТЗ_Группы_Доп цикл
				
				// здесь получим окончательную тз-основание для документа
				Отбор_Доп = Новый Структура();
				Для ii_Доп = 0 по МаксимальныйИндексПараметровГруппировки_Доп Цикл
					имя_параметра_группировки_Доп = МассивИндентификаторовОтбораСтрок_Доп[ii_Доп];
					Отбор_Доп.Вставить(имя_параметра_группировки_Доп,СтрГр_Доп[имя_параметра_группировки_Доп]);
				КонецЦикла;
				Строки_Доп = Строки.Скопировать(Отбор_Доп);
				Если Строки_Доп.Количество() > 0 Тогда
					
					// проверка
					ДанныеДляЗаполненияШапки = Строки_Доп.Получить(0);
					Ругаться = Ложь;
					ТакиСделатьЗаказ = Истина;
					
					Если ЗначениеЗаполнено(ДанныеДляЗаполненияШапки.ДоговорКонтрагента) тогда

						//Если ДанныеДляЗаполненияШапки.Заявки_ВидОперации = "Кросс" И ДанныеДляЗаполненияШапки.Поставщик_ДоговорКонтрагентаКросСч = 0 тогда 
						//	Если ЗначениеЗаполнено(ДанныеДляЗаполненияШапки.ДоговорКонтрагента) тогда
						//		//Ругаться = Истина;
						//	Иначе	
						//		ТакиСделатьЗаказ = Ложь;	
						//	КонецЕсли;
						//ИначеЕсли ДанныеДляЗаполненияШапки.Заявки_ВидОперации = "Сток" И ДанныеДляЗаполненияШапки.Поставщик_ДоговорКонтрагентаСтокСч = 0 тогда
						//	Если ЗначениеЗаполнено(ДанныеДляЗаполненияШапки.ДоговорКонтрагента) тогда
						//		//Ругаться = Истина;
						//	Иначе	
						//		ТакиСделатьЗаказ = Ложь;	
						//	КонецЕсли;
						//ИначеЕсли ДанныеДляЗаполненияШапки.Заявки_ВидОперации = "VMI" И ДанныеДляЗаполненияШапки.Поставщик_ДоговорКонтрагентаWMIСч = 0 тогда
						//	Ругаться = Истина;
						//	ТакиСделатьЗаказ = Ложь;	
						//КонецЕсли;
						
					Иначе
						Ругаться = Истина;
						ТакиСделатьЗаказ = Ложь;
					КонецЕсли;
					
					Если Ругаться тогда
						ОшибкиОбработки = ОшибкиОбработки + "
						|	у КА [" + Строка(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеДляЗаполненияШапки.Контрагент,"Код")) + "][" +  Строка(ДанныеДляЗаполненияШапки.Контрагент) + "] отсутствует договор, соответствующий Виду операции [Поставка][" + ДанныеДляЗаполненияШапки.Заявки_ВидОперации + "]
						|	Разрешить сформировать заказ поставщику = [" + СокрЛП(ТакиСделатьЗаказ)+ "]";
					КонецЕсли;
					Если НЕ ТакиСделатьЗаказ Тогда
						Продолжить;
					КонецЕсли;
					
					// приступим к созданию заказа

					ПопыткаФормированияЗаказа = СформироватьЗаказПоставщику(ЗаполнитьСтруктуруШапкиДокумента(Шапка, ДанныеДляЗаполненияШапки), Строки_Доп);
					
					Если ПопыткаФормированияЗаказа.Отказ тогда
						ОшибкиОбработки = ОшибкиОбработки + "
						|	заказ поставщику " + Строка(ДанныеДляЗаполненияШапки.Контрагент) + " не сформирован из-за ошибок записи/проведения документа.";
						
						//ЗаписатьВЛогТЗ(Строки_Доп, "Строки_Доп");
						
						РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.Ошибка,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(), "Поставщик: " + СокрЛП(ДанныеДляЗаполненияШапки.Контрагент) + " [" + СокрлП(ДанныеДляЗаполненияШапки.Заявки_ВидОперации) + " ]" ));
						
					Иначе
						стрзп = МассивЗП.Добавить();
						стрзп.Контрагент = ДанныеДляЗаполненияШапки.Контрагент;
						стрзп.ЗаказПоставщику = ПопыткаФормированияЗаказа.Заказ;
						
						//ОшибкиОбработки2 = ОшибкиОбработки2 + "
						//|	успешно сформирован " + Строка(ПопыткаФормированияЗаказа.Заказ) + " ";
						лСвЗ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПопыткаФормированияЗаказа.Заказ,"Контрагент,Склад");
						
						РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ФормированиеДокумента,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),ПопыткаФормированияЗаказа.Заказ, СокрЛП(МассивЗП.Количество()) + ". [" + СокрлП(лСвЗ.Контрагент) + "] [ " + СокрлП(лСвЗ.Склад) + " ] [" + СокрлП(ДанныеДляЗаполненияШапки.Заявки_ВидОперации) + " ]" ));
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Вход_Аукцион) тогда
			
			о_Вход_Аукцион = Вход_Аукцион.ПолучитьОбъект();
			о_Вход_Аукцион.ЗаказыСозданы = Истина;
			о_Вход_Аукцион.Записать();
			
			ЗафиксироватьТранзакцию();
			
			ДобавитьВЛог("inf: родительская транзакция завершена");
			ОпубликоватьЛог();
			
		КонецЕсли;
		
	Исключение	
		
		Если ЗначениеЗаполнено(Вход_Аукцион) тогда
			
			ДобавитьВЛог("err: родительская транзакция отменена");
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		Отказ = Истина;
		ПравилаИгры.Вставить("Отказ",Отказ);
		
		лОписаниеОшибки = ОписаниеОшибки();
		
		ДобавитьВЛог("err: исключительная ситуация при формировании документа  " + лОписаниеОшибки );
		ОпубликоватьЛог();
		
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ОшибкиОбработки) Тогда
		ДобавитьВЛог("err: ошибки формирования заказов");
		ДобавитьВЛог(ОшибкиОбработки);
		ОпубликоватьЛог();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОшибкиОбработки2) Тогда
		ДобавитьВЛог("inf: ");
		ДобавитьВЛог(ОшибкиОбработки2);
		ОпубликоватьЛог();
	КонецЕсли;
	
	// запомним список созданных заказов
	Если МассивЗП.Количество() > 0 тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ЗаказПоставщику.Ссылка,
		|	ЗаказПоставщику.Организация,
		|	ЗаказПоставщику.Контрагент КАК Поставщик,
		|	ЗаказПоставщику.ДоговорКонтрагента КАК Договор,
		|	ЗаказПоставщику.Склад,
		|	ЗаказПоставщику.Филиал,
		|	ЗаказПоставщику.Аукцион,
		|	ЗаказПоставщику.Ответственный,
		|	ЗаказПоставщику.СуммаДокумента,
		|	ЗаказПоставщику.ВалютаДокумента КАК Валюта,
		|	ЗаказПоставщику.СтатусДокумента КАК Статус,
		|	ЗаказПоставщику.Проведен,
		|	ЗаказПоставщику.Менеджер
		|	
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка В (&СпсЗП)
		|";
		
		Запрос.УстановитьПараметр("СпсЗП", МассивЗП.ВыгрузитьКолонку("ЗаказПоставщику"));
		РезультатЗП = Запрос.Выполнить().Выгрузить();
		ПравилаИгры.Вставить("ТабличноеПоле4", РезультатЗП);
		
		Если ПравилаИгры.Это_Фон ИЛИ ЗначениеЗаполнено(Вход_Аукцион) тогда
			ЗаписатьВЛогТЗ(РезультатЗП, "СписокЗаказов");
			ОпубликоватьЛог();
		КонецЕсли;
	КонецЕсли;
	
	//очистим данные по потребности, на основании которой формировались док-ты
	ПравилаИгры.Вставить("ТабличноеПоле1",Новый ТаблицаЗначений);
	ПравилаИгры.Вставить("ТабличноеПоле2",Новый ТаблицаЗначений);
	
	//отпустим договора
	Если пар_НеАктивироватьДоговоры тогда
	Иначе
		ДеАктивироватьДоговоры();
	КонецЕсли;
	
	ДопМероприятия();
	
	ОпубликоватьЛог();
	//РегистрацияЭтапаВыполненияРегламентногоЗадания(ВернутьСтруктуруДляРегистрации(Перечисления.ЭтапыВыполненияРеглЗаданияАвтоФормированияДок.ФормированиеДокумента,Справочники.ПараметрыФормированияЗаказовПоставщикам.ПустаяСсылка(),Документы.ЗаказПоставщику.ПустаяСсылка(), "окончание" ));				
	
	Возврат ПравилаИгры;
КонецФункции
Функция СформироватьЗаказПоставщику(Шапка,Строки) Экспорт // заполняет док-т на основании переданного сегмента тч по потребности
	Результат = Новый Структура("Отказ, Заказ", Истина, Документы.ЗаказПоставщику.ПустаяСсылка());
	
	МассивНайденныхСтрок = Строки.НайтиСтроки(Новый Структура("Количество",0));
	Если МассивНайденныхСтрок.Количество() > 0 тогда
		ДобавитьВЛог("inf: в ТЧ Количество = 0");
		ОпубликоватьЛог();
		Возврат Результат;
	КонецЕсли;
	Если      НЕ ЗначениеЗаполнено(Шапка.Контрагент) тогда
		ДобавитьВЛог("inf: пустой КА");
		ОпубликоватьЛог();
		Возврат Результат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.ДоговорКонтрагента) тогда
		ДобавитьВЛог("inf: пустой Договор");
		ОпубликоватьЛог();
		Возврат Результат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.Организация) тогда
		ДобавитьВЛог("inf: пустая Организация");
		ОпубликоватьЛог();
		Возврат Результат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.Склад) тогда
		ДобавитьВЛог("inf: пустой Склад");
		ОпубликоватьЛог();
		Возврат Результат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.ТорговаяТочка) Тогда //ИЛИ
		ДобавитьВЛог("inf: пустая ТТ");
		ОпубликоватьЛог();
		Возврат Результат;
	КонецЕсли;
	
	Лог_ОписаниеОбъекта = "";
	СчПопытокЗаписатьЗаказ = 0;
	Записано = Ложь;
	
	Пока Не Записано Цикл
		
		СчПопытокЗаписатьЗаказ = СчПопытокЗаписатьЗаказ + 1;
		Если СчПопытокЗаписатьЗаказ > ПравилаИгры.МаксимальноеКоличествоПопытокЗаписатьЗаявку тогда
			Прервать;
		КонецЕсли;
		
		Попытка
			
			Если НЕ ЗначениеЗаполнено(Вход_Аукцион) тогда
				НачатьТранзакцию();
				ДобавитьВЛог("inf: транзакция стартовала");
			КонецЕсли;
			
			ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокументОбъект,Шапка);
			ДокументОбъект.Комментарий = "АвтоЗаказ [" + ?(ЗначениеЗаполнено(Вход_Аукцион)," аукцион ",?(ПравилаИгры.Это_фон , " регламент " , " интерактив ")) + "]";
			ДокументОбъект.Дата = Строки[0].МоментВремениЗапроса;
			
			// костыль на случай если в запросе не верно определена организация
			л_ОрганизацияВДоговореКА = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.ДоговорКонтрагента,"Организация");
			
			Если НЕ л_ОрганизацияВДоговореКА = ДокументОбъект.Организация тогда
				ДокументОбъект.Организация = л_ОрганизацияВДоговореКА;
				ДокументОбъект.УчитыватьНДС = ОбщегоНазначения.ПолучитьЗначениеРеквизита(л_ОрганизацияВДоговореКА,"УчитыватьНДС");
				ДокументОбъект.СуммаВключаетНДС = ДокументОбъект.УчитыватьНДС;
			КонецЕсли;
			
			// костыль для питерского служебного поставщика 248, чтобы не было лишних мфп
			Если Строки[0].Задание_ДелитьПоФирмамИзЗаявок тогда
				
				лОргЗаявки = Строки[0].Заявки_ДоговорПокупателя_Организация;
				
				Если НЕ л_ОрганизацияВДоговореКА = лОргЗаявки тогда
					
					лВидДог = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.ДоговорКонтрагента,"ВидДоговора");
					лВидОпVMI = Строки[0].Заявки_ЭтоVMI;	
					лВидОпСток = Строки[0].Заявки_этоСток;	
					лВидОпКросс = Строки[0].Заявки_этоКросс;	
					
					лДогПоОрг = ЗапросПоДоговорамСоответствующимОрганизацииИзЗаявок(ДокументОбъект.Контрагент,лВидДог,лВидОпVMI,лВидОпСток,лВидОпКросс,лОргЗаявки);
					
					Если НЕ ЗначениеЗаполнено(лДогПоОрг) тогда
						
						лДогПрототип = ДокументОбъект.ДоговорКонтрагента;
						
					    Копия = лДогПрототип.Скопировать();
						Копия.Организация = лОргЗаявки;
						Копия.ДоговорНаСток = лВидОпСток;
						Копия.ДоговорНаКросс = лВидОпКросс;
						Копия.Комментарий = "Автосоздан обработкой формирования Заказов. Прототип [" + СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(лДогПрототип,"Код")) + "]";
						Копия.УстановитьНовыйКод();
    					Копия.Записать();
						лДогПоОрг = Копия.Ссылка;
						
						ДокументОбъект.ДоговорКонтрагента = лДогПоОрг;
						
					КонецЕсли;
					
					ДокументОбъект.ДоговорКонтрагента = лДогПоОрг;
					
					лДогПоОргПараметры = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(лДогПоОрг,"Организация,ВидОплаты,ВалютаВзаиморасчетов,ТипЦен");
					ДокументОбъект.Организация = лДогПоОргПараметры.Организация;
					ДокументОбъект.ВалютаДокумента = лДогПоОргПараметры.ВалютаВзаиморасчетов;
					ДокументОбъект.ТипЦен = лДогПоОргПараметры.ТипЦен;
					ДокументОбъект.УчитыватьНДС = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.Организация,"УчитыватьНДС");
					ДокументОбъект.СуммаВключаетНДС = ДокументОбъект.УчитыватьНДС;
					
				КонецЕсли;
			КонецЕсли;
			
			//ДокументОбъект.УстановитьНовыйНомер(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, "Префикс"));
			// не забываем про подписку на событие установка нового номера - туда уже должен префикс возвращаться
				
			КлючСвязи = 0;
			Для каждого СтрокаТабличнойЧасти из Строки цикл
				КлючСвязи = КлючСвязи + 1;
				СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
				СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС( СтрокаТабличнойЧасти.Сумма,
																			ДокументОбъект.УчитыватьНДС,
																			ДокументОбъект.СуммаВключаетНДС,
																			УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС) );
			КонецЦикла;
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Строки, ДокументОбъект.Товары);		
			ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");                        
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
			Результат = Новый Структура("Отказ, Заказ", Ложь, ДокументОбъект.Ссылка);
			
			Если ВыполнитьEMAILРассылку тогда // реквизит отвечает за то, чтобы 'пробросить'  док-т до поставщика. либо через ftp либо через окно поставщику либо на email
				ДобавитьВЛог(СокрлП(Шапка.Контрагент) + " - попытка отправить заказ");
			    ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ОтправленПоставщику;
			    ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Записано = Истина;
			
			Если НЕ ЗначениеЗаполнено(Вход_Аукцион) тогда
				ЗафиксироватьТранзакцию();
				ДобавитьВЛог("inf: транзакция зафиксирована");
				ОпубликоватьЛог();
			КонецЕсли;
			
		Исключение
			
			л_ОписаниеОшибки = ОписаниеОшибки();
			
			Если ЗначениеЗаполнено(Вход_Аукцион) тогда
				ВызватьИсключение л_ОписаниеОшибки;				
			Иначе
				ОтменитьТранзакцию();
				ДобавитьВЛог("inf: транзакция отменена  " + л_ОписаниеОшибки );
				ОпубликоватьЛог();
			КонецЕсли;
			
			Возврат Результат;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
Функция ДопМероприятия() // помимо формирования заказов, нужно запомнить дату/время обработки заданий и сделать рассылку поставщикам
	
	Отказ = Ложь;
	
	Если ПравилаИгры.это_фон тогда
		Если НЕ ЗначениеЗаполнено(Вход_Аукцион) тогда
			Если НЕ ПравилаИгры.Отказ тогда
			
				//запишем время последнего успешного выполнения заданий
				Задания = ПравилаИгры.ТабличноеПоле5;
				Если Задания.Количество() > 0 тогда
					
					Попытка
						НаборЗаписи  = РегистрыСведений.ДатыФормированияЗаказовПоставщикам.СоздатьНаборЗаписей();
						
						Для каждого СтрокаТабличнойЧасти из Задания цикл
							Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Задание_Ссылка) тогда
								
								НаборЗаписи.Отбор.ПараметрФормированияЗаказовПоставщикам.Установить(СтрокаТабличнойЧасти.Задание_Ссылка);
								НаборЗаписи.Очистить();
								Наб = НаборЗаписи.Добавить();
								Наб.ПараметрФормированияЗаказовПоставщикам = СтрокаТабличнойЧасти.Задание_Ссылка;
								Наб.ДатаФормирования = СтрокаТабличнойЧасти.МоментВремениЗапроса;
								НаборЗаписи.Записать();
								НаборЗаписи.Очистить();
								
							КонецЕсли;
						КонецЦикла;
						ДобавитьВЛог("inf : обновлены данные о последнем старте по параметру автоформирования заказов");
						
					Исключение
						лОписаниеОшибки = ОписаниеОшибки();
						ДобавитьВЛог("err : НЕ обновлены данные о последнем старте по параметру автоформирования заказов " + лОписаниеОшибки);
					КонецПопытки;
				КонецЕсли;
				
				// рассылка по заданиям, у которых СообщатьНетПотребности = Истина
				АктуальныеЗаданияБезПотребностиДляРассылки = ПравилаИгры.ТабличноеПоле3;
				Если АктуальныеЗаданияБезПотребностиДляРассылки.Количество() > 0 тогда
					
					Попытка
					
						Для каждого СтрРассылки из АктуальныеЗаданияБезПотребностиДляРассылки цикл
							
							СтрРассылки_Задание_ТемаПисьма = "Заказ_от_ПартКом_Потребности_Нет";
							Если СтрРассылки.Задание_Поставщик.Код = "O0015775" тогда
								СтрРассылки_Задание_ТемаПисьма = "AutoOrder_to"	 + СтрРассылки_Задание_ТемаПисьма;
							КонецЕсли;
							
							СтрРассылки_Задание_ТекстПисьма = СтрРассылки.Задание_ТекстПисьма;
							СтрРассылки_Задание_ТекстПисьма = СтрРассылки_Задание_ТекстПисьма + Символы.ПС + "На " + СокрЛП( ПравилаИгры.РасчетнаяДата );
							Если СтрРассылки.Задание_ПополнениеСкладаОтдельно тогда
								СтрРассылки_Задание_ТекстПисьма = СтрРассылки_Задание_ТекстПисьма + " потребность в заказах ( для клиентов ) отсутствует" + Символы.ПС + 
																  СтрРассылки_Задание_ТекстПисьма + " потребность в заказах ( для пополнения склада ) отсутствует";
							Иначе
								СтрРассылки_Задание_ТекстПисьма = СтрРассылки_Задание_ТекстПисьма + " потребность в заказах отсутствует";
							КонецЕсли;
							
							СписокАдресов = ПреобразоватьМассивСтруктурВСписокЗначений(АдресаЭлектроннойПочтыИзСтроки(СтрРассылки.Задание_АдресЭлПочтыТорговойТочки));
							Если СписокАдресов.Количество() = 0 тогда
								Продолжить;
							КонецЕсли;
							
							//Голубев 15.05.2018
							
							ЗарегистрироватьПисьмоКОтправке(СтрРассылки.Задание_АдресЭлПочтыОтправителя,
																 СтрРассылки_Задание_ТекстПисьма,
																 СтрРассылки_Задание_ТемаПисьма, 
																 СписокАдресов);
							
							//ОтправитьЭлектронноеПисьмоПоставщику(СтрРассылки.Задание_АдресЭлПочтыОтправителя,
							//									 СтрРассылки_Задание_ТекстПисьма,
							//									 СтрРассылки_Задание_ТемаПисьма, 
							//									 СписокАдресов);
							
							//Голубев 15.05.2018																 
						КонецЦикла;
						
						ДобавитьВЛог("inf : выполнена рассылка поставщикам, которых необходимо уведомлять об отсутствии потребности");
					
					Исключение
						лОписаниеОшибки = ОписаниеОшибки();
						ДобавитьВЛог("err : НЕ выполнена рассылка поставщикам, которых необходимо уведомлять об отсутствии потребности " + лОписаниеОшибки);
					КонецПопытки;
					
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	ОпубликоватьЛог();
	
	Возврат Отказ;
КонецФункции
Функция АктивироватьДоговоры(ПотребностьСвертка) экспорт // ф-ии, обеспечивающие защиту от параллельной работы автомата и пользователей по одному и тому же поставщику
	
	Отказ = Ложь;
	
	ИсторияСЗ = ПравилаИгры.ИсторияСЗ;
	Если ИсторияСЗ.Колонки.Количество() = 0 тогда
		ИсторияСЗ.Колонки.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	
	тзПоставщики =  ПотребностьСвертка.Скопировать(,"Заявки_Поставщик,Заявки_Склад, Заявки_Сумма");
	тзПоставщики.Свернуть("Заявки_Поставщик,Заявки_Склад", "Заявки_Сумма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка как ДоговорКонтрагента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец В (&ВладелецЫ)";
	Запрос.УстановитьПараметр("ВладелецЫ",тзПоставщики.ВыгрузитьКолонку("Заявки_Поставщик"));
	рез = Запрос.Выполнить().Выгрузить();
	
	
	Если рез.Количество() > 0 тогда
		
		НаборЗаписи  = РегистрыСведений.ИсторияФормированияСлужебныхЗаданий.СоздатьНаборЗаписей();
		Для каждого ДКА из рез цикл
			
			нстрс = ИсторияСЗ.Добавить();
			нстрс.ДоговорКонтрагента = ДКА.ДоговорКонтрагента;
			
			НаборЗаписи.Отбор.ДоговорКонтрагента.Установить(ДКА.ДоговорКонтрагента);
			НаборЗаписи.Отбор.Активно.Установить(Истина);
			НаборЗаписи.Прочитать();
			НаборЗаписи.Очистить();
			
			Запись = НаборЗаписи.Добавить();
			Запись.Активно = Истина;
			Запись.ДоговорКонтрагента = ДКА.ДоговорКонтрагента;
			Запись.Сумма = 0;//ДКА.СуммаПлан;
			Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Запись.Склад = Справочники.Склады.ПустаяСсылка();//ДКА.Склад;
			Запись.МаршрутДоставки = Справочники.МаршрутыДоставки.ПустаяСсылка();//ДКА.МаршрутДоставки;
			Запись.ДтВрм_Расчета = ПравилаИгры.РасчетнаяДата;
			
			НаборЗаписи.Записать();
		КонецЦикла;
		
		ДобавитьВЛог("inf : активация договоров КА выполнена ");
		ОпубликоватьЛог();
		
	КонецЕсли;
	
	ПравилаИгры.Вставить("ИсторияСЗ",ИсторияСЗ);
	
	Возврат Отказ;
КонецФункции
Функция ДеАктивироватьДоговоры() экспорт
	
	Отказ = Ложь;
	
	
	
	ИсторияСЗ = ПравилаИгры.ИсторияСЗ;
	Если ИсторияСЗ.Количество() < 1 тогда
		Возврат Отказ;
	КонецЕсли;
	
	НаборЗаписи  = РегистрыСведений.ИсторияФормированияСлужебныхЗаданий.СоздатьНаборЗаписей();
	Для каждого ДКА из ИсторияСЗ цикл
		
		НаборЗаписи.Отбор.ДоговорКонтрагента.Установить(ДКА.ДоговорКонтрагента);
		НаборЗаписи.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
		НаборЗаписи.Прочитать();
		НаборЗаписи.Очистить();
		НаборЗаписи.Записать();
	КонецЦикла;
	                                         
	ПравилаИгры.Вставить("ТабличноеПоле10", Новый ТаблицаЗначений);
	
	ДобавитьВЛог("inf : деактивация договоров выполнена");
	ОпубликоватьЛог();
	
	Возврат Отказ;
КонецФункции

// логирование
//--------------------------------------------------------------------------------------------------------------------
Процедура ОпубликоватьЛог()
	Если НЕ ЗначениеЗаполнено(ПравилаИгры.Аларм_Содержимое) тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ПравилаИгры.Аларм_Содержимое,"err") > 0 ИЛИ
		 Найти(ПравилаИгры.Аларм_Содержимое,"inf") > 0 тогда   
		
		Если ПравилаИгры.Это_Фон ИЛИ ЗначениеЗаполнено(Вход_Аукцион) тогда
			Если Найти(ПравилаИгры.Аларм_Содержимое,"err") > 0 тогда
				РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(ПравилаИгры.Аларм_Источник,ПравилаИгры.Аларм_Содержимое,ПравилаИгры.Аларм_Заголовок);
			КонецЕсли;
		Иначе
			
			//#Если Клиент Тогда
				Сообщить(СокрЛП(ПравилаИгры.Аларм_Содержимое));	
			//#Иначе
			//	СписокАдресатов = Новый СписокЗначений;
			//	
			//	Если ЗначениеЗаполнено(ПравилаИгры.МылоЮзвера) тогда
			//		СписокАдресатов.Добавить(ПравилаИгры.МылоЮзвера, ПравилаИгры.ИмяЮзвера);
			//	КонецЕсли;
			//	
			//	РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(
			//	Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаФормированияЗаказаПоставщику,
			//	ПравилаИгры.Аларм_Содержимое, 
			//	ПравилаИгры.Аларм_Заголовок,
			//	СписокАдресатов);
			//#КонецЕсли	
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьВЛогфайл(ПравилаИгры.Аларм_Содержимое);
	ПравилаИгры.Вставить("Аларм_Содержимое","");
	
КонецПроцедуры
Процедура ДобавитьВЛог(пар_стр)
	ПравилаИгры.Вставить("Аларм_Содержимое", ПравилаИгры.Аларм_Содержимое + Символы.ПС + пар_стр);
КонецПроцедуры
Процедура ЗаписьВЛогфайл(строкаВЛог) 

	Если НЕ ПравилаИгры.РазрешитьЗаписьВЛогФайл тогда
		Возврат;
	КонецЕсли;
	
    ТекстовыйДокумент = Новый ТекстовыйДокумент;
    кодировка = "UTF8";
	
	ПравилаИгры_ИмяЛогФайлаПолное = ПравилаИгры.ИмяЛогФайлаПолное;//СтрЗаменить(ПравилаИгры.ИмяЛогФайлаПолное,"метка", ПравилаИгры.Метка);
	
    МассивФайлов = НайтиФайлы(ПравилаИгры_ИмяЛогФайлаПолное);        
    Если МассивФайлов.Количество() > 0 тогда        
        ТекстовыйДокумент.Прочитать(ПравилаИгры_ИмяЛогФайлаПолное,кодировка);            
		
		УдалитьФайлы(ПравилаИгры_ИмяЛогФайлаПолное);
    КонецЕсли;

    строкаВЛог = Символы.ПС + 
	             "------------------------------------------------------------------" + 
				 Символы.ПС + 
				 "[" + ТекущаяДата() + "] " + 
				 Символы.ПС + 
				 строкаВЛог; 
    
    ТекстовыйДокумент.ДобавитьСтроку(строкаВЛог);
    ТекстовыйДокумент.Записать(ПравилаИгры_ИмяЛогФайлаПолное,кодировка);

КонецПроцедуры
Процедура РегистрацияЭтапаВыполненияРегламентногоЗадания(пар_СтруктураЗаписи)
	
	Попытка	
		МенеджерЗаписи = РегистрыСведений.ИсторияВыполненияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
			
		МенеджерЗаписи.Задание = ПравилаИгры.РеглЗаданиеНаИсполнение;
		МенеджерЗаписи.МоментВремени = ТекущаяДата();
		МенеджерЗаписи.Пользователь = ПравилаИгры.Ответственный;
		
		МенеджерЗаписи.Этап = пар_СтруктураЗаписи.Этап;
		
		МенеджерЗаписи.Параметр = пар_СтруктураЗаписи.Параметр;
		МенеджерЗаписи.Результат = пар_СтруктураЗаписи.Результат;
		МенеджерЗаписи.Комментарий = пар_СтруктураЗаписи.Комментарий;
		
		МенеджерЗаписи.Записать();	
	Исключение
		
		ДобавитьВЛог("err: ошибка записи в РегистрыСведений.ИсторияВыполненияРегламентныхЗаданий: 
		|РеглЗаданиеНаИсполнение[" +СокрЛП(ПравилаИгры.РеглЗаданиеНаИсполнение) + "] 
		|Ответственный[" +СокрЛП(ПравилаИгры.Ответственный) + "] 
		|Этап[" +СокрЛП(пар_СтруктураЗаписи.Этап) + "] 
		|Параметр[" +СокрЛП(пар_СтруктураЗаписи.Параметр) + "] 
		|Результат[" +СокрЛП(пар_СтруктураЗаписи.Результат) + "] 
		|Комментарий[" +СокрЛП(пар_СтруктураЗаписи.Комментарий) + "]
		|" + ОписаниеОшибки());
		ОпубликоватьЛог();
		
	КонецПопытки;
	
КонецПроцедуры
Функция ВернутьСтруктуруДляРегистрации(пар_Этап,пар_Параметр,пар_Результат,пар_Комментарий)
	
	Возврат Новый Структура("Этап,Параметр,Результат,Комментарий",пар_Этап,пар_Параметр,пар_Результат,пар_Комментарий);
	
КонецФункции
Функция СтруктуруВСтроку(пар_Стр)
	
	Стр = "";
	
    Для Каждого Элемент Из пар_Стр Цикл
        Стр = Стр + "[" + СокрЛП(Элемент.Ключ) + "] = [" + СокрЛП(Элемент.Значение) + "]; ";
    КонецЦикла;	
	
	Возврат Стр;
КонецФункции

// сервис
//--------------------------------------------------------------------------------------------------------------------
Функция УдалитьСтрокиПоID(мID,лФкл) экспорт
	
	тзд = ПравилаИгры.ТабличноеПоле2;
	
	Отбор = Новый Структура();
	
	Для каждого ид из мID цикл
		Отбор.Вставить("Заявки_IDSite",ид);
		Строки = тзд.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			Для каждого стр из Строки цикл
				стр.Вкл = лФкл;
				
				Если лФкл тогда
					стр.Сумма = стр.Количество * стр.Цена;
				Иначе
					стр.Сумма = 0;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПравилаИгры.Вставить("ТабличноеПоле2", тзд);
	
	Возврат ПравилаИгры;
КонецФункции
Функция ЗапомнитьЦену(пIDSite,пЦена,пСумма,пВкл) экспорт

	тзд = ПравилаИгры.ТабличноеПоле2;
	
	НайденнаяСтрока = тзд.Найти(пIDSite, "Заявки_IDSite");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока.Цена = пЦена;
		НайденнаяСтрока.Сумма = пСумма;
		НайденнаяСтрока.Вкл = пВкл;
	КонецЕсли;
		
	ПравилаИгры.Вставить("ТабличноеПоле2", тзд);
	
	Возврат ПравилаИгры;
КонецФункции
Процедура ЗаписатьВЛогТЗ(ПотребностьСвертка, ПотребностьСверткаИмя = "");
	
	ПотребностьСвертка_КолСтр = ПотребностьСвертка.Количество() - 1;
	ПотребностьСвертка_КолКол = ПотребностьСвертка.Колонки.Количество() - 1;
	
	Если ЗначениеЗаполнено(ПотребностьСверткаИмя) тогда
		ДобавитьВЛог(ПотребностьСверткаИмя + "_КолСтр = " + СокрЛП(ПотребностьСвертка_КолСтр + 1));
	КонецЕсли;
	
	стринфит = "";
	Для Каждого Колонка Из ПотребностьСвертка.Колонки Цикл
	    стринфит = стринфит + СокрЛП(Колонка.Имя) + ";";
	КонецЦикла;
	стринфит = стринфит + Символы.ПС +  "-";	
	Для i = 0 по ПотребностьСвертка_КолСтр цикл
		стринф = СокрЛП(i + 1) + ";";
		Для ii = 0 по ПотребностьСвертка_КолКол цикл
			стринф = стринф + СокрЛП(ПотребностьСвертка[i][ii]) + ";";
		КонецЦикла;
		стринфит = стринфит + Символы.ПС +  стринф;
	КонецЦикла;
	стринфит = стринфит + Символы.ПС +  "-";	
	
	ДобавитьВЛог(стринфит);
	//ПравилаИгры.Вставить("ТабличноеПоле3",ПотребностьСвертка);
	
КонецПроцедуры
Процедура ОчиститьТЗ()
	
	//1 ДеревоПотребности
	//2 ТаблицаПотребности
	//3 ЗаданияБезПотребности
	//4 СписокСформированныхЗаказов
	//5 ЗаданияПопавшиеВВыборку
	
	Для uio = 1 по 5 цикл
		ПравилаИгры.Вставить("ТабличноеПоле"+СокрЛП(uio),Новый ТаблицаЗначений);
	КонецЦикла;
	
КонецПРоцедуры
Функция РазвернутьДатуВстроку(выбД,Разд="") 
	СД = "";
	ГД = Год(выбД);
	МД = Месяц(выбД);
	ДД = День(выбД);
	СД = СокрЛП(Формат(ГД, "ЧЦ=4; ЧН=; ЧВН=; ЧГ="))+Разд+СокрЛП(Формат(МД, "ЧЦ=2; ЧН=; ЧВН="))+Разд+СокрЛП(Формат(ДД, "ЧЦ=2; ЧН=; ЧВН="));
	Возврат СД;
КонецФункции
Функция УбратьТОчкиИПробелы(пстр)
	
	пстр = СтрЗаменить(пстр,".","");
	пстр = СтрЗаменить(пстр," ","");
	
	пстр = СтрЗаменить(пстр,";","_");
	пстр = СтрЗаменить(пстр,"""","");
	
	пстр = СтрЗаменить(пстр,"(","");
	пстр = СтрЗаменить(пстр,")","");
	
	Возврат пстр;
КонецФункции
Функция ОтобратьСтрокиПоКритериям(Источник, СтруктураКритериев, СтруктураСложныхКритериев = Неопределено) Экспорт

	Перем ВидСравненияСложный; //ВидСравнения.Равно

	Если СтруктураСложныхКритериев = Неопределено Тогда
		СтруктураСложныхКритериев = Новый Структура;
	КонецЕсли;

	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Источник);

	Для Каждого Критерий Из СтруктураКритериев Цикл
		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Критерий.Ключ);

		СтруктураСложныхКритериев.Свойство(Критерий.Ключ, ВидСравненияСложный);

		Если ВидСравненияСложный = Неопределено Тогда
			НовыйОтбор.Установить(Критерий.Значение);
		Иначе
			НовыйОтбор.Использование = Истина;
			НовыйОтбор.ВидСравнения = ВидСравненияСложный;
			НовыйОтбор.Значение = Критерий.Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат ПостроительЗапроса.Результат;

КонецФункции
Функция СформироватьСтруктуруШапкиДокумента() Экспорт

	СтруктураШапкиДокумента = Новый Структура;

	ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
	МетаданныеДокумента = ДокументОбъект.Метаданные();
    
	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя, ДокументОбъект[Реквизит.Имя]);
	КонецЦикла;

	//СтруктураШапкиДокумента.Вставить("Ссылка", ДокументОбъект.Ссылка);
	//СтруктураШапкиДокумента.Вставить("Дата",   ДокументОбъект.Дата);
	//СтруктураШапкиДокумента.Вставить("Номер",  ДокументОбъект.Номер);
	//СтруктураШапкиДокумента.Вставить("ВидДокумента",  МетаданныеДокумента.Имя);
	//СтруктураШапкиДокумента.Вставить("ПредставлениеВидаДокумента",  МетаданныеДокумента.Представление());
	//СтруктураШапкиДокумента.Вставить("ПредставлениеДокумента", ДокументОбъект.Ссылка.Метаданные().Синоним+" № "+ДокументОбъект.Ссылка.НомерДокумента+" от "+Формат(ДокументОбъект.Ссылка.ДатаДокумента,"ДФ=dd.MM.yyyy")); //СокрЛП(ДокументОбъект)
	//СтруктураШапкиДокумента.Вставить("ФоновоеЗадание",  ЭтоФоновоеЗадание());
	
	Возврат СтруктураШапкиДокумента;
КонецФункции
Функция ЗаполнитьСтруктуруШапкиДокумента(пар_Шапка, пар_СтрГр) Экспорт

	Для каждого Реквизит из пар_Шапка Цикл
		пар_Шапка.Вставить(Реквизит.Ключ, пар_СтрГр[Реквизит.Ключ]);
	КонецЦикла;
	
	Возврат пар_Шапка;
КонецФункции
Функция СформироватьСтруктуруТабличнойЧастиДокумента() Экспорт
	СтруктураТабличнойЧастиДокумента = Новый Структура; 
	
	ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
	ИмяТабличнойЧасти = "Товары";
	
	Для Каждого Реквизит из ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты Цикл 
		СтруктураТабличнойЧастиДокумента.Вставить(Реквизит.Имя, Реквизит.Имя); 
	КонецЦикла; 

	Возврат СтруктураТабличнойЧастиДокумента; 

КонецФункции
Функция ЭтоФоновоеЗадание() Экспорт
	НомерТекущегоСеанса = НомерСеансаИнформационнойБазы();
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для каждого Сеанс из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерТекущегоСеанса И Сеанс.ИмяПриложения = "BackgroundJob" Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
    Возврат Ложь;
КонецФункции 
Функция СвернутьТаблицуЗначений(Таб, строкаГруппировок, СтрокаСуммирования, Знач ГраничноеКоличество = 1500) Экспорт
	
	строкаГруппировок = СтрЗаменить(строкаГруппировок, ";", ",");
	
	//Если Таб.Количество()<ГраничноеКоличество И ТипЗНЧ(СтрокаСуммирования) = Тип("Строка") Тогда
	Если ТипЗНЧ(СтрокаСуммирования) = Тип("Строка") Тогда
		Попытка
			Таб.Свернуть(строкаГруппировок, СтрокаСуммирования); 
		Исключение
			ЗаписьЖурналаРегистрации("Обработка.ФормированиеЗаказовПоставщику",УровеньЖурналаРегистрации.Ошибка,,строкаГруппировок,"Ошибка свертки строк. "+строкаГруппировок+" = "+СтрокаСуммирования);
		КонецПопытки;
		Возврат Таб;
	КонецЕсли;
	
	пз = Новый ПостроительЗапроса();
	пз.ИсточникДанных = Новый ОписаниеИсточникаДанных(Таб);
	пз.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	СтрукГруппировок = Новый Структура(строкаГруппировок);
	КоличествоГруппировок = СтрукГруппировок.Количество();
	Для каждого Эл Из СтрукГруппировок Цикл
		пз.ИсточникДанных.Колонки[Эл.Ключ].Измерение = Истина;
	КонецЦикла;
	
	Если ТипЗНч(СтрокаСуммирования) = Тип("Строка") Тогда
		СтрукСуммирования = Новый Структура(СтрокаСуммирования);
		Для каждого эл Из СтрукСуммирования Цикл
			СтрукСуммирования.Вставить(эл.Ключ, "СУММА")	//эл.Значение = "СУММА";
		КонецЦикла;
	ИначеЕсли ТипЗНч(СтрокаСуммирования) = Тип("Структура") Тогда
		СтрукСуммирования = Новый Структура();
		Для каждого эл Из СтрокаСуммирования Цикл
			СтрукСуммирования.Вставить(эл.Ключ, эл.Значение);
		КонецЦикла; 
	КонецЕсли; 
	Для каждого Эл Из СтрукСуммирования Цикл
		пз.ИсточникДанных.Колонки[Эл.Ключ].Итог = ""+эл.Значение+"("+Эл.Ключ+")";
	КонецЦикла;
	
	Таб1 = Новый ТаблицаЗначений;
	Для каждого Колонка Из Таб.Колонки Цикл
		Если (СтрукГруппировок.Свойство(Колонка.Имя) = Ложь) И 
			(СтрукСуммирования.Свойство(Колонка.Имя) = Ложь) Тогда
			Продолжить;
		КонецЕсли; 
		Таб1.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла; 
	
	пз.ЗаполнитьНастройки();
	пз.Выполнить();	
	ЗаполнитьТаблицуПоВыборке(пз.Результат, Таб1, КоличествоГруппировок);
	Возврат Таб1;
КонецФункции
Процедура ЗаполнитьТаблицуПоВыборке(Рез, Таб, Знач КоличествоГруппировок) Экспорт
	выб = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока выб.Следующий() Цикл
		Если КоличествоГруппировок=0 Тогда
			НовСтрока = Таб.Добавить();	
			ЗаполнитьЗначенияСвойств(НовСтрока, выб);
		Иначе
			ЗаполнитьТаблицуПоВыборке(выб,Таб, КоличествоГруппировок-1);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры	
Функция ПреобразоватьМассивСтруктурВСписокЗначений(МассивСтруктур)
	
	СписокАдресов = Новый СписокЗначений;
	
	Для Каждого ЭлементМассива из МассивСтруктур Цикл
		Если ЗначениеЗаполнено(ЭлементМассива.ОписаниеОшибки) тогда
			Продолжить;
		КонецЕсли;
		СписокАдресов.Добавить(ЭлементМассива.Адрес, ЭлементМассива.Псевдоним);             
	КонецЦикла;			
	
	Возврат СписокАдресов;
	
КонецФункции
Процедура ЗапомнитьНажатиеКнопки() экспорт
	КоличествоНажатийКнопкиРассчитатьПользователем	= ПравилаИгры.КоличествоНажатийКнопкиРассчитатьПользователем;
	ПравилаИгры.Вставить("КоличествоНажатийКнопкиРассчитатьПользователем",КоличествоНажатийКнопкиРассчитатьПользователем + 1);
КонецПроцедуры
Процедура НастроитьОтображениеКолонкиАртикулКодЗначение(ИмяОбъектаМетаданных,СЗначЭлФормы,СзначИсключения = неопределено) экспорт 
	//Если СЗначИсключения = неопределено тогда
	//	СЗначИсключения = новый СписокЗначений;
	//Конецесли;
	//для каждого элФормы из СЗначЭлФормы цикл
	//	ТабПоле = ЭлФормы.Значение;
	//	ИмяКолонки = КолонкаАртикулКодИмяПолучить(ИмяОбъектаМетаданных);      
	//	ИмяКолонкиСтр = Строка(ИмяКолонки);
	//	КоличествоКолонок = 0;
	//	для каждого колонка из ТабПоле.Колонки цикл
	//		Если СЗначИсключения.найтиПоЗначению(Колонка.Имя) = неопределено тогда
	//			КоличествоКолонок = КоличествоКолонок + 1;
	//		КонецЕсли;
	//	Конеццикла;	
	//	Если ТабПоле.Колонки.Найти("КолонкаАртикулКодЗначение") = неопределено тогда
	//		КолонкаАртикулКодЗначение = ТабПоле.Колонки.Добавить("КолонкаАртикулКодЗначение");
	//		ТабПоле.Колонки.Сдвинуть(КолонкаАртикулКодЗначение,(-1)*(КоличествоКОлонок));
	//		КолонкаАртикулКодЗначение.ТекстШапки = ИмяКолонкиСтр;
	//		КолонкаАртикулКодЗначение.Ширина = 20;
	//		КолонкаАртикулКодЗначение.ТолькоПросмотр = Истина;
	//		КолонкаАртикулКодЗначение.УстановитьЭлементУправления(Тип("ПолеВвода"));
	//		КолонкаАртикулКодЗначение.ЭлементУправления.РедактированиеТекста = Ложь;
	//		МассивТипов = Новый Массив;
	//		МассивТипов.Добавить(Тип("Строка"));
	//		КолонкаАртикулКодЗначение.ЭлементУправления.ТипЗначения = новый ОписаниеТипов(МассивТипов,,Новый КвалификаторыСтроки(20));
	//	Конецесли;
	//Конеццикла;	
Конецпроцедуры
Функция ПолучитьПользователяДляОтправкиЭлектронныхСообщений()
	
	#Если Сервер Тогда
		// Выполнение отправки писем фоновым заданием
		Возврат Справочники.Пользователи.ПустаяСсылка();
	#Иначе
		Возврат ПараметрыСеанса.ТекущийПользователь;
	#КонецЕсли
	
КонецФункции
// Разбирает строку с адресами электронной почты согласно стандарту RFC 5322 с ограничениями.
//
// Ограничения:
//  1. В адресе разрешаются только буквы, цифры, символ подчеркивания, дефис и символ "@".
//  2. Символы скобок "<>[]()" допускаются, но игнорируются путём замены на пробелы.
//  3. Группы запрещены.
//
// Параметры:
//  Строка - Строка - Строка, содержащая электронные адреса (mailbox-list).
//
// Возвращаемое значение:
//  Массив - содержит массив структур адресов.
//           Поля структуры:
//             Псевдоним      - Строка - представление адресата.
//             Адрес          - Строка - найденный и соответствующий требованиям почтовый адрес;
//                                       Если текст, похожий на адрес найден, но не соответствует требованиям
//                                       стандартов, то такой текст записывается в поле "Псевдоним".
//             ОписаниеОшибки - Строка - текстовое представление ошибки, либо пустая строка, если ошибок нет.
//
//Обработки.ФормированиеЗаказовПоставщику.Создать().АдресаЭлектроннойПочтыИзСтроки("zakaz@vinorder.ru;Ekaterina.Matunina@part-kom.ru");
//
Функция АдресаЭлектроннойПочтыИзСтроки(Знач Строка) Экспорт
	
	Результат = Новый Массив;
	
	// заменяем скобки на пробелы
	СимволыСкобок = "<>()[]";
	Строка = ЗаменитьСимволыВСтрокеНаПробелы(Строка, СимволыСкобок);
	
	// приводим разделители к одному виду
	Строка = СтрЗаменить(Строка, ",", ";");
	
	// раскладываем mailbox-list на mailbox'ы
	МассивАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, ";", Истина);
	
	// допустимые символы для псевдонима (display-name)
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Цифры = "0123456789";
	ДополнительныеСимволы = "._- ";
	
	// выделяем из строки адреса (mailbox'а) псевдоним (display-name) и адрес (addr-spec)
	Для Каждого СтрокаАдреса Из МассивАдресов Цикл
		
		Псевдоним = "";
		Адрес = "";
		ОписаниеОшибки = "";
		
		Если СтрЧислоВхождений(СтрокаАдреса, "@") <> 1 Тогда
			Псевдоним = СтрокаАдреса;
		Иначе
			// всё, что не подходит в качестве адреса, складываем в псевдоним
			Для Каждого Подстрока Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаАдреса, " ") Цикл
				Если ПустаяСтрока(Адрес) и АдресЭлектроннойПочтыСоответствуетТребованиям(Подстрока) Тогда
					Адрес = Подстрока;
				Иначе
					Псевдоним = Псевдоним + " " + Подстрока;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Адрес = СокрЛП(Адрес);
		Псевдоним = СокрЛП(Псевдоним);
		
		// проверки
		ЕстьНедопустимыеСимволыВПсевдониме = Не СтрокаСодержитТолькоДопустимыеСимволы(НРег(Псевдоним), Буквы + Цифры + ДополнительныеСимволы);
		АдресОпределен = Не ПустаяСтрока(Адрес);
		ЕстьПризнакНаличияАдресаВСтроке = Найти(СтрокаАдреса, "@") > 0;
		
		Если АдресОпределен Тогда 
			Если ЕстьНедопустимыеСимволыВПсевдониме Тогда
				ОписаниеОшибки = НСтр("ru = 'Представление содержит недопустимые символы'");
			КонецЕсли;
		Иначе
			Если ЕстьПризнакНаличияАдресаВСтроке Тогда 
				ОписаниеОшибки = НСтр("ru = 'Адрес электронной почты содержит ошибки'");
			Иначе
				ОписаниеОшибки = НСтр("ru = 'Строка не содержит адреса электронной почты'");
			КонецЕсли;
		КонецЕсли;	
		
		СтруктураАдреса = Новый Структура("Псевдоним,Адрес,ОписаниеОшибки", Псевдоним, Адрес, ОписаниеОшибки);
		Результат.Добавить(СтруктураАдреса);
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции
Функция ЗаменитьСимволыВСтрокеНаПробелы(Строка, ЗаменяемыеСимволы)
	Результат = Строка;
	Для Позиция = 1 по СтрДлина(Символы) Цикл
		Результат = СтрЗаменить(Результат, Сред(ЗаменяемыеСимволы, Позиция, 1), " ");
	КонецЦикла;
	Возврат Результат;
КонецФункции
// Проверяет email адрес на соответствие требованиям стандартов RFC 5321, RFC 5322,
// а также RFC 5335, RFC 5336 и RFC 3696.
// Кроме того, функция ограничивает использование спецсимволов.
// 
// Параметры:
//  Адрес - Строка - проверяемый email.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция АдресЭлектроннойПочтыСоответствуетТребованиям(Знач Адрес) Экспорт
	
	// допустимые символы для email
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Цифры = "0123456789";
	СпецСимволы = ".@_-";
	
	// проверяем любые сочетания спецсимволов
	Если СтрДлина(СпецСимволы) > 1 Тогда
		Для Позиция1 = 1 По СтрДлина(СпецСимволы)-1 Цикл
			Символ1 = Сред(СпецСимволы, Позиция1, 1);
			Для Позиция2 = Позиция1 + 1 По СтрДлина(СпецСимволы) Цикл
				Символ2 = Сред(СпецСимволы, Позиция2, 1);
				Комбинация1 = Символ1 + Символ2;
				Комбинация2 = Символ2 + Символ1;
				Если Найти(Адрес, Комбинация1) > 0 или Найти(Адрес, Комбинация2) > 0 Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// проверяем символ @
	Если СтрЧислоВхождений(Адрес, "@") <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	   
	// проверяем две точки подряд
	Если Найти(Адрес, "..") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// приводим строку адреса к нижнему регистру
	Адрес = НРег(Адрес);
	
	// проверяем допустимые символы
	Если Не СтрокаСодержитТолькоДопустимыеСимволы(Адрес, Буквы + Цифры + СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// разбираем адрес на local-part и domain
	Позиция = Найти(Адрес,"@");
	ЛокальноеИмя = Лев(Адрес, Позиция - 1);
	Домен = Сред(Адрес, Позиция + 1);
	
	// проверяем на заполненность и допустимость длины
	Если ПустаяСтрока(ЛокальноеИмя)
	 	или ПустаяСтрока(Домен)
		или СтрДлина(ЛокальноеИмя) > 64
		или СтрДлина(Домен) > 255 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем наличие спецсимволов в начале и в конце частей адреса
	Если ЕстьСимволыВНачалеВКонце(ЛокальноеИмя, СпецСимволы) или ЕстьСимволыВНачалеВКонце(Домен, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// в домене должна быть минимум одна точка
	Если Найти(Домен,".") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// в домене не должно быть символа подчеркивания
	Если Найти(Домен,"_") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// выделяем зону (TLD) из имени домена 
	Зона = Домен;
	Позиция = Найти(Зона,".");
	Пока Позиция > 0 Цикл
		Зона = Сред(Зона, Позиция + 1);
		Позиция = Найти(Зона,".");
	КонецЦикла;
	
	// проверяем зону домена (минимум 2 символа, только буквы)
	Возврат СтрДлина(Зона) >= 2 и СтрокаСодержитТолькоДопустимыеСимволы(Зона,Буквы);
	
КонецФункции
Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы)
	МассивСимволов = Новый Массив;
	Для Позиция = 1 по СтрДлина(ДопустимыеСимволы) Цикл
		МассивСимволов.Добавить(Сред(ДопустимыеСимволы,Позиция,1));
	КонецЦикла;
	
	Для Позиция = 1 по СтрДлина(Строка) Цикл
		Если МассивСимволов.Найти(Сред(Строка, Позиция, 1)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции
Функция ЕстьСимволыВНачалеВКонце(Строка, ПроверяемыеСимволы)
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = (Лев(Строка,1) = Символ) или (Прав(Строка,1) = Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
// Функция проверяет что введенная строка с e-mail адресами введена правильно
//
// Формат строки:
// Z = ИмяПользователя|[Имя Пользователя] [<]пользователь@почтовый_сервер[>], Строка = Z[<разделитель*>Z]..
// 
//   прим.: разделитель* - имеется в виду любой разделитель адресов
//
// Параметры:
// СтрокаПереданныхАдресов - строка - правильная строка с почтовыми адресами
//
// Возвращаемое значение:
// Структура
// ключ Статус - булево - успех или неуспех преобразования
// в случае успеха содержит ключ Значение:
//           Массив структур, где
//                  Адрес- e-mail получателя
//                  Представление   - имя получателя
// в случае неуспеха содержит ключ СообщениеОбОшибке - строка
//
//  ВАЖНО: Функция возвращает массив структур, в которых одно поле (любое)
//         может быть незаполнено. Может использоваться различными
//         подсистемами для собственного сопоставления имени пользователя
//         некому e-mail адресу. Поэтому, необходимо перед непосредственной
//         отправкой проверить, что поле почтового адреса заполнено.
//
Функция РазобратьСтрокуСПочтовымиАдресами(знач СтрокаПереданныхАдресов) Экспорт
	
	Результат = Новый Массив;
	
	НедопустимыеСимволы = "!#$%^&*()+`~|\/=";
	
	СообщениеНедопустимыеСимволы = НСтр("ru = 'Недопустимый символ %1 в адресе электронной почты %2'");
	СообщениеНеверныйФорматПочтовогоАдреса = НСтр("ru = 'Некорректный адрес электронной почты %1'");
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПереданныхАдресов,";",Истина);
	МассивПодстрокКОбработке = Новый Массив;
	
	Для каждого ЭлементМассива Из МассивПодстрок Цикл
		Если Найти(ЭлементМассива,",") > 0 Тогда
			ДопМассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПереданныхАдресов);
			Для каждого ЭлементДопМассива Из ДопМассивПодстрок Цикл
				МассивПодстрокКОбработке.Добавить(ЭлементДопМассива);
			КонецЦикла;
		Иначе
			МассивПодстрокКОбработке.Добавить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаАдреса ИЗ МассивПодстрокКОбработке Цикл
		
		Индекс = 1;               // номер обрабатываемого символа
		Накопитель = "";          // накопитель символов, после анализа перемещается либо в полное имя
		// либо в почтовый адрес
		ПолноеИмяАдресата = "";   // переменная, накапливающая имя адресата
		ПочтовыйАдрес = "";       // переменная, накапливающая e-mail адрес
		// 1 - формирование полного имени: ожидаются любые допустимые символы имени адресата
		// 2 - формирование почтового адреса: ожидаются любые допустимые символы email адреса
		// 3 - завершение формирования очередного почтового адреса - ожидаются символы разделители либо пробелы
		СтадияРазбора = 1; 
		
		Пока Индекс <= СтрДлина(СтрокаАдреса) Цикл
			
			Символ = Сред(СтрокаАдреса, Индекс, 1);
			
			Если      Символ = " " Тогда
				Индекс = ? ((ПропуститьПробелы(СтрокаАдреса, Индекс, " ") - 1) > Индекс,
				ПропуститьПробелы(СтрокаАдреса, Индекс, " ") - 1,
				Индекс);
				Если      СтадияРазбора = 1 Тогда
					ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель + " ";
				ИначеЕсли СтадияРазбора = 2 Тогда
					ПочтовыйАдрес = Накопитель;
					СтадияРазбора = 3;
				КонецЕсли;
				Накопитель = "";
			ИначеЕсли Символ = "@" Тогда
				Если      СтадияРазбора = 1 Тогда
					СтадияРазбора = 2;
					
					Для ИндексПоискаНС = 1 По СтрДлина(Накопитель) Цикл
						Если Найти(НедопустимыеСимволы, Сред(Накопитель, ИндексПоискаНС, 1)) > 0 Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							                  СообщениеНедопустимыеСимволы,Сред(Накопитель, ИндексПоискаНС, 1),СтрокаАдреса);
						КонецЕсли;
					КонецЦикла;
					
					Накопитель = Накопитель + Символ;
				ИначеЕсли СтадияРазбора = 2 Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					                  СообщениеНеверныйФорматПочтовогоАдреса,СтрокаАдреса);
				ИначеЕсли СтадияРазбора = 3 Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					                  СообщениеНеверныйФорматПочтовогоАдреса,СтрокаАдреса);
				КонецЕсли;
			Иначе
				Если СтадияРазбора = 2 ИЛИ СтадияРазбора = 3 Тогда
					Если Найти(НедопустимыеСимволы, Символ) > 0 Тогда
						ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						                  СообщениеНедопустимыеСимволы,Символ,СтрокаАдреса);
					КонецЕсли;
				КонецЕсли;
				
				Накопитель = Накопитель + Символ;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Если      СтадияРазбора = 1 Тогда
			ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
		ИначеЕсли СтадияРазбора = 2 Тогда
			ПочтовыйАдрес = Накопитель;
		КонецЕсли;
		
		Если ПустаяСтрока(ПочтовыйАдрес) И (Не ПустаяСтрока(ПолноеИмяАдресата)) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                  СообщениеНеверныйФорматПочтовогоАдреса,ПолноеИмяАдресата);
		ИначеЕсли СтрЧислоВхождений(ПочтовыйАдрес,"@") <> 1 Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                  СообщениеНеверныйФорматПочтовогоАдреса,ПочтовыйАдрес);
		КонецЕсли;
		
		Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
			Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
// Проверяет, что почтовый адрес не содержит символов обрамления
//// если символы обрамления вставлены правильно убирает их
//// Параметры:
////  ПолноеИмяАдресата - строка - имя получателя
////  ПочтовыйАдрес     - строка - email адрес
//// Возвращаемое значение:
////  Структура:
////   Ключ статус - булево - успех или неуспех операции
////   СообщениеОбОшибке - в случае неуспеха операции содержит сообщение об ошибке
////   Значение - структура - в случае успеха операции содержит записанную структуру почтового
////                          адреса: ключи - Адрес, Представление (строки)
////
Функция ПроверитьИПодготовитьПочтовыйАдрес(знач ПолноеИмяАдресата, знач ПочтовыйАдрес)
	
	НедопустимыйСимволВИмениАдресата = НСтр("ru = 'Недопустимый символ в имени адресата.'");
	НедопустимыйСимволВПочтовомАдресе = НСтр("ru = 'Недопустимый символ в почтовом адресе.'");
	СимволыОбрамления = "<>[]";
	
	ПочтовыйАдрес     = СокрЛП(ПочтовыйАдрес);
	ПолноеИмяАдресата = СокрЛП(ПолноеИмяАдресата);
	
	Если Лев(ПолноеИмяАдресата, 1) = "<" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = ">" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВИмениАдресата;
		КонецЕсли;
	ИначеЕсли Лев(ПолноеИмяАдресата, 1) = "[" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = "]" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВИмениАдресата;
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(ПочтовыйАдрес, 1) = "<" Тогда
		Если Прав(ПочтовыйАдрес, 1) = ">" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	ИначеЕсли Лев(ПочтовыйАдрес, 1) = "[" Тогда
		Если Прав(ПочтовыйАдрес, 1) = "]" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СимволыОбрамления) Цикл
		Если Найти(ПолноеИмяАдресата, Сред(СимволыОбрамления, Индекс, 1)) <> 0
		 ИЛИ Найти(ПочтовыйАдрес,     Сред(СимволыОбрамления, Индекс, 1)) <> 0 Тогда
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПочтовыйАдрес,ПолноеИмяАдресата);
	
КонецФункции
// Сдвигает маркер позиции пока встречается символ Символ
// возвращает номер позиции в строке, на которое установился маркер
//
Функция ПропуститьПробелы(знач Строка,
                          знач ТекущийИндекс,
                          знач ПропускаемыйСимвол)
	
	Результат = ТекущийИндекс;
	
	// убираем лишние пробелы если они есть
	Пока ТекущийИндекс < СтрДлина(Строка) Цикл
		Если Сред(Строка, ТекущийИндекс, 1) <> ПропускаемыйСимвол Тогда
			Возврат ТекущийИндекс;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	
	Возврат ТекущийИндекс;
	
КонецФункции

//отправка письма поставщику
Процедура ЗарегистрироватьПисьмоКОтправке(АдресОтправителя, ТекстПисьма, ТемаПисьма, СписокАдресатов)
	АдресПоставщика = "";
	Для Каждого КлючИЗначение Из СписокАдресатов Цикл
		АдресПоставщика = ?(ПустаяСтрока(АдресПоставщика), АдресПоставщика, АдресПоставщика + ";");
		АдресПоставщика = АдресПоставщика + КлючИЗначение.Значение;
		
	КонецЦикла;
	
	аЗапись = РегистрыСведений.ИсторияОтправкиПисемПоставщикам.СоздатьМенеджерЗаписи();
	аЗапись.Объект = "НетПотребности_" + Строка(Новый УникальныйИдентификатор());
	аЗапись.ДатаРегистрации = ТекущаяДата();
	аЗапись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	аЗапись.АдресПоставщика = АдресПоставщика;
	аЗапись.КопияАдресМенеджера = АдресОтправителя;
	СтруктураПисьма = Новый Структура;
	СтруктураПисьма.Вставить("ТекстПисьма", ТекстПисьма);
	СтруктураПисьма.Вставить("ТемаПисьма", ТемаПисьма);
	аЗапись.ОтправленныеДанные = Новый ХранилищеЗначения(СтруктураПисьма, Новый СжатиеДанных(9));
	аЗапись.Записать(Истина);
	
КонецПроцедуры
				
Процедура ОтправитьЭлектронноеПисьмоПоставщику(АдресОтправителя = Неопределено, ТекстПисьма = "", ТемаПисьма = "", 
					СписокАдресатов = Неопределено, КодировкаПисьма = "UTF8", ТипТекста = Неопределено, 
					лАдресФайлаВложения = "") Экспорт
					
	Если СписокАдресатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = Константы.УчетнаяЗаписьДляОтправкиПочтыПоставщикам.Получить();
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) тогда
		УчетнаяЗапись = РассылкаСообщенийОбОшибках.ПолучитьСистемнуюУчетнуюЗапись();
	КонецЕсли;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
	Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
		Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;
	КонецЕсли; 
	Профиль.Пароль           = УчетнаяЗапись.Пароль;
	Профиль.Пользователь     = УчетнаяЗапись.Логин;
	Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
	Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
	Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		Профиль.ПарольSMTP         = УчетнаяЗапись.ПарольSMTP;
		Профиль.ПользовательSMTP   = УчетнаяЗапись.ЛогинSMTP;
	Иначе
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		Профиль.ПарольSMTP         = "";
		Профиль.ПользовательSMTP   = "";
	КонецЕсли; 
	
	ИнтернетПочта = Новый ИнтернетПочта;
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
	Исключение
		ЗаписьЖурналаРегистрации("Отправка электронного сообщения", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
	
	ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
	ПочтовоеСообщение.Кодировка 		= КодировкаПисьма;
	ПочтовоеСообщение.ИмяОтправителя  	= УчетнаяЗапись.Наименование;
	ПочтовоеСообщение.Отправитель    	= УчетнаяЗапись.АдресЭлектроннойПочты;
	ПочтовоеСообщение.Тема            	= ТемаПисьма;
	Для каждого Кому Из СписокАдресатов Цикл
		Получатель = ПочтовоеСообщение.Получатели.Добавить();
		Получатель.Адрес           = Кому.Значение;
		Получатель.ОтображаемоеИмя = Кому.Представление;
		Получатель.Кодировка       = КодировкаПисьма;		
	КонецЦикла;
	ТекстСообщения = ПочтовоеСообщение.Тексты.Добавить();
	ТекстСообщения.Кодировка = КодировкаПисьма;
	
	Если ТипТекста = Неопределено Тогда
		ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Иначе
		ТекстСообщения.ТипТекста = ТипТекста;
	КонецЕсли;
	
	ТекстСообщения.Текст     = ТекстПисьма;
	
	Если НЕ ПустаяСтрока(лАдресФайлаВложения) Тогда
		ПолученныйФайл = Новый Файл(лАдресФайлаВложения);
		Если ПолученныйФайл.Существует() Тогда
			ФайлВложения = ПочтовоеСообщение.Вложения.Добавить(ПолученныйФайл.ПолноеИмя);			
		КонецЕсли;
	КонецЕсли;
		
	Попытка
		ИнтернетПочта.Послать(ПочтовоеСообщение);
	Исключение
		ЗаписьЖурналаРегистрации("Отправка электронного сообщения", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	КонецПопытки;
	
	ИнтернетПочта.Отключиться();
	
КонецПроцедуры
Функция СформироватьМакетНаОснованииЗаказаИдовавитьВсписок(Заказ)
	Спс = Новый СписокЗначений;
//	СписокЗначений, где значения - структура параметров и знаяений для создания
//                            нового элемента справочника ВложенияЭлектронныхПисем, ключи структуры
//                            соответствуют именам реквизитов справочника ВложенияЭлектронныхПисем
	
	ТабДок = Новый ТабличныйДокумент;
	
	//Макет = ОмРаботаСФормами.ПолучитьМакетДляПечати(Метаданные().Имя, "ЗаказПоставщику");
	//Если Макет = Неопределено Тогда
	//	Макет = ПолучитьОбщийМакет("ЗаказПоставщику");
	//КонецЕсли;	
	
	ТабДок.РазмерСтраницы = "A4";
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСправа = 5;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСнизу = 5;
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	
	ПолноеИмяФайла = СформироватьИмяФайлаВыгрузки(Заказ);
	
	//ТаблицаЗначений2Mxl(СвОст,ИмяФайлаОстПолное);
	Попытка	
		УдалитьФайлы(ПолноеИмяФайла);
		ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	Исключение
		
		ТекстПредупреждения = "Ошибка записи файла на основании [" + СокрЛП(Заказ) + "]
		|" + ОписаниеОшибки();
		
		#Если Клиент Тогда
	        Предупреждение(ТекстПредупреждения);
			Возврат Спс;
		#Иначе
			 Возврат Спс;
			//ВызватьИсключение ТекстПредупреждения;
		#КонецЕсли	

	КонецПопытки; 
	
	
	//DisplayWorkbookTabs // признак отображения закладок листов книги
	//TabRatio  // соотношение ширины области закладок рабочей книги к ширине горизонтальной полосы прокрутки окна (как число между 0 (ноль) и 1, значение по умолчанию 0.6) 
	
	Excel = Новый COMОбъект("Excel.Application");
	Excel.WorkBooks.Open(ПолноеИмяФайла); 
	Excel.Visible = 0;

	Excel.ActiveWindow.DisplayWorkbookTabs = 1; 
	Excel.ActiveWindow.TabRatio = 0.6;         

	FullName = Excel.ActiveWorkbook.FullName;            
	Excel.DisplayAlerts = false;
	Excel.ActiveWorkbook.SaveAs(FullName, 51); // 18 - xls 97-2003; 51 - xlsx 2007-2013

	Excel.Application.Quit();
	
	
	Возврат Спс;
КонецФункции
Функция СформироватьИмяФайлаВыгрузки(Заказ)
	
	Текущая_Дата = Заказ.Дата;
	
	Стр_Текущая_Дата = 
	Формат(Год(Текущая_Дата), "ЧЦ=4; ЧВН=")+
	Формат(Месяц(Текущая_Дата), "ЧЦ=2; ЧВН=")+
	Формат(День(Текущая_Дата), "ЧЦ=2; ЧВН=")+
	"_"+
	Формат(Час(Текущая_Дата), "ЧЦ=2; ЧВН=")+
	Формат(Минута(Текущая_Дата), "ЧЦ=2; ЧВН=");
	
	ПолноеИмяФайла = КаталогВременныхФайлов() 
	+ "Заказ_"
	+ СтрЗаменить(СокрЛП(Заказ.Контрагент.НаименованиеПолное), " ", "")+ "_" 
	+ СокрЛП(Заказ.Номер)+ "_"
	+ Стр_Текущая_Дата+".XLSX";
	
	Возврат ПолноеИмяФайла;
КонецФункции
Функция ПереправитьПараметрыФормированияПисьма(Тело = "", АдресаРассылки, АдресОТправки, Вложение, Тема = "Заказ поставщику" ) Экспорт
	
	Отказ = Истина;
	
	Кому = "";
	Если ТипЗнч(АдресаРассылки) = Тип("СписокЗначений") Тогда
		Кому = АдресаРассылки;
	ИначеЕсли ТипЗнч(АдресаРассылки) = Тип("Строка") Тогда
		СписокПолучателей = Новый СписокЗначений();
		СписокПолучателей.Добавить(АдресаРассылки,АдресаРассылки);
		Кому = СписокПолучателей;
	Иначе
		Возврат Отказ;
	КонецЕсли;

	УчетныеЗаписи = Справочники.УчетныеЗаписиЭлектроннойПочты;
	Учетка = УчетныеЗаписи.НайтиПоКоду("000000002");
	Если Учетка = УчетныеЗаписи.ПустаяСсылка() Тогда
		Возврат Отказ;
	КонецЕсли;
	
	Юзверы = Справочники.Пользователи;
	Ответственный = Юзверы.НайтиПоКоду("Администратор");
	Если Ответственный = Юзверы.ПустаяСсылка() Тогда
		Возврат Отказ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Тело) ИЛИ НЕ ЗначениеЗаполнено(Тема) Тогда
		Возврат Отказ;
	КонецЕсли;
	
	
	тхтСообщения  = Тело;
	тхтТемыСообщения = Тема;
	ВидТХТ = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	
	Письмо = Новый Структура;
	Письмо.Вставить("Тело", тхтСообщения);
	Письмо.Вставить("Тема", тхтТемыСообщения);
	Письмо.Вставить("ВидТекста", ВидТХТ);
	Письмо.Вставить("УчетнаяЗапись", Учетка);
	Письмо.Вставить("Кому", Кому);
	Письмо.Вставить("Ответственный", Ответственный);
	
	СтруктураНового = УправлениеЭлектроннойПочтой.НаписатьПисьмо(Ответственный, Письмо,,,,,, Истина, Ложь);
	
	Если СтруктураНового = Неопределено Тогда 
		Возврат Отказ; 
	КонецЕсли;
	
	УчетныеЗаписи = Новый Массив;
	УчетныеЗаписи.Добавить(Учетка);
	
	Письма = Новый Массив;
	Письма.Добавить(СтруктураНового.ПисьмоСсылка);
	
	ПисьмоОбъект = СтруктураНового.ПисьмоСсылка.ПолучитьОбъект();
	ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
	ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	УправлениеЭлектроннойПочтой.ПолучениеОтправкаПисем(глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), Ответственный, УчетныеЗаписи, Письма, Истина, Ложь, Ложь);
	
	Отказ = Ложь;
	
	ПисьмоОбъект = СтруктураНового.ПисьмоСсылка.ПолучитьОбъект();
	ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное;
	ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	//////предназначено для работы на стороне сервера
	//////Профиль = Новый ИнтернетПочтовыйПрофиль;
	//////Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации; 
	//////Профиль.АдресСервераSMTP = "mail.part-kom.ru";        
	//////Профиль.ПользовательSMTP = "1ctrade83@part-kom.ru";//"robot_1c";
	//////Профиль.ПарольSMTP = "7ygv1QAZ!";//"hdhj87KKsh";        
	//////Профиль.ПортSMTP = 25;
	//////
	//////Письмо = Новый ИнтернетПочтовоеСообщение;
	//////Письмо.Получатели.Добавить(СтруктураНовогоПисьма.Кому); 
	//////Письмо.Отправитель.Адрес = "Pushkin-DS@part-kom.ru";
	//////Письмо.Тема = СтруктураНовогоПисьма.Тема;
	//////Письмо.Тексты.Добавить(СтруктураНовогоПисьма.Тело);
	//////Если Вложение.Количество() > 0 тогда
	//////	Письмо.Вложения.Добавить(Вложение.Получить[0]);
	//////КонецЕсли;
	//////Почта = Новый ИнтернетПочта;
	//////Почта.Подключиться(Профиль);
	//////Почта.Послать(Письмо);
	//////Почта.Отключиться();
																			
	Возврат Отказ;
КонецФункции



