Перем ПланОбмена;
Перем ПланОбмена_Имя;
Перем узел_отправитель;
Перем узел_получатель;

Перем СоставПланаОбмена;
Перем список_расчетных_реквизитов_шапки;
Перем список_расчетных_реквизитов_тч;

Перем Квитанция_Спецификация;
Перем Квитанция_Спецификация_Количество;
Перем Квитанция_МаскаИмениФайла;
Перем Квитанция_номер_строки_данных_шапки;

Перем Отказ_МаскаИмениФайла;

Перем РазделительВСтроке;
Перем МаксимальноеКоличествоПопыток;
Перем МаксимальноеКоличествоОбъектовВПакетеВыгрузки;

Перем пар_МассивСсылокРазличныхВидов_Дубль;

Перем мКэшРеквизитовОбъектов;
Перем мМаксимальноеЧислоСтрокКэша;

Перем СоединениеSQL_2;
Перем КомандаSQL_2;
Перем ВыборкаSQL_2;

// мясо
Процедура ВыгрузитьДанные() экспорт
	
	Подключение_к_SQL_серверу_2();
	
	ЗадатьПравилаИгры();
	Если НЕ ЗначениеЗаполнено(узел_отправитель) Тогда Возврат; КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(узел_получатель) Тогда Возврат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда Возврат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогДата) Тогда Возврат; КонецЕсли;
	
	ПолучитьПереченьОбъектовОбмена();
	Если СоставПланаОбмена.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СнятьСРегистрацииИзменения();
	
	СформироватьФайлыВыгрузки();
	
	ЗакрытьСеансПодключенияКSQL_2();
КонецПроцедуры
Функция ВыгрузитьДанныеПоЖеланию(пар_МассивСсылокРазличныхВидов, пар_ОпроситьСсылкиИзТЧ = Истина, пар_ОпроситьСсылкиИзРегПартий = Истина, пар_ОпроситьСсылкиИзРегПартийРазмещение = Истина) экспорт
	
	Результат = Новый Структура("Отказ, МассивДок",Истина,Новый ТаблицаЗначений);
	
	// для теста заполню массив на входе
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//   "ВЫБРАТЬ ПЕРВЫЕ 1
	//   |	ЗаказПоставщику.Ссылка КАК СЦылка
	//   |ИЗ
	//   |	Документ.РеализацияТоваровУслуг КАК ЗаказПоставщику
	//   |ГДЕ
	//   |	ЗаказПоставщику.НОМЕР = ""УГС00000306""
	//   |УПОРЯДОЧИТЬ ПО
	//   |	ЗаказПоставщику.Дата УБЫВ";
	//пар_МассивСсылокРазличныхВидов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СЦылка");
	Если пар_МассивСсылокРазличныхВидов.Количество() = 0 тогда
		Возврат Результат;
	КонецЕсли;
	
	Подключение_к_SQL_серверу_2();
	
	// определимся со структурой данных, участвующих в обмене
	ЗадатьПравилаИгры();
	Если НЕ ЗначениеЗаполнено(узел_отправитель) Тогда Возврат Результат; КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(узел_получатель) Тогда Возврат Результат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда Возврат Результат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогДата) Тогда Возврат Результат; КонецЕсли;
	ПолучитьПереченьОбъектовОбмена(Истина); 
	Если СоставПланаОбмена.Количество() = 0 Тогда Возврат Результат; КонецЕсли;
	
	// сюда соберем все найденные рекурсией ссылки
	Массив = Новый Массив;
	Для каждого эл из СоставПланаОбмена цикл
		Если СтрНайти(эл.ОбъектМетаданных_ПолноеИмя,"Документ") > 0 тогда
			Массив.Добавить(Тип("ДокументСсылка." + эл.ОбъектМетаданных_Имя));	
		КонецЕсли;
	КонецЦикла;
		
	пар_МассивСсылокРазличныхВидов_Дубль = Новый ТаблицаЗначений;
	пар_МассивСсылокРазличныхВидов_Дубль.Колонки.Добавить("СЦылка", Новый ОписаниеТипов(Массив));
	пар_МассивСсылокРазличныхВидов_Дубль.Колонки.Добавить("ТипВид", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	
	//Сообщить("Док на входе, шт + " + СокрЛП(пар_МассивСсылокРазличныхВидов.Количество()));
	ОбойтиДокументыРекурсией(пар_МассивСсылокРазличныхВидов);
	//Сообщить("Док на выходе, шт + " + СокрЛП(пар_МассивСсылокРазличныхВидов_Дубль.Количество()));
	Если пар_МассивСсылокРазличныхВидов_Дубль.Количество() = 0 тогда
		Возврат Результат;
	КонецЕсли;
	
	// определимся в каком порядке формировать файлы -> выкладывать в обмен
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тчПретендентовНаВыгрузку.СЦылка как сцылка,	
	|	тчПретендентовНаВыгрузку.типвид как типвид
	|поместить тчПретендентовНаВыгрузку
	|ИЗ 
	|	&тч как тчПретендентовНаВыгрузку
	|;
	|/////////////////////////////////////////
	|ВЫБРАТЬ 
	|	тчПретендентовНаВыгрузку.сцылка,
	|   тчПретендентовНаВыгрузку.типвид,
	|   естьNULL(тчПриоритеты.Приоритет, 100 ) КАК Приоритет,
	|   естьNULL(тчПриоритеты.Поток, 0 ) КАК Поток
	|ИЗ тчПретендентовНаВыгрузку КАК тчПретендентовНаВыгрузку
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
						|ВЫБРАТЬ
						|	ПриоритетВыгрузкиОбъектов.Объект,
						|	ПриоритетВыгрузкиОбъектов.Узел,
						|	ПриоритетВыгрузкиОбъектов.Приоритет,
						|	ПриоритетВыгрузкиОбъектов.Поток
						|ИЗ
						|	РегистрСведений.ПриоритетВыгрузкиОбъектов КАК ПриоритетВыгрузкиОбъектов
						|ГДЕ
						|	ПриоритетВыгрузкиОбъектов.Узел = &Узел
						|) КАК тчПриоритеты 
						| ПО тчПретендентовНаВыгрузку.типвид = тчПриоритеты.Объект
						
	|ГДЕ	тчПретендентовНаВыгрузку.СЦылка.Дата >=	&КрайняяДатаВыгрузкиДокументовИз1с8в1с7
	|УПОРЯДОЧИТЬ ПО					
	|	естьNULL(тчПриоритеты.Приоритет, 100 ),
	|	тчПретендентовНаВыгрузку.СЦылка.Дата,
	|	тчПретендентовНаВыгрузку.СЦылка";

	Запрос.УстановитьПараметр("тч", пар_МассивСсылокРазличныхВидов_Дубль);
	Запрос.УстановитьПараметр("Узел", узел_получатель);
	Запрос.УстановитьПараметр("КрайняяДатаВыгрузкиДокументовИз1с8в1с7", СДатыВключительно);	

	пар_МассивСсылокРазличныхВидов_Дубль = Запрос.Выполнить().Выгрузить(); //пар_МассивСсылокРазличныхВидов_Дубль.ВыбратьСтроку();
	
	Попытка 	
		
		// чтобы обеспечить автоработу на случай возникновения отказов, нужно запомнить, что хотел выгрузить пользователь
		Для каждого лДок из пар_МассивСсылокРазличныхВидов_Дубль цикл 
			ПланыОбмена.ЗарегистрироватьИзменения( узел_получатель, лДок.сцылка);
		КонецЦикла;
		
		СформироватьФайлыВыгрузки(пар_МассивСсылокРазличныхВидов_Дубль.ВыгрузитьКолонку("сЦылка"));
		
		Результат = Новый Структура("Отказ, МассивДок",Ложь,пар_МассивСсылокРазличныхВидов_Дубль);
	Исключение
		Результат = Новый Структура("Отказ, МассивДок",Истина,пар_МассивСсылокРазличныхВидов_Дубль);
	КонецПопытки;
	
	ЗакрытьСеансПодключенияКSQL_2();
	
	Возврат Результат;
КонецФункции
Процедура ОбойтиДокументыРекурсией(пар_Массив)
	
	мОснования  = Новый Массив;
	мОснования2 = Новый Массив;
	мОснования3 = Новый Массив;
	мОснования4 = Новый Массив;
	мОснованияN = Новый Массив;
	
	Для каждого лДок из пар_Массив цикл 
		
		//Сообщить("Док на входе = " + СокрлП(лДок));
		Если лДок = Неопределено тогда Продолжить;	КонецЕсли;
		Если НЕ ЗначениеЗаполнено(лДок) тогда Продолжить; КонецЕсли;
		л_ТипЗнчДокумента = ВходитВСоставПланаОбмена(лДок.Метаданные().Имя);
		Если НЕ ЗначениеЗаполнено(л_ТипЗнчДокумента) тогда Продолжить; КонецЕсли;
		
		лстр = пар_МассивСсылокРазличныхВидов_Дубль.Найти(лДок,"сцылка");
		Если лстр = Неопределено тогда
			лстр = пар_МассивСсылокРазличныхВидов_Дубль.Добавить();
			лстр.сцылка = лДок;
			лстр.типвид = л_ТипЗнчДокумента;
		КонецЕсли;
		
		мОснования.Очистить();
		мОснования2.Очистить();
		мОснования3.Очистить();
		мОснования4.Очистить();
		мОснованияN.Очистить();
		
		// 1. опросим источники (тч и проводки) на предмет ссылок
		Если 	  лстр.типвид = "Документ.КорректировкаЗаявкиПокупателя" тогда
			мОснования = ПолучитьТчДок(лстр.сцылка,"Товары","СтрокаЗаявки.Заявка","КорректировкаЗаявкиПокупателя");
			
		ИначеЕсли лстр.типвид = "Документ.ЗаказПоставщику" тогда
			мОснования = ПолучитьТчДок(лстр.сцылка,"Товары","СтрокаЗаявки.Заявка","ЗаказПоставщику");
			
		ИначеЕсли лстр.типвид = "Документ.КорректировкаЗаказаПоставщику" тогда
			мОснования  = ПолучитьТчДок(лстр.сцылка,"Товары","СтрокаЗаявки.Заявка","КорректировкаЗаказаПоставщику");
			мОснования2 = ПолучитьТчДок(лстр.сцылка,"Товары","СтрокаЗаявки.Заказ","КорректировкаЗаказаПоставщику");
			
		ИначеЕсли лстр.типвид = "Документ.ПоступлениеТоваровУслуг" тогда
			мОснования = ПолучитьТчДок(лстр.сцылка,"РазмещениеСтрокПрихода","СтрокаЗаявки.Заявка","ПоступлениеТоваровУслуг");        
			мОснования2 = ПолучитьТчДок(лстр.сцылка,"РазмещениеСтрокПрихода","СтрокаЗаявки.Заказ","ПоступлениеТоваровУслуг");    
			
		ИначеЕсли лстр.типвид = "Документ.ПеремещениеТоваров" тогда	
			мОснования  = ПолучитьТчДок(лстр.сцылка,"Товары","СтрокаЗаявки.Заявка","ПеремещениеТоваров");
			мОснования2 = ПолучитьТчДок(лстр.сцылка,"Товары","СтрокаЗаявки.Заказ","ПеремещениеТоваров");
			мОснования3 = ПолучитьТчДок(лстр.сцылка,"Товары","Поступление","ПеремещениеТоваров");
			
		ИначеЕсли лстр.типвид = "Документ.РеализацияТоваровУслуг" тогда
			мОснования  = ПолучитьТчДок(лстр.сцылка,"Товары","СтрокаЗаявки.Заявка","РеализацияТоваровУслуг");
			мОснования2 = ПолучитьТчДок(лстр.сцылка,"Товары","СтрокаЗаявки.Заказ","РеализацияТоваровУслуг");
			//мОснования3 = ПолучитьТчДок(лстр.сцылка,"Услуги","СтрокаЗаявки.Заявка","РеализацияТоваровУслуг");
			мОснования4 = ПолучитьПартииДок(лстр.сцылка);
			
		КонецЕсли;
		
		//Для каждого эл  из мОснования  цикл              			    КонецЦикла;                 // Сообщить("эл  = " + СокрлП(эл));	КонецЦикла;
		  Для каждого эл2 из мОснования2 цикл мОснования.Добавить(эл2); КонецЦикла;                 // Сообщить("эл2 = " + СокрлП(эл2)); КонецЦикла;
		  Для каждого эл3 из мОснования3 цикл мОснования.Добавить(эл3); КонецЦикла;                 // Сообщить("эл3 = " + СокрлП(эл3)); КонецЦикла;
		  Для каждого эл4 из мОснования4 цикл мОснования.Добавить(эл4); КонецЦикла;                 // Сообщить("эл4 = " + СокрлП(эл4)); КонецЦикла;
		
		// 2. не забудем посмотреть в шапку
		МетаданныеОбъекта = лДок.Метаданные();
		Если НЕ МетаданныеОбъекта.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
			элДокО = ОбщегоНазначения.ПолучитьЗначениеРеквизита(лстр.сцылка,"ДокументОснование"); //Сообщить("Основание = " + СокрлП(элДокО));
			Если НЕ элДокО = Неопределено и ЗначениеЗаполнено(элДокО) тогда
				мОснования.Добавить(элДокО);	
			КонецЕсли;
		КонецЕсли; 		
		
		// 3. после того, как собрали все ссылки по вх.док-ту -> проверим их, неповторяющиеся заберем для дальнейшего поиска
		Если мОснования.Количество() > 0 тогда
			Для каждого лДокО из мОснования Цикл
				
				Если лДокО = Неопределено тогда Продолжить;	КонецЕсли;
				Если НЕ ЗначениеЗаполнено(лДокО) тогда Продолжить; КонецЕсли;
				л_ТипЗнчДокумента = ВходитВСоставПланаОбмена(лДокО.Метаданные().Имя);
				Если НЕ ЗначениеЗаполнено(л_ТипЗнчДокумента) тогда Продолжить;	КонецЕсли;
				
				Если пар_МассивСсылокРазличныхВидов_Дубль.Найти(лДокО,"сцылка") = Неопределено тогда
					лстрN = пар_МассивСсылокРазличныхВидов_Дубль.Добавить();
					лстрN.сцылка = лДокО;
					лстрN.типвид = л_ТипЗнчДокумента;
					
					мОснованияN.Добавить(лДокО);
				КонецЕсли;
			КонецЦикла;
			
			Если мОснованияN.Количество() > 0 тогда
				ОбойтиДОкументыРекурсией(мОснованияN);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьТчДок(пар_ссылка, пар_тч, пар_что, пар_вид)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщикуТовары." + пар_что + " КАК ИскомаяСсылка
	|ИЗ
	|	Документ." + пар_вид + "." + пар_тч + " КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	| И НЕ ЗаказПоставщикуТовары." + пар_что + " есть NULL
	| И НЕ ЗаказПоставщикуТовары." + пар_что + " = ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка)
	| И НЕ ЗаказПоставщикуТовары." + пар_что + " = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	| И НЕ ЗаказПоставщикуТовары." + пар_что + " = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|";
	Запрос.УстановитьПараметр("Ссылка", пар_ссылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИскомаяСсылка");
КонецФункции
Функция ПолучитьПартииДок(пар_ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ПартииТоваровОбороты.СтрокаПрихода.Приход КАК ИскомаяСсылка
	 |ИЗ
	 |	РегистрНакопления.ПартииТоваров.Обороты(, , Регистратор, ) КАК ПартииТоваровОбороты
	 |ГДЕ
	 |	ПартииТоваровОбороты.Регистратор = &Регистратор
	 |  И НЕ ПартииТоваровОбороты.СтрокаПрихода.Приход есть NULL
	 |  И НЕ ПартииТоваровОбороты.СтрокаПрихода.Приход = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	 |  И НЕ ПартииТоваровОбороты.СтрокаПрихода.Приход = ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтПокупателя.ПустаяСсылка)
	 |  И НЕ ПартииТоваровОбороты.СтрокаПрихода.Приход = ЗНАЧЕНИЕ(Документ.ВводНачальныхОстатковПоРегиструТоварыНаСкладах.ПустаяСсылка)
	 |  И НЕ ПартииТоваровОбороты.СтрокаПрихода.Приход = ЗНАЧЕНИЕ(Документ.ОприходованиеТоваров.ПустаяСсылка)
	 |  И НЕ ПартииТоваровОбороты.СтрокаПрихода.Приход = ЗНАЧЕНИЕ(Документ.ПерестикеровкаПереоценка.ПустаяСсылка)
	 |"; 
	Запрос.УстановитьПараметр("Регистратор", пар_ссылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИскомаяСсылка");
КонецФункции
Процедура ЗадатьПравилаИгры() экспорт
	
	ПланОбмена_Имя = "ОбменПартКом83_77";
	ПланОбмена = ПланыОбмена[ПланОбмена_Имя]; 
	узел_отправитель = ПланОбмена.ЭтотУзел();
	узел_получатель = ПланОбмена.НайтиПоРеквизиту("Исходящий",Истина);
	Если НЕ ЗначениеЗаполнено(КаталогОбмена) тогда КаталогОбмена = "\\nng9-v-1c-07\ДляЗагрузкиОстатков\1c8_1c7\"; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КаталогДата) тогда КаталогДата = КаталогОбмена + "Copy_" + РазвернутьДатуВстроку(ТекущаяДата(),"_",Ложь) + "\"; КонецЕсли;
	РазделительВСтроке = "]IlI[";
	Если НЕ ЗначениеЗаполнено(Данные_ИмяФайла) тогда Данные_ИмяФайла = "1с8_" + РазделительВСтроке + "ВидОбъекта_" + РазделительВСтроке + "НомерОбъекта" + ".txt"; КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Квитанция_ИмяФайла) тогда Квитанция_ИмяФайла = СтрЗаменить(Данные_ИмяФайла,"1с8_","1с7_"); КонецЕсли;
	ЗаполнитьСпецификациюСтрокиКвитанции();
	Квитанция_МаскаИмениФайла = "1с7_*.txt";
	
	Отказ_МаскаИмениФайла = "!Отказ 1с7*.txt";
	
	МаксимальноеКоличествоПопыток = 3;
	
	Если НЕ ЗначениеЗаполнено(СДатыВключительно) тогда СДатыВключительно = Дата(2018,6,2,8,0,0) КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПоДатуВключительно) тогда ПоДатуВключительно = ТекущаяДата() КонецЕсли;
	
	список_расчетных_реквизитов_шапки = "";
	список_расчетных_реквизитов_тч = "";
	
	МаксимальноеКоличествоОбъектовВПакетеВыгрузки = РазмерПакета;
	//Если МаксимальноеКоличествоОбъектовВПакетеВыгрузки = 0 тогда
	//	Если Тест тогда
	//		МаксимальноеКоличествоОбъектовВПакетеВыгрузки = 10;
	//	Иначе
	//		МаксимальноеКоличествоОбъектовВПакетеВыгрузки = 100;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСпецификациюСтрокиКвитанции()
	
	Квитанция_Спецификация = Новый Соответствие;
	
	сч = Квитанция_Спецификация.Количество();
	Квитанция_Спецификация.Вставить("ШапкаСпецификация", сч);
	сч = Квитанция_Спецификация.Количество();
	Квитанция_Спецификация.Вставить("Ссылка", сч);
	сч = Квитанция_Спецификация.Количество();
	Квитанция_Спецификация.Вставить("ВерсияДанных", сч);
	сч = Квитанция_Спецификация.Количество();
	//////////Квитанция_Спецификация.Вставить("Номер", сч);
	//////////сч = Квитанция_Спецификация.Количество();
	//////////Квитанция_Спецификация.Вставить("Дата", сч);
	//////////сч = Квитанция_Спецификация.Количество();
	//////////Квитанция_Спецификация.Вставить("ПометкаУдаления", сч);
	//////////сч = Квитанция_Спецификация.Количество();
	//////////Квитанция_Спецификация.Вставить("Проведен", сч);
	
	Квитанция_Спецификация_Количество = Квитанция_Спецификация.Количество();
	Квитанция_номер_строки_данных_шапки = 2;

КонецПроцедуры
Процедура СнятьСРегистрацииИзменения()
	
	////// здесь читаем файл, являющийся ответом 1с7
	////// это ранее отправленная посылка из 1с8, которая в случае успешного завершения процесса обмена, была переименованна (смена префикса 1с8 на 1с7)
	////// поскольку содержимое посылки осталось неизменным, 
	////// следовательно строка, описывающая шапку, может служить источником данных об объекте
	////// а именно можем получить: Дата,Номер,УИД (Вид документа узнаем из имени файла)
	////// далее, по уид получаем ссылку, сверяем дату, номер
	////// если сходится, то снимаем с регистрации
	////// с целью обеспечения целостности данных, снятие с регистрации выполняется в транзакции опреденное количество раз
	////// и только после успешного завершения процесса, файл квитанции будет удален из каталога обмена
	////// в случае сбоя файл метится как ошибочный и выполняется рассылка на e-mail заинтересованным лицам, согласно настройкам
	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда	Возврат;	КонецЕсли;	
	СписокФайлов = НайтиФайлы(КаталогОбмена, Квитанция_МаскаИмениФайла);
	Если СписокФайлов.Количество() = 0 тогда Возврат; КонецЕсли;
	
	Для Каждого ФайлДляЗагрузки Из СписокФайлов Цикл
		
		ИмяФайлаДляЗагрузки = ФайлДляЗагрузки.Имя;
		ИмяФайлаДляЗагрузкиПолное = ФайлДляЗагрузки.ПолноеИмя;
		
		л_ТипЗнчДокумента = "";
		пар_ИмяФайла_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайлаДляЗагрузки,"_");	
		Если пар_ИмяФайла_МассивПодСтрок.Количество() = 3 тогда
			л_ТипЗнчДокумента = пар_ИмяФайла_МассивПодСтрок[1];
		Иначе
			Продолжить;	
		КонецЕсли;
		
		л_ТипЗнчДокумента = ВходитВСоставПланаОбмена(л_ТипЗнчДокумента);
		Если НЕ ЗначениеЗаполнено(л_ТипЗнчДокумента) тогда
			Продолжить;
		КонецЕсли;
		
		// проверим, что на данный момент документ повторно не ушел в обмен, т.е. снова зерегистрирован
		////////////ИмяФайлаДляВыгрузкиПолное = СтрЗаменить(ИмяФайлаДляЗагрузкиПолное,"1с7_","1с8_");
		////////////Если ФайлСуществует(ИмяФайлаДляВыгрузкиПолное) тогда
		////////////	Попытка
		////////////		УдалитьФайлы(ИмяФайлаДляЗагрузкиПолное);
		////////////	Исключение
		////////////		Продолжить;
		////////////	КонецПопытки;
		////////////КонецЕсли;
		
		// проверим, что на данный момент документ не находится в процессе загрузки в 1с7
		////////////ИмяФайлаПосылкиПолное = СтрЗаменить(ИмяФайлаДляЗагрузкиПолное,"1с7_","посылка_1с8_");
		////////////Если ФайлСуществует(ИмяФайлаПосылкиПолное) тогда
		////////////	Попытка
		////////////		УдалитьФайлы(ИмяФайлаДляЗагрузкиПолное);
		////////////	Исключение
		////////////		Продолжить;
		////////////	КонецПопытки;
		////////////КонецЕсли;
		
		// заберем файл в работу, исключив его из возможной выборки в параллельных сеансах
		ИмяФайлаДляЗагрузки_Изм = "квитанция_" + ИмяФайлаДляЗагрузки;
		ПолноеИмяФайлаДляЗагрузки_Изм = КаталогОбмена + ИмяФайлаДляЗагрузки_Изм;
		
		Попытка
			ПереместитьФайл(ИмяФайлаДляЗагрузкиПолное, ПолноеИмяФайлаДляЗагрузки_Изм);
			// примем подтверждение из 1с7 об успешном завершении процесса загрузки посылки
			Результат = ОбработатьКвитанцию(ПолноеИмяФайлаДляЗагрузки_Изм, ИмяФайлаДляЗагрузки_Изм);
			Работа_сФайлом(Результат.КодОшибки, ИмяФайлаДляЗагрузки_Изм, ИмяФайлаДляЗагрузки, Результат.ТекстОшибки);
		Исключение
			Продолжить;
		КонецПопытки;
			
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
	КонецЦикла;
	
КонецПроцедуры
Функция ОбработатьКвитанцию(пар_ПолноеИмяФайла, пар_ИмяФайла)
	
	// регистрацию снимаем пообъектно
	//<Данные>. 
	//Значением данного параметра может быть объект метаданных, объект, представляющий данные, хранимые в базе данных, такой как документ, элемент справочника, набор записей регистра и т. п., ссылка на объект базы данных, а также Неопределено.
	//Если указан объект метаданных, то записи регистрации изменений будут удалены для всех элементов данных, относящихся к указанному объекту метаданных. Объект метаданных должен входить в состав планов обмена всех узлов, указанных в первом параметре.
	//Например:
	//Спр = Справочники.Валюты.НайтиПоКоду("810");
	//Узел = ПланыОбмена.ПО1.НайтиПоКоду("Офис");
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Спр);
	
	Рез = Новый Структура("КодОшибки, ТекстОшибки, ОбработанУспешно", 4, "", Ложь);
	
	л_ТипЗнчДокумента = "";
	пар_ИмяФайла_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пар_ИмяФайла,"_");	
	Если пар_ИмяФайла_МассивПодСтрок.Количество() = 4 тогда
		л_ТипЗнчДокумента = пар_ИмяФайла_МассивПодСтрок[2];
	Иначе
		Рез.Вставить("ТекстОшибки","имя файла не соответствует формату");
		Возврат Рез;
	КонецЕсли;
	л_ТипЗнчДокумента = ВходитВСоставПланаОбмена(л_ТипЗнчДокумента);
	Если НЕ ЗначениеЗаполнено(л_ТипЗнчДокумента) тогда
		Рез.Вставить("КодОшибки", 2);
		Рез.Вставить("ОбработанУспешно", Ложь);
		Возврат Рез;
	КонецЕсли;
	
	Текст = "";
	Попытка
		ТекстовыйФайл = Новый ЧтениеТекста(пар_ПолноеИмяФайла, "windows-1251");
		Текст = ТекстовыйФайл.Прочитать();
		ТекстовыйФайл.Закрыть();
	Исключение
	КонецПопытки;
	
	ВсегоСтрок = СтрЧислоСтрок(Текст);
	Если ВсегоСтрок < Квитанция_номер_строки_данных_шапки тогда
		Рез.Вставить("ТекстОшибки","");  //Файл пуст
		Возврат Рез;
	КонецЕсли;
		
	л_стр = СтрПолучитьСтроку(Текст, Квитанция_номер_строки_данных_шапки) ;
	Если СтрНайти(л_стр,"ШапкаДанные") = 0 тогда
		Рез.Вставить("ТекстОшибки",""); //шапка не найдена
		Возврат Рез;
	КонецЕсли;
	
	Квитанция_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(л_стр, РазделительВСтроке);	
	
	Если Квитанция_МассивПодСтрок.Количество() < Квитанция_Спецификация_Количество тогда
		Рез.Вставить("ТекстОшибки","");  //шапка пуста
		Возврат Рез;
	КонецЕсли;
	
	л_УИД = Квитанция_МассивПодСтрок[Квитанция_Спецификация.Получить("Ссылка")];
	Если НЕ ЗначениеЗаполнено(л_УИД) тогда
		Рез.Вставить("ТекстОшибки","брак данных 1");
		Возврат Рез;
	КонецЕсли;
	
	л_ВерсияДанных = Квитанция_МассивПодСтрок[Квитанция_Спецификация.Получить("ВерсияДанных")];
	Если НЕ ЗначениеЗаполнено(л_ВерсияДанных) тогда
		Рез.Вставить("ТекстОшибки","брак данных 2");
		Возврат Рез;
	КонецЕсли;
	
	НайденнаяСсылкаНаДокумент = МенеджерОбъектаПоИмениТипа(л_ТипЗнчДокумента,л_УИД);
	
	т_ВерсияДанных = ОбщегоНазначения.ПолучитьЗначениеРеквизита(НайденнаяСсылкаНаДокумент,"ВерсияДанных");
	Если НЕ ЗначениеЗаполнено(т_ВерсияДанных) тогда
		Рез.Вставить("ТекстОшибки","не найдена ссылка");
		Возврат Рез;
	КонецЕсли;
	
	Если т_ВерсияДанных = л_ВерсияДанных тогда
			
		СчПопыток = 0;
		Записано = Ложь;
		Пока Не Записано Цикл
			СчПопыток = СчПопыток + 1;
			Если СчПопыток > МаксимальноеКоличествоПопыток тогда
				Прервать;
			КонецЕсли;
			Попытка
				//НачатьТранзакцию();
				ПланыОбмена.УдалитьРегистрациюИзменений( узел_получатель, НайденнаяСсылкаНаДокумент);
				//ЗафиксироватьТранзакцию();
				
				НайтиИуничтожитьПродублированныеФайлыВыгрузки(пар_ИмяФайла,л_ВерсияДанных);
				
				// внесу свои 5 копеек в логирование обмена
				ЛогироватьВыгрузку(л_УИД, л_ВерсияДанных, 8, СокрЛП(НайденнаяСсылкаНаДокумент));
				
				
				Записано = Истина;
			Исключение
				//ОтменитьТранзакцию();
			КонецПопытки;
		КонецЦикла;  
		
		Если Записано тогда
			Рез.Вставить("КодОшибки", 1);
			Рез.Вставить("ОбработанУспешно", Истина);
		Иначе
			Рез.Вставить("ТекстОшибки","превышено количество попыток записи");
		КонецЕсли;
		
	Иначе
		
		// если обнаружено, что 'за время в пути собачка подросла', 
		// то с регистрации объект не снимаем, а файл квитанции просто поместим в архив
		// для чего отрапартуем об успешном завершении процесса
		
		Рез.Вставить("КодОшибки", 1);
		Рез.Вставить("ОбработанУспешно", Истина);
		
	КонецЕсли;
		
	Возврат Рез;
КонецФункции
Процедура НайтиИуничтожитьПродублированныеФайлыВыгрузки(пар_ИмяФайла,пар_ВерсияДанных = "") экспорт
	
	//вскрывать файл чтобы сравнить версию объекта смысла нет, т.к.
	//если в квитанции версия совпала с версией объекта,
	//значит он не претерпел измененений за время обмена,
	//значит в каталогах выгрузки м/б только либо файлы с той же версией либо с версией более старой
	
	имя_искомой_посылки = СтрЗаменить(пар_ИмяФайла,"квитанция_1с7_","1с8_");
	
	возможные_места_дислокации = Новый Массив;
	возможные_места_дислокации.Добавить("\\nng9-v-1c-07\ДляЗагрузкиОстатков\1c8_1c7\");
	возможные_места_дислокации.Добавить("\\nng9-v-1c-07\ДляЗагрузкиОстатков\1c8_1c7\Fast\");
	возможные_места_дислокации.Добавить("\\nng9-v-1c-07\ДляЗагрузкиОстатков\1c8_1c7\StPetersburg\");
	возможные_места_дислокации.Удалить(возможные_места_дислокации.Найти(КаталогОбмена));
	
	Для каждого л_кат из возможные_места_дислокации цикл
		
		имя_искомой_посылки_полное = л_кат + имя_искомой_посылки;
		
		Если ФайлСуществует(имя_искомой_посылки_полное) тогда
			Попытка
				УдалитьФайлы(имя_искомой_посылки_полное);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры
Процедура СформироватьФайлыВыгрузки(пар_Массив = "")
	
	сч = 0;
	
	ВыборкаИзменений =  пар_Массив;
	Если НЕ ЗначениеЗаполнено(ВыборкаИзменений) тогда
		ВыборкаИзменений = ПолучитьПакетИзмененийДляУзлаПолучателяЗапросомСУчетомПриоритетаПоВидамОбъектов();
	КонецЕсли;

	Для Каждого ЭлементМассива из ВыборкаИзменений Цикл
		
		сч = сч + 1;
		
		Данные = ЭлементМассива;
		ТипДанныхДляВыгрузки = ТипЗнч(Данные);
		Если ТипДанныхДляВыгрузки = Тип("УдалениеОбъекта") тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийОбъектМетаданных = Данные.Метаданные();
		имя_для_поиска_соответствия  = ВидОбъектаМетаданныхОбмена(ТекущийОбъектМетаданных) + "." + ТекущийОбъектМетаданных.Имя;
		НайденнаяСтрока = СоставПланаОбмена.Найти(имя_для_поиска_соответствия, "ОбъектМетаданных_ПолноеИмя");
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		содержимое_файла = "";
		л_спецификация = "ВерсияДанных";
		л_строка = "";
		
		Если СтрНайти(НайденнаяСтрока.ОбъектМетаданных_ПолноеИмя,"Документ") > 0 тогда
			л_спецификация = л_спецификация + ",Номер,Дата,ПометкаУдаления,Проведен,";
		ИначеЕсли СтрНайти(НайденнаяСтрока.ОбъектМетаданных_ПолноеИмя,"Справочник") > 0 тогда
			л_спецификация = л_спецификация + ",Код,Наименование,ПометкаУдаления,";
		Иначе
			Продолжить;			
		КонецЕсли;
			
		л_шапочка_структура = НайденнаяСтрока.Реквизиты_Шапка;
		Для Каждого Элемент Из л_шапочка_структура Цикл
			л_спецификация = л_спецификация + Элемент.Ключ + ",";
		КонецЦикла;
		л_спецификация = Лев(л_спецификация,СтрДлина(л_спецификация)-1);
		
		тз_шапка = Запрос_ПолучитьЗначенияРеквизитовДокумента(Данные.Ссылка, имя_для_поиска_соответствия, л_спецификация);
		л_спецификация = "Ссылка," + л_спецификация;
		л_спецификация = СтрЗаменить(л_спецификация,",",РазделительВСтроке);
		
		Если тз_шапка.Количество() = 0 тогда
			Продолжить;
		КонецЕсли;
		л_шапочка_данные = тз_шапка[0];
		
		Данные_Ссылка_УникальныйИдентификатор = Данные.Ссылка.УникальныйИдентификатор();
		
		Если СтрНайти(НайденнаяСтрока.ОбъектМетаданных_ПолноеИмя,"Документ") > 0 тогда
			л_строка = 		   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(Данные_Ссылка_УникальныйИдентификатор,"Строка") + РазделительВСтроке +
							   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(л_шапочка_данные.ВерсияДанных,"Строка") + РазделительВСтроке +
							   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(л_шапочка_данные.Номер,"Строка") + РазделительВСтроке +
			                   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(л_шапочка_данные.Дата,"Дата") + РазделительВСтроке +
							   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(л_шапочка_данные.ПометкаУдаления,"Булево") + РазделительВСтроке +
							   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(л_шапочка_данные.Проведен,"Булево") + РазделительВСтроке;
							   
		ИначеЕсли СтрНайти(НайденнаяСтрока.ОбъектМетаданных_ПолноеИмя,"Справочник") > 0 тогда						   
			л_строка = 		   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(Данные_Ссылка_УникальныйИдентификатор,"Строка") + РазделительВСтроке +
							   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(л_шапочка_данные.ВерсияДанных,"Строка") + РазделительВСтроке +
							   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(л_шапочка_данные.Код,"Строка") + РазделительВСтроке +
			                   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(л_шапочка_данные.Наименование,"Строка") + РазделительВСтроке +
							   ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(л_шапочка_данные.ПометкаУдаления,"Булево") + РазделительВСтроке;
		КонецЕсли;
			
		Для Каждого Элемент из л_шапочка_структура цикл
			л_строка =  л_строка + ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(л_шапочка_данные[Элемент.Ключ], Элемент.Значение) + РазделительВСтроке;
		КонецЦикла;
		
		содержимое_файла =  "ШапкаСпецификация" + РазделительВСтроке + л_спецификация  + Символы.ПС +
							"ШапкаДанные" + РазделительВСтроке + Лев(л_строка,СтрДлина(л_строка)-СтрДлина(РазделительВСтроке));
							
		л_спецификация = "";
		л_строка = "";							
		
		л_структура = НайденнаяСтрока.Реквизиты_ТЧ;
		Для Каждого лтч Из л_структура Цикл
			
			л_тч_имя = лтч.Ключ;
			л_тч_структура = лтч.Значение;
			
			л_спецификация = "НомерСтроки,";
			Для Каждого Элемент Из л_тч_структура Цикл
				л_спецификация = л_спецификация + Элемент.Ключ + ","; 
			КонецЦикла;
			л_спецификация = Лев(л_спецификация,СтрДлина(л_спецификация)-1);
			
			тз_тч = Запрос_ПолучитьЗначенияРеквизитовДокумента(Данные.Ссылка, имя_для_поиска_соответствия+"."+л_тч_имя, л_спецификация);
			Если тз_тч.Количество() = 0 тогда
				Продолжить;
			КонецЕсли;
			                                                  
			содержимое_файла =  содержимое_файла + Символы.ПС + "СтрокаСпецификация" + л_тч_имя + РазделительВСтроке + СтрЗаменить(л_спецификация,",",РазделительВСтроке);
			
			л_строка = "";
			Для каждого стрдок из тз_тч цикл
			    л_строка = "СтрокаДанные" + л_тч_имя + РазделительВСтроке + Формат(стрдок.НомерСтроки, "ЧЦ=15; ЧДЦ=0; ЧГ=0") + РазделительВСтроке;
				Для Каждого лтчрекв из л_тч_структура цикл
					л_строка =  л_строка + ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(стрдок[лтчрекв.Ключ], лтчрекв.Значение) + РазделительВСтроке;	
				КонецЦикла;
				
			    содержимое_файла =  содержимое_файла + Символы.ПС + Лев(л_строка,СтрДлина(л_строка)-СтрДлина(РазделительВСтроке));
			КонецЦикла;
			
		КонецЦикла;
		
		Если СтрНайти(НайденнаяСтрока.ОбъектМетаданных_ПолноеИмя,"Документ") > 0 тогда					
			УложитьДанныеВТекстовыйФайлик(содержимое_файла, РазвернутьДатуВстроку(л_шапочка_данные.Дата,,Ложь),ТекущийОбъектМетаданных.Имя,л_шапочка_данные.Номер);
		ИначеЕсли СтрНайти(НайденнаяСтрока.ОбъектМетаданных_ПолноеИмя,"Справочник") > 0 тогда
			УложитьДанныеВТекстовыйФайлик(содержимое_файла, РазвернутьДатуВстроку(ТекущаяДата(),,Ложь),ТекущийОбъектМетаданных.Имя,л_шапочка_данные.Код);
		КонецЕсли;
		
		// внесу свои 5 копеек в логирование обмена
		ЛогироватьВыгрузку(Данные_Ссылка_УникальныйИдентификатор, л_шапочка_данные.ВерсияДанных, 4, СокрЛП(Данные.Ссылка));
		
		Попытка
			//НаборЗаписей = РегистрыСведений.ИсторияОбмена1с81с7.СоздатьНаборЗаписей();
			//НаборЗаписей.Записать();
			МенеджерЗаписи = РегистрыСведений.ИсторияОбмена1с81с7.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.УИД = СокрЛП(Данные_Ссылка_УникальныйИдентификатор);
			МенеджерЗаписи.Дт = ТекущаяДата();
			МенеджерЗаписи.Ссылка = Данные.Ссылка;
			МенеджерЗаписи.Ошибка = Ложь;
			МенеджерЗаписи.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьПакетИзмененийДляУзлаПолучателяЗапросомСУчетомПриоритетаПоВидамОбъектов()
	//по мотивам ОбменДаннымиКлиентСервер.ВыбратьПакетИзмененийДляУзлаОбменаНовое(вхУзелОбмена, вхНомерСообщения, вхМаксимальноеКоличество)
	
	Индекс = 0;
	МассивОбъектов = Новый Массив;
	КоличествоВыбираемых = МаксимальноеКоличествоОбъектовВПакетеВыгрузки;
	
	Пока КоличествоВыбираемых > 0 И Индекс < СоставПланаОбмена.Количество() Цикл 
		
		лСтрокаОбъектыМетаданных = СоставПланаОбмена.Получить(Индекс);
		
		Запрос_Текст = СформироватьТекстЗапросаПоЗарегистированнымОбъектам(лСтрокаОбъектыМетаданных.ОбъектМетаданных_ПолноеИмя);
		
		Запрос = Новый Запрос;
		Запрос.Текст = Запрос_Текст ;
		Запрос.УстановитьПараметр("Узел", узел_получатель);
		Если СтрНайти(лСтрокаОбъектыМетаданных.ОбъектМетаданных_ПолноеИмя,"Документ")  > 0 тогда
			//Запрос.УстановитьПараметр("КрайняяДатаВыгрузкиДокументовИз1с8в1с7", Константы.ДатаЗаявкиСоздаютсяВ83.Получить());
			//Запрос.УстановитьПараметр("КрайняяДатаВыгрузкиДокументовИз1с8в1с7", Дата(2018,6,2,8,0,0));
			Запрос.УстановитьПараметр("КрайняяДатаВыгрузкиДокументовИз1с8в1с7", СДатыВключительно);
			Запрос.УстановитьПараметр("КрайняяДатаВыгрузкиДокументовИз1с8в1с7_К", ПоДатуВключительно);
			Если ЗначениеЗаполнено(ПроблемныйДокДляТочечнойВыгрузки) тогда
				Запрос.УстановитьПараметр("ПроблемныйДок",ПроблемныйДокДляТочечнойВыгрузки);
			КонецЕсли;
		ИначеЕсли СтрНайти(лСтрокаОбъектыМетаданных.ОбъектМетаданных_ПолноеИмя,"Справочник")  > 0 тогда
			Запрос.УстановитьПараметр("СтрП", "");
		КонецЕсли;
		Запрос.УстановитьПараметр("ТекДт", ТекущаяДата()+1);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			МассивОбъектов.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		КоличествоВыбираемых = КоличествоВыбираемых - Выборка.Количество();
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат МассивОбъектов;
КонецФункции
Функция СформироватьТекстЗапросаПоЗарегистированнымОбъектам(пар_ВидОбъекта)
	
		Запрос_Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсторияОбмена1с81с7.Ссылка КАК сЦылка
			|ПОМЕСТИТЬ ОШИБКИ
			|ИЗ
			|	РегистрСведений.ИсторияОбмена1с81с7 КАК ИсторияОбмена1с81с7
			|ГДЕ
			|	ИсторияОбмена1с81с7.Ошибка = ИСТИНА И
			|	ИсторияОбмена1с81с7.Ссылка ССЫЛКА " + СокрЛП(пар_ВидОбъекта) + "
			|;
			|////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияОбмена1с81с7.Ссылка КАК сЦылка,
			|	МАКСИМУМ(ИсторияОбмена1с81с7.Дт) КАК ДтПоследнейВыгрузки,
			|	СУММА(1) КАК Сч
			|ПОМЕСТИТЬ ИСТОРИЯ	
			|ИЗ
			|	РегистрСведений.ИсторияОбмена1с81с7 КАК ИсторияОбмена1с81с7
			|ГДЕ
			|	ИсторияОбмена1с81с7.Ссылка ССЫЛКА " + СокрЛП(пар_ВидОбъекта) + " И
			|	ИсторияОбмена1с81с7.Ошибка = ЛОЖЬ
			|СГРУППИРОВАТЬ ПО
			|	ИсторияОбмена1с81с7.Ссылка
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ПОМЕСТИТЬ КАГ
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ГоловнойКонтрагент.ПокупательИзДрБазы = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		
		Если СтрНайти(пар_ВидОбъекта,"Документ")  > 0 тогда
			
			Если НЕ ВыгружатьВсеЗареганные тогда
				
				ОтбиратьПоКАГ = Ложь;
				
				Если Врег(пар_ВидОбъекта) = Врег("Документ.ЗаявкаПокупателя") ИЛИ 
					 Врег(пар_ВидОбъекта) = Врег("Документ.КорректировкаЗаявкиПокупателя") ИЛИ 
				     Врег(пар_ВидОбъекта) = Врег("Документ.ЗаказПоставщику") ИЛИ 
					 Врег(пар_ВидОбъекта) = Врег("Документ.КорректировкаЗаказаПоставщику") ИЛИ 
					 Врег(пар_ВидОбъекта) = Врег("Документ.ПоступлениеТоваровУслуг") ИЛИ 
					 Врег(пар_ВидОбъекта) = Врег("Документ.РеализацияТоваровУслуг") ТОГДА
					 ОтбиратьПоКАГ = Истина;
				КонецЕсли;
				
				Если Врег(пар_ВидОбъекта) = Врег("Документ.ЗаказПоставщику") или
					 Врег(пар_ВидОбъекта) = Врег("Документ.КорректировкаЗаказаПоставщику") тогда
					 
					Запрос_Текст = Запрос_Текст +
					"ВЫБРАТЬ
					|	ЗаказПоставщику.Ссылка
					|ПОМЕСТИТЬ ЗИ
					|ИЗ
					|	" + СокрЛП(пар_ВидОбъекта) + ".Изменения КАК ЗаказПоставщику
					|ГДЕ
					|	ЗаказПоставщику.Узел = &Узел И ЗаказПоставщику.Ссылка.Дата >= &КрайняяДатаВыгрузкиДокументовИз1с8в1с7 И ЗаказПоставщику.Ссылка.Дата <= &КрайняяДатаВыгрузкиДокументовИз1с8в1с7_К
					| " + ?(ЗначениеЗаполнено(ПроблемныйДокДляТочечнойВыгрузки)," И ЗаказПоставщику.Ссылка = &ПроблемныйДок","  И (НЕ ЗаказПоставщику.Ссылка В (ВЫБРАТЬ сЦылка ИЗ ОШИБКИ)) ") + "
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ЗаказПоставщикуТовары.Ссылка
					|ПОМЕСТИТЬ Питер	
					|ИЗ
					|	" + СокрЛП(пар_ВидОбъекта) + ".Товары КАК ЗаказПоставщикуТовары
					|ГДЕ
					|	ЗаказПоставщикуТовары.Ссылка В
					|			(ВЫБРАТЬ
					|				ЗИ.Ссылка
					|			ИЗ
					|				ЗИ)
					|	И ( ЕСТЬNULL(ЗаказПоставщикуТовары.СтрокаЗаявки.ПоследняяКорректировка.Контрагент, ЗаказПоставщикуТовары.СтрокаЗаявки.Заявка.Контрагент) В
					|			(ВЫБРАТЬ
					|				КАГ.Ссылка
					|			ИЗ
					|				КАГ)
					|		ИЛИ  
					|		ЗаказПоставщикуТовары.Ссылка.Контрагент В
					|			(ВЫБРАТЬ
					|				КАГ.Ссылка
					|			ИЗ
					|				КАГ)
					|				
					|	   )
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ ПЕРВЫЕ " + Формат(МаксимальноеКоличествоОбъектовВПакетеВыгрузки, "ЧН=; ЧГ=") + "
					|	ЗИ.Ссылка
					|ИЗ
					|	ЗИ КАК ЗИ
					|		ЛЕВОЕ СОЕДИНЕНИЕ ИСТОРИЯ КАК ИСТОРИЯ
					|		ПО ЗИ.Ссылка = ИСТОРИЯ.сЦылка
					|ГДЕ
					|	" + ?(Питер,""," НЕ ") + "ЗИ.Ссылка В
					|			(ВЫБРАТЬ
					|				Питер.Ссылка
					|			ИЗ
					|				Питер)
					|
					|УПОРЯДОЧИТЬ ПО
					|	ЕСТЬNULL(ИСТОРИЯ.Сч, 0),
					|	ЗИ.Ссылка.Дата,
					|	ЗИ.Ссылка.Номер";
					 
				ИначеЕсли Врег(пар_ВидОбъекта) = Врег("Документ.ПоступлениеТоваровУслуг") тогда
					
					Запрос_Текст = Запрос_Текст +
					"ВЫБРАТЬ
					|	ЗаказПоставщику.Ссылка
					|ПОМЕСТИТЬ ЗИ
					|ИЗ
					|	" + СокрЛП(пар_ВидОбъекта) + ".Изменения КАК ЗаказПоставщику
					|ГДЕ
					|	ЗаказПоставщику.Узел = &Узел И ЗаказПоставщику.Ссылка.Дата >= &КрайняяДатаВыгрузкиДокументовИз1с8в1с7 И ЗаказПоставщику.Ссылка.Дата <= &КрайняяДатаВыгрузкиДокументовИз1с8в1с7_К
					| " + ?(ЗначениеЗаполнено(ПроблемныйДокДляТочечнойВыгрузки)," И ЗаказПоставщику.Ссылка = &ПроблемныйДок","  И (НЕ ЗаказПоставщику.Ссылка В (ВЫБРАТЬ сЦылка ИЗ ОШИБКИ)) ") + "
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка
					|ПОМЕСТИТЬ Питер
					|ИЗ
					|	" + СокрЛП(пар_ВидОбъекта) + ".РазмещениеСтрокПрихода КАК ПоступлениеТоваровУслугРазмещениеСтрокПрихода
					|ГДЕ
					|	ПоступлениеТоваровУслугРазмещениеСтрокПрихода.Ссылка В
					|			(ВЫБРАТЬ
					|				ЗИ.Ссылка
					|			ИЗ
					|				ЗИ)
					|	И ЕСТЬNULL(ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.ПоследняяКорректировка.Контрагент, ПоступлениеТоваровУслугРазмещениеСтрокПрихода.СтрокаЗаявки.Заявка.Контрагент) В
					|			(ВЫБРАТЬ
					|				КАГ.Ссылка
					|			ИЗ
					|				КАГ)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ ПЕРВЫЕ " + Формат(МаксимальноеКоличествоОбъектовВПакетеВыгрузки, "ЧН=; ЧГ=") + "
					|	ЗИ.Ссылка
					|ИЗ
					|	ЗИ КАК ЗИ
					|		ЛЕВОЕ СОЕДИНЕНИЕ ИСТОРИЯ КАК ИСТОРИЯ
					|		ПО ЗИ.Ссылка = ИСТОРИЯ.сЦылка
					|ГДЕ
					|	" + ?(Питер,""," НЕ ") + "ЗИ.Ссылка В
					|			(ВЫБРАТЬ
					|				Питер.Ссылка
					|			ИЗ
					|				Питер)
					|
					|УПОРЯДОЧИТЬ ПО
					|	ЕСТЬNULL(ИСТОРИЯ.Сч, 0),
					|	ЗИ.Ссылка.Дата,
					|	ЗИ.Ссылка.Номер";
					
				Иначе
				
					Запрос_Текст = Запрос_Текст +
					"ВЫБРАТЬ ПЕРВЫЕ " + Формат(МаксимальноеКоличествоОбъектовВПакетеВыгрузки, "ЧН=; ЧГ=") + "
					|	Т.Ссылка
					|ИЗ
					|" + СокрЛП(пар_ВидОбъекта) + ".Изменения КАК Т ЛЕВОЕ СОЕДИНЕНИЕ ИСТОРИЯ КАК ИСТОРИЯ ПО Т.Ссылка = ИСТОРИЯ.сЦылка
					|ГДЕ
					|	Т.Узел = &Узел И Т.Ссылка.Дата >= &КрайняяДатаВыгрузкиДокументовИз1с8в1с7 И Т.Ссылка.Дата <= &КрайняяДатаВыгрузкиДокументовИз1с8в1с7_К
					| " + ?(ОтбиратьПоКАГ И Питер, " И Т.Ссылка.Контрагент В (ВЫБРАТЬ Ссылка ИЗ	КАГ) " ,?(ОтбиратьПоКАГ И НЕ Питер, " И НЕ Т.Ссылка.Контрагент В (ВЫБРАТЬ Ссылка ИЗ	КАГ)"  , "")) +  "
					| " + ?(ЗначениеЗаполнено(ПроблемныйДокДляТочечнойВыгрузки)," И Т.Ссылка = &ПроблемныйДок","  И (НЕ Т.Ссылка В (ВЫБРАТЬ сЦылка ИЗ ОШИБКИ)) ") + "
					|УПОРЯДОЧИТЬ ПО
					|	естьNULL(ИСТОРИЯ.Сч,0),
					|	Т.Ссылка.Дата,
					|	Т.Ссылка.Номер
					|";
				
				КонецЕсли;
				
			Иначе
				
				Запрос_Текст = Запрос_Текст +
				"ВЫБРАТЬ ПЕРВЫЕ " + Формат(МаксимальноеКоличествоОбъектовВПакетеВыгрузки, "ЧН=; ЧГ=") + "
				|	Т.Ссылка
				|ИЗ
				|" + СокрЛП(пар_ВидОбъекта) + ".Изменения КАК Т ЛЕВОЕ СОЕДИНЕНИЕ ИСТОРИЯ КАК ИСТОРИЯ ПО Т.Ссылка = ИСТОРИЯ.сЦылка
				|ГДЕ
				|	Т.Узел = &Узел И Т.Ссылка.Дата >= &КрайняяДатаВыгрузкиДокументовИз1с8в1с7 И Т.Ссылка.Дата <= &КрайняяДатаВыгрузкиДокументовИз1с8в1с7_К 
				| " + ?(ЗначениеЗаполнено(ПроблемныйДокДляТочечнойВыгрузки)," И Т.Ссылка = &ПроблемныйДок","  И (НЕ Т.Ссылка В (ВЫБРАТЬ сЦылка ИЗ ОШИБКИ)) ") + "
				|УПОРЯДОЧИТЬ ПО
				|	естьNULL(ИСТОРИЯ.Сч,0),
				|	Т.Ссылка.Дата,
				|	Т.Ссылка.Номер
				|";
				
			КонецЕсли;
			
			
		ИначеЕсли СтрНайти(пар_ВидОбъекта,"Справочник")  > 0 тогда
			
			Запрос_Текст = Запрос_Текст +
			"ВЫБРАТЬ ПЕРВЫЕ " + Формат(МаксимальноеКоличествоОбъектовВПакетеВыгрузки, "ЧН=; ЧГ=") + "
			|	Т.Ссылка
			|ИЗ
			|" + СокрЛП(пар_ВидОбъекта) + ".Изменения КАК Т ЛЕВОЕ СОЕДИНЕНИЕ ИСТОРИЯ КАК ИСТОРИЯ ПО Т.Ссылка = ИСТОРИЯ.сЦылка
			|ГДЕ
			|	Т.Узел = &Узел И (НЕ Т.Ссылка.Код = &СтрП) И (НЕ Т.Ссылка В (ВЫБРАТЬ сЦылка ИЗ ОШИБКИ))
			|УПОРЯДОЧИТЬ ПО
			|	естьNULL(ИСТОРИЯ.Сч,0),
			|	Т.Ссылка";
			
		КонецЕсли;
		
		//Сообщить(Запрос_Текст);
		
		Возврат Запрос_Текст;
КонецФункции
Функция Запрос_ПолучитьЗначенияРеквизитовДокумента(пар_Ссылка, пар_имя, пар_что = "*")
	
	Запрос = Новый Запрос;
	Запрос_Текст = " ВЫБРАТЬ " + пар_что + " ИЗ " + пар_имя + " ГДЕ Ссылка = &сЦылка";
	
	//===========================================================================================================================
	
	Если СтрНайти(пар_имя, "РазмещениеСтрокПрихода")> 0 тогда 
		
		Запрос_Текст = 
		"ВЫБРАТЬ
		|	Размещение.НомерСтроки,
		|	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Номенклатура, Размещение.Номенклатура) КАК Номенклатура,
		|	Размещение.СтрокаПрихода,
		|	Размещение.СтрокаЗаявки,
		|	ЕСТЬNULL(Размещение.СтрокаЗаявки.IDSite, """") КАК ПоступлениеТоваровУслуг_ID_Site,
		|	Размещение.Количество,
		|	ЕСТЬNULL(Размещение.СтрокаЗаявки.Заявка, ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка)) КАК ПоступлениеТоваровУслуг_Заявка,
		|	ЕСТЬNULL(ЗаявкаПокупателяТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ПоступлениеТоваровУслуг_НоменклатураЗаявки,
		|	ЕСТЬNULL(Размещение.СтрокаЗаявки.ПоследняяКорректировка, ЗНАЧЕНИЕ(Документ.КорректировкаЗаявкиПокупателя.ПустаяСсылка)) КАК ПоступлениеТоваровУслуг_ПоследняяКорректировка,
		|	ЕСТЬNULL(Размещение.СтрокаЗаявки.Заказ, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ПоступлениеТоваровУслуг_Заказ
		|ПОМЕСТИТЬ РазмещениеДок
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.РазмещениеСтрокПрихода КАК Размещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
		|		ПО Размещение.СтрокаЗаявки = ЗаявкаПокупателяТовары.СтрокаЗаявки
		|		левое СОЕДИНЕНИЕ 
		|						(ВЫБРАТЬ
		|							ПоступлениеТоваровУслугТовары.СтрокаПрихода,
		|							МАКСИМУМ(ПоступлениеТоваровУслугТовары.Номенклатура) КАК Номенклатура
		|						ИЗ
		|							Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|						ГДЕ
		|							ПоступлениеТоваровУслугТовары.Ссылка = &сЦылка
		|
		|						СГРУППИРОВАТЬ ПО
		|							ПоступлениеТоваровУслугТовары.СтрокаПрихода)		 
		|		   КАК ПоступлениеТоваровУслугТовары
		|		ПО Размещение.СтрокаПрихода = ПоступлениеТоваровУслугТовары.СтрокаПрихода
		|ГДЕ
		|	Размещение.Ссылка = &сЦылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КорректировкаЗаявкиПокупателяТовары.Ссылка КАК КорректировкаДок,
		|	КорректировкаЗаявкиПокупателяТовары.Номенклатура,
		|	КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки
		|ПОМЕСТИТЬ КорректировкИ
		|ИЗ
		|	Документ.КорректировкаЗаявкиПокупателя.Товары КАК КорректировкаЗаявкиПокупателяТовары
		|ГДЕ
		|	КорректировкаЗаявкиПокупателяТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				РазмещениеДок.ПоступлениеТоваровУслуг_ПоследняяКорректировка
		|			ИЗ
		|				РазмещениеДок)
		|	И КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки В
		|			(ВЫБРАТЬ
		|				РазмещениеДок.СтрокаЗаявки
		|			ИЗ
		|				РазмещениеДок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазмещениеДок.НомерСтроки,
		|	РазмещениеДок.Номенклатура,
		|	РазмещениеДок.СтрокаПрихода,
		|	РазмещениеДок.СтрокаЗаявки,
		|	РазмещениеДок.Количество,
		|	РазмещениеДок.ПоступлениеТоваровУслуг_ID_Site,
		|	РазмещениеДок.ПоступлениеТоваровУслуг_Заявка,
		|	РазмещениеДок.ПоступлениеТоваровУслуг_ПоследняяКорректировка,
		|	РазмещениеДок.ПоступлениеТоваровУслуг_Заказ,
		|	ЕСТЬNULL(КорректировкИ.Номенклатура, РазмещениеДок.ПоступлениеТоваровУслуг_НоменклатураЗаявки) КАК ПоступлениеТоваровУслуг_НоменклатураЗаявки,
		|	ВЫБОР 
		|	    когда НЕ РазмещениеДок.ПоступлениеТоваровУслуг_Заявка = ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка) тогда 
		|			ВЫБОР
		|				КОГДА РазмещениеДок.Номенклатура = ЕСТЬNULL(КорректировкИ.Номенклатура, РазмещениеДок.ПоступлениеТоваровУслуг_НоменклатураЗаявки)
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ 
		|	    Иначе Ложь
		|	КОНЕЦ КАК ПоступлениеТоваровУслуг_ЭтоЗамена
		|ИЗ
		|	РазмещениеДок КАК РазмещениеДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкИ КАК КорректировкИ
		|		ПО РазмещениеДок.СтрокаЗаявки = КорректировкИ.СтрокаЗаявки
		|			И РазмещениеДок.ПоступлениеТоваровУслуг_ПоследняяКорректировка = КорректировкИ.КорректировкаДок";
		
	ИначеЕсли (СтрНайти(пар_что, "РеализацияТоваровУслуг_ПартииТоваров") > 0) ИЛИ 
		      (СтрНайти(пар_что, "СписаниеТоваров_ПартииТоваров") > 0) ИЛИ 
			  (СтрНайти(пар_что, "ПерестикеровкаПереоценка_ПартииТоваров") > 0) ИЛИ
			  (СтрНайти(пар_что, "ВозвратТоваровПоставщику_ПартииТоваров") > 0) ИЛИ
			  (СтрНайти(пар_что, "ПоступлениеТоваровУслуг_ПартииТоваров") > 0) ИЛИ
			  (СтрНайти(пар_что, "ПереоценкаОстатковПоставщика_ПартииТоваров") > 0) тогда

				пар_что_вид_док = "РеализацияТоваровУслуг_ПартииТоваров";
				Если СтрНайти(пар_что, "СписаниеТоваров_ПартииТоваров") > 0 тогда
					пар_что_вид_док = "СписаниеТоваров_ПартииТоваров";
				ИначеЕсли СтрНайти(пар_что, "ВозвратТоваровПоставщику_ПартииТоваров") > 0 тогда
					пар_что_вид_док = "ВозвратТоваровПоставщику_ПартииТоваров";
				ИначеЕсли СтрНайти(пар_что, "ПерестикеровкаПереоценка_ПартииТоваров") > 0 тогда
					пар_что_вид_док = "ПерестикеровкаПереоценка_ПартииТоваров";
				ИначеЕсли СтрНайти(пар_что, "ПереоценкаОстатковПоставщика_ПартииТоваров") > 0 тогда
					пар_что_вид_док = "ПереоценкаОстатковПоставщика_ПартииТоваров";
				ИначеЕсли СтрНайти(пар_что, "ПоступлениеТоваровУслуг_ПартииТоваров") > 0 тогда
					пар_что_вид_док = "ПоступлениеТоваровУслуг_ПартииТоваров";
				КонецЕсли;
				
				Запрос_Текст = 
								"ВЫБРАТЬ
								|	ПартииТоваров.НомерСтрокиВДокументе КАК НомерСтроки,
								|	ПартииТоваров.ВнутреннееПеремещение КАК " + пар_что_вид_док + "_ВнутреннееПеремещение,
								|	ПартииТоваров.СтрокаПрихода КАК " + пар_что_вид_док + "_СтрокаПрихода,
								|	ПартииТоваров.Номенклатура КАК " + пар_что_вид_док + "_Номенклатура,
								|	ПартииТоваров.Склад КАК " + пар_что_вид_док + "_Склад,
								|	ПартииТоваров.Организация КАК " + пар_что_вид_док + "_Организация,
								|	ЕСТЬNULL(ПартииТоваров.СтрокаПрихода.НомерГТД, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК " + пар_что_вид_док + "_НомерГТД,
								|	ЕСТЬNULL(ПартииТоваров.СтрокаПрихода.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК " + пар_что_вид_док + "_СтранаПроисхождения,
								|	ПартииТоваров.ВидДвижения КАК " + пар_что_вид_док + "_ВидДвижения,
								
								|	ПартииТоваров.Количество КАК " + пар_что_вид_док + "_Количество,
								|	ВЫБОР
								|		КОГДА ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ПартииТоваров.Количество
								|		ИНАЧЕ ПартииТоваров.Количество*(-1)
								|	КОНЕЦ КАК " + пар_что_вид_док + "_КоличествоОборот,
								|	ВЫБОР
								|		КОГДА ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ПартииТоваров.Количество
								|		ИНАЧЕ 0
								|	КОНЕЦ КАК " + пар_что_вид_док + "_КоличествоПриход,
								|	ВЫБОР
								|		КОГДА ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ПартииТоваров.Количество*(-1)
								|		ИНАЧЕ 0
								|	КОНЕЦ КАК " + пар_что_вид_док + "_КоличествоРасход,
								
								|	ПартииТоваров.СуммаРубли КАК " + пар_что_вид_док + "_СуммаРубли,
								|	ВЫБОР
								|		КОГДА ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ПартииТоваров.СуммаРубли
								|		ИНАЧЕ ПартииТоваров.СуммаРубли*(-1)
								|	КОНЕЦ КАК " + пар_что_вид_док + "_СуммаРублиОборот,
								|	ВЫБОР
								|		КОГДА ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ПартииТоваров.СуммаРубли
								|		ИНАЧЕ 0
								|	КОНЕЦ КАК " + пар_что_вид_док + "_СуммаРублиПриход,
								|	ВЫБОР
								|		КОГДА ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ПартииТоваров.СуммаРубли*(-1)
								|		ИНАЧЕ 0
								|	КОНЕЦ КАК " + пар_что_вид_док + "_СуммаРублиРасход,
								
								|	ПартииТоваров.СуммаБезНДС КАК " + пар_что_вид_док + "_СуммаБезНДС,
								|	ВЫБОР
								|		КОГДА ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ПартииТоваров.СуммаБезНДС
								|		ИНАЧЕ ПартииТоваров.СуммаБезНДС*(-1)
								|	КОНЕЦ КАК " + пар_что_вид_док + "_СуммаБезНДСОборот,
								|	ВЫБОР
								|		КОГДА ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ПартииТоваров.СуммаБезНДС
								|		ИНАЧЕ 0
								|	КОНЕЦ КАК " + пар_что_вид_док + "_СуммаБезНДСПриход,
								|	ВЫБОР
								|		КОГДА ПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ПартииТоваров.СуммаБезНДС*(-1)
								|		ИНАЧЕ 0
								|	КОНЕЦ КАК " + пар_что_вид_док + "_СуммаБезНДСРасход
								
								|ИЗ
								|	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
								|ГДЕ
								|	ПартииТоваров.Регистратор = &сЦылка
								|
								|УПОРЯДОЧИТЬ ПО
								|	ПартииТоваров.НомерСтрокиВДокументе,
								|	ВидДвижения";
					
	КонецЕсли;
	
	доп_реквизит = "ВозвратТоваровПоставщику_КтоПроверил";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
	   //Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.КтоПроверил, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК " + доп_реквизит);
		Запрос_Текст =  СтрЗаменить(Запрос_Текст,доп_реквизит, "		
						|	ВЫБОР 
						|		КОГДА ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.ПризнакПроверен,ЛОЖЬ) = ИСТИНА ТОГДА ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.КтоПроверил, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
						|		ИНАЧЕ ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.КтоОтменилПроверку, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
						|	КОНЕЦ КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ВозвратТоваровПоставщику_КогдаПроверен";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.Период, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ВозвратТоваровПоставщику_ПризнакПроверен";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.ПризнакПроверен, Ложь) КАК " + доп_реквизит);
		
		Запрос_Текст = СтрЗаменить(Запрос_Текст," ГДЕ Ссылка = &сЦылка", "
		
																		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПроверкеДокументов.СрезПоследних(, ) КАК СведенияОПроверкеДокументовСрезПоследних
																		|		ПО Ссылка = СведенияОПроверкеДокументовСрезПоследних.Объект
																		|ГДЕ
																		|	Ссылка = &сЦылка
																		|" );
	КонецЕсли;
	
	//===========================================================================================================================	
	
	доп_реквизит = "ПоступлениеТоваровУслуг_КтоПроверил";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
	   //Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.КтоПроверил, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК " + доп_реквизит);
		Запрос_Текст =  СтрЗаменить(Запрос_Текст,доп_реквизит, "		
						|	ВЫБОР 
						|		КОГДА ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.ПризнакПроверен,ЛОЖЬ) = ИСТИНА ТОГДА ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.КтоПроверил, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
						|		ИНАЧЕ ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.КтоОтменилПроверку, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
						|	КОНЕЦ КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ПоступлениеТоваровУслуг_КогдаПроверен";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.Период, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ПоступлениеТоваровУслуг_ПризнакПроверен";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.ПризнакПроверен, Ложь) КАК " + доп_реквизит);
		
		Запрос_Текст = СтрЗаменить(Запрос_Текст," ГДЕ Ссылка = &сЦылка", "
		
																		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПроверкеДокументов.СрезПоследних(, ) КАК СведенияОПроверкеДокументовСрезПоследних
																		|		ПО Ссылка = СведенияОПроверкеДокументовСрезПоследних.Объект
																		|ГДЕ
																		|	Ссылка = &сЦылка
																		|" );
	КонецЕсли;
	
	//===========================================================================================================================	
	
	доп_реквизит = "РеализацияТоваровУслуг_КтоПроверил";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
       //Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.КтоПроверил, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК " + доп_реквизит);
		Запрос_Текст =  СтрЗаменить(Запрос_Текст,доп_реквизит, "		
						|	ВЫБОР 
						|		КОГДА ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.ПризнакПроверен,ЛОЖЬ) = ИСТИНА ТОГДА ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.КтоПроверил, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
						|		ИНАЧЕ ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.КтоОтменилПроверку, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
						|	КОНЕЦ КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "РеализацияТоваровУслуг_КогдаПроверен";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.Период, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "РеализацияТоваровУслуг_ПризнакПроверен";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СведенияОПроверкеДокументовСрезПоследних.ПризнакПроверен, Ложь) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "РеализацияТоваровУслуг_СчетФактураВыданный";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(Счета.СчФ, ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)) КАК " + доп_реквизит);
		Запрос_Текст = СтрЗаменить(Запрос_Текст," ГДЕ Ссылка = &сЦылка", "
		
																		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПроверкеДокументов.СрезПоследних(, ) КАК СведенияОПроверкеДокументовСрезПоследних
																		|		ПО Ссылка = СведенияОПроверкеДокументовСрезПоследних.Объект
		
																		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
																		|			СчетФактураВыданный.ДокументОснование КАК Основание,
																		|			СчетФактураВыданный.Ссылка КАК СчФ
																		|		ИЗ
																		|			Документ.СчетФактураВыданный КАК СчетФактураВыданный
																		|		ГДЕ
																		|			СчетФактураВыданный.ДокументОснование = &сЦылка) КАК Счета
																		|		ПО Ссылка = Счета.Основание
																		
																		|ГДЕ
																		|	Ссылка = &сЦылка
																		|" );
	КонецЕсли;
	
	доп_реквизит = "РеализацияТоваровУслуг_ID_Site";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаЗаявки.IDSite, """") КАК " + доп_реквизит);
	КонецЕсли;
	доп_реквизит = "РеализацияТоваровУслуг_Заявка";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаЗаявки.Заявка, ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "ПеремещениеТоваров_ID_Site";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаЗаявки.IDSite, """") КАК " + доп_реквизит);
	КонецЕсли;
	доп_реквизит = "ПеремещениеТоваров_Заявка";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаЗаявки.Заявка, ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	//доп_реквизит = "ПеремещениеТоваров_Фирма_ТЧ";
	//Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
	//	Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК " + доп_реквизит);
	//КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "ЗаказПоставщику_ID_Site_изЗаявки";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаЗаявки.IDSite, """") КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ЗаказПоставщику_Заявка";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаЗаявки.Заявка, ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ЗаказПоставщику_ПрайсПоставщика";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаЗаявки.ПрайсПоставщика, ЗНАЧЕНИЕ(Справочник.ПрайсыПоставщиков.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "СчетФактураВыданный_ТорговаяТочка";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(Контрагент.ОсновнаяТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	доп_реквизит = "СчетФактураПолученный_ТорговаяТочка";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(Контрагент.ОсновнаяТорговаяТочка, ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "КорректировкаДолга_ВидДоговора";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(ДоговорКонтрагента.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "ОприходованиеТоваров_НомерГТД";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаПрихода.НомерГТД, """") КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ОприходованиеТоваров_СтранаПроисхождения";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаПрихода.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "ВозвратТоваровОтПокупателя_НомерГТД";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаПрихода.НомерГТД, """") КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ВозвратТоваровОтПокупателя_СтранаПроисхождения";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(СтрокаПрихода.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "Контрагенты_ЭтоГруппа";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЭтоГруппа КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_Родитель";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Родитель.ОсновнаяТорговаяТочка,Значение(Справочник.Контрагенты.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_VIP";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ОсновнаяТорговаяТочка.VIP,Ложь) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_ДатаСоздания";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ОсновнаяТорговаяТочка.ДатаСоздания,ДатаВремя(1,1,1,0,0,0)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_флВыгружать_Заказ_вДрБазу";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ОсновнаяТорговаяТочка.флВыгружать_Заказ_вДрБазу,Ложь) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_КПП";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ОсновнаяТорговаяТочка.КПП,"""") КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_МаршрутДоставки2";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ОсновнаяТорговаяТочка.МаршрутДоставки2, Значение(Справочник.МаршрутыДоставки.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_МаршрутДоставки3";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ОсновнаяТорговаяТочка.МаршрутДоставки3, Значение(Справочник.МаршрутыДоставки.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_МаршрутДоставки1";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ОсновнаяТорговаяТочка.МаршрутДоставки, Значение(Справочник.МаршрутыДоставки.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_РаботаетСОкномПоставщика";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ОсновнаяТорговаяТочка.РаботаетСОкномПоставщика, Ложь) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_Представление";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ОсновнаяТорговаяТочка.Представление,"""") КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "Контрагенты_ПрайсVMI";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ОсновнаяТорговаяТочка.ПрайсVMI,Значение(Справочник.ПрайсыПоставщиковVMI.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "ДоговорыКонтрагентов_ЭтоГруппа";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЭтоГруппа КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ДоговорыКонтрагентов_ВладелецКА";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Владелец,Значение(Справочник.Контрагенты.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ДоговорыКонтрагентов_ВладелецТТ";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Владелец.ОсновнаяТорговаяТочка,Значение(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ДоговорыКонтрагентов_ОсновнойДоговорКонтрагентаПродажа";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Владелец.ОсновнойДоговорКонтрагента,Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ДоговорыКонтрагентов_ОсновнойДоговорКонтрагентаЗакупка";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Владелец.ОсновнойДоговорКонтрагентаЗакупка,Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ДоговорыКонтрагентов_Ссылка77";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(_ДляПереносаДанных.Строка77, """") КАК " + доп_реквизит);
		Запрос_Текст = СтрЗаменить(Запрос_Текст," ГДЕ Ссылка = &сЦылка", "
		
																		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений._ДляПереносаДанных КАК _ДляПереносаДанных
																		|		ПО Ссылка = _ДляПереносаДанных.Объект
		
																		|ГДЕ
																		|	Ссылка = &сЦылка
																		|" );
		
	КонецЕсли;
		
	//===========================================================================================================================
	
	доп_реквизит = "ПереоценкаОстатковПоставщика_ПрайсПоставщикаVMIНаименование";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ПрайсПоставщикаVMI.Наименование,"""") КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ПереоценкаОстатковПоставщика_ПрайсПоставщикаVMIПроцентОтклонения";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ПрайсПоставщикаVMI.ПроцентОтклонения,0) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ПереоценкаОстатковПоставщика_НоменклатураПоставщикаНаименование";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(НоменклатураПоставщика.Наименование,"""") КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ПереоценкаОстатковПоставщика_НоменклатураПоставщикаНоменклатура";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(НоменклатураПоставщика.Номенклатура,ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "КорректировкаЗаказаПоставщику_ДокументОснование_Предыдущий";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(ОснованияКорректировки.ПредыдущаяКорректировка, ЗНАЧЕНИЕ(Документ.КорректировкаЗаказаПоставщику.ПустаяСсылка)) КАК " + доп_реквизит);
		Запрос_Текст = СтрЗаменить(Запрос_Текст," ГДЕ Ссылка = &сЦылка", "
		
																		|		ЛЕВОЕ СОЕДИНЕНИЕ (
																		
																								|ВЫБРАТЬ ПЕРВЫЕ 1
																								|	КорректировкаЗаказаПоставщику.Ссылка КАК ПредыдущаяКорректировка,
																								|	КорректировкаЗаказаПоставщику.ДокументОснование  КАК КорневойЗаказ
																								|ИЗ
																								|	Документ.КорректировкаЗаказаПоставщику КАК КорректировкаЗаказаПоставщику
																								|ГДЕ
																								|	КорректировкаЗаказаПоставщику.ДокументОснование = &ДокументОснование
																								|	И КорректировкаЗаказаПоставщику.Дата <= &ТекКорректировкаДата
																								|	И НЕ КорректировкаЗаказаПоставщику.Ссылка = &ТекКорректировка
																								|
																								|УПОРЯДОЧИТЬ ПО
																								|	КорректировкаЗаказаПоставщику.Номер УБЫВ
																								//|	КорректировкаЗаказаПоставщику.Дата УБЫВ,
																								//|	КорректировкаЗаказаПоставщику.Ссылка УБЫВ
																		
																		|						  ) КАК ОснованияКорректировки
																		|		ПО Ссылка.ДокументОснование = ОснованияКорректировки.КорневойЗаказ
		
																		|ГДЕ
																		|	Ссылка = &сЦылка
																		|" );
		
		ПармСсылки = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(пар_Ссылка,"ДокументОснование,Дата");
		
		Запрос.УстановитьПараметр("ДокументОснование",ПармСсылки.ДокументОснование);
		Запрос.УстановитьПараметр("ТекКорректировка",пар_Ссылка);
		Запрос.УстановитьПараметр("ТекКорректировкаДата",ПармСсылки.Дата);
		
		
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "ЗаявкаПокупателя_ПрайсПоставщика_Владелец";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ПрайсПоставщика.Владелец,ЗНАЧЕНИЕ(Справочник.ТорговыеТочки.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
			
	доп_реквизит = "ЗаявкаПокупателя_ПрайсПоставщика_Склад";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ПрайсПоставщика.Склад,ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
			
	доп_реквизит = "ЗаявкаПокупателя_ПрайсПоставщика_ОтдельныйЗаказ";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ПрайсПоставщика.ОтдельныйЗаказ,Ложь) КАК " + доп_реквизит);
	КонецЕсли;
			
	доп_реквизит = "ЗаявкаПокупателя_ПрайсПоставщика_ОтдельныйДокумент";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ПрайсПоставщика.ОтдельныйДокумент,Ложь) КАК " + доп_реквизит);
	КонецЕсли;
	
	доп_реквизит = "ЗаявкаПокупателя_ПрайсПоставщика_Наименование";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(ПрайсПоставщика.Наименование,"""") КАК " + доп_реквизит);
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "КорректировкаЗаявкиПокупателя_ДокументОснование_Предыдущий";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "ЕСТЬNULL(ОснованияКорректировки.ПредыдущаяКорректировка, ЗНАЧЕНИЕ(Документ.КорректировкаЗаявкиПокупателя.ПустаяСсылка)) КАК " + доп_реквизит);
		Запрос_Текст = СтрЗаменить(Запрос_Текст," ГДЕ Ссылка = &сЦылка", "
		
																		|		ЛЕВОЕ СОЕДИНЕНИЕ (
																		
																								|ВЫБРАТЬ ПЕРВЫЕ 1
																								|	КорректировкаЗаказаПоставщику.Ссылка КАК ПредыдущаяКорректировка,
																								|	КорректировкаЗаказаПоставщику.ДокументОснование  КАК КорневойЗаказ
																								|ИЗ
																								|	Документ.КорректировкаЗаявкиПокупателя КАК КорректировкаЗаказаПоставщику
																								|ГДЕ
																								|	КорректировкаЗаказаПоставщику.ДокументОснование = &ДокументОснование
																								|	И КорректировкаЗаказаПоставщику.Дата <= &ТекКорректировкаДата
																								|	И НЕ КорректировкаЗаказаПоставщику.Ссылка = &ТекКорректировка
																								|
																								|УПОРЯДОЧИТЬ ПО
																								|	КорректировкаЗаказаПоставщику.Номер УБЫВ
																								//|	КорректировкаЗаказаПоставщику.Дата УБЫВ,
																								//|	КорректировкаЗаказаПоставщику.Ссылка УБЫВ
																		
																		|						  ) КАК ОснованияКорректировки
																		|		ПО Ссылка.ДокументОснование = ОснованияКорректировки.КорневойЗаказ
		
																		|ГДЕ
																		|	Ссылка = &сЦылка
																		|" );
		
		ПармСсылки = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(пар_Ссылка,"ДокументОснование,Дата");
		
		Запрос.УстановитьПараметр("ДокументОснование",ПармСсылки.ДокументОснование);
		Запрос.УстановитьПараметр("ТекКорректировка",пар_Ссылка);
		Запрос.УстановитьПараметр("ТекКорректировкаДата",ПармСсылки.Дата);
		
		
	КонецЕсли;
	
	//===========================================================================================================================
	
	доп_реквизит = "доп_Номенклатура_Наименование";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Номенклатура.Наименование,"""") КАК " + доп_реквизит);
	КонецЕсли;
			
	доп_реквизит = "доп_Номенклатура_ПолноеНаименование";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Номенклатура.НаименованиеПолное,"""") КАК " + доп_реквизит);
	КонецЕсли;

	доп_реквизит = "доп_Номенклатура_Артикул";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Номенклатура.Артикул,"""") КАК " + доп_реквизит);
	КонецЕсли;
			
	доп_реквизит = "доп_Номенклатура_Изготовитель";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Номенклатура.Изготовитель,ЗНАЧЕНИЕ(Справочник.Изготовители.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
			
	доп_реквизит = "доп_Номенклатура_СтавкаНДС";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Номенклатура.СтавкаНДС,ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
			
	доп_реквизит = "доп_Номенклатура_ЕдиницаХраненияОстатков";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Номенклатура.ЕдиницаХраненияОстатков,ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК " + доп_реквизит);
	КонецЕсли;
			
	доп_реквизит = "доп_Номенклатура_Услуга";
	Если СтрНайти(Запрос_Текст,доп_реквизит) > 0 тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,доп_реквизит, "естьNULL(Номенклатура.Услуга,Ложь) КАК " + доп_реквизит);
	КонецЕсли;
	
	//===========================================================================================================================
	
	
	Запрос.Текст = Запрос_Текст;             //Сообщить(Запрос_Текст);
	
	Запрос.УстановитьПараметр("сЦылка", пар_Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
Функция ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(пар_знч, пар_вид = "Строка")
	пар_знч_стр = "";   
	
	Если НЕ ЗначениеЗаполнено(пар_знч) тогда
		Возврат пар_знч_стр;	
	КонецЕсли;
	
	Если пар_вид = "Строка" Тогда
		пар_знч_стр = СтрЗаменить(СокрЛП(пар_знч),Символы.ПС,"	");
		
	ИначеЕсли пар_вид = "Число" Тогда
		пар_знч_стр = Формат(пар_знч, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧГ=0");
		
	ИначеЕсли пар_вид = "Дата" Тогда
		пар_знч_стр = РазвернутьДатуВстроку(пар_знч);
		
	ИначеЕсли пар_вид = "Булево" Тогда
		пар_знч_стр = ?(пар_знч,"1","0");
		
	ИначеЕсли СтрНайти(пар_вид,"Справочник") > 0 Тогда
		
		пар_знч_стр = "";
		Если ТипЗнч(пар_знч) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			пар_знч_стр = ПолучитьUID77(пар_знч);
		Иначе
			пар_знч_стр = СокрЛП(пар_знч.УникальныйИдентификатор());	
		КонецЕсли;
		пар_знч_стр = пар_знч_стр + ";";
		
		пар_знч_Код = "";
		Если ТипЗнч(пар_знч) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			//пар_знч_Код = ОбщегоНазначения.ПолучитьЗначениеРеквизита(пар_знч,"НомерСчета");
			пар_знч_Код = ПолучитьЗначениеРеквизита(пар_знч,"НомерСчета");
		Иначе
			Если пар_знч.Метаданные().ДлинаКода > 0 тогда 
				//пар_знч_Код = СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(пар_знч,"Код"));
				пар_знч_Код = СокрЛП(ПолучитьЗначениеРеквизита(пар_знч,"Код"));
			КонецЕсли;
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(пар_знч_Код) тогда
		//	Возврат пар_знч_стр;	
		//КонецЕсли;
		
		пар_знч_стр = пар_знч_стр + пар_знч_Код + ";" +
									"Справочник." + пар_знч.Метаданные().Имя + ";" ; 
									//пар_вид + ";"; 
		
	ИначеЕсли СтрНайти(пар_вид,"Документ") > 0 Тогда
		
		
		
		ПараметрыСсылки = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(пар_знч,"Дата,Номер");
		
		Если НЕ ЗначениеЗаполнено(ПараметрыСсылки.Номер) тогда
			Возврат пар_знч_стр;	
		КонецЕсли;
			
		пар_знч_стр = СокрЛП(пар_знч.УникальныйИдентификатор()) + ";" + 
					  РазвернутьДатуВстроку(ПараметрыСсылки.Дата)  + ";" + 
					  СокрЛП(ПараметрыСсылки.Номер) + ";" + 
					  "Документ." + пар_знч.Метаданные().Имя + ";" ; 
					  //пар_вид + ";" ; 
					  //ТипЗнч(пар_знч) + ";" ; 
					  
					//Сообщить(пар_знч);			  
					//Сообщить(пар_вид);			  
					//Сообщить(ТипЗнч(пар_знч));
					//Сообщить(пар_знч.Метаданные().Имя);
					//Сообщить(пар_знч_стр);					  
					
					
	//ИначеЕсли пар_вид = "Уникальный идентификатор" Тогда
	//ИначеЕсли пар_вид = "Перечисление" Тогда
	Иначе
		пар_знч_стр = СокрЛП(пар_знч);
	КонецЕсли;
	
	Возврат пар_знч_стр;
КонецФункции
Функция ПолучитьUID77(пар_Договор)
	уид77 = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_ДляПереносаДанных.Строка77
	|ИЗ
	|	РегистрСведений._ДляПереносаДанных КАК _ДляПереносаДанных
	|ГДЕ
	|	_ДляПереносаДанных.Объект = &Объект";	
	Запрос.УстановитьПараметр("Объект", пар_Договор);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() > 0 тогда
		уид77 = СокрЛП(Рез[0].Строка77);
	Иначе
		уид77 = СокрЛП(пар_Договор.УникальныйИдентификатор());
	КонецЕсли;
		
	Возврат уид77;
КонецФункции
Процедура УложитьДанныеВТекстовыйФайлик(пар_что, пар_дт, пар_вид, пар_номер)
	
	ИмяВременногоФайлика = ПолучитьИмяВременногоФайла("txt");
	
    ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(пар_что);
	ТекстовыйДокумент.Записать(ИмяВременногоФайлика,"windows-1251"); //КодировкаТекста.ANSI
	
	ПолноеИмяФайла = Данные_ИмяФайла;
	ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла,РазделительВСтроке + "ВидОбъекта",пар_вид);
	ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла,РазделительВСтроке + "НомерОбъекта",пар_номер);
	ПолноеИмяФайла = КаталогОбмена + ПолноеИмяФайла;
	
	УдалитьФайлы(ПолноеИмяФайла);
	ПереместитьФайл(ИмяВременногоФайлика, ПолноеИмяФайла);
	
КонецПроцедуры

// монитор
Функция ЛогироватьВыгрузку(пар_УИД, пар_Версия, пар_Шаг, пар_Представление = "", пар_Комментарий = "") экспорт
	Отказ = "";
	
	лДтВрм = РазвернутьДатуВстроку(ТекущаяДата(),"",Истина);
	лДтВрм = Лев(лДтВрм,8) + " " + Сред(лДтВрм,9,2) + ":" + Сред(лДтВрм,11,2) + ":" + Прав(лДтВрм,2);
	
	Попытка
		КомандаSQL_2.CommandText =
								"INSERT INTO [dbo].[Guids_1C8_1C7_monitor]
								|           ([_id]
								|           ,[_vers]
								|           ,[_step]
								|           ,[_dt]
								|           ,[_view]
								|           ,[_com])
								|     VALUES
								|           ('"+ пар_УИД +"'
								|           ,'"+ пар_Версия +"'
								|           ,"+ пар_Шаг +"
								|           ,'" + лДтВрм + "'
								|           ,'" + пар_Представление + "'
								|           ,'" + пар_Комментарий + "')";
		   
		КомандаSQL_2.Execute();	
	Исключение
		Отказ = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Отказ;
КонецФункции
Функция Подключение_к_SQL_серверу_2() экспорт
	
	Успех = Истина;	
	
	Попытка
        СоединениеSQL_2  = Новый COMОбъект("ADODB.Connection");
        КомандаSQL_2     = Новый COMОбъект("ADODB.Command");
        ВыборкаSQL_2     = Новый COMОбъект("ADODB.RecordSet");
		
        //nng9-v-sq-07
        //sa
        //partkom83      
        
		Пользователь = "user1c";
		Пароль = "h8BFX4as";
		База = "PK_Trade09";
		Сервер = "srv1c-nn";
		
        СоединениеSQL_ConnectionString =
							            "driver={SQL Server};" +
							            "server="+Сервер+";"+
							            "uid="+Пользователь+";"+
							            "pwd="+Пароль+";"+
							            "database="+База+";";
										
        СоединениеSQL_2.ConnectionString = СоединениеSQL_ConnectionString;
		СоединениеSQL_2.ConnectionTimeout = 30;
        СоединениеSQL_2.CommandTimeout = 6000;
		
		СоединениеSQL_2.Open();
		КомандаSQL_2.ActiveConnection   = СоединениеSQL_2;
		
	Исключение
		Успех = Ложь;
	КонецПопытки;
	
	Возврат Успех;
КонецФункции	
Функция ЗакрытьСеансПодключенияКSQL_2() экспорт
	Успех = Истина;	
	Попытка 
		СоединениеSQL_2.Close();
	Исключение
		СоединениеSQL_2 = Неопределено;
	КонецПопытки;
	Возврат Успех;
КонецФункции
Процедура ЗапускМонитора() экспорт
	
#Если Клиент Тогда	
	ЗадатьПравилаИгры();
	Если НЕ ЗначениеЗаполнено(узел_отправитель) Тогда Возврат; КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(узел_получатель) Тогда Возврат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда Возврат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогДата) Тогда Возврат; КонецЕсли;
	
	ПолучитьПереченьОбъектовОбмена(Истина);
	Если СоставПланаОбмена.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	АнализФайловСОшибками();
#КонецЕсли	
КонецПроцедуры
Процедура ЗапускРегистрации() экспорт
#Если Клиент Тогда	
	ЗадатьПравилаИгры();
	Если НЕ ЗначениеЗаполнено(узел_отправитель) Тогда Возврат; КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(узел_получатель) Тогда Возврат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда Возврат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогДата) Тогда Возврат; КонецЕсли;
	
	ПолучитьПереченьОбъектовОбмена(Истина);
	Если СоставПланаОбмена.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ПринудительнаяРегистрацияЗаПериод();
#КонецЕсли	
КонецПроцедуры 
#Если Клиент Тогда	
Процедура АнализФайловСОшибками()
	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда	Возврат;	КонецЕсли;	
	СписокФайлов = НайтиФайлы(КаталогОбмена, Отказ_МаскаИмениФайла);
	Если СписокФайлов.Количество() = 0 тогда Возврат; КонецЕсли;
	
	ТЗ1 = Новый ТаблицаЗначений;
	ТЗ1.Колонки.Добавить("ВидДокумента",,"Тип/Вид объекта");
	ТЗ1.Колонки.Добавить("НомерДокумента",,"Номер/Код");
	ТЗ1.Колонки.Добавить("ИсточникОтказа");
	ТЗ1.Колонки.Добавить("ОписаниеОтказа");
	ТЗ1.Колонки.Добавить("РасшифровкаОтказа");
	ТЗ1.Колонки.Добавить("ИмяФайла");
	ТЗ1.Колонки.Добавить("Сч");
	
	Для Каждого ФайлДляЗагрузки Из СписокФайлов Цикл
		
		ИмяФайлаОтказа = ФайлДляЗагрузки.ИмяБезРасширения;
		
		м1 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяФайлаОтказа,"-");
		описаниеДок8 = м1[3];
		м2 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(описаниеДок8,"_");
		
		НоваяСтр = ТЗ1.Добавить();
		НоваяСтр.ВидДокумента   = ВходитВСоставПланаОбмена(СокрЛП(м2[1]));//СокрЛП(м2[1]);
		НоваяСтр.НомерДокумента = СокрЛП(м2[2]);
		НоваяСтр.ИсточникОтказа = СокрЛП(м1[1]);
		НоваяСтр.ОписаниеОтказа = СокрЛП(м1[2]);
		НоваяСтр.ИмяФайла = ФайлДляЗагрузки.ПолноеИмя;
		НоваяСтр.Сч = 1;
		
		//#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		//#КонецЕсли
	КонецЦикла;
	
	ТЗ1_Количество = ТЗ1.Количество();
	Если ТЗ1_Количество = 0 тогда
		Сообщить("inf: Отказов 1с7 не обнаружено");
		Возврат;
	КонецЕсли;
	
	ТЗ2 = ТЗ1.Скопировать();
	ТЗ2.Свернуть("ВидДокумента,ИсточникОтказа,ОписаниеОтказа","Сч");
	ТЗ2.Сортировать("ВидДокумента,Сч УБЫВ");
	
	ТЗ3 = ТЗ2.Скопировать();
	ТЗ3.Свернуть("ВидДокумента","Сч");
	ТЗ3.Сортировать("Сч УБЫВ");
	
	ТЗ4 = ТЗ2.Скопировать();
	ТЗ4.Свернуть("ВидДокумента,ИсточникОтказа","Сч");
	ТЗ3.Сортировать("Сч УБЫВ");
	
	счКвыгрузке = 0;
	счсччсчс = 0;
	Сообщить("inf: выявлено отказов = " + СокрЛП(ТЗ1_Количество) + ", где :");
	Для каждого стро из ТЗ3 цикл
		счсччсчс = счсччсчс + 1;
		
		строписи = "";
		Строки = ТЗ4.НайтиСтроки(Новый Структура("ВидДокумента",стро.ВидДокумента));
		Для каждого стрпп из Строки цикл
			строписи = строписи + " [" + стрпп.ИсточникОтказа + "] = " + СокрлП(стрпп.Сч) + ", ";
		КонецЦикла;
		
		счКвыгрузкеПоДоку = ВернутьКолЗареганныхКОбмену(стро.ВидДокумента);
		счКвыгрузке = счКвыгрузке + счКвыгрузкеПоДоку;
		
		Сообщить(СокрлП(счсччсчс) + ". [" + СокрлП(стро.ВидДокумента) + "] к выгрузке [" + СокрЛП(счКвыгрузкеПоДоку) + "] = " + СокрлП(стро.Сч)  + ", где " + строписи);
	КонецЦикла;
	Сообщить("inf: итого по док-ам с отказами зарегистрировано к выгрузке = " + СокрЛП(счКвыгрузке));
	
	Адрес = ТЗ2.ВыбратьСтроку("Укажите строку для детализации отказов");
	Если Адрес = Неопределено тогда
		
		//ТабличноеПоле1 = ТЗ2;
		//ЭлементыФормы.ТабличноеПоле1.СоздатьКолонки();
		
		Возврат;
	КонецЕсли;
	
	ТЗм = Новый ТаблицаЗначений;
	ТЗм.Колонки.Добавить("пп");
	ТЗм.Колонки.Добавить("Меню");
	
	ТЗм.Колонки.пп.Ширина = 5;
	ТЗм.Колонки.Меню.Ширина = 45;
	
	нс = ТЗм.Добавить(); нс.пп = 1; нс.меню = "Открыть детализированный список";
	нс = ТЗм.Добавить(); нс.пп = 2; нс.меню = "Снять с регистрации док-ты";
	нс = ТЗм.Добавить(); нс.пп = 3; нс.меню = "Зарегистрировать док-ты к выгрузке";
	нс = ТЗм.Добавить(); нс.пп = 4; нс.меню = "Удалить файлы с отказами";
	нс = ТЗм.Добавить(); нс.пп = 5; нс.меню = "Переместить в архив файлы с отказами";
	нс = ТЗм.Добавить(); нс.пп = 6; нс.меню = "Переименовать в файл-посылку из 1с8";
	нс = ТЗм.Добавить(); нс.пп = 7; нс.меню = "Переименовать в файл-квитанцию из 1с7";
	нс = ТЗм.Добавить(); нс.пп = 8; нс.меню = "Снять галку 'Сделано в 1с7'";
	нс = ТЗм.Добавить(); нс.пп = 9; нс.меню = "Вывсети список Номеров док-ов через запятую";
	нс = ТЗм.Добавить(); нс.пп = 10; нс.меню = "Перепровести";

	
	Адрес2 = ТЗм.ВыбратьСтроку(Адрес.ВидДокумента + "/" + Адрес.ИсточникОтказа + "/" + Адрес.ОписаниеОтказа);
	Если Адрес2 = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИсточникОтказа",Адрес.ИсточникОтказа);
	Отбор.Вставить("ОписаниеОтказа",Адрес.ОписаниеОтказа);
	Отбор.Вставить("ВидДокумента",Адрес.ВидДокумента);
	Строки = ТЗ1.НайтиСтроки(Отбор);
	
	Если Адрес2.пп = 1 тогда
		
		ТЗпп = ТЗ1.Скопировать(Строки);
		Адрес3 = ТЗпп.ВыбратьСтроку("Открыть док-т на просмотр");
		
		Если Адрес3 = Неопределено тогда
			
		//ТабличноеПоле1 = ТЗпп;
		//ЭлементыФормы.ТабличноеПоле1.СоздатьКолонки();
			
			Возврат;
		КонецЕсли;
			
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(НСтр("ru = 'Мож файлик поглядим?';"
		+ " en = 'Do you want to continue?'"), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			Запрос_Текст  =
			 "ВЫБРАТЬ
			 |	РеализацияТоваровУслуг.Ссылка КАК сЦылка
			 |ИЗ
			 |	" + СокрлП(Адрес3.ВидДокумента) + " КАК РеализацияТоваровУслуг
			 |ГДЕ
			 |	РеализацияТоваровУслуг." + ?(СтрНайти(Адрес3.ВидДокумента,"Документ."),"Номер","Код") + " = &НомерД";
			
			Если СтрНайти(Адрес3.ВидДокумента,"Документ.") > 0 тогда
				Запрос_Текст = Запрос_Текст + Символы.ПС + " И РеализацияТоваровУслуг.Дата > &НачалоОбмена";
			КонецЕсли;
				
			Запрос = Новый Запрос;
			Запрос.Текст = Запрос_Текст;
			Запрос.УстановитьПараметр("НомерД",СокрЛП(Адрес3.НомерДокумента));
			
			Если СтрНайти(Адрес3.ВидДокумента,"Документ.") > 0 тогда
				Запрос.УстановитьПараметр("НачалоОбмена", Константы.ДатаЗаявкиСоздаютсяВ83.Получить());
			КонецЕсли;
			
			тзД = Запрос.Выполнить().Выгрузить();
			
			Если тзД.Количество() = 0  тогда
				Сообщить("err: док-т " + Адрес3.ВидДокумента + "[Адрес3.НомерДокумента] не найден");
				Возврат;
			КонецЕсли;
			
			СЦылка = тзД[0].сЦылка;
			
			Если тзД.Количество() > 1  тогда
				Адрес4 = тзД.ВыбратьСтроку("Выбери себе");
				Если Адрес4 = Неопределено тогда
					Возврат;
				КонецЕсли;
				СЦылка = Адрес4.сЦылка;
			КонецЕсли;
			
			ОткрытьЗначение(СЦылка);
			
		Иначе
			
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(Адрес3.ИмяФайла);
			Текст.Показать(Адрес3.ИмяФайла);
			
		КонецЕсли; 
			
	Иначе
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(НСтр("ru = 'Вы уверены?';"
		     + " en = 'Do you want to continue?'"), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Возврат;
		КонецЕсли; 
		
		Если Адрес2.пп = 2 тогда
			
			Для каждого стр из Строки цикл
				стр_ИмяФайла = стр.ИмяФайла;
				Если ФайлСуществует(стр_ИмяФайла) тогда
					
					НачП = СтрНайти(стр_ИмяФайла,"1с8_");
					Если НачП = 0 тогда
						Продолжить;
					КонецЕсли;
					
					ИмяФайлаДляЗагрузки = стр_ИмяФайла;
					ИмяФайлаДляЗагрузки_Изм = "квитанция_" + СтрЗаменить(Сред(стр_ИмяФайла,НачП),"1с7_","1с8_");
					ПолноеИмяФайлаДляЗагрузки_Изм = КаталогОбмена + ИмяФайлаДляЗагрузки_Изм;
					Сообщить("inf: отказ обработан как квитанция [" + стр_ИмяФайла + "] -> [" + ИмяФайлаДляЗагрузки_Изм+ "]");
					ПереместитьФайл(стр_ИмяФайла, ПолноеИмяФайлаДляЗагрузки_Изм);
					
					Результат = ОбработатьКвитанцию(ПолноеИмяФайлаДляЗагрузки_Изм, ИмяФайлаДляЗагрузки_Изм);
					Работа_сФайлом(Результат.КодОшибки, ИмяФайлаДляЗагрузки_Изм, ИмяФайлаДляЗагрузки, Результат.ТекстОшибки);
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Адрес2.пп = 3 тогда
			
			
			
			Для каждого стр из Строки цикл
				стр_ИмяФайла = стр.ИмяФайла;
				Если ФайлСуществует(стр_ИмяФайла) тогда
			
					НачП = СтрНайти(стр_ИмяФайла,"1с8_");
					Если НачП = 0 тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаСВидомДокумента = Сред(стр_ИмяФайла,НачП);
					
					л_ТипЗнчДокумента = Адрес.ВидДокумента;
					//////////л_ТипЗнчДокумента = "";
					//////////пар_ИмяФайла_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСВидомДокумента,"_");	
					//////////Если пар_ИмяФайла_МассивПодСтрок.Количество() = 3 тогда
					//////////	л_ТипЗнчДокумента = "Документ." + пар_ИмяФайла_МассивПодСтрок[1];
					//////////Иначе
					//////////	Сообщить("err: имя файла не соответствует формату [" + СтрокаСВидомДокумента+ "]");
					//////////	Возврат;
					//////////КонецЕсли;
					
					Текст = "";
					пар_ПолноеИмяФайла = стр_ИмяФайла;
					Попытка
						ТекстовыйФайл = Новый ЧтениеТекста(пар_ПолноеИмяФайла, "windows-1251");
						Текст = ТекстовыйФайл.Прочитать();
						ТекстовыйФайл.Закрыть();
					Исключение
					КонецПопытки;
					
					ВсегоСтрок = СтрЧислоСтрок(Текст);
					Если ВсегоСтрок < Квитанция_номер_строки_данных_шапки тогда
						Сообщить("err: Файл пуст [" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
						
					л_стр = СтрПолучитьСтроку(Текст, Квитанция_номер_строки_данных_шапки) ;
					Если СтрНайти(л_стр,"ШапкаДанные") = 0 тогда
						Сообщить("err: шапка не найдена[" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
					
					Квитанция_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(л_стр, РазделительВСтроке);	
					
					Если Квитанция_МассивПодСтрок.Количество() < Квитанция_Спецификация_Количество тогда
						Сообщить("err: шапка пустая[" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
					
					л_УИД = Квитанция_МассивПодСтрок[Квитанция_Спецификация.Получить("Ссылка")];
					Если  НЕ ЗначениеЗаполнено(л_УИД) тогда
						Сообщить("err: брак данных");
						Возврат;
					КонецЕсли;
						
					НайденнаяСсылкаНаДокумент = МенеджерОбъектаПоИмениТипа(л_ТипЗнчДокумента,л_УИД);
					
					Если СтрНайти(л_ТипЗнчДокумента,"Документ.") > 0 тогда
						ПараметрыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(НайденнаяСсылкаНаДокумент,"Номер,Дата");
						Если НЕ ЗначениеЗаполнено(ПараметрыДокумента.Номер) тогда
							Сообщить("err: не найдена ссылка [" + л_УИД + "]");
							Возврат;
						КонецЕсли;
					ИначеЕсли СтрНайти(л_ТипЗнчДокумента,"Справочник.") > 0 тогда
						ПараметрыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(НайденнаяСсылкаНаДокумент,"Код");
						Если НЕ ЗначениеЗаполнено(ПараметрыДокумента.Код) тогда
							Сообщить("err: не найдена ссылка [" + л_УИД + "]");
							Возврат;
						КонецЕсли;
					Иначе
						Сообщить("err: не найдена ссылка [" + л_УИД + "]");
						Возврат;
					КонецЕсли;
					
					ПланыОбмена.ЗарегистрироватьИзменения( узел_получатель, НайденнаяСсылкаНаДокумент);			
					ПереместитьФайл(стр_ИмяФайла, КаталогДата + СтрокаСВидомДокумента);
					
					Сообщить("inf: " + СокрлП(НайденнаяСсылкаНаДокумент) + " зарегистрирован к выгрузке [" + л_УИД + "] = [" + СтрокаСВидомДокумента + "] -> [" + КаталогДата + "]");
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Адрес2.пп = 4 тогда
			
			НаборЗаписей = РегистрыСведений.ИсторияОбмена1с81с7.СоздатьНаборЗаписей();
			
			Для каждого стр из Строки цикл
				стр_ИмяФайла = стр.ИмяФайла;
				Если ФайлСуществует(стр_ИмяФайла) тогда
					Попытка
						
						
						НачП = СтрНайти(стр_ИмяФайла,"1с8_");
						Если НачП = 0 тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаСВидомДокумента = Сред(стр_ИмяФайла,НачП);
						
						л_ТипЗнчДокумента = Адрес.ВидДокумента;
						//////////л_ТипЗнчДокумента = "";
						//////////пар_ИмяФайла_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСВидомДокумента,"_");	
						//////////Если пар_ИмяФайла_МассивПодСтрок.Количество() = 3 тогда
						//////////	л_ТипЗнчДокумента = "Документ." + пар_ИмяФайла_МассивПодСтрок[1];
						//////////Иначе
						//////////	Сообщить("err: имя файла не соответствует формату [" + СтрокаСВидомДокумента+ "]");
						//////////	Возврат;
						//////////КонецЕсли;
						
						Текст = "";
						пар_ПолноеИмяФайла = стр_ИмяФайла;
						Попытка
							ТекстовыйФайл = Новый ЧтениеТекста(пар_ПолноеИмяФайла, "windows-1251");
							Текст = ТекстовыйФайл.Прочитать();
							ТекстовыйФайл.Закрыть();
						Исключение
						КонецПопытки;
						
						ВсегоСтрок = СтрЧислоСтрок(Текст);
						Если ВсегоСтрок < Квитанция_номер_строки_данных_шапки тогда
							Сообщить("err: Файл пуст [" +  пар_ПолноеИмяФайла + "]");
							Возврат;
						КонецЕсли;
							
						л_стр = СтрПолучитьСтроку(Текст, Квитанция_номер_строки_данных_шапки) ;
						Если СтрНайти(л_стр,"ШапкаДанные") = 0 тогда
							Сообщить("err: шапка не найдена[" +  пар_ПолноеИмяФайла + "]");
							Возврат;
						КонецЕсли;
						
						Квитанция_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(л_стр, РазделительВСтроке);	
						
						Если Квитанция_МассивПодСтрок.Количество() < Квитанция_Спецификация_Количество тогда
							Сообщить("err: шапка пустая[" +  пар_ПолноеИмяФайла + "]");
							Возврат;
						КонецЕсли;
						
						л_УИД = Квитанция_МассивПодСтрок[Квитанция_Спецификация.Получить("Ссылка")];
						Если  НЕ ЗначениеЗаполнено(л_УИД) тогда
							Сообщить("err: брак данных");
							Возврат;
						КонецЕсли;
							
						НайденнаяСсылкаНаДокумент = МенеджерОбъектаПоИмениТипа(л_ТипЗнчДокумента,л_УИД);
						
						//Сообщить("нашли " + СокрлП(НайденнаяСсылкаНаДокумент));
						
						Если СтрНайти(л_ТипЗнчДокумента,"Документ.") > 0 тогда
							ПараметрыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(НайденнаяСсылкаНаДокумент,"Номер,Дата");
							Если НЕ ЗначениеЗаполнено(ПараметрыДокумента.Номер) тогда
								Сообщить("err: не найдена ссылка [" + л_УИД + "]");
								Возврат;
							КонецЕсли;
						ИначеЕсли СтрНайти(л_ТипЗнчДокумента,"Справочник.") > 0 тогда
							ПараметрыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(НайденнаяСсылкаНаДокумент,"Код");
							Если НЕ ЗначениеЗаполнено(ПараметрыДокумента.Код) тогда
								Сообщить("err: не найдена ссылка [" + л_УИД + "]");
								Возврат;
							КонецЕсли;
						Иначе
							Сообщить("err: не найдена ссылка [" + л_УИД + "]");
							Возврат;
						КонецЕсли;
						
						//Сообщить("отбор " + СокрлП(НайденнаяСсылкаНаДокумент));
						
						НаборЗаписей.Отбор.Ссылка.Установить(НайденнаяСсылкаНаДокумент); 
						//НаборЗаписей.Прочитать();
						//Для Каждого Запись Из НаборЗаписей Цикл 
						////	Сообщить(СокрлП(Запись));
						//   Запись.Ошибка = Ложь;
						//КонецЦикла; 
						НаборЗаписей.Записать(); 
						НаборЗаписей.Очистить();
						
						УдалитьФайлы(стр_ИмяФайла);
						Сообщить("inf: удален файл [" + стр_ИмяФайла+ "]");
						Сообщить("-----------------------------------------");
					Исключение
						Продолжить;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Адрес2.пп = 5 тогда
			
			Для каждого стр из Строки цикл
				стр_ИмяФайла = стр.ИмяФайла;
				Если ФайлСуществует(стр_ИмяФайла) тогда
					
					НачП = СтрНайти(стр_ИмяФайла,"!Отказ");
					Если НачП = 0 тогда
						Продолжить;
					КонецЕсли;
					
					НовоеИмя = Сред(стр_ИмяФайла,НачП);
					
					Сообщить("inf: файл помещен в архив [" + НовоеИмя + "] -> [" + КаталогДата + "]");
					
					ПереместитьФайл(стр_ИмяФайла, КаталогДата + НовоеИмя);

				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Адрес2.пп = 6 тогда
			
			Для каждого стр из Строки цикл
				стр_ИмяФайла = стр.ИмяФайла;
				Если ФайлСуществует(стр_ИмяФайла) тогда
					
					НачП = СтрНайти(стр_ИмяФайла,"1с8_");
					Если НачП = 0 тогда
						НачП = СтрНайти(стр_ИмяФайла,"1с7_");
						Если НачП = 0 тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ИмяФайлаДляЗагрузки_Изм = СтрЗаменить(Сред(стр_ИмяФайла,НачП),"1с7_","1с8_");
					ПолноеИмяФайлаДляЗагрузки_Изм = КаталогОбмена + ИмяФайлаДляЗагрузки_Изм;
					Сообщить("inf: отказ переименован как посылка [" + стр_ИмяФайла + "] -> [" + ИмяФайлаДляЗагрузки_Изм+ "]");
					ПереместитьФайл(стр_ИмяФайла, ПолноеИмяФайлаДляЗагрузки_Изм);
					
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Адрес2.пп = 7 тогда
			
			Для каждого стр из Строки цикл
				стр_ИмяФайла = стр.ИмяФайла;
				Если ФайлСуществует(стр_ИмяФайла) тогда
					
					НачП = СтрНайти(стр_ИмяФайла,"1с8_");
					Если НачП = 0 тогда
						НачП = СтрНайти(стр_ИмяФайла,"1с7_");
						Если НачП = 0 тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ИмяФайлаДляЗагрузки_Изм = СтрЗаменить(Сред(стр_ИмяФайла,НачП),"1с8_","1с7_");
					ПолноеИмяФайлаДляЗагрузки_Изм = КаталогОбмена + ИмяФайлаДляЗагрузки_Изм;
					Сообщить("inf: отказ переименован как квитанция [" + стр_ИмяФайла + "] -> [" + ИмяФайлаДляЗагрузки_Изм+ "]");
					ПереместитьФайл(стр_ИмяФайла, ПолноеИмяФайлаДляЗагрузки_Изм);
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Адрес2.пп = 8 тогда
			
			стрстр = 0;
			Для каждого стр из Строки цикл
				стр_ИмяФайла = стр.ИмяФайла;
				Если ФайлСуществует(стр_ИмяФайла) тогда
					
					стрстр = стрстр + 1;
					
					НачП = СтрНайти(стр_ИмяФайла,"1с8_");
					Если НачП = 0 тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаСВидомДокумента = Сред(стр_ИмяФайла,НачП);
					
					л_ТипЗнчДокумента = Адрес.ВидДокумента;
					//////////л_ТипЗнчДокумента = "";
					//////////пар_ИмяФайла_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСВидомДокумента,"_");	
					//////////Если пар_ИмяФайла_МассивПодСтрок.Количество() = 3 тогда
					//////////	л_ТипЗнчДокумента = "Документ." + пар_ИмяФайла_МассивПодСтрок[1];
					//////////Иначе
					//////////	Сообщить("err: имя файла не соответствует формату [" + СтрокаСВидомДокумента+ "]");
					//////////	Возврат;
					//////////КонецЕсли;
					Если СтрНайти(л_ТипЗнчДокумента,"Документ.") = 0 тогда
						Продолжить;
					КонецЕсли;
						
					Текст = "";
					пар_ПолноеИмяФайла = стр_ИмяФайла;
					Попытка
						ТекстовыйФайл = Новый ЧтениеТекста(пар_ПолноеИмяФайла, "windows-1251");
						Текст = ТекстовыйФайл.Прочитать();
						ТекстовыйФайл.Закрыть();
					Исключение
					КонецПопытки;
					
					ВсегоСтрок = СтрЧислоСтрок(Текст);
					Если ВсегоСтрок < Квитанция_номер_строки_данных_шапки тогда
						Сообщить("err: Файл пуст [" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
						
					л_стр = СтрПолучитьСтроку(Текст, Квитанция_номер_строки_данных_шапки) ;
					Если СтрНайти(л_стр,"ШапкаДанные") = 0 тогда
						Сообщить("err: шапка не найдена[" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
					
					Квитанция_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(л_стр, РазделительВСтроке);	
					
					Если Квитанция_МассивПодСтрок.Количество() < Квитанция_Спецификация_Количество тогда
						Сообщить("err: шапка пустая[" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
					
					л_УИД = Квитанция_МассивПодСтрок[Квитанция_Спецификация.Получить("Ссылка")];
					Если  НЕ ЗначениеЗаполнено(л_УИД) тогда
						Сообщить("err: брак данных");
						Возврат;
					КонецЕсли;
						
					НайденнаяСсылкаНаДокумент = МенеджерОбъектаПоИмениТипа(л_ТипЗнчДокумента,л_УИД);
					
					Если СтрНайти(л_ТипЗнчДокумента,"Документ.") > 0 тогда
						ПараметрыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(НайденнаяСсылкаНаДокумент,"Номер,Дата");
						Если НЕ ЗначениеЗаполнено(ПараметрыДокумента.Номер) тогда
							Сообщить("err: не найдена ссылка [" + л_УИД + "]");
							Возврат;
						КонецЕсли;
					КонецЕсли;
					
					лД  = НайденнаяСсылкаНаДокумент.ПолучитьОбъект();
					лД.СозданВ77 = 0;
					лД.Записать(РежимЗаписиДокумента.Запись);
					
					Сообщить("inf: " +СокрЛП(стрстр) + ". "+ СокрлП(НайденнаяСсылкаНаДокумент) + " СозданВ77 => 0");
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Адрес2.пп = 9 тогда
			лстрр = "";
			стрстр = 0;
			Для каждого стр из Строки цикл
				стр_ИмяФайла = стр.ИмяФайла;
				Если ФайлСуществует(стр_ИмяФайла) тогда
					
					стрстр = стрстр + 1;
					
					НачП = СтрНайти(стр_ИмяФайла,"1с8_");
					Если НачП = 0 тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаСВидомДокумента = Сред(стр_ИмяФайла,НачП);
					
					л_ТипЗнчДокумента = Адрес.ВидДокумента;
					//////////л_ТипЗнчДокумента = "";
					//////////пар_ИмяФайла_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСВидомДокумента,"_");	
					//////////Если пар_ИмяФайла_МассивПодСтрок.Количество() = 3 тогда
					//////////	л_ТипЗнчДокумента = "Документ." + пар_ИмяФайла_МассивПодСтрок[1];
					//////////Иначе
					//////////	Сообщить("err: имя файла не соответствует формату [" + СтрокаСВидомДокумента+ "]");
					//////////	Возврат;
					//////////КонецЕсли;
					Если СтрНайти(л_ТипЗнчДокумента,"Документ.") = 0 тогда
						Продолжить;
					КонецЕсли;
						
					Текст = "";
					пар_ПолноеИмяФайла = стр_ИмяФайла;
					Попытка
						ТекстовыйФайл = Новый ЧтениеТекста(пар_ПолноеИмяФайла, "windows-1251");
						Текст = ТекстовыйФайл.Прочитать();
						ТекстовыйФайл.Закрыть();
					Исключение
					КонецПопытки;
					
					ВсегоСтрок = СтрЧислоСтрок(Текст);
					Если ВсегоСтрок < Квитанция_номер_строки_данных_шапки тогда
						Сообщить("err: Файл пуст [" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
						
					л_стр = СтрПолучитьСтроку(Текст, Квитанция_номер_строки_данных_шапки) ;
					Если СтрНайти(л_стр,"ШапкаДанные") = 0 тогда
						Сообщить("err: шапка не найдена[" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
					
					Квитанция_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(л_стр, РазделительВСтроке);	
					
					Если Квитанция_МассивПодСтрок.Количество() < Квитанция_Спецификация_Количество тогда
						Сообщить("err: шапка пустая[" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
					
					л_УИД = Квитанция_МассивПодСтрок[Квитанция_Спецификация.Получить("Ссылка")];
					Если  НЕ ЗначениеЗаполнено(л_УИД) тогда
						Сообщить("err: брак данных");
						Возврат;
					КонецЕсли;
						
					НайденнаяСсылкаНаДокумент = МенеджерОбъектаПоИмениТипа(л_ТипЗнчДокумента,л_УИД);
					
					Если СтрНайти(л_ТипЗнчДокумента,"Документ.") > 0 тогда
						ПараметрыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(НайденнаяСсылкаНаДокумент,"Номер,Дата");
						Если НЕ ЗначениеЗаполнено(ПараметрыДокумента.Номер) тогда
							Сообщить("err: не найдена ссылка [" + л_УИД + "]");
							Возврат;
						КонецЕсли;
					КонецЕсли;
					
					//лД  = НайденнаяСсылкаНаДокумент.ПолучитьОбъект();
					//лД.СозданВ77 = 0;
					//лД.Записать(РежимЗаписиДокумента.Запись);
					//
					//Сообщить("inf: " +СокрЛП(стрстр) + ". "+ СокрлП(НайденнаяСсылкаНаДокумент) + " СозданВ77 => 0");
					
					лстрр = лстрр + СокрЛП(ПараметрыДокумента.Номер) + ",";
				КонецЕсли;
			КонецЦикла;
			
			Сообщить(лстрр);
			
		ИначеЕсли Адрес2.пп = 10 тогда
			лстрр = "";
			стрстр = 0;
			Для каждого стр из Строки цикл
				стр_ИмяФайла = стр.ИмяФайла;
				Если ФайлСуществует(стр_ИмяФайла) тогда
					
					стрстр = стрстр + 1;
					
					НачП = СтрНайти(стр_ИмяФайла,"1с8_");
					Если НачП = 0 тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаСВидомДокумента = Сред(стр_ИмяФайла,НачП);
					
					л_ТипЗнчДокумента = Адрес.ВидДокумента;
					//////////л_ТипЗнчДокумента = "";
					//////////пар_ИмяФайла_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСВидомДокумента,"_");	
					//////////Если пар_ИмяФайла_МассивПодСтрок.Количество() = 3 тогда
					//////////	л_ТипЗнчДокумента = "Документ." + пар_ИмяФайла_МассивПодСтрок[1];
					//////////Иначе
					//////////	Сообщить("err: имя файла не соответствует формату [" + СтрокаСВидомДокумента+ "]");
					//////////	Возврат;
					//////////КонецЕсли;
					Если СтрНайти(л_ТипЗнчДокумента,"Документ.") = 0 тогда
						Продолжить;
					КонецЕсли;
						
					Текст = "";
					пар_ПолноеИмяФайла = стр_ИмяФайла;
					Попытка
						ТекстовыйФайл = Новый ЧтениеТекста(пар_ПолноеИмяФайла, "windows-1251");
						Текст = ТекстовыйФайл.Прочитать();
						ТекстовыйФайл.Закрыть();
					Исключение
					КонецПопытки;
					
					ВсегоСтрок = СтрЧислоСтрок(Текст);
					Если ВсегоСтрок < Квитанция_номер_строки_данных_шапки тогда
						Сообщить("err: Файл пуст [" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
						
					л_стр = СтрПолучитьСтроку(Текст, Квитанция_номер_строки_данных_шапки) ;
					Если СтрНайти(л_стр,"ШапкаДанные") = 0 тогда
						Сообщить("err: шапка не найдена[" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
					
					Квитанция_МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(л_стр, РазделительВСтроке);	
					
					Если Квитанция_МассивПодСтрок.Количество() < Квитанция_Спецификация_Количество тогда
						Сообщить("err: шапка пустая[" +  пар_ПолноеИмяФайла + "]");
						Возврат;
					КонецЕсли;
					
					л_УИД = Квитанция_МассивПодСтрок[Квитанция_Спецификация.Получить("Ссылка")];
					Если  НЕ ЗначениеЗаполнено(л_УИД) тогда
						Сообщить("err: брак данных");
						Возврат;
					КонецЕсли;
						
					НайденнаяСсылкаНаДокумент = МенеджерОбъектаПоИмениТипа(л_ТипЗнчДокумента,л_УИД);
					
					Если СтрНайти(л_ТипЗнчДокумента,"Документ.") > 0 тогда
						ПараметрыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(НайденнаяСсылкаНаДокумент,"Номер,Дата");
						Если НЕ ЗначениеЗаполнено(ПараметрыДокумента.Номер) тогда
							Сообщить("err: не найдена ссылка [" + л_УИД + "]");
							Возврат;
						КонецЕсли;
					КонецЕсли;
					
					//лД  = НайденнаяСсылкаНаДокумент.ПолучитьОбъект();
					//лД.СозданВ77 = 0;
					//лД.Записать(РежимЗаписиДокумента.Запись);
					//
					//Сообщить("inf: " +СокрЛП(стрстр) + ". "+ СокрлП(НайденнаяСсылкаНаДокумент) + " СозданВ77 => 0");
					
					лстрр = лстрр + СокрЛП(ПараметрыДокумента.Номер) + ",";
					
					Попытка
						дО = НайденнаяСсылкаНаДокумент.ПолучитьОбъект();
						дО.Записать(РежимЗаписиДокумента.Проведение);
						Сообщить(СокрЛП(стрстр) + " проведен: " + СокрлП(НайденнаяСсылкаНаДокумент));
					Исключение
						Сообщить(СокрЛП(стрстр) + " ERR проведенИЯ: " + СокрлП(НайденнаяСсылкаНаДокумент)+ сИМВОЛЫ.ПС + оПИСАНИЕоШИБКИ());
					КонецПопытки;
					
				КонецЕсли;
			КонецЦикла;
			
			//Сообщить(лстрр);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ПринудительнаяРегистрацияЗаПериод()
	
	ДатаН = НачалоДня(ТекущаяДата());
	ДатаК = ТекущаяДата();
	
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаН, ДатаК);
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период; //Закладка Период
	// НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Интервал;// Закладка Интервал
	Если НастройкаПериода.Редактировать() Тогда
		ДатаН = НастройкаПериода.ПолучитьДатуНачала();
		ДатаК = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;	
	
	Сообщить(ПредставлениеПериода(ДатаН, ДатаК));
	
	сч = 0;
	счдок = 0;
	Для каждого лЭл из 	СоставПланаОбмена цикл
		
		Если СтрНайти(лЭл.ОбъектМетаданных_ПолноеИмя,"Документ") = 0  тогда
			Продолжить;
		КонецЕсли;
		
		сч = сч + 1;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ЗаявкаПокупателя.Ссылка КАК сЦылка,
		 |	ЗаявкаПокупателя.Дата
		 |ИЗ
		 |	" + лЭл.ОбъектМетаданных_ПолноеИмя + " КАК ЗаявкаПокупателя
		 |ГДЕ
		 |	ЗаявкаПокупателя.Дата >= &ДатаН
		 |	И ЗаявкаПокупателя.Дата <= &ДатаК";
		
		Запрос.УстановитьПараметр("ДатаН",ДатаН);
		Запрос.УстановитьПараметр("ДатаК",ДатаК);
		
		лРез = Запрос.Выполнить().Выгрузить();
		лРез_Количество = лРез.Количество();
		счдок = счдок + лРез_Количество;
		
		Если лРез_Количество > 0 тогда
			Для каждого лРезстр из лРез цикл
				ПланыОбмена.ЗарегистрироватьИзменения( узел_получатель, лРезстр.сЦылка);		
			КонецЦикла;
		КонецЕсли;
		
		Сообщить(СокрЛП(сч) + ". " + лЭл.ОбъектМетаданных_ПолноеИмя + " => " + СокрЛП(лРез_Количество) );
		
	КонецЦикла;
	
	Сообщить("Итого зарегистрировано док-ов: " + СокрЛП(счдок));
КонецПроцедуры
#КонецЕсли	

// сервис
Функция РаботаСКаталогамиНеВозможна(парам_ИмяКаталога) экспорт
	Отказ = Истина;
	
	Существует = ПроверитьСуществованиеКаталога(парам_ИмяКаталога);
	Если НЕ Существует тогда
		Возврат Отказ;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Возврат Отказ;
КонецФункции
Функция ПроверитьСуществованиеКаталога(ИмяКаталога)

	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		СоздатьКаталог(ИмяКаталога);
		Возврат Истина;
	КонецЕсли;

КонецФункции
Процедура Работа_сФайлом(Рез_Обмена, НовоеИмя, СтароеИмя, ТекстОшибки = "! Нельзя загрузить в 1с8 - ") 
	// аналог процедуры обработки файла загрузки в 1С7 в зависимости от кода ошибки
	//---------------------------------------------------------------------------------------------------------------------------------------
	// наследие СВН: коды ошибок :
	//Если 1 Тогда // успешно - файл-источник надо удалить
	//Если 2 Тогда // не успешно, что-то не записалось, не создалось, надо повторить, следовательно надо вернуть прежнее имя файлу-источнику
	//Если 3 Тогда // отсутствует файл // ничего не делаем
	//Если 4 Тогда // ошибка - не найден код и т.д., сообщение об ошибке в имя файла-источника запихиваем. 
	//---------------------------------------------------------------------------------------------------------------------------------------	
	
	Если Рез_Обмена = 1 Тогда 		// успешно - надо удалить
		
		// чтобы квитанции в архиве не перезатирали друг друга, если добъект более чем один раз ходил в обмене за сутки
		НовоеИмя2 = СтрЗаменить(НовоеИмя,".txt","_" + ПравилаФорматированияЗначенияРеквизитаОбъектаОбмена(ТекущаяДата(),"Дата")+".txt");
		
		ПереместитьФайл(КаталогОбмена + НовоеИмя, КаталогДата + НовоеИмя2);
		
	////ИначеЕсли Рез_Обмена = 2 Тогда  // не успешно, что-то не записалось, не создалось, надо повторить, следовательно надо вернуть прежнее имя
	////	ПереместитьФайл(КаталогОбмена + НовоеИмя, КаталогОбмена + СтароеИмя);
	////	
	////ИначеЕсли Рез_Обмена = 3 Тогда  // отсутствует файл
	////	РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаВыгрузкиВ1С7,"! Нельзя загрузить файл в 1с8 [" + СокрЛП(НовоеИмя)+ "] ОписаниеОтказа ["+ ТекстОшибки +  "]", "Ошибки обмена с 1с7");
		
	Иначе 							// ошибка - не найден код и т.д., сообщение об ошибке в имя файла запихиваем
		ПереместитьФайл(КаталогОбмена + НовоеИмя, КаталогОбмена + ТекстОшибки + СтароеИмя);
		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаВыгрузкиВ1С7,"! Нельзя загрузить файл в 1с8 [" + СокрЛП(НовоеИмя)+ "] ОписаниеОтказа ["+ ТекстОшибки +  "]", "Ошибки обмена с 1с7");
		
	КонецЕсли;
	
КонецПроцедуры
Функция РазвернутьДатуВстроку(выбД,Разд="",выводить_время = Истина) 
	СД = "";
	
	ГД = Год(выбД);
	МД = Месяц(выбД);
	ДД = День(выбД);
	ДЧ = Час(выбД);
	ДМ = Минута(выбД);
	ДС = Секунда(выбД);
	
	СД = СокрЛП(Формат(ГД, "ЧЦ=4; ЧН=; ЧВН=; ЧГ="))+Разд
	    +СокрЛП(Формат(МД, "ЧЦ=2; ЧН=; ЧВН="))+Разд
		+СокрЛП(Формат(ДД, "ЧЦ=2; ЧН=; ЧВН="));
	Если выводить_время тогда СД = СД+Разд	
		+СокрЛП(Формат(ДЧ, "ЧЦ=2; ЧН=; ЧВН="))+Разд
		+СокрЛП(Формат(ДМ, "ЧЦ=2; ЧН=; ЧВН="))+Разд
		+СокрЛП(Формат(ДС, "ЧЦ=2; ЧН=; ЧВН="));
	КонецЕсли;
		
	Возврат СД;
КонецФункции

// работа с метаданными
// http://www.1c1c1c.ru/index.php%3Foption%3Dcom_content%26task%3Dview%26id%3D49%26Itemid%3D30
Функция МенеджерОбъектаПоИмениТипа(вхИмяТипа, вхУИД)
	
	НазваниеМенеджераОбъекта = вхИмяТипа;
	НазваниеМенеджераОбъекта = СтрЗаменить(НазваниеМенеджераОбъекта,"Документ.","Документы.");
	НазваниеМенеджераОбъекта = СтрЗаменить(НазваниеМенеджераОбъекта,"Справочник.","Справочники.");
	л_Команда = НазваниеМенеджераОбъекта + ".ПолучитьСсылку(Новый УникальныйИдентификатор(""" + вхУИД + """))";
	
	СсылкаНаДокумент = Вычислить(л_Команда);
	Возврат СсылкаНаДокумент;
	
КонецФункции
Функция ВходитВСоставПланаОбмена(пар_ТипЗнч) экспорт
	
	ага = "";
	
	рез_поиска = СоставПланаОбмена.Найти(пар_ТипЗнч,"ОбъектМетаданных_Имя");
	Если НЕ  рез_поиска = Неопределено тогда	
		ага = рез_поиска.ОбъектМетаданных_ПолноеИмя;
	КонецЕсли;
	
	Возврат ага;
	
КонецФункции
Функция ПолучитьСписокРеквизитовШапки(пар_Вид, пар_Тип) экспорт
	//http://www.1c1c1c.ru/index.php%3Foption%3Dcom_content%26task%3Dview%26id%3D49%26Itemid%3D30
	
	Шапка = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(пар_Вид) тогда
		Возврат Шапка;	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(пар_Тип) тогда
		Возврат Шапка;	
	КонецЕсли;
	
	Док = "";
	Если СтрНайти(пар_Тип,"Справочник") > 0 тогда
		Док = Метаданные.Справочники[пар_Вид];
	ИначеЕсли СтрНайти(пар_Тип,"Документ") > 0 тогда
		Док = Метаданные.Документы[пар_Вид];
	Иначе
		Возврат Шапка;	
	КонецЕсли;
	
	Для каждого Реквизит Из Док.Реквизиты цикл
		
		Реквизит_Тип = СокрЛП(Реквизит.Тип);
		
		Если Реквизит_Тип = "Уникальный идентификатор" или
			Реквизит_Тип = "Число"  или 
			Реквизит_Тип = "Строка" или
			Реквизит_Тип = "Дата"   или
			Реквизит_Тип = "Булево" тогда
		Иначе
			Элемент_Метаданные =  Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]);
			Если Элемент_Метаданные = Неопределено тогда
				Продолжить;
			КонецЕсли;
			ВидОбъекта = ВидОбъектаМетаданныхОбмена(Элемент_Метаданные);
			Если ВидОбъекта = Неопределено тогда
				Реквизит_Тип =  Реквизит_Тип;
			Иначе
				Реквизит_Тип = ВидОбъекта + "." + Элемент_Метаданные.Имя;//Реквизит_Тип;
			КонецЕсли;
			
		КонецЕсли;
		
		Шапка.Вставить(Реквизит.Имя, Реквизит_Тип);	
	КонецЦикла;
	
	Если СтрНайти(пар_Вид,"Контрагенты") > 0 тогда
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_ЭтоГруппа";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_Родитель";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Контрагенты");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_VIP";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_ДатаСоздания";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Дата");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_флВыгружать_Заказ_вДрБазу";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_КПП";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_МаршрутДоставки1";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.МаршрутыДоставки");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_МаршрутДоставки2";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.МаршрутыДоставки");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_МаршрутДоставки3";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.МаршрутыДоставки");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_РаботаетСОкномПоставщика";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_Представление";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "Контрагенты_ПрайсVMI";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ПрайсыПоставщиковVMI");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
	ИначеЕсли СтрНайти(пар_Вид,"ДоговорыКонтрагентов") > 0 тогда
		
		имя_дополнительного_расчетного_реквизита = "ДоговорыКонтрагентов_ЭтоГруппа";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "ДоговорыКонтрагентов_ВладелецКА";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Контрагенты");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "ДоговорыКонтрагентов_ВладелецТТ";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ТорговыеТочки");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "ДоговорыКонтрагентов_ОсновнойДоговорКонтрагентаПродажа";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ДоговорыКонтрагентов");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "ДоговорыКонтрагентов_ОсновнойДоговорКонтрагентаЗакупка";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ДоговорыКонтрагентов");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "ДоговорыКонтрагентов_Ссылка77";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
	ИначеЕсли СтрНайти(пар_Вид,"РеализацияТоваровУслуг") > 0 тогда
		
		имя_дополнительного_расчетного_реквизита = "РеализацияТоваровУслуг_СчетФактураВыданный";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Документ.СчетФактураВыданный");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "РеализацияТоваровУслуг_КтоПроверил";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Пользователи");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "РеализацияТоваровУслуг_КогдаПроверен";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Дата");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "РеализацияТоваровУслуг_ПризнакПроверен";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
	ИначеЕсли СтрНайти(пар_Вид,"ПоступлениеТоваровУслуг") > 0 тогда
		
		имя_дополнительного_расчетного_реквизита = "ПоступлениеТоваровУслуг_КтоПроверил";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Пользователи");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "ПоступлениеТоваровУслуг_КогдаПроверен";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Дата");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "ПоступлениеТоваровУслуг_ПризнакПроверен";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
	ИначеЕсли СтрНайти(пар_Вид,"ВозвратТоваровПоставщику") > 0 тогда
		
		имя_дополнительного_расчетного_реквизита = "ВозвратТоваровПоставщику_КтоПроверил";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Пользователи");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "ВозвратТоваровПоставщику_КогдаПроверен";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Дата");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "ВозвратТоваровПоставщику_ПризнакПроверен";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
	ИначеЕсли СтрНайти(пар_Вид,"СчетФактураВыданный") > 0 тогда
		имя_дополнительного_расчетного_реквизита = "СчетФактураВыданный_ТорговаяТочка";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ТорговыеТочки");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
	ИначеЕсли СтрНайти(пар_Вид,"СчетФактураПолученный") > 0 тогда
		имя_дополнительного_расчетного_реквизита = "СчетФактураПолученный_ТорговаяТочка";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ТорговыеТочки");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
	ИначеЕсли СтрНайти(пар_Вид,"ПереоценкаОстатковПоставщика") > 0 тогда
		
		имя_дополнительного_расчетного_реквизита = "ПереоценкаОстатковПоставщика_ПрайсПоставщикаVMIНаименование";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = "ПереоценкаОстатковПоставщика_ПрайсПоставщикаVMIПроцентОтклонения";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
	ИначеЕсли СтрНайти(пар_Вид,"КорректировкаЗаказаПоставщику") > 0 тогда
		
		имя_дополнительного_расчетного_реквизита = "КорректировкаЗаказаПоставщику_ДокументОснование_Предыдущий";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Документ.КорректировкаЗаказаПоставщику");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
	ИначеЕсли СтрНайти(пар_Вид,"КорректировкаЗаявкиПокупателя") > 0 тогда
		
		имя_дополнительного_расчетного_реквизита = "КорректировкаЗаявкиПокупателя_ДокументОснование_Предыдущий";
		Шапка.Вставить(имя_дополнительного_расчетного_реквизита, "Документ.КорректировкаЗаявкиПокупателя");
		список_расчетных_реквизитов_шапки = список_расчетных_реквизитов_шапки + имя_дополнительного_расчетного_реквизита + ";";
		
	КонецЕсли;
	
	Возврат Шапка;
КонецФункции
Функция ПолучитьСписокРеквизитовТЧ(пар_Вид, пар_Тип)
	
	ТЧ = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(пар_Вид) тогда
		Возврат ТЧ;	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(пар_Тип) тогда
		Возврат ТЧ;	
	КонецЕсли;
	
	Док = "";
	Если СтрНайти(пар_Тип,"Справочник") > 0 тогда
		Док = Метаданные.Справочники[пар_Вид];
	ИначеЕсли СтрНайти(пар_Тип,"Документ") > 0 тогда
		Док = Метаданные.Документы[пар_Вид];
	Иначе
		Возврат ТЧ;	
	КонецЕсли;
	
	Для каждого ТабличнаяЧасть Из Док.ТабличныеЧасти цикл
		
		Рекв = Новый Структура;
		
		ЕстьРеквизитНоменклатура = Ложь;
		
		Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты цикл
			
			Реквизит_Тип = СокрЛП(Реквизит.Тип);
			
			Если Реквизит_Тип = "Уникальный идентификатор" или
				Реквизит_Тип = "Число"  или 
				Реквизит_Тип = "Строка" или
				Реквизит_Тип = "Дата"   или
				Реквизит_Тип = "Булево" тогда
			Иначе
				Элемент_Метаданные =  Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]);
				ВидОбъекта = ВидОбъектаМетаданныхОбмена(Элемент_Метаданные);
				Если ВидОбъекта = Неопределено тогда
					Реквизит_Тип =  Реквизит_Тип;
				Иначе
					Реквизит_Тип = ВидОбъекта + "." + Реквизит_Тип;
				КонецЕсли;
				
			КонецЕсли;
			
			Реквизит_Имя = Реквизит.Имя;
			Рекв.Вставить(Реквизит_Имя, Реквизит_Тип);	
			
			Если Реквизит_Имя = "Номенклатура" тогда
				ЕстьРеквизитНоменклатура = Истина;
			КонецЕсли;
			
		КонецЦикла;		
		
		Если СтрНайти(ТабличнаяЧасть.Имя, "Товары") > 0 тогда
		Если ЕстьРеквизитНоменклатура тогда
			
			имя_дополнительного_расчетного_реквизита = "доп_Номенклатура_Наименование";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "доп_Номенклатура_ПолноеНаименование";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "доп_Номенклатура_Артикул";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "доп_Номенклатура_Изготовитель";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Изготовители");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "доп_Номенклатура_СтавкаНДС";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Перечисление.СтавкиНДС");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "доп_Номенклатура_ЕдиницаХраненияОстатков";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ЕдиницыИзмерения");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "доп_Номенклатура_Услуга";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		КонецЕсли;
		КонецЕсли;
		
		Если СтрНайти(пар_Вид,"ЗаявкаПокупателя") > 0 И СтрНайти(ТабличнаяЧасть.Имя, "Товары") > 0 тогда
			
			имя_дополнительного_расчетного_реквизита = "ЗаявкаПокупателя_ПрайсПоставщика_Владелец";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ТорговыеТочки");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ЗаявкаПокупателя_ПрайсПоставщика_Склад";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Склады");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ЗаявкаПокупателя_ПрайсПоставщика_ОтдельныйЗаказ";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ЗаявкаПокупателя_ПрайсПоставщика_ОтдельныйДокумент";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Булево");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ЗаявкаПокупателя_ПрайсПоставщика_Наименование";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		ИначеЕсли СтрНайти(пар_Вид,"ПеремещениеТоваров") > 0 И СтрНайти(ТабличнаяЧасть.Имя, "Товары") > 0 тогда
			
			//имя_дополнительного_расчетного_реквизита = "ПеремещениеТоваров_Фирма_ТЧ";
			//Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Организации");
			//список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ПеремещениеТоваров_ID_Site";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ПеремещениеТоваров_Заявка";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Документ.ЗаявкаПокупателя");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			//имя_дополнительного_расчетного_реквизита = "ПеремещениеТоваров_ИдентификаторПартии77";
			//Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			//список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		ИначеЕсли СтрНайти(пар_Вид,"ЗаказПоставщику") > 0 И СтрНайти(ТабличнаяЧасть.Имя, "Товары") > 0 тогда
			
			имя_дополнительного_расчетного_реквизита = "ЗаказПоставщику_ID_Site_изЗаявки";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ЗаказПоставщику_Заявка";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Документ.ЗаявкаПокупателя");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ЗаказПоставщику_ПрайсПоставщика";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ПрайсыПоставщиков");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		ИначеЕсли СтрНайти(пар_Вид,"КорректировкаЗаказаПоставщику") > 0 И СтрНайти(ТабличнаяЧасть.Имя, "Товары") > 0 тогда
			
			имя_дополнительного_расчетного_реквизита = "ЗаказПоставщику_ID_Site_изЗаявки";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ЗаказПоставщику_Заявка";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Документ.ЗаявкаПокупателя");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ЗаказПоставщику_ПрайсПоставщика";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ПрайсыПоставщиков");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		ИначеЕсли СтрНайти(пар_Вид,"РеализацияТоваровУслуг") > 0 И СтрНайти(ТабличнаяЧасть.Имя, "Товары") > 0 тогда
			
			имя_дополнительного_расчетного_реквизита = "РеализацияТоваровУслуг_ID_Site";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "РеализацияТоваровУслуг_Заявка";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Документ.ЗаявкаПокупателя");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		ИначеЕсли СтрНайти(пар_Вид,"ПоступлениеТоваровУслуг") > 0 И СтрНайти(ТабличнаяЧасть.Имя, "РазмещениеСтрокПрихода") > 0 тогда
			
			имя_дополнительного_расчетного_реквизита = "ПоступлениеТоваровУслуг_ID_Site";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ПоступлениеТоваровУслуг_Заявка";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Документ.ЗаявкаПокупателя");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ПоступлениеТоваровУслуг_ПоследняяКорректировка";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Документ.КорректировкаЗаявкиПокупателя");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ПоступлениеТоваровУслуг_Заказ";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Документ.ЗаказПоставщику");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ПоступлениеТоваровУслуг_НоменклатураЗаявки";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Номенклатура");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ПоступлениеТоваровУслуг_ЭтоЗамена";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		ИначеЕсли СтрНайти(пар_Вид,"КорректировкаДолга") > 0 И СтрНайти(ТабличнаяЧасть.Имя, "СуммыДолга") > 0 тогда	
			
			имя_дополнительного_расчетного_реквизита = "КорректировкаДолга_ВидДоговора";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Перечисление.ВидыДоговоровКонтрагентов");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		ИначеЕсли СтрНайти(пар_Вид,"ОприходованиеТоваров") > 0 И СтрНайти(ТабличнаяЧасть.Имя, "Товары") > 0 тогда	
			
			имя_дополнительного_расчетного_реквизита = "ОприходованиеТоваров_НомерГТД";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ОприходованиеТоваров_СтранаПроисхождения";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.СтраныМира");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		ИначеЕсли СтрНайти(пар_Вид,"ВозвратТоваровОтПокупателя") > 0 И СтрНайти(ТабличнаяЧасть.Имя, "Товары") > 0 тогда	
			
			имя_дополнительного_расчетного_реквизита = "ВозвратТоваровОтПокупателя_НомерГТД";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ВозвратТоваровОтПокупателя_СтранаПроисхождения";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.СтраныМира");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		ИначеЕсли СтрНайти(пар_Вид,"ПереоценкаОстатковПоставщика") > 0 И СтрНайти(ТабличнаяЧасть.Имя, "ТоварыПоставщика") > 0 тогда	
			
			имя_дополнительного_расчетного_реквизита = "ПереоценкаОстатковПоставщика_НоменклатураПоставщикаНаименование";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Строка");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
			имя_дополнительного_расчетного_реквизита = "ПереоценкаОстатковПоставщика_НоменклатураПоставщикаНоменклатура";
			Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Номенклатура");
			список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
			
		КонецЕсли;
		
		ТЧ.Вставить(ТабличнаяЧасть.Имя,Рекв);
		
	КонецЦикла;
	
	Если пар_Вид = "РеализацияТоваровУслуг" ИЛИ
		пар_Вид = "ВозвратТоваровПоставщику" ИЛИ
		пар_Вид = "ПерестикеровкаПереоценка" ИЛИ
		пар_Вид = "СписаниеТоваров" ИЛИ
		пар_Вид = "ПоступлениеТоваровУслуг" ИЛИ
		пар_Вид = "ПереоценкаОстатковПоставщика" тогда
		
		Рекв = Новый Структура;
		
		л_имя_регистра = "ПартииТоваров";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_СтрокаПрихода";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.ИдентификаторыСтрокПриходов");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_Номенклатура";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Номенклатура");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_Склад";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Склады");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_Организация";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.Организации");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_НомерГТД";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.НомераГТД");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_СтранаПроисхождения";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Справочник.СтраныМира");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_КоличествоПриход";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_КоличествоРасход";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_КоличествоОборот";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_Количество";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_СуммаРублиПриход";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_СуммаРублиРасход";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_СуммаРублиОборот";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_СуммаРубли";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_СуммаБезНДСПриход";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_СуммаБезНДСРасход";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_СуммаБезНДСОборот";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_СуммаБезНДС";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		
		
		
		имя_дополнительного_расчетного_реквизита = пар_Вид + "_" + л_имя_регистра + "_ВнутреннееПеремещение";
		Рекв.Вставить(имя_дополнительного_расчетного_реквизита, "Число");
		список_расчетных_реквизитов_тч = список_расчетных_реквизитов_тч + имя_дополнительного_расчетного_реквизита + ";";
		
		
		ТЧ.Вставить(пар_Вид + "_" + л_имя_регистра,Рекв);
		
	КонецЕсли;
	
	
	Возврат ТЧ;
КонецФункции
Функция ПолучитьПереченьОбъектовОбмена(пар_ВзятьВсеОбъектыБезУчетаПотоков = Ложь) Экспорт
	//http://www.forum.mista.ru/topic.php?id=438413
	ПланОбменаМетаданные = Метаданные.НайтиПоПолномуИмени("ПланОбмена."+ПланОбмена_Имя);
	
    СоставПланаОбмена = Новый ТаблицаЗначений;
	СоставПланаОбмена.Колонки.Добавить("ОбъектМетаданных_Имя");
	СоставПланаОбмена.Колонки.Добавить("ОбъектМетаданных_ПолноеИмя");
    СоставПланаОбмена.Колонки.Добавить("Регистрация");
    СоставПланаОбмена.Колонки.Добавить("Реквизиты_Шапка");
    СоставПланаОбмена.Колонки.Добавить("Реквизиты_ТЧ");
	СоставПланаОбмена.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,0)));
	СоставПланаОбмена.Колонки.Добавить("Поток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,0)));
	
	// выясним текущий состав плана обмена
	Состав = ПланОбменаМетаданные.Состав;
	// и зададим приоритет выгрузки, в случае, если были сделаны соответствующие настройки
	лОбъектыМетаданных = РегистрыСведений.ПриоритетВыгрузкиОбъектов.ПолучитьТаблицуПриоритетов(узел_получатель);
    
	Для каждого Элемент из Состав Цикл
		
		лОбъектМетаданных = Элемент.Метаданные;
		
        Стр = СоставПланаОбмена.Добавить();
		Стр.ОбъектМетаданных_Имя = лОбъектМетаданных.Имя;//Элемент.Метаданные.Имя;
		Стр.ОбъектМетаданных_ПолноеИмя = лОбъектМетаданных.ПолноеИмя();//Элемент.Метаданные.ПолноеИмя();
        Стр.Регистрация = Элемент.АвтоРегистрация;
		Стр.Реквизиты_Шапка = ПолучитьСписокРеквизитовШапки(Стр.ОбъектМетаданных_Имя,Стр.ОбъектМетаданных_ПолноеИмя);
        Стр.Реквизиты_ТЧ = ПолучитьСписокРеквизитовТЧ(Стр.ОбъектМетаданных_Имя,Стр.ОбъектМетаданных_ПолноеИмя);
		
		НайденнаяСтрока = лОбъектыМетаданных.Найти(лОбъектМетаданных);
		Если НайденнаяСтрока = Неопределено Тогда
			Стр.Приоритет = 9999;
			Стр.Поток = 0;
		Иначе
			Стр.Приоритет = НайденнаяСтрока.Приоритет;
			Стр.Поток = НайденнаяСтрока.Поток;
		КонецЕсли;
		
    КонецЦикла;
    
	СоставПланаОбмена.Сортировать("Приоритет ВОЗР");
	
	Если Тест тогда
		Адрес = СоставПланаОбмена.ВыбратьСтроку("Выбери вид выгружаемых объектов");
		Адреса = Новый Массив;
		Адреса.Добавить(Адрес);
		Если НЕ Адрес = Неопределено тогда
			СоставПланаОбмена = СоставПланаОбмена.Скопировать(Адреса);	
		КонецЕсли;
	Иначе
		Если НЕ пар_ВзятьВсеОбъектыБезУчетаПотоков тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Поток",НомерПотока);
			Адреса = СоставПланаОбмена.НайтиСтроки(Отбор);
			СоставПланаОбмена = СоставПланаОбмена.Скопировать(Адреса);	
		КонецЕсли;
	КонецЕсли;
	
    Возврат СоставПланаОбмена;
КонецФункции
Функция ВидОбъектаМетаданныхОбмена(ОбъектМетаданных, Коллекция = Ложь) Экспорт
    
    ВидОбъекта = Неопределено;
	
    Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "Документ";
        Если Коллекция Тогда
            ВидОбъекта = "Документы";
        КонецЕсли;
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "Справочник";
        Если Коллекция Тогда
            ВидОбъекта = "Справочники";
        КонецЕсли;
        
	
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "Константа";
        Если Коллекция Тогда
            ВидОбъекта = "Константы";
        КонецЕсли;
        
        
    ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "Последовательность";
        Если Коллекция Тогда
            ВидОбъекта = "Последовательности";
        КонецЕсли;
        
    ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "ПланВидовХарактеристик";
        Если Коллекция Тогда
            ВидОбъекта = "ПланыВидовХарактеристик";
        КонецЕсли;
        
    ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "ПланСчетов";
        Если Коллекция Тогда
            ВидОбъекта = "ПланыСчетов";
        КонецЕсли;
        
    ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "ПланВидовРасчета";
        Если Коллекция Тогда
            ВидОбъекта = "ПланыВидовРасчета";
        КонецЕсли;
        
    ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "БизнесПроцесс";
        Если Коллекция Тогда
            ВидОбъекта = "БизнесПроцессы";
        КонецЕсли;
        
    ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "Задача";
        Если Коллекция Тогда
            ВидОбъекта = "Задачи";
        КонецЕсли;
        
    ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "РегистрСведений";
        Если Коллекция Тогда
            ВидОбъекта = "РегистрыСведений";
        КонецЕсли;
        
    ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "РегистрНакопления";
        Если Коллекция Тогда
            ВидОбъекта = "РегистрыНакопления";
        КонецЕсли;
        
    ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "РегистрБухгалтерии";
        Если Коллекция Тогда
            ВидОбъекта = "РегистрыБухгалтерии";
        КонецЕсли;
        
    ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
        ВидОбъекта = "РегистрРасчета";
        Если Коллекция Тогда
            ВидОбъекта = "РегистрыРасчета";
        КонецЕсли;
        
    ИначеЕсли ОбъектМетаданных.Родитель() <> Неопределено Тогда
		Родитель = ОбъектМетаданных.Родитель();
		Если ВидОбъектаМетаданныхОбмена(Родитель) = "РегистрРасчета"
			И Родитель.Перерасчеты.Содержит(ОбъектМетаданных) Тогда
			
			ВидОбъекта = "Перерасчет";
			Если Коллекция Тогда
				ВидОбъекта = "Перерасчеты";
			КонецЕсли;
		КонецЕсли;
        
    КонецЕсли;
        
    Возврат ВидОбъекта;
    
КонецФункции
Функция ФайлСуществует(Знач ПутьКФайлу) Экспорт 
	Файл = Новый Файл(ПутьКФайлу); 
	
		//ВыбранныйФайл = Новый Файл(ИмяВременногоФайлика);
		//Если ВыбранныйФайл.Существует() Тогда
		//	//СтрокаПараметров = "Параметры файла:"+Символы.ПС +
		//	//"Полное имя файла: "+ ВыбранныйФайл.ПолноеИмя + Символы.ПС +
		//	//"Имя: "+ ВыбранныйФайл.Имя + Символы.ПС +
		//	//"Имя без расширения: "+ ВыбранныйФайл.ИмяБезРасширения+Символы.ПС+
		//	ИмяВременногоФайлика = ВыбранныйФайл.ИмяБезРасширения;
		//	//"Расширение: "+ ВыбранныйФайл.Расширение+ Символы.ПС+
		//	//"Путь без имени: "+ ВыбранныйФайл.Путь+Символы.ПС+
		//	//"Размер: "+ ВыбранныйФайл.Размер()+ Символы.ПС+
		//	//"Это файл: "+ ВыбранныйФайл.ЭтоФайл()+ Символы.ПС+
		//	//"Изменен: "+ ВыбранныйФайл.ПолучитьВремяИзменения()+Символы.ПС+
		//	//"Только чтение: "+ ВыбранныйФайл.ПолучитьТолькоЧтение()+Символы.ПС+
		//	//"Невидимость: "+ ВыбранныйФайл.ПолучитьНевидимость();
		//	//Сообщить(СтрокаПараметров);
		//Иначе
		//	Продолжить;
		//КонецЕсли;
	
    Возврат Файл.Существует(); 	
КонецФункции

// допы
Функция ВыгрузитьВТекстПары() экспорт
	
	ТЗ1 = Новый ТаблицаЗначений;
	
#Если Клиент Тогда	
	ЗадатьПравилаИгры();
	Если НЕ ЗначениеЗаполнено(узел_отправитель) Тогда Возврат ТЗ1; КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(узел_получатель) Тогда Возврат ТЗ1; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда Возврат ТЗ1; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогДата) Тогда Возврат ТЗ1; КонецЕсли;
	
	ПолучитьПереченьОбъектовОбмена(Истина);
	Если СоставПланаОбмена.Количество() = 0 Тогда Возврат ТЗ1; КонецЕсли;
	
	Отказ_МаскаИмениФайла_2 = "!Отказ 1с7 - шапка'д_ДокументОснование_2' - не найдена ссылка - 1с8_КорректировкаЗаявкиПокупателя_*.txt";
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос(НСтр("ru = 'По КорЗаявок (иначе по КорЗаказов)?';"
	     + " en = 'Do you want to continue?'"), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ_МаскаИмениФайла_2 = "!Отказ 1с7 - шапка'д_ДокументОснование_2' - не найдена ссылка - 1с8_КорректировкаЗаказаПоставщику_*.txt";
	КонецЕсли;
	
	Посмотреть = Ложь;//Истина;
	
	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда	Возврат ТЗ1;	КонецЕсли;	
	СписокФайлов = НайтиФайлы(КаталогОбмена, Отказ_МаскаИмениФайла_2);
	Если СписокФайлов.Количество() = 0 тогда Возврат ТЗ1; КонецЕсли;
	
	
	ТЗ1.Колонки.Добавить("ВидДокумента",,"Тип/Вид объекта");
	ТЗ1.Колонки.Добавить("НомерДокумента",,"Номер/Код");
	ТЗ1.Колонки.Добавить("ИсточникОтказа");
	ТЗ1.Колонки.Добавить("ОписаниеОтказа");
	ТЗ1.Колонки.Добавить("ИмяФайла");
	ТЗ1.Колонки.Добавить("Основание");
	ТЗ1.Колонки.Добавить("ОснованиеСсылка");
	ТЗ1.Колонки.Добавить("ОснованиеРегистрация");
	ТЗ1.Колонки.Добавить("ОснованиеВыгружалось");
	ТЗ1.Колонки.Добавить("ОснованиеОшибка");
	ТЗ1.Колонки.Добавить("Посмотреть");

	НаборЗаписей = РегистрыСведений.ИсторияОбмена1с81с7.СоздатьНаборЗаписей();
	
	сч = 0;
	Для Каждого ФайлДляЗагрузки Из СписокФайлов Цикл
		
		сч = сч + 1;
		//Если сч > 1000 тогда
		//	Прервать;
		//КонецЕсли;
		
		ИмяФайлаОтказа = ФайлДляЗагрузки.ИмяБезРасширения;
		
		м1 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяФайлаОтказа,"-");
		описаниеДок8 = м1[3];
		м2 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(описаниеДок8,"_");
		
		НоваяСтр = ТЗ1.Добавить();
		НоваяСтр.ВидДокумента   = ВходитВСоставПланаОбмена(СокрЛП(м2[1]));//СокрЛП(м2[1]);
		НоваяСтр.НомерДокумента = СокрЛП(м2[2]);
		НоваяСтр.ИсточникОтказа = СокрЛП(м1[1]);
		НоваяСтр.ОписаниеОтказа = СокрЛП(м1[2]);
		НоваяСтр.ИмяФайла = ФайлДляЗагрузки.ПолноеИмя;
		//НоваяСтр.Сч = 1;
		
		
					Текст = "";
					пар_ПолноеИмяФайла = НоваяСтр.ИмяФайла;
					Попытка
						ТекстовыйФайл = Новый ЧтениеТекста(пар_ПолноеИмяФайла, "windows-1251");
						Текст = ТекстовыйФайл.Прочитать();
						ТекстовыйФайл.Закрыть();
					Исключение
					КонецПопытки;
					
					л_стр = СтрПолучитьСтроку(Текст, 2) ;
					Если СтрНайти(л_стр,"ШапкаДанные") = 0 тогда
						Сообщить("err: шапка не найдена[" +  пар_ПолноеИмяФайла + "]");
						Возврат ТЗ1;
					КонецЕсли;
					
					МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(л_стр, "IlI");	
					
					Если МассивПодСтрок.Количество() < 1 тогда
						Сообщить("err: шапка пустая[" +  пар_ПолноеИмяФайла + "]");
						Возврат ТЗ1;
					КонецЕсли;
					
			НоваяСтр.Основание = МассивПодСтрок[МассивПодСтрок.Количество()-1];
			
			МассивПодСтрок2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НоваяСтр.Основание, ";");
			вхУИД = МассивПодСтрок2[0];
			
	НазваниеМенеджераОбъекта = НоваяСтр.ВидДокумента;
	НазваниеМенеджераОбъекта = СтрЗаменить(НазваниеМенеджераОбъекта,"Документ.","Документы.");
	НазваниеМенеджераОбъекта = СтрЗаменить(НазваниеМенеджераОбъекта,"Справочник.","Справочники.");
	л_Команда = НазваниеМенеджераОбъекта + ".ПолучитьСсылку(Новый УникальныйИдентификатор(""" + вхУИД + """))";
	
	СсылкаНаДокумент = Вычислить(л_Команда);
			
			НоваяСтр.ОснованиеСсылка = СсылкаНаДокумент;
			
			
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИсторияОбмена1с81с7.Ссылка,
			|	ИсторияОбмена1с81с7.Ошибка
			|ИЗ
			|	РегистрСведений.ИсторияОбмена1с81с7 КАК ИсторияОбмена1с81с7
			|ГДЕ
			|	ИсторияОбмена1с81с7.Ссылка = &Ссылка";

			Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
			Результат = Запрос.Выполнить().Выгрузить();
			НоваяСтр.ОснованиеВыгружалось = Результат.Количество();
			НоваяСтр.ОснованиеОшибка = ?(НоваяСтр.ОснованиеВыгружалось>0,Результат[0].Ошибка,Ложь);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КорректировкаЗаявкиПокупателяИзменения.Узел,
			|	КорректировкаЗаявкиПокупателяИзменения.Ссылка
			|ИЗ
			|	" + НоваяСтр.ВидДокумента + ".Изменения КАК КорректировкаЗаявкиПокупателяИзменения
			|ГДЕ
			|	КорректировкаЗаявкиПокупателяИзменения.Узел = &Узел
			|	И КорректировкаЗаявкиПокупателяИзменения.Ссылка = &Ссылка";

			Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
			Запрос.УстановитьПараметр("Узел", узел_получатель);
			Результат = Запрос.Выполнить().Выгрузить();
			НоваяСтр.ОснованиеРегистрация = ?(Результат.Количество()>0,Истина,Ложь);
			
			Если Не Посмотреть тогда
				
				Попытка
					 
						НаборЗаписей.Отбор.Ссылка.Установить(СсылкаНаДокумент); 
						НаборЗаписей.Записать(); 
						НаборЗаписей.Очистить();
						
						Если НЕ НоваяСтр.ОснованиеРегистрация тогда
							ПланыОбмена.ЗарегистрироватьИзменения( узел_получатель, СсылкаНаДокумент);
						КонецЕсли;
						
						
						
						НоваяСтр.Посмотреть = Посмотреть;
						
					Исключение
						
						НоваяСтр.Посмотреть = "караул";
						
					КонецПопытки;
					
					Если НоваяСтр.Посмотреть = "караул" тогда
						
					Иначе
						УдалитьФайлы(пар_ПолноеИмяФайла);
					КонецЕсли;
					
			КонецЕсли;
			
		//#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		//#КонецЕсли
	КонецЦикла;
	
	//ТЗ1.ВыбратьСтроку();
	Сообщить(ТЗ1.Количество());
	
	
	#КонецЕсли	

	Возврат ТЗ1;
КонецФункции
Функция ВыгрузитьВТекстПары2() экспорт
	
	ТЗ1 = Новый ТаблицаЗначений;
	
#Если Клиент Тогда	
	ЗадатьПравилаИгры();
	Если НЕ ЗначениеЗаполнено(узел_отправитель) Тогда Возврат ТЗ1; КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(узел_получатель) Тогда Возврат ТЗ1; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда Возврат ТЗ1; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогДата) Тогда Возврат ТЗ1; КонецЕсли;
	
	ПолучитьПереченьОбъектовОбмена(Истина);
	Если СоставПланаОбмена.Количество() = 0 Тогда Возврат ТЗ1; КонецЕсли;
	
	Отказ_МаскаИмениФайла_2 = "!Отказ 1с7 - шапка'ДокументОснование' - не найдена ссылка - 1с8_*.txt";
	//Режим = РежимДиалогаВопрос.ДаНет;
	//Ответ = Вопрос(НСтр("ru = 'По КорЗаявок (иначе по КорЗаказов)?';"
	//     + " en = 'Do you want to continue?'"), Режим, 0);
	//Если Ответ = КодВозвратаДиалога.Нет Тогда
	//	Отказ_МаскаИмениФайла_2 = "!Отказ 1с7 - шапка'д_ДокументОснование_2' - не найдена ссылка - 1с8_КорректировкаЗаказаПоставщику_*.txt";
	//КонецЕсли;
	
	Посмотреть = Ложь;//Истина;
	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда	Возврат ТЗ1;	КонецЕсли;	
	СписокФайлов = НайтиФайлы(КаталогОбмена, Отказ_МаскаИмениФайла_2);
	Если СписокФайлов.Количество() = 0 тогда Возврат ТЗ1; КонецЕсли;
	
	ТЗ1.Колонки.Добавить("ВидДокумента",,"Тип/Вид объекта");
	ТЗ1.Колонки.Добавить("НомерДокумента",,"Номер/Код");
	ТЗ1.Колонки.Добавить("ИсточникОтказа");
	ТЗ1.Колонки.Добавить("ОписаниеОтказа");
	ТЗ1.Колонки.Добавить("ИмяФайла");
	ТЗ1.Колонки.Добавить("УИД");
	ТЗ1.Колонки.Добавить("сЦылка");
	ТЗ1.Колонки.Добавить("ОснованиеСсылка");
	ТЗ1.Колонки.Добавить("ОснованиеРегистрация");
	ТЗ1.Колонки.Добавить("ОснованиеВыгружалось");
	ТЗ1.Колонки.Добавить("ОснованиеОшибка");
	ТЗ1.Колонки.Добавить("Посмотреть");

	НаборЗаписей = РегистрыСведений.ИсторияОбмена1с81с7.СоздатьНаборЗаписей();
	
	сч = 0;
	Для Каждого ФайлДляЗагрузки Из СписокФайлов Цикл
		
		сч = сч + 1;
		//Если сч > 1000 тогда
			//Прервать;
		//КонецЕсли;
		
		ИмяФайлаОтказа = ФайлДляЗагрузки.ИмяБезРасширения;
		
		м1 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ИмяФайлаОтказа,"-");
		описаниеДок8 = м1[3];
		м2 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(описаниеДок8,"_");
		
		НоваяСтр = ТЗ1.Добавить();
		НоваяСтр.ВидДокумента   = ВходитВСоставПланаОбмена(СокрЛП(м2[1]));//СокрЛП(м2[1]);
		НоваяСтр.НомерДокумента = СокрЛП(м2[2]);
		НоваяСтр.ИсточникОтказа = СокрЛП(м1[1]);
		НоваяСтр.ОписаниеОтказа = СокрЛП(м1[2]);
		НоваяСтр.ИмяФайла = ФайлДляЗагрузки.ПолноеИмя;
		//НоваяСтр.Сч = 1;
		
		
					Текст = "";
					пар_ПолноеИмяФайла = НоваяСтр.ИмяФайла;
					Попытка
						ТекстовыйФайл = Новый ЧтениеТекста(пар_ПолноеИмяФайла, "windows-1251");
						Текст = ТекстовыйФайл.Прочитать();
						ТекстовыйФайл.Закрыть();
					Исключение
					КонецПопытки;
					
					л_стр = СтрПолучитьСтроку(Текст, 2) ;
					Если СтрНайти(л_стр,"ШапкаДанные") = 0 тогда
						Сообщить("err: шапка не найдена[" +  пар_ПолноеИмяФайла + "]");
						Возврат ТЗ1;
					КонецЕсли;
					
					МассивПодСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(л_стр, "IlI");	
					
					Если МассивПодСтрок.Количество() < 2 тогда
						Сообщить("err: шапка пустая[" +  пар_ПолноеИмяФайла + "]");
						Возврат ТЗ1;
					КонецЕсли;
					
			НоваяСтр.ОснованиеСсылка = МассивПодСтрок[1];
			
			МассивПодСтрок2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НоваяСтр.ОснованиеСсылка, ";");
			вхУИД = МассивПодСтрок2[0];
			НоваяСтр.УИД = вхУИД;
			
	НазваниеМенеджераОбъекта = НоваяСтр.ВидДокумента;
	НазваниеМенеджераОбъекта = СтрЗаменить(НазваниеМенеджераОбъекта,"Документ.","Документы.");
	НазваниеМенеджераОбъекта = СтрЗаменить(НазваниеМенеджераОбъекта,"Справочник.","Справочники.");
	л_Команда = НазваниеМенеджераОбъекта + ".ПолучитьСсылку(Новый УникальныйИдентификатор(""" + вхУИД + """))";
	
	СсылкаНаДокумент = Вычислить(л_Команда);
	СсылкаНаДокументОснование = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаДокумент,"ДокументОснование");
	Если НЕ ЗначениеЗаполнено(СсылкаНаДокументОснование) тогда
		Продолжить;
	КонецЕсли;
		
	НоваяСтр.сЦылка = СсылкаНаДокумент;
	НоваяСтр.ОснованиеСсылка = СсылкаНаДокументОснование;
			
			
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИсторияОбмена1с81с7.Ссылка,
			|	ИсторияОбмена1с81с7.Ошибка
			|ИЗ
			|	РегистрСведений.ИсторияОбмена1с81с7 КАК ИсторияОбмена1с81с7
			|ГДЕ
			|	ИсторияОбмена1с81с7.Ссылка = &Ссылка";

			Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокументОснование);
			Результат = Запрос.Выполнить().Выгрузить();
			НоваяСтр.ОснованиеВыгружалось = Результат.Количество();
			НоваяСтр.ОснованиеОшибка = ?(НоваяСтр.ОснованиеВыгружалось>0,Результат[0].Ошибка,Ложь);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КорректировкаЗаявкиПокупателяИзменения.Узел,
			|	КорректировкаЗаявкиПокупателяИзменения.Ссылка
			|ИЗ
			|	" + НоваяСтр.ВидДокумента + ".Изменения КАК КорректировкаЗаявкиПокупателяИзменения
			|ГДЕ
			|	КорректировкаЗаявкиПокупателяИзменения.Узел = &Узел
			|	И КорректировкаЗаявкиПокупателяИзменения.Ссылка = &Ссылка";

			Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокументОснование);
			Запрос.УстановитьПараметр("Узел", узел_получатель);
			Результат = Запрос.Выполнить().Выгрузить();
			НоваяСтр.ОснованиеРегистрация = ?(Результат.Количество()>0,Истина,Ложь);
			
			Если Не Посмотреть тогда
				
				Попытка
					 
						НаборЗаписей.Отбор.Ссылка.Установить(СсылкаНаДокумент); 
						НаборЗаписей.Записать(); 
						НаборЗаписей.Очистить();
						
						Если НЕ НоваяСтр.ОснованиеРегистрация тогда
							ПланыОбмена.ЗарегистрироватьИзменения( узел_получатель, СсылкаНаДокумент);
						КонецЕсли;
						
						НаборЗаписей.Отбор.Ссылка.Установить(СсылкаНаДокументОснование); 
						НаборЗаписей.Записать(); 
						НаборЗаписей.Очистить();
						
						Если НЕ НоваяСтр.ОснованиеРегистрация тогда
							ПланыОбмена.ЗарегистрироватьИзменения( узел_получатель, СсылкаНаДокументОснование);
						КонецЕсли;
						
						НоваяСтр.Посмотреть = Посмотреть;
						
					Исключение
						
						НоваяСтр.Посмотреть = "караул";
						
					КонецПопытки;
					
					Если НоваяСтр.Посмотреть = "караул" тогда
						
					Иначе
						УдалитьФайлы(пар_ПолноеИмяФайла);
					КонецЕсли;
					
			КонецЕсли;
			
		//#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		//#КонецЕсли
	КонецЦикла;
	
	//ТЗ1.ВыбратьСтроку();
	Сообщить(ТЗ1.Количество());
	
	
	#КонецЕсли	

	Возврат ТЗ1;
КонецФункции
Функция УдалитьВсеОтказы() экспорт
	
	ТЗ1 = Новый ТаблицаЗначений;
	
#Если Клиент Тогда	
	ЗадатьПравилаИгры();
	Если НЕ ЗначениеЗаполнено(узел_отправитель) Тогда Возврат ТЗ1; КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(узел_получатель) Тогда Возврат ТЗ1; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда Возврат ТЗ1; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогДата) Тогда Возврат ТЗ1; КонецЕсли;
	
	ПолучитьПереченьОбъектовОбмена(Истина);
	Если СоставПланаОбмена.Количество() = 0 Тогда Возврат ТЗ1; КонецЕсли;
	
	Отказ_МаскаИмениФайла_2 = "!Отказ 1с7*.txt";
	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда	Возврат ТЗ1;	КонецЕсли;	
	СписокФайлов = НайтиФайлы(КаталогОбмена, Отказ_МаскаИмениФайла_2);
	Если СписокФайлов.Количество() = 0 тогда Возврат ТЗ1; КонецЕсли;
	
	сч = 0;
	Для Каждого ФайлДляЗагрузки Из СписокФайлов Цикл
		
		сч = сч + 1;
		//Если сч > 1000 тогда
		//	Прервать;
		//КонецЕсли;
		
		ФайлДляЗагрузки_ПолноеИмя = ФайлДляЗагрузки.ПолноеИмя;
		Сообщить(ФайлДляЗагрузки_ПолноеИмя);
		УдалитьФайлы(ФайлДляЗагрузки_ПолноеИмя);
		
	КонецЦикла;
	
	#КонецЕсли	

	Возврат ТЗ1;
КонецФункции
Процедура ВыгрузитьДанныеМХ3() экспорт
	
	ЗадатьПравилаИгры();
	Если НЕ ЗначениеЗаполнено(узел_отправитель) Тогда Возврат; КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(узел_получатель) Тогда Возврат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда Возврат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогДата) Тогда Возврат; КонецЕсли;
	
	ПолучитьПереченьОбъектовОбмена();
	Если СоставПланаОбмена.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	//СнятьСРегистрацииИзменения();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	| ПоступлениеТоваровУслуг.Ссылка КАК сЦылка
	|ИЗ
	| Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	| ПОДСТРОКА(ПоступлениеТоваровУслуг.Номер, 1, 1) = ""У""
	| И ПоступлениеТоваровУслуг.Дата = ДАТАВРЕМЯ(2018, 6, 1)
	| И ПоступлениеТоваровУслуг.Проведен
	| И ПоступлениеТоваровУслуг.ВидОперацииПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.ЗачетТовараVMI)";

	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 тогда
		
		СформироватьФайлыВыгрузки(Результат.ВыгрузитьКолонку("сЦылка"));
	
	КонецЕсли;
	
КонецПроцедуры
Процедура ВыгрузитьДанныеВП(пар_Мас) экспорт
	
	ЗадатьПравилаИгры();
	Если НЕ ЗначениеЗаполнено(узел_отправитель) Тогда Возврат; КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(узел_получатель) Тогда Возврат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогОбмена) Тогда Возврат; КонецЕсли;	
	Если РаботаСКаталогамиНеВозможна(КаталогДата) Тогда Возврат; КонецЕсли;
	
	ПолучитьПереченьОбъектовОбмена();
	Если СоставПланаОбмена.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	//СнятьСРегистрацииИзменения();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК сЦылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Номер В (&Номер)";

	Запрос.УстановитьПараметр("Номер",пар_Мас);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 тогда
		
		//Для каждого лвп из Результат цикл
		//	лО = лвп.сЦылка.получитьОбъект();
		//	лО.Записать(РежимЗаписиДокумента.Проведение);
		//КонецЦикла;
		
		СформироватьФайлыВыгрузки(Результат.ВыгрузитьКолонку("сЦылка"));
	
	КонецЕсли;
	
КонецПроцедуры
Функция ВернутьКолЗареганныхКОбмену(пар_ВидОбъекта)
	
	КолИт = 0;
	ПроблемныйДокДляТочечнойВыгрузки = "";
	МаксимальноеКоличествоОбъектовВПакетеВыгрузки_До = МаксимальноеКоличествоОбъектовВПакетеВыгрузки;
	МаксимальноеКоличествоОбъектовВПакетеВыгрузки = 1000000;
	
	ВыгружатьВсеЗареганные_До = ВыгружатьВсеЗареганные;
	ВыгружатьВсеЗареганные = Истина;
	
		Запрос_Текст = СформироватьТекстЗапросаПоЗарегистированнымОбъектам(пар_ВидОбъекта);
		//Запрос_Текст = СтрЗаменить(Запрос_Текст,"И (НЕ Т.Ссылка В (ВЫБРАТЬ сЦылка ИЗ ОШИБКИ))","");
		Запрос_Текст = СтрЗаменить(Запрос_Текст,"И Т.Ссылка = &ПроблемныйДок","");
		Запрос_Текст = СтрЗаменить(Запрос_Текст,"  И (НЕ Т.Ссылка В (ВЫБРАТЬ сЦылка ИЗ ОШИБКИ)) И (РазностьДат(&ТекДт,ЕСТЬNULL(ИСТОРИЯ.ДтПоследнейВыгрузки, &ТекДт),минута) = 0 или РазностьДат(&ТекДт,ЕСТЬNULL(ИСТОРИЯ.ДтПоследнейВыгрузки, &ТекДт),минута) > 60)","");
		//сообщить(Запрос_Текст);
		
		Запрос = Новый Запрос;
		Запрос.Текст = Запрос_Текст ;
		Запрос.УстановитьПараметр("Узел", узел_получатель);
		Если СтрНайти(пар_ВидОбъекта,"Документ")  > 0 тогда
			//Запрос.УстановитьПараметр("КрайняяДатаВыгрузкиДокументовИз1с8в1с7", Дата(2018,6,2,8,0,0));
			Запрос.УстановитьПараметр("КрайняяДатаВыгрузкиДокументовИз1с8в1с7", СДатыВключительно);
			Запрос.УстановитьПараметр("КрайняяДатаВыгрузкиДокументовИз1с8в1с7_К", ПоДатуВключительно);
			Если ЗначениеЗаполнено(ПроблемныйДокДляТочечнойВыгрузки) тогда
				Запрос.УстановитьПараметр("ПроблемныйДок",ПроблемныйДокДляТочечнойВыгрузки);
			КонецЕсли;
		ИначеЕсли СтрНайти(пар_ВидОбъекта,"Справочник")  > 0 тогда
			Запрос.УстановитьПараметр("СтрП", "");
		КонецЕсли;
		Запрос.УстановитьПараметр("ТекДт", ТекущаяДата()+1);
		
		КолИт = Запрос.Выполнить().Выгрузить().Количество();
		
		МаксимальноеКоличествоОбъектовВПакетеВыгрузки = МаксимальноеКоличествоОбъектовВПакетеВыгрузки_До;
		ВыгружатьВсеЗареганные = ВыгружатьВсеЗареганные_До;
		
	Возврат КолИт;
КонецФункции

//{{ХудинВВ 20180208 Кэш реквизитов
Процедура ИнициализироватьмКэшРеквизитовОбъектов()
	
	мКэшРеквизитовОбъектов = Новый ТаблицаЗначений;
	мКэшРеквизитовОбъектов.Колонки.Добавить("Объект");
	мКэшРеквизитовОбъектов.Колонки.Добавить("ИмяРеквизита");
	мКэшРеквизитовОбъектов.Колонки.Добавить("Значение");
	
	мКэшРеквизитовОбъектов.Индексы.Добавить("Объект, ИмяРеквизита");
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизита(вхСсылкаНаОбъект, ИмяРеквизита)
	
	Если Не ИспользоватьКэшРеквизитовОбъектов Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаОбъект, ИмяРеквизита);
	КонецЕсли;
	
	//Сначала из кэша	
	ПолученноеЗначение = ПолучитьЗначениеРеквизитаИзКэша(вхСсылкаНаОбъект, ИмяРеквизита);
	
	Если ПолученноеЗначение = Неопределено Тогда
		
		ПолученноеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаОбъект, ИмяРеквизита);
		
		ДобавитьЗначениеРеквизитаВКэш(вхСсылкаНаОбъект, ИмяРеквизита, ПолученноеЗначение);
	
	КонецЕсли;
	
	Возврат ПолученноеЗначение;	
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаИзКэша(вхСсылкаНаОбъект, ИмяРеквизита)
	
	ЗначениеРеквизита = Неопределено;
	
	Если мКэшРеквизитовОбъектов = Неопределено Тогда
		ИнициализироватьмКэшРеквизитовОбъектов();
	КонецЕсли;
	
	НайденныеСтроки = мКэшРеквизитовОбъектов.НайтиСтроки(Новый Структура("Объект, ИмяРеквизита", вхСсылкаНаОбъект, ИмяРеквизита));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗначениеРеквизита = НайденныеСтроки[0].Значение;
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Процедура ДобавитьЗначениеРеквизитаВКэш(вхСсылкаНаОбъект, ИмяРеквизита, ПолученноеЗначение)
	
	Если мКэшРеквизитовОбъектов = Неопределено Тогда
		ИнициализироватьмКэшРеквизитовОбъектов();
	КонецЕсли;
	
	Если мКэшРеквизитовОбъектов.Количество() < мМаксимальноеЧислоСтрокКэша Тогда
		
		НоваяСтрока = мКэшРеквизитовОбъектов.Добавить();
		НоваяСтрока.Объект 			= вхСсылкаНаОбъект;
		НоваяСтрока.ИмяРеквизита 	= ИмяРеквизита;
		НоваяСтрока.Значение 		= ПолученноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры
//}} 

// регламент
#Если Сервер тогда
Процедура ВыполнитьРегламентноеЗадание() Экспорт
	//Если НЕ ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() тогда
	//	Возврат;
	//КонецЕсли;
	
	ВыгрузитьДанные();
	
КонецПроцедуры
#КонецЕсли

ИнициализироватьмКэшРеквизитовОбъектов();

мМаксимальноеЧислоСтрокКэша =  200000;