Перем мЗаписыватьИсториюОбмена;

Процедура ВыполнитьРегламентноеЗадание() Экспорт
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ВыполнитьРегламентноеЗадание";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если ЭтоАктивнаяЗадачаJirа(Справочники.ЗадачиJira.XX2297) Тогда
		
		//ХудинВВ XX2297 17052019
		ПланыОбмена.ОбменПартКом83_Сайт_Возвраты.ЗагрузитьСообщениеОбмена();
		ПланыОбмена.ОбменПартКом83_Сайт_Возвраты.ОбработатьОбъекты();
		
	Иначе
		
		КаталогОбмена = ВозвратыОтПокупателяСервер.КаталогОбменаССайтом(Ложь, Истина, 1);
		ВыполнитьЗагрузку();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузку() Экспорт
	
	ВыполнитьЗагрузкуАРВИзКаталога();
	
	ВыполнитьЗагрузкуНомеровКлиента();
	
КонецПроцедуры

//Загрузка номера и даты клиента
Процедура ВыполнитьЗагрузкуНомеровКлиента() Экспорт
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ВыполнитьЗагрузкуНомеровКлиента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Возврат;
	
	Если Не ЗначениеЗаполнено(КаталогОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеФайлы = НайтиФайлы(КаталогОбмена, "return_docs_*.txt");
	
	Для каждого НайденныйФайл Из НайденныеФайлы Цикл
		
		ТекстОшибки = "";
		РезультатЗагрузки = ВыполнитьЗагрузкуНомеровИзФайла(НайденныйФайл, ТекстОшибки);
		
		ОтветОтправлен = ОтправитьОтвет(НайденныйФайл.ИмяБезРасширения,
		РезультатЗагрузки.Штрихкод, 
		РезультатЗагрузки.АктЗаписан, 
		РезультатЗагрузки.НомераДокументовКлиентаПолучены, 
		РезультатЗагрузки.ТекстОшибки);
		
		Если ОтветОтправлен И НайденныйФайл.Существует() Тогда
			УдалитьФайлы(НайденныйФайл.ПолноеИмя);			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаДатой(вхСтрока)
	
	Мас = СтрРазделить(вхСтрока, ".", Истина);
	
	Возврат Дата(Мас[2], Мас[1], Мас[0]);
	
	
КонецФункции

Функция ВыполнитьЗагрузкуНомеровИзФайла(вхФайл, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ВыполнитьЗагрузкуНомеровИзФайла";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ВозвращаемоеЗначение = Новый Структура("Штрихкод, АктЗаписан, НомераДокументовКлиентаПолучены, ТекстОшибки", "", Ложь, Ложь, "");
	
	ЧтениеТекста = Новый ЧтениеТекста(вхФайл.ПолноеИмя);
	ТекстФайла  = ЧтениеТекста.Прочитать();
	МассивДанныхФайла =	СтрРазделить(ТекстФайла, Символы.ПС,Истина);
	
	Если МассивДанныхФайла.Количество() <> 11 Тогда
		ТекстОшибки = "Неверная структура файла";
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
		
	НомерРТУ = МассивДанныхФайла[6];
	Если СтрДлина(НомерРТУ) < 11 Тогда 
		НомерРТУ=Лев(НомерРТУ,4)+"0"+Сред(НомерРТУ,5);
	КонецЕсли;	

	
	МассивНомерДатаРТУКлиента = СтрРазделить(МассивДанныхФайла[9], ";", Истина);
	НомерРТУКлиента = МассивНомерДатаРТУКлиента[0];
	ДатаРТУКлиента 	= СтрокаДатой(МассивНомерДатаРТУКлиента[1]);
	
	МассивНомерДатаСчФКлиента = СтрРазделить(МассивДанныхФайла[10], ";", Истина);
	НомерСчФКлиента = МассивНомерДатаСчФКлиента[0];
	ДатаСчФКлиента 	= СтрокаДатой(МассивНомерДатаСчФКлиента[1]);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктРассмотренияВозврата.Ссылка
		|ИЗ
		|	Документ.АктРассмотренияВозврата КАК АктРассмотренияВозврата
		|ГДЕ
		|	АктРассмотренияВозврата.ДокументПродажи.Номер = &Номер
		|	И АктРассмотренияВозврата.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И НЕ АктРассмотренияВозврата.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДатаНач", 	ДобавитьМесяц(ТекущаяДата(),-3));
	Запрос.УстановитьПараметр("ДатаКон", 	ДобавитьМесяц(ТекущаяДата(),3));
	Запрос.УстановитьПараметр("Номер", 		НомерРТУ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ВозвращаемоеЗначение.ТекстОшибки = "Не найден акт возврата по накладной с номером "+НомерРТУ;
		Возврат ВозвращаемоеЗначение;
	ИначеЕсли Выборка.Количество() > 1 Тогда
		ВозвращаемоеЗначение.ТекстОшибки = "Найдено несколько актов возврата для накладной с номером "+НомерРТУ;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Выборка.Следующий();
	ВозвращаемоеЗначение.АктЗаписан = Истина; //мы его нашли
	
	ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	ДокументОбъект.НомерНакладнойКлиента 	= НомерРТУКлиента;
	ДокументОбъект.ДатаНакладнойКлиента 	= ДатаРТУКлиента;
	ДокументОбъект.НомерСчетаФактурыКлиента = НомерСчФКлиента;
	ДокументОбъект.ДатаСчетаФактурыКлиента 	= ДатаСчФКлиента;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		//Ошибка заполнения документа
		КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
		, 
		Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиАРВССайта,
		ТекстОшибки,
		,
		Истина,
		вхФайл.ПолноеИмя + "
		|
		| Ошибка: " + ТекстОшибки + "
		|
		| Файл: " + ТекстФайла,
		"Обработка: Загрузка АРВ с сайта");
		
		Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
		
		Возврат ВозвращаемоеЗначение;

	Иначе
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ВозвращаемоеЗначение.НомераДокументовКлиентаПолучены = Истина;
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			ДобавитьвТекстОшибки("Ошибка при проведении акта: " +ОписаниеОшибки, ТекстОшибки);
			
			//Ошибка проведения документа
			КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
			, 
			Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиАРВССайта,
			ТекстОшибки,
			,
			Истина,
			вхФайл.ПолноеИмя + "
			|
			| Ошибка: " + ТекстОшибки + "
			|
			| Файл: " + ТекстФайла,
			"Обработка: Загрузка АРВ с сайта");
			
			Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если мЗаписыватьИсториюОбмена Тогда
		РегистрыСведений.ИсторияОбменаССайтомВозвраты.Добавить(
		вхФайл.ПолноеИмя,
		ДокументОбъект.Ссылка,
		ТекстФайла,
		НЕ ВозвращаемоеЗначение.АктЗаписан,
		ТекстОшибки,
		Ложь);
	КонецЕсли;
	
	ВозвращаемоеЗначение.Штрихкод 							= ДокументОбъект.Штрихкод;
	ВозвращаемоеЗначение.ТекстОшибки 						= ТекстОшибки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Загрузка АРВ

#Область ЗагрузкаWS

////////Загрузка из WS//////////////////////////////

//ХудинВВ XX-2297 17052019
Процедура ВыполнитьЗагрузкуАРВWS(ДанныеОбъекта, СтруктураОтчета) Экспорт
	
	//СтруктураОтчета = Новый Структура("СсылкаНаОбъект,Ошибка,ВременнаяОшибка,ТекстОшибки, Обработано", Неопределено, Ложь, Ложь, "", Ложь);
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ВыполнитьЗагрузкуАРВWS";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Штрихкод = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураДанныхАкта = ЗаполнитьСтруктуруДанныхАктаWS(ДанныеОбъекта);
		ДокументОбъект 	= СоздатьАРВWS(СтруктураДанныхАкта, СтруктураОтчета);
		
		Если НЕ СтруктураОтчета.Ошибка И ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктРассмотренияВозврата") Тогда
			
			Штрихкод = ДокументОбъект.Штрихкод;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(
			ДокументОбъект.Ссылка,
			Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьПереходВСледующийСтатус,
			ДокументОбъект.СтатусДокумента);
			
			СтруктураОтчета.СсылкаНаОбъект 	= ДокументОбъект.Ссылка;
			СтруктураОтчета.Ошибка 			= Ложь;
			СтруктураОтчета.ТекстОшибки 	= "";
			СтруктураОтчета.Обработано 		= Истина;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = ОписаниеОшибки();
		
		ТекстОшибки = "Ошибка при проведении акта: "+ОписаниеОшибки;
		СтруктураОтчета.СсылкаНаОбъект 	= Штрихкод;
		СтруктураОтчета.Ошибка 			= Истина;
		СтруктураОтчета.ТекстОшибки 	= ТекстОшибки;
		СтруктураОтчета.Обработано 		= Истина;
		
	КонецПопытки;
	
	ЗаписатьРезультатОбработкиWS(СтруктураОтчета, ДанныеОбъекта);
	
КонецПроцедуры

Процедура ЗаписатьРезультатОбработкиWS(СтруктураОтчета, ДанныеОбъекта)
	
	//фиксируем крит событие
	Если СтруктураОтчета.Ошибка Тогда
		
		КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
		, 
		Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиАРВССайта,
		СтруктураОтчета.ТекстОшибки,
		,
		Истина,
		ЗначениеВСтрокуВнутр(ДанныеОбъекта),
		"Обработка: Загрузка АРВ с сайта, ЗаписатьРезультатОбработкиWS()");
		
	КонецЕсли;
	
	//Запишем ответ для сайта
	СтруктураПараметровСообщения = РегистрыСведений.СообщенияПроцессаВозвратаОтПокупателяДляСайта.СтруктураПараметровСообщения();
	СтруктураПараметровСообщения.ТипСообщения 				= Перечисления.ТипыСообщенийПроцессаВозвратовДляСайта.РезультатЗагрузки;
	СтруктураПараметровСообщения.Штрихкод 					= ДанныеОбъекта.IDZaprosa;
	СтруктураПараметровСообщения.АктРассмотренияВозврата 	= СтруктураОтчета.СсылкаНаОбъект;
		
	СтруктураПараметровСообщения.Сообщение = ?(СтруктураОтчета.Ошибка, "Ошибка", "Успешно");
	
	СтруктураПараметровСообщения.ДопСведения.Вставить("Ошибка", СтруктураОтчета.Ошибка);
	СтруктураПараметровСообщения.ДопСведения.Вставить("ТекстОшибки", СтруктураОтчета.ТекстОшибки);
	
	РегистрыСведений.СообщенияПроцессаВозвратаОтПокупателяДляСайта.Добавить(СтруктураПараметровСообщения, Истина);
	
КонецПроцедуры

Функция СоздатьАРВWS(СтруктураДанныхАкта, СтруктураОтчета)
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_СоздатьАРВWS";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//Шапка
	НайденныйДокумент = Документы.АктРассмотренияВозврата.НайтиПоРеквизиту("Штрихкод", СтруктураДанныхАкта.Штрихкод);
	Если Перезаписывать И ЗначениеЗаполнено(НайденныйДокумент) Тогда
		ДокументОбъект = НайденныйДокумент.ПолучитьОбъект();
	Иначе
		Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
			
			ТекстОшибки = "Акт возврата с идентификатором """+СтруктураДанныхАкта.Штрихкод+""" уже существует";
			СтруктураОтчета.СсылкаНаОбъект 	= НайденныйДокумент;
			СтруктураОтчета.Ошибка 			= Истина;
			СтруктураОтчета.ТекстОшибки 	= ТекстОшибки;
			СтруктураОтчета.Обработано 		= Истина;
			
			Возврат Неопределено;

		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		ДокументОбъект = Документы.АктРассмотренияВозврата.СоздатьДокумент();
	КонецЕсли;
	ДокументОбъект.Дата = ТекущаяДата();
	ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_Новый;
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураДанныхАкта);
	
	ДокументОбъект.Контрагент = Справочники.Контрагенты.НайтиПоКоду(СтруктураДанныхАкта.КодКонтрагента);
	Если Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		
		ТекстОшибки = "Не найден контрагент с кодом """+СтруктураДанныхАкта.КодКонтрагента+"""";
		СтруктураОтчета.СсылкаНаОбъект 	= СтруктураДанныхАкта.Штрихкод;
		СтруктураОтчета.Ошибка 			= Истина;
		СтруктураОтчета.ТекстОшибки 	= ТекстОшибки;
		СтруктураОтчета.Обработано 		= Истина;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДокументОбъект.ДокументПродажи = ДокументПродажи(СтруктураДанныхАкта.НомерРТУ,  СтруктураДанныхАкта.ДатаРТУ, ДокументОбъект.Контрагент);
	
	//Попробуем получить из базы 77 спб
	Если ЗагружатьИз77 Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
			//Если найденная рту была загружена из 77, то перезаполним её
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	_ДляПереносаДанных.Объект
			|ИЗ
			|	РегистрСведений._ДляПереносаДанных КАК _ДляПереносаДанных
			|ГДЕ
			|	_ДляПереносаДанных.Объект = &Объект";
			
			Запрос.УстановитьПараметр("Объект", ДокументОбъект.ДокументПродажи);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				ПараметрыПолучения = Новый Структура("Номер77,Дата77,ПерезаполнятьШапку,ПерезаполнятьТЧТовары",
				СтруктураДанныхАкта.НомерРТУ,СтруктураДанныхАкта.ДатаРТУ,Истина,Истина);
				НайденныйДокумент = ОбменДаннымиВызовСервера.ПолучитьДокументИз77(ПараметрыПолучения);
				Если Не ЗначениеЗаполнено(НайденныйДокумент) Тогда
					ПараметрыПолучения.Номер77 		 = СтруктураДанныхАкта.НомерРТУ2;
					ПараметрыПолучения.Дата77		 = СтруктураДанныхАкта.ДатаРТУ2;
					ОбменДаннымиВызовСервера.ПолучитьДокументИз77(ПараметрыПолучения);
				КонецЕсли;
				
			КонецЕсли;
			
			
		Иначе
			
			ПараметрыПолучения = Новый Структура("Номер77,Дата77,ПерезаполнятьШапку,ПерезаполнятьТЧТовары",
			СтруктураДанныхАкта.НомерРТУ,СтруктураДанныхАкта.ДатаРТУ,Истина,Истина);
			
			ДокументОбъект.ДокументПродажи = ОбменДаннымиВызовСервера.ПолучитьДокументИз77(ПараметрыПолучения);
			Если Не ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
				ПараметрыПолучения.Номер77 		 = СтруктураДанныхАкта.НомерРТУ2;
				ПараметрыПолучения.Дата77		 = СтруктураДанныхАкта.ДатаРТУ2;
				ДокументОбъект.ДокументПродажи 	 = ОбменДаннымиВызовСервера.ПолучитьДокументИз77(ПараметрыПолучения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;


	Если Не ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
		
		ТекстОшибки = "Не найден документ продажи с номером """+СтруктураДанныхАкта.НомерРТУ+""" от "+СтруктураДанныхАкта.ДатаРТУ;
		СтруктураОтчета.СсылкаНаОбъект 	= СтруктураДанныхАкта.Штрихкод;
		СтруктураОтчета.Ошибка 			= Истина;
		СтруктураОтчета.ТекстОшибки 	= ТекстОшибки;
		СтруктураОтчета.Обработано 		= Истина;
		
		Возврат Неопределено;
		
	КонецЕсли;

	
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
		ДокументОбъект.ДоговорКонтрагента = ДокументОбъект.ДокументПродажи.ДоговорКонтрагента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ДокументОбъект.Организация = ДокументОбъект.ДоговорКонтрагента.Организация;
	КонецЕсли;
	
	//ХудинВВ XX-2734 19.06.2019 ((
	ОрганизацияЗакрыта = Справочники.Организации.ОрганизацияЗакрыта(ДокументОбъект.Организация, ДокументОбъект.Дата);
	Если ОрганизацияЗакрыта Тогда
		ДокументОбъект.Организация 			= ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.Организация;	
		ДокументОбъект.ДоговорКонтрагента 	= ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента;
	КонецЕсли;
	//))
	
	Если ЗначениеЗаполнено(СтруктураДанныхАкта.КодВозврата) 
		И Число(СтруктураДанныхАкта.КодВозврата) <> 0 Тогда
		КодВозвратаСсылка = Справочники.КодыВозврата.НайтиПоКоду(Число(СтруктураДанныхАкта.КодВозврата));
		ДокументОбъект.КодВозврата = КодВозвратаСсылка;
	КонецЕсли;
	
	СоответствиеПричинВозврата = СоответствиеПричинВозврата();
	ПричинаВозврата = СоответствиеПричинВозврата.Получить(СтруктураДанныхАкта.ПричинаВозврата);
	Если Не ЗначениеЗаполнено(ПричинаВозврата) Тогда
		ДобавитьвТекстОшибки("Не найдена причина возврата для причины сайта: "+СтруктураДанныхАкта.ПричинаВозврата, ТекстОшибки);
	КонецЕсли;
	
	Если ПричинаВозврата = Справочники.ПричиныВозврата.БракВыявленныйДоУстановки
		ИЛИ ПричинаВозврата = Справочники.ПричиныВозврата.БракВыявленныйПослеУстановки Тогда
		ДокументОбъект.ПодпричинаВозврата = ПричинаВозврата;
		ПричинаВозврата =  Справочники.ПричиныВозврата.БракВыявленныйПослеПолученияТовара;
	КонецЕсли;
	ДокументОбъект.ПричинаВозврата = ПричинаВозврата;
	
	Если СтруктураДанныхАкта.БезоговорочныйВозврат = "Безоговорочный" Тогда
		ДокументОбъект.БезоговорочныйВозврат = Истина;		
	КонецЕсли;
	
	ДокументОбъект.СуммаКомпенсации 	= СтруктураДанныхАкта.СуммаКомпенсации;

	ВариантУчетаНДС = УчетНДСПовтИсп.ВариантУчетаНДСОрганизации(ДокументОбъект.Организация);
	ДокументОбъект.УчитыватьНДС 		= УчетНДСПовтИсп.УчитыватьНДСПоВариантуУчета(ВариантУчетаНДС, ДокументОбъект.ДоговорКонтрагента.ВидОплаты); 
	ДокументОбъект.СуммаВключаетНДС 	= ДокументОбъект.УчитыватьНДС;
	
	
	//Поиск строки заявки в РТУ	
	ТаблицаДляПоискаSSID = Новый ТаблицаЗначений;
	ТаблицаДляПоискаSSID.Колонки.Добавить("SSID");
	ТаблицаДляПоискаSSID.Добавить().SSID =  СтруктураДанныхАкта.SSID;
	СоотвSSID = ОбменДаннымиКлиентСервер.СоответствиеСтрокЗаявокИSSID(ТаблицаДляПоискаSSID, ДокументОбъект.ДокументПродажи); 
	СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтруктураДанныхАкта.SSID);
	Если Не ЗначениеЗаполнено(СтрокаЗаявки) Тогда
		
		ТекстОшибки = "Не найдена строка заявки с SSID """+СтруктураДанныхАкта.SSID+"""";
		СтруктураОтчета.СсылкаНаОбъект 	= СтруктураДанныхАкта.Штрихкод;
		СтруктураОтчета.Ошибка 			= Истина;
		СтруктураОтчета.ТекстОшибки 	= ТекстОшибки;
		СтруктураОтчета.Обработано 		= Истина;
		
		Возврат Неопределено;

	КонецЕсли;
	
	//Товары документа продажи
	Если ЗначениеЗаполнено(СтруктураДанныхАкта.НоменклатураУИД) Тогда
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанныхАкта.НоменклатураУИД));
		Если НЕ ОбщегоНазначения.СсылкаСуществует(Номенклатура) Тогда
			
			ТекстОшибки = "Не найдена номенклатура по идентификатору "+СтруктураДанныхАкта.НоменклатураУИД;
			СтруктураОтчета.СсылкаНаОбъект 	= СтруктураДанныхАкта.Штрихкод;
			СтруктураОтчета.Ошибка 			= Истина;
			СтруктураОтчета.ТекстОшибки 	= ТекстОшибки;
			СтруктураОтчета.Обработано 		= Истина;
			
			Возврат Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
	//По артикулу искать не будем
	//Если Не ЗначениеЗаполнено(Номенклатура) Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	РеализацияТоваровУслугТовары.Номенклатура,
	//	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК Код,
	//	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	//	|	РеализацияТоваровУслугТовары.Номенклатура.Изготовитель КАК Изготовитель,
	//	|	РеализацияТоваровУслугТовары.Номенклатура.Изготовитель.Наименование КАК ИзготовительНаименование
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//	|ГДЕ
	//	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	//	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.ДокументПродажи);
	//	ТоварыДокументаПродажи = Запрос.Выполнить().Выгрузить();
	//	СтрокиТоваров = ТоварыДокументаПродажи.НайтиСтроки(Новый структура("Артикул", СтруктураДанныхАкта.НоменклатураАртикул));
	//	Если СтрокиТоваров.Количество() = 0 Тогда
	//		ДобавитьвТекстОшибки("Не найдена номенклатура по артикулу "+СтруктураДанныхАкта.НоменклатураАртикул+", в документе продажи "+ДокументОбъект.ДокументПродажи, ТекстОшибки);
	//	Иначе
	//		Номенклатура = СтрокиТоваров[0].Номенклатура;
	//	КонецЕсли;
	//КонецЕсли;	
			
	//Товары
	ДокументОбъект.Товары.Очистить();
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	НоваяСтрока.СтрокаЗаявки 		= СтрокаЗаявки;
	НоваяСтрока.СуммаКомпенсации 	= СтруктураДанныхАкта.СуммаКомпенсации;
	НоваяСтрока.СуммаУценки 		= СтруктураДанныхАкта.СуммаУценки;
	НоваяСтрока.ПроцентУценки 		= СтруктураДанныхАкта.ПроцентУценки;
	Если СтруктураДанныхАкта.ВидУценки = "Обработка одной детали" Тогда
		НоваяСтрока.ВидУценки = Перечисления.ВидыУценки.ОбработкаОднойДетали;
	ИначеЕсли НоваяСтрока.ПроцентУценки > 0 Тогда
		НоваяСтрока.ВидУценки = Перечисления.ВидыУценки.УценкаЗаТовар;
	КонецЕсли;
	
	НоваяСтрока.Номенклатура = Номенклатура;
	
	НоваяСтрока.КоличествоПлан = СтруктураДанныхАкта.КоличествоПлан;
	Если Не ЗначениеЗаполнено(НоваяСтрока.КоличествоПлан) Тогда
		
		ТекстОшибки = "Не указано количество";
		СтруктураОтчета.СсылкаНаОбъект 	= СтруктураДанныхАкта.Штрихкод;
		СтруктураОтчета.Ошибка 			= Истина;
		СтруктураОтчета.ТекстОшибки 	= ТекстОшибки;
		СтруктураОтчета.Обработано 		= Истина;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков, ЕдиницаХраненияОстатков.Коэффициент, СтавкаНДС");
	НоваяСтрока.СтавкаНДС 			= РеквизитыНоменклатуры.СтавкаНДС;
	НоваяСтрока.ЕдиницаИзмерения 	= РеквизитыНоменклатуры.ЕдиницаХраненияОстатков;
	НоваяСтрока.Коэффициент 		= РеквизитыНоменклатуры.ЕдиницаХраненияОстатковКоэффициент;
	
	НоваяСтрока.ОтсутствуютСледыУстановки 	= СтруктураДанныхАкта.ОтсутствуютСледыУстановки;
	НоваяСтрока.ЦелостностьУпаковки 		= СтруктураДанныхАкта.ЦелостностьУпаковки;
	
	//Подберем партии по РТУ
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
		
		ТекстОшибки = "";
		Если НЕ ДокументОбъект.ПроверитьЗаполнитьПартииВТабличнойЧасти(Истина, ТекстОшибки, Ложь) Тогда
			
			СтруктураОтчета.СсылкаНаОбъект 	= СтруктураДанныхАкта.Штрихкод;
			СтруктураОтчета.Ошибка 			= Истина;
			СтруктураОтчета.ТекстОшибки 	= ТекстОшибки;
			СтруктураОтчета.Обработано 		= Истина;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если НЕ ДокументОбъект.ЗаполнитьЦеныПоДокументуРеализации(Истина, ТекстОшибки, Ложь) Тогда
			
			СтруктураОтчета.СсылкаНаОбъект 	= СтруктураДанныхАкта.Штрихкод;
			СтруктураОтчета.Ошибка 			= Истина;
			СтруктураОтчета.ТекстОшибки 	= ТекстОшибки;
			СтруктураОтчета.Обработано 		= Истина;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.Комментарий = СтрЗаменить(ДокументОбъект.Комментарий, "&ndash;", "-");
	
	ДокументОбъект.Поставщик = Документы.АктРассмотренияВозврата.ПоставщикПоДаннымПартий(ДокументОбъект);
	
	//ЗаполнитьЗначенияСвойств(ДокументОбъект,СтруктураДанныхАкта,"АдресЭлектроннойПочтыПокупателя,ИмяКонтактногоЛицаПокупателя,ТелефонПокупателя,НомерСчетаФактурыКлиента,ДатаСчетаФактурыКлиента");

	Возврат ДокументОбъект;
	
КонецФункции

//ХудинВВ XX-2297 17052019
Функция ЗаполнитьСтруктуруДанныхАктаWS(СтруктураДанныхФайла)
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ЗаполнитьСтруктуруДанныхАктаWS";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтруктураДанныхАкта = ИнициализироватьСтруктуруДанныхАкта();
	
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "Штрихкод", 							"IDZaprosa"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "КомментарийСайт", 					"Opisanie"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "КодКонтрагента", 					"Klient"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НоменклатураКод", 					"KodTovara1S"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НоменклатураАртикул", 				"Artikul"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НоменклатураИзготовитель", 			"Izgotovitelj"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НоменклатураНаименование", 			"NaimenovanieDetali");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НоменклатураУИД", 					"KodTovara1S8");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "КоличествоПлан", 					"KolVo"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "SSID", 								"SiteID"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ОтсутствуютСледыУстановки", 			"OtsutstvieSledovUstanovki"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ЦелостностьУпаковки", 				"CelostnostjUpakovki"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "СуммаКомпенсации", 					"KompensaciyaRabotTrebovanieDenjgi"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ПричинаВозврата", 					"PrichinaVozvrata"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "БезоговорочныйВозврат", 				"BezogovorochnyyVozvrat1"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ДатаРТУ", 							"DataNakladnoy");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НомерРТУ", 							"PoNakladnoy");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "Вложения", 							"SsylkaNaZagruzhennyeMaterial"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "КодВозврата", 						"ChtoBudetSTovaromPosleVozvra"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "VIN", 								"VINKod");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "СуммаУценки", 						"ObrabotkaDetali");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ВидУценки", 							"VidUcenki");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ПроцентУценки", 						"ProcentUcenkiZaTovarProcentUcenkiOt");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ЦенаПослеУценки", 					"CenaDetaliPosleUcenki");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "АдресЭлектроннойПочтыПокупателя", 	"BuyerEmail");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ИмяКонтактногоЛицаПокупателя", 		"BuyerName");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ТелефонПокупателя", 					"BuyerPhone");

	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НомерСчетаФактурыКлиента", 			"BuyerInvoiceNumber");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ДатаСчетаФактурыКлиента", 			"BuyerInvoiceDate");
	
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "СрокВозвратаКлиента", 				"VernutjNaSkladDo2");
	
	Возврат СтруктураДанныхАкта;
	
КонецФункции

Процедура ЗаполнитьСвойствоСтруктурыАктаWS(СтруктураДанныхАкта, СтруктураДанныхФайла, ИмяСвойстваАкта, ИмяСвойстваФайла); 
	
	Если СтруктураДанныхФайла.Свойство(ИмяСвойстваФайла) Тогда
		СтруктураДанныхАкта[ИмяСвойстваАкта] = СтруктураДанныхФайла[ИмяСвойстваФайла];
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////

#КонецОбласти

//Файловая загрузка
Процедура ВыполнитьЗагрузкуАРВИзКаталога() Экспорт
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ВыполнитьЗагрузкуАРВИзКаталога";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если Не ЗначениеЗаполнено(КаталогОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	КаталогОшибок = КаталогОбмена+"errors\";
	
	НайденныеФайлы = НайтиФайлы(КаталогОбмена, ?(ЗначениеЗаполнено(МаскаФайла), МаскаФайла, "return_request_*.xml"));
	Для каждого НайденныйФайл Из НайденныеФайлы Цикл
		ТекстОшибки = "";
		РезультатЗагрузки = ВыполнитьЗагрузкуИзФайла(НайденныйФайл, ТекстОшибки);
		
		ОтветОтправлен = ОтправитьОтвет(НайденныйФайл.ИмяБезРасширения,
		РезультатЗагрузки.Штрихкод, 
		РезультатЗагрузки.АктЗаписан, 
		РезультатЗагрузки.НомераДокументовКлиентаПолучены, 
		РезультатЗагрузки.ТекстОшибки);
		
		//ХудинВВ XX-2297 15052019
		//Выгружаем через веб-сервис
		Если ЭтоАктивнаяЗадачаJirа(Справочники.ЗадачиJira.XX2297) Тогда 
			ОтправитьОтветWS(РезультатЗагрузки);
		КонецЕсли;
		
		Если НайденныйФайл.Существует() Тогда
			Если ОтветОтправлен	И РезультатЗагрузки.АктЗаписан Тогда
				УдалитьФайлы(НайденныйФайл.ПолноеИмя);
			Иначе
				СоздатьКаталог(КаталогОшибок);
				ПереместитьФайл(НайденныйФайл.ПолноеИмя, КаталогОшибок+НайденныйФайл.Имя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры   

Функция ВыполнитьЗагрузкуИзФайла(вхФайл, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ВыполнитьЗагрузкуИзФайла";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ВозвращаемоеЗначение = Новый Структура("Штрихкод, АктЗаписан, НомераДокументовКлиентаПолучены, ТекстОшибки, Ссылка");
	
	Попытка
		ЧтениеТекста = Новый ЧтениеТекста(вхФайл.ПолноеИмя, );
		ТекстФайла  = ЧтениеТекста.Прочитать();
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		//Ошибка заполнения документа
		КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
		, 
		Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиАРВССайта,
		ТекстОшибки,
		,
		Истина,
		,
		"Обработка: Загрузка АРВ с сайта");
		
		ВозвращаемоеЗначение.АктЗаписан = Ложь;
		ВозвращаемоеЗначение.АктЗаписан = ТекстОшибки;
		
		Возврат  ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	СтруктураДанныхФайла = СтруктураДанныхФайла(вхФайл);
	
	СтруктураДанныхАкта = ЗаполнитьСтруктуруДанныхАкта(СтруктураДанныхФайла);
	
	ТекстОшибки = "";
	РезультатСоздания = СоздатьАРВ(СтруктураДанныхАкта, ТекстОшибки);
	ДокументОбъект = РезультатСоздания.ДокументОбъект;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		//Ошибка заполнения документа
		КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
		, 
		Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиАРВССайта,
		ТекстОшибки,
		,
		Истина,
		вхФайл.ПолноеИмя + "
		|
		| Ошибка: " + ТекстОшибки + "
		|
		| Файл: " + ТекстФайла,
		"Обработка: Загрузка АРВ с сайта");
		
		Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
		
		Если РезультатСоздания.ДокументУжеЕсть Тогда
			ВозвращаемоеЗначение.АктЗаписан = Истина;
			ВозвращаемоеЗначение.Ссылка 	= РезультатСоздания.Ссылка;
		Иначе
			ВозвращаемоеЗначение.АктЗаписан = Ложь;
		КонецЕсли;
	Иначе
		
		НачатьТранзакцию();
		Попытка
			//ДокументОбъект.ОбменДанными.Загрузка = Истина;
			//ДокументОбъект.Записать();
			//ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ВозвращаемоеЗначение.АктЗаписан = Истина;
			
			РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(
			ДокументОбъект.Ссылка,
			Перечисления.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьПереходВСледующийСтатус,
			ДокументОбъект.СтатусДокумента);
			ЗафиксироватьТранзакцию();
			
			ВозвращаемоеЗначение.Ссылка = ДокументОбъект.Ссылка;
		Исключение
			ОтменитьТранзакцию();
			
			ОписаниеОшибки = ОписаниеОшибки();
			ДобавитьвТекстОшибки("Ошибка при проведении акта: " +ОписаниеОшибки, ТекстОшибки);
			
			//Ошибка проведения документа
			КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(
			, 
			Справочники.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗагрузкиАРВССайта,
			ТекстОшибки,
			,
			Истина,
			вхФайл.ПолноеИмя + "
			|
			| Ошибка: " + ТекстОшибки + "
			|
			| Файл: " + ТекстФайла,
			"Обработка: Загрузка АРВ с сайта");
			
			Сообщить(ТекстОшибки, СтатусСообщения.ОченьВажное);
			
			ВозвращаемоеЗначение.АктЗаписан = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если мЗаписыватьИсториюОбмена Тогда
		РегистрыСведений.ИсторияОбменаССайтомВозвраты.Добавить(
		вхФайл.ПолноеИмя,
		ДокументОбъект.Ссылка,
		ТекстФайла,
		НЕ ВозвращаемоеЗначение.АктЗаписан,
		ТекстОшибки,
		Ложь);
	КонецЕсли;
	
	ВозвращаемоеЗначение.Штрихкод 							= СтруктураДанныхАкта.Штрихкод;
	ВозвращаемоеЗначение.НомераДокументовКлиентаПолучены 	= Ложь;
	ВозвращаемоеЗначение.ТекстОшибки 						= ТекстОшибки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СоздатьАРВ(СтруктураДанныхАкта, ТекстОшибки = "")
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_СоздатьАРВ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументОбъект");
	ВозвращаемоеЗначение.Вставить("ДокументУжеЕсть", Ложь);
	ВозвращаемоеЗначение.Вставить("Ссылка", Ложь);
	
	//Шапка
	НайденныйДокумент = Документы.АктРассмотренияВозврата.НайтиПоРеквизиту("Штрихкод", СтруктураДанныхАкта.Штрихкод);
	Если Перезаписывать И ЗначениеЗаполнено(НайденныйДокумент) Тогда
		ДокументОбъект = НайденныйДокумент.ПолучитьОбъект();
	Иначе
		Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
			ДобавитьВТекстОшибки("Акт возврата с идентификатором """+СтруктураДанныхАкта.Штрихкод+""" уже существует", ТекстОшибки);
			ВозвращаемоеЗначение.ДокументУжеЕсть = Истина;
			ВозвращаемоеЗначение.Ссылка 		 = НайденныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		ДокументОбъект = Документы.АктРассмотренияВозврата.СоздатьДокумент();
	КонецЕсли;
	ДокументОбъект.Дата = ТекущаяДата();
	ДокументОбъект.СтатусДокумента = Справочники.СтатусыДокументов.АРВ_Новый;
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтруктураДанныхАкта);
	
	ДокументОбъект.Контрагент = Справочники.Контрагенты.НайтиПоКоду(СтруктураДанныхАкта.КодКонтрагента);
	Если Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		ДобавитьвТекстОшибки("Не найден контрагент с кодом """+СтруктураДанныхАкта.КодКонтрагента+"""", ТекстОшибки);
	КонецЕсли;
	

	ДокументОбъект.ДокументПродажи = ДокументПродажи(СтруктураДанныхАкта.НомерРТУ,  СтруктураДанныхАкта.ДатаРТУ, ДокументОбъект.Контрагент);
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
		ДокументОбъект.ДокументПродажи = ДокументПродажи(СтруктураДанныхАкта.НомерРТУ2,  СтруктураДанныхАкта.ДатаРТУ2, ДокументОбъект.Контрагент);
	КонецЕсли;
	
	//Попробуем получить из базы 77 спб
	Если ЗагружатьИз77 Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
			//Если найденная рту была загружена из 77, то перезаполним её
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	_ДляПереносаДанных.Объект
			|ИЗ
			|	РегистрСведений._ДляПереносаДанных КАК _ДляПереносаДанных
			|ГДЕ
			|	_ДляПереносаДанных.Объект = &Объект";
			
			Запрос.УстановитьПараметр("Объект", ДокументОбъект.ДокументПродажи);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				ПараметрыПолучения = Новый Структура("Номер77,Дата77,ПерезаполнятьШапку,ПерезаполнятьТЧТовары",
				СтруктураДанныхАкта.НомерРТУ,СтруктураДанныхАкта.ДатаРТУ,Истина,Истина);
				НайденныйДокумент = ОбменДаннымиВызовСервера.ПолучитьДокументИз77(ПараметрыПолучения);
				Если Не ЗначениеЗаполнено(НайденныйДокумент) Тогда
					ПараметрыПолучения.Номер77 		 = СтруктураДанныхАкта.НомерРТУ2;
					ПараметрыПолучения.Дата77		 = СтруктураДанныхАкта.ДатаРТУ2;
					ОбменДаннымиВызовСервера.ПолучитьДокументИз77(ПараметрыПолучения);
				КонецЕсли;
				
			КонецЕсли;
			
			
		Иначе
			
			ПараметрыПолучения = Новый Структура("Номер77,Дата77,ПерезаполнятьШапку,ПерезаполнятьТЧТовары",
			СтруктураДанныхАкта.НомерРТУ,СтруктураДанныхАкта.ДатаРТУ,Истина,Истина);
			
			ДокументОбъект.ДокументПродажи = ОбменДаннымиВызовСервера.ПолучитьДокументИз77(ПараметрыПолучения);
			Если Не ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
				ПараметрыПолучения.Номер77 		 = СтруктураДанныхАкта.НомерРТУ2;
				ПараметрыПолучения.Дата77		 = СтруктураДанныхАкта.ДатаРТУ2;
				ДокументОбъект.ДокументПродажи 	 = ОбменДаннымиВызовСервера.ПолучитьДокументИз77(ПараметрыПолучения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;


	Если Не ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
		ДобавитьвТекстОшибки("Не найден документ продажи с номерами """+СтруктураДанныхАкта.НомерРТУ2+""" / """+СтруктураДанныхАкта.НомерРТУ+""" от "+СтруктураДанныхАкта.ДатаРТУ2+""" / """+СтруктураДанныхАкта.ДатаРТУ, ТекстОшибки);
	КонецЕсли;

	
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
		ДокументОбъект.ДоговорКонтрагента = ДокументОбъект.ДокументПродажи.ДоговорКонтрагента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ДокументОбъект.Организация = ДокументОбъект.ДоговорКонтрагента.Организация;
	КонецЕсли;
	
	//ХудинВВ XX-2734 19.06.2019 ((
	ОрганизацияЗакрыта = Справочники.Организации.ОрганизацияЗакрыта(ДокументОбъект.Организация, ДокументОбъект.Дата);
	Если ОрганизацияЗакрыта Тогда
		ДокументОбъект.Организация 			= ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.Организация;	
		ДокументОбъект.ДоговорКонтрагента 	= ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента;
	КонецЕсли;
	//))
	
	Если ЗначениеЗаполнено(СтруктураДанныхАкта.КодВозврата) 
		И Число(СтруктураДанныхАкта.КодВозврата) <> 0 Тогда
		КодВозвратаСсылка = Справочники.КодыВозврата.НайтиПоКоду(Число(СтруктураДанныхАкта.КодВозврата));
		ДокументОбъект.КодВозврата = КодВозвратаСсылка;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(ДокументОбъект.КодВозврата) Тогда
	//	ДобавитьвТекстОшибки("Не найден код возврата", ТекстОшибки);
	//КонецЕсли;
	    
	СоответствиеПричинВозврата = СоответствиеПричинВозврата();
	ПричинаВозврата = СоответствиеПричинВозврата.Получить(СтруктураДанныхАкта.ПричинаВозврата);
	Если Не ЗначениеЗаполнено(ПричинаВозврата) Тогда
		ДобавитьвТекстОшибки("Не найдена причина возврата для причины сайта: "+СтруктураДанныхАкта.ПричинаВозврата, ТекстОшибки);
	КонецЕсли;
	
	Если ПричинаВозврата = Справочники.ПричиныВозврата.БракВыявленныйДоУстановки
		ИЛИ ПричинаВозврата = Справочники.ПричиныВозврата.БракВыявленныйПослеУстановки Тогда
		ДокументОбъект.ПодпричинаВозврата = ПричинаВозврата;
		ПричинаВозврата =  Справочники.ПричиныВозврата.БракВыявленныйПослеПолученияТовара;
	КонецЕсли;
	ДокументОбъект.ПричинаВозврата = ПричинаВозврата;
	
	Если СтруктураДанныхАкта.БезоговорочныйВозврат = "Безоговорочный" Тогда
		ДокументОбъект.БезоговорочныйВозврат = Истина;		
	КонецЕсли;
	
	ДокументОбъект.СуммаКомпенсации 	= СтруктураДанныхАкта.СуммаКомпенсации;

	ВариантУчетаНДС = УчетНДСПовтИсп.ВариантУчетаНДСОрганизации(ДокументОбъект.Организация);
	ДокументОбъект.УчитыватьНДС 		= УчетНДСПовтИсп.УчитыватьНДСПоВариантуУчета(ВариантУчетаНДС, ДокументОбъект.ДоговорКонтрагента.ВидОплаты); 
	ДокументОбъект.СуммаВключаетНДС 	= ДокументОбъект.УчитыватьНДС;
	
	
	//Поиск строки заявки в РТУ	
	ТаблицаДляПоискаSSID = Новый ТаблицаЗначений;
	ТаблицаДляПоискаSSID.Колонки.Добавить("SSID");
	ТаблицаДляПоискаSSID.Добавить().SSID =  СтруктураДанныхАкта.SSID;
	СоотвSSID = ОбменДаннымиКлиентСервер.СоответствиеСтрокЗаявокИSSID(ТаблицаДляПоискаSSID, ДокументОбъект.ДокументПродажи); 
	СтрокаЗаявки = ОбменДаннымиКлиентСервер.НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, СтруктураДанныхАкта.SSID);
	Если Не ЗначениеЗаполнено(СтрокаЗаявки) Тогда 
		ДобавитьВТекстОшибки("Не найдена строка заявки с SSID """+СтруктураДанныхАкта.SSID+"""", ТекстОшибки);
	КонецЕсли;
	
	//Товары документа продажи
	Если ЗначениеЗаполнено(СтруктураДанныхАкта.НоменклатураУИД) Тогда
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанныхАкта.НоменклатураУИД));
		Если НЕ ОбщегоНазначения.СсылкаСуществует(Номенклатура) Тогда
			Номенклатура = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК Код,
		|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
		|	РеализацияТоваровУслугТовары.Номенклатура.Изготовитель КАК Изготовитель,
		|	РеализацияТоваровУслугТовары.Номенклатура.Изготовитель.Наименование КАК ИзготовительНаименование
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.ДокументПродажи);
		ТоварыДокументаПродажи = Запрос.Выполнить().Выгрузить();
		СтрокиТоваров = ТоварыДокументаПродажи.НайтиСтроки(Новый структура("Артикул", СтруктураДанныхАкта.НоменклатураАртикул));
		Если СтрокиТоваров.Количество() = 0 Тогда
			ДобавитьвТекстОшибки("Не найдена номенклатура по артикулу "+СтруктураДанныхАкта.НоменклатураАртикул+", в документе продажи "+ДокументОбъект.ДокументПродажи, ТекстОшибки);
		Иначе
			Номенклатура = СтрокиТоваров[0].Номенклатура;
		КонецЕсли;
	КонецЕсли;	
			
	//Товары
	ДокументОбъект.Товары.Очистить();
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	НоваяСтрока.СтрокаЗаявки 		= СтрокаЗаявки;
	НоваяСтрока.СуммаКомпенсации 	= СтруктураДанныхАкта.СуммаКомпенсации;
	НоваяСтрока.СуммаУценки 		= СтруктураДанныхАкта.СуммаУценки;
	НоваяСтрока.ПроцентУценки 		= СтруктураДанныхАкта.ПроцентУценки;
	Если СтруктураДанныхАкта.ВидУценки = "Обработка одной детали" Тогда
		НоваяСтрока.ВидУценки = Перечисления.ВидыУценки.ОбработкаОднойДетали;
	ИначеЕсли НоваяСтрока.ПроцентУценки > 0 Тогда
		НоваяСтрока.ВидУценки = Перечисления.ВидыУценки.УценкаЗаТовар;
	КонецЕсли;
	
	НоваяСтрока.Номенклатура = Номенклатура;
	Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		//ДобавитьвТекстОшибки("Не найдена номенклатура по коду "+СтруктураДанныхАкта.НоменклатураКод, ТекстОшибки);
	КонецЕсли;
	
	НоваяСтрока.КоличествоПлан = СтруктураДанныхАкта.КоличествоПлан;
	Если Не ЗначениеЗаполнено(НоваяСтрока.КоличествоПлан) Тогда
		ДобавитьвТекстОшибки("Не указано количество", ТекстОшибки);
	КонецЕсли;
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаХраненияОстатков, ЕдиницаХраненияОстатков.Коэффициент, СтавкаНДС");
	НоваяСтрока.СтавкаНДС 			= РеквизитыНоменклатуры.СтавкаНДС;
	НоваяСтрока.ЕдиницаИзмерения 	= РеквизитыНоменклатуры.ЕдиницаХраненияОстатков;
	НоваяСтрока.Коэффициент 		= РеквизитыНоменклатуры.ЕдиницаХраненияОстатковКоэффициент;
	
	НоваяСтрока.ОтсутствуютСледыУстановки 	= СтруктураДанныхАкта.ОтсутствуютСледыУстановки = "true";
	НоваяСтрока.ЦелостностьУпаковки 		= СтруктураДанныхАкта.ЦелостностьУпаковки = "true";
	
	//Подберем партии по РТУ
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументПродажи) Тогда
		ДокументОбъект.ПроверитьЗаполнитьПартииВТабличнойЧасти(Истина, ТекстОшибки, Ложь);
		ДокументОбъект.ЗаполнитьЦеныПоДокументуРеализации(Истина, ТекстОшибки, Ложь);
	КонецЕсли;
	
	ДокументОбъект.Комментарий = СтрЗаменить(ДокументОбъект.Комментарий, "&ndash;", "-");
	
	ДокументОбъект.Поставщик = Документы.АктРассмотренияВозврата.ПоставщикПоДаннымПартий(ДокументОбъект);
	
	//#XX-2209 Kalinin V.A. ( 2019-05-08 )  /*
	ЗаполнитьЗначенияСвойств(ДокументОбъект,СтруктураДанныхАкта,"АдресЭлектроннойПочтыПокупателя,ИмяКонтактногоЛицаПокупателя,ТелефонПокупателя,НомерСчетаФактурыКлиента,ДатаСчетаФактурыКлиента");
	// */
	
	ВозвращаемоеЗначение.ДокументОбъект = ДокументОбъект;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ДобавитьвТекстОшибки(ДобавляемыйТекст, ТекстОшибки)
	
	ТекстОшибки = ТекстОшибки + Символы.ПС +ДобавляемыйТекст;
КонецПроцедуры

Функция ДокументПродажи(знач НомерРТУ, ДатаРТУ, Контрагент = Неопределено)
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ДокументПродажи";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	
	Если СтрДлина(НомерРТУ) < 11 Тогда 
		НомерРТУ=Лев(НомерРТУ,4)+"0"+Сред(НомерРТУ,5);
	КонецЕсли;	
	
	ДокументПродажи = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Контрагент = &Контрагент
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Номер = &Номер
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Контрагент = &Контрагент
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаНач", 			ДобавитьМесяц(ДатаРТУ, -9));
	Запрос.УстановитьПараметр("ДатаКон", 			ДобавитьМесяц(ДатаРТУ, 9));
	Запрос.УстановитьПараметр("Номер", 				НомерРТУ);
	Запрос.УстановитьПараметр("Контрагент", 		Контрагент);
	Запрос.УстановитьПараметр("ВсеКонтрагенты", 	Не ЗначениеЗаполнено(Контрагент));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокументПродажи = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ДокументПродажи; 
	
КонецФункции



Функция ЗаполнитьСтруктуруДанныхАкта(СтруктураДанныхФайла)
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ЗаполнитьСтруктуруДанныхАкта";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтруктураДанныхАкта = ИнициализироватьСтруктуруДанныхАкта();
	
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "Штрихкод", 					"IDZaprosa"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "КомментарийСайт", 			"Opisanie"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "КодКонтрагента", 			"Элмакод"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НоменклатураКод", 			"KodTovara1S"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НоменклатураАртикул", 		"Artikul"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НоменклатураИзготовитель", 	"Izgotovitelj"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НоменклатураНаименование", 	"NaimenovanieDetali");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НоменклатураУИД", 			"KodTovara1S8");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "КоличествоПлан", 			"KolVo"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "SSID", 						"SiteID"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ОтсутствуютСледыУстановки", 	"OtsutstvieSledovUstanovki"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ЦелостностьУпаковки", 		"CelostnostjUpakovki"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "СуммаКомпенсации", 			"KompensaciyaRabotTrebovanieDenjgi"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ПричинаВозврата", 			"PrichinaVozvrata"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "БезоговорочныйВозврат", 		"BezogovorochnyyVozvrat1"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НомерРТУ2", 					"NomerNakladnoyNaOtgruzkuKlientu");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НомерРТУ", 					"PoNakladnoy");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "Вложения", 					"SsylkaNaZagruzhennyeMaterial"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "КодВозврата", 				"ChtoBudetSTovaromPosleVozvra"); 
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "VIN", 						"VINKod");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "СуммаУценки", 				"ObrabotkaDetali");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ВидУценки", 					"VidUcenki");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ПроцентУценки", 				"ProcentUcenkiZaTovarProcentUcenkiOt");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ПроцентУценкиТочный", 		"ProcentUcenkiZaTovarTochnyyProcent");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ЦенаПослеУценки", 			"CenaDetaliPosleUcenki");
	
	//#XX-2209 Kalinin V.A. ( 2019-05-08 )  /*
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "АдресЭлектроннойПочтыПокупателя", "BuyerEmail");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ИмяКонтактногоЛицаПокупателя", "BuyerName");
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "ТелефонПокупателя", 			"BuyerPhone");
	// */
	
	//XX-2206 ХудинВВ 13052019
	ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, "НомерСчетаФактурыКлиента", 			"BuyerInvoiceNumber");
	Если СтруктураДанныхФайла.Свойство("BuyerInvoiceDate") Тогда
		СтруктураДанныхАкта.ДатаСчетаФактурыКлиента = ДатаXML_в_Дата1С_2(СтруктураДанныхФайла.BuyerInvoiceDate);
	КонецЕсли;
	//
	
	СтруктураДанныхАкта.ДатаРТУ2	 					= ДатаXML_в_ДатаВремя1С(СтруктураДанныхФайла.DataNakladnoyNaOtgruzkuKlientu);
	СтруктураДанныхАкта.ДатаРТУ	 						= ДатаXML_в_ДатаВремя1С(СтруктураДанныхФайла.DataNakladnoy);
	СтруктураДанныхАкта.СрокВозвратаКлиента	 			= ДатаXML_в_ДатаВремя1С(СтруктураДанныхФайла.VernutjNaSkladDo2);

	Возврат СтруктураДанныхАкта;
	
КонецФункции

Процедура ЗаполнитьСвойствоСтруктурыАкта(СтруктураДанныхАкта, СтруктураДанныхФайла, ИмяСвойстваАкта, ИмяСвойстваФайла); 
	
	Если СтруктураДанныхФайла.Свойство(ИмяСвойстваФайла) Тогда
		СтруктураДанныхАкта[ИмяСвойстваАкта] = СтруктураДанныхФайла[ИмяСвойстваФайла];
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьСтруктуруДанныхАкта()
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ИнициализироватьСтруктуруДанныхАкта";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтруктураДанныхАкта = Новый Структура;
	
	СтруктураДанныхАкта.Вставить("Штрихкод");
	СтруктураДанныхАкта.Вставить("КомментарийСайт");
	СтруктураДанныхАкта.Вставить("БезоговорочныйВозврат");
	СтруктураДанныхАкта.Вставить("ПричинаВозврата");
	СтруктураДанныхАкта.Вставить("СрокВозвратаКлиента");
	СтруктураДанныхАкта.Вставить("КодВозврата");
	
	СтруктураДанныхАкта.Вставить("КодКонтрагента");
	СтруктураДанныхАкта.Вставить("НоменклатураКод");
	СтруктураДанныхАкта.Вставить("НоменклатураАртикул");
	СтруктураДанныхАкта.Вставить("НоменклатураИзготовитель");
	СтруктураДанныхАкта.Вставить("НоменклатураНаименование");
	СтруктураДанныхАкта.Вставить("НоменклатураУИД");
	СтруктураДанныхАкта.Вставить("КоличествоПлан");
	СтруктураДанныхАкта.Вставить("SSID");
	СтруктураДанныхАкта.Вставить("ОтсутствуютСледыУстановки", Истина);
	СтруктураДанныхАкта.Вставить("ЦелостностьУпаковки", Истина);
	СтруктураДанныхАкта.Вставить("СуммаКомпенсации", 0);
	СтруктураДанныхАкта.Вставить("VIN");
	СтруктураДанныхАкта.Вставить("ВидУценки");
	СтруктураДанныхАкта.Вставить("СуммаУценки");
	СтруктураДанныхАкта.Вставить("ПроцентУценки");
	СтруктураДанныхАкта.Вставить("ПроцентУценкиТочный");
	СтруктураДанныхАкта.Вставить("ЦенаПослеУценки");
	
	
	СтруктураДанныхАкта.Вставить("НомерРТУ");
	СтруктураДанныхАкта.Вставить("ДатаРТУ");
	СтруктураДанныхАкта.Вставить("НомерРТУ2");
	СтруктураДанныхАкта.Вставить("ДатаРТУ2");
	
	СтруктураДанныхАкта.Вставить("Вложения");
	//#XX-2347 Kalinin V.A. ( 2019-05-13 )  /*
	СтруктураДанныхАкта.Вставить("АдресЭлектроннойПочтыПокупателя");
	СтруктураДанныхАкта.Вставить("ИмяКонтактногоЛицаПокупателя");
	СтруктураДанныхАкта.Вставить("ТелефонПокупателя");
	// */
	
	//XX-2206 ХудинВВ 13052019
	СтруктураДанныхАкта.Вставить("НомерСчетаФактурыКлиента");
	СтруктураДанныхАкта.Вставить("ДатаСчетаФактурыКлиента");
	//
	
	Возврат СтруктураДанныхАкта;
	
КонецФункции

Функция СтруктураДанныхФайла(вхФайл) 
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_СтруктураДанныхФайла";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтруктураДанныхФайла = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(вхФайл.ПолноеИмя,,,);
	
	ДеревоФайла = ПрочитатьXMLВДеревоЗначений(вхФайл.ПолноеИмя);
	ТЗФайла = ПрочитатьДеревоВТЗ(ДеревоФайла, "", "");
	
	ИмяПолучено 		= Ложь;
	ЗначениеПолучено 	= Ложь;
	Для каждого СтрокаТЗ ИЗ ТЗФайла Цикл
		
		Если СтрокаТЗ.Путь = "variable-list.crmcompany-variable.crm-oid" Тогда
			СтруктураДанныхФайла.Вставить("Элмакод", СтрокаТЗ.Значение);
		КонецЕсли;
		
		Если СтрНайти(СтрокаТЗ.Путь,  "variable-list.") = 0 Тогда
			Продолжить;
		ИначеЕсли СтрНайти(СтрокаТЗ.Путь,  "variable-list.crmcompany") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если  СтрНайти(СтрокаТЗ.Путь,  "name") = 0 Тогда
			ЗначениеСвойства = СтрокаТЗ.Значение;
			ЗначениеПолучено = Истина;
		Иначе
			ИмяСвойства = СтрокаТЗ.Значение;
			ИмяПолучено = Истина;
		КонецЕсли;	
		
		Если ИмяПолучено И ЗначениеПолучено Тогда
			
			СтруктураДанныхФайла.Вставить(ИмяСвойства, ЗначениеСвойства);
			
			ИмяПолучено 		= Ложь;
			ЗначениеПолучено 	= Ложь;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат СтруктураДанныхФайла;
	
КонецФункции

//Ответ
Функция ОтправитьОтвет(ИмяФайла, Штрихкод, АктЗаписан, НомераДокументовКлиентаПолучены, ТекстОшибки)
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ОтправитьОтвет";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Истина;
	
	СтруктураОтвета = ИнициализироватьСтруктуруОтвета();	
	СтруктураОтвета.IDZaprosa 						= Штрихкод;
	СтруктураОтвета.success_akt 					= АктЗаписан;
	СтруктураОтвета.success_client_docs_numbers 	= НомераДокументовКлиентаПолучены;
	СтруктураОтвета.error 							= ТекстОшибки;
	
	ИмяФайлаОтвета = "result_"+ИмяФайла+".xml";
	СоздатьКаталог(КаталогОбмена +"\result");
	ПолноеИмяФайлаОтвета = КаталогОбмена +"\result\"+ ИмяФайлаОтвета;
	
	Попытка
		ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(СтруктураОтвета);
		ЗаписьXML = Новый ЗаписьXML; 
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайлаОтвета); 
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		ЗаписьXML.Закрыть();
	Исключение 
		Успешно = Ложь;
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

//ХудинВВ XX-2297 15052019
//Выгружаем через веб-сервис
Процедура ОтправитьОтветWS(РезультатЗагрузки)
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ОтправитьОтветWS";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтруктураПараметровСообщения = РегистрыСведений.СообщенияПроцессаВозвратаОтПокупателяДляСайта.СтруктураПараметровСообщения();
	СтруктураПараметровСообщения.ТипСообщения = Перечисления.ТипыСообщенийПроцессаВозвратовДляСайта.РезультатЗагрузки;
	СтруктураПараметровСообщения.Штрихкод = РезультатЗагрузки.Штрихкод;
	СтруктураПараметровСообщения.АктРассмотренияВозврата = РезультатЗагрузки.Ссылка;
		
	Успешно = НЕ ЗначениеЗаполнено(РезультатЗагрузки.ТекстОшибки);
	СтруктураПараметровСообщения.Сообщение = ?(Успешно, "Успешно", "Ошибка");
	
	СтруктураПараметровСообщения.ДопСведения.Вставить("Ошибка", Не Успешно);
	СтруктураПараметровСообщения.ДопСведения.Вставить("ТекстОшибки", РезультатЗагрузки.ТекстОшибки);
	
	РегистрыСведений.СообщенияПроцессаВозвратаОтПокупателяДляСайта.Добавить(СтруктураПараметровСообщения, Истина);
	
КонецПроцедуры

Функция ИнициализироватьСтруктуруОтвета()
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ИнициализироватьСтруктуруОтвета";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтруктураОтвета = Новый Структура;
	 СтруктураОтвета.Вставить("IDZaprosa", 						"");
	 СтруктураОтвета.Вставить("success_akt", 					Ложь);
	 СтруктураОтвета.Вставить("success_client_docs_numbers",	Ложь);
	 СтруктураОтвета.Вставить("error",							"");
	 
	 Возврат СтруктураОтвета;
	
 КонецФункции
 
Функция СоответствиеПричинВозврата()
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_СоответствиеПричинВозврата";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СоответствиеПричинВозврата = Новый Соответствие;
	 СоответствиеПричинВозврата.Вставить("БракДоУстановки", Справочники.ПричиныВозврата.БракВыявленныйДоУстановки); // 2.1
	 СоответствиеПричинВозврата.Вставить("БракПослеУстановки", Справочники.ПричиныВозврата.БракВыявленныйПослеУстановки);// 2.2
	 СоответствиеПричинВозврата.Вставить("НесоблюдениеСроков", Справочники.ПричиныВозврата.НарушенСрокПоставки); // 7
	 СоответствиеПричинВозврата.Вставить("Ошибка заказа (возврат товара с уценкой)", Справочники.ПричиныВозврата.ОтказОтДетали); //  6
	 СоответствиеПричинВозврата.Вставить("Пересортица", Справочники.ПричиныВозврата.Пересортица);  //  5
	 СоответствиеПричинВозврата.Вставить("Подозрение на контрафакт", Справочники.ПричиныВозврата.ПодозрениеНаКонтрафакт); // 8
	 
	 СоответствиеПричинВозврата.Вставить("5", Справочники.ПричиныВозврата.БракВыявленныйПриПолученииТовара);// 1
	// СоответствиеПричинВозврата.Вставить("6", Справочники.ПричиныВозврата.Некомплект); // 4
	 СоответствиеПричинВозврата.Вставить("7", Справочники.ПричиныВозврата.Недогруз); //  3
	 СоответствиеПричинВозврата.Вставить("1", Справочники.ПричиныВозврата.Некомплект); //  3
	 
	 Возврат СоответствиеПричинВозврата;
	 
 КонецФункции
 
 //Прочее
 
// Для разбора XML, полученного с помощью функции ПрочитатьXMLВДеревоЗначений()
Функция ПрочитатьДеревоВТЗ(Дерево, ИмяТэгаСтрокиТаблицы = "", ИмяРеквизитаНомерСтроки = "") Экспорт
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ПрочитатьДеревоВТЗ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Путь", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ИмяТаблицы", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("НомерСтрокиТаблицы", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Значение");
	
	СтруктураИменТаблиц = Новый Структура;
	Если ЗначениеЗаполнено(ИмяТэгаСтрокиТаблицы) Тогда
		СтруктураИменТаблиц.Вставить(ИмяТэгаСтрокиТаблицы, ИмяРеквизитаНомерСтроки);
	КонецЕсли;
	
	Путь = "";
	НомерСтрокиТаблицы = 0;
	ИмяТаблицы = "";
	ДобавитьСтрокиДереваВТЗ(Дерево.Строки[0].Строки, ТЗ, Путь, ИмяТаблицы, НомерСтрокиТаблицы, СтруктураИменТаблиц);
	
	Возврат ТЗ;
	
КонецФункции // ПрочитатьДеревоВТЗ()

Функция ДобавитьСтрокиДереваВТЗ(КоллекцияСтрок, ТЗ, ИсходныйПуть, ИмяТаблицы, НомерСтрокиТаблицы, СтруктураИменТаблиц)
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ДобавитьСтрокиДереваВТЗ";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Для каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		Реквизит = СтрокаДерева.Реквизит;
		Значение = СтрокаДерева.Значение;
		
		Путь = ИсходныйПуть + ?(ЗначениеЗаполнено(ИсходныйПуть), ".", "") + Реквизит;
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Путь = Путь;
		НоваяСтрока.Значение = Значение;
		НоваяСтрока.ИмяТаблицы = ИмяТаблицы;
		НоваяСтрока.НомерСтрокиТаблицы = НомерСтрокиТаблицы;
		
		ИмяРеквизитаНомерСтроки = "";
		Попытка
			ЕстьСвойство = СтруктураИменТаблиц.Свойство(Реквизит, ИмяРеквизитаНомерСтроки);
		Исключение
			ЕстьСвойство = Ложь;
		КонецПопытки;
		
		Если ЕстьСвойство = Истина Тогда
			ИмяТаблицы = Реквизит;
			СтрокаНомераСтроки = СтрокаДерева.Строки.Найти(ИмяРеквизитаНомерСтроки);
			Если СтрокаНомераСтроки <> Неопределено Тогда
				НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;
			Иначе
				НомерСтрокиТаблицы = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьСтрокиДереваВТЗ(СтрокаДерева.Строки, ТЗ, Путь, ИмяТаблицы, НомерСтрокиТаблицы, СтруктураИменТаблиц);
		
		Если ЕстьСвойство = Истина Тогда
			ИмяТаблицы = "";
		КонецЕсли;
		
	КонецЦикла; 
	
КонецФункции // ДобавитьСтрокиДереваВТЗ()

Функция ПрочитатьXMLВДеревоЗначений(ИмяФайла) Экспорт
	
	лКлючАлгоритма = "Обработка_ЗагрузкаАРВССайта_МодульОбъекта_ПрочитатьXMLВДеревоЗначений";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ДЗ = Новый ДеревоЗначений;
	ДЗ.Колонки.Добавить("Реквизит");
	ДЗ.Колонки.Добавить("Тип");
	ДЗ.Колонки.Добавить("Значение");
	
	Реквизит = "";
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяФайла);
	Строки = ДЗ.Строки;
	Строки.Очистить();
	НоваяСтрока = ДЗ;
	Пока Чтение.Прочитать() Цикл
		
		ТипУзла = Чтение.ТипУзла;
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента 
			ИЛИ ТипУзла = ТипУзлаXML.КонецЭлемента
			Тогда
			Реквизит = СокрЛП(Чтение.Имя);
		КонецЕсли;
		//Если Реквизит = "response" Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Значение = СокрЛП(Чтение.Значение);
		
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НоваяСтрока = НоваяСтрока.Строки.Добавить();
			НоваяСтрока.Реквизит = Реквизит;
			НоваяСтрока.Тип = "Узел";
			Если Чтение.КоличествоАтрибутов() <> 0 Тогда
				Строки = НоваяСтрока.Строки;
				Пока Чтение.ПрочитатьАтрибут() Цикл
					Атрибут = Строки.Добавить();
					Атрибут.Реквизит = Чтение.Имя;
					Атрибут.Значение = Чтение.Значение;
					Атрибут.Тип = "Атрибут";
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если НоваяСтрока.Родитель = Неопределено Тогда
				НоваяСтрока = ДЗ;
			Иначе
				НоваяСтрока = НоваяСтрока.Родитель;
			КонецЕсли;
		Иначе
			НоваяСтрока.Значение = Значение;
		КонецЕсли;
	КонецЦикла;
	Чтение.Закрыть();	
	
	Возврат ДЗ;
	
КонецФункции // ПрочитатьXMLВДеревоЗначений(ИмяФайла)

//***********************************************************
//	ПРЕОБРАЗОВАНИЕ ЗНАЧЕНИЙ

//Если ДатаXML начинается с года
Функция ДатаXML_в_Дата1С(Строка) Экспорт
	
	Если ТипЗнч(Строка) = Тип("Дата") Тогда	
		Возврат Строка;
	КонецЕсли;
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Дата(1,1,1);
	Иначе
		Возврат Дата(Лев(Строка,4),Сред(Строка,6,2),Сред(Строка,9,2));
	КонецЕсли;	
	
КонецФункции

//Если ДатаXML начинается с дня
Функция ДатаXML_в_Дата1С_2(Строка) Экспорт
	
	Если ТипЗнч(Строка) = Тип("Дата") Тогда	
		Возврат Строка;
	КонецЕсли;
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Дата(1,1,1);
	Иначе
		Возврат Дата(Прав(Строка,4),Сред(Строка,4,2),Лев(Строка,2));
	КонецЕсли;	
	
КонецФункции


Функция ДатаXML_в_ДатаВремя1С(Строка) Экспорт
	
	Если ТипЗнч(Строка) = Тип("Дата") Тогда	
		Возврат Строка;
	КонецЕсли;
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Дата(1,1,1);
	Иначе
		
		Если СтрДлина(Строка) = 10 Тогда
			Возврат Дата(Лев(Строка,4),Сред(Строка,6,2),Сред(Строка,9,2));
		Иначе
			Возврат Дата(Лев(Строка,4),Сред(Строка,6,2),Сред(Строка,9,2),Сред(Строка,12,2),Сред(Строка,15,2),Сред(Строка,18,2));
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецФункции

Функция Дата1С_в_ДатаXML(Дата) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Строка") Тогда
		
		Возврат Дата;
		
	ИначеЕсли ТипЗнч(Дата) = Тип("Дата") Тогда
		
		Возврат Формат(Дата,"ДФ=yyyy-MM-dd");
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция Дата1С_в_ВремяXML(Дата) Экспорт
	
	Возврат Формат(Дата,"ДФ=ЧЧ:мм:сс")+".000";
	
КонецФункции

Функция Дата1С_в_ДатаВремяXML(Дата) Экспорт
	
	ДатаXML		= Дата1С_в_ДатаXML(Дата);
	ВремяXML	= Дата1С_в_ВремяXML(Дата);
	
	Возврат ДатаXML+"T"+ВремяXML+"Z";
	
КонецФункции

КаталогОбмена = ВозвратыОтПокупателяСервер.КаталогОбменаССайтом(Ложь, Истина, 1);

мЗаписыватьИсториюОбмена = Константы.ИспользоватьИсторияОбменаССайтомВозвраты.Получить();
//