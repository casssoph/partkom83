
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Объект.ДатаНач 			= ПолучитьДатуНачалаПериодаПоУмолчанию(ТекущаяДата());
	Объект.ДатаКон 			= КонецДня(ТекущаяДата());
	Период.Вариант			= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Период.ДатаНачала		= Объект.ДатаНач;
	Период.ДатаОкончания	= Объект.ДатаКон;

	ОчиститьОтборы();
	
	Если ЗначениеЗаполнено(Параметры.ОбъектОтбора) Тогда
		Объект.ДатаНач			= Дата(1, 1, 1);
		Объект.ДатаКон			= Дата(1, 1, 1);
		Период.Вариант			= ВариантСтандартногоПериода.ПроизвольныйПериод;
		Период.ДатаНачала		= Объект.ДатаНач;
		Период.ДатаОкончания	= Объект.ДатаКон;
		МассивОбъектов.Добавить(Параметры.ОбъектОтбора);
	КонецЕсли;
		
	ОбновитьИсториюИзменений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ПроверитьОбновление", 3, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОтключитьСоединение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "внПерейтиНаТекущуюЗапись" Тогда
		Найдено = Ложь;
		Для Каждого Строки Из Объект.ИсторияИзменений Цикл
			Если Строки.Код = Параметр Тогда
				Элементы.ИсторияИзменений.ТекущаяСтрока = Строки.ПолучитьИдентификатор();
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найдено И Объект.ИсторияИзменений.Количество() <> 0 тогда
			Элементы.ИсторияИзменений.ТекущаяСтрока = Объект.ИсторияИзменений[Объект.ИсторияИзменений.Количество() - 1].ПолучитьИдентификатор();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "внВсеСобытияПоОбъекту" Тогда
		// За все периоды
		Объект.ДатаНач				= Дата(1, 1, 1);
		Объект.ДатаКон				= Дата(1, 1, 1);		
		Период.Вариант				= ВариантСтандартногоПериода.ПроизвольныйПериод;
		Период.ДатаНачала			= Объект.ДатаНач;
		Период.ДатаОкончания		= Объект.ДатаКон;

		// Очищаем все отборы
		ОчиститьОтборы();
		// Делаем отбор по объекту
		МассивОбъектов.Добавить(Параметр);		
		// Обновляем историю
		ОбновитьИсториюИзмененийКлиент();
	ИначеЕсли ИмяСобытия = "внОбновитьИсторию" Тогда
		// Обновляем историю
		ОбновитьИсториюИзмененийКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ФормаОтбора)
	
	Если ВыбранноеЗначение = ИСТИНА Тогда
		// Устанавливаем новые параметры
		// Пользователи
		ВсеПометки = Истина;
		МассивПользователи.Очистить();
		Для Каждого Элемент Из ФормаОтбора.Пользователи Цикл
			Если Элемент.Пометка Тогда
				МассивПользователи.Добавить(Элемент.Значение);
			Иначе
				ВсеПометки = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВсеПометки Тогда
			МассивПользователи.Очистить();
		КонецЕсли;
		
		// Компьютеры
		ВсеПометки = Истина;
		МассивКомпьютеры.Очистить();
		Для Каждого Элемент Из ФормаОтбора.Компьютеры Цикл
			Если Элемент.Пометка Тогда
				МассивКомпьютеры.Добавить(Элемент.Значение);
			Иначе
				ВсеПометки = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВсеПометки Тогда
			МассивКомпьютеры.Очистить();
		КонецЕсли;
		
		// РИБ
		ВсеПометки = Истина;
		МассивУзловРИБ.Очистить();
		Для Каждого Элемент Из ФормаОтбора.УзлыРИБ Цикл
			Если Элемент.Пометка Тогда
				МассивУзловРИБ.Добавить(Элемент.Значение);
			Иначе
				ВсеПометки = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВсеПометки Тогда
			МассивУзловРИБ.Очистить();
		КонецЕсли;		
		
		// События
		ВсеПометки = Истина;
		МассивСобытий.Очистить();
		Для Каждого Элемент Из ФормаОтбора.События Цикл
			Если Элемент.Пометка Тогда
				МассивСобытий.Добавить(Элемент.Значение);
			Иначе
				ВсеПометки = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВсеПометки Тогда
			МассивСобытий.Очистить();
		КонецЕсли;
		
		// Периоды
		Объект.ДатаНач 			= ФормаОтбора.ДатаНач;
		Объект.ДатаКон			= ФормаОтбора.ДатаКон;
		Период.Вариант			= ВариантСтандартногоПериода.ПроизвольныйПериод;
		Период.ДатаНачала		= Объект.ДатаНач;
		Период.ДатаОкончания	= Объект.ДатаКон;
		
		// Представление
		ПредставлениеОбъекта = ФормаОтбора.ПредставлениеОбъекта;
		
		// Объекты
		МассивОбъектов.Очистить();
		Если ЗначениеЗаполнено(ФормаОтбора.ДанныеОтбора) Тогда
			МассивОбъектов.Добавить(внЖурналРегистрации.СистемноеПредставлениеОбъекта(ФормаОтбора.ДанныеОтбора));
		КонецЕсли;
		
		// Объекты ссылка
		МассивОбъектовСсылок.Очистить();
		Если ЗначениеЗаполнено(ФормаОтбора.ДанныеОтбораСсылка) Тогда
			МассивОбъектовСсылок.Добавить(внЖурналРегистрации.СистемноеПредставлениеОбъекта(ФормаОтбора.ДанныеОтбораСсылка));
		КонецЕсли;
		
		// Метаданные
		ВсеПометки = Истина;
		МассивМетаданных.Очистить();
		Для Каждого Элемент Из ФормаОтбора.Мета Цикл
			Если Элемент.Пометка Тогда
				МассивМетаданных.Добавить(Элемент.Значение);
			Иначе
				ВсеПометки = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если ВсеПометки Тогда
			МассивМетаданных.Очистить();
		КонецЕсли;
				
		ОбновитьИсториюИзменений();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.ДатаНач = Период.ДатаНачала;
	Объект.ДатаКон = Период.ДатаОкончания;	
	ОбновитьИсториюИзмененийКлиент();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ СПИСКОВ И ТАБЛИЧНЫХ ЧАСТЕЙ

&НаКлиенте
Процедура ИсторияИзмененийПередНачаломИзменения(Элемент, Отказ)	
	
	Отказ = Истина;
	
	// Открываем данные по текущей записи
	ОткрытьСобытие(Элементы.ИсторияИзменений);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзмененийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзмененийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьИзмененияНаФорме(Команда)	
	
	Если Элементы.ИсторияИзменений.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбъектЖР = Элементы.ИсторияИзменений.ТекущиеДанные;

	ОбъектСсылка = НайтиСсылку(ОбъектЖР.Объект);
	Если ОбъектСсылка = Неопределено Тогда
		ОбъектСсылка = ОбъектЖР.Объект;
	КонецЕсли;
	
	ТипОбъекта = ОбъектЖР.Событие;
	
	СтрДатаИзмененияПлюсПользователь = Формат(ОбъектЖР.ДатаИзменения, "ДФ='dd.MM.yyyy HH:mm:ss'") + " " + ОбъектЖР.Пользователь;
	
	// Константа и входы, выходы
	Если ТипОбъекта = 4 ИЛИ ТипОбъекта = 9 ИЛИ ТипОбъекта = 10 ИЛИ ПустаяСтрока(ОбъектСсылка) Тогда
		#Если Клиент Тогда
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Для данного типа объектов изменения не показываются на форме!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Попытка
		П = Новый Структура("Ключ", ОбъектСсылка);
		Форма = ПолучитьФорму(ОбъектЖР.МетаданныеОбъекта + ".ФормаОбъекта", П);
		ЭлементыФормыОбъекта = Форма.ПодчиненныеЭлементы;		
		Изменения = ПолучитьИзмененияПоОбъекту(ОбъектЖР.ДатаИзменения, ОбъектЖР.Код, ОбъектЖР.УзелРИБ, ОбъектЖР.СостояниеЗаписи);
	Исключение
		#Если Клиент Тогда
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Для данного типа объектов изменения не показываются на форме!");
		#КонецЕсли
		Возврат;
	КонецПопытки;	
	
	Для Каждого Строки Из Изменения Цикл
		// Перебор всех реквизитов на форме
		Для Индекс = 0 По ЭлементыФормыОбъекта.Количество() - 1 Цикл
			Элемент = ЭлементыФормыОбъекта[Индекс];
			Если Строки.НомерСтрокиТЧ = 0 Тогда
				// ШАПКА
				Если ВРег(Элемент.Имя) = ВРег(Строки.ИмяРеквизита) Тогда
					Если Строки.ПредставлениеСтарое = Строки.ПредставлениеНовое И
						Строки.ПредставлениеНовое = "" Тогда
						СтрокаЗначений = "";
					Иначе
						СтрокаЗначений = 
						" '" + Строки.ПредставлениеСтарое + "' => " +
						" '" + Строки.ПредставлениеНовое + "'"
					КонецЕсли;
					
					Элемент.ЦветРамки = WebЦвета.Красный;
					Элемент.Подсказка = СтрДатаИзмененияПлюсПользователь + СтрокаЗначений;
				КонецЕсли;
			Иначе
				// ТЧ
				Если ВРег(Элемент.Имя) = ВРег(Строки.ИмяТЧ) Тогда
					Элемент.ЦветРамки = WebЦвета.Красный;
					Элемент.Подсказка =	СтрДатаИзмененияПлюсПользователь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюИзменения(Команда)
	
	ОбновитьИсториюИзмененийКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтбор(Команда)
	
	// Устанавливаем параметры отборов
	//ФормаОтбора = ПолучитьФорму("Обработка.внЖурналРегистрации.Форма.ФормаОтбораУправляемая");
	П = Новый Структура;
	
	// 1 страница
	// Заполняем пользователей
	мПользователи = внЖурналРегистрации.ПолучитьПользователейИстории();
	Для Каждого Элемент Из мПользователи Цикл
		Элемент.Пометка = МассивПользователи.НайтиПоЗначению(Элемент.Значение) <> Неопределено ИЛИ МассивПользователи.Количество() = 0;
		Элемент.Картинка = БиблиотекаКартинок.Пользователь;
	КонецЦикла;
	П.Вставить("Пользователи", мПользователи);
	                                                
	// Заполняем компьютеры
	мКомпьютеры = внЖурналРегистрации.ПолучитьКомпьютерыИстории();
	Для Каждого Элемент Из мКомпьютеры Цикл
		Элемент.Пометка = МассивКомпьютеры.НайтиПоЗначению(Элемент.Значение) <> Неопределено ИЛИ МассивКомпьютеры.Количество() = 0;
		Элемент.Картинка = БиблиотекаКартинок.Картинка;
	КонецЦикла;
	П.Вставить("Компьютеры", мКомпьютеры);
	
	// Заполняем события
	мСобытия = внЖурналРегистрации.ПолучитьСобытияИстории();
	Для Каждого Элемент Из мСобытия Цикл
		Элемент.Пометка = МассивСобытий.НайтиПоЗначению(Элемент.Значение) <> Неопределено ИЛИ МассивСобытий.Количество() = 0;
	КонецЦикла;	
	П.Вставить("События", мСобытия);
	
	// Период
	мДатаНач = Объект.ДатаНач;
	мДатаКон = Объект.ДатаКон;	
	П.Вставить("ДатаНач", мДатаНач);
	П.Вставить("ДатаКон", мДатаКон);
		
	// Представление
	мПредставлениеОбъекта = ПредставлениеОбъекта;
	П.Вставить("ПредставлениеОбъекта", мПредставлениеОбъекта);
	
	// Данные отбора
	мДанныеОтбора = Неопределено;
	Если МассивОбъектов.Количество() = 1 Тогда
		Попытка
			мДанныеОтбора = ЗначениеИзСтрокиВнутрСервер(МассивОбъектов[0].Значение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	П.Вставить("ДанныеОтбора", мДанныеОтбора);
	
	// Данные отбора
	мДанныеОтбораСсылка = Неопределено;
	Если МассивОбъектовСсылок.Количество() = 1 Тогда
		Попытка
			мДанныеОтбораСсылка = ЗначениеИзСтрокиВнутрСервер(МассивОбъектовСсылок[0].Значение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	П.Вставить("ДанныеОтбораСсылка", мДанныеОтбораСсылка);
	
	// Метаданные
	мМета = Новый СписокЗначений;
	Для Каждого Элемент Из МассивМетаданных Цикл
		мМета.Добавить(Элемент.Значение);		
	КонецЦикла;
	П.Вставить("Мета", мМета);
	
	// РИБ
	мУзлыРИБ = внЖурналРегистрации.ПолучитьУзлыРИБИстории();
	Для Каждого Элемент Из мУзлыРИБ Цикл
		Элемент.Пометка = МассивУзловРИБ.НайтиПоЗначению(Элемент.Значение) <> Неопределено ИЛИ МассивУзловРИБ.Количество() = 0;
		Элемент.Картинка = БиблиотекаКартинок.ПланОбмена;
	КонецЦикла;
	П.Вставить("УзлыРИБ", мУзлыРИБ);
	
	// Открываем форму
	ОткрытьФорму("Обработка.внЖурналРегистрации.Форма.ФормаОтбораУправляемая", П, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТекущемуОбъекту(Команда)
	
	Если Элементы.ИсторияИзменений.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// За все периоды
	Объект.ДатаНач			= Дата(1, 1, 1);
	Объект.ДатаКон			= Дата(1, 1, 1);
	Период.Вариант			= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Период.ДатаНачала		= Объект.ДатаНач;
	Период.ДатаОкончания	= Объект.ДатаКон;
	
	// Очищаем все отборы
	ОчиститьОтборы();
	
	// Делаем отбор по объекту
	ТекущиеДанные = Элементы.ИсторияИзменений.ТекущиеДанные;	
	Если ТекущиеДанные.Событие = 9 ИЛИ ТекущиеДанные.Событие = 10 Тогда
		МассивСобытий.Добавить(ТекущиеДанные.Событие);
	Иначе
		МассивОбъектов.Добавить(ТекущиеДанные.Объект);
	КонецЕсли; 
	// Обновляем историю
	ОбновитьИсториюИзмененийКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	
	Элементы.ОтборПоИзменениям.Пометка = Ложь;
	ТолькоИзменения = Ложь;
	ОчиститьОтборы();
	ОбновитьИсториюИзмененийКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАдминистрирование(Команда)
	
	Форма = ПолучитьФорму("Обработка.внНастройкаЖурналаРегистрации.Форма.ФормаУправляемая");
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСобытиеИстории(Команда)
	
	ОткрытьСобытие(Элементы.ИсторияИзменений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИзменениям(Команда)
	
	Элементы.ОтборПоИзменениям.Пометка = НЕ Элементы.ОтборПоИзменениям.Пометка;	
	ТолькоИзменения = Элементы.ОтборПоИзменениям.Пометка;
	
	// Обновляем историю
	ОбновитьИсториюИзменений();
	ОбновитьВидимостьИДоступность();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция СписокЗначенийВМассив(СЗ)
	
	Массив = Новый Массив();
	Для Каждого Элемент Из СЗ Цикл
		Массив.Добавить(Элемент.Значение);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции // СписокЗначенийВМассив

&НаСервере
Процедура УстановитьПериодПоУмолчанию()
	
	Объект.ДатаНач 			= ПолучитьДатуНачалаПериодаПоУмолчанию(ТекущаяДата());
	Объект.ДатаКон 			= КонецДня(ТекущаяДата());	
	Период.Вариант			= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Период.ДатаНачала		= Объект.ДатаНач;
	Период.ДатаОкончания	= Объект.ДатаКон;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПериодВыборкиСтрокойПоУмолчанию()
	
	Вариант = внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ДавностьПросмотраВЖурналеПоУмолчанию");	
	Если Вариант = 1 Тогда
		Возврат "квартал";
	ИначеЕсли Вариант = 2 Тогда
		Возврат "месяц";
	ИначеЕсли Вариант = 3 Тогда
		Возврат "неделю";
	ИначеЕсли Вариант = 4 Тогда
		Возврат "день";
	ИначеЕсли Вариант = 5 Тогда
		Возврат "час";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуНачалаПериодаПоУмолчанию(ТекДата)
	
	ДатаНачала = НачалоДня(ТекДата);
	Вариант = внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ДавностьПросмотраВЖурналеПоУмолчанию");	
	// 0 без огранчений, 1 - за квартал, 2 - за месяц, 3 - за неделю, 4 за день, 5 за час
	Если Вариант = 1 Тогда
		Возврат ДобавитьМесяц(ТекДата, -3);
	ИначеЕсли Вариант = 2 Тогда
		Возврат ТекДата - 86400 * 30;
	ИначеЕсли Вариант = 3 Тогда
		Возврат ТекДата - 86400 * 7;
	ИначеЕсли Вариант = 4 Тогда
		Возврат ТекДата - 86400;
	ИначеЕсли Вариант = 5 Тогда
		Возврат ТекДата - 3600;
	Иначе
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьИсториюИзменений()
		
	// Запоминаем позицию
	Структура = Новый Структура("Код,ДатаИзменения");
	Количество = Объект.ИсторияИзменений.Количество();
	Попытка
		СтрокаПоИдентификатору = Объект.ИсторияИзменений.НайтиПоИдентификатору(Элементы.ИсторияИзменений.ТекущаяСтрока);
		Структура.Код = СтрокаПоИдентификатору.Код;
		Структура.ДатаИзменения = СтрокаПоИдентификатору.ДатаИзменения;
	Исключение
		Структура.Код = -1;
		Структура.ДатаИзменения = Дата(1, 1, 1);
	КонецПопытки;
	
	// Обновляем
	Выборка = внЖурналРегистрации.ПолучитьИсториюИзменений(Объект.ДатаНач, Объект.ДатаКон,
			СписокЗначенийВМассив(МассивПользователи),
			СписокЗначенийВМассив(МассивКомпьютеры),
			СписокЗначенийВМассив(МассивМетаданных),
			СписокЗначенийВМассив(МассивОбъектов), 
			СписокЗначенийВМассив(МассивОбъектовСсылок), 
			СписокЗначенийВМассив(МассивСобытий),
			СписокЗначенийВМассив(МассивУзловРИБ),
			ПредставлениеОбъекта,
			ТолькоИзменения);
			
	Объект.ИсторияИзменений.Загрузить(Выборка);
	
	// Переходим на нужную позиция
	Если Структура.Код <> -1 Тогда
		НайденныеСтроки = Объект.ИсторияИзменений.НайтиСтроки(Структура);
		Найдено = НайденныеСтроки.Количество() > 0;
		Если Найдено Тогда
			Элементы.ИсторияИзменений.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Если НЕ Найдено И Объект.ИсторияИзменений.Количество() <> 0 тогда
			Элементы.ИсторияИзменений.ТекущаяСтрока = Объект.ИсторияИзменений[Объект.ИсторияИзменений.Количество() - 1].ПолучитьИдентификатор();
		КонецЕсли;
	ИначеЕсли Структура.Код = -1 И Объект.ИсторияИзменений.Количество() <> 0 Тогда
		Элементы.ИсторияИзменений.ТекущаяСтрока = Объект.ИсторияИзменений[Объект.ИсторияИзменений.Количество() - 1].ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбновитьВидимостьИДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюИзмененийКлиент()
	
	// Если все отборы отключены, и даты пустые
	// (то вопрос о выборке)
	Если МассивПользователи.Количество() = 0 И
		МассивКомпьютеры.Количество() = 0 И
		МассивМетаданных.Количество() = 0 И
		МассивОбъектов.Количество() = 0 И
		МассивОбъектовСсылок.Количество() = 0 И
		МассивСобытий.Количество() = 0 И
		МассивУзловРИБ.Количество() = 0 И
		ПредставлениеОбъекта = "" И
		Объект.ДатаНач = Дата(1, 1, 1) И
		Объект.ДатаКон = Дата(1, 1, 1) Тогда
		
		// Получить ответ пользователя по удалению параметров запроса.
		ТекстВопроса = "Все отборы отключены, выборка всей истории изменений за все время работы будет выполняться очень долго.
			|Установить период выборки по умолчанию(за последний " + ПериодВыборкиСтрокойПоУмолчанию() + ")?";
		Кнопки = РежимДиалогаВопрос.ДаНет;
		
		Если внЖурналРегистрацииПовтИсп.ИспользуетсяРежимМодальности() Тогда
			// Стандартный Вопрос() в модальном режиме (8.2/8.3).
			Ответ = Вычислить("Вопрос(ТекстВопроса, Кнопки, 0)");
			ОбновитьИсториюИзмененийКлиентПриЗавершенииВопроса(Ответ, Новый Структура);
		Иначе
			Попытка
				// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).				
				Выполнить(
					"ОписаниеОповещения = Новый ОписаниеОповещения(""ОбновитьИсториюИзмененийКлиентПриЗавершенииВопроса"", ЭтотОбъект, Неопределено);
					|ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);"
				);

				Возврат;
			Исключение
				внЖурналРегистрацииКлиент.СообщитьПользователю("Не могу показать вопрос!");
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИсториюИзменений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюИзмененийКлиентПриЗавершенииВопроса(Ответ, ПараметрыИсточника) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьПериодПоУмолчанию();
	КонецЕсли;
	
	ОбновитьИсториюИзменений();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИДоступность()
	
	Элементы.ФормаОтключитьОтбор.Доступность = 
		МассивПользователи.Количество() <> 0 ИЛИ
		МассивКомпьютеры.Количество() <> 0 ИЛИ
		МассивМетаданных.Количество() <> 0 ИЛИ
		МассивОбъектов.Количество() <> 0 ИЛИ
		МассивОбъектовСсылок.Количество() <> 0 ИЛИ
		МассивСобытий.Количество() <> 0 ИЛИ
		МассивУзловРИБ.Количество() <> 0 ИЛИ
		ПредставлениеОбъекта <> "" ИЛИ
		ТолькоИзменения = Истина;
		
КонецПроцедуры

&НаСервере
Функция ЗначениеИзСтрокиВнутрСервер(Стр)
	
	Возврат ЗначениеИзСтрокиВнутр(Стр);
	
КонецФункции

&НаСервере                          
Функция НайтиСсылку(Стр)
	
	Если внЖурналРегистрации.ЭтаСсылкаСуществуетВИБ(Стр) Тогда
		Ссылка = ЗначениеИзСтрокиВнутр(Стр);
	Иначе
		Ссылка = Неопределено;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьИзмененияПоОбъекту(ДатаИзменения, Код, УзелРИБ, СостояниеЗаписи)
	
	Изменения = внЖурналРегистрации.ПолучитьИзмененияПоОбъекту(ДатаИзменения, Код, УзелРИБ, СостояниеЗаписи);
	
	Массив = Новый Массив();
	Для Каждого Строки Из Изменения Цикл
		Соответствие = Новый Структура("НомерСтроки,ИмяТЧ,ИмяРеквизита,НомерСтрокиТЧ,ЗначениеСтарое,ЗначениеНовое,ПредставлениеСтарое,ПредставлениеНовое,ТипРеквизита");
		ЗаполнитьЗначенияСвойств(Соответствие, Строки);
		Массив.Добавить(Соответствие);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ОчиститьОтборы()
	
	// Очищаем все отборы
	МассивПользователи.Очистить();
	МассивКомпьютеры.Очистить();
	МассивМетаданных.Очистить();
	МассивОбъектов.Очистить();
	МассивОбъектовСсылок.Очистить();
	МассивСобытий.Очистить();
	МассивУзловРИБ.Очистить();
	ПредставлениеОбъекта = "";
	ТолькоИзменения = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСобытие(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Открываем форму
	ЗаголовокСобытия	= "Событие №" + Элемент.ТекущиеДанные.Код;
	Форма				= ПолучитьФорму("Обработка.внЖурналРегистрации.Форма.ФормаСобытияУправляемая",,ЭтаФорма, ЗаголовокСобытия);
	Форма.Заголовок		= ЗаголовокСобытия;
	// Переносим реквизиты за исключением реквизита "Объект" (иначе ошибка)
	ЗаполнитьЗначенияСвойств(Форма, Элемент.ТекущиеДанные, , "Объект");
	Форма.ТолькоИзменения = внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ОткрыватьСобытияСФильтромИзменений");
	Форма.ЗначениеОбъекта = Элемент.ТекущиеДанные.Объект;
	Форма.УИД			= Элемент.ТекущиеДанные.ПолучитьИдентификатор();
	
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьОбъектСервер(СтруктураДанных)
	Структура = внЖурналРегистрации.ОбразОбъектаНаДату(СтруктураДанных);
	Если Структура = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		П = Новый Структура("Структура", Структура);
		Возврат ПоместитьВоВременноеХранилище(П, Новый УникальныйИдентификатор);
	КонецЕсли;	
КонецФункции

&НаСервере
Функция СоздатьНовыйОбъектПоМетаданнымСервер(МетаданныеОбъекта, АдресСтруктуры)
	Структура	= ПолучитьИзВременногоХранилища(АдресСтруктуры);
	НовыйОбъект	= внЖурналРегистрации.СоздатьНовыйОбъектПоМетаданным(МетаданныеОбъекта, Структура.Структура.Образ);
	Возврат ПоместитьВоВременноеХранилище(НовыйОбъект, Новый УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ВосстановитьОбъектПоАдресу(СтруктураОткрываемогоОбъекта, АдресОбъекта, АдресСтруктуры, ОткрыватьФорму) Экспорт
	// Достанем из временного хранилища
	Структура = ПолучитьИзВременногоХранилища(АдресСтруктуры);
	
	// Восстановим объект
	НовыйОбъект = ПолучитьИзВременногоХранилища(АдресОбъекта);
	Об = НовыйОбъект;
	внЖурналРегистрации.ВосстановитьОбъект(Об, Структура.Структура.Образ, ОткрыватьФорму);	
	Об.Записать();
	
	СтруктураОткрываемогоОбъекта.Вставить("Ключ", Об.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоСсылкеАдресОбъекта(Ссылка)
	
	НовыйОбъект	= Ссылка.ПолучитьОбъект();
	
	Структура = Новый Структура("Объект", НовыйОбъект);
	
	Возврат ПоместитьВоВременноеХранилище(Структура, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВернутьсяКПредыдущейВерсии(Команда)
	
	ТекущиеДанные = Элементы.ИсторияИзменений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.СостояниеЗаписи = 0 Тогда		
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Объект не перенесен в Хранитель и не обработан. Не удалось восстановить предыдущую версию объекта!");
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = внЖурналРегистрации.ПолучитьТипОбъектаПоИмени(ТекущиеДанные.МетаданныеОбъекта);
	
	Если ТипОбъекта = 4 Тогда		
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Константа не может быть восстановлена и открыта!");
		Возврат;		
	КонецЕсли;
	
	// Восстановим образ объекта
	АдресСтруктуры = ВосстановитьОбъектСервер(Новый Структура("Код, ДатаИзменения, Объект, МетаданныеОбъекта", ТекущиеДанные.Код, ТекущиеДанные.ДатаИзменения, ТекущиеДанные.Объект, ТекущиеДанные.МетаданныеОбъекта));
	
	// Что-то пошло не так
	Если АдресСтруктуры = Неопределено Тогда
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Не удалось восстановить предыдущую версию объекта!");
		Возврат;		
	КонецЕсли;
	
	СтруктураОткрываемогоОбъекта = Новый Структура;
	
	Режим			= РежимДиалогаВопрос.ДаНет;
	Ответ			= Неопределено;	
	
	Если НЕ внЖурналРегистрации.ЭтаСсылкаСуществуетВИБ(ТекущиеДанные.Объект) Тогда		
		ТекстВопроса	= НСтр("ru = 'Видимо элемент удален из информационной базы 1С.
                       		|Создать новый объект на основании версии до удаления?'");		
		ДополнительныеПараметры	= Новый Структура("АдресСтруктуры,ТекущиеДанные,СтруктураОткрываемогоОбъекта",АдресСтруктуры,ТекущиеДанные,СтруктураОткрываемогоОбъекта);
		
		Если внЖурналРегистрацииПовтИсп.ИспользуетсяРежимМодальности() Тогда
			
			Ответ = Вычислить("Вопрос(ТекстВопроса, Режим, 0)");
 			ВернутьсяКПредыдущейВерсииЗавершениеСсылкаНеСуществует(Ответ, ДополнительныеПараметры);
			
		Иначе
			
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ВернутьсяКПредыдущейВерсииЗавершениеСсылкаНеСуществует"", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, Режим, 0)");
			
		КонецЕсли;
		
	Иначе		
		ОбъектВосстановленияСсылка	= внЖурналРегистрации.ЗначениеИзСтрокиВнутрСервер(ТекущиеДанные.Объект);
		АдресОбъектаВосстановления	= ПолучитьПоСсылкеАдресОбъекта(ОбъектВосстановленияСсылка);
		СтруктураОткрываемогоОбъекта.Вставить("Ключ", ОбъектВосстановленияСсылка);
		
		ДополнительныеПараметры	= Новый Структура("АдресСтруктуры,ОбъектВосстановленияСсылка,АдресОбъектаВосстановления,СтруктураОткрываемогоОбъекта,ТекущиеДанные",
			АдресСтруктуры,ОбъектВосстановленияСсылка,АдресОбъектаВосстановления,СтруктураОткрываемогоОбъекта,ТекущиеДанные);
		ТекстВопроса	= НСтр("ru = 'Откратить изменение до старой версии?'");
		
		Если внЖурналРегистрацииПовтИсп.ИспользуетсяРежимМодальности() Тогда
			
			Ответ = Вычислить("Вопрос(ТекстВопроса, Режим, 0)");
			ВернутьсяКПредыдущейВерсииЗавершениеСсылкаСуществует(Ответ, ДополнительныеПараметры);
			
		Иначе
			
		    Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ВернутьсяКПредыдущейВерсииЗавершениеСсылкаСуществует"", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, Режим, 0)");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКПредыдущейВерсииЗавершениеСсылкаСуществует(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	АдресСтруктуры					= ДополнительныеПараметры.АдресСтруктуры;
	АдресОбъектаВосстановления		= ДополнительныеПараметры.АдресОбъектаВосстановления;
	ТекущиеДанные					= ДополнительныеПараметры.ТекущиеДанные;
	СтруктураОткрываемогоОбъекта	= ДополнительныеПараметры.СтруктураОткрываемогоОбъекта;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ВернутьсяКПредыдущейВерсииФрагментОкончание(СтруктураОткрываемогоОбъекта, АдресОбъектаВосстановления, АдресСтруктуры, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКПредыдущейВерсииЗавершениеСсылкаНеСуществует(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	АдресСтруктуры 					= ДополнительныеПараметры.АдресСтруктуры;
	ТекущиеДанные					= ДополнительныеПараметры.ТекущиеДанные;
	СтруктураОткрываемогоОбъекта	= ДополнительныеПараметры.СтруктураОткрываемогоОбъекта;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	АдресОбъектаВосстановления		= СоздатьНовыйОбъектПоМетаданнымСервер(ТекущиеДанные.МетаданныеОбъекта, АдресСтруктуры);
	ВернутьсяКПредыдущейВерсииФрагментОкончание(СтруктураОткрываемогоОбъекта, АдресОбъектаВосстановления, АдресСтруктуры, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКПредыдущейВерсииФрагментОкончание(СтруктураОткрываемогоОбъекта, АдресОбъектаВосстановления, АдресСтруктуры, ТекущиеДанные) Экспорт
	
	ОткрыватьФорму = Ложь;
	ВосстановитьОбъектПоАдресу(СтруктураОткрываемогоОбъекта, АдресОбъектаВосстановления, АдресСтруктуры, ОткрыватьФорму);	
	
	Если ОткрыватьФорму Тогда		
		Попытка
			Форма = ПолучитьФорму(ТекущиеДанные.МетаданныеОбъекта + ".ФормаОбъекта", СтруктураОткрываемогоОбъекта);
			Форма.Открыть();
		Исключение
			Сообщить("Не удалось открыть форму объекта после восстановления!");
		КонецПопытки;		
	КонецЕсли;

	
	Попытка
		// Удаляем старый экземпляр структуры
		УдалитьИзВременногоХранилища(АдресСтруктуры);
		УдалитьИзВременногоХранилища(АдресОбъектаВосстановления);				
	Исключение		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьСоединение()
	
	внЖурналРегистрации.ОтключитьСоединение();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОбновленияНаСервере()
	
	Возврат внЖурналРегистрации.ПолучитьСтруктуруОписанияОбновлений();
	
КонецФункции

&НаКлиенте
Процедура ПроверитьОбновление()
	
	Структура = ПолучитьСтруктуруОбновленияНаСервере();
	Если Структура.НеобходимоОбновление Тогда
		ОткрытьФорму("Обработка.внЖурналРегистрации.Форма.ПроверкаНаличияОбновленийУправляемая", Структура);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзмененийПриАктивизацииСтроки(Элемент)
	// Доступность
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Элементы.ФормаПоказатьИзмененияНаФорме.Доступность = 
			Элемент.ТекущиеДанные.Событие <> 4
			И Элемент.ТекущиеДанные.Событие <> 9 
			И Элемент.ТекущиеДанные.Событие <> 10
			И Элемент.ТекущиеДанные.Событие <> 11
			И Найти(Элемент.ТекущиеДанные.МетаданныеОбъекта, "Константа.") <> 1
			И Найти(Элемент.ТекущиеДанные.МетаданныеОбъекта, "РегистрСведений.") <> 1;
			
		Элементы.ВернутьсяКПредыдущейВерсии.Доступность =
			Элемент.ТекущиеДанные.Событие <> 9 
			И Элемент.ТекущиеДанные.Событие <> 10 
			И Элемент.ТекущиеДанные.Событие <> 11
			И Найти(Элемент.ТекущиеДанные.МетаданныеОбъекта, "Константа.") <> 1
			И Найти(Элемент.ТекущиеДанные.МетаданныеОбъекта, "РегистрСведений.") <> 1;
		
	КонецЕсли;
КонецПроцедуры

