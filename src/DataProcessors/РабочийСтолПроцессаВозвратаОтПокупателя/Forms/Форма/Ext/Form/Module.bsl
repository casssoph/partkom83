&НаКлиенте
Перем мСканер;

&НаКлиенте
Процедура МоиАкты(Команда)
	УстановитьОтборПоОтветственному(ПараметрыСеанса.ТекущийПользователь);
КонецПроцедуры

&НаКлиенте
Процедура АктыБезОтветственного(Команда)
	УстановитьОтборПоОтветственному()
КонецПроцедуры

&НаКлиенте
Процедура АктыМоейГруппы(Команда)
	УстановитьОтборПоОтветственному(ПараметрыСеанса.ТекущийПользователь.ГруппаДоступаКСтатусамПроцессаВозвратаОтПокупателя)
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОтветственному(ПользовательОтбора = Неопределено)
	
	УстановитьОтборСписка(АктыРассмотренияВозврата.КомпоновщикНастроек, "Ответственный", ПользовательОтбора, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСписка(пКомпоновщикНастроек, ИмяПоля, ЗначениеПоля = Неопределено, ВидСравнения = Неопределено, Использование = Истина)
	
	ЭлОтбора = НайтиЭлементОтбора(пКомпоновщикНастроек.Настройки.Отбор.Элементы, ИмяПоля);
	
	ЭлОтбора.ПравоеЗначение = ЗначениеПоля;
	ЭлОтбора.Использование = Использование;
	ЭлОтбора.ВидСравнения = ВидСравнения;
	
	Для каждого ЭлементОтбора Из пКомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(ЭлементОтбора.ИдентификаторПользовательскойНастройки) = ЭлОтбора.ИдентификаторПользовательскойНастройки Тогда
			ЭлементОтбора.ПравоеЗначение = ЭлОтбора.ПравоеЗначение;
			ЭлементОтбора.Использование = ЭлОтбора.Использование;
			ЭлементОтбора.ВидСравнения = ЭлОтбора.ВидСравнения;
		КонецЕсли;
	КонецЦикла;             
	
КонецПроцедуры

&НаКлиенте
Функция НайтиЭлементОтбора(КоллекцияЭлементов, ИмяЭлемента)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = ИмяЭлемента Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

&НаСервере
Процедура АктыРассмотренияВозвратаПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//
	//Элементы.АктыРассмотренияВозврата.СоздатьЭлементыФормыПользовательскихНастроек(Элементы.КомпоновщикНастроекПользовательскиеНастройки, , 2);
	//УстановитьВидимостьНастроек(Элементы.КомпоновщикНастроекПользовательскиеНастройки);
	
КонецПроцедуры

//Для вывода вида сравнения у пользовательских настроек
&НаСервере
Процедура УстановитьВидимостьНастроек(ГруппаНастроек)
	
	МассивКлонируемыхЭлементов = Новый Массив;
	Для каждого ПодчиненныйЭлемент Из ГруппаНастроек.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			УстановитьВидимостьНастроек(ПодчиненныйЭлемент);
		Иначе
			Если СтрНайти(ПодчиненныйЭлемент.Имя, "ВидСравнения") <> 0 Тогда
				МассивКлонируемыхЭлементов.Добавить(ПодчиненныйЭлемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлонируемыйЭлемент Из МассивКлонируемыхЭлементов Цикл
		Клон = ЭтаФорма.Элементы.Вставить(КлонируемыйЭлемент.Имя + "Клон", ТипЗнч(КлонируемыйЭлемент), КлонируемыйЭлемент.Родитель, КлонируемыйЭлемент);
		ЗаполнитьЗначенияСвойств(Клон, КлонируемыйЭлемент, "Вид, ПоложениеЗаголовка, РастягиватьПоГоризонтали, ПутьКДанным");
		КлонируемыйЭлемент.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Элементы.АктыРассмотренияВозврата.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АктыРассмотренияВозвратаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	// Вставить содержимое обработчика.
КонецПроцедуры

#Область ПоискПоШтрихкоду

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	лКлючАлгоритма = "Обработка_РабочийСтолПроцессаВозвратаОтПокупателя_Форма_ВнешнееСобытие";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	ОбработатьШтрихкоды(Данные);
	
КонецПроцедуры


&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	лКлючАлгоритма = "Обработка_РабочийСтолПроцессаВозвратаОтПокупателя_Форма_ПоискПоШтрихкодуВыполнить";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	
	ОчиститьСообщения();
	
	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ОбработатьШтрихкоды(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(вхДанные)
	
	лКлючАлгоритма = "Обработка_РабочийСтолПроцессаВозвратаОтПокупателя_Форма_ОбработатьШтрихкоды";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	//ХудинВВ XX-2874  23072019 
	Данные = нрег(СтроковыеФункцииКлиентСервер.ЗаменитьРусскиеСимволыРаскладкиНаАнглийские(вхДанные));
	
	ПрефиксШтрихкодаПретензии = Документы.АктРассмотренияВозврата.ПрефиксШтрихкодаПретензии();
	
	Если Лев(Данные, 5) = "pkdvp" Тогда
		//Возврат от покупателя
		
		ЭтотГод = ПериодПоискаВозвратовПоШтрихкодуУКД = "ТекущийГод";
		
		Док = ШтрихкодированиеДокументов.НайтиДокументПоШтрихкодуНомеруПериод(Данные,Ложь,ЭтотГод);
		Если ЗначениеЗаполнено(Док) И ТипЗнч(Док) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Док, "АктРассмотренияВозврата, АктРассмотренияВозврата.СтатусДокумента");
			
			Если Справочники.СтатусыДокументов.ЭтоСтатусКРО(Реквизиты.АктРассмотренияВозвратаСтатусДокумента)
				И НЕ РольДоступна("ПолныеПрава") Тогда
				
				//ХудинВВ XX-2346 24052019
				ОбщегоНазначения.СообщитьОбОшибке("АРВ находится на расследовании у КРО, поэтому по нему запрещено отмечать получение или проверку документов от покупателя",,,СтатусСообщения.Важное);
				
			Иначе
				
				ВидПД = ПредопределенноеЗначение("Перечисление.ВидыПечатныхДокументов.УКД");
				Попытка
					ВозвратыОтПокупателяСервер.ОтразитьВозвратПечатныхДокументов(Док, Истина, ВидПД);
				Исключение
					Сообщить("Не удалось установить пометку о получении документа: "+ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
				
				ДатыВозвратаДокументов = РегистрыСведений.ДатыВозвратаДокументов.ДанныеДокумента(Док, ВидПД);
				Если ДатыВозвратаДокументов.Документ = Неопределено Тогда
					Сообщить(""+Док+": отметка о получении документов не установлена");
					ОткрытьЗначение(Док);
				Иначе
					
					Сообщить(""+Док+": получен "+ДатыВозвратаДокументов.ДатаВозврата+", "+ДатыВозвратаДокументов.Пользователь);
					
					//ХудинВВ 15032019 XX-2139 {{
					ДанныеДляПечати = Документы.ВозвратТоваровОтПокупателя.ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(Док);
					Если ДанныеДляПечати <> Неопределено Тогда
						
						НомерОснования 			= ?(ЗначениеЗаполнено(ДанныеДляПечати.НомерОснования), ДанныеДляПечати.НомерОснования, "--");
						ДатаОснования  			= ?(ЗначениеЗаполнено(ДанныеДляПечати.ДатаОснования), Формат(ДанныеДляПечати.ДатаОснования, "ДЛФ=ДД; ДП=--"),"--");
						
						Если ЗначениеЗаполнено(ДанныеДляПечати.НомерСчетФактуры) Тогда
							НомерУКД = ДанныеДляПечати.НомерСчетФактуры;
							ДатаУКД  = Формат(ДанныеДляПечати.ДатаСчетФактуры, "ДЛФ=ДД; ДП=--");
						Иначе
							НомерУКД = ДанныеДляПечати.Номер;
							ДатаУКД  = Формат(ДанныеДляПечати.Дата, "ДЛФ=ДД; ДП=--");
						КонецЕсли;  
						
						ТекстСообщения = "Корректировочный счет-фактура № "+НомерУКД+" от "+ДатаУКД+", к счету-фактуре (счетам-фактурам) №  "+НомерОснования+" от "+ДатаОснования+".";
						Сообщить(ТекстСообщения);
						
					КонецЕсли;
					
				КонецЕсли;
				
				//}}
				
				//ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Док, "Номер, Дата, Ссылка, ДокументОснование, ДокументОснование.УчитыватьНДС");
				//
				////НомерУКД
				//Сф = УчетНДС.НайтиПодчиненныйСчетФактуру(Док);
				//Если ЗначениеЗаполнено(Сф) Тогда
				//	РеквизитыСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сф, "Номер, Дата");
				//	ДатаУКД 	=  РеквизитыСФ.Дата;
				//	НомерУКД 	=  ОбщегоНазначения.ПолучитьНомерНаПечать(Сф);
				//Иначе
				//	ДатаУКД 	=  ДанныеДокумента.Дата;
				//	НомерУКД 	=  ДанныеДокумента.Номер;
				//КонецЕсли;
				//
				////Номер Основания
				//Если ДанныеДокумента.ДокументОснованиеУчитыватьНДС Тогда
				//	ДанныеОснования = ДОкументы.ВозвратТоваровОтПокупателя.ДанныеОснованияДляПечатиУКД(ДанныеДокумента);
				//	НомерОснования  = ДанныеОснования.НомерОснования;
				//	ДатаОснования   = ДанныеОснования.ДатаОснования;
				//Иначе
				//	НомерОснования 	= "";
				//	ДатаОснования 	= "";
				//КонецЕсли;
				//
				//НомерУКД 	= ?(ЗначениеЗаполнено(НомерУКД), НомерУКД, "-");
				//ДатаУКД 	= Формат(ДатаУКД, "ДЛФ=ДД; ДП=--");
				//
				//НомерОснования 	= ?(ЗначениеЗаполнено(НомерОснования), НомерОснования, "-");
				//ДатаОснования 	= Формат(ДатаОснования, "ДЛФ=ДД; ДП=--");
				//
				
				//}}
				
			КонецЕсли;
			
		Иначе
			Сообщить("Не найден документ ""Возврат товаров от покупателя"" по штрихкоду "+Данные);
		КонецЕсли;
		
	ИначеЕсли Лев(Данные, 2) = ПрефиксШтрихкодаПретензии Тогда //Претензия
		
		ШК = СтрЗаменить(Данные, ПрефиксШтрихкодаПретензии, "");
		//Пробуем найти АРВ
		АРВ = Документы.АктРассмотренияВозврата.НайтиПоРеквизиту("Штрихкод", ШК);
		Если ЗначениеЗаполнено(АРВ) Тогда
			
			//#XX-2311 Kalinin V.A. ( 2019-05-16 )  /*
			//ХудинВВ XX-2346, косяк, ставилась отметка, перенес условие выше
			Если ВозвратыОтПокупателяСервер.ВозможноЗафиксироватьПритензию(АРВ) тогда 
				// */
				
				ВидПД = ПредопределенноеЗначение("Перечисление.ВидыПечатныхДокументов.Претензия");
				
				РегистрыСведений.ДатыВозвратаДокументов.Добавить(АРВ, ВидПД);
				ДатыВозвратаДокументов = РегистрыСведений.ДатыВозвратаДокументов.ДанныеДокумента(АРВ, ВидПД);
				Если ДатыВозвратаДокументов.Документ = Неопределено Тогда
					
					Сообщить(""+АРВ+": отметка о получении претензии не установлена");
					ОткрытьЗначение(АРВ);
					
				Иначе
					Сообщить(""+АРВ+": претензия получена "+ДатыВозвратаДокументов.ДатаВозврата+", "+ДатыВозвратаДокументов.Пользователь);
					
					//Если получили претензию, можем создать корректировку долга, для этого добавим акт в очередь обработки
					РегистрыСведений.СобытияКОбработкеАктовРассмотренияВозврата.Добавить(
					АРВ, 
					ПредопределенноеЗначение("Перечисление.ВидыСобытийКОбработкеПроцессаВозвратов.ВыполнитьКомандыТекущегоСтатуса"), 
					АРВ.СтатусДокумента);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;			
		
	ИначеЕсли ЗначениеЗаполнено(Данные) Тогда
		//Пробуем найти АРВ
		АРВ = Документы.АктРассмотренияВозврата.НайтиПоРеквизиту("Штрихкод", Данные);
		Если ЗначениеЗаполнено(АРВ) Тогда
			ОткрытьЗначение(АРВ);
		Иначе
			Сообщить("Не найден акт возврата по штрихкоду """+Данные+""""); 			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестовыйШКПриИзменении(Элемент)
	ВнешнееСобытие(1, 2, ТестовыйШК);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	лКлючАлгоритма = "Обработка_РабочийСтолПроцессаВозвратаОтПокупателя_Форма_ПриОткрытии";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	//ХудинВВ XX-2874 10072019	
	мИспользоватьВКСканераШК = МенеджерОборудованияВызовСервераПереопределяемый.ИспользоватьВКСканераШК();  
	
	//Подключать = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	//"ИспользоватьСканерШтрихкода");
	
	Если мИспользоватьВКСканераШК Тогда
		Порт=1;
		Попытка
			ПодключитьВнешнююКомпоненту("AddIn.vk_rs232");
			мСканер = Новый("AddIn.vk_rs232");
			мСканер.ОткрытьПорт("COM"+Строка(Порт));
			мСканер.КонецСтроки = Символ(13);
		Исключение
			Сообщить("Не удалось подключить сканер штрихкода: "+ОписаниеОшибки());
		КонецПопытки;	
		
	КонецЕсли;
	
	Элементы.ПериодПоискаВозвратовПоШтрихкодуУКД.Видимость = Истина;
	ПериодПоискаВозвратовПоШтрихкодуУКД = Элементы.ПериодПоискаВозвратовПоШтрихкодуУКД.СписокВыбора[0].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если (мСканер <> Неопределено) тогда
		Попытка
			мСканер.ЗакрытьПорт();	
		Исключение
		КонецПопытки;	
	КонецЕсли;
	мСканер = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУКД(Команда)
	ОткрытьФорму("Обработка.МассоваяПечатьУКД.Форма.Форма");
КонецПроцедуры



