Процедура ВыполнитьРегламентноеЗадание() Экспорт
	если ПолноеОбновление тогда 
		Попытка 
		ДорегистрироватьИсторию();
	Исключение 
		КонецПопытки;
		НекорректныеПотекиИЗменения();
	КонецЕсли;
	
	Если БезЭсколации тогда 
		КолШагов = РазмерПакета/5000;
		РазмерПакета = 5000;
		Для а =1 по КолШагов цикл
			ОбработатьИзмененыеЗаявки();
			ОбработатьИзмененыеЗаявки(Истина);
		КонецЦикла;
	иначе 
		ОбработатьИзмененыеЗаявки();
		ОбработатьИзмененыеЗаявки(Истина);
	Конецесли 
КонецПроцедуры


#Область НовыйАлгоритм 

Процедура ОбработатьИзмененыеЗаявки(РозничныеЗаявки = ложь)  Экспорт 
	Если не ПроверитьЗаполнение() тогда 
		Период = новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	КонецЕсли;	
	ДатаНачалаОбработки = ТекущаяДата();
		
	ПакетИзменений = ПолучитьДанныеИзмений(РозничныеЗаявки);
	ИзмененныеСтроки = ПакетИзменений[4].Выбрать();
	ВыборкаСтрокЗаявки = ПакетИзменений[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВТранзации тогда 
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	
	СформироватьТекущееСостояниеЗаявкок(ВыборкаСтрокЗаявки,РозничныеЗаявки);	 	
	СнятьПометкуИзмененияНаСкуле(ИзмененныеСтроки,ДатаНачалаОбработки);
	
	Если ВТранзации тогда 	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьДанныеИзмений(РозничныеЗаявки)
	
	ЗапросСостояний = новый Запрос;
	ТекстЗапроса =   "ВЫБРАТЬ %1
	                 |	ИсторияЗаявокПокупателя.СтрокаЗаявки КАК СтрокаЗаявки,
	                 |	ИсторияЗаявокПокупателя.СтрокаПрихода,
	                 |	ИсторияЗаявокПокупателя.Отказ,
	                 |	ИсторияЗаявокПокупателя.Порядок,
	                 |	ИсторияЗаявокПокупателя.Состояние,
	                 |	ИсторияЗаявокПокупателя.Период,
	                 |	ИсторияЗаявокПокупателя.Количество,
	                 |	ИсторияЗаявокПокупателя.Изменена,
	                 |	ИсторияЗаявокПокупателя.Регистратор,
	                 |	ИсторияЗаявокПокупателя.Склад,
	                 |	ИсторияЗаявокПокупателя.Номенклатура,
	                 |	ИсторияЗаявокПокупателя.IDSite,
	                 |	ИсторияЗаявокПокупателя.НомерСтроки
	                 |ПОМЕСТИТЬ ВТИзменения
	                 |ИЗ
	                 |	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	                 |ГДЕ
	                 |	ИсторияЗаявокПокупателя.Изменена = ИСТИНА
	                 |	И ИсторияЗаявокПокупателя.СтрокаЗаявки.РозничнаяЗаявка = &РозничныеЗаявки  %2
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	МАКСИМУМ(ВтДанныеИстории.СтрокаЗаявки) КАК СтрокаЗаявки,
	                 |	ВтДанныеИстории.СтрокаПрихода КАК СтрокаПрихода,
	                 |	ВтДанныеИстории.Порядок КАК Порядок,
	                 |	ВтДанныеИстории.Отказ КАК Отказ,
	                 |	ВтДанныеИстории.Состояние КАК Состояние,
	                 |	ВтДанныеИстории.ДатаИзменения КАК ДатаИзменения,
	                 |	ВтДанныеИстории.Склад КАК Склад,
	                 |	ВтДанныеИстории.Номенклатура КАК Номенклатура,
	                 |	СУММА(ВтДанныеИстории.КоличествоВЗаявке) КАК КоличествоВЗаявке,
	                 |	СУММА(ВтДанныеИстории.КоличествоЗаказано) КАК КоличествоЗаказано,
	                 |	СУММА(ВтДанныеИстории.КоличествоОтгружено) КАК КоличествоОтгружено,
	                 |	СУММА(ВтДанныеИстории.КоличествоОтказ) КАК КоличествоОтказ,
	                 |	СУММА(ВтДанныеИстории.КоличествоПоступило) КАК КоличествоПоступило,
	                 |	ВтДанныеИстории.КоличествоГотовоКВыдаче,
	                 |	СУММА(ВтДанныеИстории.КоличествоВРезерве) КАК КоличествоВРезерве,
	                 |	ВтДанныеИстории.IDSite
	                 |ПОМЕСТИТЬ ВТСрезПоследних
	                 |ИЗ
	                 |	(ВЫБРАТЬ
	                 |		ИсторияЗаявокПокупателяСрезПоследних.СтрокаЗаявки КАК СтрокаЗаявки,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.СтрокаПрихода КАК СтрокаПрихода,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.Порядок КАК Порядок,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.Отказ КАК Отказ,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.Состояние КАК Состояние,
	                 |		МАКСИМУМ(ИсторияЗаявокПокупателяСрезПоследних.Период) КАК ДатаИзменения,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.Склад КАК Склад,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.Номенклатура КАК Номенклатура,
	                 |		СУММА(ВЫБОР
	                 |				КОГДА ИсторияЗаявокПокупателяСрезПоследних.Порядок = 1
	                 |					ТОГДА ИсторияЗаявокПокупателяСрезПоследних.Количество
	                 |				ИНАЧЕ 0
	                 |			КОНЕЦ) КАК КоличествоВЗаявке,
	                 |		СУММА(ВЫБОР
	                 |				КОГДА ИсторияЗаявокПокупателяСрезПоследних.Порядок = 2
	                 |					ТОГДА ИсторияЗаявокПокупателяСрезПоследних.Количество
	                 |				ИНАЧЕ 0
	                 |			КОНЕЦ) КАК КоличествоЗаказано,
	                 |		NULL КАК КоличествоОтгружено,
	                 |		NULL КАК КоличествоОтказ,
	                 |		NULL КАК КоличествоПоступило,
	                 |		NULL КАК КоличествоВРезерве,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.IDSite КАК IDSite,
	                 |		NULL КАК КоличествоГотовоКВыдаче
	                 |	ИЗ
	                 |		РегистрСведений.ИсторияЗаявокПокупателя.СрезПоследних(
	                 |				,
	                 |				СтрокаЗаявки В
	                 |						(ВЫБРАТЬ
	                 |							ВТИзменения.СтрокаЗаявки КАК СтрокаЗаявки
	                 |						ИЗ
	                 |							ВТИзменения КАК ВТИзменения)
	                 |					И (Порядок = 1
	                 |						ИЛИ Порядок = 2
	                 |						ИЛИ Порядок = 3)) КАК ИсторияЗаявокПокупателяСрезПоследних
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		ИсторияЗаявокПокупателяСрезПоследних.Состояние,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.СтрокаЗаявки,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.СтрокаПрихода,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.Склад,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.Номенклатура,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.Отказ,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.Порядок,
	                 |		ИсторияЗаявокПокупателяСрезПоследних.IDSite
	                 |	
	                 |	ОБЪЕДИНИТЬ ВСЕ
	                 |	
	                 |	ВЫБРАТЬ
	                 |		ИсторияЗаявокПокупателя.СтрокаЗаявки,
	                 |		ИсторияЗаявокПокупателя.СтрокаПрихода,
	                 |		ИсторияЗаявокПокупателя.Порядок,
	                 |		ИсторияЗаявокПокупателя.Отказ,
	                 |		ИсторияЗаявокПокупателя.Состояние,
	                 |		МАКСИМУМ(ИсторияЗаявокПокупателя.Период),
	                 |		ИсторияЗаявокПокупателя.Склад,
	                 |		ИсторияЗаявокПокупателя.Номенклатура,
	                 |		NULL,
	                 |		NULL,
	                 |		СУММА(ВЫБОР
	                 |				КОГДА ИсторияЗаявокПокупателя.Порядок = 8
	                 |					ТОГДА ИсторияЗаявокПокупателя.Количество
	                 |				ИНАЧЕ 0
	                 |			КОНЕЦ),
	                 |		СУММА(ВЫБОР
	                 |				КОГДА ИсторияЗаявокПокупателя.Отказ
	                 |					ТОГДА ИсторияЗаявокПокупателя.Количество
	                 |				ИНАЧЕ 0
	                 |			КОНЕЦ),
	                 |		ВЫБОР
	                 |			КОГДА ИсторияЗаявокПокупателя.Порядок = 4
	                 |				ТОГДА ИсторияЗаявокПокупателя.Количество
	                 |			ИНАЧЕ 0
	                 |		КОНЕЦ,
	                 |		СУММА(ВЫБОР
	                 |				КОГДА ИсторияЗаявокПокупателя.Порядок = 5
	                 |					ТОГДА ИсторияЗаявокПокупателя.Количество
	                 |				ИНАЧЕ 0
	                 |			КОНЕЦ),
	                 |		ИсторияЗаявокПокупателя.IDSite,
	                 |		СУММА(ВЫБОР
	                 |				КОГДА ИсторияЗаявокПокупателя.Порядок = 7
	                 |						И ИсторияЗаявокПокупателя.Состояние = ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ГотовКВыдаче)
	                 |					ТОГДА ИсторияЗаявокПокупателя.Количество
	                 |				ИНАЧЕ 0
	                 |			КОНЕЦ)
	                 |	ИЗ
	                 |		РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	                 |	ГДЕ
	                 |		НЕ ИсторияЗаявокПокупателя.Порядок = 1
	                 |		И НЕ ИсторияЗаявокПокупателя.Порядок = 2
	                 |		И НЕ ИсторияЗаявокПокупателя.Порядок = 3
	                 |		И ИсторияЗаявокПокупателя.СтрокаЗаявки В
	                 |				(ВЫБРАТЬ
	                 |					ВТИзменения.СтрокаЗаявки КАК СтрокаЗаявки
	                 |				ИЗ
	                 |					ВТИзменения КАК ВТИзменения)
	                 |	
	                 |	СГРУППИРОВАТЬ ПО
	                 |		ИсторияЗаявокПокупателя.СтрокаПрихода,
	                 |		ИсторияЗаявокПокупателя.Состояние,
	                 |		ИсторияЗаявокПокупателя.Склад,
	                 |		ИсторияЗаявокПокупателя.Номенклатура,
	                 |		ИсторияЗаявокПокупателя.Отказ,
	                 |		ИсторияЗаявокПокупателя.СтрокаЗаявки,
	                 |		ИсторияЗаявокПокупателя.Порядок,
	                 |		ВЫБОР
	                 |			КОГДА ИсторияЗаявокПокупателя.Порядок = 4
	                 |				ТОГДА ИсторияЗаявокПокупателя.Количество
	                 |			ИНАЧЕ 0
	                 |		КОНЕЦ,
	                 |		ИсторияЗаявокПокупателя.IDSite) КАК ВтДанныеИстории
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ВтДанныеИстории.IDSite,
	                 |	ВтДанныеИстории.СтрокаПрихода,
	                 |	ВтДанныеИстории.Отказ,
	                 |	ВтДанныеИстории.Состояние,
	                 |	ВтДанныеИстории.ДатаИзменения,
	                 |	ВтДанныеИстории.Склад,
	                 |	ВтДанныеИстории.Номенклатура,
	                 |	ВтДанныеИстории.Порядок,
	                 |	ВтДанныеИстории.КоличествоГотовоКВыдаче
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	СУММА(ВТСрезПоследних.КоличествоВЗаявке) КАК КоличествоВЗаявке,
	                 |	СУММА(ВТСрезПоследних.КоличествоЗаказано) КАК КоличествоЗаказано,
	                 |	СУММА(ВТСрезПоследних.КоличествоОтгружено) КАК КоличествоОтгружено,
	                 |	СУММА(ВТСрезПоследних.КоличествоОтказ) КАК КоличествоОтказ,
	                 |	СУММА(ВТСрезПоследних.КоличествоПоступило) КАК КоличествоПоступило,
	                 |	СУММА(ВТСрезПоследних.КоличествоВРезерве) КАК КоличествоВРезерве,
	                 |	ВТСрезПоследних.IDSite,
	                 |	СУММА(ВТСрезПоследних.КоличествоГотовоКВыдаче) КАК КоличествоГотовоКВыдаче
	                 |ПОМЕСТИТЬ ВТОбщий
	                 |ИЗ
	                 |	ВТСрезПоследних КАК ВТСрезПоследних
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ВТСрезПоследних.IDSite
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                 |	ВТСрезПоследних.IDSite КАК IDSite,
	                 |	ВТСрезПоследних.Состояние,
	                 |	ВТСрезПоследних.Порядок КАК Порядок,
	                 |	ВТСрезПоследних.ДатаИзменения КАК ДатаИзменения,
	                 |	ВТСрезПоследних.Отказ КАК Отказ,
	                 |	ВТОбщий.КоличествоВЗаявке,
	                 |	ВТОбщий.КоличествоЗаказано,
	                 |	ВТОбщий.КоличествоОтгружено,
	                 |	ВТОбщий.КоличествоОтказ,
	                 |	ВТОбщий.КоличествоПоступило,
	                 |	ВТОбщий.КоличествоВРезерве,
	                 |	ВТОбщий.КоличествоГотовоКВыдаче,
	                 |	ВТСрезПоследних.Склад,
	                 |	ВТСрезПоследних.Номенклатура,
	                 |	ВТСрезПоследних.СтрокаЗаявки КАК СтрокаЗаявки
	                 |ИЗ
	                 |	ВТСрезПоследних КАК ВТСрезПоследних
	                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбщий КАК ВТОбщий
	                 |		ПО ВТСрезПоследних.IDSite = ВТОбщий.IDSite
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	IDSite УБЫВ,
	                 |	Отказ УБЫВ,
	                 |	Порядок УБЫВ,
	                 |	ДатаИзменения УБЫВ
	                 |ИТОГИ ПО
	                 |	IDSite
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                 |	ВТИзменения.Регистратор,
	                 |	ВТИзменения.СтрокаЗаявки,
	                 |	ВТИзменения.НомерСтроки
	                 |ИЗ
	                 |	ВТИзменения КАК ВТИзменения";
	
	ЗапросСостояний.Текст =	СтрШаблон(ТекстЗапроса,
	?(ЗначениеЗаполнено(РазмерПакета) ," Первые "+Формат(РазмерПакета,"ЧГ=0"),""),
	ТекстОтбора());
	ЗапросСостояний.УстановитьПараметр("ДатаНач",Период.ДатаНачала);
	ЗапросСостояний.УстановитьПараметр("Датакон",Период.ДатаОкончания);
	ЗапросСостояний.УстановитьПараметр("СтрокиЗаявки",СтрокиЗаявок);
	ЗапросСостояний.УстановитьПараметр("РозничныеЗаявки",РозничныеЗаявки);
	
	Возврат ЗапросСостояний.ВыполнитьПакет();
	
КонецФункции

Функция ТекстОтбора(ТекстОтбора = "") 
	если ПолноеОбновление тогда 
	ТекстОтбора = ТекстОтбора +"
	|	И ИсторияЗаявокПокупателя.Период > &ДатаНач
	|	И ИсторияЗаявокПокупателя.Период < &Датакон "; 	
	КонецЕсли;
	
	если СтрокиЗаявок.Количество() тогда 
		ТекстОтбора = ТекстОтбора +"
	  |	И  ИсторияЗаявокПокупателя.СтрокаЗаявки в (&СтрокиЗаявки) ";
	КонецЕсли;
	
	возврат ТекстОтбора;
КонецФункции	

Функция ПолучитьМенеджерРегистра(РозничныеЗаявки) 
	Если РозничныеЗаявки тогда 
		возврат РегистрыСведений.СостояниеРозничныхЗаявокПокупателя 
	иначе 
		возврат РегистрыСведений.СостояниеЗаявокПокупателя
	КонецЕсли;	
	
КонецФункции	

Процедура СформироватьТекущееСостояниеЗаявкок(ВыборкаСтрокЗаявок,РозничныеЗаявки)
	
	Пока  ВыборкаСтрокЗаявок.Следующий() цикл    
		СтрокаЗаявки =ВыборкаСтрокЗаявок.СтрокаЗаявки;
		МенеджерРегистра = ПолучитьМенеджерРегистра(РозничныеЗаявки);
		
		МенеджрерЗаписи =  МенеджерРегистра.СоздатьМенеджерЗаписи();
		МенеджрерЗаписи.СтрокаЗаявки = СтрокаЗаявки;
		
		ВыборкаСостояний = ВыборкаСтрокЗаявок.Выбрать();
		ВыборкаСостояний.Следующий();
		//СтрокаКоличественныхПоказателей = "КоличествоВЗаявке,КоличествоВРезерве,КоличествоЗаказано,КоличествоПоступило,КоличествоОтгружено,КоличествоОтказ,ДатаИзменения,IDSite";
		ЗаполнитьЗначенияСвойств(МенеджрерЗаписи,ВыборкаСостояний);
		
		СостояниеПоследнее = ВыборкаСостояний.Состояние;
		ТекущееСостояние = ТекущееСостояние(ВыборкаСостояний,МенеджрерЗаписи);
		
		если  ТекущееСостояние = Неопределено тогда 
			Пока ВыборкаСостояний.Следующий() цикл 
				ТекущееСостояние = ТекущееСостояние(ВыборкаСостояний,МенеджрерЗаписи);
				если не ТекущееСостояние = Неопределено тогда 
					прервать;
				КонецЕсли;	
			КонецЦикла;					
		КонецЕсли;	
		
		Если ТекущееСостояние = Неопределено тогда 
			ТекущееСостояние=СостояниеПоследнее;
		КонецЕсли;
		МенеджрерЗаписи.Состояние =   ТекущееСостояние;
		
		МенеджрерЗаписи.Записать();
	КонецЦикла;	
	
КонецПроцедуры	

Функция ТекущееСостояние(ВыборкаСостояний,МенеджрерЗаписи)
	Если  МенеджрерЗаписи.КоличествоВЗаявке = 0 тогда 
		возврат  ВыборкаСостояний.Состояние;
	КонецЕсли;	
	
	Если ВыборкаСостояний.Отказ и МенеджрерЗаписи.КоличествоВЗаявке <= МенеджрерЗаписи.КоличествоОтказ тогда 
		Возврат ВыборкаСостояний.Состояние;
	Иначеесли  ВыборкаСостояний.Порядок = 8 и 
		МенеджрерЗаписи.КоличествоВЗаявке <= МенеджрерЗаписи.КоличествоОтгружено + МенеджрерЗаписи.КоличествоОтказ тогда
		Возврат ВыборкаСостояний.Состояние;
	Иначеесли  ВыборкаСостояний.Порядок = 7 и 
		(МенеджрерЗаписи.КоличествоВЗаявке <= МенеджрерЗаписи.КоличествоПоступило + МенеджрерЗаписи.КоличествоОтказ
		или МенеджрерЗаписи.КоличествоВЗаявке = МенеджрерЗаписи.КоличествоВРезерве) тогда
		Возврат ВыборкаСостояний.Состояние;				
	Иначеесли  ВыборкаСостояний.Порядок = 6 и 
		(МенеджрерЗаписи.КоличествоВЗаявке <= МенеджрерЗаписи.КоличествоПоступило + МенеджрерЗаписи.КоличествоОтказ
		или МенеджрерЗаписи.КоличествоВЗаявке = МенеджрерЗаписи.КоличествоВРезерве) тогда
		Возврат ВыборкаСостояний.Состояние;	
	Иначеесли  ВыборкаСостояний.Порядок = 5 и 
		МенеджрерЗаписи.КоличествоВЗаявке = МенеджрерЗаписи.КоличествоВРезерве + МенеджрерЗаписи.КоличествоОтказ тогда
		Возврат ВыборкаСостояний.Состояние;
	иначеесли  ВыборкаСостояний.порядок = 4   И 
	 	МенеджрерЗаписи.КоличествоВЗаявке =ВыборкаСостояний.КоличествоПоступило + МенеджрерЗаписи.КоличествоОтказ тогда
		Возврат ВыборкаСостояний.Состояние;	
	Иначеесли ( ВыборкаСостояний.Порядок = 2 или ВыборкаСостояний.Порядок = 3) и 
		МенеджрерЗаписи.КоличествоВЗаявке = МенеджрерЗаписи.КоличествоЗаказано тогда
		Возврат ВыборкаСостояний.Состояние;
	Иначеесли  ВыборкаСостояний.Порядок = 1 Тогда  
		Возврат ВыборкаСостояний.Состояние;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Процедура СнятьПометкуИзменения(ИзмененныеСтроки);
	
	Менеджер = РегистрыСведений.ИсторияЗаявокПокупателя;
	
	Пока ИзмененныеСтроки.Следующий() цикл 
		Попытка 
		Набор = РегистрыСведений.ИсторияЗаявокПокупателя.СоздатьНаборЗаписей();
		набор.Отбор.Регистратор.Установить(ИзмененныеСтроки.Регистратор);
		Набор.Прочитать();
		
		Для каждого СтрокаНабора из Набор цикл
			Если не ЗначениеЗаполнено(СтрокаНабора.Период) тогда
			СтрокаНабора.Период =ИзмененныеСтроки.Регистратор.Дата;
			конецесли;
			СтрокаНабора.Изменена  = Ложь;
		КонецЦикла;	
		
		набор.Записать();
	Исключение
		КонецПопытки;
	КонецЦикла;		  
	
	
КонецПроцедуры	


#Конецобласти 

#Область Регистрация 

Процедура ДорегистрироватьИсторию()
	МассивДокументов  = НеЗарегистрированыеДокументы();
	Если Не МассивДокументов = Неопределено тогда 
		РаботаСоСтатусамиДокументовСервер.ПотоковаяРегитсрацияОбъектов(МассивДокументов);	
	конецесли 		
конецпроцедуры


Функция НеЗарегистрированыеДокументы()
	запросДанных = новый Запрос;
	запросДанных.текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ЗаявкиПокупателей.Регистратор
	                    |ИЗ
	                    |	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиПокупателей КАК ЗаявкиПокупателей
	                    |		ПО ИсторияЗаявокПокупателя.СтрокаЗаявки = ЗаявкиПокупателей.СтрокаЗаявки
	                    |			И (ИсторияЗаявокПокупателя.Порядок = 1)
	                    |ГДЕ
	                    |	ИсторияЗаявокПокупателя.СтрокаЗаявки ЕСТЬ NULL
	                    |	И ЗаявкиПокупателей.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	                    |	И (ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	                    |			ИЛИ ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.КорректировкаЗаявкиПокупателя)
	                    |
	                    |ОБЪЕДИНИТЬ ВСЕ
	                    |
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ЗаказыПоставщикам.Регистратор
	                    |ИЗ
	                    |	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	                    |		ПО ЗаказыПоставщикам.СтрокаЗаявки = ИсторияЗаявокПокупателя.СтрокаЗаявки
	                    |			И (ИсторияЗаявокПокупателя.Порядок = 2)
	                    |ГДЕ
	                    |	ИсторияЗаявокПокупателя.СтрокаЗаявки ЕСТЬ NULL
	                    |	И (ЗаказыПоставщикам.Регистратор ССЫЛКА Документ.ЗаказПоставщику
	                    |			ИЛИ ЗаказыПоставщикам.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПоставщику)
	                    |	И ЗаказыПоставщикам.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	                    |
	                    |ОБЪЕДИНИТЬ ВСЕ
	                    |
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	Продажи.Регистратор
	                    |ИЗ
	                    |	РегистрНакопления.Продажи КАК Продажи
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	                    |		ПО Продажи.СтрокаЗаявки = ИсторияЗаявокПокупателя.СтрокаЗаявки
	                    |			И (ИсторияЗаявокПокупателя.Порядок = 7)
	                    |ГДЕ
	                    |	ИсторияЗаявокПокупателя.СтрокаЗаявки ЕСТЬ NULL
	                    |	И Продажи.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                    |	И Продажи.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	                    |	И НЕ Продажи.СтрокаЗаявки = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.Пустаяссылка)
	                    |
	                    |ОБЪЕДИНИТЬ ВСЕ
	                    |
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ОтказыПоЗаявкам.Регистратор
	                    |ИЗ
	                    |	РегистрНакопления.ОтказыПоЗаявкам КАК ОтказыПоЗаявкам
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	                    |		ПО ОтказыПоЗаявкам.СтрокаЗаявки = ИсторияЗаявокПокупателя.СтрокаЗаявки
	                    |			И (ИсторияЗаявокПокупателя.Отказ = ИСТИНА)
	                    |ГДЕ
	                    |	ИсторияЗаявокПокупателя.СтрокаЗаявки ЕСТЬ NULL
	                    |	И ОтказыПоЗаявкам.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	                    |	И (ОтказыПоЗаявкам.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	                    |			ИЛИ ОтказыПоЗаявкам.Регистратор ССЫЛКА Документ.КорректировкаЗаявкиПокупателя
	                    |			ИЛИ ОтказыПоЗаявкам.Регистратор ССЫЛКА Документ.ЗаказПоставщику
	                    |			ИЛИ ОтказыПоЗаявкам.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПоставщику
	                    |			ИЛИ ОтказыПоЗаявкам.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                    |			ИЛИ ОтказыПоЗаявкам.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг)
	                    |
	                    |ОБЪЕДИНИТЬ ВСЕ
	                    |
	                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	РазмещенияСтрокЗаказов.Регистратор
	                    |ИЗ
	                    |	РегистрНакопления.РазмещенияСтрокЗаказов КАК РазмещенияСтрокЗаказов
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	                    |		ПО РазмещенияСтрокЗаказов.СтрокаЗаявки = ИсторияЗаявокПокупателя.СтрокаЗаявки
	                    |			И (ИсторияЗаявокПокупателя.Порядок = 4)
	                    |ГДЕ
	                    |	ИсторияЗаявокПокупателя.СтрокаЗаявки ЕСТЬ NULL
	                    |	И РазмещенияСтрокЗаказов.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	                    |	И РазмещенияСтрокЗаказов.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг"; 
	
	Результат = запросДанных.выполнить();
	если Результат.Пустой() тогда 
		Возврат Неопределено;
	иначе 
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Регистратор");
	КонецЕсли;	  
	
КонецФункции	

Процедура НекорректныеПотекиИЗменения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсторияЗаявокПокупателя.Регистратор,
		|	ИсторияЗаявокПокупателя.СтрокаЗаявки
		|ИЗ
		|	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеЗаявокПокупателя КАК СостояниеЗаявокПокупателя
		|		ПО ИсторияЗаявокПокупателя.СтрокаЗаявки = СостояниеЗаявокПокупателя.СтрокаЗаявки
		|			И (ВЫБОР
		|				КОГДА ИсторияЗаявокПокупателя.Порядок = 1
		|					ТОГДА СостояниеЗаявокПокупателя.КоличествоВЗаявке > 0
		|				КОГДА ИсторияЗаявокПокупателя.Порядок = 5
		|					ТОГДА СостояниеЗаявокПокупателя.КоличествоВРезерве > 0
		|				КОГДА ИсторияЗаявокПокупателя.Порядок = 2
		|					ТОГДА СостояниеЗаявокПокупателя.КоличествоЗаказано > 0
		|				КОГДА ИсторияЗаявокПокупателя.Порядок = 4
		|					ТОГДА СостояниеЗаявокПокупателя.КоличествоПоступило > 0
		|				КОГДА ИсторияЗаявокПокупателя.Порядок = 8
		|					ТОГДА СостояниеЗаявокПокупателя.КоличествоОтгружено > 0
		|				КОГДА ИсторияЗаявокПокупателя.Порядок = 0
		|					ТОГДА СостояниеЗаявокПокупателя.КоличествоОтказ > 0
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|ГДЕ
		|	СостояниеЗаявокПокупателя.СтрокаЗаявки ЕСТЬ NULL
		|	И ИсторияЗаявокПокупателя.СтрокаЗаявки.РозничнаяЗаявка = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	   НаборЗаписей = РегистрыСведений.ИсторияЗаявокПокупателя.СоздатьНаборЗаписей();
	   НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
	   НаборЗаписей.Прочитать();
	   Для каждого СтрокаНабора из НаборЗаписей цикл 
		   Если СтрокаНабора.СтрокаЗаявки = ВыборкаДетальныеЗаписи.СтрокаЗаявки  тогда 
			СтрокаНабора.Изменена = истина ;
		  КонецЕсли;  
		КонецЦикла;   
	    НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры	


#Конецобласти 

#Область ОтменитьИзменияНаСкуле
Процедура СнятьПометкуИзмененияНаСкуле(ИзмененныеСтроки,ДатаНачалаФормирования)
	 СтрокаОтбораЗаявок ="";
	СтрокаОтбораРегистратор = "";
		
	 Пока  ИзмененныеСтроки.Следующий() цикл	
		UUIDx = ОбщегоНазначения.ПреобразоватьGUIDВФорматHEX(ИзмененныеСтроки.СтрокаЗаявки.УникальныйИдентификатор());
		СтрокаОтбораЗаявок = СтрокаОтбораЗаявок + ?(СтрокаОтбораЗаявок = "", UUIDx , ", " + UUIDx);
		
		UUIDРегистратор = ОбщегоНазначения.ПреобразоватьGUIDВФорматHEX(ИзмененныеСтроки.Регистратор.УникальныйИдентификатор());
		СтрокаОтбораРегистратор = СтрокаОтбораРегистратор + ?(СтрокаОтбораРегистратор = "", UUIDРегистратор , ", " + UUIDРегистратор);
		
		//СтрокаОтборНомерСтроки = СтрокаОтборНомерСтроки + ?(СтрокаОтборНомерСтроки = "", ИзмененныеСтроки.НомерСтроки , ", " +  ИзмененныеСтроки.НомерСтроки);

	КонецЦикла;
	Если  СтрокаОтбораРегистратор ="" тогда 
		возврат;
	КонецЕсли;	
	
	
	СтруктураСоединения = ПолучитьСтркутруСоединенияССервером();
	
	СтруктураСоединения. КомандаSQL.CommandText = ТекстЗапросаИзмененых(СтрокаОтбораЗаявок,СтрокаОтбораРегистратор,ДатаНачалаФормирования);
	СтруктураСоединения.КомандаSQL.Execute();		
	СтруктураСоединения.СоединениеSQL.Close();
		
	//Исключение
	//	ОписаниеОшибки = ОписаниеОшибки();
	//КонецПопытки;
	

	
КонецПроцедуры

Функция ТекстЗапросаИзмененых(СтрокаОтбораЗаявок,СтрокаОтбораРегистратор,ДатаНачалаФормирования,Отказ = ложь)
	
	ТекстЗапроса = "";
	СтруктураХранения = ПолучитьСтруктуруХраненияБазыДанных();
	
	ОписаниеТаблицы = СтруктураХранения.Найти("РегистрСведений.ИсторияЗаявокПокупателя", "ИмяТаблицы");
	
	Если ОписаниеТаблицы = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ИмяТаблицыХранения = "_" + ОписаниеТаблицы.ИмяТаблицыХранения;
		ОписаниеПолей = ОписаниеТаблицы.Поля;
		ПолеРегистратор =  "_" + ИмяПоляТаблицы(ОписаниеПолей, "Регистратор", Отказ) + "RRef";
		ПолеСтрокаЗаявки = "_" + ИмяПоляТаблицы(ОписаниеПолей, "СтрокаЗаявки", Отказ) + "RRef";
		ПолеИзменена = "_" + ИмяПоляТаблицы(ОписаниеПолей, "Изменена",Отказ);
		ПолеПериода = "_Period" 
	КонецЕсли;
	
	
	
	Если НЕ Отказ Тогда
		ТекстЗапроса =	"UPDATE " + ИмяТаблицыХранения + " set " + ПолеИзменена + " =  0x00 " +
						"WHERE " +
						 ПолеСтрокаЗаявки + " in (" + СтрокаОтбораЗаявок + ") "+
						"AND "+  
						ПолеПериода + " <= " + РаботаСSQL.ЗначениеSQL(ДатаНачалаФормирования) +			 
						"AND "+  
						ПолеРегистратор + " in (" + СтрокаОтбораРегистратор + ")";
	Иначе
		ВызватьИсключение("Ошибка формирования текста запроса SQL");
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ИмяПоляТаблицы(ОписаниеПолей, ИмяПоля, Отказ)
	
	ИмяПоляХранения = "";	
	Строка = ОписаниеПолей.Найти(ИмяПоля, "ИмяПоля");
	Если Строка = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ИмяПоляХранения = Строка.ИмяПоляХранения;
	КонецЕсли;
	
	Возврат ИмяПоляХранения;
	
КонецФункции


Функция ПолучитьСтркутруСоединенияССервером()
	СтруктураСоединения = Новый Структура;
	СтруктураСоединения.Вставить("СоединениеSQL",Новый COMОбъект("ADODB.Connection"));
	СтруктураСоединения.Вставить("КомандаSQL", Новый COMОбъект("ADODB.Command"));
	СтруктураСоединения.Вставить("ВыборкаSQL",Новый COMОбъект("ADODB.RecordSet"));
		
	СтрокаСоединенияSQL(СтруктураСоединения.СоединениеSQL.ConnectionString);
		
	СтруктураСоединения.СоединениеSQL.ConnectionTimeout = 30;
	СтруктураСоединения.СоединениеSQL.CommandTimeout = 6000;
	
	СтруктураСоединения.СоединениеSQL.Open();
	СтруктураСоединения.КомандаSQL.ActiveConnection   = СтруктураСоединения.СоединениеSQL;

	Возврат СтруктураСоединения	
	
КонецФункции

Процедура   СтрокаСоединенияSQL(СтрокаСоединения = "")
	
СтрокаБазы = СтрокаСоединенияИнформационнойБазы();
ИмяБДНаКластере =  НСтр(СтрокаБазы,"Ref");

если ИмяБДНаКластере = "partkom83_Kalinin" тогда 
	  Сервер = "nng9-v-sq-05";
	  Пользователь = "sa";
	  Пароль = "Pa$$w0rd";
	  База = "partkom83_Kalinin";
	  Сервер = "nng9-v-sq-05";
СтрокаСоединения =  "driver={SQL Server};server="+Сервер+";uid="+Пользователь+";pwd="+Пароль+";database="+База+";";	
иначе 
      СтрокаСоединения =  DataExchangeModule.СтрокаСоединенияSQL();
КонецЕсли;	  
	
КонецПроцедуры	
#КонецОбласти