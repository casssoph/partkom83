Перем ПравилаИгры;
Перем ТекстИтоговогоСообщения;
Перем КоличествоОбновленныхОбъектов;

Перем ЛогОтладки;

Функция СоздатьСтруктуруПараметровДляЗагрузки()
	
	Параметры = Новый Структура;
	
	// общие
	Тест = Истина;//Ложь;
	Параметры.Вставить("Тест", Тест);
	
	ТекДт = ТекущаяДата();
	Параметры.Вставить("ТекущаяДата", ТекДт);
	Параметры.Вставить("тхт_Дата", ДеньГода(ТекДт));
	Параметры.Вставить("ТекПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Параметры.Вставить("ОграничениеПоДате", НачалоДня(Дата("20160301")));
	
	// работа с файлами
	КаталогОбмена = "\\1csql01-g9\1c_exchange\bank\";
	Если Параметры.Тест тогда
		//КаталогОбмена = "\\partkom.local\ConfStorage1C\Exchange\1C83_bitf\Push\bank\";
	КонецЕсли;
	КаталогКопий = КаталогОбмена + "_Copy\";
	Каталог_Дата = КаталогКопий + "_Copy_" + Год(ТекДт) + "_" + Месяц(ТекДт) + "_" + День(ТекДт) + "\";	
	Параметры.Вставить("КаталогОбмена", КаталогОбмена);
	Параметры.Вставить("КаталогКопий", КаталогКопий);
	Параметры.Вставить("Каталог_Дата", Каталог_Дата);
	
	Параметры.Вставить("МаскаИмениФайлаЗагрузки", "банк_*.txt");
		
	СписокМасокФайловСОшибками = Новый Массив;
	СписокМасокФайловСОшибками.Добавить("*ошибка_*.txt");
	СписокМасокФайловСОшибками.Добавить("! Нельзя загрузить - *.txt");
	Параметры.Вставить("СписокМасокФайловСОшибками", СписокМасокФайловСОшибками);
	
	// структура загружаемого файла - источника
	АдресаВФайлеЗагрузки = Новый Структура;
	АдресаВФайлеЗагрузки.Вставить("Строка1","ДатаДок");
	АдресаВФайлеЗагрузки.Вставить("Строка2","БанковскийСчет_Номер");
	АдресаВФайлеЗагрузки.Вставить("Строка3","Контрагент_Код");
	АдресаВФайлеЗагрузки.Вставить("Строка4","Контрагент_ИНН");
	АдресаВФайлеЗагрузки.Вставить("Строка5","Контрагент_Наименование");
	АдресаВФайлеЗагрузки.Вставить("Строка6","UID");
	АдресаВФайлеЗагрузки.Вставить("Строка7","Назначение");
	АдресаВФайлеЗагрузки.Вставить("Строка8","ВидДвижения");
	АдресаВФайлеЗагрузки.Вставить("Строка9","Приход_Сумма");
	АдресаВФайлеЗагрузки.Вставить("Строка10","Расход_Сумма");
	АдресаВФайлеЗагрузки.Вставить("Строка11","UIDвыписки");
	АдресаВФайлеЗагрузки.Вставить("Строка12","Прочее");
	Параметры.Вставить("АдресаВФайлеЗагрузки",АдресаВФайлеЗагрузки);
	
	// структура документа - приемника
	
	ВидыДокументов = Новый Структура;
	ВидыДокументов.Вставить("СтрокаВыпискиПриход","ПлатежноеПоручениеВходящее");
	ВидыДокументов.Вставить("СтрокаВыпискиРасход","ПлатежноеПоручениеИсходящее");
	Параметры.Вставить("ВидыДокументов", ВидыДокументов);	
	
	ПлатежноеПоручениеВходящее_Шапка = Новый Структура;
	ДокументОбъект = Документы.ПлатежноеПоручениеВходящее.СоздатьДокумент();
	МетаданныеДокумента = ДокументОбъект.Метаданные();  	//МетаданныеДокумента = Метаданные.НайтиПоТипу(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		ПлатежноеПоручениеВходящее_Шапка.Вставить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	Параметры.Вставить("ПлатежноеПоручениеВходящее_Шапка", ПлатежноеПоручениеВходящее_Шапка);	
	
	ПлатежноеПоручениеИсходящее_Шапка = Новый Структура;
	ДокументОбъект = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
	МетаданныеДокумента = ДокументОбъект.Метаданные();  	//МетаданныеДокумента = Метаданные.НайтиПоТипу(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));	
	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		ПлатежноеПоручениеВходящее_Шапка.Вставить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	Параметры.Вставить("ПлатежноеПоручениеИсходящее_Шапка", ПлатежноеПоручениеИсходящее_Шапка);	
	
	// для работы с договорами
	СтатьиДДС = Новый Структура;
	СтатьиДДС.Вставить("ОплатаПоставщику",НайтиСтатьюПоНаименованию("Оплата поставщику"));        //Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику //спрДДС.НайтиПоНаименованию("Оплата поставщику",0,1);
	СтатьиДДС.Вставить("ПоступленияОтПокупателя",НайтиСтатьюПоНаименованию("Поступления от покупателей")); //Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя//спрДДС.НайтиПоНаименованию("Поступления от покупателей",0,1);
	СтатьиДДС.Вставить("Депозит",НайтиСтатьюПоНаименованию("Депозит"));     								  //спрДДС.НайтиПоНаименованию("Депозит",0,1);  
	СтатьиДДС.Вставить("ВозвратДенежныхСредствПоставщиком",НайтиСтатьюПоНаименованию("Возврат от поставщика"));   //Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПоставщиком
	СтатьиДДС.Вставить("ВозвратДенежныхСредствПокупателю",НайтиСтатьюПоНаименованию("Возврат покупателю"));    //Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПокупателю
	СтатьиДДС.Вставить("СтатьяНеНайдена",Справочники.СтатьиДвиженияДенежныхСредств.СтатьяНеНайдена);
	
	
	СтатьиДДС.Вставить("АгентПоступление",НайтиСтатьюПоНаименованию("Поступления по аген.договору"));
	СтатьиДДС.Вставить("АгентОплата",НайтиСтатьюПоНаименованию("Оплата по агентскому договору"));
	
	
		//////ИначеЕсли Найти(стрТЗ.ВидДвижения, "Поступления по аген.договору") > 0 И ВидДокумента = "СтрокаВыпискиПриход"  Тогда
		//////	//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.ПоступленияОтПокупателя;
		//////	стрТЗ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		//////	
		//////ИначеЕсли Найти(стрТЗ.ВидДвижения, "Оплата по агентскому договору") > 0 И ВидДокумента = "СтрокаВыпискиРасход" Тогда
		//////	//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.ОплатаПоставщику;
		//////	стрТЗ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
	
	
	Параметры.Вставить("СтатьиДДС", СтатьиДДС);	
	
	СписокСтрокПоиска = Новый Массив;
	СписокСтрокПоиска.Добавить("акцепт публичной оферты");
	СписокСтрокПоиска.Добавить("акцептпубличнойоферты");
	СписокСтрокПоиска.Добавить("акцепт публичная оферта");
	СписокСтрокПоиска.Добавить("акцептпубличнаяоферта");
	СписокСтрокПоиска.Добавить("оферта публичная акцепт");
	СписокСтрокПоиска.Добавить("офертапубличнаяакцепт");
	Параметры.Вставить("СписокСтрокПоиска", СписокСтрокПоиска);	
	
	Параметры.Вставить("ПризнакОплатыVMI", "VMI");	
	Параметры.Вставить("СуммаПлатежаАкцептаОферты", 10000);
	
	Параметры.Вставить("ВсеНомераДоговоровОферты", ЗапросПоНомерамДоговоровОферты());
	
	// оповещение
	Если Параметры.Тест тогда
		Параметры.Вставить("ТекАдресКому_обОферте", "Pushkin-DS@Part-kom.ru");
	Иначе
		Параметры.Вставить("ТекАдресКому_обОферте", "Marushchenko-MA@part-kom.ru;Vorobyova-LS@part-kom.ru"); //;Pushkin-DS@Part-kom.ru;Chikisheva-TY@part-kom.ru
	КонецЕсли;
	Параметры.Вставить("АдресЭлПочтыОтправителя", "Pushkin-DS@Part-kom.ru");
	Параметры.Вставить("АдресЭлПочтыЗаинтересованногоЛица", "Pushkin-DS@Part-kom.ru");
	
	Параметры.Вставить("АдресЭлПочтыЗаинтересованногоЛицаДляОтладки", "Golubev-SV@part-kom.ru");
	
	// интеграция с внешними ИС - выгрузка сообщений для Элмы //1С77 : ОткрытьФорму("Отчет", сзПарам_дляЭлмы, КаталогИБ()+"ExtForms\Обработки\Выгрузка_вELMA_файл.ert");
	сзПарам_дляЭлмы_идентификаторы = Новый Массив;
	сзПарам_дляЭлмы_идентификаторы.Добавить("ВидПроцесса");
	сзПарам_дляЭлмы_идентификаторы.Добавить("ИмяПроцесса");
	сзПарам_дляЭлмы_идентификаторы.Добавить("Контрагент_Код");
	сзПарам_дляЭлмы_идентификаторы.Добавить("СтарыйДоговор_Номер");
	сзПарам_дляЭлмы_идентификаторы.Добавить("СтарыйДоговор_Дата");
	сзПарам_дляЭлмы_идентификаторы.Добавить("ТекущийДолг");
	сзПарам_дляЭлмы_идентификаторы.Добавить("НовыйДоговор_Номер");
	сзПарам_дляЭлмы_идентификаторы.Добавить("НовыйДоговор_Дата");
	сзПарам_дляЭлмы_идентификаторы.Добавить("Менеджер");
	сзПарам_дляЭлмы_идентификаторы.Добавить("Фирма_Наименование");
	Параметры.Вставить("сзПарам_дляЭлмы_идентификаторы", сзПарам_дляЭлмы_идентификаторы);
	
	КаталогОбменаСЭлмой = "\\1csql01-g9\1c_exchange\Elma_watching\NewElma\";
	Если Параметры.Тест тогда
		КаталогОбменаСЭлмой = КаталогОбмена;
	КонецЕсли;
	Параметры.Вставить("КаталогОбменаСЭлмой", КаталогОбменаСЭлмой);
	Параметры.Вставить("ИмяФайлаОбменаСЭлмой", "translate_offer_%%Контрагент_Код%%.xml");
	
	ТекстФайла_Оферта_Покупателя =
	"<?xml version=""1.0"" encoding=""windows-1251"" ?>
	|<workflow-run xmlns=""workflow"">
	|<login Required=""true"">admin</login>
	|<password Required=""true"">bpmn17</password>
	|<token Required=""true"">translate_offer</token>
	|<workflow-name Required=""true"">%%ИмяПроцесса%%</workflow-name>
	|
	|<variable-list>
	|<crmcompany-variable name=""Klient"">
	|<crm-name></crm-name>
	|<crm-id>-1</crm-id>
	|<crm-oid>%%Контрагент_Код%%</crm-oid>
	|</crmcompany-variable>
	|
	|<string-variable name=""StarogoDogovora"">%%СтарыйДоговор_Номер%%</string-variable>
	|<date-variable name=""DataStarogoDogovora"">%%СтарыйДоговор_Дата%%</date-variable>
	|<string-variable name=""TekuschayaZadolzhennostjPoStaromuDogovoru"">%%ТекущийДолг%%</string-variable>
	|<string-variable name=""NovogoDogovora"">%%НовыйДоговор_Номер%%</string-variable>
	|<date-variable name=""DataNovogoDogovora"">%%НовыйДоговор_Дата%%</date-variable>
	|<string-variable name=""MenedzherOtvetstvennyyZaKlienta"">%%Менеджер%%</string-variable>
	|<string-variable name=""FirmaOtgruzki"">%%Фирма%%</string-variable>
	|</variable-list>
	|</workflow-run>
	|";
	Параметры.Вставить("ТекстФайла_Оферта_Покупателя", ТекстФайла_Оферта_Покупателя);
	
	Параметры.Вставить("ИмяФайлаЛогаОтладки", Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd") + ".txt");
	
	Возврат Параметры;	
	
КонецФункции
Процедура ОпросКаталогаВыгрузкиБанковскихВыписок() экспорт
	
	ТекстИтоговогоСообщения = "";
	ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + "начало: " + СокрЛП(ТекущаяДата());
	
	ПравилаИгры = СоздатьСтруктуруПараметровДляЗагрузки();
	КоличествоОбновленныхОбъектов = 0;
	
	// определим доступность каталога обмена и его подкаталоги
	
	ИмяКаталога = ПравилаИгры.КаталогОбмена;
	
	Если РаботаСКаталогамиНеВозможна(ИмяКаталога) 			          тогда	Возврат;	КонецЕсли;
	Если РаботаСКаталогамиНеВозможна(ПравилаИгры.КаталогКопий)        тогда	Возврат;	КонецЕсли;
	Если РаботаСКаталогамиНеВозможна(ПравилаИгры.Каталог_Дата)        тогда	Возврат;	КонецЕсли;
	Если РаботаСКаталогамиНеВозможна(ПравилаИгры.КаталогОбменаСЭлмой) тогда	Возврат;	КонецЕсли;
	
	Если ПравилаИгры.Тест тогда
		// для удобства перезагрузки за прошлые периоды переименуем файлы
		Если ПравилаИгры.СписокМасокФайловСОшибками.Количество() > 0 тогда
			СчФайловСОшибками = 0;
			Для каждого тек_маска из ПравилаИгры.СписокМасокФайловСОшибками цикл
				
				СписокФайлов = НайтиФайлы(ИмяКаталога, тек_маска);
				Если СписокФайлов.Количество() > 0 тогда
					Для Каждого ФайлДляЗагрузки Из СписокФайлов цикл
						
						ИмяФайлаДляЗагрузки = ФайлДляЗагрузки.Имя;
						ИмяФайлаДляЗагрузкиИсправленное = Сред(ИмяФайлаДляЗагрузки, Найти(ИмяФайлаДляЗагрузки,"банк_"));
		
						ПереместитьФайл( ПолучитьИмяФайла(ИмяКаталога, ИмяФайлаДляЗагрузки) ,  ПолучитьИмяФайла(ИмяКаталога, ИмяФайлаДляЗагрузкиИсправленное) );
						
					КонецЦикла;
				КонецЕсли;
		
			КонецЦикла;
			Если СчФайловСОшибками > 0 тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// смотрим на сколько успешны были предыдущие попытки загрузить данные
	
	Если ПравилаИгры.СписокМасокФайловСОшибками.Количество() > 0 тогда
		СчФайловСОшибками = 0;
		Для каждого тек_маска из ПравилаИгры.СписокМасокФайловСОшибками цикл
			
			СписокФайлов = НайтиФайлы(ИмяКаталога, тек_маска);
			Если СписокФайлов.Количество() > 0 тогда
				Для Каждого ФайлДляЗагрузки Из СписокФайлов цикл
					
					Если Час(ФайлДляЗагрузки.ПолучитьВремяИзменения()) = Час(ПравилаИгры.ТекущаяДата) тогда
						Продолжить;
					КонецЕсли;
					
					СчФайловСОшибками = СчФайловСОшибками + 1;
					ТекстПредупреждения = "*** *** Есть ошибки загрузки банковских выписок из бухгалтерии.
					|Каталог обмена [" + СокрЛП(ИмяКаталога) + "]
					|Не обработана информация из след.файлов [" + СокрЛП(ФайлДляЗагрузки.Имя) + "]";
					
					ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + ТекстПредупреждения;
					
				КонецЦикла;
			КонецЕсли;
	
		КонецЦикла;
		Если СчФайловСОшибками > 0 тогда
			//////#Если Клиент Тогда
			//////	Сообщить(ТекстИтоговогоСообщения);
			//////#Иначе
					глЗаписьИнформации_ДляОтправкиПоЭлПочте(ТекстИтоговогоСообщения, Истина);
			//////#КонецЕсли	
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// определяем претендентов на загрузку
	
	СписокФайлов = НайтиФайлы(ИмяКаталога, ПравилаИгры.МаскаИмениФайлаЗагрузки);
	Если СписокФайлов.Количество() = 0 тогда
		ТекстПредупреждения = "Каталог обмена [" + СокрЛП(ИмяКаталога) + "] пуст!";
		ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + ТекстПредупреждения;
		//////#Если Клиент Тогда
		//////	Сообщить(ТекстПредупреждения);
		//////#Иначе
		//////#КонецЕсли	
		//////глЗаписьИнформации_ДляОтправкиПоЭлПочте(ТекстИтоговогоСообщения, Истина);
		Возврат;
	КонецЕсли;
	
	// загрузка данных
	
	
	
	ываы = СписокФайлов.Количество();
	cxad = 0;
	cxadап = 0;
	cxadно = 0;
	
	cxadапвх = 0;
	cxadаписх = 0;
	
	cxadнотз = Новый ТаблицаЗначений;
	cxadнотз.Колонки.Добавить("ткст");
	cxadнотз.Колонки.Добавить("cxadно");
	
	Для Каждого ФайлДляЗагрузки Из СписокФайлов Цикл
		
		cxad = cxad + 1;
		
		////////#Если Клиент Тогда
		////////	Состояние(СокрЛП(cxad) + " из " + СокрЛП(ываы));
		////////#Иначе
		////////	
		////////#КонецЕсли	
		
		// обработка файла
		ИмяФайлаДляЗагрузки = ФайлДляЗагрузки.Имя;
		ИмяФайлаДляЗагрузкиПолное = ФайлДляЗагрузки.ПолноеИмя;
		
		ИмяФайлаДляЗагрузки_Изм = СокрЛП(ПравилаИгры.тхт_Дата) + "ошибка_" + ИмяФайлаДляЗагрузки;
		ПолноеИмяФайлаДляЗагрузки_Изм = ИмяКаталога + ИмяФайлаДляЗагрузки_Изм;
		
		ПереместитьФайл(ИмяФайлаДляЗагрузкиПолное, ПолноеИмяФайлаДляЗагрузки_Изм);
		
		Результат = ОбработатьВходящийФайл(ПолноеИмяФайлаДляЗагрузки_Изм);
		Работа_сФайлом(Результат.КодОшибки, ИмяФайлаДляЗагрузки_Изм, ИмяФайлаДляЗагрузки);
		
		// обработаем и запомним результат
		ТекстПредупреждения = "";
		Если Результат.ОбработанУспешно тогда
			ТекстПредупреждения = СокрЛП(cxad) + ". успешно загружен [" + ИмяФайлаДляЗагрузки + "] в [" + Результат.Платежка + "]";
			
			cxadап = cxadап + 1 ;
			Если ТипЗнч(Результат.Платежка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") тогда
				cxadапвх = cxadапвх + 1 ;
			ИначеЕсли ТипЗнч(Результат.Платежка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") тогда
				cxadаписх = cxadаписх + 1 ;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Результат.ТекстОшибки) тогда
				ТекстПредупреждения = ТекстПредупреждения + СокрЛП(Результат.ТекстОшибки);
				cxadно = cxadно + 1 ;
				cxadнотзстр = cxadнотз.Добавить();
				cxadнотзстр.ткст = СокрЛП(Результат.ТекстОшибки);
				cxadнотзстр.cxadно = 1;
			КонецЕсли;
			
		Иначе
			ТекстПредупреждения = СокрЛП(cxad) + ". ошибка загрузки [" + ИмяФайлаДляЗагрузки + "] код ошибки [" + Результат.КодОшибки + "]" + " текст ошибки [" + Результат.ТекстОшибки + "]";
			
			cxadно = cxadно + 1 ;
			Если ТипЗнч(Результат.Платежка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") тогда
				cxadапвх = cxadапвх + 1 ;
			ИначеЕсли ТипЗнч(Результат.Платежка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") тогда
				cxadаписх = cxadаписх + 1 ;
			КонецЕсли;
			
			cxadнотзстр = cxadнотз.Добавить();
			cxadнотзстр.ткст = СокрЛП(Результат.ТекстОшибки);
			cxadнотзстр.cxadно = 1;
			
		КонецЕсли;
		ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + ТекстПредупреждения;
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЦикла;	
	
	ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + "конец: " + СокрЛП(ТекущаяДата());
	ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + "всего файлов на входе : " + СокрЛП(ываы);
	ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + "обработано файлов : " + СокрЛП(cxad);
	ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + "успешно : " + СокрЛП(cxadап);
	ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + "с ошибками : " + СокрЛП(cxadно);
	
	cxadнотз.Свернуть("ткст","cxadно");
	Для каждого cxadнотзстр из cxadнотз цикл
		ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + СокрлП(cxadнотзстр.ткст) + " = " + СокрлП(cxadнотзстр.cxadно);
	КонецЦикла;
	
	ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + "ПлатежноеПоручениеВходящее : " + СокрЛП(cxadапвх);
	ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + "ПлатежноеПоручениеИсходящее : " + СокрЛП(cxadаписх);
	ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + "КоличествоОбновленныхОбъектов : " + СокрЛП(КоличествоОбновленныхОбъектов);
		
	// пообщаемся с юзвером
	//////#Если Клиент Тогда
	//////	Сообщить(ТекстИтоговогоСообщения);
	//////#Иначе
	    	глЗаписьИнформации_ДляОтправкиПоЭлПочте(ТекстИтоговогоСообщения, Истина);
	//////#КонецЕсли
	
	//ФайлЛогаОтладки = Новый ТекстовыйДокумент;
	//ФайлЛогаОтладки.УстановитьТекст(ЛогОтладки);
	//ФайлЛогаОтладки.Записать(ПравилаИгры.КаталогОбмена + ПравилаИгры.ИмяФайлаЛогаОтладки);
		
КонецПроцедуры
Функция	ОбработатьВходящийФайл(ИмяФайлаДляЗагрузки)
	Рез = Новый Структура("КодОшибки, ТекстОшибки, ОбработанУспешно, Платежка", 3, "", Ложь, Неопределено);
	
	//---------------------------------------------------------------------------------------------------------------------------------------
	// наследие СВН: коды ошибок :
	//Если 1 Тогда // успешно - файл-источник надо удалить
	//Если 2 Тогда // не успешно, что-то не записалось, не создалось, надо повторить, следовательно надо вернуть прежнее имя файлу-источнику
	//Если 3 Тогда // отсутствует файл // ничего не делаем
	//Если 4 Тогда // ошибка - не найден код и т.д., сообщение об ошибке в имя файла-источника запихиваем. 
	//---------------------------------------------------------------------------------------------------------------------------------------	
	
	// проверка входных данных
	
	ВыбФайл = Новый Файл(ИмяФайлаДляЗагрузки);
	Если НЕ ВыбФайл.Существует() Тогда
		Рез.Вставить("КодОшибки",3);
		Возврат Рез;
	КонецЕсли;
	
	АдресаВФайлеЗагрузки = ПравилаИгры.АдресаВФайлеЗагрузки;
	КолСтрокВФайлеЗагрузки = АдресаВФайлеЗагрузки.Количество();
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяФайлаДляЗагрузки);
	Текст_Количество = Текст.КоличествоСтрок();
	Если Текст_Количество <> КолСтрокВФайлеЗагрузки тогда
		Рез.Вставить("КодОшибки",4);
		ТекстОшибки = "! Структура данных нарушена - ";
		Возврат Рез;
	КонецЕсли;
	
	MSG = ИмяФайлаДляЗагрузки;
	
	// готовим структуру для укладки данных и читаем данные на входе
	
	ТЗ = Новый ТаблицаЗначений;
	Для Каждого Элемент из АдресаВФайлеЗагрузки Цикл 
		ТЗ.Колонки.Добавить(Элемент.Значение);
	КонецЦикла;
   	
	стрТЗ = ТЗ.Добавить();
	Для НомерСтроки = 1 По Текст_Количество Цикл
		тттстр = Текст.ПолучитьСтроку(НомерСтроки);
		MSG = MSG + Символы.ПС + тттстр;
		стрТЗ[НомерСтроки - 1] =  тттстр;
	КонецЦикла;
	
	//добавляем колонки соответствующие реквизитам шапки документа
	СписокРеквизитовШапкиПлатежки = ?(стрТЗ.Приход_Сумма = 0, ПравилаИгры.ПлатежноеПоручениеИсходящее_Шапка, ПравилаИгры.ПлатежноеПоручениеВходящее_Шапка);
	Для Каждого Элемент из СписокРеквизитовШапкиПлатежки Цикл 
		//ТЗ.Колонки.Добавить(Элемент.Ключ, Элемент.Значение);
		ТЗ.Колонки.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	// начинаем заполнять данные для формирования документа
	
	РезультатЗапроса = ЗапросПоНомеруСчета(стрТЗ.БанковскийСчет_Номер);
	Если РезультатЗапроса.Количество() > 0 тогда
		стрТЗ.Организация = РезультатЗапроса[0].Организация;
		стрТЗ.СчетОрганизации = РезультатЗапроса[0].СчетОрганизации;
		стрТЗ.ВалютаДокумента = РезультатЗапроса[0].ВалютаДенежныхСредств;
		
	Иначе
		Рез.Вставить("КодОшибки",4);
		стрИнф = ""+ПравилаИгры.ТекущаяДата+" Не загружена банковская выписка - из-за отсутствия расчетного счета организации с номером: "+стрТЗ.БанковскийСчет_Номер + Символы.ПС + MSG;
		глЗаписьИнформации_ДляОтправкиПоЭлПочте(стрИнф);
		ТекстОшибки = "! Нет расчетного счета - ";
		Рез.Вставить("ТекстОшибки",ТекстОшибки);
		
		Возврат Рез;
	КонецЕсли;
	
	Если Найти(стрТЗ.Прочее, "Ложь") > 0 тогда
		РезультатЗапроса = ЗапросПоКодуКонтрагента(стрТЗ);
		Если РезультатЗапроса.Количество() > 0 тогда
	 		стрТЗ.Контрагент = РезультатЗапроса[0].Контрагент;
		Иначе
			Рез.Вставить("КодОшибки",4);
			стрИнф = ""+ПравилаИгры.ТекущаяДата+" Не загружена банковская выписка - из-за отсутствия Контрагента [" + СокрЛП(стрТЗ.Контрагент_Наименование) + "] с кодом : "+стрТЗ.Контрагент_Код + Символы.ПС + MSG;
			глЗаписьИнформации_ДляОтправкиПоЭлПочте(стрИнф);
			ТекстОшибки = "! Нет контрагента - ";
			Рез.Вставить("ТекстОшибки",ТекстОшибки);

			//Возврат Рез;
		КонецЕсли;
	КонецЕсли;
	
	стрТЗ.НазначениеПлатежа = стрТЗ.Назначение;
	стрТЗ.Комментарий = "";
	стрТЗ.Ответственный = ПравилаИгры.ТекПользователь;
	
	ВидДокумента = ?(Число(стрТЗ.Приход_Сумма) = 0, "СтрокаВыпискиРасход", "СтрокаВыпискиПриход");
	
	стрТЗ.СуммаДокумента = ?(ВидДокумента = "СтрокаВыпискиРасход", Число(стрТЗ.Расход_Сумма), Число(стрТЗ.Приход_Сумма));
	
	// ВСЕГДА ИСКАТЬ ПО НАИМЕНОВАНИЮ
	стрТЗ.СтатьяДвиженияДенежныхСредств = НайтиСтатьюПоНаименованию(стрТЗ.ВидДвижения);
	
	Если Найти(стрТЗ.Прочее, "Ложь") > 0 тогда
		
		Если Найти(стрТЗ.ВидДвижения, "Оплата поставщику") > 0 И ВидДокумента = "СтрокаВыпискиРасход" Тогда
			//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.ОплатаПоставщику;
			стрТЗ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			
		ИначеЕсли Найти(стрТЗ.ВидДвижения, "Возврат от поставщика") > 0 И ВидДокумента = "СтрокаВыпискиПриход" Тогда
			//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.ВозвратДенежныхСредствПоставщиком;
			стрТЗ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
			
		ИначеЕсли Найти(стрТЗ.ВидДвижения, "Возврат покупателю") > 0 И ВидДокумента = "СтрокаВыпискиРасход"  Тогда
			//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.ВозвратДенежныхСредствПокупателю;
			стрТЗ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
			
		ИначеЕсли Найти(стрТЗ.ВидДвижения, "Поступления от покупателей") > 0 И ВидДокумента = "СтрокаВыпискиПриход"  Тогда
			//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.ПоступленияОтПокупателя;
			стрТЗ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			
		ИначеЕсли Найти(стрТЗ.ВидДвижения, "Депозит") тогда
			//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.Депозит;
			стрТЗ.ВидОперации = ?(ВидДокумента = "СтрокаВыпискиРасход", Перечисления.ВидыОперацийППИсходящее.СнятиеСДепозита, Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВнесениеНаДепозит);	
			
		ИначеЕсли Найти(стрТЗ.ВидДвижения, "Поступления по аген.договору") > 0 И ВидДокумента = "СтрокаВыпискиПриход"  Тогда
			//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.ПоступленияОтПокупателя;
			стрТЗ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			
		ИначеЕсли Найти(стрТЗ.ВидДвижения, "Оплата по агентскому договору") > 0 И ВидДокумента = "СтрокаВыпискиРасход" Тогда
			//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.ОплатаПоставщику;
			стрТЗ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			
		Иначе
			//стрТЗ.СтатьяДвиженияДенежныхСредств = НайтиСтатьюПоНаименованию(стрТЗ.ВидДвижения); 
			стрТЗ.ВидОперации = ?(ВидДокумента = "СтрокаВыпискиРасход", Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами, Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
			
		КонецЕсли;
		
	Иначе
		//стрТЗ.СтатьяДвиженияДенежныхСредств = НайтиСтатьюПоНаименованию(стрТЗ.ВидДвижения);//Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		стрТЗ.ВидОперации = ?(ВидДокумента = "СтрокаВыпискиРасход", Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств, Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств);	
	КонецЕсли;
	
	Если Найти(стрТЗ.Прочее, "Ложь") > 0 тогда
		Если ЗначениеЗаполнено(стрТЗ.Контрагент) тогда
			
			РезультатЗапроса = АнализДоговоров(стрТЗ);
			
			ТекДоговор = РезультатЗапроса.ТекДоговор;
			Если ЗначениеЗаполнено(ТекДоговор) тогда
		 		стрТЗ.ДоговорКонтрагента = ТекДоговор;
			Иначе
				Рез.Вставить("КодОшибки", РезультатЗапроса.КодВозврата);
				стрИнф = ""+ПравилаИгры.ТекущаяДата+" Не загружена банковская выписка - из-за отсутствия Договора с [" + СокрЛП(стрТЗ.Организация) + "] у контрагента [" + СокрЛП(стрТЗ.Контрагент_Наименование) + "] с кодом : "+стрТЗ.Контрагент_Код + Символы.ПС + MSG;
				глЗаписьИнформации_ДляОтправкиПоЭлПочте(стрИнф);
				ТекстОшибки = "! Нет договора - ";
				Рез.Вставить("ТекстОшибки",ТекстОшибки);

				//Возврат Рез;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	пар_комент = "";
	Если НЕ ЗначениеЗаполнено(стрТЗ.Контрагент) тогда    //И Найти(стрТЗ.Прочее, "Ложь") > 0
		пар_комент = "не найден контрагент [" + СокрЛП(стрТЗ.Контрагент_Наименование) + "]; ";
	ИначеЕсли ЗначениеЗаполнено(стрТЗ.Контрагент) И НЕ ЗначениеЗаполнено(стрТЗ.ДоговорКонтрагента) тогда // И Найти(стрТЗ.Прочее, "Ложь") > 0
		пар_комент = "не найден договор; ";
	КонецЕсли;
	пар_комент = пар_комент + Сред(ИмяФайлаДляЗагрузки, Найти(ИмяФайлаДляЗагрузки, лев(ПравилаИгры.МаскаИмениФайлаЗагрузки,4)));
	
	// на основании подготовленных данных формируем документ
	
	РезультатФормированияДокумента = СформироватьПлатежныеПорученияНаОснованииСтрокВыписки(стрТЗ, пар_комент);

	Рез.Вставить("КодОшибки", ?(РезультатФормированияДокумента = Неопределено, 2, 1));
	Рез.Вставить("Платежка", РезультатФормированияДокумента);
	Рез.Вставить("ОбработанУспешно", ?(РезультатФормированияДокумента = Неопределено, Ложь, Истина));
	
	Возврат Рез;
КонецФункции
Функция ЗапросПоНомеруСчета(НомерСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Владелец КАК Организация,
	|	БанковскиеСчета.Ссылка КАК СчетОрганизации,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.Банк,
	|	БанковскиеСчета.ВидСчета,
	|	БанковскиеСчета.ВалютаДенежныхСредств
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.НомерСчета = &НомерСчета
	|   И БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	|	И БанковскиеСчета.ПометкаУдаления = Ложь";

	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции
Функция ЗапросПоКодуКонтрагента(СтрокаТЗ)
	
	Запрос = Новый Запрос;
	
		Запрос.Текст = 
		"ВЫБРАТЬ 
		
			//|	ТорговыеТочки.Владелец.Ссылка КАК Контрагент
			
			//|	ВЫБОР
			//|		КОГДА ТорговыеТочки.Владелец = ТорговыеТочки.Владелец.ГоловнойКонтрагент ТОГДА
			//|			ТорговыеТочки.Владелец
			//|		ИНАЧЕ
			//|			ТорговыеТочки.Владелец.ГоловнойКонтрагент
			//|	КОНЕЦ КАК Контрагент
			
			|	ТорговыеТочки.Владелец.ГоловнойКонтрагент КАК Контрагент
			
			|
			|ИЗ
			|	Справочник.ТорговыеТочки КАК ТорговыеТочки
			|ГДЕ
			|	ТорговыеТочки.Код = &Букхгалтерия_Контрагент_Код
			|	И ТорговыеТочки.ПометкаУдаления = Ложь";
		Запрос.УстановитьПараметр("Букхгалтерия_Контрагент_Код", СтрокаТЗ.Контрагент_Код);
		
		тз_рез = Запрос.Выполнить().Выгрузить();
		
		////////////Если тз_рез.Количество() = 0 И ЗначениеЗаполнено(СокрЛП(СтрокаТЗ.Контрагент_Наименование) И ЗначениеЗаполнено(СокрлП(СтрокаТЗ.Контрагент_ИНН))) тогда
		////////////	Запрос.Текст = 
		////////////	"ВЫБРАТЬ 
		////////////		|	ТорговыеТочки.Владелец.Ссылка КАК Контрагент
		////////////		|
		////////////		|ИЗ
		////////////		|	Справочник.ТорговыеТочки КАК ТорговыеТочки
		////////////		|ГДЕ
		////////////		|	(ТорговыеТочки.Наименование ПОДОБНО &Букхгалтерия_Контрагент_Наименование
		////////////		|	И ТорговыеТочки.Владелец.ИНН ПОДОБНО &Букхгалтерия_Контрагент_ИНН)
		////////////		|	И ТорговыеТочки.ПометкаУдаления = Ложь";
		////////////	Запрос.УстановитьПараметр("Букхгалтерия_Контрагент_Наименование", СтрокаТЗ.Контрагент_Наименование);
		////////////	Запрос.УстановитьПараметр("Букхгалтерия_Контрагент_ИНН", СтрокаТЗ.Контрагент_ИНН);
		////////////	
		////////////	тз_рез = Запрос.Выполнить().Выгрузить();
		////////////КонецЕсли;
		
		//Если тз_рез.Количество() = 0 тогда
		//	Запрос.Текст = 
		//	"ВЫБРАТЬ 
		//		|	ТорговыеТочки.Владелец.Ссылка КАК Контрагент
		//		|
		//		|ИЗ
		//		|	Справочник.ТорговыеТочки КАК ТорговыеТочки
		//		|ГДЕ
		//		|	ТорговыеТочки.Наименование ПОДОБНО &Букхгалтерия_Контрагент_Наименование
		//		|	И ТорговыеТочки.ПометкаУдаления = Ложь";
		//	Запрос.УстановитьПараметр("Букхгалтерия_Контрагент_Наименование", СтрокаТЗ.Контрагент_Наименование);
		//	
		//	тз_рез = Запрос.Выполнить().Выгрузить();
		//КонецЕсли;
		

	Возврат тз_рез;

КонецФункции
Функция НайтиСтатьюПоНаименованию(НаименованиеИскомойСтатьи)
	ИскомаяСцылка = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	   "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяДДС,
	 |	СтатьиДвиженияДенежныхСредств.ПометкаУдаления КАК ПометкаУдаления
	 |ИЗ
	 |	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	 |ГДЕ
	 |	СтатьиДвиженияДенежныхСредств.Наименование ПОДОБНО &Наим
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ПометкаУдаления";
	 
	Запрос.УстановитьПараметр("Наим", СокрЛП(НаименованиеИскомойСтатьи));
	рез = Запрос.Выполнить().Выгрузить();
	Если рез.Количество() > 0 тогда
		ИскомаяСцылка = рез[0].СтатьяДДС;
	КонецЕсли;
	
	 
	Возврат ИскомаяСцылка;
КонецФункции
Функция АнализДоговоров(стрТЗ)
	
	ТекДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	РезультатАнализаОферты = Новый Структура("ТекДоговор,КодВозврата",ТекДоговор,0);
	
	// проверка
	Если НЕ ЗначениеЗаполнено(стрТЗ.Контрагент) тогда
		Возврат РезультатАнализаОферты;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(стрТЗ.Организация) тогда
		Возврат РезультатАнализаОферты;
	КонецЕсли;
	Если ТипЗнч(стрТЗ.Организация) <> Тип("СправочникСсылка.Организации") тогда
		 Возврат РезультатАнализаОферты;
	КонецЕсли;
	СписокСтрокПоиска = ПравилаИгры.СписокСтрокПоиска;
	Если СписокСтрокПоиска.Количество() = 0 тогда
		Возврат РезультатАнализаОферты;
	КонецЕсли;
	
	// заводим переменные аналогично 1С7
	ТекДатаДок = ПравилаИгры.ТекущаяДата; 
	ТекКА = стрТЗ.Контрагент;
	ТекВО = стрТЗ.ВидОперации;
	ТекКО = стрТЗ.СтатьяДвиженияДенежныхСредств;
	ТекФирма = стрТЗ.Организация;
	ТекСумма = Число(стрТЗ.СуммаДокумента);
	ТекНазначениеПлатежа = стрТЗ.НазначениеПлатежа;
	ТекНазначениеПлатежа = СтрЗаменить(ТекНазначениеПлатежа, "aкцепт", "акцепт"); // с 16.09.2015 стали частыми случаи, когда слово "акцепт" пишется с первой английской буквой
	ОплатаVMI = Ложь; // 1С7: с 21.04.2015 есть оплата товара, проданного со склада ответ.хранения в качестве признака подстрока в назначении платежа
	Если Найти(ВРЕГ(ТекНазначениеПлатежа), ПравилаИгры.ПризнакОплатыVMI) > 0 Тогда
		ОплатаVMI = Истина;
	КонецЕсли;
	
	НайденПравильныйНомер_вНазначенииПлатежа = Ложь;
	Тек_Установить_КонтрагентПроверен = Ложь;
	ТекКА_флОферта_ПроверенСтарыйДоговор = ТекКА.флОферта_ПроверенСтарыйДоговор;
	
	тмп_ЭтоОферта = Ложь;
	тмп_Информ    = "";
	
	ПолныйСписокДоговоровЗаключенныхСКонтрагентом = ЗапросПоДоговорам(стрТЗ);
	ПолныйСписокДоговоровЗаключенныхСКонтрагентом_Количество = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.Количество();
	
	Отбор = Новый Структура();
		
	ТекКА_Покупатель = ТекКА.Покупатель;
	ТекКА_Поставщик = ТекКА.Поставщик;
	// поскольку наличие договоров и значение флагов в карточке контрагента не связанные вещи - сделаем доп.проверку
	Если ПолныйСписокДоговоровЗаключенныхСКонтрагентом_Количество > 0 тогда
		
		Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СтрокиСДоговорами_1 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
		Если СтрокиСДоговорами_1.Количество() > 0 тогда
			ТекКА_Покупатель = Истина;
		Иначе
			ТекКА_Покупатель = Ложь;
		КонецЕсли;
		
		Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СтрокиСДоговорами_2 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
		Если СтрокиСДоговорами_2.Количество() > 0 тогда
			ТекКА_Поставщик = Истина;
		Иначе
			ТекКА_Поставщик = Ложь;
		КонецЕсли;
		
		Если НЕ ТекКА_Поставщик тогда
			
			Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение);
			СтрокиСДоговорами_2 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
			Если СтрокиСДоговорами_2.Количество() > 0 тогда
				ТекКА_Поставщик = Истина;
			Иначе
				ТекКА_Поставщик = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Отбор.Удалить("ВидДоговора");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекКА.ОсновнойДоговорКонтрагента) тогда
		ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + СокрЛП(ТекКА) + " -> ТекКА.ОсновнойДоговорКонтрагента = " + СокрЛП(ТекКА.ОсновнойДоговорКонтрагента)+ Символы.ПС;
	КонецЕсли;
	
	//==============================================================================
	//////// правила конвертации данных из 1С7 в 1С8
	//////
	//////// вид договора
	//////Если (ПустоеЗначениеСКЛ(ВходящиеДанные.Получить("ВидДоговора")) = 1) тогда
	//////	лПродажаЗакупка = ВходящиеДанные.Получить("ПродажаЗакупка");
	//////	Если (лПродажаЗакупка = 0) тогда
	//////		ВходящиеДанные.Установить("ВидДоговора", "СПокупателем");
	//////	ИначеЕсли (лПродажаЗакупка = 1) тогда
	//////		ВходящиеДанные.Установить("ВидДоговора", "СПоставщиком");
	//////	Иначе
	//////		Отказ = 1; // нельзя определить вид договора из реквизитов
	//////	КонецЕсли;
	//////КонецЕсли;
	//////// корректировка вида договора 
	//////Если (Отказ = 0) И (ВходящиеДанные.Получить("ВидДоговора") = "СПокупателем") тогда
	//////	Если (ВходящиеДанные.Получить("ЭтоЭкспорт") = 1) тогда
	//////		ВходящиеДанные.Установить("ВидДоговора", "НаЭкспорт");
	//////	КонецЕсли;
	//////ИначеЕсли (Отказ = 0) И (ВходящиеДанные.Получить("ВидДоговора") = "СПоставщиком") тогда    
	//////	Если (ВходящиеДанные.Получить("ЭтоВМИ") = 1) тогда
	//////		ВходящиеДанные.Установить("ВидДоговора", "ОтветХранение");
	//////	КонецЕсли;  
	//////КонецЕсли;
	//////
	////// в переводе на русский:
	////// 1С7: если спрДог.ПродажаЗакупка = 0 Тогда это продажа, тогда "ВидДоговора" = "СПокупателем", который может быть в частных случаях равен "НаЭкспорт"
	////// 1С7: если спрДог.ПродажаЗакупка = 1 Тогда это закупка, тогда "ВидДоговора" = "СПоставщиком", который может быть в частных случаях равен "ОтветХранение"
	//==============================================================================
	
	
	// сначала определимся, что мы должны найти: договор покупки (с поставщиком) или договор продажи (с покупателем)
	// если не определимся, то ничего не подставляем
	ИскатьДоговорПродажи = НЕОПРЕДЕЛЕНО;
	ИскатьДоговорПродажиСтр = "";
	
	Если ТекКА_Покупатель и НЕ ТекКА_Поставщик тогда
		
		ИскатьДоговорПродажи = Истина;
		 
	ИначеЕсли НЕ ТекКА_Покупатель и ТекКА_Поставщик тогда
		
		ИскатьДоговорПродажи = Ложь;
		
	Иначе
		// мы не можем определиться с ролью контрагента, поэтому смотрим на описание операции
		//////ИначеЕсли Найти(стрТЗ.ВидДвижения, "Поступления по аген.договору") > 0 И ВидДокумента = "СтрокаВыпискиПриход"  Тогда
		//////	//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.ПоступленияОтПокупателя;
		//////	стрТЗ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		//////	
		//////ИначеЕсли Найти(стрТЗ.ВидДвижения, "Оплата по агентскому договору") > 0 И ВидДокумента = "СтрокаВыпискиРасход" Тогда
		//////	//стрТЗ.СтатьяДвиженияДенежныхСредств = ПравилаИгры.СтатьиДДС.ОплатаПоставщику;
		//////	стрТЗ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		
	//СтатьиДДС.Вставить("АгентПоступление",НайтиСтатьюПоНаименованию("Поступления по аген.договору"));
	//СтатьиДДС.Вставить("АгентОплата",НайтиСтатьюПоНаименованию("Оплата по агентскому договору"));

		
		Если ОплатаVMI тогда
			
		           ИскатьДоговорПродажи = Ложь;
			 
		ИначеЕсли  ТекКО = ПравилаИгры.СтатьиДДС.ВозвратДенежныхСредствПокупателю ИЛИ       
				   ТекКО = ПравилаИгры.СтатьиДДС.АгентПоступление ИЛИ
				   ТекКО = ПравилаИгры.СтатьиДДС.ПоступленияОтПокупателя Тогда
			  
			       ИскатьДоговорПродажи = Истина;
			  
		ИначеЕсли  ТекКО = ПравилаИгры.СтатьиДДС.ОплатаПоставщику ИЛИ
				   ТекКО = ПравилаИгры.СтатьиДДС.АгентОплата ИЛИ
		           ТекКО = ПравилаИгры.СтатьиДДС.ВозвратДенежныхСредствПоставщиком Тогда
			  
			       ИскатьДоговорПродажи = Ложь;
				   
		Иначе		   
			
			 ИскатьДоговорПродажи = Ложь;
			
		КонецЕсли;  
	КонецЕсли; 
	
	Если ИскатьДоговорПродажи = Истина тогда
		ИскатьДоговорПродажиСтр = " продажи ";
	ИначеЕсли ИскатьДоговорПродажи = Ложь тогда
		ИскатьДоговорПродажиСтр = " покупки ";
	Иначе
		ИскатьДоговорПродажиСтр = " не понятного вида ";
	КонецЕсли;
	
	Если ИскатьДоговорПродажи = Истина Тогда // на право пойдёшь - покупашек найдёшь
		
		Отбор.Вставить("ДоговорПриостановлен", Ложь);
		
		
		НайденПравильныйНомер_вНазначенииПлатежа = ПоискНомераДоговораОфертыВСтрокеНазначенияПлатежа(СокрЛП(ТекФирма.Договор_ОфертаПокупателя_Номер), ТекНазначениеПлатежа, стрТЗ);
		
		
		//==============================================================================
			// 1С7: с 09.04.2015 появилась оферта покупателя
			// если в назначении платежа есть кодовое слово "AGREE" и сумма 10000 рублей
			// значит это "акцепт публичной оферты договора"
			// надо указать договор оферты
			// и если его нет - создать и сделать основным
			
			// 1С7: с 29.06.2015
			// если сумма 10000 и в назначении платежа есть: "акцепт публичной оферты", "оферта публичная акцепт" и если клиент написал слитно эти фразы
			// если Клиент в назначении платежа не укажет данные слова или сумма не 10000, то 1с автоматом на почту Марущенко Марии пришлет письмо 	Marushchenko-MA@part-kom.ru
			// с сообщением: название клиента, текст назначения платежа.
			//==============================================================================
			
			// определим назначение выписки - это касается оферты или нет
			// в случае, если будут найдены несоотвествия - нужно поругаться
			Если ТекСумма = Число(ПравилаИгры.СуммаПлатежаАкцептаОферты) Тогда
				
				Если НайденПравильныйНомер_вНазначенииПлатежа Тогда
					
					// ищем вхождение подстроки, означающей, что перед нами оплата акцепта по договору оферты
					Для Каждого подстрока_поиска из СписокСтрокПоиска Цикл
						Если Найти(нрег(ТекНазначениеПлатежа), подстрока_поиска) > 0 Тогда
							тмп_ЭтоОферта = Истина;
							Прервать;
						КонецЕсли;
						тмп_Информ = тмп_Информ + подстрока_поиска + Символы.ПС;
					КонецЦикла;
					
					Если НЕ тмп_ЭтоОферта Тогда
						глЗаписьИнформации_ДляОтправкиПоЭлПочте(
						"Ошибка загрузки акцепта оферты покупателя
						|
						|выписка банка № "+стрТЗ.НомерВходящегоДокумента+" 
						|плательщик: "+ТекКА+"
						|сумма выписки 10 000,
						|но в назначении платежа НЕТ служебного выражения об акцепте публичной оферты.
						|Искались варианты:
						|"+тмп_Информ+"
						|Текст текущего назначения платежа:
						|"+ТекНазначениеПлатежа);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// если сумма не соответствует посмотрим на назначение платежа	
				Для Каждого подстрока_поиска из СписокСтрокПоиска Цикл
					Если Найти(нрег(ТекНазначениеПлатежа), подстрока_поиска) > 0 Тогда
						тмп_Информ = подстрока_поиска;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(тмп_Информ) Тогда
					глЗаписьИнформации_ДляОтправкиПоЭлПочте(
					"Ошибка загрузки акцепта оферты покупателя
					|
					|выписка банка № "+стрТЗ.НомерВходящегоДокумента+" 
					|плательщик: "+ТекКА+"
					|сумма выписки = "+ТекСумма+", и это ""НЕ 10 000 руб.""
					|но в назначении платежа ЕСТЬ служебное выражение об акцепте публичной оферты.
					|
					|Найдено:
					|"+тмп_Информ+"
					|
					|В тексте текущего назначения платежа:
					|"+ТекНазначениеПлатежа+"
					|
					|Дополнительно:
					|в назначении платежа указан "+?(НайденПравильныйНомер_вНазначенииПлатежа,"правильный"," НЕ ПРАВИЛЬНЫЙ")+" номер договора оферты");
				КонецЕсли;
			КонецЕсли;
			
			
			Если тмп_ЭтоОферта Тогда // значит сошлись сумма и назначение платежа
				
				Если ЗначениеЗаполнено(ТекКА.ОсновнойДоговорКонтрагента) тогда
					
					Если ТекКА.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ
						 ТекКА.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.НаЭкспорт Тогда
						 
						 Если ТекКА.ОсновнойДоговорКонтрагента.ДоговорНаОферту 
							 И НЕ ЗначениеЗаполнено(ТекКА.ОсновнойДоговорКонтрагента.ДатаДоговораОферты) 
							 И ТекКА.ОсновнойДоговорКонтрагента.Организация = ТекФирма Тогда
							 // имеем договор, ожидающий акцепта. идеальный случай
							 ТекДоговор = ТекКА.ОсновнойДоговорКонтрагента;
						КонецЕсли;
						
					Иначе
						// для своих, когда ЮрФизЛицоВид = "СвоиЮрЛица" Тогда -> у таких КА как правило один договор 
						Если ЗначениеЗаполнено(ТекКА.Организация)тогда  
						  	ТекДоговор = ТекКА.ОсновнойДоговорКонтрагента;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ТекДоговор) тогда	
					// теперь поищем соответствующий платежу договор среди уже заведённых в базу на момент обработки
					Если ПолныйСписокДоговоровЗаключенныхСКонтрагентом_Количество > 0 тогда
						Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
						Отбор.Вставить("ДоговорНаОферту", Истина);
						
						СтрокиСДоговорами_1 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
						Если СтрокиСДоговорами_1.Количество() > 0 тогда
					    	ТекДоговор = СтрокиСДоговорами_1[0].Договор;
							
						Иначе
							// не забываем про частный случай, когда галка ПродажаЗакупка = 0 может стать Экспортом
							Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.НаЭкспорт);
							СтрокиСДоговорами_2 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
							Если СтрокиСДоговорами_2.Количество() > 0 тогда
								ТекДоговор = СтрокиСДоговорами_2[0].Договор;
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				//среди существующих договоров подходящего не найдено, поэтому создадим новый
				Если НЕ ЗначениеЗаполнено(ТекДоговор) тогда
					
					// для начало поищем донора значений реквизитов
					// среди договоров с видом = СПокупателем/НаЭкспорт, т.е. для 'Продажи' подходящего не найдено
					// т.е. искать будем среди оставшихся 
					ТекСтарыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					Если ТекКА.ОсновнойДоговорКонтрагента.Организация = ТекФирма Тогда
						ТекСтарыйДоговор = ТекКА.ОсновнойДоговорКонтрагента;
					КонецЕсли;
					
					// если основной договор не подходит, то ищем донора среди первого попавшегося, который не на продажу
					Если НЕ ЗначениеЗаполнено(ТекСтарыйДоговор) И ПолныйСписокДоговоровЗаключенныхСКонтрагентом_Количество > 0 тогда
						Отбор.Удалить("ДоговорНаОферту");
						Отбор.Удалить("ВидДоговора");
						//////Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
						СтрокиСДоговорами_3 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
						Если СтрокиСДоговорами_3.Количество() > 0 тогда
					    	ТекСтарыйДоговор = СтрокиСДоговорами_3[0].Договор;
						//////Иначе
						//////	Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение);
						//////	СтрокиСДоговорами_4 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
						//////	Если СтрокиСДоговорами_4.Количество() > 0 тогда
						//////		ТекСтарыйДоговор = СтрокиСДоговорами_4[0].Договор;
						//////		
						//////	КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					спрДог = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					
					Если ЗначениеЗаполнено(ТекСтарыйДоговор) тогда
						ЗаполнитьЗначенияСвойств(спрДог,ТекСтарыйДоговор.ПолучитьОбъект());
					КонецЕсли;
					спрДог.УстановитьНовыйКод();
					
					// здесь заполним основные реквизиты договора. остальные должны по идее быть заполнены значениями из донора
					спрДог.Наименование = "Оферта";
					спрДог.ВалютаВзаиморасчетов = стрТЗ.ВалютаДокумента;
					спрДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
					спрДог.Организация = ТекФирма;
					спрДог.ДоговорНаОферту = Истина; 
					СпрДог.ДатаДоговораОферты = ТекДатаДок;
					спрДог.Номер = СокрЛП(ТекФирма.Договор_ОфертаПокупателя_Номер);                                                      
					спрДог.Дата = ТекФирма.Договор_ОфертаПокупателя_Дата;
					спрДог.ДоговорПодписан = Истина;
					Попытка
						спрДог.Записать();
						
						ТекДоговор = спрДог.Ссылка;
						
					Исключение
						Возврат РезультатАнализаОферты;
					КонецПопытки;
					
				КонецЕсли;
				
				// здесь ТекДоговор гарантированно определён 
				// его надо акцептовать
				Если (НЕ ЗначениеЗаполнено(ТекДоговор.ДатаДоговораОферты)) ИЛИ (НЕ ТекДоговор.ДоговорПодписан) 
					ИЛИ (ТекДоговор.Номер <> СокрЛП(ТекФирма.Договор_ОфертаПокупателя_Номер)) тогда
						Попытка
							СпрДог = ТекДоговор.ПолучитьОбъект();
							СпрДог.ДатаДоговораОферты = ТекДатаДок;
							СпрДог.ДоговорПодписан = Истина;
							спрДог.Номер = СокрЛП(ТекФирма.Договор_ОфертаПокупателя_Номер);
							СпрДог.Записать();
							
						Исключение
							Возврат РезультатАнализаОферты;
						КонецПопытки;
				КонецЕсли;
				
				// если не указан основной договор - его надо запомнить / присвоить текущий
				Если ТекКА.ОсновнойДоговорКонтрагента <> ТекДоговор Тогда
					Попытка
						спрКА = ТекКА.ПолучитьОбъект();
						спрКА.ОсновнойДоговорКонтрагента = ТекДоговор;
						спрКА.Записать();
					Исключение
						Возврат РезультатАнализаОферты;
					КонецПопытки;
				КонецЕсли;
				
				// если этот контрагент - "Холдинг", то нужно проследить, чтобы у остальных был такой же договор
				Если ЗначениеЗаполнено(ТекКА.ГоловнойКонтрагент) тогда
					УказатьОсновнойДоговорВсемКонтрагентамХолдинга(ТекКА);
				КонецЕсли;
				
				// конец ветки по акцепту оферты
			Иначе 
				// ветка, когда платёж не по акцепту оферты, т.е. нужен какой-то акцептованный договор по продаже
				
				// сначала смотрим на значение реквизита основной договор
				Если ЗначениеЗаполнено(ТекКА.ОсновнойДоговорКонтрагента) тогда
					
					Если ТекКА.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ
						 ТекКА.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.НаЭкспорт Тогда
						 
						 Если ТекКА.ОсновнойДоговорКонтрагента.ДоговорПриостановлен  = Ложь
							 И ТекКА.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов = стрТЗ.ВалютаДокумента
							 // ТекКА.ОсновнойДоговорКонтрагента.ДоговорНаОферту 
							 //И НЕ ЗначениеЗаполнено(ТекКА.ОсновнойДоговорКонтрагента.ДатаДоговораОферты) 
							 И ТекКА.ОсновнойДоговорКонтрагента.Организация = ТекФирма Тогда
							 // имеем договор, ожидающий акцепта. идеальный случай
							 ТекДоговор = ТекКА.ОсновнойДоговорКонтрагента;
						КонецЕсли;
						
					Иначе
						// для своих, когда ЮрФизЛицоВид = "СвоиЮрЛица" Тогда -> у таких КА как правило один договор 
						Если ЗначениеЗаполнено(ТекКА.Организация)тогда  
						  	ТекДоговор = ТекКА.ОсновнойДоговорКонтрагента;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				
				// если не подошёл основной догвор, сначала ищем договор с признаком оферты, а если не находим такового, то берём первый попавшийся договор продажи, не помеченный на удаление, соответствующий фирме
				Отбор.Вставить("ДоговорНаОферту", Истина);
				Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				Если НЕ ЗначениеЗаполнено(ТекДоговор) тогда
					
					СтрокиСДоговорами_1 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
					Если СтрокиСДоговорами_1.Количество() > 0 тогда
						ТекДоговор = СтрокиСДоговорами_1[0].Договор;
						
					Иначе
						// не забываем про частный случай, когда галка ПродажаЗакупка = 0 может стать Экспортом
						Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.НаЭкспорт);
						СтрокиСДоговорами_2 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
						Если СтрокиСДоговорами_2.Количество() > 0 тогда
							ТекДоговор = СтрокиСДоговорами_2[0].Договор;
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				// тогда ищем среди не закрытых договоров с покупателем
				Если НЕ ЗначениеЗаполнено(ТекДоговор) тогда
				
					Отбор.Удалить("ДоговорНаОферту");
					Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
					
					СтрокиСДоговорами_3 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
					Если СтрокиСДоговорами_3.Количество() > 0 тогда
						ТекДоговор = СтрокиСДоговорами_3[0].Договор;
						
					Иначе
						// не забываем про частный случай, когда галка ПродажаЗакупка = 0 может стать Экспортом
						Отбор.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.НаЭкспорт);
						СтрокиСДоговорами_4 = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
						Если СтрокиСДоговорами_4.Количество() > 0 тогда
							ТекДоговор = СтрокиСДоговорами_4[0].Договор;
							
						КонецЕсли;
						
					КонецЕсли;
				
				КонецЕсли;
				
				
			КонецЕсли; // конец ветки не по акцепту оферты, т.е. провели какой-то иной платёж от покупателя - оплату или возврат или прочее..
			
			
			
			
			//==============================================================================
			// 1С7: с 09.04.2015
			// если у покупателя основной договор - договор с офертой
			// то нужно проверить наличие долга за товар по другим договорам этой фирмы
			// и если долг есть - закрыть его
			// если сумма долга по всем другим договорам станет равна 0 или превысит - создать файл для Элмы - для нового процесса
			// НО проверять нужно у непроверенных контрагентов 
			//
			// в переводе на русский: будем проверять наличие долгов по всем имеющимся договорам Продажи кроие текущего и брать самый ранний 
			//==============================================================================
			
			Если ЗначениеЗаполнено(ТекДоговор) тогда
				Если  ТекДоговор.ДоговорНаОферту И                                           
					  НЕ ТекКА_флОферта_ПроверенСтарыйДоговор тогда
					
					СтарыйДоговор	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					СтарыйДолг 		= 0; // с 21.04.2015 не сумму долга, а сумму переплаты
					тмп_НадоЗаменитьДоговор = Ложь;
					
					//сзДоговоры = Новый Массив; 
					//Отбор = Новый Структура();
					//Отбор.Вставить("ПометкаУдаления", Ложь);
					//СтрокиСДоговорами = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
					//СтрокиСДоговорами_Количество = СтрокиСДоговорами.Количество();
					//Для i = 1 по СтрокиСДоговорами_Количество цикл
					//	тмп_Договор = СтрокиСДоговорами[i - 1]; 
					//	Если тмп_Договор = ТекДоговор тогда
					//		Продолжить;
					//	КонецЕсли;
					//	
					//	сзДоговоры.Добавить(тмп_Договор);
					//КонецЦикла;
					сзДоговоры = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.ВыгрузитьКолонку("Договор");
					//учтём, что если работали не с акцептом оферты, то договор может быть и не найден
					//Если ЗначениеЗаполнено(ТекДоговор) тогда
						ИндексТекДоговора = сзДоговоры.Найти(ТекДоговор);
						Если НЕ ИндексТекДоговора = Неопределено тогда
							сзДоговоры.Удалить(ИндексТекДоговора);
						КонецЕсли;
					//КонецЕсли;
					
					Если сзДоговоры.Количество() = 0 тогда
						// значит старых договоров по этой фирме нет
						// просто ставим флаг проверки
						Тек_Установить_КонтрагентПроверен = Истина;
						
					Иначе
						// если долга по старым договорам нет (или переплата) - файл в Элму
						// если есть, то в первую очередь оплата должна выбрать договор, где более старая задолженность
						// оплачивать нужно все старые договоры, пока долг не станет равен 0 или переплата
						// и если сумма платежа долг перекрывает - файл в элму
						// общий долг по всем договорам проверять нельзя, т.к. он может быть равен 0, а по отдельности: договоры с долгом
						
						тзДолги = ВзаиморасчетыПоСтарымДоговорам(сзДоговоры);
						тзДолги_Количество = тзДолги.Количество();
						
						СтарыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
						СтарыйДолг = 0; 
						
						Если тзДолги_Количество = 0 тогда
							// долга ни по одному договору нет
							// нужно сделать файл для Элмы
							СтарыйДоговор = сзДоговоры[0];
							СтарыйДолг	  = 0; 
							Тек_Установить_КонтрагентПроверен = Истина;
							
						ИначеЕсли тзДолги_Количество = 1 тогда
							// долг только по одному договору
							// заменим договор
							тмп_НадоЗаменитьДоговор = Истина;
							
							СтарыйДоговор 	= тзДолги[0].ДоговорКонтрагента;
							СтарыйДолг		= тзДолги[0].СуммаУпрОстаток;
							Если ТекСумма >= СтарыйДолг Тогда
								Тек_Установить_КонтрагентПроверен  = Истина;
								СтарыйДолг = ТекСумма - СтарыйДолг;
							КонецЕсли;
							
						Иначе
							// долг по нескольким договорам. нужно найти старую задолженность
							// файл в Элму не выгружаем. Проверку у контрагента не ставим
							
							СтарыйДоговор 	= тзДолги.ПолучитьЗначение[0].ДоговорКонтрагента;
							СтарыйДолг		= тзДолги.ПолучитьЗначение[0].СуммаУпрОстаток;
							тмп_НадоЗаменитьДоговор = Истина;
							
						КонецЕсли;
						
						УведомитьЭлму = Ложь;
						Если Тек_Установить_КонтрагентПроверен И ЗначениеЗаполнено(СтарыйДоговор) Тогда
							
								Если НЕ ТекКА.флОферта_ПроверенСтарыйДоговор  Тогда
									Попытка
										спрКА = ТекКА.ПолучитьОбъект();
										спрКА.флОферта_ПроверенСтарыйДоговор = Истина; 
										спрКА.Записать();
										
										
										УведомитьЭлму = Истина;
									Исключение
										// при следующей загрузке установим
									КонецПопытки;
								КонецЕсли;
							
						КонецЕсли;
						
						Если УведомитьЭлму тогда
							Контрагент_Код = СокрЛП(стрТЗ.Контрагент_Код);             
							ТекКА_МенеджерПродажи_Логин_вЭлме = "";
							СтарыйДоговор_Номер = СокрЛП(СтарыйДоговор.Номер);
							СтарыйДоговор_Дата = СокрЛП(СтарыйДоговор.Дата);
							СтарыйДолг = 0;
							ТекДоговор_Договор_Номер = СокрЛП(ТекДоговор.Номер);
							ТекДоговор_Дата = СокрЛП(ТекДоговор.Дата);
							ТекФирма_Наименование = СокрЛП(стрТЗ.Организация.НаименованиеПолное);
							
							ВыгрузкаВЭлму_ЗадатьПараметры(Новый Структура("Контрагент_Код,ТекКА_МенеджерПродажи_Логин_вЭлме,СтарыйДоговор_Номер,СтарыйДоговор_Дата,СтарыйДолг,ТекДоговор_Договор_Номер,ТекДоговор_Дата,ТекФирма_Наименование",Контрагент_Код,ТекКА_МенеджерПродажи_Логин_вЭлме,СтарыйДоговор_Номер,СтарыйДоговор_Дата,СтарыйДолг,ТекДоговор_Договор_Номер,ТекДоговор_Дата,ТекФирма_Наименование));
						КонецЕсли;
						
						Если тмп_НадоЗаменитьДоговор = 1 Тогда
							ТекДоговор = СтарыйДоговор;
						КонецЕсли;
						
					КонецЕсли;				 
				КонецЕсли;
			КонецЕсли;
			
			РезультатАнализаОферты.Вставить("ТекДоговор", ТекДоговор);
			РезультатАнализаОферты.Вставить("КодВозврата", ?(ЗначениеЗаполнено(ТекДоговор),1,4));
			
		
	ИначеЕсли ИскатьДоговорПродажи = Ложь Тогда 
		
		// ветка, где работаем с поставщиками по договору покупки, это поставка
		// сюда могут попадать Контрагенты с разной ролью-назначением, т.е. все кроме покупателей
		
		ТекКА_ОсновнойДоговорКонтрагента = ТекКА.ОсновнойДоговорКонтрагентаЗакупка;
		
		Если ЗначениеЗаполнено(ТекКА_ОсновнойДоговорКонтрагента) Тогда  
			Если ТекКА_ОсновнойДоговорКонтрагента.Организация = ТекФирма  Тогда
				
				ТекДоговор = ТекКА_ОсновнойДоговорКонтрагента;
				
				Если ЗначениеЗаполнено(ТекКА.Организация) тогда  // аналог Если ТекКА.ЮрФизЛицоВид = "СвоиЮрЛица" Тогда  // у таких КА как правило один договор                                                 
					РезультатАнализаОферты.Вставить("ТекДоговор", ТекДоговор);
					РезультатАнализаОферты.Вставить("КодВозврата", 1);
				
				ИначеЕсли ОплатаVMI И ТекДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение Тогда
					РезультатАнализаОферты.Вставить("ТекДоговор", ТекДоговор);
					РезультатАнализаОферты.Вставить("КодВозврата", 1);
					
				ИначеЕсли ТекДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком И ОплатаVMI = Ложь Тогда    //ТекКО = ПравилаИгры.СтатьиДДС.Депозит И ТекДоговор.ДоговорНаОферту И 
					РезультатАнализаОферты.Вставить("ТекДоговор", ТекДоговор);
					РезультатАнализаОферты.Вставить("КодВозврата", 1);
					
				Иначе
					
			        ТекДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекДоговор) Тогда
			// выберем из имеющихся те договора, которые не на продажу и не помечены на удаление и не приостановлены    
			
			Отбор.Вставить("ПометкаУдаления", Ложь);
			
			СтрокиСДоговорами = ПолныйСписокДоговоровЗаключенныхСКонтрагентом.НайтиСтроки(Отбор);
			Если СтрокиСДоговорами.Количество() > 0 Тогда
				
				спрДог_ОплатаVMI = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				спрДог_Депозит = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				спрДог_СПоставщиком = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				
				// не плохо бы сортировать выборку по какому-либо признаку, например по дате создания или сроку действия
				Для каждого Договора из СтрокиСДоговорами цикл 
					
					спрДог = Договора.Договор;
					
					// проверка на соответствие фирме и валюте лишняя - она в запросе	
					Если спрДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ                
						 спрДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.НаЭкспорт Тогда                 
						Продолжить;
					КонецЕсли;
					
					Если ОплатаVMI И спрДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение Тогда
						
						ТекДоговор = спрДог;
						спрДог_ОплатаVMI = ТекДоговор;
						
						//РезультатАнализаОферты.Вставить("ТекДоговор", ТекДоговор);
						//РезультатАнализаОферты.Вставить("КодВозврата", 1);
						//Прервать;
						
					ИначеЕсли ТекКО = ПравилаИгры.СтатьиДДС.Депозит И Договора.ДоговорНаОферту Тогда
						
						ТекДоговор = спрДог;
						спрДог_Депозит = ТекДоговор;
						
						//РезультатАнализаОферты.Вставить("ТекДоговор", ТекДоговор);
						//РезультатАнализаОферты.Вставить("КодВозврата", 1);
						//Прервать;
						
					ИначеЕсли спрДог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
						//Если Договора.ДоговорНаСток ИЛИ Договора.ДоговорНаКросс Тогда
						 						
						ТекДоговор = спрДог;
						спрДог_СПоставщиком = ТекДоговор;
						
						//РезультатАнализаОферты.Вставить("ТекДоговор", ТекДоговор);
						//РезультатАнализаОферты.Вставить("КодВозврата", 1);
						//Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ТекДоговор) тогда
					
					Если ЗначениеЗаполнено(спрДог_ОплатаVMI) тогда
						ТекДоговор = спрДог_ОплатаVMI;
					ИначеЕсли ЗначениеЗаполнено(спрДог_Депозит) тогда
						ТекДоговор = спрДог_Депозит;
					ИначеЕсли ЗначениеЗаполнено(спрДог_СПоставщиком) тогда
						ТекДоговор = спрДог_СПоставщиком;
					КонецЕсли;
					
					РезультатАнализаОферты.Вставить("ТекДоговор", ТекДоговор);
					РезультатАнализаОферты.Вставить("КодВозврата", 1);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;                                                          
	
	////////Если НЕ ЗначениеЗаполнено(ТекДоговор) Тогда
	////////	стрИнф = "" + СокрЛП(ТекущаяДата())+ " Не загружена банковская выписка - из-за отсутствия нужного договора 
	////////	|у контрагента " + СокрЛП(ТекКА) +"
	////////	|договор должен быть " + ИскатьДоговорПродажиСтр +"
	////////	|с фирмой " + СокрЛП(ТекФирма) + "
	////////	|
	////////	|назначение платежа: " + СокрЛП(ТекНазначениеПлатежа) + "
	////////	|
	////////	|возможно в выписке банка указан неправильный вид операции (возврат покупателю, возврат от поставщика и т.д.)";
	////////	глЗаписьИнформации_ДляОтправкиПоЭлПочте(стрИнф);
	////////КонецЕсли;
	
	Возврат РезультатАнализаОферты;
	
КонецФункции
Функция ЗапросПоДоговорам(стрТЗ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец Контрагент,
	|	ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента КАК ОсновнойДоговор,
	
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентов.СрокДействия КАК СрокДействия,
	|	ДоговорыКонтрагентов.ДоговорПодписан,
	
	|	ДоговорыКонтрагентов.ДоговорНаОферту,
	|	ДоговорыКонтрагентов.ДатаДоговораОферты,
	
	|	ДоговорыКонтрагентов.ДоговорНаКросс,
	|	ДоговорыКонтрагентов.ДоговорНаСток,
	|	ДоговорыКонтрагентов.ДоговорНаКомиссию,
	|	ДоговорыКонтрагентов.ДоговорПрочие,
	|	ДоговорыКонтрагентов.ДоговорНаПредоплату
	
	|	ДоговорыКонтрагентов.ДоговорПриостановлен,
	|	ДоговорыКонтрагентов.ПометкаУдаления
	
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|	И ДоговорыКонтрагентов.ПометкаУдаления = Ложь
	|	И ДоговорыКонтрагентов.СлужебныйДоговор = Ложь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДоговора,
	|   ДоговорыКонтрагентов.ДоговорНаОферту,
	|	ДоговорыКонтрагентов.Дата,
	|	СрокДействия";

	Запрос.УстановитьПараметр("Владелец", стрТЗ.Контрагент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", стрТЗ.ВалютаДокумента);
	Запрос.УстановитьПараметр("Организация", стрТЗ.Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();	
	
	Возврат Результат;
	
КонецФункции
Функция ВзаиморасчетыПоСтарымДоговорам(парам_СписокДоговоров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыОстатки.ДоговорКонтрагента,
	|	СУММА(ВзаиморасчетыОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток
	|ИЗ
	|	РегистрНакопления.Взаиморасчеты.Остатки(&МоментВремени, ДоговорКонтрагента В (&СписокИнтересующихДоговоров)) КАК ВзаиморасчетыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыОстатки.ДоговорКонтрагента
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВзаиморасчетыОстатки.СуммаУпрОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыОстатки.ДоговорКонтрагента.Дата";

	Запрос.УстановитьПараметр("СписокИнтересующихДоговоров", парам_СписокДоговоров);
	Запрос.УстановитьПараметр("МоментВремени", ПравилаИгры.ТекущаяДата);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции
Функция ЗапросПоНомерамДоговоровОферты()
	Запрос = Новый Запрос;
	Запрос.Текст = 																						// где взять номер договора оферты фирмы ? СпрФирмы.Договор_ОфертаПокупателя_Номер
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Договор_ОфертаПокупателя_Номер КАК Договор_ОфертаПокупателя_Номер 										
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|   Организации.Договор_ОфертаПокупателя_Номер <> """"
	|	И Организации.ПометкаУдаления = Ложь";

	Результат = Запрос.Выполнить().Выгрузить();	
	
	Возврат Результат;
КонецФункции
Функция ПоискНомераДоговораОфертыВСтрокеНазначенияПлатежа(парам_НомерДоговораОферты, парам_Назначение, стрТЗ)
	
	//-------------------------------------------------------------------------------------------
	// 1С7: с 08.10.2015 в назначении платежа стали указывать не тот номер договора (http://my.part-kom.ru/Tasks/Task/Execute/2711860?ReturnUrl=http%3A%2F%2Fmy.part-kom.ru%2FTasks%2FTask%2FExecute%2F2711860)
	// нужно искать по правилу: найти с нужным номером, или без чужого (типа вообще без номера)
	// изначально считаем, что указан чужой номер договора в назначении платежа
	//-------------------------------------------------------------------------------------------
	
	ОдинИзНашихНомеров = Ложь;    
	
	Если НЕ ЗначениеЗаполнено(парам_НомерДоговораОферты) тогда
		Возврат ОдинИзНашихНомеров;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(парам_Назначение) тогда
		Возврат ОдинИзНашихНомеров;
	КонецЕсли;
	
	ТекНомерОферты = ВРЕГ(СокрЛП(СтрЗаменить(парам_НомерДоговораОферты," ","")));
	ТекНомерОферты = СтрЗаменить(ТекНомерОферты,"-","");
	ТекНомерОферты = СтрЗаменить(ТекНомерОферты,".","");
	
	Если НЕ ЗначениеЗаполнено(ТекНомерОферты) тогда
		Возврат ОдинИзНашихНомеров; 
	КонецЕсли;
		
	ТекНазначение_ПоискНомера = ВРЕГ(СокрЛП(парам_Назначение));
	ТекНазначение_ПоискНомера = СтрЗаменить(ТекНазначение_ПоискНомера, " ", ""); 
	ТекНазначение_ПоискНомера = СтрЗаменить(ТекНазначение_ПоискНомера, "-", ""); 
	ТекНазначение_ПоискНомера = СтрЗаменить(ТекНазначение_ПоискНомера, ".", ""); 
	
	Если Найти(ТекНазначение_ПоискНомера, ТекНомерОферты) > 0 Тогда
		ОдинИзНашихНомеров = Истина;
		Возврат ОдинИзНашихНомеров;
	КонецЕсли;

	// проверка на отсутствие чужих номеров - сверяем со списком всех возможных номеров оферты, привязанных к фирме            
	НайденнаяСтрока = ПравилаИгры.ВсеНомераДоговоровОферты.Найти(ТекНомерОферты, "Договор_ОфертаПокупателя_Номер");
	Если НайденнаяСтрока = Неопределено Тогда
			//глЗаписьИнформации_ДляОтправкиПоЭлПочте(
			//"Ошибка загрузки акцепта оферты покупателя
			//|
			//|выписка банка № "+стрТЗ.НомерВходящегоДокумента+"
			//|плательщик: "+стрТЗ.Контрагент+"
			//|сумма выписки 10 000.
			//|
			//|Ошибка: 
			//|указан чужой номер договора в назначении платежа.
			//|
			//|Должен быть " + парам_НомерДоговораОферты + "                                                 
			//																							                       
			////|Указан "+парам_НомерДоговораОферты+"
			////|
			//|Текст текущего назначения платежа:
			//|"+парам_Назначение);
	Иначе
		ОдинИзНашихНомеров = Истина;
	КонецЕсли;
	
	Возврат ОдинИзНашихНомеров;
КонецФункции
Функция СформироватьПлатежныеПорученияНаОснованииСтрокВыписки(СтрокаВыписки, пар_MSG = "")
	
	ВидДокумента = ?(Число(СтрокаВыписки.Приход_Сумма) = 0, "СтрокаВыпискиРасход", "СтрокаВыпискиПриход");
	
	УведомитьЭлму = Ложь;
	ПроверятьЗаполненность = Ложь;
	Записывать = Истина;
	Проводить = Ложь;
	
	// проверяем - не загружался ли документ ранее
	//-----------------------------------------------------------
	// 1С7: если документ уже создан, надо перезаполнить
	// и если есть изменения то записать
	// и если изменены спец.реквизиты - то ещё и провести
	// с 07.04.2015 не меняем ДДС, если он уже указан, т.к. в торговле могли изменить после загрузки 
	// фирму и счет не проверяем, думаю это не изменится
	// здесь реализовано следующим образом : перезаполняем документ полностью, без анализа изменений конкретных реквизитов, как это было в 1С7, когда принималось решение Записать / Провести
	// будем считать, что это не скажется на производительности
	//-----------------------------------------------------------
	
	// надо поработать с СтрокаВыписки.UID: выделить конструкцию по маске 00000000-0000-0000-0000-000000000000, не путать с уид вида документа
	// ибо во входящем файле строка = ЗначениеВСтрокуВнутр, например: {"#",2d3c9cee-3c7d-42d0-83f9-19a36f7a31ba,321:8157005056ae6bf711e5ec0540f901fa}
	
	искомыйУИД = СтрокаВыписки.UIDвыписки;
	
	Если НЕ ЗначениеЗаполнено(искомыйУИД) тогда
		искомыйУИД = Прав(СтрокаВыписки.UID, 33);
		искомыйУИД = Лев(искомыйУИД,32);
		искомыйУИД = Прав(искомыйУИД,8) + "-" + Сред(искомыйУИД,21,4) + "-" + Сред(искомыйУИД,17,4) + "-" + Лев(искомыйУИД,4) + "-" + Сред(искомыйУИД,5,12);
	КонецЕсли;
	
	ДокументОбъект = ЗапросПоUIDдокумента(искомыйУИД, СтрокаВыписки);	
	ЗначенияРеквизитовДоЗаполнения = Новый Соответствие;
	
	Если ДокументОбъект = Неопределено тогда
		
		СтрокаGUID = искомыйУИД;
		НовыйGUID = Новый УникальныйИдентификатор(СтрокаGUID);
		
		Если ВидДокумента = "СтрокаВыпискиРасход" тогда
			ДокументОбъект = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
			ДокументОбъект.УстановитьСсылкуНового(Документы.ПлатежноеПоручениеИсходящее.ПолучитьСсылку(НовыйGUID));
		Иначе
			ДокументОбъект = Документы.ПлатежноеПоручениеВходящее.СоздатьДокумент();
			ДокументОбъект.УстановитьСсылкуНового(Документы.ПлатежноеПоручениеВходящее.ПолучитьСсылку(НовыйGUID));
		КонецЕсли;
		
		//ДокументОбъект.Номер = "";
		//ДокументОбъект.УстановитьНовыйНомер(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, "Префикс"));
		
		УведомитьЭлму = Истина;
		
	Иначе
		
		ПроверятьЗаполненность = Истина;
		// исключение для сегодняшних - их всегда будем перезаписывать, типа может поменяться что угодно - бухи в процессе
		//////Если НачалоДня(ДокументОбъект.Дата) = НачалоДня(ПравилаИгры.ТекущаяДата) Тогда
		//////	ПроверятьЗаполненность = Ложь;
		//////КонецЕсли;
		Если ПроверятьЗаполненность тогда
			 ЗначенияРеквизитовДоЗаполнения.Вставить("Организация",ДокументОбъект.Организация);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("СчетОрганизации",ДокументОбъект.СчетОрганизации);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("Контрагент",ДокументОбъект.Контрагент);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("ДоговорКонтрагента",ДокументОбъект.ДоговорКонтрагента);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("СуммаДокумента",ДокументОбъект.СуммаДокумента);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("ВалютаДокумента",ДокументОбъект.ВалютаДокумента);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("ВидОперации",ДокументОбъект.ВидОперации);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",ДокументОбъект.СтатьяДвиженияДенежныхСредств);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("НазначениеПлатежа",ДокументОбъект.НазначениеПлатежа);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("СуммаВзаиморасчетов",ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов"));
			 ЗначенияРеквизитовДоЗаполнения.Вставить("СуммаПлатежа",ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа"));
			 ЗначенияРеквизитовДоЗаполнения.Вставить("Комментарий",СокрЛП(ДокументОбъект.Комментарий));
			 ЗначенияРеквизитовДоЗаполнения.Вставить("ПометкаУдаления",ДокументОбъект.ПометкаУдаления);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("Проведен",ДокументОбъект.Проведен);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("ЦФОДляБюджета",ДокументОбъект.ЦФОДляБюджета);
			 ЗначенияРеквизитовДоЗаполнения.Вставить("РегионДляБюджета",ДокументОбъект.РегионДляБюджета);
			 //ЗначенияРеквизитовДоЗаполнения.Вставить("РасшифровкаПлатежа",ДокументОбъект.РасшифровкаПлатежа.Выгрузить());
			 
		КонецЕсли;
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			/////////ДокументОбъект.УстановитьПометкуУдаления(Ложь);   //считаем, что это сделано руками умышленно
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		
		//Если ДокументОбъект.Проведен Тогда
		//	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//КонецЕсли;
		
	КонецЕсли;

	Если Не ДокументОбъект.Заблокирован() Тогда
        ДокументОбъект.Заблокировать();
	КонецЕсли;
	
	//Если НЕ ДокументОбъект.ЭтоНовый() Тогда
	//	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//КонецЕсли;
	
	// заполним шапку
	// наверное имеет смысл поставить условие Если это новый, иначе все перезатирается, в т.ч. ручная правка бухов
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаВыписки);
	
	т_Год = Число(Прав(СтрокаВыписки.ДатаДок,4));
	т_Месяц = Число(Сред(СтрокаВыписки.ДатаДок,4,2));
	т_День = Число(Лев(СтрокаВыписки.ДатаДок,2));
	т_Час =  Час(ПравилаИгры.ТекущаяДата);
	т_Минута = Минута(ПравилаИгры.ТекущаяДата);
	т_Секунда = Секунда(ПравилаИгры.ТекущаяДата);
	ДокументОбъект.Дата = Дата(т_Год, т_Месяц, т_День, т_Час, т_Минута, т_Секунда);
	Если НачалоДня(ДокументОбъект.Дата) < НачалоДня(ПравилаИгры.ТекущаяДата) тогда
		ДокументОбъект.Дата = КонецДня(ДокументОбъект.Дата)-60*30;
	КонецЕсли;
	//ДокументОбъект.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	Попытка
		ДокументОбъект.ДатаВходящегоДокумента = ДокументОбъект.Дата;
	Исключение
	
	КонецПопытки;
	
	// заполним строчную часть
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж   = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
	
	//СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ПравилаИгры.ТекущаяДата);
	СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	Если СтрокаПлатеж.КурсВзаиморасчетов =  0 тогда
		СтрокаПлатеж.КурсВзаиморасчетов = 1;
	КонецЕсли;
	Если СтрокаПлатеж.КратностьВзаиморасчетов =  0 тогда
		СтрокаПлатеж.КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	СтрокаПлатеж.СуммаВзаиморасчетов = ДокументОбъект.СуммаДокумента;
	СтрокаПлатеж.СуммаПлатежа = ДокументОбъект.СуммаДокумента;
	
	//СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
	//																			ДокументОбъект.СуммаДокумента, 
	//																			ДокументОбъект.ВалютаДокумента, 
	//																			ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	//																			СтрокаПлатеж.КурсВзаиморасчетов, 
	//																			СтрокаПлатеж.КурсВзаиморасчетов, 
	//																			СтрокаПлатеж.КратностьВзаиморасчетов, 
	//																			СтрокаПлатеж.КратностьВзаиморасчетов);
	
	//СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
	//																			СтрокаПлатеж.СуммаВзаиморасчетов, 
	//																			СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	//																			ДокументОбъект.ВалютаДокумента, 
	//																			СтрокаПлатеж.КурсВзаиморасчетов, 
	//																			СтрокаПлатеж.КурсВзаиморасчетов, 
	//																			СтрокаПлатеж.КратностьВзаиморасчетов, 
	//																			СтрокаПлатеж.КратностьВзаиморасчетов);
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если ЗначениеЗаполнено(пар_MSG) тогда
		ДокументОбъект.Комментарий = СокрЛП(ДокументОбъект.Комментарий) + " [" + пар_MSG + "]";
	КонецЕсли;
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		//ДокументОбъект.ИдентификаторБП = СтрокаВыписки.UID;
		ДокументОбъект.УстановитьНовыйНомер(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, "Префикс"));
		
		//Если ЗначениеЗаполнено(ДокументОбъект.СтатьяДвиженияДенежныхСредств) тогда
		//	ДокументОбъект.ЦФОДляБюджета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.СтатьяДвиженияДенежныхСредств, "ЦФОДляБюджета");
		//	ДокументОбъект.РегионДляБюджета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.СтатьяДвиженияДенежныхСредств, "РегионДляБюджета");
		//КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.ИдентификаторБП = СтрокаВыписки.UID;
		
	Если ЗначениеЗаполнено(ДокументОбъект.СтатьяДвиженияДенежныхСредств) Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ЦФОДляБюджета) Тогда
			Если ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаполнения.Получить("ЦФОДляБюджета")) Тогда
				ДокументОбъект.ЦФОДляБюджета = ЗначенияРеквизитовДоЗаполнения.Получить("ЦФОДляБюджета");
			Иначе
				ДокументОбъект.ЦФОДляБюджета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.СтатьяДвиженияДенежныхСредств, "ЦФОДляБюджета");
			КонецЕсли;
			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.РегионДляБюджета) Тогда
			Если ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаполнения.Получить("РегионДляБюджета")) Тогда
				ДокументОбъект.РегионДляБюджета = ЗначенияРеквизитовДоЗаполнения.Получить("РегионДляБюджета");
			Иначе
				ДокументОбъект.РегионДляБюджета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументОбъект.СтатьяДвиженияДенежныхСредств, "РегионДляБюджета");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаполнения.Получить("ЦФОДляБюджета")) Тогда
			ДокументОбъект.ЦФОДляБюджета = ЗначенияРеквизитовДоЗаполнения.Получить("ЦФОДляБюджета");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаполнения.Получить("РегионДляБюджета")) Тогда
			ДокументОбъект.РегионДляБюджета = ЗначенияРеквизитовДоЗаполнения.Получить("РегионДляБюджета");
		КонецЕсли;
		
	КонецЕсли;
	ДокументОбъект.РасшифровкаПлатежа[0].ЦФОДляБюджета = ДокументОбъект.ЦФОДляБюджета;
	ДокументОбъект.РасшифровкаПлатежа[0].РегионДляБюджета = ДокументОбъект.РегионДляБюджета;
	
	Если ПроверятьЗаполненность тогда
		
		//ДокументОбъект.РегионДляБюджета = ЗначенияРеквизитовДоЗаполнения.Получить("РегионДляБюджета");
		//ДокументОбъект.ЦФОДляБюджета = ЗначенияРеквизитовДоЗаполнения.Получить("ЦФОДляБюджета");
		
		//организацию и счет не проверяем, т.к. в 7ке сказано: // фирму и счет не проверяем, думаю это не изменится
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) и ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаполнения.Получить("Контрагент")) тогда
			ДокументОбъект.Контрагент = ЗначенияРеквизитовДоЗаполнения.Получить("Контрагент");
			ДокументОбъект.ДоговорКонтрагента = ЗначенияРеквизитовДоЗаполнения.Получить("ДоговорКонтрагента");
		КонецЕсли;
		Если (НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента)) 
			И ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаполнения.Получить("ДоговорКонтрагента")) 
			И ДокументОбъект.Контрагент = ЗначенияРеквизитовДоЗаполнения.Получить("Контрагент") тогда
			ДокументОбъект.ДоговорКонтрагента = ЗначенияРеквизитовДоЗаполнения.Получить("ДоговорКонтрагента");
		КонецЕсли;
		
		// в 7ке сказано: с 07.04.2015 не меняем ДДС, если он уже указан, т.к. в торговле могли изменить после загрузки
		// т.е. беру её только в том, случае, если она не определена
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтатьяДвиженияДенежныхСредств) и ЗначениеЗаполнено(ЗначенияРеквизитовДоЗаполнения.Получить("СтатьяДвиженияДенежныхСредств")) тогда
			ДокументОбъект.СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитовДоЗаполнения.Получить("СтатьяДвиженияДенежныхСредств");
		Иначе
			Если ДокументОбъект.СтатьяДвиженияДенежныхСредств <> ЗначенияРеквизитовДоЗаполнения.Получить("СтатьяДвиженияДенежныхСредств") И ЗначенияРеквизитовДоЗаполнения.Получить("СтатьяДвиженияДенежныхСредств") <> ПравилаИгры.СтатьиДДС.СтатьяНеНайдена тогда
				ДокументОбъект.СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитовДоЗаполнения.Получить("СтатьяДвиженияДенежныхСредств");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтатьяДвиженияДенежныхСредств) тогда
			ДокументОбъект.СтатьяДвиженияДенежныхСредств =  ПравилаИгры.СтатьиДДС.СтатьяНеНайдена;
		КонецЕсли;
		
		Для каждого стртч из ДокументОбъект.РасшифровкаПлатежа цикл
			
			стртч.СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
			стртч.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
			стртч.РегионДляБюджета = ДокументОбъект.РегионДляБюджета;
			стртч.ЦФОДляБюджета = ДокументОбъект.ЦФОДляБюджета;
		КонецЦикла;
		
		Если ДокументОбъект.Организация = ЗначенияРеквизитовДоЗаполнения.Получить("Организация") И
			ДокументОбъект.СчетОрганизации = ЗначенияРеквизитовДоЗаполнения.Получить("СчетОрганизации") И
			ДокументОбъект.Контрагент = ЗначенияРеквизитовДоЗаполнения.Получить("Контрагент") И
			ДокументОбъект.ДоговорКонтрагента = ЗначенияРеквизитовДоЗаполнения.Получить("ДоговорКонтрагента") И
			ДокументОбъект.СуммаДокумента = ЗначенияРеквизитовДоЗаполнения.Получить("СуммаДокумента") И
			ДокументОбъект.ВалютаДокумента = ЗначенияРеквизитовДоЗаполнения.Получить("ВалютаДокумента") И
			ДокументОбъект.ВидОперации = ЗначенияРеквизитовДоЗаполнения.Получить("ВидОперации") И
			ДокументОбъект.СтатьяДвиженияДенежныхСредств = ЗначенияРеквизитовДоЗаполнения.Получить("СтатьяДвиженияДенежныхСредств") И
			ДокументОбъект.ЦФОДляБюджета = ЗначенияРеквизитовДоЗаполнения.Получить("ЦФОДляБюджета") И
			ДокументОбъект.РегионДляБюджета = ЗначенияРеквизитовДоЗаполнения.Получить("РегионДляБюджета") И
			ДокументОбъект.НазначениеПлатежа = ЗначенияРеквизитовДоЗаполнения.Получить("НазначениеПлатежа") И
			СокрЛП(ДокументОбъект.Комментарий) = ЗначенияРеквизитовДоЗаполнения.Получить("Комментарий") И
			ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") = ЗначенияРеквизитовДоЗаполнения.Получить("СуммаВзаиморасчетов") И
			ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа") = ЗначенияРеквизитовДоЗаполнения.Получить("СуммаПлатежа") тогда
			
			Записывать = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) И
		ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации) И
		ЗначениеЗаполнено(ДокументОбъект.ВидОперации) И
		ЗначениеЗаполнено(ДокументОбъект.СтатьяДвиженияДенежныхСредств) И
		ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) И
		ЗначениеЗаполнено(ДокументОбъект.СуммаДокумента) тогда
		
		Проводить = Истина;
		
	КонецЕсли;
	
	Если  Проводить И
		НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) И
		Найти(СтрокаВыписки.Прочее, "Ложь") > 0 тогда 
		
		Проводить = Ложь;
	КонецЕсли;
	
	Если  Проводить И
		НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) И
		Найти(СтрокаВыписки.Прочее, "Ложь") > 0 тогда 
		
		Проводить = Ложь;
	КонецЕсли;
	
	ДокументДостаточноЗаполненДляПроведения = Проводить;
	
	Если  Проводить	тогда  // т.е. документ достаточно заполнен
		Если  Записывать = Ложь // это может быть только для НЕ новых документов
			И ЗначенияРеквизитовДоЗаполнения.Получить("Проведен") = Истина тогда
			Проводить = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// записываем
	Если ДокументОбъект.Дата < ПравилаИгры.ОграничениеПоДате тогда
	Иначе
							
		//ЛогОтладки = ЛогОтладки + " загрузка документа " + СокрЛП(ДокументОбъект.Ссылка)+" .
		//						|ОбменДанными.Загрузка = " + ДокументОбъект.ОбменДанными.Загрузка + " ;
		//						|Проводить = " + Проводить + " ;
		//						|Записывать = " + Записывать + " ;
		//						|ПроверятьЗаполненность = " + ПроверятьЗаполненность + " ;
		//						|";

		Если Проводить ИЛИ Записывать тогда	
			
			КоличествоОбновленныхОбъектов = КоличествоОбновленныхОбъектов + 1;
			ТекстИтоговогоСообщения = ТекстИтоговогоСообщения + Символы.ПС + "КоличествоОбновленныхОбъектов = " + СокрЛП(КоличествоОбновленныхОбъектов)+ Символы.ПС;
			
			Попытка
				//добавил условие, снимать с проведения. потому что при очистке договора задним числом документ проводился без договора. Голубев. 16.06.16
				Если Проводить тогда
					Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) И
						Найти(СтрокаВыписки.Прочее, "Ложь") > 0 тогда
						//ДокументОбъект.Проведен = Ложь;
						ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;
					
				ИначеЕсли Записывать тогда
					
					Если ПроверятьЗаполненность тогда
						Если ЗначенияРеквизитовДоЗаполнения.Получить("Проведен") тогда
							Попытка
								//ДокументОбъект.Проведен = Ложь;
								ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							Исключение
								глЗаписьИнформации_ДляОтправкиПоЭлПочте(" Документ " + СокрЛП(ДокументОбъект.Ссылка)+" записан неверно.
								|документ не должен быть проведен", ,Истина);
							КонецПопытки;
						КонецЕсли;
					Иначе
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
										
				КонецЕсли;
				
			Исключение
				
				глЗаписьИнформации_ДляОтправкиПоЭлПочте("Не удалось " + ?(Проводить, "провести", "Записать") + " документ " + СокрЛП(ДокументОбъект.Ссылка)+".
				|Необходимо попытаться провести его самостоятельно, чтобы увидеть причину,
				|т.к. он не проведен не из-за блокировки базы.", Истина);
				
			КонецПопытки;
			
		Иначе
			Попытка
				Если ПроверятьЗаполненность тогда
					Если ЗначенияРеквизитовДоЗаполнения.Получить("Проведен") 
						И ДокументДостаточноЗаполненДляПроведения = Ложь тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					КонецЕсли;
				КонецЕсли;
			Исключение
				глЗаписьИнформации_ДляОтправкиПоЭлПочте("Не удалось распровести документ " + СокрЛП(ДокументОбъект.Ссылка)+".
				|Необходимо попытаться провести его самостоятельно, чтобы увидеть причину,
				|т.к. он не проведен не из-за блокировки базы.", Истина);
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект.Заблокирован() Тогда
	    ДокументОбъект.Разблокировать();
    КонецЕсли;
	
	Если УведомитьЭлму И ЗначениеЗаполнено(СтрокаВыписки.ДоговорКонтрагента) И ЗначениеЗаполнено(СтрокаВыписки.Организация) тогда
		
		Контрагент_Код = СокрЛП(СтрокаВыписки.Контрагент_Код);             
		ТекКА_МенеджерПродажи_Логин_вЭлме = "";
		СтарыйДоговор_Номер = "";
		СтарыйДоговор_Дата = "";
		СтарыйДолг = 0;
		ТекДоговор_Договор_Номер = СокрЛП(СтрокаВыписки.ДоговорКонтрагента.Номер);
		ТекДоговор_Дата = СокрЛП(СтрокаВыписки.ДоговорКонтрагента.Дата);
		ТекФирма_Наименование = СокрЛП(СтрокаВыписки.Организация.НаименованиеПолное);
		
		ВыгрузкаВЭлму_ЗадатьПараметры(Новый Структура("Контрагент_Код,ТекКА_МенеджерПродажи_Логин_вЭлме,СтарыйДоговор_Номер,СтарыйДоговор_Дата,СтарыйДолг,ТекДоговор_Договор_Номер,ТекДоговор_Дата,ТекФирма_Наименование",Контрагент_Код,ТекКА_МенеджерПродажи_Логин_вЭлме,СтарыйДоговор_Номер,СтарыйДоговор_Дата,СтарыйДолг,ТекДоговор_Договор_Номер,ТекДоговор_Дата,ТекФирма_Наименование));
		
	КонецЕсли;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции
Функция ЗапросПоUIDдокумента(параметр_УИД, СтрокаВыписки)
	
	ВидДокумента = ?(Число(СтрокаВыписки.Приход_Сумма) = 0, "СтрокаВыпискиРасход", "СтрокаВыпискиПриход");

	//ДокументОбъект.ИдентификаторБП = СтрокаВыписки.UID
	
	ИскомаяСЦылка = "";
	ИскомыйОбъект = Неопределено;
	ИскомыйНомер = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручение.Ссылка  КАК ИскомаяСЦылка
	|ИЗ
	|	Документ.ПлатежноеПоручение" + ?(ВидДокумента = "СтрокаВыпискиРасход", "Исходящее" , "Входящее") + " КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ИдентификаторБП = &ИдентификаторБП
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручение.Дата";
	
	Запрос.УстановитьПараметр("ИдентификаторБП", СтрокаВыписки.UID);
	Результат = Запрос.Выполнить().Выгрузить();	
	Если Результат.Количество() > 0 тогда
		ИскомаяСЦылка = Результат[0].ИскомаяСЦылка;
	Иначе
		Если ВидДокумента = "СтрокаВыпискиРасход" тогда
			ИскомаяСЦылка = Документы.ПлатежноеПоручениеИсходящее.ПолучитьСсылку(Новый УникальныйИдентификатор(параметр_УИД));
		Иначе
			ИскомаяСЦылка = Документы.ПлатежноеПоручениеВходящее.ПолучитьСсылку(Новый УникальныйИдентификатор(параметр_УИД));
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ИскомыйОбъект = ИскомаяСЦылка.ПолучитьОбъект();
		ИскомыйНомер = ИскомыйОбъект.Номер;
		
	Исключение
		ИскомыйОбъект = Неопределено;
	КонецПопытки;
	
	
	Возврат ИскомыйОбъект;
	
КонецФункции
Процедура УказатьОсновнойДоговорВсемКонтрагентамХолдинга(ТекКА)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ГоловнойКонтрагент,
	|	Контрагенты.ОсновнойДоговорКонтрагента
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка <> &Ссылка
	|	И Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
	|	И Контрагенты.ОсновнойДоговорКонтрагента <> &ОсновнойДоговорКонтрагента
	|	И Контрагенты.ПометкаУдаления = Ложь";

	Запрос.УстановитьПараметр("ГоловнойКонтрагент", ТекКА.ГоловнойКонтрагент);
	Запрос.УстановитьПараметр("ОсновнойДоговорКонтрагента", ТекКА.ОсновнойДоговорКонтрагента);
	Запрос.УстановитьПараметр("Ссылка", ТекКА);
	
	Результат = Запрос.Выполнить().Выгрузить();	
	Если Результат.Количество() > 0 тогда
		Для Каждого СтрРез из Результат цикл
			
			Попытка
				Контра = СтрРез.Контрагент.ПолучитьОбъект();
				Контра.ОсновнойДоговорКонтрагента = ТекКА.ОсновнойДоговорКонтрагента;
				Контра.Записать();
			Исключение
				
			КонецПопытки
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
Процедура Работа_сФайлом(Рез_Обмена, НовоеИмя, СтароеИмя, ТекстОшибки = "! Нельзя загрузить - ") 
	// аналог процедуры обработки файла загрузки в 1С7 в зависимости от кода ошибки
	
	Если Рез_Обмена = 1 Тогда
		// успешно - надо удалить
		
		ПереместитьФайл(ПравилаИгры.КаталогОбмена + НовоеИмя, ПравилаИгры.Каталог_Дата + НовоеИмя);
		
	ИначеЕсли Рез_Обмена = 2 Тогда
		// не успешно, что-то не записалось, не создалось, надо повторить, следовательно надо вернуть прежнее имя
		
		ПереместитьФайл(ПравилаИгры.КаталогОбмена + НовоеИмя, ПравилаИгры.КаталогОбмена + СтароеИмя);
		
	ИначеЕсли Рез_Обмена = 3 Тогда
		// отсутствует файл
		// ничего не делаем
		
	Иначе
		// ошибка - не найден код и т.д., сообщение об ошибке в имя файла запихиваем
		
		ПереместитьФайл(ПравилаИгры.КаталогОбмена + НовоеИмя, ПравилаИгры.КаталогОбмена + ТекстОшибки + СтароеИмя);
		
	КонецЕсли;
КонецПроцедуры 
Процедура ВыгрузкаВЭлму_ЗадатьПараметры(парам_Структура)
	
		сзПарам_дляЭлмы = Новый Структура;
		Массив = ПравилаИгры.сзПарам_дляЭлмы_идентификаторы; 
		Для Каждого ЭлементМассива из Массив Цикл
			т_ключ = ЭлементМассива;
			
			Если  т_ключ = "ВидПроцесса" тогда
				сзПарам_дляЭлмы.Вставить( т_ключ, "Оферта_Покупателя");
			ИначеЕсли  т_ключ = "ИмяПроцесса" тогда
				сзПарам_дляЭлмы.Вставить( т_ключ, "Перевод клиентов на оферту");
			ИначеЕсли  т_ключ = "Контрагент_Код" тогда
				сзПарам_дляЭлмы.Вставить( т_ключ, парам_Структура.Контрагент_Код);				
			ИначеЕсли  т_ключ = "СтарыйДоговор_Номер" тогда
				сзПарам_дляЭлмы.Вставить( т_ключ, парам_Структура.СтарыйДоговор_Номер);
			ИначеЕсли  т_ключ = "СтарыйДоговор_Дата" тогда
				сзПарам_дляЭлмы.Вставить( т_ключ, парам_Структура.СтарыйДоговор_Дата);
			ИначеЕсли  т_ключ = "ТекущийДолг" тогда
				сзПарам_дляЭлмы.Вставить( т_ключ, ?(парам_Структура.СтарыйДолг < 0 , -парам_Структура.СтарыйДолг, парам_Структура.СтарыйДолг));
			ИначеЕсли  т_ключ = "НовыйДоговор_Номер" тогда
				сзПарам_дляЭлмы.Вставить( т_ключ, парам_Структура.ТекДоговор_Договор_Номер);
			ИначеЕсли  т_ключ = "НовыйДоговор_Дата" тогда
				сзПарам_дляЭлмы.Вставить( т_ключ, парам_Структура.ТекДоговор_Дата);
			ИначеЕсли  т_ключ = "Менеджер" тогда
				сзПарам_дляЭлмы.Вставить( т_ключ, парам_Структура.ТекКА_МенеджерПродажи_Логин_вЭлме);
			ИначеЕсли  т_ключ = "Фирма_Наименование" тогда
				сзПарам_дляЭлмы.Вставить( т_ключ, парам_Структура.ТекФирма_Наименование);
			КонецЕсли;
			
		КонецЦикла;		
		
		ВыгрузкаВЭлму_СоздатьФайл_ОфертаПокупателя(сзПарам_дляЭлмы);
	
КонецПроцедуры
Процедура ВыгрузкаВЭлму_СоздатьФайл_ОфертаПокупателя(Параметры)
	
	ВидПроцесса	= Параметры.ВидПроцесса;
	Если НЕ ВидПроцесса = "Оферта_Покупателя" Тогда
		Возврат;
	КонецЕсли;
	
	Если Дата(Параметры.НовыйДоговор_Дата) < НачалоДня(ПравилаИгры.ТекущаяДата) Тогда   //The 'workflow:date-variable' element is invalid - The value '2 015-10-16T00:00:00' is invalid according to its datatype 'DateTime' - The string '2 015-10-16T00:00:00' is not a valid DateTime value.
		Возврат;
	КонецЕсли;
	
	ИмяПроцесса = Параметры.ИмяПроцесса;
	Контрагент_Код	= (Параметры.Контрагент_Код);
	СтарыйДоговор_Номер	= СокрЛП(Параметры.СтарыйДоговор_Номер);
	Если НЕ ЗначениеЗаполнено(СтарыйДоговор_Номер) тогда
		СтарыйДоговор_Номер = "-";
	КонецЕсли;
	СтарыйДоговор_Дата	= Параметры.СтарыйДоговор_Дата;
	Если ЗначениеЗаполнено(СтарыйДоговор_Дата) тогда
		СтарыйДоговор_Дата = ПеревернутьДату(СтарыйДоговор_Дата);
	Иначе
		СтарыйДоговор_Дата = "0001-01-01T00:00:00";
	КонецЕсли;
	ТекущийДолг			= СокрЛП(Параметры.ТекущийДолг);
	НовыйДоговор_Номер	= СокрЛП(Параметры.НовыйДоговор_Номер);
	НовыйДоговор_Дата	= ПеревернутьДату(Параметры.НовыйДоговор_Дата);
	Менеджер			= СокрЛП(Параметры.Менеджер);
	Фирма				= СокрЛП(Параметры.Фирма_Наименование);
	
	ИмяКаталога = ПравилаИгры.КаталогОбменаСЭлмой;
	
	ИмяФайла = ПравилаИгры.ИмяФайлаОбменаСЭлмой;
	ИмяФайла = СтрЗаменить(ИмяФайла, "%%Контрагент_Код%%", Контрагент_Код);
	ИмяФайлаПолное = ИмяКаталога + ИмяФайла;
	
	ТекстФайла =  ПравилаИгры.ТекстФайла_Оферта_Покупателя;
	ТекстФайла = СтрЗаменить(ТекстФайла, "%%ИмяПроцесса%%", ИмяПроцесса);
	ТекстФайла = СтрЗаменить(ТекстФайла, "%%Контрагент_Код%%", Контрагент_Код);
	ТекстФайла = СтрЗаменить(ТекстФайла, "%%СтарыйДоговор_Номер%%", СтарыйДоговор_Номер);
	ТекстФайла = СтрЗаменить(ТекстФайла, "%%СтарыйДоговор_Дата%%", СтарыйДоговор_Дата);
	ТекстФайла = СтрЗаменить(ТекстФайла, "%%ТекущийДолг%%", ТекущийДолг);
	ТекстФайла = СтрЗаменить(ТекстФайла, "%%НовыйДоговор_Номер%%", НовыйДоговор_Номер);
	ТекстФайла = СтрЗаменить(ТекстФайла, "%%НовыйДоговор_Дата%%", НовыйДоговор_Дата);
	ТекстФайла = СтрЗаменить(ТекстФайла, "%%Менеджер%%", Менеджер);
	ТекстФайла = СтрЗаменить(ТекстФайла, "%%Фирма%%", Фирма);
	
	УдалитьВременныйФайл(ИмяФайлаПолное);
	т = Новый ТекстовыйДокумент;
	т.УстановитьТекст(ТекстФайла);  
	
	Попытка
		т.Записать(ИмяФайлаПолное, "windows-1251"); //КодировкаТекста.ANSI
	Исключение
		стрИнф = "Ошибка при попытке записи файла из 1С для Элмы - """+ИмяПроцесса+""".
		|Файл не записан.
		|Имя файла: "+ИмяФайла;
		глЗаписьИнформации_ДляОтправкиПоЭлПочте(стрИнф,Истина);
	КонецПопытки;
	
КонецПроцедуры
Процедура глЗаписьИнформации_ДляОтправкиПоЭлПочте(парам_СтрокаУведомления, ОтправитьЗаинтересованномуЛицу = Ложь, ОтправитьЗаинтересованномуЛицуДляОтладки = Ложь)
	
	// аналог процедуры в 1С7
	
	СписокАдресов = ПравилаИгры.ТекАдресКому_обОферте;
	Если ОтправитьЗаинтересованномуЛицу тогда
		 СписокАдресов = ПравилаИгры.АдресЭлПочтыЗаинтересованногоЛица;
	КонецЕсли;
	Если ОтправитьЗаинтересованномуЛицуДляОтладки тогда
		 СписокАдресов = ПравилаИгры.АдресЭлПочтыЗаинтересованногоЛицаДляОтладки;
	КонецЕсли;
	МассивАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокАдресов, ";", Истина);
	Если МассивАдресов.Количество() < 1 тогда
		Возврат;
	КонецЕсли;
	СписокАдресов = Новый СписокЗначений;
	Для Каждого СтрокаАдреса Из МассивАдресов Цикл
		Если Найти(СтрокаАдреса,"@") > 0 тогда
			СписокАдресов.Добавить(СтрокаАдреса,СтрокаАдреса);		
		КонецЕсли;
	КонецЦикла;
	ТемаПисьма = "Ошибка загрузки банковской выписки";
	Если ОтправитьЗаинтересованномуЛицу тогда
		ТемаПисьма = "Лог загрузки банковской выписки";
	КонецЕсли;
	ТекстПисьма = парам_СтрокаУведомления;
	АдресЭлПочтыОтправителя = ПравилаИгры.АдресЭлПочтыОтправителя; 
	ПустойСписокВложений = Новый СписокЗначений;
	
	РезультатОтправки = Обработки.ФормированиеЗаказовПоставщику.Создать().ПереправитьПараметрыФормированияПисьма(ТекстПисьма,СписокАдресов,АдресЭлПочтыОтправителя,ПустойСписокВложений,ТемаПисьма);
	
КонецПроцедуры
	
// сервис

Функция РаботаСКаталогамиНеВозможна(парам_ИмяКаталога)
	Отказ = Истина;
	
	Существует = ПроверитьСуществованиеКаталога(парам_ИмяКаталога);
	Если НЕ Существует тогда
		//////ТекстПредупреждения = "Каталог [" + СокрЛП(парам_ИмяКаталога) + "] не существует! Процедура загрузки не возможна.";
		//////#Если Клиент Тогда
		//////	Предупреждение(ТекстПредупреждения);
		//////	Возврат Отказ;                                                  		
		//////#Иначе
		//////	ВызватьИсключение ТекстПредупреждения;
		//////#КонецЕсли	
		Возврат Отказ;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Возврат Отказ;
КонецФункции
Функция ПроверитьСуществованиеКаталога(ИмяКаталога)

	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		СоздатьКаталог(ИмяКаталога);
		Возврат Истина;
		//////#Если Клиент Тогда
		//////	Ответ = Вопрос("Указанный каталог [" + СокрЛП(ИмяКаталога) + "] не существует. Создать каталог?", РежимДиалогаВопрос.ОКОтмена);
		//////	Если Ответ = КодВозвратаДиалога.ОК Тогда
		//////		СоздатьКаталог(ИмяКаталога);
		//////		Возврат Истина;
		//////	Иначе
		//////		Возврат Ложь;
		//////	КонецЕсли;
		//////#Иначе
		//////	СоздатьКаталог(ИмяКаталога);
		//////	Возврат Истина;
		//////#КонецЕсли
	КонецЕсли;

КонецФункции
Процедура ОткрытьФайл(ИмяКаталога, ИмяФайла)

	ПолноеИмяФайла = ПолучитьИмяФайла(ИмяКаталога, ИмяФайла);
	РасширениеФайла = Врег(ПолучитьРасширениеФайла(ИмяФайла));

	Если РасширениеФайла = "MXL" Тогда

		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ПолноеИмяФайла);
		ТабличныйДокумент.Показать(ИмяФайла, Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4));

	ИначеЕсли РасширениеФайла = "TXT" Тогда

		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
		ТекстовыйДокумент.Показать(ИмяФайла, Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4));

	ИначеЕсли РасширениеФайла = "EPF" Тогда

		ВнешняяОбработка = ВнешниеОбработки.Создать(ПолноеИмяФайла);
		ВнешняяОбработка.ПолучитьФорму().Открыть();

	Иначе

		ЗапуститьПриложение(ПолноеИмяФайла);

	КонецЕсли;

КонецПроцедуры 
Функция ПолучитьИмяФайла(ИмяКаталога, ИмяФайла) 

	Возврат ИмяКаталога + ?(ПустаяСтрока(ИмяФайла), "", "\" + ИмяФайла);

КонецФункции 
Функция ПолучитьРасширениеФайла(ИмяФайла) 

	ПозицияПоследнейТочки = 0;
	РасширениеФайла = ИмяФайла;

	Пока 1 = 1 Цикл
	
		ПозицияПоследнейТочки = Найти(РасширениеФайла, ".");

		Если ПозицияПоследнейТочки = 0 Тогда

			Прервать;

		Иначе

			РасширениеФайла = Сред(РасширениеФайла, ПозицияПоследнейТочки + 1)

		КонецЕсли;

	КонецЦикла;

	Возврат ?(РасширениеФайла = ИмяФайла, "", РасширениеФайла);

КонецФункции 
Процедура УдалитьВременныйФайл(ИмяВременногоФайла)
	
	Попытка
		Если Не ПустаяСтрока(ИмяВременногоФайла) Тогда
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры
Функция ПеревернутьДату(ТекДата)
	
	Возврат СокрЛП(Год(ТекДата)) + "-" +
			СокрЛП(Формат(Месяц(ТекДата),"ЧЦ=2; ЧДЦ=0; ЧВН=")) + "-" +
			СокрЛП(Формат(День(ТекДата),"ЧЦ=2; ЧДЦ=0; ЧВН=")) + "T00:00:00";
						
КонецФункции
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки)

	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник)

	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры

// запуск

Процедура ВыполнитьРегламентноеЗадание() Экспорт
	Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() тогда
		ОпросКаталогаВыгрузкиБанковскихВыписок();
	КонецЕсли;
КонецПроцедуры

//-------------------------------------------------------------------------
ЛогОтладки = "";