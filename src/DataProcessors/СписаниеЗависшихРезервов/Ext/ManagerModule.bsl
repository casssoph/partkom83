
Процедура ВыполнитьАвтоЗакрытие() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СохраненныеНастройки.СохраненнаяНастройка
		|ИЗ
		|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", "ОбработкаСписаниеЗависшихРезервов");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыполнитьЗакрытиеПоНастройке(Выборка.СохраненнаяНастройка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗакрытиеПоНастройке(СохраненнаяНастройка) Экспорт
	
	СтруктураНастройки = СохраненнаяНастройка.Получить();
	
	Если НЕ ИспользоватьАвтомат(СтруктураНастройки.КомпоновщикНастроекПользовательскиеНастройки) Тогда
		Возврат;
	КонецЕсли;
		
	СхемаКомпоновкиДанных = Обработки.СписаниеЗависшихРезервов.ПолучитьМакет("МакетКомпоновки");
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных); 
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(СтруктураНастройки.КомпоновщикНастроекПользовательскиеНастройки);
	/////////	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений") , Ложь, );
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//Объект.Резервы.Загрузить(ТаблицаРезультата);
	
	ТаблицаЗаявок = ТаблицаРезультата.Скопировать(,"Заявка");
	ТаблицаЗаявок.Свернуть("Заявка");
	
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		Обработки.СписаниеЗависшихРезервов.ЗакрытьРезервПоЗаявке(СтрокаТЗ.Заявка, ТаблицаРезультата.Скопировать(Новый структура("Заявка", СтрокаТЗ.Заявка), "СтрокаЗаявки, ВРезерве"));
	КонецЦикла;
	

КонецПроцедуры

Функция ИспользоватьАвтомат(Знач вхПользовательскиеНастройки) Экспорт
	
	Автоматически = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(вхПользовательскиеНастройки, "Автоматически");
	
	Если Автоматически = Неопределено Тогда
		Возврат Ложь;
	Иначе 
		Возврат Автоматически.Значение И Автоматически.Использование;
	КонецЕсли;
	
КонецФункции

Процедура ЗакрытьРезервПоЗаявке(Заявка, СтрокиЗаявки) Экспорт
	
	Документ = Документы.ЗаявкаПокупателя.ПолучитьПоследнийДокументКорректировки(Заявка); 
	//Документ = ОбщегоНазначения.ПолучитьПоследнююКорректировкуЗаявки(Заявка);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда
		ИзменяемыйОбъект = Документ.Скопировать();
		ИзменяемыйОбъект.Дата = ТекущаяДата();
	Иначе
		ИзменяемыйОбъект = Документ.ПолучитьОбъект();
		ИзменяемыйОбъект.ДополнительныеСвойства.Свойство("СоздаватьКорректировку", Истина);
	КонецЕсли;
	
	ДобавленыОтказы = Ложь; 
	
	Для каждого СтрокаЗявки Из СтрокиЗаявки Цикл
		
		СтрокаДокумента = ИзменяемыйОбъект.Товары.Найти(СтрокаЗявки.СтрокаЗаявки, "СтрокаЗаявки");
		
		Если СтрокаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КлючСвязи = СтрокаДокумента.КлючСвязи;
		КоличествоИсходное = СтрокаДокумента.Количество;
		КоличествоОтказ = ОтказыПоСтрокеЗаявки(СтрокаДокумента.СтрокаЗаявки);
		
		ДоступноКОтказу = КоличествоИсходное - КоличествоОтказ;
		
		Отказать = Мин(ДоступноКОтказу, СтрокаЗявки.ВРезерве);
		ПричинаОтмены = Справочники.СостоянияСтрокДокументов.ПревышенСрокРезерва;
		Если Отказать > 0 Тогда 
			
			СтрокиОтказов = ИзменяемыйОбъект.ПричиныОтказов.НайтиСтроки(Новый Структура("КлючСвязи, ПричинаОтмены", КлючСвязи, ПричинаОтмены));
			Если СтрокиОтказов.Количество() = 0 Тогда
				Строка = ИзменяемыйОбъект.ПричиныОтказов.Добавить();
			Иначе
				Строка = СтрокиОтказов[0];
			КонецЕсли;
			
			Строка.КлючСвязи = КлючСвязи;
			Строка.ПричинаОтмены = ПричинаОтмены;
			Строка.Количество = Строка.Количество + Отказать;
			
			ДобавленыОтказы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавленыОтказы Тогда
		Попытка
			ИзменяемыйОбъект.Записать(РежимЗаписиДокумента.Проведение); 
		Исключение
			Сообщить("Не удалось отменить строки заявки, Контрагент: "+Заявка.Контрагент+", Заявка: "+Заявка+", ошибка: "+ОписаниеОшибки());
			СтрокиТекст = "Строки:";
			Для каждого СтрокаЗявки Из СтрокиЗаявки Цикл
				СтрокиТекст = СтрокиТекст + СтрокаЗявки + Символы.ПС;	
			КонецЦикла;
			Сообщить(СтрокиТекст);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтказыПоСтрокеЗаявки(СтрокаЗаявки) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтказыПоЗаявкамОбороты.КоличествоОборот КАК Отказы
	                      |ИЗ
	                      |	РегистрНакопления.ОтказыПоЗаявкам.Обороты(, , , СтрокаЗаявки = &СтрокаЗаявки) КАК ОтказыПоЗаявкамОбороты");
	Запрос.УстановитьПараметр("СтрокаЗаявки", СтрокаЗаявки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Отказы, 0);
	
КонецФункции

