
#Область ПроцедурыРаботыСНастройкамиПользователя

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Обработки.СписаниеЗависшихРезервов.ПолучитьМакет("МакетКомпоновки");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура();
	Настройки.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);

	СохранитьНастройкиНаСервере(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Настройки)
	
	КлючОбъекта = "Обработка.СписаниеЗависшихРезервов";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, "Настройки", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.СписаниеЗависшихРезервов", "Настройки");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
		
		ЗаполнитьЗначенияСвойств(Объект, ЗначениеНастроек);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначениеНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьКомпоновщикНастроек();
	ВосстановитьНастройки();

КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	//ПараметрСценарий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Сценарий");
	//
	//Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрСценарий.Значение, "Периодичность");
	//КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений") , Ложь, );
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Объект.Резервы.Загрузить(ТаблицаРезультата);
	
	//УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки();

КонецПроцедуры


&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ПереключитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ПереключитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьФлажки(Устанавливать)
	
	Если Элементы.Резервы.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите строки в списке.'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Резервы.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Резервы.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		СтрокаТаблицы.Выбрать = Устанавливать;
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ЗакрытьЗаявкуНаСервере()
	
	ТаблицаЗаявок = Объект.Резервы.Выгрузить(Новый структура("Выбрать", Истина), "Заявка");
	ТаблицаЗаявок.Свернуть("Заявка");
	Если ТаблицаЗаявок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Документ = Документы.ЗакрытиеЗаявокПокупателя.СоздатьДокумент();
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		Документ.Заявки.Добавить().Документ = СтрокаТЗ.Заявка;
	КонецЦикла;
	Документ.Дата = ТекущаяДата();
	Документ.Ответственный = ПолныеПрава.ТекущийПользователь();
	Документ.Организация = Константы.ОрганизацияПоУмолчаниюБезнал.Получить();
	Документ.Комментарий = "Списание зависших резервов";
	Попытка
		Документ.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Заявки закрыты документом "+Документ);
		ОбновитьНаСервере();
	Исключение
		Сообщить("Не удалось закрыть заявки, ошибка: "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗакрытьЗаявку(Команда)
	
	ЗакрытьЗаявкуНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура СписатьРезервНаСервере()
	
	ТаблицаСтрок = Объект.Резервы.Выгрузить(Новый структура("Выбрать", Истина), "Заявка, СтрокаЗаявки, ВРезерве");
	ТаблицаСтрок.Свернуть("Заявка, СтрокаЗаявки", "ВРезерве");
	
	ТаблицаЗаявок = ТаблицаСтрок.Скопировать(,"Заявка");
	ТаблицаЗаявок.Свернуть("Заявка");
	
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		ЗакрытьРезервПоЗаявке(СтрокаТЗ.Заявка, ТаблицаСтрок.Скопировать(Новый структура("Заявка", СтрокаТЗ.Заявка), "СтрокаЗаявки, ВРезерве"));
	КонецЦикла;
	
	Сообщить("Обработано заявок: "+ТаблицаЗаявок.Количество());
	
	ОбновитьНаСервере();
	
КонецПроцедуры

Процедура ЗакрытьРезервПоЗаявке(Заявка, СтрокиЗаявки)
	
	Документ = ОбщегоНазначения.ПолучитьПоследнююКорректировкуЗаявки(Заявка);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда
		ИзменяемыйОбъект = Документ.Скопировать();
		ИзменяемыйОбъект.Дата = ТекущаяДата();
	Иначе
		ИзменяемыйОбъект = Документ.ПолучитьОбъект();
		ИзменяемыйОбъект.ДополнительныеСвойства.Свойство("СоздаватьКорректировку", Истина);
	КонецЕсли;
	
	ДобавленыОтказы = Ложь;
	
	Для каждого СтрокаЗявки Из СтрокиЗаявки Цикл
		
		СтрокаДокумента = ИзменяемыйОбъект.Товары.Найти(СтрокаЗявки.СтрокаЗаявки, "СтрокаЗаявки");
		
		КлючСвязи = СтрокаДокумента.КлючСвязи;
		КоличествоИсходное = СтрокаДокумента.Количество;
		КоличествоОтказ = ОтказыПоСтрокеЗаявки(СтрокаДокумента.СтрокаЗаявки);
		
		ДоступноКОтказу = КоличествоИсходное - КоличествоОтказ;
		
		Отказать = Мин(ДоступноКОтказу, СтрокаЗявки.ВРезерве);
		ПричинаОтмены = Справочники.СостоянияСтрокДокументов.ПревышенСрокРезерва;
		Если Отказать > 0 Тогда 
			
			СтрокиОтказов = ИзменяемыйОбъект.ПричиныОтказов.НайтиСтроки(Новый Структура("КлючСвязи, ПричинаОтмены", КлючСвязи, ПричинаОтмены));
			Если СтрокиОтказов.Количество() = 0 Тогда
				Строка = ИзменяемыйОбъект.ПричиныОтказов.Добавить();
			Иначе
				Строка = СтрокиОтказов[0];
			КонецЕсли;
			
			Строка.КлючСвязи = КлючСвязи;
			Строка.ПричинаОтмены = ПричинаОтмены;
			Строка.Количество = Строка.Количество + Отказать;
			
			ДобавленыОтказы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавленыОтказы Тогда
		Попытка
			ИзменяемыйОбъект.Записать(РежимЗаписиДокумента.Проведение); 
		Исключение
			Сообщить("Не удалось отменить строки заявки, Контрагент: "+Заявка.Контрагент+", Заявка: "+Заявка+", ошибка: "+ОписаниеОшибки());
			СтрокиТекст = "Строки:";
			Для каждого СтрокаЗявки Из СтрокиЗаявки Цикл
				СтрокиТекст = СтрокиТекст + СтрокаЗявки + Символы.ПС;	
			КонецЦикла;
			Сообщить(СтрокиТекст);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтказыПоСтрокеЗаявки(СтрокаЗаявки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОтказыПоЗаявкамОбороты.КоличествоОборот КАК Отказы
	                      |ИЗ
	                      |	РегистрНакопления.ОтказыПоЗаявкам.Обороты(, , , СтрокаЗаявки = &СтрокаЗаявки) КАК ОтказыПоЗаявкамОбороты");
	Запрос.УстановитьПараметр("СтрокаЗаявки", СтрокаЗаявки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Отказы, 0);
	
КонецФункции


&НаКлиенте
Процедура СписатьРезерв(Команда)
	СписатьРезервНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ТабличныйДокументДляОтправки = ТабличныйДокументДляОтправки();
	
	УправлениеОтчетами.ОтправитьДокументПоЭлектроннойПочте(ТабличныйДокументДляОтправки, "Зависшие резервы", "");

КонецПроцедуры

Функция ТабличныйДокументДляОтправки()
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , , Ложь, );
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	ТабличныйДокументДляОтправки = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТабличныйДокументДляОтправки;
	
КонецФункции

