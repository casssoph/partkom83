// В зависимости от того включена или нет подсистема доступны элементы настройки
&НаСервере
Процедура ОбновитьДоступностьИВидимость()
	
	Элементы.ГруппаПодключение.Доступность							= ВестиИсториюИзменений;
	Элементы.ГруппаПараметрУникальности.Доступность					= ВестиИсториюИзменений;
	Элементы.РегистрироватьВходыИВыходыПользователей.Доступность	= ВестиИсториюИзменений;
	Элементы.НажатиеКнопкаПараметрУникальностиТекущейИБ.Доступность	= ИспользоватьПараметрУникальностиИБ;
	Элементы.ГруппаПараметрыУникальности.Доступность				= ИспользоватьПараметрУникальностиИБ;
	
	Элементы.ИспользоватьПараметрУникальностиИБ.Доступность			= ВестиИсториюИзменений;
	Элементы.ГруппаИдентификаторИБ.Доступность						= ВестиИсториюИзменений;
	
	Элементы.ГруппаСерверКаталог.ТекущаяСтраница					= ?(ТипИБ = Перечисления.внТипИБ.Серверная, Элементы.Серверная, Элементы.Файловая);
	Элементы.ТипОбмена.ТекущаяСтраница								= ?(ТипОбменаРИБ = Перечисления.внТипОбменаРИБ.ОбменКэшемЖурналаЧерезТиповойРИБ, Элементы.ГруппаОбменКэшемЖурналаЧерезТиповойРИБ, Элементы.ГруппаОбменЧерезРИБХранителяЖурнала);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// 0 без огранчений, 1 - за квартал, 2 - за месяц, 3 - за неделю, 4 за день, 5 за час
	Элементы.ДавностьПросмотраВЖурналеПоУмолчанию.СписокВыбора.Добавить("Без ограничений");
	Элементы.ДавностьПросмотраВЖурналеПоУмолчанию.СписокВыбора.Добавить("За последний квартал");
	Элементы.ДавностьПросмотраВЖурналеПоУмолчанию.СписокВыбора.Добавить("За последний месяц");
	Элементы.ДавностьПросмотраВЖурналеПоУмолчанию.СписокВыбора.Добавить("За последнюю неделю");
	Элементы.ДавностьПросмотраВЖурналеПоУмолчанию.СписокВыбора.Добавить("За последний день");
	Элементы.ДавностьПросмотраВЖурналеПоУмолчанию.СписокВыбора.Добавить("За последний час");
	
	ЭтаФорма.Заголовок = "Настройка журнала регистрации. Версия " + внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("Версия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ПанельОбщая.ОтображениеСтраниц			= ОтображениеСтраницФормы.Нет;
	Элементы.ПанельОбщая.ТекущаяСтраница			= Элементы.НастройкиИстории;
	СнятьВыделениеКнопки();
	ПрочитатьНастройки();
	Элементы.ОткрытьНастройкиИстории.Шрифт			= Новый Шрифт(,,Истина);
		
	Элементы.ГруппаСерверКаталог.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "внПрогрессСжатия" Тогда
		ИндикаторСжатия = Параметр;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НачЗаполнениеИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Если ТекущиеДанные.Использование = 2 Тогда
		ТекущиеДанные.Использование = 0;
	КонецЕсли;
	ПометитьВложенныеЭлементы(ТекущиеДанные);
	ПометитьЭлементыРодителей(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПараметрУникальностиИБПриИзменении(Элемент)
		
	ОбновитьДоступностьИВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьЭлементыРодителейНаСервере(Элемент)

	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Родитель.ПолучитьРодителя() = Неопределено Тогда
	
		ЭлементыРодителя = Родитель.ПолучитьЭлементы();
		Если ЭлементыРодителя.Количество() = 0 Тогда
			Родитель.Использование = 0;
		ИначеЕсли Элемент.Использование = 2 Тогда
			Родитель.Использование = 2;
		Иначе
			Родитель.Использование = ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя);
		КонецЕсли;

	КонецЕсли;
	
	ПометитьЭлементыРодителейНаСервере(Родитель);

КонецПроцедуры

&НаКлиенте
Процедура ВестиИсториюИзмененийПриИзменении(Элемент)
	
	ОбновитьДоступностьИВидимость();
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для вложенных элементов начиная
// с передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьВложенныеЭлементы(Элемент)

	ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
	
	Если ВложенныеЭлементы.Количество() = 0 Тогда
		Если НЕ Элемент.ПолучитьРодителя() <> Неопределено Тогда
			Элемент.Использование = 0;
		КонецЕсли;		
	Иначе
		Для Каждого ВложенныйЭлемент ИЗ ВложенныеЭлементы Цикл
			ВложенныйЭлемент.Использование = Элемент.Использование;
			ПометитьВложенныеЭлементы(ВложенныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьВложенныеЭлементыСервер(Элемент)

	ВложенныеЭлементы = Элемент.Строки;
	
	Если ВложенныеЭлементы.Количество() = 0 Тогда
		Если НЕ Элемент.Родитель <> Неопределено Тогда
			Элемент.Использование = 0;
		КонецЕсли;		
	Иначе
		Для Каждого ВложенныйЭлемент ИЗ ВложенныеЭлементы Цикл
			ВложенныйЭлемент.Использование = Элемент.Использование;
			ПометитьВложенныеЭлементыСервер(ВложенныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для родителей передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьЭлементыРодителей(СтрокаРодитель)

	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Использование = СтрокаРодитель.Использование;
	
	Если СтрокаРодитель.ПолучитьЭлементы().Количество() > 0 Тогда
		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;
		Для Каждого Строка Из СтрокаРодитель.ПолучитьЭлементы() Цикл
			Если Строка.Использование = 0 Тогда
				НайденыВыключенные = Истина;
			ИначеЕсли Строка.Использование = 1 Тогда
				НайденыВключенные  = Истина;
			ИначеЕсли Строка.Использование = 2 Тогда
				НайденыВыключенные = Истина;
				НайденыВключенные  = Истина;
			КонецЕсли;
			
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденыВключенные И НЕ НайденыВыключенные Тогда
			Использование = 1;
		ИначеЕсли НЕ НайденыВключенные И НайденыВыключенные Тогда
			Использование = 0;
		Иначе
			Использование = 2;
		КонецЕсли;
	КонецЕсли; 

	СтрокаРодитель.Использование = Использование;
	ПометитьЭлементыРодителей(СтрокаРодитель.ПолучитьРодителя());

КонецПроцедуры

&НаСервере
Процедура ПометитьЭлементыРодителейСервер(СтрокаРодитель)

	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Использование = СтрокаРодитель.Использование;
	
	Если СтрокаРодитель.Строки.Количество() > 0 Тогда
		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;
		Для Каждого Строка Из СтрокаРодитель.Строки Цикл
			Если Строка.Использование = 0 Тогда
				НайденыВыключенные = Истина;
			ИначеЕсли Строка.Использование = 1 Тогда
				НайденыВключенные  = Истина;
			ИначеЕсли Строка.Использование = 2 Тогда
				НайденыВыключенные = Истина;
				НайденыВключенные  = Истина;
			КонецЕсли;
			
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденыВключенные И НЕ НайденыВыключенные Тогда
			Использование = 1;
		ИначеЕсли НЕ НайденыВключенные И НайденыВыключенные Тогда
			Использование = 0;
		Иначе
			Использование = 2;
		КонецЕсли;
	КонецЕсли; 

	СтрокаРодитель.Использование = Использование;
	ПометитьЭлементыРодителейСервер(СтрокаРодитель.Родитель);

КонецПроцедуры

&НаКлиенте
Процедура НадписьИсторияИзмененийНажатие(Элемент)
	
	ТД = ПолучитьИсториюИзменений();
	ТД.Показать("История изменения журнала регистрации");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Применить(Команда)
	
	ЗаписатьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура OK(Команда)
	
	ЗаписатьНастройки();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	
	ЗаписатьНастройки();
	Удачно = ТестСоединения();
	
	Если Удачно Тогда
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Все параметры подключения установлены правильно!");
		внЖурналРегистрации.ПриНачалеРаботыСистемы();
	Иначе
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Подключение НЕ может быть установлено...");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НажатиеКнопкаПараметрУникальностиТекущейИБ(Команда)
	
	ПУ									= внЖурналРегистрации.ПараметрУникальностиИБ();
	ПараметрУникальностиСписокСерверов	= ПУ.Сервер;
	ПараметрУникальностиИмяБазы			= ПУ.ИмяБазы;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагПросмотр(Команда)
	
	УстановитьФлагиВКолонкеПользователей("ФлагПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагАдминистратор(Команда)
	
	УстановитьФлагиВКолонкеПользователей("ФлагАдминистратор", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагАдминистратор(Команда)
	
	УстановитьФлагиВКолонкеПользователей("ФлагАдминистратор", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиИстории(Команда)
	
	Элементы.ПанельОбщая.ТекущаяСтраница = Элементы.НастройкиИстории;
	СнятьВыделениеКнопки();
	Элементы.ОткрытьНастройкиИстории.Шрифт	= Новый Шрифт(,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрируемыеОбъекты(Команда)
	
	Если РегистрируемыеОбъекты.ПолучитьЭлементы().Количество() = 0 Тогда
		ЗаполнитьРегистрируемыеОбъекты();
	КонецЕсли;	
	Элементы.ПанельОбщая.ТекущаяСтраница = Элементы.РегистрируемыеОбъекты;
	СнятьВыделениеКнопки();
	Элементы.ОткрытьРегистрируемыеОбъекты.Шрифт	= Новый Шрифт(,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРолиИстории(Команда)
	
	Если Пользователи.Количество() = 0 Тогда
		// Выводим всех пользователей сисемы
		ОбновитьСписокПользователейИРолей();
	КонецЕсли;

	Элементы.ПанельОбщая.ТекущаяСтраница = Элементы.РолиИстории;
	СнятьВыделениеКнопки();
	Элементы.ОткрытьРолиИстории.Шрифт	= Новый Шрифт(,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСостояниеЖурнала(Команда)
	
	Элементы.ПанельОбщая.ТекущаяСтраница = Элементы.СостояниеЖурнала;
	ОбновитьСостояниеЛокальногоКэша();
	СнятьВыделениеКнопки();
	Элементы.ОткрытьМониторингЖурнала.Шрифт	= Новый Шрифт(,,Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДополнительно(Команда)
	
	Элементы.ПанельОбщая.ТекущаяСтраница = Элементы.Дополнительно;
	СнятьВыделениеКнопки();
	Элементы.ОткрытьДополнительно.Шрифт	= Новый Шрифт(,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНачальноеЗаполнение(Команда)
	
	МассивОбъектов = ВыполнитьНачальноеЗаполнениеНаСервере();
	
	// Проверка согласованности параметров процесса
	Если МассивОбъектов.Количество() = 0 Тогда
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Выберите объекты для начального заполнения!");
		Возврат;
	КонецЕсли;
	
	внЖурналРегистрации.СозданиеПервоначальногоОбраза(НеРегистрироватьОбъектыСтарше, ПериодРегистрацииОбъектовНачальногоЗаполнения, МассивОбъектов);
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = НСтр("ru = 'Образы объектов созданы. Произвести перенос кэша во внешнюю ИБ?
             |Внимание! Операция может быть длительной, перенос кэша так же производится регламентным заданием, так что этот шаг можно пропустить, он все равно будет выполнен либо сейчас вручную, либо позже регламентным заданием.'");
			 
	Если внЖурналРегистрацииПовтИсп.ИспользуетсяРежимМодальности() Тогда
		
		Ответ = Вычислить("Вопрос(Текст, Режим, 0)");
		ВыполнитьНачальноеЗаполнениеЗавершение(Ответ, Неопределено);			
		
	Иначе
		
		
		Выполнить(
			"Ответ = Неопределено;
			|ПоказатьВопрос(Новый ОписаниеОповещения(""ВыполнитьНачальноеЗаполнениеЗавершение"", ЭтотОбъект), Текст, Режим, 0);"
		)

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНачальноеЗаполнениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПереносКэшаВоВнешнююИБ();
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Перенос кэша выполен!");
	КонецЕсли;
	Оповестить("внОбновитьИсторию");	

КонецПроцедуры

&НаСервере
Процедура ПереносКэшаВоВнешнююИБ()
	
	внЖурналРегистрацииСервер.внПереносКэшаЖурналаРегистрации();
	ОбновитьСостояниеЛокальногоКэша();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеУстановитьФлагиНачЗаполнения(Команда)
	
	УстановитьФлагиНачальноеЗаполнениеОбъекты(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСнятьФлагиНачЗаполнения(Команда)
	
	УстановитьФлагиНачальноеЗаполнениеОбъекты(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеУстановитьФлагиРегистрируемыхОбъектов(Команда)
	
	УстановитьФлагиРегистрируемыхОбъектов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСнятьФлагиРегистрируемыхОбъектов(Команда)
	
	УстановитьФлагиРегистрируемыхОбъектов(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагПросмотр(Команда)
	
	УстановитьФлагиВКолонкеПользователей("ФлагПросмотр", Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаписатьРегистрируемыеОбъекты(НаборЗаписей, СтрокаОбъекта, МетодРегистрации)
	
	// Запишем только регистрируемые объекты, все остальные удалим
	
	Для Каждого Стр Из СтрокаОбъекта.Строки Цикл
		
		Если МетодРегистрации = Перечисления.внМетодыРегистрацииНовыхОбъектов.ФиксироватьВыбранныеОбъектыИНовые Тогда
			
			Если НЕ ПустаяСтрока(Стр.ПолноеИмя) И Стр.Использование = 0 Тогда
				
				НоваяЗапись						= НаборЗаписей.Добавить();
				НоваяЗапись.МетаданныеОбъекта	= Стр.ПолноеИмя;
				НоваяЗапись.ИмяТЧ				= Стр.ИмяТЧ;
				НоваяЗапись.ИмяРеквизита		= Стр.Имя;
				
			КонецЕсли;
			
			// Если есть флажок, дальше рекурсия
			Если Стр.СодержитЭлементы И Стр.Использование <> 1 И НЕ (Стр.ЭтоОбъект И Стр.Использование = 0) Тогда
				ЗаписатьРегистрируемыеОбъекты(НаборЗаписей, Стр, МетодРегистрации);
			КонецЕсли;
			
		Иначе
			
			Если НЕ ПустаяСтрока(Стр.ПолноеИмя) И Стр.Использование > 0 Тогда
				
				НоваяЗапись						= НаборЗаписей.Добавить();
				НоваяЗапись.МетаданныеОбъекта	= Стр.ПолноеИмя;
				НоваяЗапись.ИмяТЧ				= Стр.ИмяТЧ;
				НоваяЗапись.ИмяРеквизита		= Стр.Имя;
				
			КонецЕсли;
			
			// Если есть флажок, дальше рекурсия
			Если Стр.СодержитЭлементы И Стр.Использование > 0 И НЕ (Стр.ЭтоОбъект И Стр.Использование = 1) Тогда
				ЗаписатьРегистрируемыеОбъекты(НаборЗаписей, Стр, МетодРегистрации);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройки()
	
	ВестиИсториюИзменений							= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ВестиИсториюИзменений");
	РегистрироватьВходыИВыходыПользователей			= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("РегистрироватьВходыИВыходыПользователей");	
	
	ПутьКВнешнейИБ	 								= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ПутьКВнешнейИБ");
	СерверВнешнейИБ 								= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("СерверВнешнейИБ");
	ИмяВнешнейИБ	 								= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ИмяВнешнейИБ");
	ПользовательВнешнейИБ							= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ПользовательВнешнейИБ");
	ПарольВнешнейИБ 								= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ПарольВнешнейИБ");			
	ИспользоватьПараметрУникальностиИБ				= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ИспользоватьПараметрУникальностиИБ");
	ИдентификаторИБ									= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ИдентификаторИБ");
	ИдентификаторУзлаРИБ							= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ИдентификаторУзлаРИБ");
	ТипОбменаРИБ									= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ТипОбменаРИБ");
	ТипИБ											= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ТипИБ");
	ПараметрУникальностиСписокСерверов				= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ПараметрУникальностиСписокСерверов");
	ПараметрУникальностиИмяБазы						= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ПараметрУникальностиИмяБазы");
	ОткрыватьСобытияСФильтромИзменений				= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ОткрыватьСобытияСФильтромИзменений");
	ВерсияПлатформыХранителя						= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ВерсияПлатформыХранителя");
	РазмерПакетаПереносаДанных						= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("РазмерПакетаПереносаДанных");
	МетодРегистрацииОбъектовМетаданных				= внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("МетодРегистрацииОбъектовМетаданных");
	
	/////////////////////////////////////
	
	Если ПустаяСтрока(ПараметрУникальностиИмяБазы) Тогда
		ПУ									= внЖурналРегистрации.ПараметрУникальностиИБ();
		ПараметрУникальностиСписокСерверов	= ПУ.Сервер;
		ПараметрУникальностиИмяБазы			= ПУ.ИмяБазы;
	КонецЕсли;
	
	// В обычном ВестиИсториюИзмененийПриИзменении(Неопределено);
	ОбновитьДоступностьИВидимость();
	
	ДавностьПросмотраВЖурналеПоУмолчанию = Элементы.ДавностьПросмотраВЖурналеПоУмолчанию.СписокВыбора.Получить(внЖурналРегистрацииСервер.ПолучитьНастройкуЖурналаРегистрации("ДавностьПросмотраВЖурналеПоУмолчанию"));
	НеРегистрироватьОбъектыСтарше					= Истина;
	ПериодРегистрацииОбъектовНачальногоЗаполнения	= 60;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройки()
	
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ВестиИсториюИзменений"						, ВестиИсториюИзменений);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("РегистрироватьВходыИВыходыПользователей"	, РегистрироватьВходыИВыходыПользователей);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("СерверВнешнейИБ"							, СерверВнешнейИБ);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ПутьКВнешнейИБ"							, ПутьКВнешнейИБ);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ИмяВнешнейИБ"								, ИмяВнешнейИБ);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ПользовательВнешнейИБ"						, ПользовательВнешнейИБ);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ПарольВнешнейИБ"							, ПарольВнешнейИБ);	
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ИспользоватьПараметрУникальностиИБ"		, ИспользоватьПараметрУникальностиИБ);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ИдентификаторИБ"							, ИдентификаторИБ);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ИдентификаторУзлаРИБ"						, ИдентификаторУзлаРИБ);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ТипОбменаРИБ"								, ТипОбменаРИБ);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ТипИБ"										, ТипИБ);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ПараметрУникальностиСписокСерверов"		, ПараметрУникальностиСписокСерверов);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ПараметрУникальностиИмяБазы"				, ПараметрУникальностиИмяБазы);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ОткрыватьСобытияСФильтромИзменений"		, ОткрыватьСобытияСФильтромИзменений);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ВерсияПлатформыХранителя"					, ВерсияПлатформыХранителя);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("РазмерПакетаПереносаДанных"				, РазмерПакетаПереносаДанных);
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("МетодРегистрацииОбъектовМетаданных"		, МетодРегистрацииОбъектовМетаданных);	
	
	///////////////////////////////
	// Записываем НеРегистрируемыеОбъекты	
	// Не регистрируемые объекты
	Если РегистрируемыеОбъекты.ПолучитьЭлементы().Количество() <> 0 Тогда
		Дерево = ДанныеФормыВЗначение(РегистрируемыеОбъекты, Тип("ДеревоЗначений"));
		НаборЗаписей = РегистрыСведений.внРегистрируемыеОбъекты.СоздатьНаборЗаписей();
		ЗаписатьРегистрируемыеОбъекты(НаборЗаписей, Дерево, МетодРегистрацииОбъектовМетаданных);
		НаборЗаписей.Записать(Истина);
	КонецЕсли;	
		
	// Сохраняем права
	Для Каждого Строки Из Пользователи Цикл
		УИД = Новый УникальныйИдентификатор(Строки.УникальныйИдентификатор);
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИД);
		
		мРоль = Метаданные.Роли.внПросмотрЖурналаРегистрации;
		СодержитРоль = ПользовательИБ.Роли.Содержит(мРоль);		
		Если СодержитРоль И Не Строки.ФлагПросмотр Тогда
			ПользовательИБ.Роли.Удалить(мРоль);
		ИначеЕсли Не СодержитРоль И Строки.ФлагПросмотр Тогда
			ПользовательИБ.Роли.Добавить(мРоль);
		КонецЕсли; 
				
		мРоль = Метаданные.Роли.внАдминистраторЖурналаРегистрации;
		СодержитРоль = ПользовательИБ.Роли.Содержит(мРоль);		
		Если СодержитРоль И Не Строки.ФлагАдминистратор Тогда
			ПользовательИБ.Роли.Удалить(мРоль);
		ИначеЕсли Не СодержитРоль И Строки.ФлагАдминистратор Тогда
			ПользовательИБ.Роли.Добавить(мРоль);
		КонецЕсли;		
		
		мРоль = Метаданные.Роли.внНеФиксироватьСобытияЖурналаРегистарции;
		СодержитРоль = ПользовательИБ.Роли.Содержит(мРоль);		
		Если СодержитРоль И Не Строки.ФлагНеФиксировать Тогда
			ПользовательИБ.Роли.Удалить(мРоль);
		ИначеЕсли Не СодержитРоль И Строки.ФлагНеФиксировать Тогда
			ПользовательИБ.Роли.Добавить(мРоль);
		КонецЕсли;		
		
		ПользовательИБ.Записать();
	КонецЦикла;
	
	Зн = 0;
	Если ДавностьПросмотраВЖурналеПоУмолчанию = "За последний квартал" Тогда
		Зн = 1;
	ИначеЕсли ДавностьПросмотраВЖурналеПоУмолчанию = "За последний месяц" Тогда
		Зн = 2;
	ИначеЕсли ДавностьПросмотраВЖурналеПоУмолчанию = "За последнюю неделю" Тогда
		Зн = 3;
	ИначеЕсли ДавностьПросмотраВЖурналеПоУмолчанию = "За последний день" Тогда
		Зн = 4;
	ИначеЕсли ДавностьПросмотраВЖурналеПоУмолчанию = "За последний час" Тогда
		Зн = 5;
	КонецЕсли;
	внЖурналРегистрацииСервер.УстановитьНастройкуЖурналаРегистрации("ДавностьПросмотраВЖурналеПоУмолчанию", Зн);
	
	///////////////////////////////
	ОбновитьПовторноИспользуемыеЗначения();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьНеРегистрируемое(СтрокаОбъекта, НеРегистрируемыеОбъекты, НеРегистрируемыеРеквизиты)
	Для Каждого Стр Из СтрокаОбъекта.Строки Цикл
		Если Стр.Уровень() = 1 Тогда
			Если НЕ Стр.Использование Тогда
				Если НЕ ПустаяСтрока(НеРегистрируемыеОбъекты) Тогда
					НеРегистрируемыеОбъекты = НеРегистрируемыеОбъекты + Символы.ПС;
				КонецЕсли;
				НеРегистрируемыеОбъекты = НеРегистрируемыеОбъекты + Стр.Имя;
			КонецЕсли;
		ИначеЕсли Стр.Уровень() > 1 Тогда
			Если НЕ Стр.Использование Тогда
				Если Стр.Строки.Количество() = 0 Тогда
					Если НЕ ПустаяСтрока(НеРегистрируемыеРеквизиты) Тогда
						НеРегистрируемыеРеквизиты = НеРегистрируемыеРеквизиты + Символы.ПС;
					КонецЕсли;
					НеРегистрируемыеРеквизиты = НеРегистрируемыеРеквизиты + Стр.Имя;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПолучитьНеРегистрируемое(Стр, НеРегистрируемыеОбъекты, НеРегистрируемыеРеквизиты);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьВсеФлагиРегистрируемыхОбъектов(СтрокиРегистрируемыеОбъекты, Флаг)
	
	Для Каждого Стр Из СтрокиРегистрируемыеОбъекты.Строки Цикл
		Стр.Использование = Флаг;                   
		УстановитьВсеФлагиРегистрируемыхОбъектов(Стр, Флаг);
	КонецЦикла;
	
КонецПроцедуры // УстановитьВсеФлагиРегистрируемыхОбъектов

&НаСервереБезКонтекста
Процедура ПолучитьСтрокуРегистрируемогоОбъекта(СтрокиРегистрируемыеОбъекты, СтрокаРегОбъекта, Результат)
	
	Если Результат <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Стр Из СтрокиРегистрируемыеОбъекты.Строки Цикл
		Если ВРег(Стр.Имя) = ВРег(СтрокаРегОбъекта) Тогда
			Результат = Стр;
			Прервать;
		КонецЕсли;
		
		ПолучитьСтрокуРегистрируемогоОбъекта(Стр, СтрокаРегОбъекта, Результат);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьСтрокуРегистрируемогоОбъекта
	
// Обновляет флаги в дереве регистрируемых объектов
&НаСервере
Процедура ОбновитьФлагиРегистрируемыхОбъектов()
	
	Дерево = ДанныеФормыВЗначение(РегистрируемыеОбъекты, Тип("ДеревоЗначений"));
	
	// Сначала установим все флаги рекурсивно
	Если МетодРегистрацииОбъектовМетаданных = Перечисления.внМетодыРегистрацииНовыхОбъектов.ФиксироватьВыбранныеОбъектыИНовые Тогда
		УстановитьВсеФлагиРегистрируемыхОбъектов(Дерево, 1);
	Иначе
		УстановитьВсеФлагиРегистрируемыхОбъектов(Дерево, 0);
	КонецЕсли;	
	
	///////////////////////////////////
	// Загрузка НеРегистрируемыеОбъекты	
	
	ТЗРегистрируемые = внЖурналРегистрации.ПолучитьРегистрируемыеОбъекты();
	НачальнаяПометкаКоллекций(ТЗРегистрируемые, Дерево, МетодРегистрацииОбъектовМетаданных);
	
	ЗначениеВРеквизитФормы(Дерево, "РегистрируемыеОбъекты");
		
КонецПроцедуры // ОбновитьФлагиРегистрируемыхОбъектов

// Процедура НачальнаяПометкаКоллекций устанавливает пометку для коллекций
//
&НаСервере
Процедура НачальнаяПометкаКоллекций(ТЗРегистрируемые, ТекСтрока, МетодРегистрации)

	ПараметрыОтбора = Новый Структура;
	
	Для каждого Строки Из ТекСтрока.Строки Цикл
		
		ПараметрыОтбора.Вставить("МетаданныеОбъекта", 	Строки.ПолноеИмя);
		ПараметрыОтбора.Вставить("ИмяТЧ", 				Строки.ИмяТЧ);
		ПараметрыОтбора.Вставить("ИмяРеквизита", 		Строки.Имя);
		НайденныеСтроки = ТЗРегистрируемые.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если МетодРегистрации = Перечисления.внМетодыРегистрацииНовыхОбъектов.ФиксироватьВыбранныеОбъектыИНовые Тогда
				// Снять со всех, что есть в регистре
				Строки.Использование = 0;
				ПометитьВложенныеЭлементыСервер(Строки);
				ПометитьЭлементыРодителейСервер(Строки.Родитель);
			ИначеЕсли МетодРегистрации = Перечисления.внМетодыРегистрацииНовыхОбъектов.ФиксироватьТолькоВыбранныеОбъекты Тогда
				// Установить все, что есть в регистре
				Строки.Использование = 1;
				ПометитьВложенныеЭлементыСервер(Строки);
				ПометитьЭлементыРодителейСервер(Строки.Родитель);
			КонецЕсли;
		Иначе
			Если МетодРегистрации = Перечисления.внМетодыРегистрацииНовыхОбъектов.ФиксироватьТолькоВыбранныеОбъекты Тогда
				// Установить все, что есть в регистре
				Строки.Использование = 0;
				ПометитьВложенныеЭлементыСервер(Строки);
				ПометитьЭлементыРодителейСервер(Строки.Родитель);				
			КонецЕсли;
		КонецЕсли;
				
		// Рекурсия
		Если Строки.Строки.Количество() > 0 Тогда
			НачальнаяПометкаКоллекций(ТЗРегистрируемые, Строки, МетодРегистрации)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // НачальнаяПометкаКоллекций

&НаСервере
Функция ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Использование = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ПолучитьРодителя() <> Неопределено Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Использование;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Использование;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементовНаСервере(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Использование ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Использование ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, 2, ?(ЕстьПомеченные, 1, 0));
	
КонецФункции

&НаСервере
Процедура УстановитьФлагиРегистрируемыхОбъектов(Флаг)
	Дерево = ДанныеФормыВЗначение(РегистрируемыеОбъекты, Тип("ДеревоЗначений"));
	
	УстановитьВсеФлагиРегистрируемыхОбъектов(Дерево, Флаг);	
	ЗначениеВРеквизитФормы(Дерево, "РегистрируемыеОбъекты");
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиНачальноеЗаполнениеОбъекты(Флаг)
	Дерево = ДанныеФормыВЗначение(НачальноеЗаполнениеОбъекты, Тип("ДеревоЗначений"));
	
	УстановитьВсеФлагиРегистрируемыхОбъектов(Дерево, Флаг);	
	ЗначениеВРеквизитФормы(Дерево, "НачальноеЗаполнениеОбъекты");
КонецПроцедуры
         
&НаСервере
Процедура ЗаполнитьРегистрируемыеОбъекты()
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Представление",	Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Имя",				Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("ИмяТЧ",			Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("ИндексКартинки",	Новый ОписаниеТипов("Число"));
	Дерево.Колонки.Добавить("Использование");	
	Дерево.Колонки.Добавить("ПолноеИмя");
	Дерево.Колонки.Добавить("СодержитЭлементы");
	Дерево.Колонки.Добавить("ЭтоОбъект");
	Дерево.Колонки.Добавить("ТипЭлемента");
	
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.Константы, 				"Константы", 				"", 			2, Истина);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.Справочники, 				"Справочники", 				"", 			3, Истина);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.Документы, 				"Документы", 				"", 			4, Истина);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.ПланыВидовХарактеристик, 	"Планы видов характеристик","", 			5, Истина);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.ПланыСчетов, 				"Планы счетов", 			"", 			6, Истина);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.ПланыВидовРасчета, 		"Планы видов расчета", 		"", 			7, Истина);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.ПланыОбмена, 				"Планы обмена", 			"", 			8, Истина);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.РегистрыСведений, 			"Регистры сведений", 		"", 			11, Истина);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.БизнесПроцессы, 			"Бизнесс-процессы", 		"", 			10, Истина);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.Задачи, 					"Задачи", 					"", 			9, Истина);
		
	ЗначениеВРеквизитФормы(Дерево, "РегистрируемыеОбъекты");
	
	ОбновитьФлагиРегистрируемыхОбъектов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальноеЗаполнение()
	Дерево = РеквизитФормыВЗначение("НачальноеЗаполнениеОбъекты", Тип("ДеревоЗначений"));
	
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.Константы, 					"Константы", 				"Константа", 				2, Ложь);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.Справочники, 				"Справочники", 				"Справочник", 				3, Ложь);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.Документы, 					"Документы", 				"Документ", 				4, Ложь);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.ПланыВидовХарактеристик, 	"Планы видов характеристик","ПланВидовХарактеристик", 	5, Ложь);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.ПланыСчетов, 				"Планы счетов", 			"ПланСчетов", 				6, Ложь);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.ПланыВидовРасчета, 			"Планы видов расчета", 		"ПланВидовРасчета", 		7, Ложь);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.ПланыОбмена, 				"Планы обмена", 			"ПланОбмена", 				8, Ложь);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.РегистрыСведений, 			"Регистры сведений", 		"РегистрСведений", 			11, Ложь);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.БизнесПроцессы, 				"Бизнесс-процессы", 		"БизнесПроцесс", 			10, Ложь);
	внЖурналРегистрации.ДобавитьРегистрируемыеОбъекты(Дерево, Метаданные.Задачи, 						"Задачи", 					"Задача", 					9, Ложь);	
	
	УстановитьВсеФлагиРегистрируемыхОбъектов(Дерево, Истина);	
	
	ЗначениеВРеквизитФормы(Дерево, "НачальноеЗаполнениеОбъекты");
	
КонецПроцедуры

&НаСервере
Процедура СнятьВыделениеКнопки()
	
	мНовыйШрифт									= Новый Шрифт();
	Элементы.ОткрытьДополнительно.Шрифт			= мНовыйШрифт;
	Элементы.ОткрытьНастройкиИстории.Шрифт		= мНовыйШрифт;
	Элементы.ОткрытьМониторингЖурнала.Шрифт		= мНовыйШрифт;
	Элементы.ОткрытьРегистрируемыеОбъекты.Шрифт	= мНовыйШрифт;
	Элементы.ОткрытьРолиИстории.Шрифт			= мНовыйШрифт;
	Элементы.ОткрытьНачальноеЗаполнение.Шрифт	= мНовыйШрифт;
	Элементы.ОткрытьРИБ.Шрифт					= мНовыйШрифт;
	
КонецПроцедуры // СнятьВыделениеКнопки

&НаСервере
Процедура ОбновитьСписокПользователейИРолей()
	Пользователи.Очистить();
	
	НаличиеПраваНаРедактированиеПользователейИБ = ПравоДоступа("Администрирование", Метаданные);
	
	Если НаличиеПраваНаРедактированиеПользователейИБ Тогда
		Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл			
			НоваяСтрока							= Пользователи.Добавить();
			НоваяСтрока.Пользователь			= ПользовательИБ.Имя;
			НоваяСтрока.УникальныйИдентификатор = Строка(ПользовательИБ.УникальныйИдентификатор);
			                                                      
			НоваяСтрока.ФлагПросмотр 			= ПользовательИБ.Роли.Содержит(Метаданные.Роли.внПросмотрЖурналаРегистрации);
			НоваяСтрока.ФлагАдминистратор		= ПользовательИБ.Роли.Содержит(Метаданные.Роли.внАдминистраторЖурналаРегистрации);
			НоваяСтрока.ФлагНеФиксировать		= ПользовательИБ.Роли.Содержит(Метаданные.Роли.внНеФиксироватьСобытияЖурналаРегистарции);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ТестСоединения()
	
	ОбновитьПовторноИспользуемыеЗначения();
	внЖурналРегистрации.ОтключитьСоединение();
	внСоединение = внЖурналРегистрации.ПодключениеКВнешнейИБ(внЖурналРегистрации.ПолучитьПараметрыДоступаКБазеДанных());

	Удачно = Истина;
	Если внСоединение = Неопределено Тогда
		Удачно = Ложь;
	КонецЕсли;
	
	Возврат Удачно;
	
КонецФункции

&НаСервере
Процедура УстановитьФлагиВКолонкеПользователей(ИмяКолонки, Флаг)
	Для Каждого Строки Из Пользователи Цикл
		Строки[ИмяКолонки] = Флаг;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиСтрокуДереваПоИмени(Строки, Имя, ТекущиеДанные)
	
	Если ТекущиеДанные <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Строки Цикл
		Если Стр.Имя = Имя Тогда
			ТекущиеДанные = Стр;
			Возврат;
		КонецЕсли;
		НайтиСтрокуДереваПоИмени(Стр.Строки, Имя, ТекущиеДанные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПометкиЭлементов(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Использование = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ПолучитьРодителя() <> Неопределено Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Использование;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Использование;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементов(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Использование ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Использование ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, 2, ?(ЕстьПомеченные, 1, 0));
	
КонецФункции

&НаКлиенте
Процедура РегистрируемыеОбъектыФормаИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Если ТекущиеДанные.Использование = 2 Тогда
		ТекущиеДанные.Использование = 0;
	КонецЕсли;
	ПометитьВложенныеЭлементы(ТекущиеДанные);
	ПометитьЭлементыРодителей(ТекущиеДанные.ПолучитьРодителя());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНачальноеЗаполнение(Команда)
	
	Если НачальноеЗаполнениеОбъекты.ПолучитьЭлементы().Количество() = 0 Тогда
		ЗаполнитьНачальноеЗаполнение();
	КонецЕсли;	
	Элементы.ПанельОбщая.ТекущаяСтраница = Элементы.НачальноеЗаполнениеВлкадка;
	СнятьВыделениеКнопки();
	Элементы.ОткрытьНачальноеЗаполнение.Шрифт	= Новый Шрифт(,,Истина);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьНачальноеЗаполнениеНаСервере()
	
	// Получение списка объектов для создания начального образа
	МассивОбъектов = Новый Массив;
	
	НЗ = ДанныеФормыВЗначение(НачальноеЗаполнениеОбъекты, Тип("ДеревоЗначений"));
	
	Для Каждого СтрокаКласса Из НЗ.Строки Цикл		
		Если СтрокаКласса.Использование = 0 Тогда
			Продолжить;
		КонецЕсли;		
		Для Каждого СтрокаОбъекта Из СтрокаКласса.Строки Цикл
			Если СтрокаОбъекта.Использование = 1 Тогда
				МассивОбъектов.Добавить(СтрокаОбъекта.ПолноеИмя);
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;	
	
	Возврат МассивОбъектов;
КонецФункции

&НаСервере
Функция ПолучитьИсториюИзменений()
	
	Макет						= ПолучитьОбщийМакет("внОписаниеИзменений");
	ТД							= Новый ТабличныйДокумент;
	ТД.ТолькоПросмотр			= Истина;
	ТД.ОтображатьГруппировки	= Истина;
	ТД.ОтображатьСетку			= Ложь;
	ТД.ОтображатьЗаголовки		= Ложь;
	ТД.Вывести(Макет);	
	Возврат ТД;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИдентификаторИБ(Команда)
	ЗаписатьНастройки();	
	Ошибка = "";
	Если НЕ внЖурналРегистрации.ПроверитьИдентификаторИБНаУникальность(ИдентификаторИБ, Ошибка) Тогда
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю(Ошибка);
	Иначе
		внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Идентификатор ИБ уникален!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРИБ(Команда)
	
	Элементы.ПанельОбщая.ТекущаяСтраница = Элементы.РИБ;
	СнятьВыделениеКнопки();
	Элементы.ОткрытьРИБ.Шрифт	= Новый Шрифт(,,Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИдентификаторИБ(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = НСтр("ru = 'Идентификатор журнала отличает информационную базу в журнале от других информационных баз.
         |Не рекомендуется изменять идентификатор, если он уже был задан ранее, т.к. пропадут все данные журанала введенные ранее.
         |Вы действительно хотите назначить новый идентификатор?'");
	Ответ = Неопределено;

	Если внЖурналРегистрацииПовтИсп.ИспользуетсяРежимМодальности() Тогда
		
		Ответ = Вычислить("Вопрос(Текст, Режим, 0)");
		ИзменитьИдентификаторИБЗавершение(Ответ,Новый Структура("Режим, Текст", Режим, Текст));
			
	Иначе
	
	    Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ИзменитьИдентификаторИБЗавершение"", ЭтотОбъект, Новый Структура(""Режим, Текст"", Режим, Текст)), Текст, Режим, 0)");
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИдентификаторИБЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Режим = ДополнительныеПараметры.Режим;
	Текст = ДополнительныеПараметры.Текст;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Стр = ИдентификаторИБ;	
	Подсказка = НСтр("ru = 'Идентфикатор должен быть уникален во внешней ИБ'");
	
	Если внЖурналРегистрацииПовтИсп.ИспользуетсяРежимМодальности() Тогда
		
		Результат = Вычислить("ВвестиСтроку(Стр, Подсказка)");
		Если Результат Тогда
			
			ИзменитьИдентификаторИБЗавершениеВводаСтроки(Стр, Неопределено);
			
		КонецЕсли;
		
	Иначе
		
		Выполнить(
			"Оповещение = Новый ОписаниеОповещения(""ИзменитьИдентификаторИБЗавершениеВводаСтроки"", ЭтотОбъект, Неопределено);
			|ПоказатьВводСтроки(Оповещение, Стр, Подсказка, 0, Ложь);"
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИдентификаторИБЗавершениеВводаСтроки(Строка, Параметры) Экспорт
	
	Если НЕ Строка = Неопределено Тогда
		
		Ошибка = "";
		Если НЕ внЖурналРегистрации.ПроверитьИдентификаторИБНаУникальность(Строка, Ошибка) Тогда
			
			Текст = Ошибка + "
				|Продолжить?";
			Режим = РежимДиалогаВопрос.ДаНет;
			Если внЖурналРегистрацииПовтИсп.ИспользуетсяРежимМодальности() Тогда
				
				Ответ = Вычислить("Вопрос(Текст, Режим, 0)");
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
				
			Иначе
				
				Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ИзменитьИдентификаторИБЗавершениеВводаСтрокиПослеВопроса"", ЭтотОбъект, Новый Структура(""Режим, Строка"", Режим, Строка)), Текст, Режим, 0)");
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИдентификаторИБ = Строка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИдентификаторИБЗавершениеВводаСтрокиПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Режим = ДополнительныеПараметры.Режим;
	Строка = ДополнительныеПараметры.Строка;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторИБ = Строка;

КонецПроцедуры

// Обновляет флаги в дереве регистрируемых объектов
&НаСервере
Процедура ОбновитьФлагиУстановитьПоРегистрируемым()
	
	ЗаполнитьРегистрируемыеОбъекты();
	Дерево = ДанныеФормыВЗначение(НачальноеЗаполнениеОбъекты, Тип("ДеревоЗначений"));
	
	// Сначала установим все флаги рекурсивно
	УстановитьВсеФлагиРегистрируемыхОбъектов(Дерево, Истина);
	
	///////////////////////////////////
	// Загрузка НеРегистрируемыеОбъекты	
	
	ТЗРегистрируемые = внЖурналРегистрации.ПолучитьРегистрируемыеОбъекты();
	НачальнаяПометкаКоллекций(ТЗРегистрируемые, Дерево, МетодРегистрацииОбъектовМетаданных);
	
	ЗначениеВРеквизитФормы(Дерево, "НачальноеЗаполнениеОбъекты");
		
КонецПроцедуры // ОбновитьФлагиРегистрируемыхОбъектов

&НаКлиенте
Процедура УстановитьПоРегистрируемым(Команда)
	
	ОбновитьФлагиУстановитьПоРегистрируемым();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипБДОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Функция УровеньСтрокиДерева(СтрокаДерева)
	
   Родитель = СтрокаДерева.ПолучитьРодителя();
   Возврат ?(Родитель = Неопределено, 0, 1 + УровеньСтрокиДерева(Родитель));
   
КонецФункции

&НаКлиенте
Процедура ТипИБПриИзменении(Элемент)
	
	ОбновитьДоступностьИВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКВнешнейИБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораКаталогЭкспорта								= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталогЭкспорта.МножественныйВыбор			= Ложь;
	ДиалогВыбораКаталогЭкспорта.Заголовок					= "Каталога с внешней ИБ";
	ДиалогВыбораКаталогЭкспорта.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораКаталогЭкспорта.Каталог						= ИмяВнешнейИБ;
	
	Если внЖурналРегистрацииПовтИсп.ИспользуетсяРежимМодальности() Тогда
		Выполнить(
			"Если Не ДиалогВыбораКаталогЭкспорта.Выбрать() Тогда
			|	Возврат;
			|КонецЕсли;
			|ПутьКВнешнейИБ										= ДиалогВыбораКаталогЭкспорта.Каталог;"
		);
	Иначе
		Попытка
			Выполнить("ДиалогВыбораКаталогЭкспорта.Показать(Новый ОписаниеОповещения(""ПутьКВнешнейИБНачалоВыбораЗавершение"", ЭтотОбъект, Новый Структура(""ДиалогВыбораКаталогЭкспорта"", ДиалогВыбораКаталогЭкспорта)))");
		Исключение
			внЖурналРегистрацииКлиент.СообщитьПользователю("Не могу выбрать каталог!")
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКВнешнейИБНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораКаталогЭкспорта = ДополнительныеПараметры.ДиалогВыбораКаталогЭкспорта;
	
	Если Не (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКВнешнейИБ											= ДиалогВыбораКаталогЭкспорта.Каталог;

КонецПроцедуры

&НаСервере
Функция ЗаполниьСписокВыбораУзловРИБ()
	
	Элементы.ИдентификаторУзлаРИБ.СписокВыбора.Очистить();
	Возврат внЖурналРегистрации.СписокУзловРИБ();
		
КонецФункции

&НаКлиенте
Процедура ИдентификаторУзлаРИБНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить(); 
	СЗ = ЗаполниьСписокВыбораУзловРИБ();
	Для Каждого Эл Из СЗ Цикл
		Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереносВоВнешнююИБ(Команда)
	
	ПереносКэшаВоВнешнююИБ();
	ОбновитьСостояниеЛокальногоКэша();
	внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Перенос успешно выполнен!");
	Оповестить("внОбновитьИсторию", , ЭтаФорма);
	ОбновитьДоступностьИВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЛокальногоКэша()
	
	Структура = внЖурналРегистрации.СостояниеКэша();
	СостояниеКоличествоСобытийВКэше = Структура.КоличествоСобытий;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеИзВнешнейИБ(Разделы = Неопределено)
	
	Структура = внЖурналРегистрации.СостояниеИзВнешнейИБ(Разделы);
	
	Если (Разделы = Неопределено ИЛИ Разделы.Найти("Количество") <> Неопределено) И Структура <> Ложь Тогда
		СостояниеКоличествоСобытийВнешняяИБ = Структура.Количество.ВсегоСобытий;
		СостояниеСжатоСобытий				= Структура.Количество.СжатоСобытий;
		СостояниеСжатоЕстьИзменения			= Структура.Количество.СобытийСжатоЕстьИзменения;
		СостояниеСжатоНетИзменений			= Структура.Количество.СобытийСжатоНетИзменений;
		СостояниеНеСжато					= Структура.Количество.НеСжатоСобытий;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСведенияЛокальногоКэша(Команда)
	
	ОбновитьСостояниеЛокальногоКэша();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСведенияИзВнешнейИБ(Команда)
	
	ОбновитьСостояниеИзВнешнейИБ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбменаРИБПриИзменении(Элемент)
	
	ОбновитьДоступностьИВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуВоВнешнейБазеНаСервере()
	
	внЖурналРегистрацииСервер.ОбработкаВнешнегоЖурналаРегистрации();
	ОбновитьСостояниеИзВнешнейИБ();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуВоВнешнейБазе(Команда)
	ВыполнитьОбработкуВоВнешнейБазеНаСервере();
	Оповестить("внОбновитьИсторию", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагНеФиксировать(Команда)
	
	УстановитьФлагиВКолонкеПользователей("ФлагНеФиксировать", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагНеФиксировать(Команда)
	
	УстановитьФлагиВКолонкеПользователей("ФлагНеФиксировать", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускХранителя(Команда)
	
	внЖурналРегистрацииКлиент.ВыполнитьЗапускХранителя(ВерсияПлатформыХранителя, ТипИБ, СерверВнешнейИБ, ИмяВнешнейИБ, ПутьКВнешнейИБ, ПользовательВнешнейИБ, ПарольВнешнейИБ);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлагРеквизитаХранилищеЗначения(СтрокаОбъекта)
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ХранилищеЗначения"));
	ХЗ = Новый ОписаниеТипов(Массив);
	
	Для Каждого Стр Из СтрокаОбъекта Цикл
		          
		Если Стр.Использование = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Если есть флажок, дальше рекурсия
		Если Стр.ТипЭлемента = ХЗ Тогда
			
			Стр.Использование = 0;
			ПометитьВложенныеЭлементы(Стр);
			ПометитьЭлементыРодителей(Стр.ПолучитьРодителя());
			
		КонецЕсли;
		
		СнятьФлагРеквизитаХранилищеЗначения(Стр.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтключитьРегистрациюХранилищеЗначения(Команда)
	
	СнятьФлагРеквизитаХранилищеЗначения(РегистрируемыеОбъекты.ПолучитьЭлементы());
	
КонецПроцедуры
