////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ПРИ ПРОВЕДЕНИИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

// Проверяет, что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//  при несовпадении устанавливается флаг отказа в проведении.
//
// Параметры:
//  Организация           - ссылка на организацию, выбранную в документе,
//  ДоговорКонтрагента - ссылка на договор, выбранный в документе,
//  ДоговорОрганизация    - ссылка на Организацию, выбранную в договоре,
//  Отказ                 - флаг отказа в проведении.
//  Заголовок             - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, ДоговорОрганизация, Отказ, Заголовок) Экспорт
	
	// Если не заполнен договор или организация, то не ругаемся.
	Если ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И Организация <> ДоговорОрганизация Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов()

// Для документов, у которых договор контрагента находится в табличной части
// что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части,
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
	Отказ, Заголовок) Экспорт
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		
		// Если не заполнен договор или организация, то не ругаемся.
		Если ЗначениеЗаполнено(ДокументОбъект.Организация) 
			И ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
			И ДокументОбъект.Организация <> СтрокаТаблицы.ДоговорОрганизация Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке 
			+ " выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти()

// Для документов, у которых договор контрагента и сделка находятся в табличной части
// (например, "Авансовый отчет", "Корректировка долга") проверяет заполнена ли сделка, если
// в договоре взаиморасчетов установлено ведение взаиморасчетов по заказам.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСделкуВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
	Отказ, Заголовок) Экспорт
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		
		//Если (СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		//	ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) 
		//	И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
		//	
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "выбран договор, по которому взаиморасчеты ведутся по заказам. " +
		//	"Необходимо заполнить заказ поставщику!", Отказ, Заголовок);
		//	
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьСделкуВТабличнойЧасти()

// Проверяет возможность проведения в БУ и НУ в зависимости от договора взаиморасчетов.
//
// Параметры:
//  ДоговорКонтрагента             - ссылка на справочник договора, определяет договор с контрагентом;
//  ВалютаДокумента                - ссылка на справочник валют, определяет валюту документа;
//  ОтражатьВБухгалтерскомУчете    - булево, признак отражения документа в бух. учете;
//  ОтражатьВНалоговомУчете        - булево, признак отражения документа в налоговом учете;
//  ВалютаРегламентированногоУчета - ссылка на справочник валют, определяет валюту ведения регл. учета;
//  ЭтоДокументОплаты              - булево, определяет является ли это документом оплаты,
//                                   необязательный параметр, по умолчанию - Ложь;
//  Отказ                          - булево, признак отказа в проведении документаРасчетыВУсловныхЕдиницах;
//  Заголовок                      - строка, заголовок сообщения в отказе проведения;
//  ДополнениеКСообщению           - строка, дополнение к сообщению в отказе проведении, 
//                                   необязательный, по умолчанию - пустая строка;
//  ВалютаВзаиморасчетов           - ссылка на справочник валют, определяет валюту взаиморасчетов по договору,
//                                   если не передан, берется из договора;
//  РасчетыВУсловныхЕдиницах - булево, признак ведения взаиморасчетов в условных единицах,
//                                   если не передан, берется из договора.
//
// Возвращаемое значение:
//  Истина, если документ можно проводить по бух. или (и) налоговому учету, инчае - Ложь.
//
Функция ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,ОтражатьВБухгалтерскомУчете,
	ОтражатьВНалоговомУчете, ВалютаРегламентированногоУчета, ЭтоДокументОплаты = Ложь,
	Отказ = Ложь, Заголовок, ДополнениеКСообщению = "",
	ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов <> ВалютаДокумента 
		И ВалютаРегламентированногоУчета <> ВалютаДокумента Тогда
		
		// Документ выписан в валюте отличной от валюты регламентированного учета и валюты расчетов. 
		// Возможно только в документах оплаты.
		// Не отражается в б.у.
		Если ОтражатьВБухгалтерскомУчете 
			Или ОтражатьВНалоговомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению + " Валюта документа ("+СокрЛП(ВалютаДокумента)
			+ ") отличается от валюты регламентированного учета (" + СокрЛП(ВалютаРегламентированногоУчета)
			+ ") и валюты расчетов по договору """ + СокрЛП(ДоговорКонтрагента) 
			+ """ (" + СокрЛП(ВалютаВзаиморасчетов) + ").
			|Документ не может быть проведен по бухгалтерскому или налоговому учету.",Отказ,Заголовок);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		
		Если (Не ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета) 
			И Не(РасчетыВУсловныхЕдиницах) Тогда
			
			// Документ выписан в валюте регламентированного учета. 
			// Валюта расчетов иная. Договор не в у.е. 
			// Не отражается в б.у.
			Если ОтражатьВБухгалтерскомУчете 
				Или ОтражатьВНалоговомУчете Тогда 
				ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению + " Валюта расчетов по договору """ + СокрЛП(ДоговорКонтрагента) 
				+ """ (" + СокрЛП(ВалютаВзаиморасчетов) + ") отличается от валюты регламентированного учета ("
				+ СокрЛП(ВалютаРегламентированногоУчета) + ").
				|В этом случае документы могут быть выписаны в валюте регламентированного учета только при расчетах в условных единицах.
				|Документ не может быть проведен по бухгалтерскому или налоговому учету.",Отказ,Заголовок);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Валюта документа равна валюте взаиморасчетов (отличной от валюты  рег. учета).
		Если РасчетыВУсловныхЕдиницах
			И ЭтоДокументОплаты Тогда 
			
			// При расчетах в у.е. документы оплаты могут выписываться только в валюте рег.учета.
			// Не отражается в б.у.
			Если ОтражатьВБухгалтерскомУчете 
				Или ОтражатьВНалоговомУчете Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению + " Документ оплаты при расчете по договору (" + СокрЛП(ДоговорКонтрагента) 
				+ ")в условных единицах может быть выписан только в валюте регламентированного учета ("
				+ СокрЛП(ВалютаРегламентированногоУчета) + ").
				|Документ не может быть проведен по бухгалтерскому или налоговому учету.",Отказ,Заголовок);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверкаВозможностиПроведенияВ_БУ_НУ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ 

// Вычисляет текущий долг контрагента по заданному договору и сделке в валюте взаиморасчетов 
// по данному договору
//
// Параметры: 
//  Договор - ссылка на элемент справочника, определяет договор контрагента, по которому надо получить долг, 
//  Сделка  - ссылка на документ, определяет сделку (заказ, накладную, платежный документ) по которому надо получить долг.
//  СсылкаДокумент           - ссылка на документ, для которого рассчитывается долг.
//
// Возвращаемое значение:
//  Число -  текущий размер долга, если удалось вычислить текущий долг, иначе - 0.
//
Функция ТекущийДолг(Договор, Сделка = Неопределено, СсылкаДокумент) Экспорт
	
	ТекущийДолг = 0;
	СтруктураОтбора = Новый Структура(); // для отбора остатков взаиморасчетов
	СтруктураОтбора.Вставить("ДоговорКонтрагента", Договор);
	//СтруктураОтбора.Вставить("Контрагент", Договор.Владелец);
	
	Если ЗначениеЗаполнено(Договор) Тогда
		//Если Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТекущийДолг = РегистрыНакопления.Взаиморасчеты.Остатки(,
		СтруктураОтбора,"ДоговорКонтрагента","СуммаУпр").Итог("СуммаУпр");
		
		//Иначе // Взаиморасчеты ведутся по сделкам
		//	Если ЗначениеЗаполнено(Сделка) Тогда
		//		СтруктураОтбора.Вставить("Сделка", Сделка);
		//		ТекущийДолг = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
		//		СтруктураОтбора,"ДоговорКонтрагента,Сделка","СуммаВзаиморасчетов").Итог("СуммаВзаиморасчетов");
		//	КонецЕсли; 
		//КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ТекущийДолг;
	
КонецФункции // ТекущийДолг()

// Преобразует значение системного перечисления ВидСравнения в текст для запроса
//
// Параметры
//  СтруктураОтбора		–	<Структура>
//							Структура параметров отбора. Если есть элемент структуры с ключом "ВидСравненияОтбора",
//							значение этого элемента преобразуется в текст для запроса.
//							Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <Строка> – текст сравнения для запроса
//
Функция ПолучитьВидСравненияДляЗапроса(СтруктураОтбора)
	
	Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
		Возврат "=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат "=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат "<>";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		Возврат "В";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		Возврат "НЕ В";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат ">";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат ">=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат "<";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат "<=";
	Иначе // другие варианты 
		Возврат "=";
	КонецЕсли;
	
КонецФункции // ПолучитьВидСравненияДляЗапроса()

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			ВидСравненияЗапроса = ПолучитьВидСравненияДляЗапроса(СтруктураОтбора);
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ДоговорКонтрагента.Владелец<>ВладелецДоговора ИЛИ ДоговорКонтрагента.Организация<>ОрганизацияДоговора) ИЛИ (не ЗначениеЗаполнено(ДоговорКонтрагента)) Тогда	
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

// Функция возвращает список значений видов договоров взаиморасчетов для поставщика.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокВидовДоговоровВзаиморасчетовДляПоставщика() Экспорт
	
	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат СписокПеречисления;
	
КонецФункции // ПолучитьСписокВидовДоговоровВзаиморасчетовДляПоставщика()

// Функция возвращает список значений видов договоров взяиморасчетов для покупателя.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокВидовДоговоровВзаиморасчетовДляПокупателя() Экспорт
	
	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.НаЭкспорт);
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат СписокПеречисления;
	
КонецФункции // ПолучитьСписокВидовДоговоровВзаиморасчетовДляПокупателя()

// Функция возвращает список значений видов договоров взаиморасчетов когда
// контрагент не является ни поставщиком не покупателем.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее() Экспорт
	
	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат СписокПеречисления;
	
КонецФункции // ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее()

// Определяет сделку, по которой надо провести документ
//
// Параметры: 
//  ДокументОбъект          - объект проводимого документа, 
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  ИмяРеквизитаСделка      - необязательный параметр, имя реквизита "сделка".
//  Расчеты                 - флаг, показывающий, что сделка определяется для записи в регистр расчетов,
// при этом сделка прописывается, даже, если взаиморасчеты ведутся по договору в целом
//  ВозвратнаяТара          - флаг, показывающий, что определяется сделка для формирования движений по 
// возвратной таре регистров "Товары полученные" и "Товары переданные". В этом случае при ведении 
// взаиморасчетов по расчетным документам сделка не прописывается.
//
// Возвращаемое значение:
//  Ссылка на документ или Неопределно, т.е. значение, которое надо записать в измерение Сделка регистра.
//
Функция ОпределитьСделку(ДокументОбъект, ВыборкаПоШапкеДокумента, ИмяРеквизитаСделка = "Сделка", Расчеты = Ложь, ВозвратнаяТара = Ложь) Экспорт
	
	// Возвращаемое значение.
	Сделка = Неопределено;
	
	Если ВыборкаПоШапкеДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ ВыборкаПоШапкеДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам 
		ИЛИ Расчеты Тогда
		
		Сделка = ДокументОбъект[ИмяРеквизитаСделка];
		
	КонецЕсли;
	
	Возврат Сделка;
	
КонецФункции // ОпределитьСделку()

//неактуально? Дополняет дерево полей запроса по шапке реквизитами договора, нужными для контроля остатков взаиморасчетов.
//
// Параметры
//  ДеревоПолейЗапросаПоШапке - дерево, дополняемое дерево полей запроса,
//  РежимПроведения           - режим проведения документа.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения) Экспорт
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                       , "ВедениеВзаиморасчетов");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                        , "ВалютаВзаиморасчетов");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ПроцентПредоплаты" , "ПроцентПредоплаты");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ДопустимаяСуммаЗадолженности" , "ДопустимаяСуммаЗадолженности");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ДопустимоеЧислоДнейЗадолженности" , "ДопустимоеЧислоДнейЗадолженности");
	КонецЕсли;
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБСЛУЖИВАНИЯ ВЕДЕНИЯ ВЗАИМОРАСЧЕТОВ ПО ДОКУМЕНТАМ
// РАСЧЕТОВ С КОНТРАГЕНТАМИ

// Функция возвращает возможность проведения документа без контроля взаиморасчетов
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно проводить, иначе Ложь.
//
Функция ЕстьРазрешениеПроводитьБезКонтроляВзаиморасчетов() Экспорт
	
	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПроведениеБезКонтроляВзаиморасчетов, Истина);
	
	Возврат НЕ СписокФильтров.НайтиПоЗначению(Истина) = Неопределено;
	
КонецФункции // ЕстьРазрешениеПроводитьБезКонтроляВзаиморасчетов()

Функция СформироватьТаблицуСделок(ДокументОбъект, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("СуммаВключаетНДС") Тогда
		СуммаВключаетНДС = СтруктураПараметров.СуммаВключаетНДС;
	ИначеЕсли ДокументОбъект.Метаданные().Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	УчетАгентскогоНДС = СтруктураПараметров.Свойство("УчетАгентскогоНДС") И СтруктураПараметров.УчетАгентскогоНДС;
	
	УчитыватьНДС = (СуммаВключаетНДС И УчетАгентскогоНДС) ИЛИ (НЕ СуммаВключаетНДС И НЕ УчетАгентскогоНДС);
	Если УчитыватьНДС Тогда
		КолонкиСуммирования = "Сумма, СуммаНДС";
	Иначе
		КолонкиСуммирования = "Сумма";
	КонецЕсли;
	
	МогутБытьЗаказыВТабличныхЧастях = СтруктураПараметров.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам;
	Если МогутБытьЗаказыВТабличныхЧастях 
		И СтруктураПараметров.Свойство("ЕстьЗаказыВТабличныхЧастях") И СтруктураПараметров.ЕстьЗаказыВТабличныхЧастях = Истина Тогда
		ЕстьЗаказыВТабличныхЧастях = Истина;
		ИмяКолонкиСделка = СтруктураПараметров.ИмяЗаказаВТабличныхЧастях;
	Иначе
		ЕстьЗаказыВТабличныхЧастях = Ложь;
		ИмяКолонкиСделка = "Сделка";
	КонецЕсли;
	
	ТаблицаСделок = Новый ТаблицаЗначений;
	ТаблицаСделок.Колонки.Добавить(ИмяКолонкиСделка);
	ТаблицаСделок.Колонки.Добавить("Сумма");
	Если УчитыватьНДС Тогда
		ТаблицаСделок.Колонки.Добавить("СуммаНДС");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ИмяСделкиВШапкеДокумента") Тогда
		ИмяСделкиВШапкеДокумента = "Сделка";
	Иначе // Например, для документа ПолучениеУслугПоПереработке это "Заказ"
		ИмяСделкиВШапкеДокумента = СтруктураПараметров.ИмяСделкиВШапкеДокумента;
	КонецЕсли;
	
	Если ЕстьЗаказыВТабличныхЧастях Тогда
		
		Для каждого ТабЧасть Из СтруктураПараметров.СтруктураТабличныхЧастей Цикл
			
			ТекТабЧасть = ДокументОбъект[ТабЧасть.Ключ].Выгрузить();
			ТекТабЧасть.Свернуть(ИмяКолонкиСделка, КолонкиСуммирования);
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТекТабЧасть, ТаблицаСделок);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого ТабЧасть Из СтруктураПараметров.СтруктураТабличныхЧастей Цикл
			
			СтрокаЗаказа = ТаблицаСделок.Добавить();
			СтрокаЗаказа[ИмяКолонкиСделка] = ДокументОбъект[ИмяСделкиВШапкеДокумента];
			СтрокаЗаказа.Сумма = ДокументОбъект[ТабЧасть.Ключ].Итог("Сумма");
			Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") 
				И ДокументОбъект.УдержатьКомиссионноеВознаграждение Тогда 
				СтрокаЗаказа.Сумма = СтрокаЗаказа.Сумма - ДокументОбъект[ТабЧасть.Ключ].Итог("СуммаВознаграждения");
			ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
				И ДокументОбъект.УдержатьКомиссионноеВознаграждение Тогда 
				СтрокаЗаказа.Сумма = СтрокаЗаказа.Сумма - ДокументОбъект[ТабЧасть.Ключ].Итог("СуммаВознаграждения");
			КонецЕсли;
			Если УчитыватьНДС Тогда
				СтрокаЗаказа.СуммаНДС = ДокументОбъект[ТабЧасть.Ключ].Итог("СуммаНДС");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// В шапке документа "Поступление доп. расходов" может быть указана дополнительная сумма,
	// которую надо провести по взаиморасчетам
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") И ДокументОбъект.Сумма <> 0 Тогда 
		СтрокаЗаказа = ТаблицаСделок.Добавить();
		СтрокаЗаказа[ИмяКолонкиСделка] = ДокументОбъект[ИмяСделкиВШапкеДокумента];
		СтрокаЗаказа.Сумма = ДокументОбъект.Сумма;
		Если УчитыватьНДС Тогда
			СтрокаЗаказа.СуммаНДС = ДокументОбъект.СуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаСделок.Свернуть(ИмяКолонкиСделка, КолонкиСуммирования);
	
	ТаблицаСделок.Колонки[ИмяКолонкиСделка].Имя = "Сделка";
	ТаблицаСделок.Колонки.Добавить("СуммаВзаиморасчетов");
	
	Для каждого СтрокаТаблицы из ТаблицаСделок Цикл
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС И УчетАгентскогоНДС Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
			Иначе //(НЕ СуммаВключаетНДС) И (НЕ УчетАгентскогоНДС)
				СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
		СтруктураПараметров.ВалютаДокумента, СтруктураПараметров.ВалютаВзаиморасчетов,
		СтруктураПараметров.КурсДокумента, СтруктураПараметров.КурсВзаиморасчетов, 
		СтруктураПараметров.КратностьДокумента, СтруктураПараметров.КратностьВзаиморасчетов);
	КонецЦикла;
	
	Возврат ТаблицаСделок;
	
КонецФункции

// Процедура выполняет заполение ТЧ "Документы расчетов с контрагентом"
// Параметры:
//	ДокументОбъект
//	СтруктураПараметров - структура, включающая следующие параметры
//			- СтруктураТабличныхЧастей - структура, ключами которой являются имена табличных частей;
//										в качестве значений структуры могут передаваться 
//										таблицы значений, содержащие данные самих табличных частей
//							
//			- СуммаВключаетНДС         - признак включения НДС в сумму
//			- ВалютаВзаиморасчетов     - валюта взаиморасчетов (ссылка на элемент справочника "Валюты")
//			- СуммаВзаиморасчетов
//			- ВалютаДокумента
//			- КурсВзаиморасчетов
//			- КратностьВзаиморасчетов
//			- ДоговорКонтрагента
//			- ОтражатьВРегламентированномУчете - признак отражения документа в регламентированном учете
//			- РасчетыВУсловныхЕдиницах         - признак ведения взаиморасчетов в условных единицах
//			- ВедениеВзаиморасчетов
//			- Дата - дата документа
//	Направление - направление взаиморасчетов: "поступление" или "реализация"
//	УчетЗаказов - учет заказов при ведении взаиморасчетов по договору в целом:
//					- "только по заказу"      - если указан заказ, то заполнение происходит только документами, связанными с этим заказом
//                  - "по заказу и свободные" - заполняется сначала документами по заказу, а затем документами, в которых не был указан заказ
//					- "приоритет заказа"      - заполняется сначала документами по заказу, затем документами в которых заказ не был указан, затем документами по другим заказам
//					- "не учитывать"          - не учитываются заказы
//	УчетСуммыДокумента - учитывать сумму документа при заполнении или заполнять всеми остатками, предоставив пользователю право выбора
//
Процедура ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ДокументОбъект, СтруктураПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента) Тогда
		ДокументОбъект.ДокументыРасчетовСКонтрагентом.Очистить();
		Возврат;
	КонецЕсли;
	
	СделкаВШапкеДокумента = НЕ СтруктураПараметров.Свойство("ТаблицаСделок");
	
	Если СделкаВШапкеДокумента Тогда
		
		ТаблицаСделок = Новый ТаблицаЗначений;
		ТаблицаСделок.Колонки.Добавить("Сделка");
		ТаблицаСделок.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число"));
		
		СтрокаСделки = ТаблицаСделок.Добавить();
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Сделка) 
			ИЛИ СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаСделки.Сделка = Неопределено;
		Иначе
			СтрокаСделки.Сделка = СтруктураПараметров.Сделка;
		КонецЕсли;
		СтрокаСделки.СуммаВзаиморасчетов = СтруктураПараметров.СуммаВзаиморасчетов;
		
	Иначе
		
		ТаблицаСделок = СтруктураПараметров.ТаблицаСделок;
		
		Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТаблицаСделок.ЗаполнитьЗначения(Неопределено, "Сделка");
			ТаблицаСделок.Свернуть("Сделка", "СуммаВзаиморасчетов");
		КонецЕсли;
		
	КонецЕсли;
	
	Направление        = СтруктураПараметров.Направление;
	ВидЗаполнения      = СтруктураПараметров.ВидЗаполнения;
	УчетСуммыДокумента = СтруктураПараметров.УчетСуммыДокумента;
	
	// Выбираем из оперативных итогов все остатки по документам с датой оплаты меньше даты поступления (реализации)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументамОстатки.Сделка КАК Сделка,
	|	ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &Множитель КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток * &Множитель КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА &ПустаяДата
	|		КОГДА (НЕ УчетнаяПолитика.ОпределениеВремениПроведенияПлатежногоДокумента = &ПоКонцуДняРегистрацииДокумента)
	|				И НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.ДатаОплаты, ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата), ДЕНЬ) = НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ)
	|			ТОГДА ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.ДатаОплаты, ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата), ДЕНЬ)
	|	КОНЕЦ КАК ДатаОплаты,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыПоДокументамОстатки.Сделка В (&СделкиДокумента)
	|			ТОГДА 1
	|		КОГДА ВзаиморасчетыПоДокументамОстатки.Сделка = НЕОПРЕДЕЛЕНО
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	|		,
	|		ДоговорКонтрагента = &ДоговорКонтрагента
	|		    И ВидРасчетовСКонтрагентом = &ВидРасчетовСКонтрагентом
	|		    И УпрУчет = &УпрУчет) КАК ВзаиморасчетыПоДокументамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(УчетнаяПолитика.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика) КАК АктуальнаяУчетнаяПолитика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|			ПО АктуальнаяУчетнаяПолитика.Период = УчетнаяПолитика.Период
	|		ПО ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата >= АктуальнаяУчетнаяПолитика.Период
	|ГДЕ
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &Множитель > 0
	|	И ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата
	|			КОГДА (НЕ УчетнаяПолитика.ОпределениеВремениПроведенияПлатежногоДокумента = &ПоКонцуДняРегистрацииДокумента)
	|					И НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.ДатаОплаты, ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата), ДЕНЬ) = НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ)
	|				ТОГДА ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата
	|			ИНАЧЕ КОНЕЦПЕРИОДА(ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.ДатаОплаты, ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата), ДЕНЬ)
	|		КОНЕЦ < &Дата
	|	И ВЫБОР
	|			КОГДА ВзаиморасчетыПоДокументамОстатки.Сделка В (&СделкиДокумента)
	|				ТОГДА 1
	|			КОГДА ВзаиморасчетыПоДокументамОстатки.Сделка = НЕОПРЕДЕЛЕНО
	|				ТОГДА 2
	|			ИНАЧЕ 3
	|		КОНЕЦ <= &МаксПриоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Сделка,
	|	ДокументРасчетовСКонтрагентом
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("Дата", КонецДня(СтруктураПараметров.Дата));
	Иначе
		Запрос.УстановитьПараметр("Дата", СтруктураПараметров.Дата);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураПараметров.ДоговорКонтрагента);
	Если СтруктураПараметров.Свойство("ОтражатьВУправленческомУчете") Тогда
		Запрос.УстановитьПараметр("УпрУчет", СтруктураПараметров.ОтражатьВУправленческомУчете);
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", ДокументОбъект.Метаданные()) Тогда
		Запрос.УстановитьПараметр("УпрУчет", ДокументОбъект.ОтражатьВУправленческомУчете);
	Иначе
		Запрос.УстановитьПараметр("УпрУчет", Истина);
	КонецЕсли; 
	СделкиДокумента = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСделок.ВыгрузитьКолонку("Сделка"));
	Запрос.УстановитьПараметр("СделкиДокумента", СделкиДокумента);
	ВидРасчетовСКонтрагентом = ?(Направление = "Поступление", Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению,
	Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
	Запрос.УстановитьПараметр("ВидРасчетовСКонтрагентом", ВидРасчетовСКонтрагентом);
	
	Если Направление = "Поступление" Тогда
		МножительНаправления = 1;
	Иначе
		МножительНаправления = -1;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ЭтоВозврат") Тогда
		МножительВозврата = ?(СтруктураПараметров.ЭтоВозврат = Истина, -1, 1);
		Запрос.УстановитьПараметр("ЭтоВозврат", ?(ТипЗнч(СтруктураПараметров.ЭтоВозврат) = Тип("Булево"), СтруктураПараметров.ЭтоВозврат, Ложь));
	Иначе
		МножительВозврата = 1;
		Запрос.УстановитьПараметр("ЭтоВозврат", Ложь);
	КонецЕсли;
	Множитель = МножительНаправления * МножительВозврата;
	Запрос.УстановитьПараметр("Множитель", Множитель);
	
	Если ВидЗаполнения = "только по заказам" Тогда
		МаксПриоритет = 1;
	ИначеЕсли ВидЗаполнения = "по заказам и свободные" Тогда
		МаксПриоритет = 2;
	Иначе
		МаксПриоритет = 3;
	КонецЕсли;
	Запрос.УстановитьПараметр("МаксПриоритет", МаксПриоритет);
	Запрос.УстановитьПараметр("ПоКонцуДняРегистрацииДокумента", Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоКонцуДняРегистрацииДокумента);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Результат = Запрос.Выполнить();
	ТаблицаОстатков = Результат.Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Приоритет, Сделка");
	
	ТаблицаПредоплат = ДокументОбъект.ДокументыРасчетовСКонтрагентом.ВыгрузитьКолонки();
	
	Если МаксПриоритет = 3 И НЕ УчетСуммыДокумента Тогда
		// Заполняем всеми доступными остатками. Выбрать нужные должен будет пользователь,
		// удалив лишние строки или откорректировав суммы
		Для каждого СтрокаОстатка Из ТаблицаОстатков Цикл
			НоваяСтрокаПредоплаты = ТаблицаПредоплат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПредоплаты, СтрокаОстатка);
		КонецЦикла;
		
	Иначе
		// Заполняем доступными остатками на сумму, не превышающую сумму документа
		// в соответствии с заданными приоритетами
		Для Приоритет = 1 По МаксПриоритет Цикл
			
			Для каждого СтрокаСделки Из ТаблицаСделок Цикл
				
				Если СтрокаСделки.СуммаВзаиморасчетов = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Приоритет = 1 Тогда
					СтруктураОтбораОстатков = Новый Структура("Приоритет, Сделка", 1, СтрокаСделки.Сделка);
					СтрокиСОтбором = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораОстатков);
				ИначеЕсли Приоритет = 2 Тогда
					СтруктураОтбораОстатков = Новый Структура("Приоритет", 2);
					СтрокиСОтбором = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораОстатков);
				Иначе
					СтрокиСОтбором = ТаблицаОстатков;
				КонецЕсли;
				
				Для каждого СтрокаОстатка Из СтрокиСОтбором Цикл
					
					Если СтрокаСделки.СуммаВзаиморасчетов = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.СуммаВзаиморасчетов = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрокаПредоплаты = ТаблицаПредоплат.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПредоплаты, СтрокаОстатка);
					НоваяСтрокаПредоплаты.СуммаВзаиморасчетов = Мин(СтрокаСделки.СуммаВзаиморасчетов, СтрокаОстатка.СуммаВзаиморасчетов);
					НоваяСтрокаПредоплаты.СуммаРегл           = СтрокаОстатка.СуммаРегл * НоваяСтрокаПредоплаты.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов;
					
					СтрокаСделки.СуммаВзаиморасчетов  = СтрокаСделки.СуммаВзаиморасчетов - НоваяСтрокаПредоплаты.СуммаВзаиморасчетов;
					СтрокаОстатка.СуммаВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов - НоваяСтрокаПредоплаты.СуммаВзаиморасчетов;
					СтрокаОстатка.СуммаРегл           = СтрокаОстатка.СуммаРегл - НоваяСтрокаПредоплаты.СуммаРегл;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.ДокументыРасчетовСКонтрагентом.Загрузить(ТаблицаПредоплат);
	
КонецПроцедуры // ЗаполнитьДокументыРасчетовСКонтрагентом()

Процедура ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ДокументОбъект, СтруктураПараметров) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если НЕ СтруктураПараметров.Свойство("СтруктураТабличныхЧастей") Тогда
		СтруктураТабЧастей = Новый Структура;
		Для каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			Если ТабЧасть.Имя <> "ВозвратнаяТара" И ТабЧасть.Имя <> "ДокументыРасчетовСКонтрагентом" Тогда
				СтруктураТабЧастей.Вставить(ТабЧасть.Имя);
			КонецЕсли;
		КонецЦикла;
		СтруктураПараметров.Вставить("СтруктураТабличныхЧастей", СтруктураТабЧастей);
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ЕстьЗаказыВТабличныхЧастях") И НЕ СтруктураПараметров.Свойство("ИмяЗаказаВТабличныхЧастях") Тогда
		СтруктураПараметров.ЕстьЗаказыВТабличныхЧастях = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("Направление") Тогда
		СтруктураПараметров.Вставить("Направление", "Поступление");
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ВидЗаполнения") Тогда
		СтруктураПараметров.Вставить("ВидЗаполнения", "только по заказам");
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("УчетСуммыДокумента") Тогда
		СтруктураПараметров.Вставить("УчетСуммыДокумента", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		СтруктураПараметров.Вставить("Дата", ДокументОбъект.Дата);
	Иначе
		СтруктураПараметров.Вставить("Дата", ОбщегоНазначения.ПолучитьРабочуюДату());	
	КонецЕсли;
	СтруктураПараметров.Вставить("ОтражатьВРегламентированномУчете", ДокументОбъект.Организация.ОтражатьВРегламентированномУчете);
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		СтруктураПараметров.Вставить("ОтражатьВУправленческомУчете", ДокументОбъект.ОтражатьВУправленческомУчете);
	Иначе
		СтруктураПараметров.Вставить("ОтражатьВУправленческомУчете", Истина);
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		СтруктураПараметров.Вставить("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС);
	Иначе
		СтруктураПараметров.Вставить("СуммаВключаетНДС", Истина);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов",    ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсВзаиморасчетов",      ДокументОбъект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("КратностьВзаиморасчетов", ДокументОбъект.КратностьВзаиморасчетов);
	
	СтруктураПараметров.Вставить("ВалютаДокумента", ДокументОбъект.ВалютаДокумента);
	КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ДокументОбъект.мВалютаРегламентированногоУчета);
	КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ДокументОбъект.мВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("КурсДокумента",      КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента", КратностьДокумента);
	
	//СтруктураПараметров.Вставить("ВедениеВзаиморасчетов", ДокументОбъект.ДоговорКонтрагента.ВедениеВзаиморасчетов);
	//СтруктураПараметров.Вставить("РасчетыВУсловныхЕдиницах", ДокументОбъект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах);
	//СтруктураПараметров.Вставить("УчетАгентскогоНДС", ДокументОбъект.ДоговорКонтрагента.УчетАгентскогоНДС);
	
	ТаблицаСделок = СформироватьТаблицуСделок(ДокументОбъект, СтруктураПараметров);
	СтруктураПараметров.Вставить("ТаблицаСделок", ТаблицаСделок);
	
КонецПроцедуры

// Процедура формирует структуру с итоговыми данными взаиморасчетов по документу
Функция ПолучитьСтруктуруВзаиморасчетовПоДокументу(ДокументОбъект, СуммаВзаиморасчетовПоДокументу) Экспорт
	
	СтруктураВзаиморасчетов = Новый Структура;
	
	ТаблицаДокументов = ДокументОбъект.ДокументыРасчетовСКонтрагентом.Выгрузить();
	СтруктураВзаиморасчетов.Вставить("ПоДокументуВал", СуммаВзаиморасчетовПоДокументу);
	
	СтруктураВзаиморасчетов.Вставить("ПредоплатаВал", ТаблицаДокументов.Итог("СуммаВзаиморасчетов"));
	СтруктураВзаиморасчетов.Вставить("ПредоплатаРегл", ТаблицаДокументов.Итог("СуммаРегл"));
	
	ОстатокВал = СуммаВзаиморасчетовПоДокументу - СтруктураВзаиморасчетов.ПредоплатаВал;
	СтруктураВзаиморасчетов.Вставить("ОстатокВал", ОстатокВал);
	
	ОстатокРегл = ?(ДокументОбъект.КратностьВзаиморасчетов = 0, 0, ОстатокВал * ДокументОбъект.КурсВзаиморасчетов / ДокументОбъект.КратностьВзаиморасчетов);
	СтруктураВзаиморасчетов.Вставить("ОстатокРегл", ОстатокРегл);
	СтруктураВзаиморасчетов.Вставить("ПоДокументуРегл", ОстатокРегл + СтруктураВзаиморасчетов.ПредоплатаРегл);
	
	Возврат СтруктураВзаиморасчетов;
	
КонецФункции

// Процедура заполняет поля СуммаВзаиморасчетов и СуммаРегл
// в строке табличной части ДокументыРасчетовСКонтрагентом
// Параметры:
// СуммаВзаиморасчетовУказанаВСтроке - <Булево>. Если Истина - рассчитываем только сумму регл.учета
//                                     по указанной в строке сумме взаиморасчетов.
//                                     Если Ложь - рассчитываем обе суммы
//
Процедура РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ДанныеСтроки, СтруктураПараметров, РассчитыватьСуммуВзаиморасчетов = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	
	ОплатаПоНесколькимСделкам = Ложь;
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТекСделка = Неопределено;
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТекСделка = ДокументОбъект.Сделка;
	Иначе //.ПоЗаказам
		Если СтруктураПараметров.Свойство("ЕстьЗаказыВТабличныхЧастях") И СтруктураПараметров.ЕстьЗаказыВТабличныхЧастях = Истина Тогда
			ТекСделка = ДанныеСтроки.Сделка;
			ОплатаПоНесколькимСделкам = Истина;
		Иначе
			ТекСделка = ДокументОбъект.Сделка;
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("Сделка", ТекСделка);
	
	Запрос.УстановитьПараметр("ДокументРасчетовСКонтрагентом", ДанныеСтроки.ДокументРасчетовСКонтрагентом);
	Если СтруктураПараметров.Свойство("ЭтоВозврат") Тогда
		МножительВозврата = ?(СтруктураПараметров.ЭтоВозврат, -1, 1);
	Иначе
		МножительВозврата = 1;
	КонецЕсли;
	Если СтруктураПараметров.Направление = "Реализация" Тогда
		МножительНаправления = -1;
		ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	ИначеЕсли СтруктураПараметров.Направление = "Поступление" Тогда
		МножительНаправления = 1;
		ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	Иначе
		МножительНаправления= 1;
		ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	Множитель = МножительНаправления * МножительВозврата;
	Запрос.УстановитьПараметр("ВидРасчетовСКонтрагентом", ВидРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("УпрУчет", ДокументОбъект.ОтражатьВУправленческомУчете);
	Запрос.УстановитьПараметр("Множитель", Множитель);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток, 0) * &Множитель > 0
	|			ТОГДА ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &Множитель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток, 0) * &Множитель > 0
	|			ТОГДА ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток * &Множитель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	|		,
	|		ДоговорКонтрагента = &ДоговорКонтрагента
	|		    И Сделка = &Сделка
	|		    И ДокументРасчетовСКонтрагентом = &ДокументРасчетовСКонтрагентом
	|		    И ВидРасчетовСКонтрагентом = &ВидРасчетовСКонтрагентом
	|		    И УпрУчет = &УпрУчет) КАК ВзаиморасчетыПоДокументамОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если СтруктураПараметров.Свойство("КурсСтрокиДокументаРасчетов") И ТипЗнч(СтруктураПараметров.КурсСтрокиДокументаРасчетов) = Тип("Число") Тогда
		КурсСтрокиДокументаРасчетов = СтруктураПараметров.КурсСтрокиДокументаРасчетов;
	Иначе
		КурсСтрокиДокументаРасчетов = 0;
	КонецЕсли;
	КурсОстатка = ?(Выборка.СуммаВзаиморасчетов = 0, КурсСтрокиДокументаРасчетов, Выборка.СуммаРегл / Выборка.СуммаВзаиморасчетов);
	
	Если НЕ РассчитыватьСуммуВзаиморасчетов Тогда
		
		ДанныеСтроки.СуммаРегл = Окр(ДанныеСтроки.СуммаВзаиморасчетов * КурсОстатка, 2);
		
		Если НЕ ДокументОбъект.Проведен И Выборка.СуммаВзаиморасчетов < ДанныеСтроки.СуммаВзаиморасчетов Тогда
			ВалютаПредставление = Строка(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
			ТекстСообщения = "Указана сумма взаиморасчетов, превышающая непогашенный остаток по документу расчетов с контрагентом!
			| Остаток " + Выборка.СуммаВзаиморасчетов + " " + ВалютаПредставление + "; "
			+ " указана сумма " + ДанныеСтроки.СуммаВзаиморасчетов + " " + ВалютаПредставление + "; "
			+ " превышение " + (ДанныеСтроки.СуммаВзаиморасчетов - Выборка.СуммаВзаиморасчетов) + " " + ВалютаПредставление;
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		КонецЕсли;
		
	Иначе
		Если Выборка.СуммаВзаиморасчетов = 0 Тогда
			ДанныеСтроки.СуммаВзаиморасчетов = 0;
			ДанныеСтроки.СуммаРегл           = 0;
		Иначе
			
			ТаблицаСделокДокумента = СформироватьТаблицуСделок(ДокументОбъект, СтруктураПараметров);
			ТаблицаСделокДокумента.Индексы.Добавить("Сделка");
			Если НЕ ОплатаПоНесколькимСделкам Тогда
				Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
					ТаблицаСделокДокумента.ЗаполнитьЗначения(Неопределено, "Сделка");
				Иначе
					ТаблицаСделокДокумента.ЗаполнитьЗначения(ДокументОбъект.Сделка, "Сделка");
				КонецЕсли;
				ТаблицаСделокДокумента.Свернуть("Сделка", "СуммаВзаиморасчетов");
			КонецЕсли;
			
			СтрокаТекущейСделки = ТаблицаСделокДокумента.Найти(ТекСделка, "Сделка");
			Если СтрокаТекущейСделки = Неопределено Тогда
				ДанныеСтроки.СуммаВзаиморасчетов = 0;
				ДанныеСтроки.СуммаРегл           = 0;
			Иначе
				
				СуммаДокументаПоСделке = СтрокаТекущейСделки.СуммаВзаиморасчетов;
				
				ДанныеСтроки.СуммаВзаиморасчетов = 0;
				Если ОплатаПоНесколькимСделкам Тогда
					СуммаПредоплатыПоСделке = 0;
					СтрокиПредоплатыПоСделке = ДокументОбъект.ДокументыРасчетовСКонтрагентом.НайтиСтроки(Новый Структура("Сделка", ТекСделка));
					Для каждого СтрокаПредоплатыПоСделке Из СтрокиПредоплатыПоСделке Цикл
						СуммаПредоплатыПоСделке = СуммаПредоплатыПоСделке + СтрокаПредоплатыПоСделке.СуммаВзаиморасчетов;
					КонецЦикла;
				Иначе
					СуммаПредоплатыПоСделке = ДокументОбъект.ДокументыРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов");
				КонецЕсли;
				ОстСуммаВзаиморасчетов = СуммаДокументаПоСделке - СуммаПредоплатыПоСделке;
				
				ПогашаемаяСуммаВзаиморасчетов = Мин(Выборка.СуммаВзаиморасчетов, ОстСуммаВзаиморасчетов);
				
				ДанныеСтроки.СуммаВзаиморасчетов = ПогашаемаяСуммаВзаиморасчетов;
				ДанныеСтроки.СуммаРегл           = Окр(ПогашаемаяСуммаВзаиморасчетов * КурсОстатка, 2);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет поле ДатаОплаты в строке табличной части ДокументыРасчетовСКонтрагентом 
// при изменении документа расчетов
//
Процедура ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ДанныеСтроки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументРасчетовСКонтрагентом) Тогда
		ДанныеСтроки.ДатаОплаты = '00010101';
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДанныеСтроки.ДокументРасчетовСКонтрагентом.Метаданные();
	
	Запрос = Новый Запрос;
	ЕстьДатаОплаты = ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаОплаты", МетаданныеДокумента);
	Если ЕстьДатаОплаты Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШапкаДокумента.Дата КАК ДатаДокумента,
		|	ШапкаДокумента.ДатаОплаты КАК ДатаОплаты
		|ИЗ
		|	Документ." + МетаданныеДокумента.Имя + " КАК ШапкаДокумента
		|ГДЕ
		|	ШапкаДокумента.Ссылка = &ДокументРасчетов";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШапкаДокумента.Дата КАК ДатаДокумента,
		|	ШапкаДокумента.Дата КАК ДатаОплаты
		|ИЗ
		|	Документ." + МетаданныеДокумента.Имя + " КАК ШапкаДокумента
		|ГДЕ
		|	ШапкаДокумента.Ссылка = &ДокументРасчетов";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументРасчетов", ДанныеСтроки.ДокументРасчетовСКонтрагентом);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДанныеСтроки.ДатаОплаты = УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Выборка.ДатаДокумента, Выборка.ДатаОплаты);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТОВ ПО РЕГИСТРУ РАСЧЕТОВ ПО ДОКУМЕНТАМ

// Движения документов оплаты по регистру оперативных расчетов по документам
//
// Параметры
//  СтруктураШапкиДокумента		– <Структура> – структура с данными шапки документа и другими, необходимыми для формирования движений
//  ДатаДвижений				– <Дата> – дата и время формирования движений
//  ИмяТаблицыПлатежейИлиТаблица– <Строка> –  Имя табличной части документа оплаты с расшифровкой платежей
//								или <ТаблицаЗначений> - подготовленная таблица платежей по расчетным документам
//  ВидРасчетовСКонтрагентом	- <ПеречислениеСсылка.ВидыРасчетовСКонтрагентами>
//  ВидДвижения					- <ВидДвиженияНакопления>
//  Движения 					- <Коллекция движений или структура с соответствующими свойствами>
//								– Движения документа по регистрам (в т.ч. по регистру оперативных взаиморасчетов)
//  Отказ						- <Булево> – признак ошибки при проведения для остановки проведения документа
//  Заголовок					- <Строка> – Представление заголовка документа для использования при формировании сообщения об ошибках
//
Процедура ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ИмяТаблицыПлатежейИлиТаблица, ВидРасчетовСКонтрагентом, ВидДвижения, Движения, Отказ, Заголовок) Экспорт
	
	Ссылка = СтруктураШапкиДокумента.Ссылка;
	МетаданныеДокумента = Ссылка.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	ПереданоИмяТаблицы =  ТипЗнч(ИмяТаблицыПлатежейИлиТаблица) = Тип("Строка");
	Если ПереданоИмяТаблицы Тогда // Таблицу платежей получаем запросом
		
		ИмяТаблицыПлатежей = ИмяТаблицыПлатежейИлиТаблица;
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаПлатежей.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаПлатежей.ДоговорКонтрагента) КАК ДоговорКонтрагентаПредставление,
		|	ВЫБОР
		|		КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоДоговоруВЦелом
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		КОГДА ТаблицаПлатежей.Сделка В (&ПустыеСделки)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаПлатежей.Сделка
		|	КОНЕЦ КАК Сделка,
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоДоговоруВЦелом
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			КОГДА ТаблицаПлатежей.Сделка В (&ПустыеСделки)
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ТаблицаПлатежей.Сделка
		|		КОНЕЦ) КАК СделкаПредставление,
		|	ВЫБОР
		|		КОГДА ТаблицаПлатежей.ДокументРасчетовСКонтрагентом В (&ПустыеРасчетныеДокументы)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаПлатежей.ДокументРасчетовСКонтрагентом
		|	КОНЕЦ КАК ДокументРасчетовСКонтрагентом,
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА ТаблицаПлатежей.ДокументРасчетовСКонтрагентом В (&ПустыеРасчетныеДокументы)
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ТаблицаПлатежей.ДокументРасчетовСКонтрагентом
		|		КОНЕЦ) КАК ДокументРасчетовСКонтрагентомПредставление,
		|	ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	ТаблицаПлатежей.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов) КАК ВалютаВзаиморасчетовПредставление,
		|	СУММА(ВЫБОР
		|			КОГДА &СуммаПлатежаВВалютеРеглУчета
		|				ТОГДА ТаблицаПлатежей.СуммаПлатежа
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТаблицаПлатежей.КурсВзаиморасчетов = 0
		|							ИЛИ ТаблицаПлатежей.КратностьВзаиморасчетов = 0
		|						ТОГДА 0
		|					ИНАЧЕ ВЫРАЗИТЬ(ТаблицаПлатежей.СуммаВзаиморасчетов * ТаблицаПлатежей.КурсВзаиморасчетов / ТаблицаПлатежей.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
		|				КОНЕЦ
		|		КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ТаблицаПлатежей.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	МИНИМУМ(ТаблицаПлатежей.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ." + ИмяДокумента + "." + ИмяТаблицыПлатежей + " КАК ТаблицаПлатежей
		// Пример:
		//|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ТаблицаПлатежей
		|ГДЕ
		|	ТаблицаПлатежей.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА
		|	И ТаблицаПлатежей.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПлатежей.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоДоговоруВЦелом
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		КОГДА ТаблицаПлатежей.Сделка В (&ПустыеСделки)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаПлатежей.Сделка
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаПлатежей.ДокументРасчетовСКонтрагентом В (&ПустыеРасчетныеДокументы)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТаблицаПлатежей.ДокументРасчетовСКонтрагентом
		|	КОНЕЦ,
		|	ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов,
		|	ТаблицаПлатежей.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов),
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоДоговоруВЦелом
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			КОГДА ТаблицаПлатежей.Сделка В (&ПустыеСделки)
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ТаблицаПлатежей.Сделка
		|		КОНЕЦ),
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА ТаблицаПлатежей.ДокументРасчетовСКонтрагентом В (&ПустыеРасчетныеДокументы)
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ТаблицаПлатежей.ДокументРасчетовСКонтрагентом
		|		КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаПлатежей.СуммаПлатежа", "ТаблицаПлатежей.Сумма");
		КонецЕсли; 
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ПоДоговоруВЦелом", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
		СуммаПлатежаВВалютеРеглУчета = СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
		Запрос.УстановитьПараметр("СуммаПлатежаВВалютеРеглУчета", СуммаПлатежаВВалютеРеглУчета);
		
		РеквизитыМетаданныхТабЧастиДокумента = МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыПлатежей].Реквизиты;
		ТипыСделок = РеквизитыМетаданныхТабЧастиДокумента.Сделка.Тип.Типы();
		МассивПустыхСделок = Новый Массив;
		Для каждого Элемент Из ТипыСделок Цикл
			МассивПустыхСделок.Добавить(Новый(Элемент));
		КонецЦикла;
		
		ТипыРасчетныхДокументов = РеквизитыМетаданныхТабЧастиДокумента.ДокументРасчетовСКонтрагентом.Тип.Типы();
		МассивПустыхРасчетныхДокументов = Новый Массив;
		Для каждого Элемент Из ТипыРасчетныхДокументов Цикл
			МассивПустыхРасчетныхДокументов.Добавить(Новый(Элемент));
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ПустыеСделки",             МассивПустыхСделок);
		Запрос.УстановитьПараметр("ПустыеРасчетныеДокументы", МассивПустыхРасчетныхДокументов);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаПлатежей = Результат.Выгрузить();
		
	Иначе // Может быть передана готовая таблица платежей (например, для документа КорректировкаДолга)
		
		ПереданаТаблица =  ТипЗнч(ИмяТаблицыПлатежейИлиТаблица) = Тип("ТаблицаЗначений");
		Если НЕ ПереданаТаблица Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаПлатежей = ИмяТаблицыПлатежейИлиТаблица;
		
	КонецЕсли;
	
	УпрУчет = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	ЗнакОстатка = ?(ВидДвижения = ВидДвиженияНакопления.Расход, 1, -1);
	
	// Определение состояния расчетов по документам
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.ДоговорКонтрагента,
	|	Таб.Сделка,
	|	Таб.ДокументРасчетовСКонтрагентом
	|ПОМЕСТИТЬ ТаблицаПлатежей
	|ИЗ
	|	&ТаблицаПлатежей КАК Таб
	|ГДЕ 
	|	НЕ (Таб.ДокументРасчетовСКонтрагентом = &Ссылка)
	|		И НЕ (Таб.ДокументРасчетовСКонтрагентом = НЕОПРЕДЕЛЕНО);
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиПоДокументамОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамОстатки.Сделка,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамОстатки.ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &ЗнакОстатка КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыСКонтрагентамиПоДокументамОстатки.СуммаРеглОстаток * &ЗнакОстатка КАК СуммаРегл
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(,
	|		Организация = &Организация
	|			И ВидРасчетовСКонтрагентом = &ВидРасчетовСКонтрагентом
	|			И УпрУчет = &УпрУчет
	|			И (ДоговорКонтрагента, Сделка, ДокументРасчетовСКонтрагентом) В (ВЫБРАТЬ ДоговорКонтрагента, Сделка, ДокументРасчетовСКонтрагентом ИЗ ТаблицаПлатежей)) КАК ВзаиморасчетыСКонтрагентамиПоДокументамОстатки
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &ЗнакОстатка > 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки";
	
	Запрос.УстановитьПараметр("ТаблицаПлатежей", ТаблицаПлатежей);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидРасчетовСКонтрагентом", ВидРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("УпрУчет", УпрУчет);
	Запрос.УстановитьПараметр("ЗнакОстатка",ЗнакОстатка);
	
	ОстаткиПоРасчетам = Запрос.Выполнить().Выгрузить();
	
	ДвиженияРегистраОперативныхРасчетов = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов;
	
	Если СтруктураШапкиДокумента.Свойство("РежимПроведения") Тогда
		РежимПроведения = СтруктураШапкиДокумента.РежимПроведения;
	Иначе
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	ЗапрещатьПревышениеОстатков = РежимПроведения = РежимПроведенияДокумента.Оперативный;
	
	Для каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
		
		ВзаиморасчетыВВалютеРеглУчета = СтрокаПлатежа.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
		ДелатьДвиженияПоСуммеРегл = СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете И НЕ ВзаиморасчетыВВалютеРеглУчета;
		
		ЭтоПогашениеКредДокумента = СтрокаПлатежа.ДокументРасчетовСКонтрагентом <> Неопределено;
		
		Если ЭтоПогашениеКредДокумента Тогда
			
			ОтборПоОстаткам = Новый Структура("ДоговорКонтрагента, Сделка, ДокументРасчетовСКонтрагентом", 
			СтрокаПлатежа.ДоговорКонтрагента, СтрокаПлатежа.Сделка, СтрокаПлатежа.ДокументРасчетовСКонтрагентом);
			
			СуммаВзаиморасчетовОстаток = 0;
			СуммаРеглОстаток = 0;
			СтрокиОстатка = ОстаткиПоРасчетам.НайтиСтроки(ОтборПоОстаткам);
			Для каждого ОстатокАванса Из СтрокиОстатка Цикл
				СуммаВзаиморасчетовОстаток = СуммаВзаиморасчетовОстаток + СтрокиОстатка[0].СуммаВзаиморасчетов;
				СуммаРеглОстаток = СуммаРеглОстаток + СтрокиОстатка[0].СуммаРегл;
			КонецЦикла;
			
			Если СтрокаПлатежа.СуммаВзаиморасчетов > СуммаВзаиморасчетовОстаток Тогда
				
				ТекстСообщения = "Указана сумма взаиморасчетов, превышающая непогашенный остаток по документу расчетов с контрагентом!
				| Договор: " + СтрокаПлатежа.ДоговорКонтрагентаПредставление + 
				?(НЕ ЗначениеЗаполнено(СтрокаПлатежа.СделкаПредставление),", сделка не указана",", сделка: " + СтрокаПлатежа.СделкаПредставление)+ 
				", документ расчетов: " + СтрокаПлатежа.ДокументРасчетовСКонтрагентомПредставление + "; 
				| Остаток " + СуммаВзаиморасчетовОстаток + " " + СтрокаПлатежа.ВалютаВзаиморасчетовПредставление + "; "
				+ " указана сумма " + СтрокаПлатежа.СуммаВзаиморасчетов + " " + СтрокаПлатежа.ВалютаВзаиморасчетовПредставление + "; "
				+ " превышение " + (СтрокаПлатежа.СуммаВзаиморасчетов - СуммаВзаиморасчетовОстаток) + " " + СтрокаПлатежа.ВалютаВзаиморасчетовПредставление;
				
				Если ЗапрещатьПревышениеОстатков Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
					Возврат;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок);
				КонецЕсли;
			КонецЕсли;
			
			Движение = ДвиженияРегистраОперативныхРасчетов.Добавить();
			
			Движение.ВидДвижения = ВидДвижения;
			Движение.Период	     = ДатаДвижений;
			
			Движение.ДоговорКонтрагента            = СтрокаПлатежа.ДоговорКонтрагента;
			Движение.Контрагент            		   = СтрокаПлатежа.ДоговорКонтрагента.Владелец;
			Движение.Организация            	   = СтрокаПлатежа.ДоговорКонтрагента.Организация;
			
			
			Движение.Сделка                        = СтрокаПлатежа.Сделка;
			Движение.ДокументРасчетовСКонтрагентом = СтрокаПлатежа.ДокументРасчетовСКонтрагентом;
			Движение.УпрУчет                       = УпрУчет;
			Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
			
			Движение.СуммаВзаиморасчетов = СтрокаПлатежа.СуммаВзаиморасчетов;
			
			Если ДелатьДвиженияПоСуммеРегл Тогда
				Движение.СуммаРегл = ?(СуммаВзаиморасчетовОстаток = 0, 0, 
				Окр(СуммаРеглОстаток * СтрокаПлатежа.СуммаВзаиморасчетов / СуммаВзаиморасчетовОстаток, 2));
			КонецЕсли;
			
		Иначе
			
			// Делаем движение с указанием документа-регистратора в качестве документа расчетов 
			Движение = ДвиженияРегистраОперативныхРасчетов.Добавить();
			
			Движение.ВидДвижения = ВидДвижения;
			Движение.Период      = ДатаДвижений;
			
			Движение.ДоговорКонтрагента            = СтрокаПлатежа.ДоговорКонтрагента;
			Движение.Контрагент            		   = СтрокаПлатежа.ДоговорКонтрагента.Владелец;
			Движение.Организация            	   = СтрокаПлатежа.ДоговорКонтрагента.Организация;
			
			Движение.Сделка                        = СтрокаПлатежа.Сделка;
			Движение.ДокументРасчетовСКонтрагентом = Ссылка;
			Движение.УпрУчет                       = УпрУчет;
			Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
			
			Движение.СуммаВзаиморасчетов = СтрокаПлатежа.СуммаВзаиморасчетов;
			
			Если ДелатьДвиженияПоСуммеРегл Тогда
				Движение.СуммаРегл = СтрокаПлатежа.СуммаРегл;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Движения документов поступления и реализации по регистру оперативных расчетов по документам
//
// Параметры
//  СтруктураШапкиДокумента		- <Структура> – Структура шапки документа
//  БазоваяТаблицаЗадолженности	– <ТаблицаЗначений> –  Таблица значений с информацией о задолженности по документу
//  ТаблицаРасчетовПоДокументам	– <ТаблицаЗначений> –  Таблица значений с информацией о зачитываемых авансах
//  ВидРасчетовПоОперации		- <ПеречислениеСсылка.ВидыРасчетовСКонтрагентами>
//  ВидДвиженияРасчетов			- <ПеречислениеСсылка.ВидыДвиженийБухгалтерии>
//	ДоговорКонтрагента			- <СправочникСсылка.ДоговорыКонтрагентов> - необязательный параметр. 
//									Для документов, отражающих движения по нескольким договорам
//  Движения 					- <Коллекция движений или структура с соответствующими свойствами>
//								– Движения документа по регистрам (в т.ч. по регистру оперативных взаиморасчетов)
//  Отказ						- <Булево> – признак ошибки при проведения для остановки проведения документа
//  Заголовок					- <Строка> – Представление заголовка документа для использования при формировании сообщения об ошибках
//
Процедура ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ВидРасчетовСКонтрагентом, ВидДвижения, Движения, Отказ, Заголовок) Экспорт
	
	ВестиПоДокументамРасчетовСКонтрагентом = СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом;
	Если НЕ ВестиПоДокументамРасчетовСКонтрагентом ИЛИ ТаблицаВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка             = СтруктураШапкиДокумента.Ссылка;
	ДатаДвижений       = СтруктураШапкиДокумента.Дата;
	Организация        = СтруктураШапкиДокумента.Организация;
	Контрагент         = СтруктураШапкиДокумента.Контрагент;
	ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	УпрУчет            = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	ЗнакОстатка        = ?(ВидДвижения = ВидДвиженияНакопления.Приход, -1, 1);
	
	ЭтоВозврат = СтруктураШапкиДокумента.Свойство("ЭтоВозврат") И СтруктураШапкиДокумента.ЭтоВозврат;
	Множитель = ?(ЭтоВозврат, -1, 1);
	ЗнакОстатка = ЗнакОстатка * Множитель;
	
	НетСделкиВТаблице = ТаблицаВзаиморасчетов.Колонки.Найти("Сделка") = Неопределено;
	Если НетСделкиВТаблице Тогда
		ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаПокупателя, ДокументСсылка.ЗаказПоставщику, Неопределено"), "Сделка");
		//ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаПокупателя, ДокументСсылка.ЗаказПоставщику, 
		//|ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика, Неопределено"), "Сделка");
	КонецЕсли;
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ НетСделкиВТаблице Тогда
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "Сделка");
	КонецЕсли;
	
	ТипизироватьСделку = ТаблицаВзаиморасчетов.Колонки.Сделка.ТипЗначения.Типы().Количество() = 0;
	ТипизироватьДР     = ТаблицаВзаиморасчетов.Колонки.ДокументРасчетовСКонтрагентом.ТипЗначения.Типы().Количество() = 0;
	Если ТипизироватьСделку Тогда
		ТипСделки = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Измерения.Сделка.Тип;
		КолонкаСделкаТип = ТаблицаВзаиморасчетов.Колонки.Добавить("СделкаТип", ТипСделки);
	КонецЕсли;
	Если ТипизироватьДР Тогда
		ТипДР = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Измерения.ДокументРасчетовСКонтрагентом.Тип;
		КолонкаДРТип = ТаблицаВзаиморасчетов.Колонки.Добавить("ДРТип", ТипДР);
	КонецЕсли;
	
	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Сделка) Тогда
			СтрокаВзаиморасчетов.Сделка = Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом = Ссылка;
		КонецЕсли;
		Если ТипизироватьСделку Тогда
			СтрокаВзаиморасчетов.СделкаТип = СтрокаВзаиморасчетов.Сделка;
		КонецЕсли;
		Если ТипизироватьДР Тогда
			СтрокаВзаиморасчетов.ДРТип = СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипизироватьСделку Тогда
		КолонкаСделка = ТаблицаВзаиморасчетов.Колонки.Найти("Сделка");
		ИндексСделки = ТаблицаВзаиморасчетов.Колонки.Индекс(КолонкаСделка);
		ТаблицаВзаиморасчетов.Колонки.Удалить(ИндексСделки);
		КолонкаСделкаТип.Имя = "Сделка";
	КонецЕсли;
	Если ТипизироватьДР Тогда
		КолонкаДР = ТаблицаВзаиморасчетов.Колонки.Найти("ДокументРасчетовСКонтрагентом");
		ИндексДР = ТаблицаВзаиморасчетов.Колонки.Индекс(КолонкаДР);
		ТаблицаВзаиморасчетов.Колонки.Удалить(ИндексДР);
		КолонкаДРТип.Имя = "ДокументРасчетовСКонтрагентом";
	КонецЕсли;
	
	// Определение состояния расчетов по документам
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Сделка,
	|	Таб.ДокументРасчетовСКонтрагентом
	|ПОМЕСТИТЬ ТаблицаВзаиморасчетов
	|ИЗ
	|	&ТаблицаВзаиморасчетов КАК Таб
	|ГДЕ 
	|	НЕ (Таб.ДокументРасчетовСКонтрагентом = &Ссылка);
	|ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументамОстатки.Организация,
	|	ВзаиморасчетыПоДокументамОстатки.Контрагент,
	|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументамОстатки.Сделка,
	|	ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДокументамОстатки.ВидРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДокументамОстатки.УпрУчет,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &ЗнакОстатка КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаРеглОстаток * &ЗнакОстатка КАК СуммаРегл
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	|		, 
	|		Организация = &Организация
	|			И Контрагент = &Контрагент
	|			И ДоговорКонтрагента = &ДоговорКонтрагента
	|			И ВидРасчетовСКонтрагентом = &ВидРасчетовСКонтрагентом
	|			И УпрУчет = &УпрУчет
	|			И (Сделка, ДокументРасчетовСКонтрагентом) В (ВЫБРАТЬ Сделка, ДокументРасчетовСКонтрагентом ИЗ ТаблицаВзаиморасчетов)) КАК ВзаиморасчетыПоДокументамОстатки
	|ГДЕ
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток * &ЗнакОстатка > 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки";
	
	Запрос.УстановитьПараметр("ТаблицаВзаиморасчетов", ТаблицаВзаиморасчетов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ВидРасчетовСКонтрагентом", ВидРасчетовСКонтрагентом);
	Запрос.УстановитьПараметр("УпрУчет", УпрУчет);
	Запрос.УстановитьПараметр("ЗнакОстатка",ЗнакОстатка);
	
	ОстаткиПоРасчетам = Запрос.Выполнить().Выгрузить();
	ОстаткиПоРасчетам.Индексы.Добавить("Организация, Контрагент, ДоговорКонтрагента, Сделка, 
	| ДокументРасчетовСКонтрагентом, ВидРасчетовСКонтрагентом, УпрУчет");
	
	НаборЗаписейВзаиморасчетыПоДокументам = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов;
	ТаблицаДвижений = НаборЗаписейВзаиморасчетыПоДокументам.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.Свойство("РежимПроведения") Тогда
		РежимПроведения = СтруктураШапкиДокумента.РежимПроведения;
	Иначе
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	ЗапрещатьПревышениеОстатков   = РежимПроведения = РежимПроведенияДокумента.Оперативный;
	ВзаиморасчетыВВалютеРеглУчета = СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ДелатьДвиженияПоСуммеРегл     = СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете И НЕ ВзаиморасчетыВВалютеРеглУчета;
	
	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		ЭтоПогашениеКредДокумента = СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом <> Ссылка
		И
		ТипЗнч(Ссылка) <> Тип("ДокументСсылка.КорректировкаРеализации")
		И
		ТипЗнч(Ссылка) <> Тип("ДокументСсылка.КорректировкаПоступленияТоваровУслуг");
		
		Если ЭтоПогашениеКредДокумента Тогда
			
			ОтборПоОстаткам = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Сделка, 
			| ДокументРасчетовСКонтрагентом, ВидРасчетовСКонтрагентом, УпрУчет", 
			Организация, Контрагент, ДоговорКонтрагента, СтрокаВзаиморасчетов.Сделка, 
			СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом, ВидРасчетовСКонтрагентом, УпрУчет);
			
			СтрокиОстатка = ОстаткиПоРасчетам.НайтиСтроки(ОтборПоОстаткам);
			
			ОстатокСуммыВзаиморасчетов = 0;
			Для каждого ОстатокЗадолженности из СтрокиОстатка Цикл
				ОстатокСуммыВзаиморасчетов = ОстатокСуммыВзаиморасчетов + ОстатокЗадолженности.СуммаВзаиморасчетов;
			КонецЦикла;
			
			Если ОстатокСуммыВзаиморасчетов < СтрокаВзаиморасчетов.СуммаВзаиморасчетов * Множитель Тогда
				
				ВалютаПредставление = Строка(ДоговорКонтрагента.ВалютаВзаиморасчетов);
				СделкаПредставление = ?(НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Сделка), "не указана", Строка(СтрокаВзаиморасчетов.Сделка));
				ТекстСообщения = "Указана сумма взаиморасчетов, превышающая непогашенный остаток по документу расчетов с контрагентом!
				| Сделка: " + СделкаПредставление + ", документ расчетов: " + СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом + "; 
				| Остаток " + ОстатокСуммыВзаиморасчетов + " " + ВалютаПредставление + "; "
				+ " указана сумма " + (СтрокаВзаиморасчетов.СуммаВзаиморасчетов * Множитель) + " " + ВалютаПредставление + "; "
				+ " превышение " + (СтрокаВзаиморасчетов.СуммаВзаиморасчетов  * Множитель - ОстатокСуммыВзаиморасчетов) + " " + ВалютаПредставление;
				
				Если ЗапрещатьПревышениеОстатков Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
					Возврат;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Движение = ТаблицаДвижений.Добавить();
		
		Движение.Организация                   = Организация;
		Движение.Контрагент                    = Контрагент;
		Движение.ДоговорКонтрагента            = ДоговорКонтрагента;
		Движение.Сделка                        = СтрокаВзаиморасчетов.Сделка;
		Движение.ДокументРасчетовСКонтрагентом = СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом;
		Движение.УпрУчет                       = УпрУчет;
		Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
		
		Движение.СуммаВзаиморасчетов = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		Если ДелатьДвиженияПоСуммеРегл Тогда
			Движение.СуммаРегл = СтрокаВзаиморасчетов.СуммаРегл;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписейВзаиморасчетыПоДокументам.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписейВзаиморасчетыПоДокументам.мПериод = ДатаДвижений;
	
	Если Не Отказ Тогда
		ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборЗаписейВзаиморасчетыПоДокументам, ВидДвижения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТОВ ПО ВЗАИМОРАСЧЕТАМ

Функция СформироватьТаблицуСделокДляПроведенияПоВзаиморасчетам(СтруктураПараметров, СтруктураШапкиДокумента) 
	
	МогутБытьЗаказыВТабличныхЧастях = СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам;
	Если МогутБытьЗаказыВТабличныхЧастях 
		И СтруктураПараметров.Свойство("ЕстьЗаказыВТабличныхЧастях") И СтруктураПараметров.ЕстьЗаказыВТабличныхЧастях = Истина Тогда
		ЕстьЗаказыВТабличныхЧастях = Истина;
		ИмяКолонкиСделка = СтруктураПараметров.ИмяЗаказаВТабличныхЧастях;
	Иначе
		ЕстьЗаказыВТабличныхЧастях = Ложь;
		ИмяКолонкиСделка = "Сделка";
	КонецЕсли;
	
	ТаблицаСделок = Новый ТаблицаЗначений;
	ТаблицаСделок.Колонки.Добавить(ИмяКолонкиСделка);
	
	ОбщиеЧисловыеКолонки = "СуммаВзаиморасчетов, СуммаРегл, СуммаУпр";
	Если СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов" Тогда
		ДопЧисловыеКолонки = "СуммаВзаиморасчетовРаспределения, СуммаРеглРаспределения, СуммаУпрРаспределения";
	КонецЕсли;
	ЧисловыеКолонки = ОбщиеЧисловыеКолонки + ", " + ДопЧисловыеКолонки;
	СтруктураЧисловыхКолонок = Новый Структура(ЧисловыеКолонки);
	Для каждого ЧисловаяКолонка Из СтруктураЧисловыхКолонок Цикл
		ТаблицаСделок.Колонки.Добавить(ЧисловаяКолонка.Ключ, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЦикла;
	
	Если НЕ СтруктураПараметров.Свойство("ИмяСделкиВШапкеДокумента") Тогда
		ИмяСделкиВШапкеДокумента = "Сделка";
	Иначе // Например, для некоторых документов это может быть "Заказ"
		ИмяСделкиВШапкеДокумента = СтруктураПараметров.ИмяСделкиВШапкеДокумента;
	КонецЕсли;
	
	Для каждого ПодготовленнаяТаблица Из СтруктураПараметров.СтруктураПодготовленныхТаблиц Цикл
		
		ИмяТаблицы = ПодготовленнаяТаблица.Ключ;
		Таблица    = ПодготовленнаяТаблица.Значение;
		
		Для каждого СтрокаТаблицы Из Таблица Цикл
			СтрокаСделки = ТаблицаСделок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСделки, СтрокаТаблицы);
			Если НЕ ЕстьЗаказыВТабличныхЧастях Тогда
				СтрокаСделки[ИмяКолонкиСделка] = СтруктураШапкиДокумента[ИмяСделкиВШапкеДокумента];
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов" Тогда
		Для каждого СтрокаСделки Из ТаблицаСделок Цикл
			СтрокаСделки.СуммаВзаиморасчетов = СтрокаСделки.СуммаВзаиморасчетов + СтрокаСделки.СуммаВзаиморасчетовРаспределения;
			СтрокаСделки.СуммаРегл           = СтрокаСделки.СуммаРегл + СтрокаСделки.СуммаРеглРаспределения;
			СтрокаСделки.СуммаУпр            = СтрокаСделки.СуммаУпр + СтрокаСделки.СуммаУпрРаспределения;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаСделок.Свернуть(ИмяКолонкиСделка, ОбщиеЧисловыеКолонки);
	
	ТаблицаСделок.Колонки[ИмяКолонкиСделка].Имя = "Сделка";
	
	Если ТипЗнч(СтруктураШапкиДокумента) = Тип("Структура") И СтруктураШапкиДокумента.Свойство("Ссылка")
		И (ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступленияТоваровУслуг") ИЛИ ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации"))
		И (ТаблицаСделок.Итог("СуммаВзаиморасчетов") = 0.00 И ТаблицаСделок.Итог("СуммаУпр") = 0.00)
		Тогда
		ТаблицаСделок.Очистить();
	КонецЕсли;
	
	Возврат ТаблицаСделок;
	
КонецФункции

// Проверяет правильность заполнения строк табличной части "Документы расчетов с контрагентом".
//
// Параметры:
// Параметры: 
//  ДокументОбъект          - документ, табличная часть которого проверяется
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ДокументОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаПоступленияТоваровУслуг"
		ИЛИ СтруктураШапкиДокумента.ВидДокумента = "КорректировкаРеализации" Тогда
		// Табличной части ДокументыРасчетовСКонтрагентом нет - проверку выполнять не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");
		Если СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
			И СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтруктураОбязательныхПолей.Вставить("СуммаРегл");
		КонецЕсли;
		
		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом()

Процедура ИзменитьЗнакКолонокТаблицы(Таблица, СтруктураКолонок) Экспорт
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Для каждого ОписаниеКолонки Из СтруктураКолонок Цикл
			
			ИмяКолонки = ОписаниеКолонки.Ключ;
			ЗначениеКолонки = СтрокаТаблицы[ИмяКолонки];
			Если ТипЗнч(ЗначениеКолонки) = Тип("Число") Тогда
				СтрокаТаблицы[ИмяКолонки] = -1 * ЗначениеКолонки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает документ расчетов с контрагентом
//
Функция ПолучитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаПоступленияТоваровУслуг" Тогда
		Возврат СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументПоступления;
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "КорректировкаРеализации" Тогда
		Возврат СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументРеализации;
	Иначе
		Возврат СтруктураШапкиДокумента.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьТаблицуПоВзаиморасчетам(ДокументОбъект, СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаСделокДокумента, Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаСделок = ТаблицаСделокДокумента.Скопировать();
	Для каждого СтрокаСделки Из ТаблицаСделок Цикл
		Если СтрокаСделки.СуммаУпр = 0 Тогда
			СтрокаСделки.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаСделки.СуммаВзаиморасчетов, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ТаблицаСделок.ЗаполнитьЗначения(Неопределено, "Сделка");
		Иначе //.ПоСчетам
			ТаблицаСделок.ЗаполнитьЗначения(СтруктураШапкиДокумента["Сделка"], "Сделка");
		КонецЕсли;
		ТаблицаСделок.Свернуть("Сделка", "СуммаВзаиморасчетов, СуммаРегл, СуммаУпр");
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		
		ТаблицаПоВзаиморасчетам = ТаблицаСделок.Скопировать();
		
		Возврат ТаблицаПоВзаиморасчетам;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		СделкаДляВзаиморасчетов = Неопределено;
	Иначе //.ПоСчетам или .ПоЗаказам (по заказам - если в ТЧ ДокументыРасчетовСКонтрагентом нет колонки Сделка)
		СделкаДляВзаиморасчетов = СтруктураШапкиДокумента["Сделка"];
	КонецЕсли;
	
	// Создаем колонки таблицы явным образом, а не загружаем таб.часть документа,
	// чтобы не устанавливалось ограничение типов колонок в соответствие с типом реквизитов документа
	ТаблицаПоВзаиморасчетам = Новый ТаблицаЗначений;
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("Сделка");
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("ДокументРасчетовСКонтрагентом");
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("ДатаОплаты", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаРегл", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Если СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаПоступленияТоваровУслуг"
		И СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаРеализации" Тогда
		
		Для каждого СтрокаТабЧасти Из ДокументОбъект.ДокументыРасчетовСКонтрагентом Цикл
			СтрокаВзаиморасчетов = ТаблицаПоВзаиморасчетам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаТабЧасти);
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Сделка) Тогда
				СтрокаВзаиморасчетов.Сделка = СделкаДляВзаиморасчетов;
			КонецЕсли;
			СтрокаВзаиморасчетов.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВзаиморасчетов.СуммаВзаиморасчетов, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета
			);
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтоВозврат = СтруктураПараметров.Свойство("ЭтоВозврат") И СтруктураПараметров.ЭтоВозврат;
	Если ЭтоВозврат Тогда
		ИзменитьЗнакКолонокТаблицы(ТаблицаПоВзаиморасчетам, Новый Структура("СуммаВзаиморасчетов, СуммаРегл, СуммаУпр"));
	КонецЕсли;
	
	ДокументРасчетовСКонтрагентом = ПолучитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		
		ВсегоСуммаВзаиморасчетов = ТаблицаСделок.Итог("СуммаВзаиморасчетов");
		ВсегоСуммаПредоплаты     = ТаблицаПоВзаиморасчетам.Итог("СуммаВзаиморасчетов");
		Если ВсегоСуммаВзаиморасчетов <> ВсегоСуммаПредоплаты Тогда
			СтрокаВзаиморасчетов = ТаблицаПоВзаиморасчетам.Добавить();
			
			СтрокаВзаиморасчетов.Сделка                        = СделкаДляВзаиморасчетов;
			СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом = ДокументРасчетовСКонтрагентом;
			
			СтрокаВзаиморасчетов.СуммаВзаиморасчетов = ВсегоСуммаВзаиморасчетов - ВсегоСуммаПредоплаты;
			СтрокаВзаиморасчетов.СуммаРегл           = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВзаиморасчетов.СуммаВзаиморасчетов,
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
			СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
			СтруктураШапкиДокумента.КратностьДокумента, 1);
			СтрокаВзаиморасчетов.СуммаУпр            = ТаблицаСделок.Итог("СуммаУпр") - ТаблицаПоВзаиморасчетам.Итог("СуммаУпр");
		КонецЕсли; 
		
	Иначе //.ПоЗаказам
		
		// Рассчитаем неоплаченные суммы по каждой строке таблицы сделок
		Для каждого СтрокаСделки Из ТаблицаСделок Цикл
			Для каждого СтрокаВзаиморасчетов Из ТаблицаПоВзаиморасчетам Цикл
				Если СтрокаСделки.Сделка = СтрокаВзаиморасчетов.Сделка Тогда
					СтрокаСделки.СуммаВзаиморасчетов = СтрокаСделки.СуммаВзаиморасчетов - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
					СтрокаСделки.СуммаУпр            = СтрокаСделки.СуммаУпр - СтрокаВзаиморасчетов.СуммаУпр;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Теперь по каждой строке таблицы сделок, где предоплата не совпадает с реализацией (поступлением), 
		// добавляем строки в таблицу взаиморасчетов со ссылкой на проводимый документ
		Для каждого СтрокаСделки Из ТаблицаСделок Цикл
			Если СтрокаСделки.СуммаВзаиморасчетов <> 0 Тогда
				СтрокаВзаиморасчетов = ТаблицаПоВзаиморасчетам.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаСделки);
				
				СтрокаВзаиморасчетов.ДокументРасчетовСКонтрагентом = ДокументРасчетовСКонтрагентом;
				СтрокаВзаиморасчетов.СуммаРегл           = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВзаиморасчетов.СуммаВзаиморасчетов,
				СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
				СтруктураШапкиДокумента.КратностьДокумента, 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаПоступленияТоваровУслуг"
		И СтруктураШапкиДокумента.ВидДокумента <> "КорректировкаРеализации" Тогда
		Множитель = ?(ЭтоВозврат, -1, 1);
		Для каждого СтрокаВзаиморасчетов Из ТаблицаПоВзаиморасчетам Цикл
			
			Если СтрокаВзаиморасчетов.СуммаВзаиморасчетов * Множитель < 0 Тогда
				ПредставлениеСделки = ?(НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Сделка), "не указана", Строка(СтрокаВзаиморасчетов.Сделка));
				ОбщегоНазначения.СообщитьОбОшибке("Указана сумма предоплаты (сделка: " + ПредставлениеСделки + ") больше возможной по документу на " 
				+ (-1 * СтрокаВзаиморасчетов.СуммаВзаиморасчетов * Множитель) + " " + СтруктураШапкиДокумента.ВалютаВзаиморасчетов, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаПоВзаиморасчетам;
	
КонецФункции // ПодготовитьТаблицуПоВзаиморасчетам()

Функция ПодготовитьТаблицуПоРасчетам(ТаблицаСделок, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если Отказ ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТаблицаПоРасчетам = ТаблицаСделок.Скопировать();
	
	УдаляемыеСтроки = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаПоРасчетам Цикл
		
		ДолжноБытьДвижениеПоРасчетам = НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сделка) 
		ИЛИ (ТипЗнч(СтрокаТаблицы.Сделка) <> Тип("ДокументСсылка.ЗаявкаПокупателя") 
		И ТипЗнч(СтрокаТаблицы.Сделка) <> Тип("ДокументСсылка.ЗаказПоставщику"));
		Если НЕ ДолжноБытьДвижениеПоРасчетам Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПоРасчетам.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для каждого СтрокаСделки Из ТаблицаПоРасчетам Цикл
		Если СтрокаСделки.СуммаУпр = 0 Тогда
			СтрокаСделки.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаСделки.СуммаВзаиморасчетов, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПоРасчетам;
	
КонецФункции

Процедура ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	ДокументОбъект, СтруктураПараметров, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	Если СтруктураПараметров.Свойство("ПроводитьПоВзаиморасчетам") И НЕ СтруктураПараметров.ПроводитьПоВзаиморасчетам Тогда
		ТаблицаПоВзаиморасчетам = Новый ТаблицаЗначений;
		ТаблицаПоРасчетам       = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли; 
	
	ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ДокументОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаСделок = СформироватьТаблицуСделокДляПроведенияПоВзаиморасчетам(СтруктураПараметров, СтруктураШапкиДокумента);
	
	ТаблицаПоВзаиморасчетам = ПодготовитьТаблицуПоВзаиморасчетам(ДокументОбъект, СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаСделок, Отказ, Заголовок);
	
	ТаблицаПоРасчетам = ПодготовитьТаблицуПоРасчетам(ТаблицаСделок, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам()

Процедура ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ДокументОбъект, СтруктураШапкиДокумента, 
	СтруктураПараметров, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	ВидДвижения, Отказ, Заголовок) Экспорт
	
	// По регистру ВзаиморасчетыСКонтрагентами
	
	Если ТаблицаПоВзаиморасчетам.Количество() > 0 Тогда
		
		НаборДвиженийВзаиморасчеты = ДокументОбъект.Движения.ВзаиморасчетыСКонтрагентами;
		
		ТаблицаДвижений = НаборДвиженийВзаиморасчеты.Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВзаиморасчетам, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		
		НаборДвиженийВзаиморасчеты.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийВзаиморасчеты.мТаблицаДвижений = ТаблицаДвижений;
		
		// Проверка остатков при оперативном проведении
		ОтключитьКонтрольВзаиморасчетов = СтруктураШапкиДокумента.Свойство("ОтключитьКонтрольВзаиморасчетов") 
		И СтруктураШапкиДокумента.ОтключитьКонтрольВзаиморасчетов;
		Если СтруктураШапкиДокумента.РежимПроведения = РежимПроведенияДокумента.Оперативный
			И НЕ ОтключитьКонтрольВзаиморасчетов Тогда
			НаборДвиженийВзаиморасчеты.КонтрольОстатков(ДокументОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураШапкиДокумента, Отказ, Заголовок, "СуммаВзаиморасчетов");
		КонецЕсли;
		
		Если Не Отказ Тогда
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборДвиженийВзаиморасчеты, ВидДвижения);
		КонецЕсли;
		
	КонецЕсли;
	
	// По регистру РасчетыСКонтрагентами
	
	Если ТаблицаПоРасчетам.Количество() > 0 Тогда
		
		НаборДвиженийРасчеты = ДокументОбъект.Движения.РасчетыСКонтрагентами;
		
		ТаблицаДвижений = НаборДвиженийРасчеты.Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоРасчетам, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		
		Если СтруктураПараметров.Свойство("ЭтоВозврат") И СтруктураПараметров.ЭтоВозврат Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Возврат, "РасчетыВозврат");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты, "РасчетыВозврат");
		КонецЕсли;
		
		НаборДвиженийРасчеты.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийРасчеты.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборДвиженийРасчеты, ВидДвижения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#Если Клиент Тогда
	
	// Процедура подготавливает необходимые данные и вызывает процедуру заполнения табличной части 
	// документов расчетов с контрагентами ("Предоплата", "Документы поступления", "Документы реализации") 
	//
	Процедура ЗаполнитьПредоплату(ДокументОбъект, СтруктураПараметров) Экспорт
		
		Если ДокументОбъект.Проведен И ДокументОбъект.ДокументыРасчетовСКонтрагентом.Количество() > 0 Тогда
			ТекстПредупреждения = "Для заполнения табличной части нужно сначала сделать документ непроведенным!";
			Предупреждение(ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Если ДокументОбъект.ДокументыРасчетовСКонтрагентом.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ДокументОбъект.Метаданные().Представление());
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			ДокументОбъект.ДокументыРасчетовСКонтрагентом.Очистить();
		КонецЕсли;
		
		ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ДокументОбъект, СтруктураПараметров);
		ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ДокументОбъект, СтруктураПараметров);
		
	КонецПроцедуры
	
	// Процедура выбора расчетного документа.
	// Используется в документах подсистемы НДС.
	//
	Процедура ВыборРасчетногоДокумента(СтруктураПараметров,Элемент,ТипыДокументов) Экспорт
		
		ФормаВыбора = Документы.ДокументРасчетовСКонтрагентом.ПолучитьФорму("ФормаВыбора",Элемент);
		
		Если СтруктураПараметров.Свойство("Организация") Тогда 
			ФормаВыбора.Организация        = СтруктураПараметров.Организация;
		КонецЕсли;
		Если СтруктураПараметров.Свойство("Контрагент") Тогда 
			ФормаВыбора.Контрагент         = СтруктураПараметров.Контрагент;
		КонецЕсли;
		Если СтруктураПараметров.Свойство("ДоговорКонтрагента") Тогда 
			ФормаВыбора.ДоговорКонтрагента = СтруктураПараметров.ДоговорКонтрагента;
		КонецЕсли;
		ФормаВыбора.РежимВыбора        = Истина;
		ФормаВыбора.мТипыДокументов    = ТипыДокументов;
		
		Если СтруктураПараметров.Свойство("ЭтоНовыйДокумент")Тогда 
			Если СтруктураПараметров.ЭтоНовыйДокумент Тогда
				ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
			Иначе
				ФормаВыбора.КонПериода         = СтруктураПараметров.КонецПериода;
			КонецЕсли;
		Иначе
			ФормаВыбора.КонПериода         = СтруктураПараметров.КонецПериода;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
			ФормаВыбора.НачПериода         = СтруктураПараметров.НачалоПериода;
			ФормаВыбора.мПереданИнтервал = Истина;
		Иначе
			ФормаВыбора.мПереданИнтервал = Ложь;
		КонецЕсли; 
		
		ФормаВыбора.Открыть();
		
	КонецПроцедуры // ВыборРасчетногоДокумента()
	
#КонецЕсли


// Возаращает вид договора с контрагентом по виду операции
//
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации=Неопределено) Экспорт
	
	СПоставщиком  	= Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ОтветХранение);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	СПокупателем  	= Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.НаЭкспорт);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Прочее  		= Новый СписокЗначений;
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Все				= Новый СписокЗначений;
	Все.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Все.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Все.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	
	
	Если ЗначениеЗаполнено(ВидОперации) тогда
		
		//Определение вида операции
		
		ВидДоговораПоВидуОпераций = Новый Соответствие();
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.СнятиеСДепозита,Все);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами,Все);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВнесениеНаДепозит,Все);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами,Все);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВнесениеНаДепозит,Все);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Все);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам,Прочее);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.СнятиеСДепозита,Все);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Все);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю,СПокупателем);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,СПокупателем);
		
		ВидДоговора=ВидДоговораПоВидуОпераций[ВидОперации];
		
		Если НЕ ВидДоговора = Неопределено Тогда
			
			Возврат ВидДоговора;
			
		Иначе
			
			Возврат Новый СписокЗначений;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	Конецесли;
	
КонецФункции // ОпределитьВидДоговораСКонтрагентом()

Процедура ОбработкаПодбораЗадолженностей(ДокументОбъект,СтрокаПлатеж,ЗначениеВыбора,
	ПлатежиСписком,ВалютаДокумента,КурсДокумента,КратностьДокумента, НДСПоУмолчанию="",ОтражатьВБухгалтерскомУчете=Неопределено) Экспорт									
	
	РасшифровкаПлатежа=ДокументОбъект.РасшифровкаПлатежа;									
	
	Если НЕ ЗначениеВыбора.ЕстьПодбор Тогда									
		
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ДоговорКонтрагента",ЗначениеВыбора.ДоговорКонтрагента);
		
		//Если Не ЗначениеВыбора.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		//	СтруктураОтбора.Вставить("Сделка",ЗначениеВыбора.Сделка);
		//КонецЕсли;
		
		//Если ЗначениеВыбора.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтруктураОтбора.Вставить("ДокументРасчетовСКонтрагентом",ЗначениеВыбора.ДокументРасчетовСКонтрагентом);
		//КонецЕсли;
		
		МассивСтрок=РасшифровкаПлатежа.НайтиСтроки(СтруктураОтбора);
		
		Если Не МассивСтрок=Неопределено Тогда
			Для Каждого Строка Из МассивСтрок Цикл
				РасшифровкаПлатежа.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
		
		Если РасшифровкаПлатежа.Количество()>0 И НЕ ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
			РасшифровкаПлатежа.Удалить(РасшифровкаПлатежа[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ (РасшифровкаПлатежа.Количество()=1 И НЕ ПлатежиСписком)) ИЛИ РасшифровкаПлатежа.Количество()=0 Тогда
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
	//СтрокаПлатеж.Сделка=ЗначениеВыбора.Сделка;
	Попытка
		СтрокаПлатеж.ДокументРасчетовСКонтрагентом=ЗначениеВыбора.ДокументРасчетовСКонтрагентом;
	Исключение
	КонецПопытки;
	
	СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
	СтрокаПлатеж.КурсВзаиморасчетов=ЗначениеВыбора.КурсВзаиморасчетов;
	СтрокаПлатеж.КратностьВзаиморасчетов=ЗначениеВыбора.КратностьВзаиморасчетов;	
	СтрокаПлатеж.СуммаВзаиморасчетов=ЗначениеВыбора.СуммаВзаиморасчетов;
	//СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ЗначениеВыбора.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
	//УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ДокументОбъект.ВидОперации);
	
	Если НЕ ОтражатьВБухгалтерскомУчете=Неопределено Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРеглУчета(ДокументОбъект,СтрокаПлатеж,НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если ЗначениеВыбора.Свойство("ДокументПланирования") Тогда
		
		СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=ЗначениеВыбора.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=ЗначениеВыбора.Проект;
		СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетовПлан;
		СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбораЗадолженностей()

Функция ПолучитьОстаткиПоВзаиморасчетам(вхМоментВремени, вхДоговорыКонтрагентов, вхЗнакСуммы, вхФильтр = Неопределено) Экспорт
	
	лЗапрос = Новый Запрос;
	лЗапрос.УстановитьПараметр("МоментВремени", вхМоментВремени);
	лЗапрос.УстановитьПараметр("ДоговорыКонтрагентов", вхДоговорыКонтрагентов);
	лЗапрос.УстановитьПараметр("ЗнакСуммы", вхЗнакСуммы);
	
	лЕстьФильтр = Ложь;
	лДоговорКонтрагента = Неопределено;
	Если ТипЗнч(вхФильтр) = Тип("Структура") тогда
		лЕстьФильтр = вхФильтр.Свойство("ДоговорКонтрагента", лДоговорКонтрагента);
	КонецЕсли;
	
	лЗапрос.УстановитьПараметр("ЕстьФильтр", лЕстьФильтр);
	лЗапрос.УстановитьПараметр("ДоговорКонтрагента", лДоговорКонтрагента);	
	
	лЗапрос.Текст = 
	"ВЫБРАТЬ
	|	Р.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Р.ДокументРасчетов КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА НЕ Р.ДокументРасчетов.ДатаОплаты ЕСТЬ NULL
	|			ТОГДА Р.ДокументРасчетов.ДатаОплаты
	|		ИНАЧЕ Р.ДокументРасчетов.Дата
	|	КОНЕЦ КАК ДатаОплаты,
	|	Р.СуммаУпрОстаток * &ЗнакСуммы КАК Сумма
	|ИЗ
	|	РегистрНакопления.Взаиморасчеты.Остатки(
	|			&МоментВремени,
	|			ДоговорКонтрагента В (&ДоговорыКонтрагентов)
	|				И (ДоговорКонтрагента = &ДоговорКонтрагента
	|					ИЛИ НЕ &ЕстьФильтр)) КАК Р
	|ГДЕ
	|	Р.СуммаУпрОстаток * &ЗнакСуммы > 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.Взаиморасчеты.Остатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорКонтрагента,
	|	ДатаОплаты,
	|	ДокументРасчетов";
	
	Возврат лЗапрос.Выполнить().Выгрузить();	
	
КонецФункции

Процедура ДополнитьДвиженияПоВзаиморасчетам(вхСсылкаНаДокумент, вхДоговорКонтрагента, вхДокументРасчетовСКонтрагентом,
	вхВалютаДокумента, вхКурсВзаиморасчетов, вхКратностьВзаиморасчетов, вхСумма, вхЗнакДвижения, вхТаблицаОстатков,
	пРезультат) Экспорт
	
	лЗнакСумма = ?(вхСумма > 0, 1, ?(вхСумма = 0, 0, -1));
	лВидДвижения = ?(лЗнакСумма * вхЗнакДвижения = 1, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
	
	лОстСумма = вхСумма * лЗнакСумма;
	
	лСтрокиОстатки = вхТаблицаОстатков.НайтиСтроки(Новый Структура("ДоговорКонтрагента", вхДоговорКонтрагента));
	Если ЗначениеЗаполнено(вхДокументРасчетовСКонтрагентом) тогда
		лСтрокаДокументРасчетов = Неопределено;
		Для к = 0 по лСтрокиОстатки.ВГраница() цикл
			лСтрокаОстатки = лСтрокиОстатки[к];
			Если (лСтрокаОстатки.ДокументРасчетов = вхДокументРасчетовСКонтрагентом) тогда
				// передвигаем строку наверх
				лСтрокиОстатки.Вставить(0, лСтрокаОстатки);
				лСтрокиОстатки.Удалить(к + 1);
				Прервать;
			КонецЕсли;			
		КонецЦикла;		
	КонецЕсли;
	
	// получаем реквизиты документа
	лРеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "Дата");
	
	Если ТипЗнч(пРезультат) <> Тип("ТаблицаЗначений") тогда
		ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", пРезультат);
	КонецЕсли;	
	
	Для Каждого лСтрокаОстатки Из лСтрокиОстатки цикл
		
		Если (лОстСумма = 0) тогда
			Прервать;
		КонецЕсли;
		
		лПогашСумма = Мин(лОстСумма, лСтрокаОстатки.Сумма);
		Если (лПогашСумма > 0) тогда
			
			лСтрокаРезультат = пРезультат.Добавить();
			лСтрокаРезультат.Период = лРеквизитыДокумента.Дата;
			лСтрокаРезультат.Регистратор = вхСсылкаНаДокумент;
			лСтрокаРезультат.ВидДвижения = лВидДвижения;
			лСтрокаРезультат.ДоговорКонтрагента = вхДоговорКонтрагента;
			лСтрокаРезультат.ДокументРасчетов = лСтрокаОстатки.ДокументРасчетов;
			лСтрокаРезультат.СуммаУпр = лПогашСумма * вхЗнакДвижения;
			лСтрокаРезультат.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			лСтрокаРезультат.СуммаУпр, вхВалютаДокумента, Неопределено,
			вхКурсВзаиморасчетов, 1, вхКратностьВзаиморасчетов, 1);
			лСтрокаРезультат.КурсВзаиморасчетов = вхКурсВзаиморасчетов;
			лСтрокаРезультат.ВалютаВзаиморасчетов = вхВалютаДокумента;
			лСтрокаРезультат.КратностьВзаиморасчетов = вхКратностьВзаиморасчетов;
			
			лОстСумма = лОстСумма - лПогашСумма;
			лСтрокаОстатки.Сумма = лСтрокаОстатки.Сумма - лПогашСумма;
			
		КонецЕсли;
	КонецЦикла;
	
	Если (лОстСумма > 0) тогда
		лСтрокаРезультат = пРезультат.Добавить();
		лСтрокаРезультат.Период = лРеквизитыДокумента.Дата;
		лСтрокаРезультат.Регистратор = вхСсылкаНаДокумент;
		лСтрокаРезультат.ВидДвижения = лВидДвижения;
		лСтрокаРезультат.ДоговорКонтрагента = вхДоговорКонтрагента;
		лСтрокаРезультат.ДокументРасчетов = вхСсылкаНаДокумент;
		лСтрокаРезультат.СуммаУпр = лОстСумма * вхЗнакДвижения;
		лСтрокаРезультат.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		лСтрокаРезультат.СуммаУпр, вхВалютаДокумента, Неопределено,
		вхКурсВзаиморасчетов, 1, вхКратностьВзаиморасчетов, 1);
		лСтрокаРезультат.КурсВзаиморасчетов = вхКурсВзаиморасчетов;
		лСтрокаРезультат.ВалютаВзаиморасчетов = вхВалютаДокумента;
		лСтрокаРезультат.КратностьВзаиморасчетов = вхКратностьВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроведениеПоВзаиморасчетамБанковскиеКассовыеДокументы(вхСсылкаНаДокумент, вхФильтр = Неопределено) Экспорт
	
	лМетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(вхСсылкаНаДокумент));
	Если (лМетаданныеДокумента = Неопределено) тогда
		ВызватьИсключение "[ПроведениеПоВзаиморасчетамБанковскиеКассовыеДокументы]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лРеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхСсылкаНаДокумент, "МоментВремени,СуммаДокумента,ВалютаДокумента,ВидОперации");
	лЗнакСуммы = 0;
	лЗнакДвижения = 0;
	Если (лМетаданныеДокумента = Метаданные.Документы.ПриходныйКассовыйОрдер) тогда
		
		лДопустимыеОперации = Новый Массив;
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами);
		
		лВозвратныеОперации = Новый Массив;
		лВозвратныеОперации.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником);
		лВозвратныеОперации.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
		
		лЗнакСуммы = -1;
		лЗнакДвижения = ?(лВозвратныеОперации.Найти(лРеквизитыДокумента.ВидОперации) = Неопределено, 1, -1);
		
	ИначеЕсли (лМетаданныеДокумента = Метаданные.Документы.РасходныйКассовыйОрдер) тогда
		
		лДопустимыеОперации = Новый Массив;
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами);
		
		лВозвратныеОперации = Новый Массив;
		лВозвратныеОперации.Добавить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
		
		лЗнакСуммы = 1;
		лЗнакДвижения = ?(лВозвратныеОперации.Найти(лРеквизитыДокумента.ВидОперации) = Неопределено, 1, -1);
		
	ИначеЕсли (лМетаданныеДокумента = Метаданные.Документы.ПлатежноеПоручениеВходящее) тогда
		
		лДопустимыеОперации = Новый Массив;
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		
		лВозвратныеОперации = Новый Массив;
		лВозвратныеОперации.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
		
		лЗнакСуммы = -1;
		лЗнакДвижения = ?(лВозвратныеОперации.Найти(лРеквизитыДокумента.ВидОперации) = Неопределено, 1, -1);
		
	ИначеЕсли (лМетаданныеДокумента = Метаданные.Документы.ПлатежноеПоручениеИсходящее) тогда
		
		лДопустимыеОперации = Новый Массив;
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами);
		лДопустимыеОперации.Добавить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами);
		
		лВозвратныеОперации = Новый Массив;
		лВозвратныеОперации.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
		
		лЗнакСуммы = 1;
		лЗнакДвижения = ?(лВозвратныеОперации.Найти(лРеквизитыДокумента.ВидОперации) = Неопределено, 1, -1);
		
	КонецЕсли;
	
	Если (лЗнакСуммы = 0) ИЛИ (лЗнакДвижения = 0) тогда
		ВызватьИсключение "[ПроведениеПоВзаиморасчетамБанковскиеКассовыеДокументы]: неправильный параметр номер 1.";
	КонецЕсли;
	
	Результат = Неопределено;
	ОбщегоНазначения.СоздатьСтруктуруРегистраНакопления("Взаиморасчеты", Результат);
	Если (лДопустимыеОперации.Найти(лРеквизитыДокумента.ВидОперации) = Неопределено) тогда
		Возврат Результат;
	КонецЕсли;
	
	лТаблицаДокумента = Новый ТаблицаЗначений;
	лТаблицаДокумента.Колонки.Добавить("ДоговорКонтрагента");
	лТаблицаДокумента.Колонки.Добавить("ДокументРасчетов");
	лТаблицаДокумента.Колонки.Добавить("КурсВзаиморасчетов", Новый ОписаниеТипов("Число"));
	лТаблицаДокумента.Колонки.Добавить("КратностьВзаиморасчетов", Новый ОписаниеТипов("Число"));
	лТаблицаДокумента.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число"));
	
	лЗапрос = Новый Запрос;
	лЗапрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	
	лЕстьФильтр = Ложь;
	лДоговорКонтрагента = Неопределено;
	Если (ТипЗнч(вхФильтр) = Тип("Структура")) тогда
		лЕстьФильтр = вхФильтр.Свойство("ДоговорКонтрагента", лДоговорКонтрагента);
	КонецЕсли;	
	
	лЗапрос.УстановитьПараметр("ЕстьФильтр", лЕстьФильтр);
	лЗапрос.УстановитьПараметр("ДоговорКонтрагента", лДоговорКонтрагента);
	
	лЗапрос.Текст = 
	"ВЫБРАТЬ
	|	Т.ДоговорКонтрагента,
	|	Т.КурсВзаиморасчетов,
	|	Т.КратностьВзаиморасчетов,
	|	Т.ДокументРасчетовСКонтрагентом КАК ДокументРасчетов,
	|	Т.СуммаВзаиморасчетов
	|ИЗ
	|	Документ." + лМетаданныеДокумента.Имя + ".РасшифровкаПлатежа КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|	И Т.СуммаВзаиморасчетов > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.НомерСтроки";
	
	// корректировка таблицы документа (учитываем сумму в шапке)
	лДоговорКонтрагентаПоУмолчанию = Неопределено;
	лКурсВзаиморасчетовПоУмолчанию = 0;
	лКратностьВзаиморасчетовПоУмолчанию = 0;
	
	лСуммаДокумента = лРеквизитыДокумента.СуммаДокумента;
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() цикл
		
		Если НЕ ЗначениеЗаполнено(лДоговорКонтрагентаПоУмолчанию) тогда
			лДоговорКонтрагентаПоУмолчанию = лВыборка.ДоговорКонтрагента;
			лКурсВзаиморасчетовПоУмолчанию = лВыборка.КурсВзаиморасчетов;
			лКратностьВзаиморасчетовПоУмолчанию = лВыборка.КратностьВзаиморасчетов;
		КонецЕсли;
		
		Если (лСуммаДокумента = 0) тогда
			Прервать;
		КонецЕсли;
		
		лСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(лВыборка.СуммаВзаиморасчетов, лРеквизитыДокумента.ВалютаДокумента, Неопределено,
		лВыборка.КурсВзаиморасчетов, 1, лВыборка.КратностьВзаиморасчетов, 1);
		лПогашСумма = Мин(лСуммаДокумента, лСуммаВзаиморасчетов);
		Если (лПогашСумма > 0) тогда
			лСтрокаТаблицаДокумента = лТаблицаДокумента.Добавить();
			лСтрокаТаблицаДокумента.ДоговорКонтрагента = лВыборка.ДоговорКонтрагента;
			лСтрокаТаблицаДокумента.ДокументРасчетов = лВыборка.ДокументРасчетов;
			лСтрокаТаблицаДокумента.СуммаВзаиморасчетов = лПогашСумма;
			лСтрокаТаблицаДокумента.КурсВзаиморасчетов = лВыборка.КурсВзаиморасчетов;
			лСтрокаТаблицаДокумента.КратностьВзаиморасчетов = лВыборка.КратностьВзаиморасчетов;
			
			лСуммаДокумента = лСуммаДокумента - лПогашСумма;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Если (лСуммаДокумента > 0) тогда
		лСтрокаТаблицаДокумента = лТаблицаДокумента.Добавить();
		лСтрокаТаблицаДокумента.ДоговорКонтрагента = лДоговорКонтрагентаПоУмолчанию;
		лСтрокаТаблицаДокумента.ДокументРасчетов = Неопределено;
		лСтрокаТаблицаДокумента.СуммаВзаиморасчетов = лСуммаДокумента;
		лСтрокаТаблицаДокумента.КурсВзаиморасчетов = лКурсВзаиморасчетовПоУмолчанию;
		лСтрокаТаблицаДокумента.КратностьВзаиморасчетов = лКратностьВзаиморасчетовПоУмолчанию;
	КонецЕсли;
	
	лДоговорыКонтрагента = лТаблицаДокумента.ВыгрузитьКолонку("ДоговорКонтрагента");
	лТаблицаОстатков = ПолучитьОстаткиПоВзаиморасчетам(лРеквизитыДокумента.МоментВремени, 
	лДоговорыКонтрагента, -лЗнакСуммы, вхФильтр);
	
	Для Каждого лСтрокаТаблицаДокумента Из лТаблицаДокумента цикл
		
		Если лЕстьФильтр И (лСтрокаТаблицаДокумента.ДоговорКонтрагента <> лДоговорКонтрагента) тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьДвиженияПоВзаиморасчетам(вхСсылкаНаДокумент, лСтрокаТаблицаДокумента.ДоговорКонтрагента, лСтрокаТаблицаДокумента.ДокументРасчетов, 
		лРеквизитыДокумента.ВалютаДокумента, лСтрокаТаблицаДокумента.КурсВзаиморасчетов,
		лСтрокаТаблицаДокумента.КратностьВзаиморасчетов, лСтрокаТаблицаДокумента.СуммаВзаиморасчетов * лЗнакСуммы,
		лЗнакДвижения, лТаблицаОстатков, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПростоеПроведениеПоВзаиморасчетам(вхСсылкаНаДокумент, вхДоговорКонтрагента, вхДокументРасчетовСКонтрагентом,
	вхВалютаДокумента, вхКурсВзаиморасчетов, вхКратностьВзаиморасчетов, вхСумма, вхЗнакДвижения) Экспорт
	
	// "вхСумма" - сумма погашаемой задолженности. Если операция увеличивает долг контрагента, то вхСумма > 0, 
	// если уменьшает, то вхСумма < 0
	// "вхЗнакДвижения" - если требуются обычные движения (например расход 100 рублей), то сюда подаем 1,
	// если нужны сторнирующие движения (например приход -100 рублей), то подаем -1
	
	лЗнакСуммы = ?(вхСумма > 0, 1, ?(вхСумма = 0, 0, -1));
	лДоговорыКонтрагента = Новый Массив;
	лДоговорыКонтрагента.Добавить(вхДоговорКонтрагента);
	
	лТаблицаОстатков = ПолучитьОстаткиПоВзаиморасчетам(вхСсылкаНаДокумент.МоментВремени(), 
	лДоговорыКонтрагента, -лЗнакСуммы);
	
	Результат = Неопределено;
	ДополнитьДвиженияПоВзаиморасчетам(вхСсылкаНаДокумент, вхДоговорКонтрагента, вхДокументРасчетовСКонтрагентом, 
	вхВалютаДокумента, вхКурсВзаиморасчетов,
	вхКратностьВзаиморасчетов, вхСумма,
	вхЗнакДвижения, лТаблицаОстатков, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДатуОплаты(пар_ГлубинаКредита, пар_ВариантРасчетаДней) Экспорт 
	
	лДатаОплаты = ПолучитьДатуОплатыПоДатеДокумента(ТекущаяДата(), пар_ГлубинаКредита, пар_ВариантРасчетаДней);
	
	Возврат  лДатаОплаты;
	
КонецФункции

Функция ПолучитьДатуОплатыПоДатеДокумента(пар_ДатаДокумента, пар_ГлубинаКредита, пар_ВариантРасчетаДней, пар_ОплатаВЛюбойДень = Истина) Экспорт 
	
	лДатаОплаты = пар_ДатаДокумента;
	
	КолвоДней = пар_ГлубинаКредита;
	
	Если КолвоДней > 0 тогда
		
		Если пар_ВариантРасчетаДней = Перечисления.ВидыРасчетаДней.ПоКалендарнымДням Тогда
			лДатаОплаты = КонецДня(лДатаОплаты) + КолвоДней*24*60*60;
			Если Не пар_ОплатаВЛюбойДень И Не (ДеньНедели(лДатаОплаты) = 2 Или ДеньНедели(лДатаОплаты) = 4)Тогда 
				Если ДеньНедели(лДатаОплаты) = 1 Тогда 
					УменьшитьКолвоДней = 4;
				ИначеЕсли ДеньНедели(лДатаОплаты) = 3 Тогда 
					УменьшитьКолвоДней = 1;
				Иначе
					УменьшитьКолвоДней = ДеньНедели(лДатаОплаты) - 4;
				КонецЕсли;
				лДатаОплаты = лДатаОплаты - УменьшитьКолвоДней * 24*60*60;
			КонецЕсли;
		Иначе
			// если реквизит не заполнен, то расчет будет выполнен с учетом рабочих дней
			
			// 1с7: с 20.03.2012 введен календарь
			Календарь = Справочники.Календари.Регламентированный;
			
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ " + СокрЛП(КолвоДней) + "
			|	ДатыКалендарей.Календарь,
			|	ДатыКалендарей.Год,
			|	ДатыКалендарей.ДатаКалендаря КАК ДатаКалендаря,
			|	ДатыКалендарей.Пятидневка,
			|	ДатыКалендарей.Шестидневка,
			|	ДатыКалендарей.КалендарныеДни,
			|	ДатыКалендарей.ВидДня
			|ИЗ
			|	РегистрСведений.ДатыКалендарей КАК ДатыКалендарей
			|ГДЕ
			|	ДатыКалендарей.Календарь = &Календарь
			|	И ДатыКалендарей.ДатаКалендаря > &ДатаКалендаря
			|	И ДатыКалендарей.ВидДня = &РабочийДень");
			
			Запрос.УстановитьПараметр("Календарь", Календарь);
			Запрос.УстановитьПараметр("РабочийДень", Перечисления.ВидыДнейКалендаря.Рабочий);
			Запрос.УстановитьПараметр("ДатаКалендаря", НачалоДня(лДатаОплаты));
			
			СпсДат = Запрос.Выполнить().Выгрузить();
			КолДат = СпсДат.Количество();
			
			Если КолДат = КолвоДней тогда
				лДатаОплаты = КонецДня(СпсДат[КолДат - 1].ДатаКалендаря);
				Если Не пар_ОплатаВЛюбойДень Тогда 
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	МАКСИМУМ(ДатыКалендарей.ДатаКалендаря) КАК ДатаКалендаря
					               |ИЗ
					               |	РегистрСведений.ДатыКалендарей КАК ДатыКалендарей
					               |ГДЕ
					               |	ДатыКалендарей.Календарь = &Календарь
					               |	И ДатыКалендарей.ВидДня = &РабочийДень
					               |	И ДатыКалендарей.ДатаКалендаря >= &ДатаКалендаря
					               |	И (ДЕНЬНЕДЕЛИ(ДатыКалендарей.ДатаКалендаря) = 2
					               |			ИЛИ ДЕНЬНЕДЕЛИ(ДатыКалендарей.ДатаКалендаря) = 4)
					               |	И ДатыКалендарей.ДатаКалендаря <= &ДатаОплаты
					               |
					               |ИМЕЮЩИЕ
					               |	НЕ МАКСИМУМ(ДатыКалендарей.ДатаКалендаря) ЕСТЬ NULL";
					Запрос.УстановитьПараметр("Календарь", Календарь);
					Запрос.УстановитьПараметр("РабочийДень", Перечисления.ВидыДнейКалендаря.Рабочий);
					Запрос.УстановитьПараметр("ДатаКалендаря", НачалоДня(пар_ДатаДокумента));
					Запрос.УстановитьПараметр("ДатаОплаты", лДатаОплаты);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда 
						лДатаОплаты = Выборка.ДатаКалендаря;
					Иначе
						лДатаОплаты = НачалоДня(пар_ДатаДокумента);	
					КонецЕсли;
				КонецЕсли;
			Иначе
				//1с7: если этот месяц не заполнен, значит рассчитаем как раньше (выходные - субб. и вскр.)
				БанковскихДней = 0;
				ОбычныхДней    = 0;
				НачДата = КонецДня(лДатаОплаты);
				Пока БанковскихДней < КолвоДней Цикл 
					ОбычныхДней = ОбычныхДней + 1;
					// определим день недели
					ДеньНедели = ДеньНедели(НачДата + ОбычныхДней*24*60*60);
					// если не выходной, то прошел еще один банковский день
					Если ДеньНедели < 6 Тогда
						БанковскихДней = БанковскихДней+1;
					КонецЕсли;
				КонецЦикла;
				лДатаОплаты = НачДата + ОбычныхДней*24*60*60;
				Если Не пар_ОплатаВЛюбойДень И Не (ДеньНедели(лДатаОплаты) = 2 Или ДеньНедели(лДатаОплаты) = 4)Тогда
					Если ДеньНедели(лДатаОплаты) = 1 Тогда 
						УменьшитьКолвоДней = 4;
					ИначеЕсли ДеньНедели(лДатаОплаты) = 3 Тогда 
						УменьшитьКолвоДней = 1;
					Иначе
						УменьшитьКолвоДней = ДеньНедели(лДатаОплаты) - 4;
					КонецЕсли;
					лДатаОплаты = лДатаОплаты - УменьшитьКолвоДней * 24*60*60;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат  лДатаОплаты;
КонецФункции

Процедура УстановитьПризнакСдвигаГраницы(вхОбъект) Экспорт 
	Если Не ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаОплаты", вхОбъект.Метаданные()) Тогда 
		 Возврат;
	КонецЕсли;
	Если Не вхОбъект.ЭтоНовый() Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(вхОбъект.Ссылка, "Дата,ДатаОплаты");
		Если вхОбъект.ДатаОплаты <> Реквизиты.ДатаОплаты Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПоРасчетамСКонтрагентами.Регистратор
			               |ИЗ
			               |	Последовательность.ПоРасчетамСКонтрагентами КАК ПоРасчетамСКонтрагентами
			               |ГДЕ
			               |	ПоРасчетамСКонтрагентами.Регистратор = &Регистратор";
			Запрос.УстановитьПараметр("Регистратор", вхОбъект.Ссылка);
			
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда 
				Дата = Мин(вхОбъект.Дата, Реквизиты.Дата);
				вхОбъект.ДополнительныеСвойства.Вставить("СдвинутьГраницуНаДату", Дата);
				
				//МоментВремени = Новый МоментВремени(Дата, вхОбъект.Ссылка);
				//Отбор = Новый Структура("ДоговорКонтрагента", вхОбъект.ДоговорКонтрагентаВзаиморасчетов);
				//Граница = РаботаСПоследовательностямиКлиентСервер.ПолучитьГраницуПоследовательности(Метаданные.Последовательности.ПоРасчетамСКонтрагентами, Отбор);
				//
				//РезультатСравнения = Граница.Сравнить(МоментВремени);
				//Если (РезультатСравнения = -1) тогда
				//	МоментВремени = Граница;
				//КонецЕсли;

				//Последовательности.ПоРасчетамСКонтрагентами.УстановитьГраницу(МоментВремени, Отбор);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СдвинутьГраницуПриСменеДатыОплаты(вхОбъект) Экспорт 
	Если вхОбъект.ДополнительныеСвойства.Свойство("СдвинутьГраницуНаДату") И ТипЗнч(вхОбъект.ДополнительныеСвойства.СдвинутьГраницуНаДату) = Тип("Дата") Тогда 
		Дата = вхОбъект.ДополнительныеСвойства.СдвинутьГраницуНаДату;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Взаиморасчеты.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.Взаиморасчеты КАК Взаиморасчеты
		|ГДЕ
		|	Взаиморасчеты.Регистратор = &Регистратор";
		Запрос.УстановитьПараметр("Регистратор", вхОбъект.Ссылка);	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			МоментВремени = Новый МоментВремени(Дата, вхОбъект.Ссылка);
			Отбор = Новый Структура("ДоговорКонтрагента", Выборка.ДоговорКонтрагента);
			Граница = РаботаСПоследовательностямиКлиентСервер.ПолучитьГраницуПоследовательности(Метаданные.Последовательности.ПоРасчетамСКонтрагентами, Отбор);
			
			РезультатСравнения = Граница.Сравнить(МоментВремени);
			Если (РезультатСравнения = 1) тогда
				МоментВремени = Граница;
				Последовательности.ПоРасчетамСКонтрагентами.УстановитьГраницу(МоментВремени, Отбор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДанныеДляРасчетаДатыОплаты(ДоговорКонтрагента, Организация, Дата) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозврСтруктура = Новый Структура("ВидРасчетаДней,КоличествоДнейОплатыОферты");	
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВидРасчетаДней,КоличествоДнейОплатыОферты,ОплатаВЛюбойДень,ДоговорНаОферту");
	Если РеквизитыДоговора.ДоговорНаОферту Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОтсрочкиПоДоговорамОфертыПоставщикиСрезПоследних.КоличествоДнейОплатыОферты,
		               |	ОтсрочкиПоДоговорамОфертыПоставщикиСрезПоследних.ВидРасчетаДней
		               |ИЗ
		               |	РегистрСведений.ОтсрочкиПоДоговорамОфертыПоставщики.СрезПоследних(&Дата, Организация = &Организация) КАК ОтсрочкиПоДоговорамОфертыПоставщикиСрезПоследних";
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда 
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ВозврСтруктура, Выборка);
		Иначе	
			ВызватьИсключение "Нет политики расчета даты оплаты в регистре сведений ""Отсрочки по договорам оферты (поставщики)"" по организации " + Организация + " на дату " + Дата;
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(ВозврСтруктура, РеквизитыДоговора);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВозврСтруктура;
	
КонецФункции
	
// + 20180111 Пушкин
Функция БлокировкиКлиента(Контрагент, Договор, Дата, Документ = Неопределено, СообщитьОбОшибке = Истина, СуммаОтгрузкиПлан = 0, ВидСообщения = Неопределено, Аларм_Заголовок = "",  ЭтоФон = Ложь) Экспорт
//Функция БлокировкиКлиента(Контрагент, Договор, Дата, Документ, СообщитьОбОшибке) Экспорт
	
	ЕстьБлокировка = Ложь;
	
	//
	Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ
		 НЕ ЗначениеЗаполнено(Договор) ИЛИ
		 НЕ ЗначениеЗаполнено(Дата) Тогда
		 ЕстьБлокировка = Истина;
		 Возврат ЕстьБлокировка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Аларм_Заголовок) тогда
		Аларм_Заголовок = "Проверка задолженности КА при формировании Реализации";
	КонецЕсли;
	Если ВидСообщения = Неопределено тогда
		ВидСообщения = Справочники.СобытияДляОтправкиЭлектронныхПисем.ЗадолженностьКА;	
	КонецЕсли;
	
	ПараметрыКА = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Контрагент,"Код,Блокировка_Отгрузок_Дата,ГоловнойКонтрагент");
	Контрагент_Код = ПараметрыКА.Код;
	Контрагент_Блокировка_Отгрузок_Дата = ПараметрыКА.Блокировка_Отгрузок_Дата;
	Контрагент_ГоловнойКонтрагент = ПараметрыКА.ГоловнойКонтрагент;
	//
	
	//Если ЗначениеЗаполнено(Контрагент.Блокировка_Отгрузок_Дата) Тогда 
	Если ЗначениеЗаполнено(Контрагент_Блокировка_Отгрузок_Дата) Тогда 
		Если Контрагент_Блокировка_Отгрузок_Дата < Дата тогда
	//	
			ЕстьБлокировка=Истина;
			Если СообщитьОбОшибке Тогда 
				//Сообщить("Для контрагента действует блокировка отгрузок с "+Строка(Контрагент.Блокировка_Отгрузок_Дата));
				Аларм_Содержимое = "Для КА [" + СокрЛП(Контрагент_Код) + "][" + СокрЛП(Контрагент) + "] действует блокировка отгрузок с "+Строка(Контрагент_Блокировка_Отгрузок_Дата);
				Если ЭтоФон тогда
					РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(ВидСообщения,Аларм_Содержимое,Аларм_Заголовок);
				Иначе
					Сообщить(Аларм_Содержимое);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	//Если ЗначениеЗаполнено(Контрагент.ГоловнойКонтрагент) И Не Контрагент.ГоловнойКонтрагент=Контрагент Тогда 
	Если ЗначениеЗаполнено(Контрагент_ГоловнойКонтрагент) И Не Контрагент_ГоловнойКонтрагент = Контрагент Тогда 
		//Если ЗначениеЗаполнено(Контрагент.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата) Тогда 
		Контрагент_ГоловнойКонтрагент_Блокировка_Отгрузок_Дата = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент_ГоловнойКонтрагент,"Блокировка_Отгрузок_Дата");
		Если ЗначениеЗаполнено(Контрагент_ГоловнойКонтрагент_Блокировка_Отгрузок_Дата) Тогда 
			Если Контрагент_ГоловнойКонтрагент_Блокировка_Отгрузок_Дата < Дата тогда
		//	
				ЕстьБлокировка=Истина;
				Если СообщитьОбОшибке Тогда 
					//Сообщить("Для головного контрагента действует блокировка отгрузок с "+Строка(Контрагент.ГоловнойКонтрагент.Блокировка_Отгрузок_Дата));
					Аларм_Содержимое = "Для головного КА [" + СокрЛП(Контрагент_Код) + "][" + СокрЛП(Контрагент) + "]  действует блокировка отгрузок с "+Строка(Контрагент_ГоловнойКонтрагент_Блокировка_Отгрузок_Дата);
					Если ЭтоФон тогда
						РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(ВидСообщения,Аларм_Содержимое,Аларм_Заголовок);
					Иначе
						Сообщить(Аларм_Содержимое);
					КонецЕсли;
				КонецЕсли;	
			
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	//
	ПараметрыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Договор,"Код,ДоговорПриостановлен,ДопустимоеЧислоДнейЗадолженности,ДопустимаяСуммаЗадолженности,НеКонтролироватьЛимит");
	Договор_Код = ПараметрыДоговора.Код;
	Договор_ДоговорПриостановлен = ПараметрыДоговора.ДоговорПриостановлен;
	Договор_ДопустимоеЧислоДнейЗадолженности = ПараметрыДоговора.ДопустимоеЧислоДнейЗадолженности;
	Договор_КонтролироватьСуммуЗадолженности = НЕ ПараметрыДоговора.НеКонтролироватьЛимит;
	Договор_ДопустимаяСуммаЗадолженности = ПараметрыДоговора.ДопустимаяСуммаЗадолженности;
	//
	
	
	//Если Договор.ДоговорПриостановлен Тогда 
	Если Договор_ДоговорПриостановлен Тогда 
	//	
		ЕстьБлокировка=Истина;
		Если СообщитьОбОшибке Тогда 
			Аларм_Содержимое = "По договору [" + СокрЛП(Договор_Код) + "][" + СокрЛП(Договор) + "] КА [" + СокрЛП(Контрагент_Код) + "][" + СокрЛП(Контрагент) + "] включена блокировка отгрузок!";
			Если ЭтоФон тогда
				РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(ВидСообщения,Аларм_Содержимое,Аларм_Заголовок);
			Иначе
				Сообщить(Аларм_Содержимое);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если Договор_ДопустимоеЧислоДнейЗадолженности>0 Тогда 
		ДатаДог = Дата - Договор_ДопустимоеЧислоДнейЗадолженности*60*60*24;
	Иначе
		ДатаДог=Дата;
	КонецЕсли;	
	
	СуммаДолга=ОпеределитьЗадолженность(Договор,ДатаДог);
	Если Договор_КонтролироватьСуммуЗадолженности Тогда 
		Если СуммаДолга>0 Тогда 
			
			СуммаОтгрузкиПланДляПроверки = СуммаОтгрузкиПлан;
			Если СуммаОтгрузкиПланДляПроверки = 0 тогда
				Если НЕ Документ = Неопределено Тогда
					Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						СуммаОтгрузкиПланДляПроверки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Документ,"СуммаДокумента");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			СуммаПроверки=Договор_ДопустимаяСуммаЗадолженности - СуммаОтгрузкиПланДляПроверки;
			//
			
			Если СуммаДолга>СуммаПроверки Тогда 
				ЕстьБлокировка=Истина;
				Если СообщитьОбОшибке Тогда 
					//
					Аларм_Содержимое = "По договору [" + СокрЛП(Договор_Код) + "][" + СокрЛП(Договор) + "] КА [" + СокрЛП(Контрагент_Код) + "][" + СокрЛП(Контрагент) 
								       + " есть задолженность в размере ["+Строка(СуммаДолга)
									   + "]руб, где ДопустимаяСуммаЗадолженности [" + СокрЛП(Договор_ДопустимаяСуммаЗадолженности) 
									   + "] и СуммаПлановойОтгрузки [" + СокрЛП(СуммаОтгрузкиПланДляПроверки) + "]";
					Если ЭтоФон тогда
						РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(ВидСообщения,Аларм_Содержимое,Аларм_Заголовок);
					Иначе
						Сообщить(Аларм_Содержимое);
					КонецЕсли;
					//	   
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ЕстьБлокировка;
			
КонецФункции
// - 20180111 Пушкин

Функция ОпеределитьЗадолженность(Договор, Дата) Экспорт
	Запрос = Новый Запрос(
	
// + 20180111 Пушкин

	//"ВЫБРАТЬ
	//|	ВзаиморасчетыОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	//|	СУММА(ВзаиморасчетыОстатки.СуммаУпрОстаток) КАК СуммаУпр
	//|ИЗ
	//|	РегистрНакопления.Взаиморасчеты.Остатки(&ДатаДокумента, ДоговорКонтрагента = &Договор) КАК ВзаиморасчетыОстатки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВзаиморасчетыОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов"
	
	
	// inf: СуммаУпр всегда рублевая
	
	"ВЫБРАТЬ
	|	ВзаиморасчетыОстатки.ДоговорКонтрагента КАК Договор,
	|	СУММА(ВзаиморасчетыОстатки.СуммаУпрОстаток) КАК Сумма
	|ПОМЕСТИТЬ СводныйОстПоДоговору1
	|ИЗ
	|	РегистрНакопления.Взаиморасчеты.Остатки(&ДатаДокумента,	ДоговорКонтрагента = &Договор) КАК ВзаиморасчетыОстатки
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыОстатки.ДоговорКонтрагента
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ВзаиморасчетыОстатки.СуммаРеглОстаток) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДепозитыКонтрагентовОстатки.ДоговорКонтрагента КАК Договор,
	|	СУММА(ДепозитыКонтрагентовОстатки.СуммаУпрОстаток) КАК Сумма
	|ПОМЕСТИТЬ СводныйОстПоДоговору2
	|ИЗ
	|	РегистрНакопления.ДепозитыКонтрагентов.Остатки(&ДатаДокумента,	ДоговорКонтрагента = &Договор) КАК ДепозитыКонтрагентовОстатки
	|СГРУППИРОВАТЬ ПО
	|	ДепозитыКонтрагентовОстатки.ДоговорКонтрагента
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ДепозитыКонтрагентовОстатки.СуммаУпрОстаток) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ост.Договор,
	|	СУММА(Ост.Сумма) КАК СуммаУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		СводныйОстПоДоговору1.Договор КАК Договор,
	|		СводныйОстПоДоговору1.Сумма КАК Сумма
	|	ИЗ
	|		СводныйОстПоДоговору1 КАК СводныйОстПоДоговору1
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		СводныйОстПоДоговору2.Договор,
	|		СводныйОстПоДоговору2.Сумма
	|	ИЗ
	|		СводныйОстПоДоговору2 КАК СводныйОстПоДоговору2) КАК Ост
	|
	|СГРУППИРОВАТЬ ПО
	|	Ост.Договор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Ост.Сумма) > 0
	|"
	
// - 20180111 Пушкин	
	);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Договор", Договор);
	ТабВзаиморасчетов = запрос.Выполнить().Выгрузить();
	Если ТабВзаиморасчетов.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		СуммаДолга =  табВзаиморасчетов[0].СуммаУпр;
		Возврат СуммаДолга;
	КонецЕсли;
КонецФункции

// Функция - Получить структуру холдинга
// 
// Возвращаемое значение:
//   -   Стркутура полей Основного контрагента
//
Функция ПолучитьСтруктуруХолдинга(знач Контрагент, знач ДоговорВзаиморасчетов) Экспорт 
//* #XX-271 Kalinin V.A. ( 2018-07-02 )	
ВыхСтруктура  = Новый Структура("КонтрагентВзаиморасчетов,ДоговорКонтрагентаВзаиморасчетов");	
	
СвойстваКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,"Ссылка,ГоловнойКОнтрагент");	
Если  КонтрагентВходитВХолдинг(СвойстваКонтрагента) тогда 
	 Контрагент =  СвойстваКонтрагента.ГоловнойКОнтрагент;
	 ДоговорВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваКонтрагента.ГоловнойКОнтрагент,"ОсновнойДоговорКонтрагента");
КонецЕсли;	

ВыхСтруктура.Вставить("КонтрагентВзаиморасчетов",Контрагент);
ВыхСтруктура.Вставить("ДоговорКонтрагентаВзаиморасчетов",ДоговорВзаиморасчетов);

Возврат ВыхСтруктура

КонецФункции	

// Функция - Контрагент входит в холдинг
//
// Параметры:
//  ДанныеКонтрагента	 - Ссылка/Структура	 - 
// 
// Возвращаемое значение:
//   -  Булево
//
Функция КонтрагентВходитВХолдинг(ДанныеКонтрагента) экспорт
	ГоловнойКонтрагент = Неопределено;
	Если  ТипЗнч(ДанныеКонтрагента) = Тип("Структура") 
		И ДанныеКонтрагента.Свойство("ГоловнойКОнтрагент",ГоловнойКонтрагент) тогда 
			Возврат НЕ ДанныеКонтрагента.Ссылка =  ГоловнойКонтрагент;			
	иначе
		ГоловнойКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента,"ГоловнойКонтрагент");
		  Возврат Не  ДанныеКонтрагента = ГоловнойКонтрагент;
	КонецЕсли;	
	
КонецФункции	