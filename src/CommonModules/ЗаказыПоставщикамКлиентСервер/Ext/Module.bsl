// Процедура - Разместить документ поступления по заказам . Размещает и проводит оперативно Документ поступления
// Параметры:
//  ДокументПоступление	 - ДокументСсылка.ПоступлениеТоваров,ДокументОбъект.ПоступлениеТоваров	 -  Документ размещения
//  ПараметрыВыолнения	 - Структура - Параметры выполнения, если не заполнено берутся параметры по умолчанию :
//  СоздаватьВиртуальныеСтроки     - Булево- Если Равно истина то на все не распределившееся число будут созданы вирт строки
//ЗаказРавенПриходу  			 - Булево- Если равно истине то все Позиции будутПроставлены к ОТказу
//ЗаказРаспределения            - ССылка - Заказ распределения, если заказ равен приходу, в остальных случаях не надо заполнять
//СписокЗаказовРаспределения    - Массив - Если заполнен, ПТУ будет распределена по данным заказам
//МассивОтбораНоменклатуры	      - Массив-  Если заполнено то будет произведен отбор
//  ДополнительныеПараметры		 - Структура - Дополнительные параметры выполнения	 
Процедура РазместитьДокументПоступленияПоЗаказам(ДокументПоступление,ПараметрыВыполнения = неопределено) Экспорт 
	
	Если ТипЗнч(ДокументПоступление) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") тогда 
		ДокументПоступление  = ДокументПоступление.ПолучитьОбъект();
	ИначеЕсли Не ТипЗнч(ДокументПоступление) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") тогда 
		Возврат ;
	КонецЕсли;	
		
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);	
	
	СтруктураТаблицДокумента = ПолучитьСтруктуруТаблицДокумента_ПоступлениеТоваровУслуг(ДокументПоступление);	
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровЗаполнения(ПараметрыВыполнения,ДокументПоступление);
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ДокументПоступление,Ложь);
	
	СтруктураТаблицРазмещения =  ЗаказыПоставщикамСервер.ПолучитьСтруктуруТаблицРазмещения(СтруктураТаблицДокумента,СтруктураПараметров);
	
	ОбновитьТаблицуРазмещения(ДокументПоступление,СтруктураТаблицРазмещения.ТаблицаРазмещения,СтруктураПараметров);
	
	СоздатьВиртуальныеСтроки(ДокументПоступление,СтруктураТаблицРазмещения.ТаблицаНеразмещенного,СтруктураПараметров);
	
	ПроставитьОтказыПоНеразмещенному(ДокументПоступление,СтруктураТаблицРазмещения.ТаблицаНеразмещенного,СтруктураПараметров);
	
	ЗаписатьДокументПоступление(ДокументПоступление,СтруктураПараметров);
КонецПроцедуры	

Процедура ЗаписатьДокументПоступление(ДокументПоступление,СтруктураПараметров)
	
	Если СтруктураПараметров.ОперативноеПроведение	 тогда 
		ДокументПоступление.Дата = ТекущаяДата();
		РежимПроведения = РежимПроведенияДокумента.Оперативный;
	иначе 
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	ДокументПоступление.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
	
	ЗафиксироватьТранзакцию();
	
	
	
КонецПроцедуры	



Функция ПолучитьСтруктуруПараметровЗаполнения(Знач СтруктураПараметров,ДокументПоступление) экспорт
	
	 СтруктураПараметровПоУмолчанию =    ЗаказыПоставщикамСервер.ПараметрыВыполненияПоУмолчанию();
	
	Если СтруктураПараметров = Неопределено тогда 
		СтруктураПараметров = СтруктураПараметровПоУмолчанию;
	иначе 
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров,СтруктураПараметровПоУмолчанию,Ложь);
	КонецЕсли;	

	
	СтрокаРеквизитовДокумента = "Контрагент,Склад,ДоговорКонтрагента,ПоставщикЗаказовДругой,ТорговаяТочка";
	СтруктураРеквизитовДокумента = новый Структура(СтрокаРеквизитовДокумента); 	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовДокумента,ДокументПоступление,СтрокаРеквизитовДокумента);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров,СтруктураРеквизитовДокумента,Ложь);
	
	СтруктураПараметров.вставить("КонтролироватьДоговор",?(ЗначениеЗаполнено(СтруктураПараметров.ПоставщикЗаказовДругой),Ложь,Истина));
	
	СтруктураПараметров.вставить("ОтборНоменклатуры",?(СтруктураПараметров.МассивОтбораНоменклатуры.Количество()>0,Истина,Ложь));
	
	СтруктураПараметров.вставить("РаспределятьПоСпискуЗаказов",?(не СтруктураПараметров.ЗаказРавенПриходу 
	и СтруктураПараметров.МассивЗаказовРаспределения.Количество()>0,Истина,Ложь));
	
	СтруктураПараметров.Вставить("МоментВремени",ТекущаяДата());
	
	Возврат СтруктураПараметров
	
КонецФункции	


Процедура ПроставитьОтказыПоНеразмещенному(ДокументПоступление,ТаблицаНеразмещенного,СтруктураПараметров)
	
	Если СтруктураПараметров.ЗаказРавенПриходу и ТаблицаНеразмещенного.Количество() тогда 
		ДокументПоступление.ДополнительныеСвойства.Вставить("ПроставитьПолныйОтказВЗаказе",СтруктураПараметров.ЗаказРаспределения);		
	КонецЕсли;
	
КонецПроцедуры	


Функция ПолучитьСтруктуруТаблицДокумента_ПоступлениеТоваровУслуг(ДокументПоступление)
	
СтруктураТаблиц = Новый Структура;
СтруктураТаблиц.Вставить("Товары",ДокументПоступление.Товары.Выгрузить());
Возврат СтруктураТаблиц;
	
КонецФункции	

Процедура ОбновитьТаблицуРазмещения(ДокументПоступление,ТаблицаРазмещения,СтруктураПараметров)
	ТаблицаДокумента = ДокументПоступление.РазмещениеСтрокПрихода;
	Если СтруктураПараметров.ОтборНоменклатуры тогда 
		МассивНоменклатуры = СтруктураПараметров.МассивОтбораНоменклатуры;
		Для каждого ЭлементНоменклатуры из МассивНоменклатуры цикл 
			
			НайдСтроки = ТаблицаДокумента.НайтиСтроки(Новый Структура("Номенклатура",ЭлементНоменклатуры));
			Для каждого НайденаяСтрока из НайдСтроки цикл 
				ТаблицаДокумента.Удалить(НайденаяСтрока);
			КонецЦикла;	
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРазмещения,ТаблицаДокумента);
	Иначе 
		ТаблицаДокумента.Очистить();
		ТаблицаДокумента.загрузить(ТаблицаРазмещения);	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СоздатьВиртуальныеСтроки(ДокументПоступление,ТаблицаНеразмещенного,СтруктураПараметров)
	Если СтруктураПараметров.СоздаватьВиртуальныеСтроки и ТаблицаНеразмещенного.количество() тогда 
		Для каждого СтрокаНеразмещенного из ТаблицаНеразмещенного цикл 
			СтрокаВиртуальная = ДокументПоступление.РазмещениеСтрокПрихода.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВиртуальная,СтрокаНеразмещенного);
			СтрокаВиртуальная = ОбщегоНазначенияКлиентСервер.ВиртуальнаяСтрокаЗаявки();
		КонецЦикла;			
	КонецЕсли;	
КонецПроцедуры	
