///////////////////////////////////////////////////////////////////////////////
// СИСТЕМНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возникает при начале работы системы
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	// Параметры клиента, которые будем использовать на сервере
	ПараметрыКлиента = Новый Соответствие();
	#Если НЕ ВебКлиент Тогда
	ПараметрыКлиента.Вставить("ИмяКомпьютера", ИмяКомпьютера());
	ВерсияПриНачалеРаботыСистемы = внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("Версия");
	#Иначе
	ПараметрыКлиента.Вставить("ИмяКомпьютера", внЖурналРегистрации.ИмяКомпьютераНаСервере());	
	#КонецЕсли	
	
	внЖурналРегистрации.ПриНачалеРаботыСистемы(ПараметрыКлиента);
	
	#Если НЕ ВебКлиент Тогда
	Если внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("Версия") <> ВерсияПриНачалеРаботыСистемы Тогда
		#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент Тогда
		ТабличныйДокумент = внЖурналРегистрацииСервер.ПолучитьТабличныйДокументИсторииИзменений();
		#Иначе
		Макет										= ПолучитьОбщийМакет("внОписаниеИзменений");
		ТабличныйДокумент							= Новый ТабличныйДокумент;
		ТабличныйДокумент.ТолькоПросмотр			= Истина;
		ТабличныйДокумент.ОтображатьГруппировки		= Истина;
		ТабличныйДокумент.ОтображатьСетку			= Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки		= Ложь;	
		ТабличныйДокумент.Вывести(Макет);
		#КонецЕсли
		
		ТабличныйДокумент.Показать("История изменения журнала регистрации");		
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры // ПриНачалеРаботыСистемы

// Возникает при завершении работы
Процедура ПриЗавершенииРаботыСистемы() Экспорт
	
	внЖурналРегистрации.ПриЗавершенииРаботыСистемы();
	
КонецПроцедуры // ПриЗавершенииРаботыСистемы

// Показывает предупреждение в зависимости от режима использования модальности
Процедура ПоказатьПредупреждениеПользователю(Знач Текст) Экспорт
	
	#Если ВебКлиент Тогда
		Сообщить(Текст);
	#Иначе
		Версия = внЖурналРегистрацииПовтИсп.внВерсияПлатформы();
		Если Версия = "8.2" Тогда
			Выполнить("Предупреждение(""" + Текст + """)");
		ИначеЕсли Версия = "8.3" Тогда
			Попытка
				Выполнить("ПоказатьПредупреждение(, """ + Текст + """)");
			Исключение
				Выполнить("Предупреждение(""" + Текст + """)");
			КонецПопытки;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Процедура СообщитьПользователю(Знач Текст) Экспорт
	
	Сообщить(Текст);
	
КонецПроцедуры

// Запускает приложение в зависимости от режима использования модальности
Процедура ЗапуститьПриложениеПользователю(Знач Приложение) Экспорт
	
	#Если ВебКлиент Тогда
		Сообщить(НСтр("ru = 'В веб-клиенте приложение не может быть запущено!'"));
	#Иначе
		Версия = внЖурналРегистрацииПовтИсп.внВерсияПлатформы();
		Если Версия = "8.2" Тогда
			Выполнить("ЗапуститьПриложение(""" + СтрЗаменить(Приложение, """", """""") + """)");
		ИначеЕсли Версия = "8.3" Тогда
			Попытка
				Выполнить("НачатьЗапускПриложения(, """ + СтрЗаменить(Приложение, """", """""") + """)");
			Исключение
				Выполнить("ЗапуститьПриложение(""" + СтрЗаменить(Приложение, """", """""") + """)");
			КонецПопытки;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры // ЗапуститьПриложениеПользователю

// Открывает значение в зависимости от режима использования модальности
Процедура ОткрытьЗначениеПользователю(Ссылка) Экспорт
	
	#Если ВебКлиент Тогда
		Сообщить(НСтр("ru = 'В веб-клиенте значение не может быть открыто!'"));
	#Иначе
		Если НЕ внЖурналРегистрацииПовтИсп.ИспользуетсяРежимМодальности() Тогда
			Попытка
				Выполнить("ПоказатьЗначение(,Ссылка)");
			Исключение
				Выполнить("ОткрытьЗначение(Ссылка)");
			КонецПопытки;
		Иначе
			Выполнить("ОткрытьЗначение(Ссылка)");
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры // ОткрытьЗначениеПользователю

// Вызывать эту форму при открытии объекта (из формы объекта) для фиксирования открытия объекта
Процедура внПриОткрытии(Знач Объект, Знач ИмяФормы = "") Экспорт
	
	внЖурналРегистрацииСервер.РегистрацияОткрытияФормы(Объект.Ссылка, внЖурналРегистрации.ПолучитьУзелРИБ(Объект), ИмяФормы);
	
КонецПроцедуры // внПриОткрытии

// Вызывать эту форму при закрытии объекта (из формы объекта) для фиксирования закрытия объекта
Процедура внПриЗакрытии(Знач Объект, Знач ИмяФормы = "") Экспорт
	
	внЖурналРегистрацииСервер.РегистрацияЗакрытияФормы(Объект.Ссылка, внЖурналРегистрации.ПолучитьУзелРИБ(Объект), ИмяФормы);
	
КонецПроцедуры // внПриЗакрытии

// Выполняет запуск хранителя
// C:\Program Files (x86)\1cv82\common\1cestart.exe ENTERPRISE /F"d:\_Проекты\Журнал регистрации во внешней БД MS SQL Server\База для хранения истории\" /AppAutoCheckVersion /AppAutoCheckMode /N"Администратор" /P"
Процедура ВыполнитьЗапускХранителя(ВерсияПлатформыХранителя, ТипИБ, СерверВнешнейИБ, ИмяВнешнейИБ, ПутьКВнешнейИБ, ПользовательВнешнейИБ, ПарольВнешнейИБ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТипИБ) Тогда
		ПоказатьПредупреждениеПользователю("Не заполнен Тип ИБ!");
		Возврат;
	КонецЕсли;
	
	Если ТипИБ = ПредопределенноеЗначение("Перечисление.внТипИБ.Серверная") И (НЕ ЗначениеЗаполнено(СерверВнешнейИБ) ИЛИ НЕ ЗначениеЗаполнено(ИмяВнешнейИБ)) Тогда
		ПоказатьПредупреждениеПользователю("Не заполнены данные серверной ИБ хранителя!");
		Возврат;
	ИначеЕсли ТипИБ = ПредопределенноеЗначение("Перечисление.внТипИБ.Файловая") И НЕ ЗначениеЗаполнено(ПутьКВнешнейИБ) Тогда
		ПоказатьПредупреждениеПользователю("Не заполнены данные файловой ИБ хранителя!");
		Возврат;		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ВерсияПлатформыХранителя) Тогда
		
		Если ВерсияПлатформыХранителя = ПредопределенноеЗначение("Перечисление.внВерсияПлатформыХранителя.v82") Тогда
			Версия		= "1cv82";
		Иначе
			Версия		= "1cv8";
		КонецЕсли;
		
	Иначе
	
		СисИнфо 		= Новый СистемнаяИнформация;
		ПодстрокиВерсии = внЖурналРегистрации.внРазложитьСтрокуВМассивПодстрок(СисИнфо.ВерсияПриложения, ".");
		Если ПодстрокиВерсии[0] + ПодстрокиВерсии[1] = "82" Тогда
			Версия		= "1cv82";
		Иначе
			Версия		= "1cv8";
		КонецЕсли;
		
	КонецЕсли;
	
	Файл = Новый Файл("C:\Program Files (x86)\" + Версия + "\common\1cestart.exe");
	Если НЕ Файл.Существует() Тогда
		Файл = Новый Файл("C:\Program Files\" + Версия + "\common\1cestart.exe");
		Если НЕ Файл.Существует() Тогда
			ПоказатьПредупреждениеПользователю("Не могу запустить ИБ ""Хранитель журнала регистрации""");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаЗапуска = Файл.ПолноеИмя + " ENTERPRISE ";
	
	Если ТипИБ = ПредопределенноеЗначение("Перечисление.внТипИБ.Серверная") Тогда
		СтрокаЗапуска = СтрокаЗапуска + "/S" + СерверВнешнейИБ + "\" + ИмяВнешнейИБ;
	Иначе
		СтрокаЗапуска = СтрокаЗапуска + "/F""" + ПутьКВнешнейИБ + """";
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(ПользовательВнешнейИБ) Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /N""" + ПользовательВнешнейИБ + """";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПарольВнешнейИБ) Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /P""" + ПарольВнешнейИБ + """";
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаЗапуска + " /AppAutoCheckVersion /AppAutoCheckMode";
	
	#Если НЕ ВебКлиент Тогда
		ЗапуститьПриложение(СтрокаЗапуска);
	#Иначе
		ПоказатьПредупреждениеПользователю("В веб-клиенте запуск хранителя не поддерживается");
	#КонецЕсли	
	
КонецПроцедуры // ВыполнитьЗапускХранителя()

///////////////////////////////////////////////////////////////////
// Для того чтобы из формы можно было открывать историю по выбранному
// 
///////////////////////////////////////////////////////////////////
// В модуль ФормыОбъекта
//Процедура ЖурналРегистрации_ИсторияИзменений(Кнопка)
//
//	внЖурналРегистрацииКлиент.КнопкаНажатиеПоказатьИсторию(ЭтаФорма, ЭтотОбъект, Кнопка);
//
//КонецПроцедуры
///////////////////////////////////////////////////////////////////
// В модуль ФормыСписка
//Процедура ЖурналРегистрации_ИсторияИзменений(Кнопка)
//	
//	внЖурналРегистрацииКлиент.КнопкаНажатиеПоказатьИсторию(ЭтаФорма, , Кнопка);
//	
//КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Позволяет указать в каких объектах добавить
Процедура ПриОткрытииФормы(КоманднаяПанель, Объект = Неопределено) Экспорт
	
	Если РольДоступна("внАдминистраторЖурналаРегистрации") ИЛИ РольДоступна("внПросмотрЖурналаРегистрации") Тогда
		ИмяКнопки = "внОткрытиеИсторииИзмененийПоОбъекту";
		Если НЕ (КоманднаяПанель.Кнопки.Найти(ИмяКнопки) = Неопределено) Тогда
			Возврат;
		КонецЕсли;
		Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
			КоманднаяПанель.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			КнопкаИстория = КоманднаяПанель.Кнопки.Вставить(0, ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "Показать журнал по объекту", Новый Действие("ЖурналРегистрации_ИсторияИзменений"));
		Иначе
			КоманднаяПанель.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			КнопкаИстория = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "Показать журнал по объекту", Новый Действие("ЖурналРегистрации_ИсторияИзменений"));
		КонецЕсли;		
		КнопкаИстория.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
		КнопкаИстория.Картинка    = БиблиотекаКартинок.внОтборПоТекущемуОбъекту;
		КнопкаИстория.Подсказка   = "Показать журнал по объекту";
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Процедура - обработчик нажатия кнопки.
//
Процедура КнопкаНажатиеПоказатьИсторию(Форма, Объект = Неопределено, Кнопка) Экспорт
	
	Попытка
		ФормаОбработки = Обработки.внЖурналРегистрации.ПолучитьФорму();
		Если Объект <> Неопределено Тогда
			ФормаОбработки.ОбъектОтбора = внЖурналРегистрации.СистемноеПредставлениеОбъекта(Объект.Ссылка);
		Иначе
			Ссылка = Форма.ТекущийЭлемент.ТекущаяСтрока;
			Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
				Возврат;
			КонецЕсли;		
			ФормаОбработки.ОбъектОтбора = внЖурналРегистрации.СистемноеПредставлениеОбъекта(Ссылка);
		КонецЕсли;
			
		Если НЕ ФормаОбработки.Открыта() Тогда
			ФормаОбработки.Открыть();
		Иначе
			ФормаОбработки.Активизировать();
		КонецЕсли;	
	Исключение
	КонецПопытки;
	
КонецПроцедуры // КнопкаНажатие()

#КонецЕсли

