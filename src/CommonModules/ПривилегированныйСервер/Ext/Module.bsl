Функция ПрочитатьПараметрыПользователяИБ(КодПользователя) Экспорт
	Если РольДоступна("ПолныеПрава") Или РольДоступна("СБ") Или РольДоступна("СБ_КРО") Тогда 
		лКлючАлгоритма = "ОбщийМодуль_ПривелегированныйСервер_ПрочитатьПараметрыПользователяИБ";
		лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
		Если Не лЗамена = Неопределено Тогда
			АлгоритмыЗначениеВозврата = Неопределено;		
			Выполнить(лЗамена);		
			Возврат АлгоритмыЗначениеВозврата;		
		КонецЕсли;	
		///////////////////////////////////////////////////////////////////////////
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(КодПользователя);
		Если ПользовательИБ = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Имя");
		СтруктураВозврата.Вставить("ПолноеИмя");
		СтруктураВозврата.Вставить("АутентификацияСтандартная");
		СтруктураВозврата.Вставить("ПоказыватьВСпискеВыбора");
		СтруктураВозврата.Вставить("ПарольУстановлен");
		СтруктураВозврата.Вставить("АутентификацияОС");
		СтруктураВозврата.Вставить("ПользовательОС");
		СтруктураВозврата.Вставить("ОсновнойИнтерфейс");
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ПользовательИБ);
		СтруктураВозврата.Вставить("ОсновнойИнтерфейс", СокрЛП(ПользовательИБ.ОсновнойИнтерфейс));
		
		СтруктураВозврата.Вставить("Роли", Новый Массив);
		Для Каждого лРоль Из ПользовательИБ.Роли Цикл
			СтруктураВозврата.Роли.Добавить(Новый Структура("Имя", лРоль.Имя));
		КонецЦикла;
		
		
		Возврат СтруктураВозврата;	
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьПользователей() Экспорт
	Если РольДоступна("ПолныеПрава") Или РольДоступна("СБ") Или РольДоступна("СБ_КРО") Тогда 
		Пользователи1 = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Возврат Пользователи1;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Функция ПолучитьПравоПользователя(ПравоДоступа,ВыбПользователь) Экспорт
	Если РольДоступна("ПолныеПрава") Или РольДоступна("СБ") Или РольДоступна("СБ_КРО") Тогда 
		Право = ПравоДоступа(ПравоДоступа,Метаданные,ВыбПользователь);
		Возврат Право;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

//Валиахметов А.А. http://jira.part-kom.ru/browse/XX-2549 25.05.2019
Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт 
	
	СтандартныеПодсистемыСервер.УстановкаПараметровСеанса(ИменаПараметровСеанса);
	
	// Выполняем только один раз - при запуске
	Если ИменаПараметровСеанса = Неопределено Тогда
		
		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Новый Структура);
	
		ПолныеПрава.ОпределитьПараметрыСеансаДляОбменаДанными();
		
		ПолныеПрава.УстановитьПараметрыСеансаДатыПерехода();
		
		ПолныеПрава.УстановитьОсновныеВалютыУпрУчета();
		
		ПолныеПрава.УстановитьПараметрСеансаИзКонстанты("ОпределятьСтратегиюПогашенияПартийТоваровПоСкладу");
		ПолныеПрава.УстановитьПараметрСеансаИзКонстанты("СтратегияСписанияПартий");          
		
		//[Тарасов А.В.]
		ПолныеПрава.ЗаполнитьСписокРегистровЗапрещенныхКПроведению();
		//[Тарасов А.В.]
		
		//Семенов И.П. 30.01.2019 XX-1768(
		ОбменДаннымиКлиентСервер.ИнициализироватьПараметрыДляХраненияТекущихДанных();
		//)Семенов И.П.
	КонецЕсли;
	
	//<< вн

    внЖурналРегистрации.УстановкаПараметровСеанса();

    //>>
	
	// APDEX, ЛНА 2018-09-13
	
	Если ИменаПараметровСеанса = Неопределено ИЛИ ИменаПараметровСеанса.Найти("APDEX_НастройкиЗамеров")<>Неопределено Тогда
		ХранилищеЗначения = Новый ХранилищеЗначения(Новый Соответствие);
		ПараметрыСеанса.APDEX_ТекущийЗамерВремени = ХранилищеЗначения;
		
		
		APDEX_Настройки = APDEX_ОценкаПроизводительностиСерверВызовСервера.ПолучитьНастройки();
		APDEX_НастройкиЗамеров = Новый Структура;
		APDEX_НастройкиЗамеров.Вставить("APDEX_ОтключитьЗамер",APDEX_Настройки.APDEX_ОтключитьЗамер);
		APDEX_НастройкиЗамеров.Вставить("APDEX_МинимальноеВремяЗамера",APDEX_Настройки.APDEX_МинимальноеВремяЗамера);
		//APDEX_НастройкиЗамеров.Вставить("APDEX_ИдентификаторБазыAPDEX",APDEX_Настройки.APDEX_ИдентификаторБазыAPDEX);
		APDEX_НастройкиЗамеров.Вставить("APDEX_СпособЗаписиЗамеров",APDEX_Настройки.APDEX_СпособЗаписиЗамеров);
		
		ПараметрыСеанса.APDEX_НастройкиЗамеров = Новый ФиксированнаяСтруктура(APDEX_НастройкиЗамеров);
	КонецЕсли;
	
	// 01.03.19 Строганов Роман > 
	Если ИменаПараметровСеанса = Неопределено Или ИменаПараметровСеанса.Найти("APDEX_АктивныеКлючевыеОперации") <> Неопределено Тогда
		МассивКлючевыхОпераций = Новый Массив;
		Запрос = Новый Запрос("Выбрать Ссылка Из Справочник.APDEX_КлючевыеОперации Где Не Отключена");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивКлючевыхОпераций.Добавить(Выборка.Ссылка);
		КонецЦикла;
		ПараметрыСеанса.APDEX_АктивныеКлючевыеОперации = Новый ФиксированныйМассив(МассивКлючевыхОпераций);
	КонецЕсли;
	// 01.03.19 Строганов Роман <
	
	Если ИменаПараметровСеанса = Неопределено Или ИменаПараметровСеанса.Найти("КэшАлгоритмов") <> Неопределено  Тогда 
		// Алгоритмы, ЛНА	
		Алгоритмы_УстановитьПараметрыСеанса();
	КонецЕсли;
	Если ИменаПараметровСеанса = Неопределено Или ИменаПараметровСеанса.Найти("АктивныеЗадачиJIRA") <> Неопределено  Тогда 
		//ХудинВВ XX-2269
		ЗадачиJira_УстановитьПараметрыСеанса();
	КонецЕсли;
	
КонецПроцедуры
//Конец Валиахметов А.А. http://jira.part-kom.ru/browse/XX-2549 25.05.2019


