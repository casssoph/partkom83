
Процедура ОтправитьЗаказы() Экспорт

	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_ОтправитьЗаказы";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////
	
	СтрокаАвторизации = ПолучитьСтрокуАвторизации();
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", СтрокаАвторизации);
	Заголовки.Вставить("Content-Type", "application/json");
	
	ОбъектыКВыгрузке = Новый Массив;
	ЗаполнитьОбъектыКВыгрузке(ОбъектыКВыгрузке);
	
	ОтказПоВсемСтрокам = Истина;
	ДокументОбъект = Неопределено;
	
	Для Каждого ОбъектКВыгрузке Из ОбъектыКВыгрузке Цикл 
		
		ТелоЗапроса = СформироватьТелоЗапроса(ОбъектКВыгрузке);
		
		Если Не ЗначениеЗаполнено(ТелоЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура;
			
		ПараметрыЗапроса.Вставить("Сервер", ПолучитьАдресСервера());
		ПараметрыЗапроса.Вставить("ТелоЗапроса",	ТелоЗапроса);
		ПараметрыЗапроса.Вставить("Заголовки",		Заголовки);
		ПараметрыЗапроса.Вставить("HTTPМетод",		"post");
		ПараметрыЗапроса.Вставить("АдресРесурса",	"/api/orders");
		
		ТекстОшибки = "";
		Результат = ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки);
		
		Если Результат = Неопределено Тогда
			Ошибка = "Ошибка POST-запроса:" + Символы.ПС + ТекстОшибки;
			ТекстОтвета  = Ошибка;
			ВызватьИсключение Ошибка;
		КонецЕсли;
		
		ТекстОтвета = Результат;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		
		СоответствиеПричинОтказа = Новый Соответствие;
		СоответствиеПричинОтказа.Вставить(0, ПредопределенноеЗначение("Справочник.СостоянияСтрокДокументов.НетНаСкладе"));
		
		МассивИдентификаторов = Новый Массив;
		
		Для Каждого СтрокаРезультат Из Результат Цикл
			
			Если ЗначениеЗаполнено(СтрокаРезультат.SiteID) Тогда
				Идентификатор = СтрокаРезультат.SiteID;
				МассивИдентификаторов.Добавить(Идентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не МассивИдентификаторов.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК ДокументСсылка,
		|	ИдентификаторыСтрокЗаявок.IDSite КАК IDSite,
		|	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки
		|ИЗ
		|	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|		ПО ИдентификаторыСтрокЗаявок.Заказ = ЗаказПоставщику.Ссылка
		|ГДЕ
		|	ИдентификаторыСтрокЗаявок.IDSite В(&МассивИдентификаторов)
		|ИТОГИ ПО
		|	ДокументСсылка";
		
		Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
		
		ВыборкаИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаИтог.Следующий() Цикл
			
			ДокументОбъект = ВыборкаИтог.ДокументСсылка.ПолучитьОбъект();
			ПоследняяКорректировка = ОбщегоНазначения.ПолучитьПоследнююКорректировкуЗаказа(ВыборкаИтог.ДокументСсылка);
			СоответствиеДанныхКЗакрытию = ПолучитьСоответствиеДанныхКЗакрытию(?(ЗначениеЗаполнено(ПоследняяКорректировка), ПоследняяКорректировка, ВыборкаИтог.ДокументСсылка));
			
			ТабПричинОтказа  = ПоследняяКорректировка.ПричиныОтказов.Выгрузить();
			ТабТоваров = ПоследняяКорректировка.Товары.Выгрузить();
			
			Выборка = ВыборкаИтог.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Идентификатор = Выборка.IDSite;
				СтрокаЗаявки = Выборка.СтрокаЗаявки;
				
				Если Не ЗначениеЗаполнено(СтрокаЗаявки) Тогда	
					// Зафиксировать статус
					МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект = СтрокаЗаявки;
					МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.EMEX_СтатусЗаказа;
					МенеджерЗаписи.Значение = -99;
					МенеджерЗаписи.Записать();
					ВызватьИсключение "EMEX: не найдена строка заявки: " + Выборка.SiteID;
				КонецЕсли;
				
				СтрокаРезультата = Неопределено;
				
				Для Каждого Стр Из Результат Цикл
					Если Стр.siteId = Выборка.IDSite Тогда
						СтрокаРезультата = Стр;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокаРезультата = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не СтрокаРезультата.Свойство("ResultCode") Тогда
					ВызватьИсключение "EMEX: Не найдено свойство «ResultCode». SiteID: + " + Выборка.SiteID;
				КонецЕсли;
				
				ПричинаОтказа = СоответствиеПричинОтказа[СтрокаРезультата.ResultCode];
				
				Если ПричинаОтказа = Неопределено Тогда
					ПричинаОтказа = ПредопределенноеЗначение("Справочник.СостоянияСтрокДокументов.НетНаСкладе");
				КонецЕсли;
				
				Если СтрокаРезультата.ResultCode < 0 Тогда
					// Зафиксировать полный отказ по строке в документе "Заказ поставщику"
					
					СтрокаЗаявки = Выборка.СтрокаЗаявки;
					
					ДоступноКЗакрытию = СоответствиеДанныхКЗакрытию[СтрокаЗаявки];
					Если ДоступноКЗакрытию = Неопределено Тогда
						ДоступноКЗакрытию = 0;
					КонецЕсли;
					
					ДоступноеКоличество = 0;
					КоличествоКЗакрытию  = ДоступноКЗакрытию - ДоступноеКоличество; 
					
					НайдСтроки = ТабТоваров.НайтиСтроки(Новый Структура("СтрокаЗаявки", СтрокаЗаявки)); 
					Если НайдСтроки.Количество() И КоличествоКЗакрытию > 0  Тогда 
						Для Каждого НайдСтрока Из НайдСтроки Цикл
							НовСтрока = ТабПричинОтказа.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрока,НайдСтрока,"СтрокаЗаявки,СтрокаЗаказа,КлючСвязи");
							НовСтрока.ПричинаОтказа = ПричинаОтказа;
							КоличествоПоДокументу = НайдСтрока.Количество;
							Если КоличествоКЗакрытию > КоличествоПоДокументу Тогда
								НовСтрока.Количество = КоличествоПоДокументу;
								КоличествоКЗакрытию = КоличествоКЗакрытию - КоличествоПоДокументу;
							Иначе 
								НовСтрока.Количество = КоличествоКЗакрытию;
								КоличествоКЗакрытию = 0;
							КонецЕсли;
						КонецЦикла; 
					КонецЕсли;
				Иначе
					ОтказПоВсемСтрокам = Ложь;
					
					// Зафиксировать GlobalID
					Если ЗначениеЗаполнено(СтрокаРезультат.GlobalID) Тогда
						МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Объект = СтрокаЗаявки;
						МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.EMEX_GlobalId;
						МенеджерЗаписи.Значение = СтрокаРезультата.GlobalID;
						МенеджерЗаписи.Записать(); 
					КонецЕсли;					
				КонецЕсли;
				
				// Зафиксировать статус
				МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = СтрокаЗаявки;
				МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.EMEX_СтатусЗаказа;
				МенеджерЗаписи.Значение = СтрокаРезультата.ResultCode;
				МенеджерЗаписи.Записать();
				
			КонецЦикла;
			
			Если ТабПричинОтказа.Количество() Тогда
				Документы.ЗаказПоставщику.ЗаписатьКорректировкуЗаказа(ПоследняяКорректировка, ТабТоваров, ТабПричинОтказа);
			КонецЕсли;
			
			Если ДокументОбъект <> Неопределено Тогда
				Если ОтказПоВсемСтрокам Тогда 
					ДокументОбъект.СтатусДокумента = ПредопределенноеЗначение("Справочник.СтатусыДокументов.ЗаказПоставщикуЗакрыт");
				Иначе
					ДокументОбъект.СтатусДокумента = ПредопределенноеЗначение("Справочник.СтатусыДокументов.ОбработанПоставщиком");
				КонецЕсли;
				
				Попытка
					ДокументОбъект.Записать();
				Исключение
					ВызватьИсключение "EMEX: не удалось записать заказ поставщику. GUID: " + ВыборкаИтог.ДокументСсылка.УникальныйИдентификатор();
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьСтатусы() Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_ПрочитатьСтатусы";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////
	
	СтрокаАвторизации = ПолучитьСтрокуАвторизации();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", СтрокаАвторизации);
	Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрайсыПоставщиков.Код
	|ИЗ
	|	Справочник.ПрайсыПоставщиков КАК ПрайсыПоставщиков
	|ГДЕ
	|	ПрайсыПоставщиков.Владелец = &Контрагент";
	
	КонтрагентEMEX = ПолучитьКонтрагентаEMEX();
	
	Запрос.УстановитьПараметр("Контрагент", КонтрагентEMEX.ОсновнаяТорговаяТочка);
	
	ВыборкаProviderID = Запрос.Выполнить().Выбрать();
	
	ПоследнийTimestamp = Константы.EMEX_СервисДвижений_TimeStamp.Получить();
	НовыйTimestamp = Неопределено;
	
	Пока ВыборкаProviderID.Следующий() Цикл
		
		АдресРесурса = "/api/orders/state/?providerId=%1&timestamp=%2";
		АдресРесурса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(АдресРесурса, ВыборкаProviderID.Код, ПоследнийTimestamp); 
		
		ПараметрыЗапроса = Новый Структура;
		
		ПараметрыЗапроса.Вставить("Сервер",			ПолучитьАдресСервера());
		ПараметрыЗапроса.Вставить("ТелоЗапроса",	"/");
		ПараметрыЗапроса.Вставить("Заголовки",		Заголовки);
		ПараметрыЗапроса.Вставить("HTTPМетод",		"get");
		
		ПараметрыЗапроса.Вставить("АдресРесурса", АдресРесурса);
		
		ТелоЗапроса = АдресРесурса;
		
		ТекстОшибки = "";
		Результат = ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки);
		
		Если Результат = Неопределено Тогда
			Ошибка = "Ошибка GET-запроса:" + Символы.ПС + ТекстОшибки;
			ТекстОтвета  = Ошибка;
			ВызватьИсключение Ошибка;
		КонецЕсли;
		
		ТекстОтвета = Результат;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		
		Если Не Результат.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИдентификаторов = Новый Массив;
		
		Для Каждого СтрокаРезультат Из Результат Цикл
			
			Если ЗначениеЗаполнено(СтрокаРезультат.SiteID) Тогда
				Идентификатор = СтрокаРезультат.SiteID;
				МассивИдентификаторов.Добавить(Идентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не МассивИдентификаторов.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НовыйTimestamp) Тогда
			НовыйTimestamp = Результат[Результат.ВГраница()].timestamp;
		КонецЕсли;
		
		ПричинаОтказа = Справочники.СостоянияСтрокДокументов.НетНаСкладе;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК ДокументСсылка,
		|	ИдентификаторыСтрокЗаявок.IDSite КАК IDSite,
		|	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки
		|ИЗ
		|	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|		ПО ИдентификаторыСтрокЗаявок.Заказ = ЗаказПоставщику.Ссылка
		|ГДЕ
		|	ИдентификаторыСтрокЗаявок.IDSite В(&МассивИдентификаторов)
		|ИТОГИ ПО
		|	ДокументСсылка";
		
		Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
		
		ВыборкаИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаИтог.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаИтог.ДокументСсылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = ВыборкаИтог.ДокументСсылка.ПолучитьОбъект();
			ПоследняяКорректировка = ОбщегоНазначения.ПолучитьПоследнююКорректировкуЗаказа(ВыборкаИтог.ДокументСсылка);
			ОтказыОтражены = Ложь;
			
			СоответствиеДанныхКЗакрытию = ПолучитьСоответствиеДанныхКЗакрытию(?(ЗначениеЗаполнено(ПоследняяКорректировка), ПоследняяКорректировка, ВыборкаИтог.ДокументСсылка));
			
			ТабПричинОтказа  = ПоследняяКорректировка.ПричиныОтказов.Выгрузить();
			ТабТоваров = ПоследняяКорректировка.Товары.Выгрузить();
			
			Выборка = ВыборкаИтог.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				СтрокаРезультата = Неопределено;
				Для Каждого Стр Из Результат Цикл
					Если Стр.siteId = Выборка.IDSite Тогда
						СтрокаРезультата = Стр;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокаРезультата = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = Выборка.СтрокаЗаявки;
				МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.EMEX_СтатусЗаказа;
				МенеджерЗаписи.Значение = СтрокаРезультата.Status;
				МенеджерЗаписи.Записать();
				
				Если СтрокаРезультата.Status < 0 Тогда
					ДоступноеКоличество = 0;
				Иначе
					Если СтрокаРезультата.Свойство("ansQuantity") Тогда
						ДоступноеКоличество = Число(СтрокаРезультата.ansQuantity);
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Объект = Выборка.СтрокаЗаявки;
				МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.EMEX_ДоступноеКоличество;
				МенеджерЗаписи.Значение = ДоступноеКоличество;
				МенеджерЗаписи.Записать();
				
				СтрокаЗаявки = Выборка.СтрокаЗаявки;
				
				ДоступноКЗакрытию = СоответствиеДанныхКЗакрытию[СтрокаЗаявки];
				Если ДоступноКЗакрытию = Неопределено Тогда
					ДоступноКЗакрытию = 0;
				КонецЕсли;
				
				КоличествоКЗакрытию  = ДоступноКЗакрытию - ДоступноеКоличество; 
				
				НайдСтроки = ТабТоваров.НайтиСтроки(Новый Структура("СтрокаЗаявки", СтрокаЗаявки)); 
				Если НайдСтроки.Количество() И КоличествоКЗакрытию > 0  Тогда 
					Для Каждого НайдСтрока Из НайдСтроки Цикл
						ОтказыОтражены = Истина;
						НовСтрока = ТабПричинОтказа.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока,НайдСтрока,"СтрокаЗаявки,СтрокаЗаказа,КлючСвязи");
						НовСтрока.ПричинаОтказа = ПричинаОтказа;
						КоличествоПоДокументу = НайдСтрока.Количество;
						Если КоличествоКЗакрытию > КоличествоПоДокументу Тогда
							НовСтрока.Количество = КоличествоПоДокументу;
							КоличествоКЗакрытию = КоличествоКЗакрытию - КоличествоПоДокументу;
						Иначе 
							НовСтрока.Количество = КоличествоКЗакрытию;
							КоличествоКЗакрытию = 0;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла;
			
			Если ТабПричинОтказа.Количество() И ОтказыОтражены Тогда
				Документы.ЗаказПоставщику.ЗаписатьКорректировкуЗаказа(ПоследняяКорректировка, ТабТоваров, ТабПричинОтказа);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Константы.EMEX_СервисДвижений_TimeStamp.Установить(НовыйTimestamp);

КонецПроцедуры

Процедура ЗаполнитьОбъектыКВыгрузке(Результат)
	
	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_ЗаполнитьОбъектыКВыгрузке";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|	И ЗаказПоставщику.Контрагент = &Контрагент
	|	И ЗаказПоставщику.СтатусДокумента В (&СтатусыДокументов)";
	
	Запрос.УстановитьПараметр("Контрагент", ПолучитьКонтрагентаEMEX());
	
	СтатусыДокументов = Новый Массив;
	СтатусыДокументов.Добавить(Справочники.СтатусыДокументов.НовыйЗаказПоставщику);
	СтатусыДокументов.Добавить(Справочники.СтатусыДокументов.ПроведенЗаказПоставщику);
	СтатусыДокументов.Добавить(Справочники.СтатусыДокументов.ОтправленПоставщику);
	
	Запрос.УстановитьПараметр("СтатусыДокументов", СтатусыДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки)
	
	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_ВыполнитьЗапросWebProxy";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////

	Попытка
		ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыЗапроса.Сервер,,,,,,ssl);
		
		HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса.АдресРесурса, ПараметрыЗапроса.Заголовки); 
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса.ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Если НРег(ПараметрыЗапроса.HTTPМетод) = "get" Тогда
			Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		Иначе
			Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли;
		
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		Если Ответ.КодСостояния = 200 Тогда
			ВозвращаемоеЗначение = ТекстОтвета;
		Иначе
			ТекстОшибки = ТекстОтвета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Сообщить("Ошибка выполнение запроса: "+Ответ.КодСостояния+", "+ТекстОшибки);
		КонецЕсли;
		
		HTTPСоединение = Неопределено;
		HTTPЗапрос = Неопределено;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СформироватьТелоЗапроса(СсылкаНаОбъект)
	
	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_СформироватьТелоЗапроса";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////
	
	//[
	//{
	//"providerId": "10406",
	//"orders": [
	//{
	//"siteId": "SS94917136",
	//"makeName": "CBD",
	//"detailNum": "STAL132",
	//"detailName": "Стронгер 50400.76 перфорированный внутренний узел.",
	//"quantity": "1",
	//"price": "643.20",
	//"priceLogo": "RAIS",
	//"deliveryRegionType": "PRI",
	//},
	//],
	//"providerId": "10408",
	//"orders": [
	//{
	//"siteId": "SS94997522",
	//"makeName": "Great Wall",
	//"detailNum": "8400017F00",
	//"detailName": "Ресничка под фару левая пикап Safe 8400017-F00",
	//"quantity": "1",
	//"price": "117.60",
	//"priceLogo": "JTQS",
	//"deliveryRegionType": "PRI",
	//},
	//]
	//}
	//]
	
	ТекстЗапросаСформирован = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.СтрокаЗаявки.ПрайсПоставщика.Код КАК providerId,
	|	ЗаказПоставщикуТовары.СтрокаЗаявки.IDSite КАК siteId,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуТовары.СтрокаЗаявки.ИзготовительПоставщика = """"
	|			ТОГДА СправочникНоменклатура.Изготовитель.Наименование
	|		ИНАЧЕ ЗаказПоставщикуТовары.СтрокаЗаявки.ИзготовительПоставщика
	|	КОНЕЦ КАК makeName,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуТовары.СтрокаЗаявки.АртикулПоставщика = """"
	|			ТОГДА СправочникНоменклатура.Артикул
	|		ИНАЧЕ ЗаказПоставщикуТовары.СтрокаЗаявки.АртикулПоставщика
	|	КОНЕЦ КАК detailNum,
	|	СправочникНоменклатура.Наименование КАК detailName,
	|	ЗаказПоставщикуТовары.Количество КАК quantity,
	|	ЗаказПоставщикуТовары.Цена КАК price,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, """""""") КАК priceLogo,
	|	""PRI"" КАК deliveryRegionType
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ЗаказПоставщикуТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ЗаказПоставщикуТовары.СтрокаЗаявки = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.EMEX_PriceLogo))
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	providerId";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТелоЗапроса = "[" + Символы.ПС;
	ТелоЗапроса = ТелоЗапроса + "{" + Символы.ПС;
	
	Пока ВыборкаИтог.Следующий() Цикл
		
		ТелоЗапроса = ТелоЗапроса + """providerId"": """ + ВыборкаИтог.providerId + """," + Символы.ПС;
		ТелоЗапроса = ТелоЗапроса + """orders"": [" + Символы.ПС;
		
		Выборка = ВыборкаИтог.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.priceLogo) Или Выборка.priceLogo = """" Тогда
				Продолжить;
			КонецЕсли;
			
			ТелоЗапроса = ТелоЗапроса + "{" + Символы.ПС;
			
			detailName = СтрЗаменить(Выборка.detailName, """","");
			detailName = СтрЗаменить(detailName, "/","//");
			detailName = СтрЗаменить(detailName, "\","\\");
			
			ТелоЗапроса = ТелоЗапроса + """siteId"": """ + Выборка.siteId + """," + Символы.ПС;
			ТелоЗапроса = ТелоЗапроса + """makeName"": """ + Выборка.makeName + """," + Символы.ПС;
			ТелоЗапроса = ТелоЗапроса + """detailNum"": """ + Выборка.detailNum + """," + Символы.ПС;
			ТелоЗапроса = ТелоЗапроса + """detailName"": """ +  detailName + """," + Символы.ПС;
			ТелоЗапроса = ТелоЗапроса + """quantity"": """ + XMLСтрока(Выборка.quantity) + """," + Символы.ПС;
			ТелоЗапроса = ТелоЗапроса + """price"": """ + Формат(Выборка.price, "ЧДЦ=2; ЧРД=.; ЧГ=0") + """," + Символы.ПС;
			ТелоЗапроса = ТелоЗапроса + """priceLogo"": """ + Выборка.priceLogo + """," + Символы.ПС;
			ТелоЗапроса = ТелоЗапроса + """deliveryRegionType"": """ + Выборка.deliveryRegionType + """," + Символы.ПС;
			
			ТелоЗапроса = ТелоЗапроса + "}," + Символы.ПС;
			
			ТекстЗапросаСформирован = Истина;
		КонецЦикла;
		
		ТелоЗапроса = ТелоЗапроса + "]," + Символы.ПС;
		
	КонецЦикла;
	
	ТелоЗапроса = ТелоЗапроса + "}" + Символы.ПС;
	ТелоЗапроса = ТелоЗапроса + "]" + Символы.ПС;
	
	Если ТекстЗапросаСформирован Тогда
		Возврат ТелоЗапроса;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоответствиеДанныхКЗакрытию(ДокументСсылка)
	
	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_ПолучитьСоответствиеДанныхКЗакрытию";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////
	
	ЗапросДанныхкОтмене =  Новый Запрос;
	ТексЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.СтрокаЗаявки,
	|	ЗаказПоставщикуТовары.Ссылка,
	|	ЗаказПоставщикуТовары.Количество
	|ПОМЕСТИТЬ СтрокиЗаявкиДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КорректировкаЗаказаПоставщикуТовары.СтрокаЗаявки,
	|	КорректировкаЗаказаПоставщикуТовары.Ссылка,
	|	КорректировкаЗаказаПоставщикуТовары.Количество
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику.Товары КАК КорректировкаЗаказаПоставщикуТовары
	|ГДЕ
	|	КорректировкаЗаказаПоставщикуТовары.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКЗакрытию.СтрокаЗаявки,
	|	СУММА(ДанныеКЗакрытию.КоличествоОстатокЗаказов - ДанныеКЗакрытию.КоличествоРазмещено) КАК КоличествоКЗакрытию
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПоставщикамОстатки.СтрокаЗаявки КАК СтрокаЗаявки,
	|		ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстатокЗаказов,
	|		СУММА(ЕСТЬNULL(РазмещенияСтрокЗаказов.Количество, 0)) КАК КоличествоРазмещено
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				&Период,
	|				СтрокаЗаявки В
	|					(ВЫБРАТЬ
	|						СтрокиЗаявкиДокумента.СтрокаЗаявки КАК СтрокаЗаявки
	|					ИЗ
	|						СтрокиЗаявкиДокумента КАК СтрокиЗаявкиДокумента)) КАК ЗаказыПоставщикамОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещенияСтрокЗаказов КАК РазмещенияСтрокЗаказов
	|			ПО ЗаказыПоставщикамОстатки.СтрокаЗаявки = РазмещенияСтрокЗаказов.СтрокаЗаявки
	|				И (РазмещенияСтрокЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|				И (РазмещенияСтрокЗаказов.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг)
	|				И (ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровОтгружен))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПоставщикамОстатки.СтрокаЗаявки,
	|		ЗаказыПоставщикамОстатки.КоличествоОстаток) КАК ДанныеКЗакрытию
	|ГДЕ
	|	ДанныеКЗакрытию.КоличествоОстатокЗаказов - ДанныеКЗакрытию.КоличествоРазмещено > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКЗакрытию.СтрокаЗаявки";
	
	ЗапросДанныхкОтмене.Текст = ТексЗапроса;
	ЗапросДанныхкОтмене.УстановитьПараметр("Период", Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Включая));
	ЗапросДанныхкОтмене.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Новый Соответствие;
	Выборка = ЗапросДанныхкОтмене.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.СтрокаЗаявки, Выборка.КоличествоКЗакрытию); 
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьСтрокуАвторизации()
	
	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_ПолучитьСтрокуАвторизации";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////
	
	Настройка = Справочники.НастройкиРеквизитовДляОбменов.EMEXСтрокаАвторизации;
	
	Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда 
		Если ЗначениеЗаполнено(Настройка.СтрокаДляРабочейБазы) Тогда
			СтрокаАвторизации = Настройка.СтрокаДляРабочейБазы;
		Иначе
			СтрокаАвторизации = "Bearer b73ddba3163c6f2b8e4a28ce4fb78b7c0b1072fe5199f71e2922f426679f4a8a";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Настройка.СтрокаДляТестовойБазы) Тогда
			СтрокаАвторизации = Настройка.СтрокаДляТестовойБазы;
		Иначе
			СтрокаАвторизации = "Bearer f98280528885a7a3c911edf66ca0b820ccb6b7ef75e935ba856339ba42b830f1";
		КонецЕсли;
	КонецЕсли;	
	
	Возврат СтрокаАвторизации;
	
КонецФункции

Функция ПолучитьАдресСервера()
	
	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_ПолучитьАдресСервера";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////
	
	Настройка = Справочники.НастройкиРеквизитовДляОбменов.EMEXАдресСервера;
	
	Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда 
		Если ЗначениеЗаполнено(Настройка.СтрокаДляРабочейБазы) Тогда
			АдресСервера = Настройка.СтрокаДляРабочейБазы;
		Иначе
			АдресСервера = "ws-rest.emex.ru";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Настройка.СтрокаДляТестовойБазы) Тогда
			АдресСервера = Настройка.СтрокаДляТестовойБазы;
		Иначе
			АдресСервера = "ws-dev.emex.ru";
		КонецЕсли;
	КонецЕсли;
	
	Возврат АдресСервера;
	
КонецФункции

Функция ПолучитьКонтрагентаEMEX()
	
	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_ПолучитьКонтрагентаEMEX";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////
	
	КонтрагентEMEX = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "EMEX: Контрагент");
	
	Если Не ЗначениеЗаполнено(КонтрагентEMEX) Тогда
		ВызватьИсключение "EMEX: В настройках подсистем не указан контрагент.";
	КонецЕсли;
	
КонецФункции

Процедура ЗафиксироватьTimeStamp(TimeStamp, ProviderID)
	
	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_ЗафиксироватьTimeStamp";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////

	Если Не ЗначениеЗаполнено(TimeStamp) Тогда
		Возврат;
	КонецЕсли;
	
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("EMEX_TimeStamp");

	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Константы.EMEX_СервисДвижений_TimeStamp.Установить(TimeStamp);
	Иначе
		
		ПрайсПоставщика = Справочники.ПрайсыПоставщиков.НайтиПоКоду(ProviderID);
		
		Если Не ЗначениеЗаполнено(ПрайсПоставщика) Тогда
			ВызватьИсключение "Не удалось найти прайс поставщика с кодом: " + ProviderID;
		КонецЕсли;

		МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Свойство = Свойство;
		МенеджерЗаписи.Объект = ПрайсПоставщика;
		МенеджерЗаписи.Значение = TimeStamp;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьTimeStamp(ProviderID)
	
	лКлючАлгоритма = "ОбщийМодуль_ИнтеграцияEMEXКлиентСервер_ПолучитьTimeStamp";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////////////////

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	ПрайсПоставщика = Справочники.ПрайсыПоставщиков.НайтиПоКоду(ProviderID);
	
	Если Не ЗначениеЗаполнено(ПрайсПоставщика) Тогда
		ВызватьИсключение "Не удалось найти прайс поставщика с кодом: " + ProviderID;
	КонецЕсли;
	
	Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("EMEX_TimeStamp");
	
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Возврат Константы.EMEX_СервисДвижений_TimeStamp.Получить()
	Иначе
		Запрос.УстановитьПараметр("Объект", ПрайсПоставщика);
		Запрос.УстановитьПараметр("Свойство", Свойство);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Константы.EMEX_СервисДвижений_TimeStamp;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Значение;
	КонецЕсли;
	
КонецФункции