
Процедура ЗаказПокупателяПриЗаписи(Источник, Отказ) Экспорт

	мзДР = РегистрыСведений.МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.СоздатьМенеджерЗаписи();
	мзДР.Заказ = Источник.Ссылка;
	мзДР.Прочитать();
	Если Не ЗначениеЗаполнено(мзДР.Статус) Тогда
		мзДР.Заказ	= Источник.Ссылка;
		мзДР.Статус	= Перечисления.МегаЛогист_СтатусыЗаказа.Новый;
		Попытка
			мзДР.Записать(Истина);
		Исключение
			Отказ = Истина;
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусЗаказаПокупателя(ЗаказПокупателяСсылка, Статус, Отказ = Ложь) Экспорт
	
	мзДР = РегистрыСведений.МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.СоздатьМенеджерЗаписи();
	мзДР.Заказ = ЗаказПокупателяСсылка;
	мзДР.Прочитать();
	мзДР.Заказ	= ЗаказПокупателяСсылка;
	мзДР.Статус	= Статус;
	Попытка
		мзДР.Записать(Истина);
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
	мзДР = РегистрыСведений.МегаЛогист_ИсторияСтатусовЗаказовПокупателей.СоздатьМенеджерЗаписи();
	мзДР.Период				= ТекущаяДата();
	мзДР.ЗаказПокупателя	= ЗаказПокупателяСсылка;
	мзДР.Статус				= Статус;
	мзДР.Ответственный		= ПараметрыСеанса.ТекущийПользователь;
	Попытка
		мзДР.Записать(Истина);
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСтатусЗаказаПокупателя(Заказ) Экспорт
	
	Статус = Перечисления.МегаЛогист_СтатусыЗаказа.Новый;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ,
	               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Статус
	               |ИЗ
	               |	РегистрСведений.МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей КАК МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей
	               |ГДЕ
	               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ = &Заказ";
	Запрос.УстановитьПараметр("Заказ",Заказ);			   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Статус = Выборка.Статус;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ПолучитьДопРеквизитЗаказаПокупателя(Заказ, ИмяРеквизита) Экспорт
	
	Результат = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ,
	               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей." + ИмяРеквизита + " КАК ЗначениеРеквизита
	               |ИЗ
	               |	РегистрСведений.МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей КАК МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей
	               |ГДЕ
	               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ = &Заказ";
	Запрос.УстановитьПараметр("Заказ",Заказ);			   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ЗначениеРеквизита;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСокращенныйАдресДоставки(Заказ) Экспорт
	
	Результат = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ,
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей КАК МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ПО МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ.Контрагент = КонтактнаяИнформация.Объект
	               |			И МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.АдресДоставкиВид = КонтактнаяИнформация.Вид
	               |			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	               |ГДЕ
	               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ = &Заказ";
	Запрос.УстановитьПараметр("Заказ",Заказ);			   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСписокВыбораВремени(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	Для а = 0 по 23 Цикл
		ВремяСписка = НачалоДня(ТекущаяДата()) + а*60*60;
		СписокВыбора.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='ЧЧ:мм'"));
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьСтатусОплатыЗаказаПокупателя(ЗаказПокупателя) Экспорт

	СтатусОплаты = Перечисления.МегаЛогист_СтатусыОплаты.НеОплачен;
	Если Не ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат СтатусОплаты;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовРасход, 0) = 0
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.НеОплачен)
	               |		КОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрРасход >= РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрПриход
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.Оплачен)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.ЧастичноОплачен)
	               |	КОНЕЦ КАК СтатусОплаты
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКонтрагентами.ОстаткиИОбороты(, , , , Сделка = &ЗаказПокупателя) КАК РасчетыСКонтрагентамиОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(, , , , Сделка = &ЗаказПокупателя) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты
	               |		ПО РасчетыСКонтрагентамиОстаткиИОбороты.Сделка = ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка";
	Запрос.УстановитьПараметр("ЗаказПокупателя" ,ЗаказПокупателя);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтатусОплаты = Выборка.СтатусОплаты;
	КонецЕсли;
	
	Возврат СтатусОплаты;
	
КонецФункции

Функция ПолучитьСуммуОплатыЗаказаПокупателя(ЗаказПокупателя) Экспорт
	
	СуммаОплаты="";
	
	Если Не ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат 0;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовРасход, 0) = 0
	               |			ТОГДА РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрПриход
	               |		КОГДА ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрРасход >= РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрПриход
	               |			ТОГДА 0
	               |		ИНАЧЕ (РасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрПриход - ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрРасход)  
	               |	КОНЕЦ КАК СуммаОплаты
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКонтрагентами.ОстаткиИОбороты(, , , , Сделка = &ЗаказПокупателя) КАК РасчетыСКонтрагентамиОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(, , , , Сделка = &ЗаказПокупателя) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты
	               |		ПО РасчетыСКонтрагентамиОстаткиИОбороты.Сделка = ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Сделка";
	Запрос.УстановитьПараметр("ЗаказПокупателя" ,ЗаказПокупателя);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаОплаты = Выборка.СуммаОплаты;
	КонецЕсли;
	
	Возврат СуммаОплаты;
	
КонецФункции

Функция ПолучитьСтатусОтгрузкиЗаказаПокупателя(ЗаказПокупателя) Экспорт

	СтатусОтгрузки = Перечисления.МегаЛогист_СтатусыОтгрузки;
	Если Не ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат СтатусОтгрузки;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
	               |	ВЫБОР
	               |		КОГДА ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход = ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОтгрузки.НеОтгружен)
	               |		КОГДА ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток, 0) <= 0
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОтгрузки.Отгружен)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОтгрузки.ЧастичноОтгружен)
	               |	КОНЕЦ КАК СостояниеОтгрузки,
	               |	ВЫБОР
	               |		КОГДА РасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовРасход = 0
	               |				ИЛИ РасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовРасход ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.НеОплачен)
	               |		КОГДА РасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовРасход >= РасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовПриход
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.Оплачен)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыОплаты.ЧастичноОплачен)
	               |	КОНЕЦ КАК СтатусОплаты
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(, , , , ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.ОстаткиИОбороты(, , , , Сделка = &ЗаказПокупателя) КАК РасчетыСКонтрагентамиОстаткиИОбороты
	               |		ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = РасчетыСКонтрагентамиОстаткиИОбороты.Сделка";
	Запрос.УстановитьПараметр("ЗаказПокупателя" ,ЗаказПокупателя);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтатусОтгрузки = Выборка.СостояниеОтгрузки;
	КонецЕсли;
	
	Возврат СтатусОтгрузки;
	
КонецФункции

Функция ПолучитьСтатусДоставкиЗаказаПокупателя(ЗаказПокупателя) Экспорт

	СтатусДоставки = Перечисления.МегаЛогист_СтатусыДоставки.НеВыполнена;
	Если Не ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат СтатусДоставки;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ДополнительныеРеквизитыЗаказовПокупателей.Заказ КАК Заказ,
	//			   |	ВЫБОР
	//			   |		КОГДА ДополнительныеРеквизитыЗаказовПокупателей.Самовывоз = ИСТИНА
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Самовывоз)
	//			   |		ИНАЧЕ ВЫБОР
	//			   |				КОГДА МЗ_Выполняются.Статус > 0
	//			   |					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Выполняется)
	//			   |				ИНАЧЕ ВЫБОР
	//			   |						КОГДА МЗ_Выполнен.Статус > 0
	//			   |							ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Выполнена)
	//			   |						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.НеВыполнена)
	//			   |					КОНЕЦ
	//			   |			КОНЕЦ
	//			   |	КОНЕЦ КАК СтатусДоставки
	//			   |ИЗ
	//			   |	РегистрСведений.ДополнительныеРеквизитыЗаказовПокупателей КАК ДополнительныеРеквизитыЗаказовПокупателей
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			   |			ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.МаршрутноеЗадание.ЗаказПокупателя КАК ЗаказПокупателя,
	//			   |			КОЛИЧЕСТВО(ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.Статус) КАК Статус
	//			   |		ИЗ
	//			   |			РегистрСведений.ИсторияСтатусовМаршрутныхЗаданий.СрезПоследних(, Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЗаданий.Выполняется)) КАК ИсторияСтатусовМаршрутныхЗаданийСрезПоследних
	//			   |		
	//			   |		СГРУППИРОВАТЬ ПО
	//			   |			ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.МаршрутноеЗадание.ЗаказПокупателя) КАК МЗ_Выполняются
	//			   |		ПО ДополнительныеРеквизитыЗаказовПокупателей.Заказ = МЗ_Выполняются.ЗаказПокупателя
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			   |			ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.МаршрутноеЗадание.ЗаказПокупателя КАК ЗаказПокупателя,
	//			   |			КОЛИЧЕСТВО(ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.Статус) КАК Статус
	//			   |		ИЗ
	//			   |			РегистрСведений.ИсторияСтатусовМаршрутныхЗаданий.СрезПоследних(, Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЗаданий.Выполнен)) КАК ИсторияСтатусовМаршрутныхЗаданийСрезПоследних
	//			   |		
	//			   |		СГРУППИРОВАТЬ ПО
	//			   |			ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.МаршрутноеЗадание.ЗаказПокупателя) КАК МЗ_Выполнен
	//			   |		ПО ДополнительныеРеквизитыЗаказовПокупателей.Заказ = МЗ_Выполнен.ЗаказПокупателя
	//			   |ГДЕ
	//			   |	ДополнительныеРеквизитыЗаказовПокупателей.Заказ = &ЗаказПокупателя";
	
	
	
	// Возможно, понадобиться добавить в СтатусыДоставки заказов значение "ВыполненаЧастично"
	// На случай, если одна заявка выполнена, а другая к распределению <- сейчас будет показывать "выполнена"
	// В этом случае надо будет чуть чуть изменить приоритеты в запросе
	Запрос.Текст = "ВЫБРАТЬ
	               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ,
	               |	ВЫБОР
	               |		КОГДА МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Самовывоз = ИСТИНА
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыДоставки.Самовывоз)
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА СтатусыПоПриоритетам.ПриоритетСтатусов = 3
	               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыДоставки.Выполняется)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА СтатусыПоПриоритетам.ПриоритетСтатусов = 2
	               |							ТОГДА ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыДоставки.Выполнена)
	               |						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыДоставки.НеВыполнена)
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК СтатусДоставки
	               |ИЗ
	               |	РегистрСведений.МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей КАК МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.МаршрутноеЗадание.ЗаказПокупателя КАК ЗаказПокупателя,
	               |			МАКСИМУМ(ВЫБОР
	               |					КОГДА ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполняется)
	               |						ТОГДА 3
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутныхЗаданий.Выполнен)
	               |								ТОГДА 2
	               |							ИНАЧЕ 1
	               |						КОНЕЦ
	               |				КОНЕЦ) КАК ПриоритетСтатусов
	               |		ИЗ
	               |			РегистрСведений.МегаЛогист_ИсторияСтатусовМаршрутныхЗаданий.СрезПоследних(, ) КАК ИсторияСтатусовМаршрутныхЗаданийСрезПоследних
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ИсторияСтатусовМаршрутныхЗаданийСрезПоследних.МаршрутноеЗадание.ЗаказПокупателя) КАК СтатусыПоПриоритетам
	               |		ПО МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ = СтатусыПоПриоритетам.ЗаказПокупателя
	               |ГДЕ
	               |	МегаЛогист_ДополнительныеРеквизитыЗаказовПокупателей.Заказ = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя" ,ЗаказПокупателя);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтатусДоставки = Выборка.СтатусДоставки;
	КонецЕсли;
	
	Возврат СтатусДоставки;
	
КонецФункции

// Функция считывает источник информации при обращении контрагента
//
// Параметры: 
//  Контрагент.
//
// Возвращаемое значение:
//  Источник.
//
Функция ПрочитатьИсточникИнформацииПриОбращении(Контрагент) Экспорт

	ИсточникИнформации=Контрагент.ИсточникИнформацииПриОбращении;	
	Возврат ИсточникИнформации;

КонецФункции