

Функция ОстаткиБрендовНаСайте(КодПрайса) Экспорт
		
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQLСервер_ОстаткиБрендовНаСайте";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
		|	vsm_sklad.source_maker КАК ИзготовительНаименование,
		|	СУММА(vsm_sklad.f_quantity_int) КАК Остаток
		|ИЗ
		|	ВнешнийИсточникДанных.СайтMySQL_parts_common_nm.Таблица.vsm_sklad КАК vsm_sklad
		|ГДЕ
		|	vsm_sklad.f_provider_id = &КодПрайса
		|
		|СГРУППИРОВАТЬ ПО
		|	vsm_sklad.source_maker";
	
	Запрос.УстановитьПараметр("КодПрайса", КодПрайса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
    Возврат РезультатЗапроса.Выгрузить();

КонецФункции

//ХудинВВ XX-2449 08072019
Функция ВыполнитьЗапросSQL(ТекстЗапроса, вхПараметры = Неопределено) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQLСервер_ВыполнитьЗапросSQL";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Попытка
		СоединениеSQL  = Новый COMОбъект("ADODB.Connection");
		КомандаSQL     = Новый COMОбъект("ADODB.Command");
		ВыборкаSQL     = Новый COMОбъект("ADODB.RecordSet");
		
		СоединениеSQL.ConnectionString = РаботаСSQL.СтрокаСоединенияSQL(вхПараметры);
		
		СоединениеSQL.ConnectionTimeout = 30;
		СоединениеSQL.CommandTimeout = 6000;
		
		СоединениеSQL.Open();
		КомандаSQL.ActiveConnection   = СоединениеSQL;
		КомандаSQL.CommandText = ТекстЗапроса;
		КомандаSQL.Execute();
		
		СоединениеSQL.Close();
		
		ОписаниеОшибки = "";
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

//ХудинВВ XX-2449 08072019
//Если процедуру вызывать в открытой транзакции, то она не сработает, тк в таком случае невозможно получить корректный список баз,
//из-за того, что агент сервера не видит только что созданного пользователя с полными правами (увидит только после завершения транзакции).
//В случае вызова в транзакции, пользователя надо создать заранее, и передать в параметрах ИмяАдминистратора и ПарольАдминистратора (процедура СоздатьВременногоПользователя()). 
//Если эти параметры переданы, удаления пользователя не происходит  (процедура УдалитьВременногоПользователя()).
Функция ОпределитьПараметрыДляSQLПодключения(вхПараметры = Неопределено) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQLСервер_ОпределитьПараметрыДляSQLПодключения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	АдресСервераSQL = "";
	ИмяБазыSQL 		= "";
	ТекстОшибки		= "";	
	
	УдалятьПользователя = Истина;
	ПараметрыВременногоПользователя = Новый Структура;
	Если ТипЗнч(вхПараметры) = Тип("Структура")
		И  вхПараметры.Свойство("ИмяАдминистратора") и вхПараметры.Свойство("ПарольАдминистратора") Тогда
		ПараметрыВременногоПользователя.Вставить("Имя", вхПараметры.ИмяАдминистратора);
		ПараметрыВременногоПользователя.Вставить("Пароль", вхПараметры.ПарольАдминистратора);
		УдалятьПользователя = Ложь;
	Иначе
		ПараметрыВременногоПользователя.Вставить("Имя", "TempUser_"+Строка(Новый УникальныйИдентификатор));
		ПараметрыВременногоПользователя.Вставить("Пароль", "123");
	КонецЕсли;
	
	ПользовательИБ = СоздатьВременногоПользователя(ПараметрыВременногоПользователя);
		
	Попытка
		
		COMСоединитель = Новый COMОбъект("V83.ComConnector");
		СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
		
		АдресКластера 	= НСтр(СтрокаПодключения, "Srvr");
		ИмяБазы 		= НСтр(СтрокаПодключения, "Ref");
		ПозицияПорта 	= Найти(АдресКластера,":");
		
		Если ПозицияПорта = 0 Тогда
			СтрокаСоединенияСАгентомСервера = "tcp://" + АдресКластера;
			ИмяСервераКластера = АдресКластера;
			ПортКластера = 1541;
		Иначе
			СтрокаСоединенияСАгентомСервера = Лев("tcp://" + АдресКластера, СтрДлина("tcp://"+АдресКластера)-2)+"40";
			ИмяСервераКластера = Лев(АдресКластера, ПозицияПорта-1);
			ПортКластера = Число(Сред(АдресКластера, ПозицияПорта+1));
		КонецЕсли;
		
		СоединениеСАгентомСервера = COMСоединитель.ConnectAgent(СтрокаСоединенияСАгентомСервера);
		СписокКластеров = СоединениеСАгентомСервера.GetClusters();	
		ТекКластер = Неопределено;
		Для Каждого Кластер из СписокКластеров Цикл
			Если вРег(Кластер.HostName) = вРег(ИмяСервераКластера) и Кластер.MainPort = ПортКластера Тогда
				ТекКластер = Кластер;
			КонецЕсли;
		КонецЦикла;
		Если ТекКластер = Неопределено Тогда
			ТекстОшибки = "Не найден кластер! Host name: "+вРег(ИмяСервераКластера)+", main port: "+ПортКластера;
		КонецЕсли;
		
		Если ТекстОшибки = "" Тогда
			
			СоединениеСАгентомСервера.Authenticate(ТекКластер,"","");
			СписокВоркеров = СоединениеСАгентомСервера.GetWorkingProcesses(ТекКластер);
			Если СписокВоркеров.GetLength() = 0 Тогда
				ТекстОшибки = "Не найдено рабочих процессов на кластере!"
			КонецЕсли;
			
			Если ТекстОшибки = "" Тогда
				
					Воркер = СписокВоркеров.GetValue(0);
					СоединениеСВоркером = COMСоединитель.ConnectWorkingProcess("tcp://"+Воркер.HostName+":"+СтрЗаменить(Воркер.MainPort,Символы.НПП,""));	
					
					СоединениеСВоркером.AddAuthentication(ПараметрыВременногоПользователя.Имя, ПараметрыВременногоПользователя.Пароль);
					СписокБаз = СоединениеСВоркером.GetInfoBases();
					
					ТекБаза = Неопределено;
					Для Каждого ИБ ИЗ СписокБаз Цикл
						Если ИБ.Name = ИмяБазы Тогда
							ТекБаза = ИБ;
						КонецЕсли;
					КонецЦикла;
					
					Если ТекБаза = Неопределено Тогда
						ТекстОшибки = "Не удалось определить базу в кластере по имени! Имя для определения: "+ИмяБазы;
					Иначе 
						АдресСервераSQL = ТекБаза.DBServerName;
						ИмяБазыSQL 	 	= ТекБаза.DBName;
					КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		             
		ТекстОшибки = "Ошибка определения параметров подключения к базе SQL: "+ОписаниеОшибки();
		
	КонецПопытки;
	
	Если УдалятьПользователя Тогда
		УдалитьВременногоПользователя(ПараметрыВременногоПользователя);
	КонецЕсли;

	Если ТекстОшибки = "" И (Не ЗначениеЗаполнено(ИмяБазыSQL) ИЛИ НЕ ЗначениеЗаполнено(АдресСервераSQL)) Тогда
		ТекстОшибки = "Ошибка определения параметров подключения к базе SQL: не определены имя сервера и адрес базы";
	КонецЕсли;	
		
	Возврат Новый Структура("ИмяБазыSQL, АдресСервераSQL, ТекстОшибки", ИмяБазыSQL, АдресСервераSQL, ТекстОшибки);
	
КонецФункции // ОпределитьПараметрыДляSQLПодключения()

Функция СоздатьВременногоПользователя(ПараметрыВременногоПользователя) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQLСервер_СоздатьВременногоПользователя";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПараметрыВременногоПользователя.Имя);	
	
	Если Пользователь = Неопределено Тогда
		Пользователь 							= ПользователиИнформационнойБазы.СоздатьПользователя();
		Пользователь.Имя 						= ПараметрыВременногоПользователя.Имя;
		Пользователь.ПолноеИмя 					= ПараметрыВременногоПользователя.Имя;
		Пользователь.Пароль 					= ПараметрыВременногоПользователя.Пароль;
		Пользователь.АутентификацияСтандартная 	= Истина;
		Пользователь.Роли.Добавить(Метаданные.Роли.Найти("ПолныеПрава"));
		Пользователь.Роли.Добавить(Метаданные.Роли.Найти("Пользователь"));
		Пользователь.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Пользователь;
	
КонецФункции // ПолучитьИмяАдминаНаСервере();()

Процедура УдалитьВременногоПользователя(ПараметрыВременногоПользователя) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQLСервер_УдалитьВременногоПользователя";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПараметрыВременногоПользователя.Имя);	
	Если НЕ Пользователь = Неопределено Тогда
		Пользователь.Удалить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // УдалитьВременногоПользователя()


