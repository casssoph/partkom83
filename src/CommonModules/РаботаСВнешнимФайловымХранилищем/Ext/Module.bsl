//Отправка запросов

// Функция - Отправить файл во внешнее хранилище
//
// Параметры:
//  СтруктураПараметров	 - Структура - Формируется функцией СтруктураПараметровДляОтправкиФайла()
//  ТекстОшибки			 - Строка - Сюда помещается текст ошибки
//  СообщатьОбОшибке	 - Булево - Надо ли сообщать об ошибке
//  ВызыватьИсключение	 - Булево - Надо ли вызывать исключение в случае ошибки 
// 
// Возвращаемое значение:
//  Число - Идентификатор файла во внешем хранилище 
//
Функция ОтправитьФайлВоВнешнееХранилище(СтруктураПараметров, ТекстОшибки = "", СообщатьОбОшибке = Истина, ВызыватьИсключение = Истина) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСВнешнимФайловымХранилищем_ОтправитьФайлВоВнешнееХранилище";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////

	ИдентификаторФайлаВХранилище = Неопределено;
	
	ИмяФайла = ?(ЗначениеЗаполнено(СтруктураПараметров.ИмяФайла), СтруктураПараметров.ИмяФайла, "Файл");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization",  АпиКлюч());
	Заголовки.Вставить("Accept", "application/xml");
	Заголовки.Вставить("Content-Type", "multipart/form-data;boundary=boundary");
	
	ТелоЗапроса = "--boundary
	|Content-Disposition: form-data;name=""tag""
	|
	|"+СтруктураПараметров.Теги+"
	|--boundary
	|Content-Disposition: form-data;name=""file"";filename="""+ИмяФайла+"""
	|Content-Type: application/octet-stream
	|Content-Transfer-Encoding: base64
	|
	|"+СтруктураПараметров.СтрокаBase64+"
	|--boundary--
	|
	|";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Сервер",			АдресWEBСервиса());
	ПараметрыЗапроса.Вставить("Метод",			"putFile");
	ПараметрыЗапроса.Вставить("ТелоЗапроса",	ТелоЗапроса);
	ПараметрыЗапроса.Вставить("Заголовки",		Заголовки);
	ПараметрыЗапроса.Вставить("HTTPМетод",		"post");
	
	Результат = ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки);
	
	СтруктураОтвета = Неопределено;
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ЧтениеJS = Новый ЧтениеJSON;
		ЧтениеJS.УстановитьСтроку(Результат);
		
		Попытка
			СтруктураОтвета = ПрочитатьJSON(ЧтениеJS);
		Исключение
			ТекстОшибки = ТекстОшибки + Символы.ПС + "[ОтправитьФайлВоВнешнееХранилище] Ошибка отправки файла, не удалось разобрать ответ";
		КонецПопытки;
		
	Иначе
		ТекстОшибки = ТекстОшибки + Символы.ПС + "[ОтправитьФайлВоВнешнееХранилище] Ошибка отправки файла, ответ пустой";
		СтруктураОтвета = Результат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура")
		И СтруктураОтвета.success = Ложь Тогда
		ТекстОшибки =  ТекстОшибки + Символы.ПС + "[ОтправитьФайлВоВнешнееХранилище] Не удалось отправить файл!  Ошибка: "+СтруктураОтвета.msg;
	КонецЕсли;
	
	Если СообщатьОбОшибке И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураОтвета.fileId;	
	
КонецФункции

// Функция - Получить информацию по идентификатору файла
//
// Параметры:
//  ИдентификаторФайлаВХранилище - Число - Идентификатор файла во внешнем хранилище
//  ТекстОшибки			 - Строка - Сюда помещается текст ошибки
//  СообщатьОбОшибке	 - Булево - Надо ли сообщать об ошибке
//  ВызыватьИсключение	 - Булево - Надо ли вызывать исключение в случае ошибки 
// 
// Возвращаемое значение:
//  Структура - Структура с инфорацией о файле из внешнего хранилища
Функция ПолучитьИнформациюПоИдентификаторуФайла(ИдентификаторФайлаВХранилище, ТекстОшибки = "", СообщатьОбОшибке = Истина, ВызыватьИсключение = Истина) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСВнешнимФайловымХранилищем_ПолучитьИнформациюПоИдентификаторуФайла";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ВозвращаемоеЗначение = Неопределено;	
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization",  АпиКлюч());
	Заголовки.Вставить("Accept", "application/xml");
	Заголовки.Вставить("Content-Type", "multipart/form-data;boundary=boundary");

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Сервер",			АдресWEBСервиса());
	ПараметрыЗапроса.Вставить("Метод",			"getInfo?fileId="+Формат(ИдентификаторФайлаВХранилище,"ЧГ=0"));
	ПараметрыЗапроса.Вставить("ТелоЗапроса",	"");
	ПараметрыЗапроса.Вставить("Заголовки",		Заголовки);
	ПараметрыЗапроса.Вставить("HTTPМетод",		"get");
	
	Результат = ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки);
	
	СтруктураОтвета = Неопределено;
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ЧтениеJS = Новый ЧтениеJSON;
		ЧтениеJS.УстановитьСтроку(Результат);
		
		Попытка
			СтруктураОтвета = ПрочитатьJSON(ЧтениеJS);
		Исключение
			ТекстОшибки = ТекстОшибки + Символы.ПС + "[ПолучитьИнформациюПоИдентификаторуФайла] Ошибка получения описания по ИД="+ИдентификаторФайлаВХранилище+", не удалось разобрать ответ";
		КонецПопытки;
		
	Иначе
		ТекстОшибки = ТекстОшибки + Символы.ПС + "[ПолучитьИнформациюПоИдентификаторуФайла] Ошибка получения описания по ИД="+ИдентификаторФайлаВХранилище+", ответ пустой";
		СтруктураОтвета = Результат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура")
		И СтруктураОтвета.success = Ложь Тогда
		ТекстОшибки =  ТекстОшибки + Символы.ПС + "[ПолучитьИнформациюПоИдентификаторуФайла] Не удалось получить описание по ИД="+ИдентификаторФайлаВХранилище+"! Ошибка: "+СтруктураОтвета.msg;
	КонецЕсли;
	
	Если СообщатьОбОшибке И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураОтвета.data;	
	
КонецФункции

// Функция - Получить файл по идентификатору файла
//
// Параметры:
//  ИдентификаторФайлаВХранилище - Число - Идентификатор файла во внешнем хранилище
//  ТекстОшибки			 - Строка - Сюда помещается текст ошибки
//  СообщатьОбОшибке	 - Булево - Надо ли сообщать об ошибке
//  ВызыватьИсключение	 - Булево - Надо ли вызывать исключение в случае ошибки 
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные файла
//
Функция ПолучитьФайлПоИдентификатору(ИдентификаторФайлаВХранилище, ТекстОшибки = "", СообщатьОбОшибке = Истина, ВызыватьИсключение = Истина) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСВнешнимФайловымХранилищем_ПолучитьФайлПоИдентификатору";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ДвоичныеДанные = Неопределено;
	 
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization",  АпиКлюч());
	Заголовки.Вставить("Accept", "application/xml");
	Заголовки.Вставить("Content-Type", "multipart/form-data;boundary=boundary");

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Сервер",			АдресWEBСервиса());
	ПараметрыЗапроса.Вставить("Метод",			"getFile?fileId="+Формат(ИдентификаторФайлаВХранилище,"ЧГ=0"));
	ПараметрыЗапроса.Вставить("ТелоЗапроса",	"");
	ПараметрыЗапроса.Вставить("Заголовки",		Заголовки);
	ПараметрыЗапроса.Вставить("HTTPМетод",		"get");
	
	Результат = ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки, 1, Ложь);
	
	СтруктураОтвета = Неопределено;
	Если НЕ Результат = Неопределено Тогда
		
		Попытка
			ДвоичныеДанные = Base64Значение(Результат);
		Исключение
			ТекстОшибки = ТекстОшибки + Символы.ПС + "[ПолучитьФайлПоИдентификатору] Ошибка получения файла по ИД="+ИдентификаторФайлаВХранилище+", не удалось разобрать ответ";
		КонецПопытки;
		
	Иначе
		ТекстОшибки = ТекстОшибки + Символы.ПС + "[ПолучитьФайлПоИдентификатору] Ошибка получения файла по ИД="+ИдентификаторФайлаВХранилище+", ответ пустой";
	КонецЕсли;
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура")
		И СтруктураОтвета.success = Ложь Тогда
		ТекстОшибки =  ТекстОшибки + Символы.ПС + "[ПолучитьФайлПоИдентификатору] Не удалось получить файл по ИД="+ИдентификаторФайлаВХранилище+"! Ошибка: "+СтруктураОтвета.msg;
	КонецЕсли;
	
	Если СообщатьОбОшибке И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
	КонецЕсли;
	
	Возврат ДвоичныеДанные;	
	
КонецФункции

// Функция - Удалить файл по идентификатору файла
//
// Параметры:
//  ИдентификаторФайлаВХранилище - Число - Идентификатор файла во внешнем хранилище
//  ТекстОшибки			 - Строка - Сюда помещается текст ошибки
//  СообщатьОбОшибке	 - Булево - Надо ли сообщать об ошибке
//  ВызыватьИсключение	 - Булево - Надо ли вызывать исключение в случае ошибки 
// 
// Возвращаемое значение:
//  Булево - Удалось ли удалить файл
//  
Функция УдалитьФайлПоИдентификатору(ИдентификаторФайлаВХранилище, ТекстОшибки = "", СообщатьОбОшибке = Истина, ВызыватьИсключение = Истина) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСВнешнимФайловымХранилищем_УдалитьФайлПоИдентификатору";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization",  АпиКлюч());
	Заголовки.Вставить("Accept", "application/xml");
	Заголовки.Вставить("Content-Type", "multipart/form-data;boundary=boundary");

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Сервер",			АдресWEBСервиса());
	ПараметрыЗапроса.Вставить("Метод",			"deleteFile?fileId="+Формат(ИдентификаторФайлаВХранилище,"ЧГ=0"));
	ПараметрыЗапроса.Вставить("ТелоЗапроса",	"");
	ПараметрыЗапроса.Вставить("Заголовки",		Заголовки);
	ПараметрыЗапроса.Вставить("HTTPМетод",		"get");
	
	Результат = ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки);
	
	СтруктураОтвета = Неопределено;
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ЧтениеJS = Новый ЧтениеJSON;
		ЧтениеJS.УстановитьСтроку(Результат);
		
		Попытка
			СтруктураОтвета = ПрочитатьJSON(ЧтениеJS);
		Исключение
			ТекстОшибки = ТекстОшибки + Символы.ПС + "[УдалитьФайлПоИдентификатору] Ошибка удаления файла по ИД="+ИдентификаторФайлаВХранилище+", не удалось разобрать ответ";
		КонецПопытки;
		
	Иначе
		ТекстОшибки = ТекстОшибки + Символы.ПС + "[УдалитьФайлПоИдентификатору] Ошибка удаления файла по ИД="+ИдентификаторФайлаВХранилище+", ответ пустой";
		СтруктураОтвета = Результат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура")
		И СтруктураОтвета.success = Ложь Тогда
		ТекстОшибки =  ТекстОшибки + Символы.ПС + "[УдалитьФайлПоИдентификатору] Не удалось удалить файл по ИД="+ИдентификаторФайлаВХранилище+"! Ошибка: "+СтруктураОтвета.msg;
	КонецЕсли;
	
	Если СообщатьОбОшибке И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтруктураОтвета.success;
	
КонецФункции

//Выполнение запроса
Функция ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки = "", ТипОтвета = 1, СообщатьОбОшибке = Истина) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСВнешнимФайловымХранилищем_ВыполнитьЗапросWebProxy";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//ТипОтвета = 1 - строка
	//ТипОтвета = 2 - поток
	//ТипОтвета = 3 - двоичные данные
	//ТипОтвета = 4 - не получать тело
	
	ВозвращаемоеЗначение = Неопределено;
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыЗапроса.Сервер,,,,,,,);
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса.Метод, ПараметрыЗапроса.Заголовки);
	Если ТипЗнч(ПараметрыЗапроса.ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыЗапроса.ТелоЗапроса);
	Иначе
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса.ТелоЗапроса , КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	//Сообщить("Тело запроса:");
	//Сообщить(HTTPЗапрос.ПолучитьТелоКакСтроку());
	
	Если НРег(ПараметрыЗапроса.HTTPМетод) = "get" Тогда
		Ответ = HTTPСоединение.Получить(HTTPЗапрос);
	Иначе
		Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	КонецЕсли;
	
	Если ТипОтвета = 1 Тогда
		ДанныеОтвета = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ТипОтвета = 2 Тогда
		ДанныеОтвета = Ответ.ПолучитьТелоКакПоток();
	ИначеЕсли ТипОтвета = 3 Тогда
		ДанныеОтвета = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		ДанныеОтвета = Ответ;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ВозвращаемоеЗначение = ДанныеОтвета;
	Иначе
		ТекстОшибки = ТекстОшибки + Символы.ПС + "[ВыполнитьЗапросWebProxy] Ошибка выполнения запроса: "+Ответ.КодСостояния+", "+ДанныеОтвета;
	КонецЕсли;
	
	Если СообщатьОбОшибке И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

//Перенос данных из справочников

//Выгружает значение из хранилища значения во внешнее хранилище
//ДанныеСсылка - СправочникСсылка.ХранилищеДополнительнойИнформации ИЛИ СправочникСсылка.ВложенияЭлектронныхПисем 
Функция ПеренестиДанныеЭлементаВоВнешнееХранилище(ДанныеСсылка, ТекстОшибки = "", СообщатьОбОшибке = Истина) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСВнешнимФайловымХранилищем_ПеренестиДанныеЭлементаВоВнешнееХранилище";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Успешно = Ложь;
	
	Попытка
		СправочникОбъект = ДанныеСсылка.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(СправочникОбъект.ИдентификаторВоВнешнемХранилище) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникОбъект.ИмяФайла) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДанныеФайла = СправочникОбъект.Хранилище.Получить();
		
		Если ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации")
			И СправочникОбъект.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение Тогда
			//Это картинка
			ДвоичныеДанные = ДанныеФайла.ПолучитьДвоичныеДанные();
		Иначе
			ДвоичныеДанные = ДанныеФайла;
		КонецЕсли;
		
		СтруктураПараметров = ИнициализироватьСтруктуруПараметровДляОтправкиФайла();
		СтруктураПараметров.ИмяФайла = СправочникОбъект.ИмяФайла;
		СтруктураПараметров.СтрокаBase64 = Base64Строка(ДвоичныеДанные);
		СтруктураПараметров.Теги = ""+СправочникОбъект.Метаданные().Имя+","+ДанныеСсылка.УникальныйИдентификатор();
		
		ИД = ОтправитьФайлВоВнешнееХранилище(СтруктураПараметров, ТекстОшибки,,Ложь);
		
		Если ТипЗнч(ИД) = Тип("Число") И ИД <> 0 Тогда
			
			СправочникОбъект.ИдентификаторВоВнешнемХранилище = ИД;
			СправочникОбъект.Хранилище = Неопределено;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			
			Успешно = Истина;
			
		КонецЕсли;
	Исключение
		ТекстОшибки = "Не удалось перенести файл во внешнее хранилище: "+ТипЗнч(ДанныеСсылка)+", Код: "+ДанныеСсылка.Код+", описание ошибки: "+ОписаниеОшибки();
		
		Если СообщатьОбОшибке Тогда
			Сообщить(ТекстОшибки);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

//Прочее

//Формирует структуру параметров для передачи в ОтправитьФайлВоВнешнееХранилище()
Функция СтруктураПараметровДляОтправкиФайла(ПолноеИмяФайла, Теги = "", ТекстОшибки = "") Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСВнешнимФайловымХранилищем_СтруктураПараметровДляОтправкиФайла";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтруктураПараметров = ИнициализироватьСтруктуруПараметровДляОтправкиФайла(); 
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Не Файл.Существует() Тогда
		ТекстОшибки = ТекстОшибки+" Не найден файл: "+ПолноеИмяФайла;
		Сообщить(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.СтрокаBase64 = Base64Строка(Новый ДвоичныеДанные(ПолноеИмяФайла));
	СтруктураПараметров.Теги 		 = Теги;
	СтруктураПараметров.ИмяФайла 	 = Файл.Имя;
	
	Возврат СтруктураПараметров;
	
КонецФункции

//Создает незаполненную структуру параметров для отправки файла
Функция ИнициализироватьСтруктуруПараметровДляОтправкиФайла() Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСВнешнимФайловымХранилищем_ИнициализироватьСтруктуруПараметровДляОтправкиФайла";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайла", "Файл");
	СтруктураПараметров.Вставить("СтрокаBase64", "");
	СтруктураПараметров.Вставить("Теги", "");
	
	Возврат СтруктураПараметров;
	
КонецФункции

//Строка авторизации 
Функция АпиКлюч(СообщатьОбОшибке = Истина, ВызыватьИсключение = Истина) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСВнешнимФайловымХранилищем_АпиКлюч";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//MzlQSk51eVpJVHk0SDBqeGVNUVdUeHZTVElyTlNP
	
	ТекстОшибки = "Не задан ApiKey сервиса внешнего файлохранилища!";

	Настройка = Справочники.НастройкиРеквизитовДляОбменов.ApiKeyВнешнегоФайлохранилища;
	
	Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
		ApiKeyВнешнегоФайлохранилища = Настройка.СтрокаДляРабочейБазы;
	Иначе
		ApiKeyВнешнегоФайлохранилища = Настройка.СтрокаДляТестовойБазы;
	КонецЕсли;
	
	Если СообщатьОбОшибке И Не ЗначениеЗаполнено(ApiKeyВнешнегоФайлохранилища) Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
	Если ВызыватьИсключение И Не ЗначениеЗаполнено(ApiKeyВнешнегоФайлохранилища) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ApiKeyВнешнегоФайлохранилища;	
	
КонецФункции

//Адрес
Функция АдресWEBСервиса(СообщатьОбОшибке = Истина, ВызыватьИсключение = Истина) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСВнешнимФайловымХранилищем_АдресWEBСервиса";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//fs.part-kom.ru/api/"
	
	ТекстОшибки = "Не задан адрес сервиса внешнего файлохранилища!";

	Настройка = Справочники.НастройкиРеквизитовДляОбменов.АдресСервисаВнешнегоФайлохранилища;
	
	Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
		АдресWEBСервиса = Настройка.СтрокаДляРабочейБазы;
	Иначе
		АдресWEBСервиса = Настройка.СтрокаДляТестовойБазы;
	КонецЕсли;
	
	Если СообщатьОбОшибке И Не ЗначениеЗаполнено(АдресWEBСервиса) Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
	Если ВызыватьИсключение И Не ЗначениеЗаполнено(АдресWEBСервиса) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат АдресWEBСервиса;	
	
КонецФункции


