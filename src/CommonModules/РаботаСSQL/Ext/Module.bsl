#Область Работа_SQL
Функция ВыполнитьЗапросSQL(ТекстЗапроса) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQL_ВыполнитьЗапросSQL";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//ХудинВВ XX-2449 08072019
	Если ЭтоАктивнаяЗадачаJirа(Справочники.ЗадачиJira.XX2449) Тогда
		//При аутентификации ОС, делаем запрос со стороны сервера
		ОписаниеОшибки = РаботаСSQLСервер.ВыполнитьЗапросSQL(ТекстЗапроса);
	Иначе
		ОписаниеОшибки = ВыполнитьЗапросSQL_КлиентСервер(ТекстЗапроса);
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
		
КонецФункции

Функция ВыполнитьЗапросSQL_КлиентСервер(ТекстЗапроса) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQL_ВыполнитьЗапросSQL_КлиентСервер";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Попытка
		СоединениеSQL  = Новый COMОбъект("ADODB.Connection");
		КомандаSQL     = Новый COMОбъект("ADODB.Command");
		ВыборкаSQL     = Новый COMОбъект("ADODB.RecordSet");
		
		СоединениеSQL.ConnectionString = СтрокаСоединенияSQL();
		
		СоединениеSQL.ConnectionTimeout = 30;
		СоединениеSQL.CommandTimeout = 6000;
		
		СоединениеSQL.Open();
		КомандаSQL.ActiveConnection   = СоединениеSQL;
		КомандаSQL.CommandText = ТекстЗапроса;
		КомандаSQL.Execute();
		
		СоединениеSQL.Close();
		
		ОписаниеОшибки = "";
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция СтрокаСоединенияSQL() Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQL_СтрокаСоединенияSQL";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	//ХудинВВ XX-2449 08072019
	Если ЭтоАктивнаяЗадачаJirа(Справочники.ЗадачиJira.XX2449) Тогда
		СтрокаСоединенияSQL = СтрокаСоединенияSQL_АутентификацияОС();
	Иначе
		СтрокаСоединенияSQL = СтрокаСоединенияSQL_ПоЛогинуПаролю();
	КонецЕсли;
	
	Возврат  СтрокаСоединенияSQL;
	
КонецФункции

//ХудинВВ XX-2449 08072019
Функция СтрокаСоединенияSQL_АутентификацияОС() Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQL_СтрокаСоединенияSQL_АутентификацияОС";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	
	ПараметрыПодключения = РаботаСSQLСервер.ОпределитьПараметрыДляSQLПодключения();
	
	Если ЗначениеЗаполнено(ПараметрыПодключения.ТекстОшибки) Тогда
		 ВызватьИсключение "Не удалось определить параметры подключения: "+ПараметрыПодключения.ТекстОшибки;
	КонецЕсли;

	Возврат "driver={SQL Server};server="+ПараметрыПодключения.АдресСервераSQL+";database="+ПараметрыПодключения.ИмяБазыSQL+";Trusted_Connection=Yes";
	
КонецФункции

Функция СтрокаСоединенияSQL_ПоЛогинуПаролю() Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQL_СтрокаСоединенияSQL_ПоЛогинуПаролю";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	Если СтрокаСоединенияИнформационнойБазы = "Srvr=""nng9-v-1c-06"";Ref=""partkom83_parfenov"";" Тогда
		//Тестовая PaSe//
		Пользователь = "sa";
		Пароль = "Pa$$w0rd";
		База = "partkom83_parfenov";
		Сервер = "nng9-v-sq-06";
	ИначеЕсли СтрокаСоединенияИнформационнойБазы = "Srvr=""nng9-v-1c-07"";Ref=""partkom83"";" Тогда
		//Рабочая//
		Пользователь = "partkom83";
		Пароль = "partkom83";
		База = "partkom83";
		Сервер = "nng9-v-sq-07";
	ИначеЕсли СтрокаСоединенияИнформационнойБазы = "Srvr=""nng9-v-1c-06"";Ref=""partkom83"";" Тогда
		//Общая тестовая//
		Пользователь = "sa";
		Пароль = "Pa$$w0rd";
		База = "partkom83";
		Сервер = "nng9-v-sq-06";
	ИначеЕсли НРег(СтрокаСоединенияИнформационнойБазы) = НРег("Srvr=""v-1c-13"";Ref=""partkom83"";") Тогда
		//Общая тестовая//
		Пользователь = "sa";
		Пароль = "Pa$$w0rd";
		База = "partkom83";
		Сервер = "v-sq-13";
	ИначеЕсли НРег(СтрокаСоединенияИнформационнойБазы) = НРег("Srvr=""nng9-v-1c-06"";Ref=""partkom83_Kalinin"";") Тогда
		//Общая тестовая//
		Пользователь = "sa";
		Пароль = "Pa$$w0rd";
		База = "partkom83_Kalinin";
		Сервер = "nng9-v-sq-05";
	Иначе
		ВызватьИсключение("Неизвестная база");
	КонецЕсли;	
	
	Возврат "driver={SQL Server};server="+Сервер+";uid="+Пользователь+";pwd="+Пароль+";database="+База+";";
	
КонецФункции


//Запрос SQL для изменения данных через Join с внешней таблицей//
//1. Для отбора записей используется вложенная таблица
//2. Устанавливаемые поля можно либо устанавливать непосредственно, либо из дополнительной таблицы
Функция UpdateAtJOIN(Структура) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQL_UpdateAtJOIN";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	УстановитьИменаПолей(Структура);
	СформироватьВнутреннююТаблицу(Структура);
	УстановитьПоляSet(Структура);
	ТекстЗапроса = "update " + Структура.ИмяТаблицыХранения + Структура.Set + "from " + Структура.ИмяТаблицыХранения + Структура.ВнутренняяТаблица;
	
	Возврат ВыполнитьЗапросSQL(ТекстЗапроса);
	
КонецФункции
Процедура СформироватьВнутреннююТаблицу(Структура) Экспорт
	               	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQL_СформироватьВнутреннююТаблицу";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Синонимы = "";
	СтрокаJoin = " on ";
	Индекс = 1;
	Для Каждого КолонкаВыборки Из Структура.КлючевыеПоля Цикл
		Синонимы = Синонимы + ?(Синонимы = "", "f", ",f") + Формат(Индекс, "ЧН=; ЧГ=");
		СтрокаJoin = СтрокаJoin + ?(СтрокаJoin = " on ", "", " and ") + Структура.Поля[КолонкаВыборки.Ключ] + "=t.f" + Формат(Индекс, "ЧН=; ЧГ=");
		Индекс = Индекс + 1;
	КонецЦикла;
	Если Структура.Свойство("ДополнительныеПоля") Тогда
		Индекс = 1;
		Для Каждого Поле Из Структура.ДополнительныеПоля Цикл
			Синонимы = Синонимы + ?(Синонимы = "", "d", ",d") + Формат(Индекс, "ЧН=; ЧГ=");
		КонецЦикла;
	КонецЕсли;
	
	ВнутренняяТаблица = "";
	Выборка = Структура.ВыборкаДанных.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаВнутреннейТаблицы = "(";
		Для Каждого КолонкаВыборки Из Структура.КлючевыеПоля Цикл
			СтрокаВнутреннейТаблицы = СтрокаВнутреннейТаблицы + ?(СтрокаВнутреннейТаблицы = "(", "", ",") + ЗначениеSQL(Выборка[КолонкаВыборки.Ключ]);
		КонецЦикла;
		Если Структура.Свойство("ДополнительныеПоля") Тогда
			Для Каждого Поле Из Структура.ДополнительныеПоля Цикл
				СтрокаВнутреннейТаблицы = СтрокаВнутреннейТаблицы + ?(СтрокаВнутреннейТаблицы = "(", "", ",") + ЗначениеSQL(Выборка[Поле.Ключ]);
			КонецЦикла;
		КонецЕсли;
		СтрокаВнутреннейТаблицы = СтрокаВнутреннейТаблицы + ")";
		ВнутренняяТаблица = ВнутренняяТаблица + ?(ВнутренняяТаблица = "", "", ",") + СтрокаВнутреннейТаблицы;
	КонецЦикла;
	
	ВнутренняяТаблица = " inner join " + Символы.ПС + "(values" + ВнутренняяТаблица + ") t (" + Синонимы + ") " + СтрокаJoin;
	
	Структура.Вставить("ВнутренняяТаблица", ВнутренняяТаблица);
	
КонецПроцедуры

//Запрос SQL для изменения данных через Where(Или без него)//
Функция UpdateAtWhere(Структура) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСSQL_UpdateAtWhere";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	УстановитьИменаПолей(Структура);
	УстановитьПоляSet(Структура);
	УстановитьПоляWhere(Структура);
	ТекстЗапроса = "update " + Структура.ИмяТаблицыХранения + Структура.Set + "from " + Структура.ИмяТаблицыХранения + Структура.Where;
	
	Возврат ВыполнитьЗапросSQL(ТекстЗапроса);
	
КонецФункции

//Общее//
Функция ЗначениеSQL(Значение1C) Экспорт
	
	Если		ТипЗнч(Значение1C) = Тип("Число") Тогда
				ЗначениеSQL = Формат(Значение1C, "ЧН=; ЧГ=");
	ИначеЕсли	ТипЗнч(Значение1C) = Тип("Булево") Тогда
				ЗначениеSQL = ?(Значение1C, "0x01", "0x00");
	ИначеЕсли	ТипЗнч(Значение1C) = Тип("Строка") Тогда
				ЗначениеSQL = "'" + Значение1C + "'";
	ИначеЕсли	ТипЗнч(Значение1C) = Тип("Дата") Тогда
				Если ЗначениеЗаполнено(Значение1C) Тогда
					ЗначениеSQL = "dateadd(year,2000,'" + Формат(Значение1C, "ДФ='yyyy-MM-dd HH:mm:ss'; ДП=") + "')";
				Иначе
					ЗначениеSQL = "'2001-01-01 00:00:00.000'";
				КонецЕсли;
	Иначе		
				Представление = Врег(ЗначениеВСтрокуВнутр(Значение1C));
				ЗначениеSQL = "0x"+Сред(Представление,48,32);
				//ЗначениеSQL = ОбщегоНазначения.ПреобразоватьGUIDВФорматHEX(Значение1C.УникальныйИдентификатор())
	КонецЕсли;
	
	Возврат ЗначениеSQL;
	
КонецФункции
Функция ИмяПоляSQL(ОписаниеПолей, ИмяПоля)
	
	ОписаниеПоля = ОписаниеПолей.НайтиСтроки(Новый Структура("ИмяПоля", ИмяПоля));
	ИмяSQL = ОписаниеПоля[0].ИмяПоляХранения;
	Если ОписаниеПоля.Количество() > 1 Тогда
		Для Каждого Вариант Из ОписаниеПоля Цикл
			ИмяВарианта = Вариант.ИмяПоляХранения;
			Если Прав(ИмяВарианта,4) = "RRef" Тогда
				ИмяSQL = ИмяВарианта;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИмяSQL;
	
КонецФункции
Процедура УстановитьКлючевыеПоля(Структура)
	
	КлючевыеПоля = Новый Структура;
	Для Каждого Колонка Из Структура.ВыборкаДанных.Колонки Цикл
		КлючевыеПоля.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Структура.Вставить("КлючевыеПоля", КлючевыеПоля);
	
КонецПроцедуры
Процедура УстановитьПоляSet(Структура) Экспорт
	
	Строка = "";
	Для Каждого Поле Из Структура.УстанавливаемыеПоля Цикл
		Значение = Поле.Значение;
		ИмяПоля = Структура.Поля[Поле.Ключ];
		Если ТипЗнч(Значение) <> Тип("Структура") Тогда
			Строка = Строка + ?(Строка = "", "", ",") + ИмяПоля + "=" + ЗначениеSQL(Значение);
		ИначеЕсли Значение.ВидРасчета = "ДопПоле" Тогда
			Строка = Строка + ?(Строка = "", "", ",") + ИмяПоля + "=t." + Структура.Поля[Значение.Поле];
		КонецЕсли;
	КонецЦикла;
	
	Структура.Вставить("Set", Символы.ПС + "set " + Строка + Символы.ПС)
	
КонецПроцедуры
Процедура УстановитьПоляWhere(Структура) Экспорт
	
	Строка = "";
	Если Структура.Свойство("ПоляОтбора") Тогда
		Для Каждого Поле Из Структура.ПоляОтбора Цикл
			Строка = Строка + ?(Строка = "", "", " and ") + ПредставлениеСравнения(Структура.Поля[Поле.Ключ], Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Структура.Вставить("Where", ?(Строка = "", "", " where " + Строка));
	
КонецПроцедуры
Процедура УстановитьИменаПолей(Структура) Экспорт
	
	Поля = Новый Соответствие;
	
	Если Структура.Свойство("СтруктураХранения") Тогда
		СтруктураХранения = Структура.СтруктураХранения;
	Иначе
		СтруктураХранения = ПолучитьСтруктуруХраненияБазыДанных(,Истина);
		Структура.Вставить("СтруктураХранения", СтруктураХранения);
	КонецЕсли;

	ОписаниеТаблицы = СтруктураХранения.Найти(Структура.ИмяТаблицы, "ИмяТаблицы");
	Структура.Вставить("ИмяТаблицыХранения", ОписаниеТаблицы.ИмяТаблицыХранения);
	ОписаниеПолей = ОписаниеТаблицы.Поля;
	
	Если НЕ Структура.Свойство("КлючевыеПоля") И Структура.Свойство("ВыборкаДанных") Тогда
		УстановитьКлючевыеПоля(Структура);
	КонецЕсли;
	Если Структура.Свойство("КлючевыеПоля") Тогда
		Для Каждого Поле Из Структура.КлючевыеПоля Цикл
			ИмяПоля = Поле.Ключ;
			Поля.Вставить(ИмяПоля, ИмяПоляSQL(ОписаниеПолей, ИмяПоля));
		КонецЦикла;
	КонецЕсли;
	
	Если Структура.Свойство("ДополнительныеПоля") Тогда
		Индекс = 1;
		Для Каждого Поле Из Структура.ДополнительныеПоля Цикл
			ИмяПоля = Поле.Ключ;
			Поля.Вставить(ИмяПоля, "d" + Формат(Индекс,"ЧН=; ЧГ="));
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Поле Из Структура.УстанавливаемыеПоля Цикл
		ИмяПоля = Поле.Ключ;
		Поля.Вставить(ИмяПоля, ИмяПоляSQL(ОписаниеПолей, ИмяПоля));
	КонецЦикла;
	
	Если Структура.Свойство("ПоляОтбора") Тогда
		Для Каждого Поле Из Структура.ПоляОтбора Цикл
			ИмяПоля = Поле.Ключ;
			Поля.Вставить(ИмяПоля, ИмяПоляSQL(ОписаниеПолей, ИмяПоля));
		КонецЦикла;
	КонецЕсли;
	
	Структура.Вставить("Поля", Поля);

КонецПроцедуры

Функция ПредставлениеСравнения(ИмяПоля, Сравнение)
	
	Если ТипЗнч(Сравнение) <> Тип("Структура") Тогда
		Представление = ИмяПоля + "=" + ЗначениеSQL(Сравнение);
	ИначеЕсли Сравнение.ВидСравнения = ВидСравнения.Больше Тогда
		Представление = ИмяПоля + ">" + ЗначениеSQL(Сравнение.Значение);
	ИначеЕсли Сравнение.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		Представление = ИмяПоля + ">=" + ЗначениеSQL(Сравнение.Значение);
	ИначеЕсли Сравнение.ВидСравнения = ВидСравнения.Меньше Тогда
		Представление = ИмяПоля + "<" + ЗначениеSQL(Сравнение.Значение);
	ИначеЕсли Сравнение.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Представление = ИмяПоля + "<=" + ЗначениеSQL(Сравнение.Значение);
	ИначеЕсли Сравнение.ВидСравнения = ВидСравнения.ВСписке Тогда
		Значения = "";
		Для Каждого Значение Из Сравнение.Значение Цикл
			Значения = Значения + ?(Значения = "", "",",") + ЗначениеSQL(Значение);
		КонецЦикла;
		Представление = ИмяПоля + " in (" + Значения + ")";
	ИначеЕсли Сравнение.ВидСравнения = ВидСравнения.НеВСписке Тогда
		Значения = "";
		Для Каждого Значение Из Сравнение.Значение Цикл
			Значения = Значения + ?(Значения = "", "",",") + ЗначениеSQL(Значение);
		КонецЦикла;
		Представление = ИмяПоля + " not in (" + Значения + ")";
	ИначеЕсли Сравнение.ВидСравнения = ВидСравнения.Интервал Тогда
		Представление = "(" +ИмяПоля + " between " + ЗначениеSQL(Сравнение.Минимум) + " and " + ЗначениеSQL(Сравнение.Максимум) + ")";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти