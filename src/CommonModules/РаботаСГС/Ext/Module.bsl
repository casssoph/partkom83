//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
// БИБЛИОТЕКА ДЛЯ РАБОТЫ С ОБЪЕКТАМИ ГРАФИЧЕСКОЙ СХЕМЫ v.1.1
//        											© Быков Александр, 2017
//////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////
//Программный интерфейс

#Область ПрограммныйИнтерфейс

// Создает XDTO объект - Действие
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - 
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция НовыйОбъектДействие(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)Экспорт
	НовОбъект=новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок,КонстантыГС.ТипОбъектаДействие(),Лево,Верх,Ширина,Высота,Цвет,Линия);
	
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх+Высота-1));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх+Высота-1));
	
	Возврат НовОбъект;
КонецФункции // 

// Создает XDTO объект - ВыборВарианта
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - 
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция НовыйОбъектВыборВарианта(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)Экспорт
	НовОбъект=новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок,КонстантыГС.ТипОбъектаВыборВарианта(),Лево,Верх,Ширина,Высота,Цвет,Линия);
	
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх+Высота-1));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх+Высота-1));
	
	Возврат НовОбъект;
КонецФункции // 

// Создает XDTO объект - Старт
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - 
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция НовыйОбъектСтарт(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)Экспорт
	НовОбъект=новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок,КонстантыГС.ТипОбъектаСтарт(),Лево,Верх,Ширина,Высота,Цвет,Линия);
	
	ВысотаТреугольника=Ширина/2*0.57735;  //tan(30)
	Если ВысотаТреугольника>Высота Тогда   
		ВысотаТреугольника=Высота/2;
	КонецЕсли; 
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх+Высота-ВысотаТреугольника));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина/2,Верх+Высота-1));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх+Высота-ВысотаТреугольника));
	
	Возврат НовОбъект;
КонецФункции // 

// Создает XDTO объект - Завершение
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - 
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция НовыйОбъектЗавершение(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)Экспорт
	НовОбъект=новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок,КонстантыГС.ТипОбъектаЗавершение(),Лево,Верх,Ширина,Высота,Цвет,Линия);
	
	ВысотаТреугольника=Ширина/2*0.57735;//tan(30)
	Если ВысотаТреугольника>Высота Тогда   
		ВысотаТреугольника=Высота/2;
	КонецЕсли; 
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина/2,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх+ВысотаТреугольника));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх+Высота-1));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх+Высота-1));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх+ВысотаТреугольника));
	
	Возврат НовОбъект;
КонецФункции // 

// Создает XDTO объект - Условие
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - 
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция НовыйОбъектУсловие(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)Экспорт
	НовОбъект=новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок,КонстантыГС.ТипОбъектаУсловие(),Лево,Верх,Ширина,Высота,Цвет,Линия);
	
	ВысотаТреугольника=Высота/2*0.57735;//tan(30)
	Если ВысотаТреугольника>Ширина/2 Тогда   
		ВысотаТреугольника=Ширина/4;
	КонецЕсли; 
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх+Высота/2));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+ВысотаТреугольника,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-ВысотаТреугольника,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх+Высота/2));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-ВысотаТреугольника,Верх+Высота-1));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+ВысотаТреугольника,Верх+Высота-1));
	
	Возврат НовОбъект;
КонецФункции // 

// Создает XDTO объект - Разделение
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - 
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция НовыйОбъектРазделение(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)Экспорт
	НовОбъект=новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок,КонстантыГС.ТипОбъектаРазделение(),Лево,Верх,Ширина,Высота,Цвет,Линия);
	
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина/2,Верх+Высота-1));
	
	Возврат НовОбъект;
КонецФункции // 

// Создает XDTO объект - Слияние
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - 
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция НовыйОбъектСлияние(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)Экспорт
	НовОбъект=новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок,КонстантыГС.ТипОбъектаСлияние(),Лево,Верх,Ширина,Высота,Цвет,Линия);
	
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх+Высота-1));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх+Высота-1));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина/2,Верх));
	
	Возврат НовОбъект;
КонецФункции // 

// Создает XDTO объект - Обработка
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - 
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция НовыйОбъектОбработка(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)Экспорт
	НовОбъект=новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок,КонстантыГС.ТипОбъектаОбработка(),Лево,Верх,Ширина,Высота,Цвет,Линия);
	
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх+Высота-1));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх+Высота-1));
	
	Возврат НовОбъект;
КонецФункции // 

// Создает XDTO объект - ВложенныйПроцесс
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - 
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция НовыйОбъектВложенныйПроцесс(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)Экспорт
	НовОбъект=новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок,КонстантыГС.ТипОбъектаВложенныйПроцесс(),Лево,Верх,Ширина,Высота,Цвет,Линия);
	
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево+Ширина-1,Верх+Высота-1));
	НовОбъект.Point.Добавить(НоваяТочкаXDTO(Лево,Верх+Высота-1));
	
	Возврат НовОбъект;
КонецФункции // 

// Создает XDTO объект - Декорация
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - 
//  Фигура - ФигурыГрафическойСхемы -
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция НовыйОбъектДекорация(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Фигура,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)Экспорт
	НовОбъект=новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок,КонстантыГС.ТипОбъектаДекорация(),Лево,Верх,Ширина,Высота,Цвет,Линия);
	НовОбъект.shape=Фигура;
	
	Возврат НовОбъект;
КонецФункции // 


// Создает XDTO объект - Декоративную линию
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя линии
//  Заголовок  - Строка - 
//  Координаты - Массив, Строка - Массив координат лини или строка координат, разделенных запятыми
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
//  СтрелкаНачала  - СтильСтрелки - Стиль стрелки, по умолчанию - нет
//  СтрелкаКонца  - СтильСтрелки - Стиль стрелки, по умолчанию - заполненная
// Возвращаемое значение:
//   ОбъектXDTO   - созданная линия графической схемы
Функция новаяДекоративнаяЛинияСхемы(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,Знач Координаты,Линия=Неопределено,СтрелкаНачала=Неопределено,СтрелкаКонца=Неопределено)Экспорт
	
	НовОбъект=новаяЛинияСхемы(ГрафСхемаXDTO,Имя,Заголовок,Линия,СтрелкаНачала,СтрелкаКонца);
	
	масКоординат=новый Массив; 
	Если ТипЗнч(Координаты)=Тип("Массив") Тогда   
		масКоординат=Координаты; 
	ИначеЕсли ТипЗнч(Координаты)=Тип("Строка") Тогда   
		масКоординат=СтрокуВМассивЧисел(Координаты);
	КонецЕсли;     	
	
	НовОбъект.decorativeLine=Истина;
	
	Для с=0 По масКоординат.Количество()/2-1 Цикл  
		НовОбъект.Point.Добавить(НоваяТочкаXDTO(масКоординат[с*2],масКоординат[с*2+1]));
	КонецЦикла;      	
	
	Возврат НовОбъект;	
КонецФункции // 


// Соединяет два объекта соединительной линией
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Объект1  - ОбъектXDTO, Строка, Число - Объект схемы или его имя или его идентификатор
//  Объект2  - ОбъектXDTO, Строка, Число - Объект схемы или его имя или его идентификатор
//  Направление1 - Число - 1 = левая сторона, 2 = верхняя сторона, 3 = правая сторона, 4 = нижняя сторона,
//  Направление2 - Число - 1 = левая сторона, 2 = верхняя сторона, 3 = правая сторона, 4 = нижняя сторона,
//  НомерВарианта1  - Число - номер варианта для объекта ВыборВарианта. Начинается с 1.
//  НомерВарианта2  - Число - номер варианта для объекта ВыборВарианта. Начинается с 1.
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
//  СтрелкаНачала  - СтильСтрелки - Стиль стрелки, по умолчанию - нет
//  СтрелкаКонца  - СтильСтрелки - Стиль стрелки, по умолчанию - заполненная
// Возвращаемое значение:
// ОбъектXDTO, Неопределено    - Неопределено = не найден соединяемый объект, ОбъектXDTO = построенная линия
Функция СоединитьОбъектыЛинией(ГрафСхемаXDTO,Знач Объект1,Знач Объект2,Направление1,Направление2,НомерВарианта1=0,НомерВарианта2=0,ТипЛинии=Неопределено,СтрелкаНачала=Неопределено,СтрелкаКонца=Неопределено, ЗаголовокЛинии = Неопределено)Экспорт
	Результат=Неопределено ;
	
	МинимальнаяДлина=КонстантыГС.МинимальнаяДлинаСегмента();
	
	Если ТипЗнч(Объект1)<>Тип("ОбъектXDTO") Тогда   
		Объект1=НайтиОбъектСхемы(ГрафСхемаXDTO,Объект1);
	КонецЕсли; 
	Если ТипЗнч(Объект2)<>Тип("ОбъектXDTO") Тогда   
		Объект2=НайтиОбъектСхемы(ГрафСхемаXDTO,Объект2);
	КонецЕсли; 
	
	Если Объект1=Неопределено или Объект2=Неопределено Тогда   
		Возврат Результат;
	КонецЕсли; 
	
	//Исправим направления, если ини неверны
	Если Направление1<1 или Направление1>4 Тогда   
		Направление1=3;
	КонецЕсли; 
	Если Направление2<1 или Направление2>4 Тогда   
		Направление2=3;
	КонецЕсли; 
	
	КолВоВариантов1=КоличествоВариантов(Объект1);
	КолВоВариантов2=КоличествоВариантов(Объект2);
	
	НомерВарианта1=Мин(НомерВарианта1,КолВоВариантов1);
	НомерВарианта2=Мин(НомерВарианта2,КолВоВариантов2);
	
	//Рассчитаем вид соединения в зависимости от направления и номера варианта
	// соединения вариантов начинаются с 6
	Если НомерВарианта1=0 Тогда   
		ВидСоединения1=Направление1;
	Иначе
		Если Направление1=1 Тогда   
			ВидСоединения1=НомерВарианта1*2+4;
		Иначе	
			Направление1=3;
			ВидСоединения1=НомерВарианта1*2+5;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НомерВарианта2=0 Тогда   
		ВидСоединения2=Направление2;
	Иначе
		Если Направление2=1 Тогда   
			ВидСоединения2=НомерВарианта2*2+4;
		Иначе	
			Направление2=3;
			ВидСоединения2=НомерВарианта2*2+5;
		КонецЕсли; 
	КонецЕсли; 
	
	
	
	ТочкиНачала=новый Массив;
	ТочкиКонца=новый Массив;
	
	//Рассчитаем первй и последний сегменты линии
	ТочкаНачала=ТочкаСоединения(Объект1,Направление1,НомерВарианта1);
	ТочкиНачала.Добавить(ТочкаНачала);
	ТочкаНачала=КонечнаяТочкаСоединения(ТочкаНачала,Направление1,МинимальнаяДлина);
	ТочкиНачала.Добавить(ТочкаНачала);
	ТочкаКонца=ТочкаСоединения(Объект2,Направление2,НомерВарианта2);	
	ТочкиКонца.Добавить(ТочкаКонца);
	ТочкаКонца=КонечнаяТочкаСоединения(ТочкаКонца,Направление2,МинимальнаяДлина);
	ТочкиКонца.Добавить(ТочкаКонца);
	
	
	//Для сокращения количества вариантов взаимного расположения сегментов повернем их так, чтобы начальный сегмент был направлен влево (т.е. Направление стало =1)
	ПовернутьТочки(ТочкиНачала,(Направление1+3)%4*90);
	ПовернутьТочки(ТочкиКонца,(Направление1+3)%4*90);
	СоздатьТочкиСоединительнойЛинии(ТочкиНачала,ТочкиКонца,(Направление2-Направление1+4)%4+1);	
	
	// ...а теперь повернем назад
	ПовернутьТочки(ТочкиНачала,360-(Направление1+3)%4*90);
	ПовернутьТочки(ТочкиКонца,360-(Направление1+3)%4*90);
	
	
	Линия=новаяЛинияСхемы(ГрафСхемаXDTO,"Линия_"+Объект1.itemCode+ВидСоединения1+"_"+Объект2.itemCode+ВидСоединения2,"",ТипЛинии,СтрелкаНачала,СтрелкаКонца);
	
	//для соединительной линии платформа не дает использовать свои стили стрелок, поэтому делаем линию декоративной
	Линия.decorativeLine=НЕ (СтрелкаНачала=Неопределено И СтрелкаКонца=Неопределено);
	
	с=0;
	Пока с<ТочкиНачала.Количество() Цикл
		Линия.Point.Добавить(ТочкиНачала[с]);
		с=с+1;
	КонецЦикла; 
	с=ТочкиКонца.ВГраница();
	Пока с>=0 Цикл
		Линия.Point.Добавить(ТочкиКонца[с]);
		с=с-1;
	КонецЦикла; 
	
	//уберем точки, лежащие точно посередине между соседями по вертикали или горизонтали
	УдалитьЛишниеТочкиЛинии(Линия.Point);
	
	Линия.connectFromItemId=Объект1.ItemId;
	Линия.connectFromPortIndex=НомерВарианта1;
	Линия.connectToItemId=Объект2.ItemId;
	Линия.portIndexFrom=ВидСоединения1;
	Линия.portIndexTo=ВидСоединения2;
	Если НЕ ЗаголовокЛинии=Неопределено Тогда
		Линия.itemTitle = НовыйЗаголовокОбъекта(ЗаголовокЛинии);
		Линия.taskDescription = (ЗаголовокЛинии);
	КонецЕсли;
	ГрафСхемаXDTO.item.Добавить(Линия);
	Результат=Линия;
	
	Возврат Результат;
КонецФункции // 




// Удаляет объект из схемы
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Объект  - Строка, Число -  имя объекта или его идентификатор
Процедура УдалитьОбъектСхемы(ГрафСхемаXDTO,Объект)Экспорт
	Индекс=НайтиИндексОбъектаСхемы(ГрафСхемаXDTO,Объект);
	Если Индекс<>Неопределено  Тогда   
		УдаляемыйОбъект=ГрафСхемаXDTO.item[Индекс];
		Если УдаляемыйОбъект.itemType=КонстантыГС.ТипОбъектаЛиния() Тогда   
			//Линию удаляем без дополнительной обработки
			ГрафСхемаXDTO.item.Удалить(Индекс);
		Иначе
			
			//необходимо обработать все линии, связанные с объектом
			с=0;
			Пока с<ГрафСхемаXDTO.item.Количество() Цикл
				ОбъектСхемы=ГрафСхемаXDTO.item[с];
				Если ОбъектСхемы.itemType=КонстантыГС.ТипОбъектаЛиния() Тогда   
					Если ОбъектСхемы.connectFromItemId=УдаляемыйОбъект.ItemId или ОбъектСхемы.connectToItemId=УдаляемыйОбъект.ItemId Тогда   
						Если ОбъектСхемы.decorativeLine=Ложь Тогда 
							//соединительные линии удаляем
							ГрафСхемаXDTO.item.Удалить(с);
							Продолжить;
						Иначе
							//декоративные линии "отвязываем"
							Если ОбъектСхемы.connectFromItemId=УдаляемыйОбъект.ItemId Тогда   
								ОбъектСхемы.connectFromItemId=-1;
								ОбъектСхемы.portIndexFrom=0;
							КонецЕсли; 
							Если ОбъектСхемы.connectToItemId=УдаляемыйОбъект.ItemId Тогда   
								ОбъектСхемы.connectToItemId=-1;
								ОбъектСхемы.portIndexTo=0;  
							КонецЕсли; 							
						КонецЕсли; 
					КонецЕсли; 					
				КонецЕсли; 
				с=с+1;
			КонецЦикла; 
			ГрафСхемаXDTO.item.Удалить(Индекс);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // 


// Добавляет новый вариант в объект ВыборВарианта
// Параметры:
//  ОбъектВыборВарианта  - ОбъектXDTO - Объект ВыборВарианта
//  Имя  - Строка - Имя варианта
//  Заголовок  - Строка - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
Процедура ДобавитьВариант(ОбъектВыборВарианта,Имя,Заголовок=Неопределено,Цвет=Неопределено)Экспорт
	Если ОбъектВыборВарианта.ItemType=КонстантыГС.ТипОбъектаВыборВарианта() Тогда   
		
		ВысотаВарианта=КонстантыГС.ВысотаВарианта();
		Вариант=НовыйВариант(Имя,Заголовок,Цвет);
		
		//Увеличим высоту ВыборВарианта
		ОбъектВыборВарианта.rectBottom=ОбъектВыборВарианта.rectBottom+ВысотаВарианта;
		ОбъектВыборВарианта.Point[2].y=ОбъектВыборВарианта.Point[2].y+ВысотаВарианта;
		ОбъектВыборВарианта.Point[3].y=ОбъектВыборВарианта.Point[3].y+ВысотаВарианта;
		
		ОбъектВыборВарианта.transition.Добавить(Вариант);
	КонецЕсли; 	
КонецПроцедуры // 


// Вставляет (со сдвигом) новый вариант в объект ВыборВарианта
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  ОбъектВыборВарианта  - ОбъектXDTO - Объект ВыборВарианта
//  Позиция - Число - позиция нового элемента
//  Имя  - Строка - Имя варианта
//  Заголовок  - Строка - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
Процедура ВставитьВариант(ГрафСхемаXDTO,ОбъектВыборВарианта,Позиция,Имя,Заголовок=Неопределено,Цвет=Неопределено)Экспорт
	Если ОбъектВыборВарианта.ItemType=КонстантыГС.ТипОбъектаВыборВарианта() Тогда   
		Если Позиция>=ОбъектВыборВарианта.transition.Количество() Тогда   
			ДобавитьВариант(ОбъектВыборВарианта,Имя,Заголовок,Цвет);
		Иначе	
			ВысотаВарианта=КонстантыГС.ВысотаВарианта();
			
			Вариант=НовыйВариант(Имя,Заголовок,Цвет);
			
			//Увеличим высоту ВыборВарианта
			ОбъектВыборВарианта.rectBottom=ОбъектВыборВарианта.rectBottom+ВысотаВарианта;
			ОбъектВыборВарианта.Point[2].y=ОбъектВыборВарианта.Point[2].y+ВысотаВарианта;
			ОбъектВыборВарианта.Point[3].y=ОбъектВыборВарианта.Point[3].y+ВысотаВарианта;
			
			//Необходимо сдвинуть все линии, "привязанные" к вариантам, лежащим "ниже" добавленного
			Для каждого ОбъектСхемы Из ГрафСхемаXDTO.item Цикл   
				Если ОбъектСхемы.itemType=КонстантыГС.ТипОбъектаЛиния() Тогда   
					Если ОбъектСхемы.connectFromItemId=ОбъектВыборВарианта.ItemId и ОбъектСхемы.portIndexFrom>Позиция*2+5 Тогда   
						СдвинутьПервыйСегментЛинииПоВертикали(ОбъектСхемы,ВысотаВарианта);
						ОбъектСхемы.connectFromPortIndex=ОбъектСхемы.connectFromPortIndex+1;
						ОбъектСхемы.portIndexFrom=ОбъектСхемы.portIndexFrom+2;				
					КонецЕсли; 
					Если ОбъектСхемы.connectToItemId=ОбъектВыборВарианта.ItemId и ОбъектСхемы.portIndexTo>Позиция*2+5 Тогда   
						СдвинутьПоследнийСегментЛинииПоВертикали(ОбъектСхемы,ВысотаВарианта);
						ОбъектСхемы.portIndexTo=ОбъектСхемы.portIndexTo+2;				
					КонецЕсли; 					
				КонецЕсли; 
			КонецЦикла; 
			
			ОбъектВыборВарианта.transition.Вставить(Позиция,Вариант);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // 

// Удаляет (со сдвигом) вариант из объекта ВыборВарианта
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  ОбъектВыборВарианта  - ОбъектXDTO - Объект ВыборВарианта
//  Позиция - Число - позиция элемента
Процедура УдалитьВариант(ГрафСхемаXDTO,ОбъектВыборВарианта,Позиция)Экспорт
	Если ОбъектВыборВарианта.ItemType=КонстантыГС.ТипОбъектаВыборВарианта() Тогда   
		Если Позиция<ОбъектВыборВарианта.transition.Количество() Тогда   
			ВысотаВарианта=КонстантыГС.ВысотаВарианта();
			
			
			//Уменьшим высоту ВыборВарианта
			ОбъектВыборВарианта.rectBottom=ОбъектВыборВарианта.rectBottom-ВысотаВарианта;
			ОбъектВыборВарианта.Point[2].y=ОбъектВыборВарианта.Point[2].y-ВысотаВарианта;
			ОбъектВыборВарианта.Point[3].y=ОбъектВыборВарианта.Point[3].y-ВысотаВарианта;
			
			с=0;
			Пока с<ГрафСхемаXDTO.item.Количество() Цикл
				ОбъектСхемы=ГрафСхемаXDTO.item[с];
				Если ОбъектСхемы.itemType=КонстантыГС.ТипОбъектаЛиния() Тогда   
					//Удаляем линии "привязанные" к варианту
					Если (ОбъектСхемы.connectFromItemId=ОбъектВыборВарианта.ItemId и (ОбъектСхемы.portIndexFrom=Позиция*2+6 или ОбъектСхемы.portIndexFrom=Позиция*2+7)) 
						или (ОбъектСхемы.connectToItemId  =ОбъектВыборВарианта.ItemId и (ОбъектСхемы.portIndexTo  =Позиция*2+6 или ОбъектСхемы.portIndexTo  =Позиция*2+7))  Тогда   
						УдалитьОбъектСхемы(ГрафСхемаXDTO,ОбъектСхемы.ItemId);
						Продолжить;
					КонецЕсли;  
					
					//Необходимо сдвинуть все линии, "привязанные" к вариантам, лежащим "ниже" удаляемого
					Если ОбъектСхемы.connectFromItemId=ОбъектВыборВарианта.ItemId и ОбъектСхемы.portIndexFrom>Позиция*2+5 Тогда   
						СдвинутьПервыйСегментЛинииПоВертикали(ОбъектСхемы,-ВысотаВарианта);
						ОбъектСхемы.connectFromPortIndex=ОбъектСхемы.connectFromPortIndex-1;
						ОбъектСхемы.portIndexFrom=ОбъектСхемы.portIndexFrom-2;				
					КонецЕсли; 
					Если ОбъектСхемы.connectToItemId=ОбъектВыборВарианта.ItemId и ОбъектСхемы.portIndexTo>Позиция*2+5 Тогда   
						СдвинутьПоследнийСегментЛинииПоВертикали(ОбъектСхемы,-ВысотаВарианта);
						ОбъектСхемы.portIndexTo=ОбъектСхемы.portIndexTo-2;				
					КонецЕсли; 
					
				КонецЕсли; 
				с=с+1;
			КонецЦикла; 
			
			ОбъектВыборВарианта.transition.Удалить(Позиция);
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // 


// Возвращает объект схемы по его имени или идентификатору
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  ЗначениеПоиска - Число,Строка - Идентификатор объекта или его имя
// Возвращаемое значение:
//   ОбъектXDTO, Неопределено  - Найденный объект
Функция НайтиОбъектСхемы(ГрафСхемаXDTO,ЗначениеПоиска)Экспорт
	Результат=НайтиИндексОбъектаСхемы(ГрафСхемаXDTO,ЗначениеПоиска); 
	Если Результат<>Неопределено  Тогда   
		Результат=ГрафСхемаXDTO.item[Результат];
	КонецЕсли; 	
	Возврат Результат;
КонецФункции 

// Возвращает индекс объекта схемы по его имени или идентификатору
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  ЗначениеПоиска - Число,Строка - Идентификатор объекта или его имя
// Возвращаемое значение:
//   ОбъектXDTO, Неопределено  - Найденный объект
Функция НайтиИндексОбъектаСхемы(ГрафСхемаXDTO,ЗначениеПоиска)Экспорт
	Результат=Неопределено; 
	Если ТипЗнч(ЗначениеПоиска)=Тип("Число") Тогда   
		Для с=0 По ГрафСхемаXDTO.item.Количество()-1 Цикл  
			элемент=ГрафСхемаXDTO.item[с];
			Если элемент.itemId=ЗначениеПоиска Тогда   
				Результат=с;
				прервать;
			КонецЕсли; 
		КонецЦикла; 		
	Иначе	
		Для с=0 По ГрафСхемаXDTO.item.Количество()-1 Цикл  
			элемент=ГрафСхемаXDTO.item[с];
			Если элемент.itemCode=ЗначениеПоиска Тогда   
				Результат=с;
				прервать;
			КонецЕсли; 
		КонецЦикла; 		
	КонецЕсли; 	
	Возврат Результат;
КонецФункции 


#КонецОбласти





// Создает XDTO объект графической схемы (любой,кроме линии). Полученный объект можно добавить в список элементов графической схемы 
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - По умолчанию = Имя
//  ТипОбъекта  - Число - Тип объекта графической схемы
//  Лево - Число - 
//  Верх - Число - 
//  Ширина - Число - 
//  Высота - Число - 
//  Цвет  - Цвет - Цвет фона, по умолчанию - Авто
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
// Возвращаемое значение:
//   ОбъектXDTO   - созданный объект графической схемы
Функция новыйОбъектСхемы(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,ТипОбъекта,Лево,Верх,Ширина,Высота,Цвет=Неопределено,Линия=Неопределено)
	
	НовОбъект=СериализаторXDTO.Фабрика.Создать(СериализаторXDTO.Фабрика.Тип("http://v8.1c.ru/8.2/data/graphscheme","GraphSchemeItem"));
	
	НовОбъект.itemType=ТипОбъекта;
	НовОбъект.rectLeft=Лево;
	НовОбъект.rectRight=Лево+Ширина;
	НовОбъект.rectTop=Верх;
	НовОбъект.rectBottom=Верх+Высота;
	
	НовОбъект.itemId=МаксимальныйItemId(ГрафСхемаXDTO)+1;
	НовОбъект.itemTabOrder=МаксимальныйItemTabOrder(ГрафСхемаXDTO)+1;
	НовОбъект.itemCode=Имя;
	
	НовОбъект.itemTitle=НовыйЗаголовокОбъекта(?(Заголовок=Неопределено,Имя,Заголовок));
	
	НовОбъект.alignHor=ГоризонтальноеПоложение.Центр;
	НовОбъект.alignVer=ВертикальноеПоложение.Центр;
	НовОбъект.angle=0;
	НовОбъект.backColor=?(Цвет<>Неопределено,Цвет,новый Цвет);
	НовОбъект.currentLanguage="#";
	НовОбъект.groupNum=0;
	НовОбъект.hyperlink=Ложь;
	
	
	НовОбъект.passageState=0;
	НовОбъект.picturePlacement=ПоложениеКартинкиЭлементаГрафическойСхемы.Лево;
	НовОбъект.pictureStyle=4;
	НовОбъект.pointUUID=новый УникальныйИдентификатор;
	НовОбъект.tableCode=0;
	НовОбъект.transparent=Ложь;
	
	
	НовОбъект.lineColor=новый Цвет;
	НовОбъект.textColor=новый Цвет;
	НовОбъект.pointUUID=новый УникальныйИдентификатор;
	
	
	
	НовОбъект.Border=СериализаторXDTO.ЗаписатьXDTO(?(Линия<>Неопределено,Линия,новый линия(ТипСоединительнойЛинии.Сплошная,1)));
	
	
	Возврат НовОбъект;
КонецФункции // 



// Создает XDTO объект-линию графической схемы. Полученный объект можно добавить в список элементов графической схемы 
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
//  Имя  - Строка - Имя объекта схемы
//  Заголовок  - Строка - По умолчанию = Имя
//  Линия  - Линия - Тип линии, по умолчанию - сплошная, толщиной - 1
//  СтрелкаНачала  - СтильСтрелки - Стиль стрелки, по умолчанию - нет
//  СтрелкаКонца  - СтильСтрелки - Стиль стрелки, по умолчанию - заполненная
// Возвращаемое значение:
//   ОбъектXDTO   - созданная линия графической схемы
Функция новаяЛинияСхемы(ГрафСхемаXDTO,Имя,Заголовок=Неопределено,ТипЛинии=Неопределено,СтрелкаНачала=Неопределено,СтрелкаКонца=Неопределено)
	
	
	НовОбъект=СериализаторXDTO.Фабрика.Создать(СериализаторXDTO.Фабрика.Тип("http://v8.1c.ru/8.2/data/graphscheme","GraphSchemeItem"));
	
	НовОбъект.itemType=1;
	
	НовОбъект.itemId=МаксимальныйItemId(ГрафСхемаXDTO)+1;
	НовОбъект.itemTabOrder=МаксимальныйItemTabOrder(ГрафСхемаXDTO)+1;
	НовОбъект.itemCode=Имя;
	
	НовОбъект.itemTitle=НовыйЗаголовокОбъекта(?(Заголовок=Неопределено,Имя,Заголовок));
	
	
	НовОбъект.beginArrowStyle=?(СтрелкаНачала=Неопределено,СтильСтрелки.Нет,СтрелкаНачала);
	НовОбъект.endArrowStyle=?(СтрелкаКонца=Неопределено,СтильСтрелки.Заполненная,СтрелкаКонца);
	
	НовОбъект.connectFromItemId=-1;
	НовОбъект.connectFromPortIndex=0;
	НовОбъект.connectToItemId=-1;
	НовОбъект.portIndexFrom=0;
	НовОбъект.portIndexTo=0;
	
	
	НовОбъект.alignHor=ГоризонтальноеПоложение.Центр;
	НовОбъект.alignVer=ВертикальноеПоложение.Центр;
	
	НовОбъект.backColor=новый Цвет;
	
	НовОбъект.currentLanguage="#";
	НовОбъект.groupNum=0;
	НовОбъект.hyperlink=Ложь;
	
	
	НовОбъект.tableCode=0;
	НовОбъект.transparent=Ложь;
	
	
	НовОбъект.lineColor=новый Цвет;
	НовОбъект.textColor=новый Цвет;
	НовОбъект.pointUUID=новый УникальныйИдентификатор;
	
	НовОбъект.Border=СериализаторXDTO.ЗаписатьXDTO(?(ТипЛинии<>Неопределено,ТипЛинии,новый линия(ТипСоединительнойЛинии.Сплошная,1)));
	
	Возврат НовОбъект;
	
КонецФункции // 


// Создает XDTO объект-вариант для включения в список вариантов объекта ВыборВарианта
// Параметры:
//  Имя  - Строка - 
//  Заголовок  - Строка - Если не задан, то = имени
//  Цвет  - Цвет - Цвет фона
// Возвращаемое значение:
//  ОбъектXDTO   - 
Функция НовыйВариант(Имя,Заголовок=Неопределено,Цвет=Неопределено)
	Вариант=СериализаторXDTO.Фабрика.Создать(СериализаторXDTO.Фабрика.Тип("http://v8.1c.ru/8.2/data/graphscheme","Transition"));
	Вариант.name=Имя;
	
	Вариант.description=НовыйЗаголовокОбъекта(?(Заголовок=Неопределено,Имя,Заголовок));
	
	Вариант.backColor=?(Цвет<>Неопределено,Цвет,новый Цвет);
	
	Возврат Вариант;
КонецФункции // 

// Создает XDTO объект-заголовок. В содержимое заголовка включается 1 элемент - текст на языке по умолчанию
// Параметры:
// Заголовок   - Строка - 
// Возвращаемое значение:
//  ОбъектXDTO  - 
Функция НовыйЗаголовокОбъекта(Заголовок)
	Заголовки=СериализаторXDTO.Фабрика.Создать(СериализаторXDTO.Фабрика.Тип("http://v8.1c.ru/8.1/data/core","LocalStringType"));
	ЗаголовокЭлемента=СериализаторXDTO.Фабрика.Создать(СериализаторXDTO.Фабрика.Тип("http://v8.1c.ru/8.1/data/core","LocalStringItemType"));
	ЗаголовокЭлемента.lang="#";
	ЗаголовокЭлемента.content=Заголовок;
	Заголовки.Item.Добавить(ЗаголовокЭлемента);
	
	Возврат Заголовки;
КонецФункции // 


// Создает XDTO объект-точку.
// Параметры:
// x - Число - Координата x
// y - Число - Координата y
// Возвращаемое значение:
//  ОбъектXDTO  - 
Функция НоваяТочкаXDTO(x,y)
	Точка=СериализаторXDTO.Фабрика.Создать(СериализаторXDTO.Фабрика.Тип("http://v8.1c.ru/8.2/data/graphscheme","Point"));
	Точка.x=x;
	Точка.y=y;	
	Возврат Точка;
КонецФункции // 




// Возвращает количество вариантов объекта ВыборВарианта
// Параметры:
//  Объект  - ОбъектXDTO - Объект ВыборВарианта
// Возвращаемое значение:
//  Число  - 
Функция КоличествоВариантов(Объект)
	КолВоВариантов=0;
	Если Объект.itemType=КонстантыГС.ТипОбъектаВыборВарианта() Тогда   
		Если ТипЗнч(Объект.transition)=Тип("СписокXDTO") Тогда   
			КолВоВариантов=Объект.transition.Количество();
		КонецЕсли; 
	КонецЕсли; 	
	Возврат КолВоВариантов;
КонецФункции // 


// Сдвигает первый сегмент линии по вертикали
// Параметры:
//  ОбъектЛиния  - ОбъектXDTO - 
//  Смещение  - Число - 
Процедура СдвинутьПервыйСегментЛинииПоВертикали(ОбъектЛиния,Смещение)
	Если ОбъектЛиния.point[0].y=ОбъектЛиния.point[1].y Тогда    //Если первый сегмент - горизонтальный
		Если ОбъектЛиния.point.Количество()>2 или ОбъектЛиния.connectToItemId=-1 Тогда    //Если в линии несколько сегментов или конец не привязан
			ОбъектЛиния.point[0].y=ОбъектЛиния.point[0].y+Смещение;	                      // то сдвигаем весь сегмент
			ОбъектЛиния.point[1].y=ОбъектЛиния.point[1].y+Смещение;
		Иначе                                                                             // иначе - делим сегмент пополам
			Точка1=НоваяТочкаXDTO((ОбъектЛиния.point[0].x+ОбъектЛиния.point[0].y)/2,ОбъектЛиния.point[0].y+Смещение);
			Точка2=НоваяТочкаXDTO((ОбъектЛиния.point[0].x+ОбъектЛиния.point[0].y)/2,ОбъектЛиния.point[0].y);
			ОбъектЛиния.point[0].y=ОбъектЛиния.point[0].y+Смещение;	
			ОбъектЛиния.point.Вставить(1,Точка2);
			ОбъектЛиния.point.Вставить(1,Точка1);
			
		КонецЕсли; 	
	Иначе	//Если первый сегмент - вертикальный
		ОбъектЛиния.point[0].y=ОбъектЛиния.point[0].y+Смещение;
	КонецЕсли; 
	УдалитьЛишниеТочкиЛинии(ОбъектЛиния.point);
КонецПроцедуры // 

// Сдвигает последний сегмент линии по вертикали
// Параметры:
//  ОбъектЛиния  - ОбъектXDTO - 
//  Смещение  - Число - 
Процедура СдвинутьПоследнийСегментЛинииПоВертикали(ОбъектЛиния,Смещение)
	ИндексТочки=ОбъектЛиния.point.Количество()-1;
	Если ОбъектЛиния.point[ИндексТочки].y=ОбъектЛиния.point[ИндексТочки-1].y Тогда        //Если последний сегмент - горизонтальный
		Если ОбъектЛиния.point.Количество()>2 или ОбъектЛиния.connectFromItemId=-1 Тогда    //Если в линии несколько сегментов или начало не привязано
			ОбъектЛиния.point[ИндексТочки].y=ОбъектЛиния.point[ИндексТочки].y+Смещение;	  // то сдвигаем весь сегмент
			ОбъектЛиния.point[ИндексТочки-1].y=ОбъектЛиния.point[ИндексТочки-1].y+Смещение;
		Иначе                                                                             // иначе - делим сегмент пополам
			Точка1=НоваяТочкаXDTO((ОбъектЛиния.point[ИндексТочки].x+ОбъектЛиния.point[ИндексТочки].y)/2,ОбъектЛиния.point[ИндексТочки].y+Смещение);
			Точка2=НоваяТочкаXDTO((ОбъектЛиния.point[ИндексТочки].x+ОбъектЛиния.point[ИндексТочки].y)/2,ОбъектЛиния.point[ИндексТочки].y);
			ОбъектЛиния.point[ИндексТочки].y=ОбъектЛиния.point[ИндексТочки].y+Смещение;	
			ОбъектЛиния.point.Вставить(ИндексТочки,Точка1);
			ОбъектЛиния.point.Вставить(ИндексТочки,Точка2);
			
		КонецЕсли; 	
	Иначе	//Если последний сегмент - вертикальный
		ОбъектЛиния.point[ИндексТочки].y=ОбъектЛиния.point[ИндексТочки].y+Смещение;
	КонецЕсли; 
	УдалитьЛишниеТочкиЛинии(ОбъектЛиния.point);
КонецПроцедуры // 

// Если три точки лежат на одной прямой, то удаляет среднюю
// Параметры:
// Точки   - СписокXDTO - Список точек 
Процедура УдалитьЛишниеТочкиЛинии(Точки)
	с=2;
	Пока с<Точки.Количество() Цикл
		Если Точки[с].x=Точки[с-1].x и Точки[с-1].x=Точки[с-2].x Тогда   
			Точки.Удалить(с-1);
		ИначеЕсли Точки[с].y=Точки[с-1].y и Точки[с-1].y=Точки[с-2].y Тогда   
			Точки.Удалить(с-1);
		Иначе
			с=с+1;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры // 


#Область СоединениеЛинией

// Создает последовательность точек соединительной линии в зависимости от координат начального и конечного сегментов линии, а также направления конечного сегмента
//   предполагается, что начальный сегмент всегда направлен влево. При расчете не учитываются размеры и расположения фигур схемы, т.е. линия может их пересекать
//   результат возвращается в массивах ТочкиНачала, ТочкиКонца
// Параметры:
//  ТочкиНачала  - Массив - Массив начальных точек линии. Перед вызовом в массив добавлены две точки начального сегмента линии. 
//  ТочкиКонца   - Массив - Массив конечных точек линии. Перед вызовом в массив добавлены две точки конечного сегмента линии
//  Направление  - Число - Направление конечного сегмента линии (1-влево, 2-вверх, 3-вправо, 4-вниз)
Процедура СоздатьТочкиСоединительнойЛинии(ТочкиНачала,ТочкиКонца,Направление)
	МинимальнаяДлина=КонстантыГС.МинимальнаяДлинаСегмента();
	ТочкаНачала=ТочкиНачала[ТочкиНачала.ВГраница()];
	ТочкаКонца=ТочкиКонца[ТочкиКонца.ВГраница()];
	Если ТочкаКонца.x<=ТочкаНачала.x Тогда   
		Если Направление=1 
			или (Направление=2 и ТочкаКонца.y>=ТочкаНачала.y)
			или (Направление=4 и ТочкаКонца.y<=ТочкаНачала.y) Тогда   
			ТочкаНачала.x=ТочкаКонца.x;
			
		ИначеЕсли Направление=3  Тогда
			ТочкаНачала.x=(ТочкаНачала.x+ТочкаКонца.x)/2;
			ТочкаКонца.x=ТочкаНачала.x;
			
		Иначе
			Если ТочкаНачала.x-ТочкаКонца.x>МинимальнаяДлина Тогда   
				ТочкаНачала.x=(ТочкаНачала.x+ТочкаКонца.x)/2;
				НоваяТочка=НоваяТочкаXDTO(ТочкаНачала.x,ТочкаКонца.y);
				ТочкиНачала.Добавить(НоваяТочка);
			Иначе	
				ТочкаНачала.x=ТочкаКонца.x-МинимальнаяДлина;
				НоваяТочка=НоваяТочкаXDTO(ТочкаНачала.x,ТочкаКонца.y);
				ТочкиНачала.Добавить(НоваяТочка);
			КонецЕсли; 
		КонецЕсли; 
	Иначе	//ТочкаКонца.x>ТочкаНачала.x
		Если Направление=1  Тогда
			ТочкаКонца.x=ТочкаНачала.x;			
		ИначеЕсли  Направление=3 Тогда
			Если ТочкаНачала.y>ТочкаКонца.y+2*МинимальнаяДлина или ТочкаНачала.y<ТочкаКонца.y-2*МинимальнаяДлина Тогда   
				y=(ТочкаНачала.y+ТочкаКонца.y)/2;				
			Иначе
				y=Макс(ТочкаНачала.y,ТочкаКонца.y)+МинимальнаяДлина;				
			КонецЕсли; 
			НоваяТочка=НоваяТочкаXDTO(ТочкаНачала.x,y);
			ТочкиНачала.Добавить(НоваяТочка);
			НоваяТочка=НоваяТочкаXDTO(ТочкаКонца.x,y);
			ТочкиНачала.Добавить(НоваяТочка);
		ИначеЕсли Направление=2 Тогда	
			Если ТочкаНачала.y>ТочкаКонца.y+МинимальнаяДлина или ТочкаНачала.y<ТочкаКонца.y-МинимальнаяДлина Тогда
				НоваяТочка=НоваяТочкаXDTO(ТочкаНачала.x,ТочкаКонца.y);
				ТочкиНачала.Добавить(НоваяТочка);
			Иначе
				НоваяТочка=НоваяТочкаXDTO(ТочкаНачала.x,ТочкаНачала.y-МинимальнаяДлина);
				ТочкиНачала.Добавить(НоваяТочка);
				ТочкаКонца.y=НоваяТочка.y;
			КонецЕсли; 
		ИначеЕсли Направление=4 Тогда	
			Если ТочкаНачала.y>ТочкаКонца.y+МинимальнаяДлина или ТочкаНачала.y<ТочкаКонца.y-МинимальнаяДлина Тогда
				НоваяТочка=НоваяТочкаXDTO(ТочкаНачала.x,ТочкаКонца.y);
				ТочкиНачала.Добавить(НоваяТочка);
			Иначе
				НоваяТочка=НоваяТочкаXDTO(ТочкаНачала.x,ТочкаНачала.y+МинимальнаяДлина);
				ТочкиНачала.Добавить(НоваяТочка);
				ТочкаКонца.y=НоваяТочка.y;
			КонецЕсли;            
		КонецЕсли;
	КонецЕсли; 
	
	
КонецПроцедуры // 

// Поворачивает точки в массиве точек на заданный угол вокруг начала координат
// Параметры:
//  Точки  - Массив - Массив точек
//  Градус  - Число - Допустимые значения: 90, 180, 270
Процедура ПовернутьТочки(Точки,Градус)
	Для каждого Точка Из Точки Цикл   
		x=Точка.x;
		y=Точка.y;
		Если Градус=90 Тогда   
			Точка.x=y;
			Точка.y=-x;		
		ИначеЕсли Градус=180 Тогда   
			Точка.x=-x;
			Точка.y=-y;		
		ИначеЕсли Градус=270 Тогда   
			Точка.x=-y;
			Точка.y=x;				
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры // 

// Возвращает точку соединения с объектом в зависимости от направления соединения и номера варианта (для объекта ВыборВарианта)
// Параметры:
//  ОбъектЛиния  - ОбъектXDTO - 
//  Направление  - Число - 1-влево, 2-вверх, 3-вправо, 4-вниз
//  НомерВарианта  - Число - нумерация вариантов начинается с 1, 0 - соединение с самим объектом
// Возвращаемое значение:
//  ОбъектXDTO  - 
Функция ТочкаСоединения(ОбъектСхемы,Направление,НомерВарианта)
	ВысотаВарианта=КонстантыГС.ВысотаВарианта();
	КолВоВариантов=КоличествоВариантов(ОбъектСхемы);
	Если НомерВарианта=0 Тогда   
		Если Направление=1 Тогда   
			Точка=НоваяТочкаXDTO(ОбъектСхемы.rectLeft,(ОбъектСхемы.rectTop+ОбъектСхемы.rectBottom-КолВоВариантов*ВысотаВарианта)/2);	
		ИначеЕсли Направление=2 Тогда   
			Точка=НоваяТочкаXDTO((ОбъектСхемы.rectLeft+ОбъектСхемы.rectRight)/2,ОбъектСхемы.rectTop);	
		ИначеЕсли Направление=3 Тогда   
			Точка=НоваяТочкаXDTO(ОбъектСхемы.rectRight,(ОбъектСхемы.rectTop+ОбъектСхемы.rectBottom-КолВоВариантов*ВысотаВарианта)/2);	
		ИначеЕсли Направление=4 Тогда   
			Точка=НоваяТочкаXDTO((ОбъектСхемы.rectLeft+ОбъектСхемы.rectRight)/2,ОбъектСхемы.rectBottom);	
		КонецЕсли; 
	Иначе
		Если Направление=1 Тогда   
			Точка=НоваяТочкаXDTO(ОбъектСхемы.rectLeft,ОбъектСхемы.rectBottom-(КолВоВариантов-НомерВарианта)*ВысотаВарианта-ВысотаВарианта/2);	
		Иначе
			Точка=НоваяТочкаXDTO(ОбъектСхемы.rectRight,ОбъектСхемы.rectBottom-(КолВоВариантов-НомерВарианта)*ВысотаВарианта-ВысотаВарианта/2);	
		КонецЕсли; 
	КонецЕсли; 
	Возврат Точка;
КонецФункции // 

// Возвращает конечную точку первого (последнего) сегмента соединительной линии
// Параметры:
//  Точка  - ОбъектXDTO - первая (последняя) точка
//  Направление  - Число - 1-влево, 2-вверх, 3-вправо, 4-вниз
//  Длина  - Число - длина сегмента
// Возвращаемое значение:
//  ОбъектXDTO  - 
Функция КонечнаяТочкаСоединения(Точка,Направление,Длина)
	
	Если Направление=1 Тогда   
		НовТочка=НоваяТочкаXDTO(Точка.x-Длина,Точка.y);	
	КонецЕсли; 
	Если Направление=2 Тогда   
		НовТочка=НоваяТочкаXDTO(Точка.x,Точка.y-Длина);	
	КонецЕсли; 
	Если Направление=3 Тогда   
		НовТочка=НоваяТочкаXDTO(Точка.x+Длина,Точка.y);	
	КонецЕсли; 
	Если Направление=4 Тогда   
		НовТочка=НоваяТочкаXDTO(Точка.x,Точка.y+Длина);	
	КонецЕсли; 
	
	Возврат НовТочка;
КонецФункции // 


#КонецОбласти



#Область Служебные


// Возвращает максимальное значение ItemId среди всех объектов на схеме
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
// Возвращаемое значение:
//   Число   - 
Функция МаксимальныйItemId(ГрафСхемаXDTO)
	Результат=0;
	Для каждого элемент Из ГрафСхемаXDTO.item Цикл   
		Если элемент.Свойства().Получить("ItemId")<>Неопределено и ТипЗнч(элемент.ItemId)=Тип("Число")  Тогда   
			Результат=Макс(Результат,элемент.ItemId);
		КонецЕсли; 		
	КонецЦикла; 
	
	
	Возврат Результат;
КонецФункции // 

// Возвращает максимальное значение itemTabOrder среди всех объектов на схеме
// Параметры:
//  ГрафСхемаXDTO  - ОбъектXDTO - Объект, с сериализованной графической схемой
// Возвращаемое значение:
//   Число   - 
Функция МаксимальныйItemTabOrder(ГрафСхемаXDTO)
	Результат=0;
	Для каждого элемент Из ГрафСхемаXDTO.item Цикл   
		Если элемент.Свойства().Получить("itemTabOrder")<>Неопределено и ТипЗнч(элемент.itemTabOrder)=Тип("Число")  Тогда   
			Результат=Макс(Результат,элемент.itemTabOrder);
		КонецЕсли; 		
	КонецЦикла; 	
	Возврат Результат;
КонецФункции // 


// Преобразует строку - последовательность чисел в массив
// Параметры:
//  Строка  - Строка - Строка чисел, разделенных запятыми
// Возвращаемое значение:
//   Массив   - Массив чисел
Функция СтрокуВМассивЧисел(Строка)
	Строка=СтрЗаменить(Строка," ","");
	Строка=СтрЗаменить(Строка,Символы.НПП,"");
	Результат=новый Массив; 
	
	НачальнаяПозиция=1;
	ПозицияЗапятой=СтрНайти(Строка,",",НаправлениеПоиска.СНачала,НачальнаяПозиция);
	Пока ПозицияЗапятой<>0 Цикл		
		Результат.Добавить(Число(Сред(Строка,НачальнаяПозиция,ПозицияЗапятой-НачальнаяПозиция)));					
		НачальнаяПозиция=ПозицияЗапятой+1;			
		ПозицияЗапятой=СтрНайти(Строка,",",НаправлениеПоиска.СНачала,НачальнаяПозиция);
	КонецЦикла; 
	Результат.Добавить(Число(Сред(Строка,НачальнаяПозиция)));			
	
	Возврат Результат;
КонецФункции // 



#КонецОбласти