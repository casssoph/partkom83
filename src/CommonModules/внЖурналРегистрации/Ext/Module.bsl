///////////////////////////////////////////////////////////////////////////////
// СИСТЕМНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возникает при начале работы системы
Процедура ПриНачалеРаботыСистемы(Параметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры <> Неопределено Тогда
		внЖурналРегистрацииСервер.ИнициализацияПараметровПриНачалеРаботы(Параметры);
	КонецЕсли;
	
	//====================================================================
	// Проверка, что Настройки заполнены
	ПроверкаЗаполненияНастроек();
	
	// Защита от дубликатов баз
	Если внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
		
		// Обновление информационной базы
		Если ПравоДоступа("Использование", Метаданные.Обработки.внНастройкаЖурналаРегистрации) Тогда		
			Обработки.внНастройкаЖурналаРегистрации.ВыполнитьОбновление();
		КонецЕсли;
		
		внЖурналРегистрацииСервер.РегистрацияВходаПользователя();
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеРаботыСистемы

// Возникает при завершении работы
Процедура ПриЗавершенииРаботыСистемы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
		
		внЖурналРегистрацииСервер.РегистрацияВыходаПользователя();
		
	КонецЕсли;
	
	// Освобождаем соединение и его память (если оно создано)
	ОтключитьСоединение();
	
КонецПроцедуры // ПриЗавершенииРаботыСистемы

// Вызывается из модуля сеанса
Процедура УстановкаПараметровСеанса() Экспорт
	
	// ПОКА ЗДЕСЬ ПУСТО
	
КонецПроцедуры // УстановкаПараметровСеанса

/////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ

Функция ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками)
	
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
	
КонецФункции
	
Функция НайтиПоПредставлениюВСпискеЗначений(СЗ, Представление) Экспорт
	
	Для Каждого Элемент Из СЗ Цикл
		Если ВРег(Элемент.Представление) = ВРег(Представление) Тогда
			Возврат Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Возвращает числовой вес версии для сравнения версий между собой
//
// Параметры:
//  Версия - Строка - Версия в строковом формате
//
// Возвращаемое значение:
//  Число - вес версии
//
Функция ВесВерсии(Знач Версия) Экспорт
	
	Если Версия = "" Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ВесВерсииИзМассиваСтрок(внРазложитьСтрокуВМассивПодстрок(Версия, "."));
	
КонецФункции

Функция ПолучитьТекущуюВерсию() Экспорт
	        
	Возврат внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("Версия");
	
КонецФункции

Функция СтрЗаменитьБезУчетаРегистра(Стр, ПодстрокаПоиска, ПодстрокаЗамены) Экспорт
	
	Результат = Стр;
	
	Индекс = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска));
	Пока Индекс > 0 Цикл
		
		Результат = Лев(Результат, Индекс - 1) + ПодстрокаЗамены + Сред(Результат, Индекс + СтрДлина(ПодстрокаПоиска));
		Индекс = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьТекстВHTML(Текст)
	
	Результат = Текст;
	
	Результат = СтрЗаменить(Результат, "[+]", "<span class=""new"">[+]</span>");
	Результат = СтрЗаменить(Результат, "[*]", "<span class=""edt"">[*]</span>");
	Результат = СтрЗаменить(Результат, "[-]", "<span class=""err"">[-]</span>");
	Результат = СтрЗаменить(Результат, "[!]", "<span class=""err"">[!]</span>");

	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[br]", "<br>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[b]", "<b>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/b]", "</b>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[i]", "<i>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/i]", "</i>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[u]", "<u>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/u]", "</u>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[s]", "<s>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/s]", "</s>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[quote]", "<blockquote>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/quote]", "</blockquote>");
	
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[code]", "<pre>");
	Результат = СтрЗаменитьБезУчетаРегистра(Результат, "[/code]", "</pre>");
	
	Результат = СтрЗаменить(Результат, Символы.ПС, "<br>");
		
	// [url=site]name[/url]
	ПодстрокаПоиска1 = "[url=";
	ПодстрокаПоиска2 = "[/url]";
	Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходанаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		Если Найти(ВРЕГ(СсылкаСайта), ВРег("http://")) = 0 И Найти(ВРЕГ(СсылкаСайта), ВРег("https://")) = 0 Тогда
			СсылкаСайта = "http://" + СсылкаСайта;
		КонецЕсли;
					 
		Стр = "<a href=""" + СсылкаСайта + """ target=""_blank"">" + Сред(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") + 1, Найти(ВРег(ИсходанаяСтрока), ВРег(ПодстрокаПоиска2)) - Найти(ИсходанаяСтрока, "]") - 1) + "</a>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	// [url]site[/url]
	ПодстрокаПоиска1 = "[url]";
	ПодстрокаПоиска2 = "[/url]";
	Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходанаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходанаяСтрока, Найти(Врег(ИсходанаяСтрока), ВРег(ПодстрокаПоиска2)) - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		Если Найти(ВРЕГ(СсылкаСайта), ВРег("http://")) = 0 И Найти(ВРЕГ(СсылкаСайта), ВРег("https://")) = 0 Тогда
			СсылкаСайта = "http://" + СсылкаСайта;
		КонецЕсли;
					 
		Стр = "<a href=""" + СсылкаСайта + """ target=""_blank"">" + СсылкаСайта + "</a>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	// [img]site[/img]
	ПодстрокаПоиска1 = "[img]";
	ПодстрокаПоиска2 = "[/img]";
	Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходанаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходанаяСтрока, Найти(Врег(ИсходанаяСтрока), ВРег(ПодстрокаПоиска2)) - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		Если Найти(ВРЕГ(СсылкаСайта), ВРег("http://")) = 0 И Найти(ВРЕГ(СсылкаСайта), ВРег("https://")) = 0 Тогда
			СсылкаСайта = "http://" + СсылкаСайта;
		КонецЕсли;
					 
		Стр = "<img src=""" + СсылкаСайта + """/>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	// [color=red]Цветной текст[/color]
	ПодстрокаПоиска1 = "[color=";
	ПодстрокаПоиска2 = "[/color]";
	Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходанаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		СсылкаСайта = "color:" + СсылкаСайта;
					 
		Стр = "<span style=""" + СсылкаСайта + """>" + Сред(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") + 1, Найти(ВРег(ИсходанаяСтрока), ВРег(ПодстрокаПоиска2)) - Найти(ИсходанаяСтрока, "]") - 1) + "</span>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;	

	// [size=15]Размер текста[/size]
	ПодстрокаПоиска1 = "[size=";
	ПодстрокаПоиска2 = "[/size]";
	Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
	Пока Индекс1 > 0 И Индекс2 > 0 Цикл
		
		ИсходанаяСтрока = Сред(Результат, Индекс1 + СтрДлина(ПодстрокаПоиска1), Индекс2 - Индекс1 + 1);
		СсылкаСайта = Лев(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") - 1);
		СсылкаСайта = СтрЗаменить(СсылкаСайта, """", "");
		СсылкаСайта = "font-size:" + СсылкаСайта + "px";
					 
		Стр = "<span style=""" + СсылкаСайта + """>" + Сред(ИсходанаяСтрока, Найти(ИсходанаяСтрока, "]") + 1, Найти(ВРег(ИсходанаяСтрока), ВРег(ПодстрокаПоиска2)) - Найти(ИсходанаяСтрока, "]") - 1) + "</span>";
		
		Результат = Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2 + СтрДлина(ПодстрокаПоиска2));
		
		Индекс1 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		Индекс2 = Найти(ВРег(Результат), ВРег(ПодстрокаПоиска2));
		
	КонецЦикла;
	
	// FS (Опционально)
	ПодстрокаПоиска1 = "FS#";
	Индекс1 		= Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
	Пока Индекс1 > 0 Цикл
		
		НомерТикета 	= "";
		Индекс2			= Индекс1 + СтрДлина(ПодстрокаПоиска1);
		Пока Индекс2 <= СтрДлина(Результат) Цикл
			Если Найти("0123456789", Сред(Результат, Индекс2, 1)) = 0 Тогда
				Прервать;
			КонецЕсли;
			НомерТикета = НомерТикета + Сред(Результат, Индекс2, 1);
			Индекс2		= Индекс2 + 1;
		КонецЦикла;
		
		Стр			= "<a href=""http://softonit.ru/tickets/index.php?do=details&project=2&task_id=" + НомерТикета + """ target=""_blank"">FS #" + НомерТикета + "</a>";		
		Результат	= Лев(Результат, Индекс1 - 1) + Стр + Сред(Результат, Индекс2);
		Индекс1		= Найти(ВРег(Результат), ВРег(ПодстрокаПоиска1));
		
	КонецЦикла;

	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруОписанияОбновлений(Принудительно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Структура("НеобходимоОбновление,ТекстПриОбновлении", Ложь, "");
	
	// Если web-клиент ничего не делаем
	#Если ВебКлиент ИЛИ ВнешнееСоединение Тогда
		Возврат Результат;
	#КонецЕсли
	
	// Не делаем ничего, если это сеанс внешнего пользователя
	Попытка 
		Выполнить("Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда Возврат Результат; КонецЕсли;");
	Исключение
	КонецПопытки;
		
	// НАЧАЛО КОНСТАНТЫ
	Сайт								= "softonit.ru";
	ДиректорияНаСайте					= "/upd/";
	ФайлОбновлений						= "updates.zip";
	Продукт								= "journal";	// Имя продукта
	ПериодичностьПроверкиОбновлений 	= 7; 			// Дней между проверками	
	Производитель						= "SoftOnIT.RU";
	Таймаут								= 5;	
	ЗаписыватьОшибку					= Истина;
	// КОНЕЦ КОНСТАНТЫ
	
	URLФайлОбновлений					= Сайт + ДиректорияНаСайте + ФайлОбновлений; 
	КаталогИнсталляции 					= КаталогВременныхФайлов() + Продукт + "\";
	ФайлИнсталяции						= КаталогИнсталляции + "updates.xml";
	
	// Проверка необходимости обновления (при автоматическом запуске)
	Если Принудительно = Ложь Тогда
		                                
		// Получаем дату для пользовтеля
		Попытка
			ДатаПоследнейПроверкиОбновления = ХранилищеОбщихНастроек.Загрузить("ДатаПоследнейПроверкиОбновления", ИмяПользователя(), Дата(1, 1, 1));
			Если ДатаПоследнейПроверкиОбновления = Неопределено Тогда
				ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1);
			КонецЕсли;
		Исключение
			ДатаПоследнейПроверкиОбновления = Дата(1, 1, 1);
		КонецПопытки;
		ДатаТекущейПроверкиОбновления	= ТекущаяДата();
		
		// Необходимо ли обновлять или нет?
		Если ДатаТекущейПроверкиОбновления - ДатаПоследнейПроверкиОбновления < ПериодичностьПроверкиОбновлений * 86400 Тогда
			Возврат Результат;
		КонецЕсли;
		
		// Установка новой даты
		Попытка
			ХранилищеОбщихНастроек.Сохранить("ДатаПоследнейПроверкиОбновления", ИмяПользователя(), ДатаТекущейПроверкиОбновления); 
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	ИмяАрхивногоФайла = ПолучитьИмяВременногоФайла("zip");	
	
	Попытка
		ЕстьОшибки = Ложь;
		Соединение = Новый HTTPСоединение(Сайт, 80);
		Соединение.Получить(ДиректорияНаСайте + ФайлОбновлений, ИмяАрхивногоФайла);
	Исключение
	  ЕстьОшибки = Истина;
	КонецПопытки;	
	
	Если ЕстьОшибки Тогда
		Возврат Результат;
	КонецЕсли;                    
	
	Попытка
		ФайлАрхива = Новый ЧтениеZipФайла(ИмяАрхивногоФайла);
		ФайлАрхива.ИзвлечьВсе(КаталогИнсталляции, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ФайлАрхива.Закрыть();
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	// Сведения о текущей версии
	ТекущаяВерсия		= ПолучитьТекущуюВерсию();
	ВесТекущейВерсии	= ВесВерсии(ТекущаяВерсия);
	
	ТаблицаВерсий		= Новый ТаблицаЗначений;
	ТаблицаВерсий.Колонки.Добавить("ИмяФайла");
	ТаблицаВерсий.Колонки.Добавить("Дата");
	ТаблицаВерсий.Колонки.Добавить("Размер");
	ТаблицаВерсий.Колонки.Добавить("НовостьURL");
	ТаблицаВерсий.Колонки.Добавить("НовостьURLТекст");
	ТаблицаВерсий.Колонки.Добавить("ВерсияТекущая");
	ТаблицаВерсий.Колонки.Добавить("ВерсияПерехода");
	
	// Разбор XML
	ЧтениеXML			= Новый ЧтениеXML();
	Попытка
		ЧтениеXML.ОткрытьФайл(ФайлИнсталяции);
		ЧтениеXML.Прочитать();	
	Исключение
		Возврат Результат;
	КонецПопытки;
	ПостроительDOM		= Новый ПостроительDOM;
	ДокументДОМ			= ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	// Перебираем все обновления
	ЭлементыДОМ			= ДокументДОМ.ПолучитьЭлементыПоИмени("update");
	Для Каждого Элемент Из ЭлементыДОМ Цикл
		
		// Определяем продукт
		ИмяПродукта		= "";
		Атрибуты 		= Элемент.Атрибуты;
		Для каждого Атрибут Из Атрибуты Цикл
			Если НРег(Атрибут.ИмяУзла) = "product" Тогда
				ИмяПродукта = СокрЛП(Атрибут.ТекстовоеСодержимое);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Обновление не для текущего продукта
		Если НРег(ИмяПродукта) <> НРег(Продукт) Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполняем список значений для обновления со всеми значениями тегов
		СЗ = Новый СписокЗначений;
		ДочерниеУзлы = Элемент.ДочерниеУзлы;
		Для каждого Узел Из ДочерниеУзлы Цикл
			СЗ.Добавить(СокрЛП(Узел.ТекстовоеСодержимое), НРег(СокрЛП(Узел.ИмяУзла)));
		КонецЦикла;
		
		// Пропускаем для старых весий
		ВерсияТекущая	= НайтиПоПредставлениюВСпискеЗначений(СЗ, "version");
		Если ВесВерсии(ВерсияТекущая) <= ВесТекущейВерсии Тогда
			Продолжить;
		КонецЕсли;
				
		НоваяСтрока					= ТаблицаВерсий.Добавить();
		НоваяСтрока.ИмяФайла		= НайтиПоПредставлениюВСпискеЗначений(СЗ, "file");
		НоваяСтрока.Дата			= НайтиПоПредставлениюВСпискеЗначений(СЗ, "date");
		НоваяСтрока.Размер			= НайтиПоПредставлениюВСпискеЗначений(СЗ, "size");
		НоваяСтрока.НовостьURL		= НайтиПоПредставлениюВСпискеЗначений(СЗ, "newsurl");
		
		// Определяем текст новости
		ТекстНовости				= НайтиПоПредставлениюВСпискеЗначений(СЗ, "newstext");
		Если ПустаяСтрока(ТекстНовости) Тогда
			// Значит надо загрузить новости из файла на сервере
			СсылкаНаСодержание		= НайтиПоПредставлениюВСпискеЗначений(СЗ, "newstexturl");
			Если НЕ ПустаяСтрока(СсылкаНаСодержание) Тогда

				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");

				Попытка
					ЕстьОшибки = Ложь;
					Соединение = Новый HTTPСоединение(Сайт, 80);
					Соединение.Получить(ДиректорияНаСайте + Продукт + "/" + СсылкаНаСодержание, ИмяВременногоФайла);
				Исключение
				  ЕстьОшибки = Истина;
				КонецПопытки;	
				
				Если НЕ ЕстьОшибки Тогда
					ТД				= Новый ТекстовыйДокумент();
					ТД.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
					ТекстНовости	= ТД.ПолучитьТекст();
				КонецЕсли;				                         
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.НовостьURLТекст = ПреобразоватьТекстВHTML(ТекстНовости);
		НоваяСтрока.ВерсияТекущая	= ВерсияТекущая;
		НоваяСтрока.ВерсияПерехода	= НайтиПоПредставлениюВСпискеЗначений(СЗ, "target");
		
	КонецЦикла;		
	
	ТаблицаВерсий.Сортировать("ВерсияТекущая Убыв");
	
	// Проверка таблицы надо ли обновлять текущую обработку
	Если ТаблицаВерсий.Количество() > 0 Тогда
		Результат.НеобходимоОбновление	= Истина;

		Содержание						= "";
		Для Каждого Строки Из ТаблицаВерсий Цикл

			Содержание = Содержание + 
				?(ПустаяСтрока(Содержание)				, "", "<hr>") + 
				"<b>Версия обновления: " + Строки.ВерсияТекущая + " от " + Строки.Дата + "</b><br>" + 
				?(ПустаяСтрока(Строки.НовостьURLТекст)	, "", Символы.ПС + Строки.НовостьURLТекст + "<br>") +
				?(ПустаяСтрока(Строки.ВерсияПерехода)	, "", ?(Строки.ВерсияПерехода = "*", "Обовление устанавливается на любую версию", "Обовление устанавливается на версии: <b>" + Строки.ВерсияПерехода + "</b>") + "<br>") +
				?(ПустаяСтрока(Строки.НовостьURL)		, "", "<a href=""" + Строки.НовостьURL +""" target=""_blank"">Новость на сайте</a><br>") +				
				?(ПустаяСтрока(Строки.ИмяФайла)			, "", "<a href=""" + Строки.ИмяФайла +""" target=""_blank"">Скачать обновление (" + Строки.Размер + ")</a><br>")
				;
				
		КонецЦикла;
		
		// Текст полностью 
		Результат.ТекстПриОбновлении = 
			"<html><head><style type=""text/css"">
			|.new {font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;color:#090;} 
			|.edt {font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;color:#005EF9;}
			|.err {font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;color:#FF0000;}
			|.nws {font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;color:#810A0A;}
			|</style></head><body>		
			|<font face=""Arial"" size=""2"">" + Содержание + "</font></body></html>";
		
	КонецЕсли;
	
	Результат.Вставить("КоличествоОбновлений",  ТаблицаВерсий.Количество());
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С СОЕДИНЕНЕМ

// Получает соединение с SQL Server, если не удалось подключиться возвращает Неопределено
Функция ПолучитьСоединение() Экспорт
	
	Возврат ПодключениеКВнешнейИБ(ПолучитьПараметрыДоступаКБазеДанных());
	
КонецФункции // ПолучитьвнСоединение

Функция ОтключитьСоединение() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		АдресСоединения = ПараметрыСеанса.внАдресСоединения;
	Исключение
		АдресСоединения = "";
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(АдресСоединения) Тогда
		Попытка
			Структура	= ПолучитьИзВременногоХранилища(АдресСоединения);
			Соединение	= Структура.Соединение;
			Соединение	= Неопределено;
			Соединение	= "";
			УдалитьИзВременногоХранилища(АдресСоединения);
			ПараметрыСеанса.внАдресСоединения = "";
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вернуть имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
Функция ИмяCOMСоединителяПоВерсииПлатформы() Экспорт
	
	ВерсияПлатформыХранителя = внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВерсияПлатформыХранителя");
	
	Если ЗначениеЗаполнено(ВерсияПлатформыХранителя) Тогда
		
		Если ВерсияПлатформыХранителя = Перечисления.внВерсияПлатформыХранителя.v82 Тогда
			Результат		= "82";
		Иначе
			Результат		= "83";
		КонецЕсли;
		
	Иначе
	
		СисИнфо 		= Новый СистемнаяИнформация;
		ПодстрокиВерсии = внРазложитьСтрокуВМассивПодстрок(СисИнфо.ВерсияПриложения, ".");
		Результат		= ПодстрокиВерсии[0] + ПодстрокиВерсии[1];
		
	КонецЕсли;
	
	Возврат "v" + Результат + ".COMConnector";
	
КонецФункции

// Получает соединение с SQL Server, если не удалось подключиться возвращает Неопределено
Функция ПолучитьСоединениеПоПарамерам(Параметры) Экспорт
	
	Возврат ПодключениеКВнешнейИБ(Параметры);
	
КонецФункции // ПолучитьвнСоединение

// Возвращает Таблицу значений со столбцами Пользователь, КоличествоИзменений, ДатаИзменений
// со статистикой по пользователю в данный день.
Функция ПолучитьСтатистикуРаботыПользователей(Знач ДатаНач, Знач ДатаКон) Экспорт
	
	внСоединение = ПолучитьСоединение();
	Если внСоединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеСобытий	= СоответствиеСобытий(внСоединение, "Наименование");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Пользователь");
	ТЗ.Колонки.Добавить("КоличествоИзменений");
	ТЗ.Колонки.Добавить("ДатаИзменений");
	ТЗ.Колонки.Добавить("Событие");
	ТЗ.Колонки.Добавить("МетаданныеОбъекта");
	
	// Из внешней базы
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(внЖурналРегистрации.ДатаИзменения, ДЕНЬ) КАК ДатаИзменений,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(внЖурналРегистрации.Пользователь) КАК Пользователь,
	|	внЖурналРегистрации.Событие.Код КАК Событие,
	|	ЕСТЬNULL(внЖурналРегистрации.МетаданныеОбъекта.ПолноеНаименование, """") КАК МетаданныеОбъекта,
	|	СУММА(1) КАК КоличествоИзменений
	|ИЗ
	|	Справочник.внЖурналРегистрации КАК внЖурналРегистрации
	|ГДЕ
	|	внЖурналРегистрации.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И внЖурналРегистрации.ИнформационнаяБаза = &ИнформационнаяБаза
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(внЖурналРегистрации.ДатаИзменения, ДЕНЬ),
	|	внЖурналРегистрации.Пользователь,
	|	внЖурналРегистрации.Событие,
	|	внЖурналРегистрации.МетаданныеОбъекта";
	
	ИдентификаторИБСсылка = внСоединение.внЖурналРегистрации.ПолучитьСсылкуИнформационнойБазы(внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИдентификаторИБСсылка);	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Событие = СоответствиеСобытий.Получить(Выборка.Событие);
	КонецЦикла;	
	
	// Из Кэша
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(внКэшЖурналаРегистрации.ДатаИзменения, ДЕНЬ) КАК ДатаИзменений,
	|	внКэшЖурналаРегистрации.Пользователь,
	|	внКэшЖурналаРегистрации.Событие,
	|	внКэшЖурналаРегистрации.МетаданныеОбъекта,
	|	СУММА(1) КАК КоличествоИзменений
	|ИЗ
	|	РегистрСведений.внКэшЖурналаРегистрации КАК внКэшЖурналаРегистрации
	|ГДЕ
	|	внКэшЖурналаРегистрации.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(внКэшЖурналаРегистрации.ДатаИзменения, ДЕНЬ),
	|	внКэшЖурналаРегистрации.Пользователь,
	|	внКэшЖурналаРегистрации.Событие,
	|	внКэшЖурналаРегистрации.МетаданныеОбъекта"
	);
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "Событие");
		НоваяСтрока.Событие = СоответствиеСобытий.Получить(Выборка.Событие);
	КонецЦикла;	
	
	Возврат ТЗ;
	
КонецФункции // ПолучитьСтатистикуРаботыПользователей

Функция ЗначениеВСпискеЗначенийПоПредставлению(Знач СЗ, Знач Представление) Экспорт
	
	Для Каждого Элемент Из СЗ Цикл
		
		Если Элемент.Представление = Представление Тогда
			
			Возврат Элемент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиВСпискеЗначенийПоПредставлению

// Возвращает всех пользователей ИБ
Функция СписокПользователейИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый СписокЗначений;
	Попытка
		МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для Каждого П Из МассивПользователей Цикл
		
			Результат.Добавить(П.Имя, П.Имя);
		
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // СписокПользователейИнформационнойБазы

// Получает из внешней ИБ всех пользователей, которые делали изменения
Функция ПолучитьПользователейИстории(Соединение = Неопределено) Экспорт
	
	// Текущие пользователи ИБ
	СЗ = СписокПользователейИнформационнойБазы();	
	
	// Получаем из внешней базы	
	внСоединение = ?(Соединение = Неопределено, ПолучитьСоединение(), Соединение);
	
	Если внСоединение = Неопределено Тогда
		Возврат СЗ;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	внПользователи.Наименование КАК Наименование,
	|	внПользователи.Код
	|ИЗ
	|	Справочник.внПользователи КАК внПользователи
	|ГДЕ
	|	внПользователи.Владелец.ИдентификаторИБ = &ИдентификаторИБ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ИдентификаторИБ", внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Элемент = ЗначениеВСпискеЗначенийПоПредставлению(СЗ, Выборка.Наименование);
		Если Элемент = Неопределено Тогда
			СЗ.Добавить(Выборка.Код, Выборка.Наименование);
		Иначе
			Элемент.Значение = Выборка.Код;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СЗ;
	
КонецФункции // ПолучитьПользователейИстории

// Получает из внешней ИБ все компьютеры, на которых делали изменения
Функция ПолучитьКомпьютерыИстории(Соединение = Неопределено) Экспорт
	
	СЗ = Новый СписокЗначений;
	
	внСоединение = ?(Соединение = Неопределено, ПолучитьСоединение(), Соединение);
	
	Если внСоединение = Неопределено Тогда
		Возврат СЗ;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	внКомпьютеры.Наименование КАК Наименование,
	|	внКомпьютеры.Код
	|ИЗ
	|	Справочник.внКомпьютеры КАК внКомпьютеры
	|ГДЕ
	|	внКомпьютеры.Владелец.ИдентификаторИБ = &ИдентификаторИБ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ИдентификаторИБ", внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СЗ.Добавить(Выборка.Код, Выборка.Наименование);
		
	КонецЦикла;
	
	Возврат СЗ;
	
КонецФункции // ПолучитьКомпьютерыИстории

// Получает из внешней ИБ все компьютеры, на которых делали изменения
Функция ПолучитьУзлыРИБИстории(Соединение = Неопределено) Экспорт
	
	СЗ = Новый СписокЗначений;
	
	внСоединение = ?(Соединение = Неопределено, ПолучитьСоединение(), Соединение);
	
	Если внСоединение = Неопределено Тогда
		Возврат СЗ;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	внУзлыРИБ.Наименование КАК Наименование,
	|	внУзлыРИБ.Код		
	|ИЗ
	|	Справочник.внУзлыРИБ КАК внУзлыРИБ
	|ГДЕ
	|	внУзлыРИБ.Владелец.ИдентификаторИБ = &ИдентификаторИБ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ИдентификаторИБ", внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СЗ.Добавить(Выборка.Код, Выборка.Наименование);
		
	КонецЦикла;
	
	Возврат СЗ;
	
КонецФункции // ПолучитьУзлыРИБИстории

// Получить все виды событий истории из внешней ИБ
Функция ПолучитьСобытияИстории(Соединение = Неопределено) Экспорт
	
	СЗ = Новый СписокЗначений;
	
	внСоединение = ?(Соединение = Неопределено, ПолучитьСоединение(), Соединение);
	
	Если внСоединение = Неопределено Тогда
		Возврат СЗ;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	внСобытия.Наименование КАК Наименование,
	|	внСобытия.Код
	|ИЗ
	|	Справочник.внСобытия КАК внСобытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СЗ.Добавить(Выборка.Код, Выборка.Наименование);
		
	КонецЦикла;
	
	Возврат СЗ;
	
КонецФункции // ПолучитьСобытияИстории

// Получить все виды событий истории из внешней ИБ
Функция ПолучитьМетаданныеИстории(Соединение = Неопределено) Экспорт
	
	СЗ = Новый СписокЗначений;
	
	внСоединение = ?(Соединение = Неопределено, ПолучитьСоединение(), Соединение);
	
	Если внСоединение = Неопределено Тогда
		Возврат СЗ;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	внМетаданные.Код,
	|	внМетаданные.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.внМетаданные КАК внМетаданные
	|ГДЕ
	|	внМетаданные.Владелец.ИдентификаторИБ = &ИдентификаторИБ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолноеНаименование";
	
	Запрос.УстановитьПараметр("ИдентификаторИБ", внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СЗ.Добавить(Выборка.Код, Выборка.Наименование);
		
	КонецЦикла;
	
	Возврат СЗ;
	
КонецФункции // ПолучитьМетаданныеИстории

//ПодключениеКВнешнейИБ - Функция подключения к серверу с использованием механизмов ADO DB
//Параметры:
//	ПараметрыПодключения - тип Структура("ИмяСервера,ИмяПользователя,Пароль,ИмяБазы,СтрокаПодключения")
//			ИмяСервера			- имя SQL-сервера
//			ИмяПользователя		- Имя пользователя (sa или другой)
//			Пароль				- Пароль пользователя
//			ИмяБазы				- Имя базы данных
//			СтрокаПодключения	- (необязательный параметр) можно передать готовую строку подключения, 
//									если пустая тогда подключение по параметрам
Функция ПодключениеКВнешнейИБ(ПараметрыПодключения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Пытаемся достать соединения из параметров сеанса
	Попытка
		АдресСоединения = ПараметрыСеанса.внАдресСоединения;
	Исключение
		АдресСоединения = "";
	КонецПопытки;
	
	// Пытаемся достать соединения из параметров сеанса
	Если НЕ ПустаяСтрока(АдресСоединения) Тогда
		
		Попытка
			
			Структура	= ПолучитьИзВременногоХранилища(АдресСоединения);
			Соединение	= Структура.Соединение;
			Если Соединение <> Неопределено Тогда
				// Проверяем, доступно ли соединение
				Если Соединение.Справочники.внЖурналРегистрации.Доступен() = Истина Тогда
					Возврат Соединение;
				КонецЕсли;
			КонецЕсли;
			
		Исключение			
		КонецПопытки;		
		
		Если Соединение <> Неопределено Тогда
			ОтключитьСоединение();
		КонецЕсли;
		
	КонецЕсли;
	
	ТипИБ				= ПараметрыПодключения.ТипИБ;
	ПутьКВнешнейИБ		= ПараметрыПодключения.ПутьКВнешнейИБ;
	ИмяСервера			= ПараметрыПодключения.СерверВнешнейИБ;
	ИмяПользователя 	= ПараметрыПодключения.ПользовательВнешнейИБ;
	Пароль				= ПараметрыПодключения.ПарольВнешнейИБ;
	ИмяБазы				= ПараметрыПодключения.ИмяВнешнейИБ;
	
	Если (ТипИБ = Перечисления.внТипИБ.Серверная И ПустаяСтрока(ИмяСервера) И ПустаяСтрока(ИмяБазы)) ИЛИ (ТипИБ = Перечисления.внТипИБ.Файловая И ПустаяСтрока(ПутьКВнешнейИБ)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипИБ = Перечисления.внТипИБ.Серверная Тогда
		СтрокаСоединения = "Srvr=""" + ИмяСервера + """; Ref=""" + ИмяБазы + """;";
	Иначе
		СтрокаСоединения = "File=""" + ПутьКВнешнейИБ + """;";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяПользователя) Тогда
		СтрокаСоединения = СтрокаСоединения + " Usr=""" + ИмяПользователя + """;";
		Если Не ПустаяСтрока(Пароль) Тогда
			СтрокаСоединения = СтрокаСоединения + " Pwd=""" + Пароль + """;";
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		
		COM			= Новый COMОбъект(ИмяCOMСоединителяПоВерсииПлатформы());
		Соединение	= COM.Connect(СтрокаСоединения);
		
		// Добавляем соединения в параметр сеанса
		Структура	= Новый Структура("Соединение", Соединение); 
		ПараметрыСеанса.внАдресСоединения = ПоместитьВоВременноеХранилище(Структура, Новый УникальныйИдентификатор);
		
	Исключение
		
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ВнешнийЖурналРегистрации", УровеньЖурналаРегистрации.Ошибка,, "Ошибка соединения с ИБ <Хранитель>", Ошибка);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции // ПодключениеКВнешнейИБ

// Возвращает параметры подключения к серверу MS SQL
// Возвращает Структуру
Функция ПолучитьПараметрыДоступаКБазеДанных() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ТипИБ"					, внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ТипИБ"));
	Параметры.Вставить("СерверВнешнейИБ"		, внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("СерверВнешнейИБ"));
	Параметры.Вставить("ПользовательВнешнейИБ"	, внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ПользовательВнешнейИБ"));
	Параметры.Вставить("ПарольВнешнейИБ"		, внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ПарольВнешнейИБ"));
	Параметры.Вставить("ИмяВнешнейИБ"			, внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ИмяВнешнейИБ"));
	Параметры.Вставить("ПутьКВнешнейИБ"			, внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ПутьКВнешнейИБ"));	
	
	Возврат Параметры;
	
КонецФункции // ПолучитьПараметрыДоступаКБазеДанных

// Возвращает параметры подключения к серверу MS SQL
// Возвращает Структуру
Функция ЗадатьПараметрыДоступаКБазеДанных(ТипИБ, СерверВнешнейИБ, ПользовательВнешнейИБ, ПарольВнешнейИБ, ИмяВнешнейИБ, ПутьКВнешнейИБ) Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ТипИБ", 				ТипИБ);
	Параметры.Вставить("СерверВнешнейИБ", 		СерверВнешнейИБ);
	Параметры.Вставить("ПользовательВнешнейИБ", ПользовательВнешнейИБ);
	Параметры.Вставить("ПарольВнешнейИБ", 		ПарольВнешнейИБ);
	Параметры.Вставить("ИмяВнешнейИБ", 			ИмяВнешнейИБ);
	Параметры.Вставить("ПутьКВнешнейИБ", 		ПутьКВнешнейИБ);
	
	Возврат Параметры;
	
КонецФункции // ЗадатьПараметрыДоступаКБазеДанных

// Проверяет уникальна ли строка идентификатора если да возращает Истина, иначе Ложь
// В переменной Ошибка возвращает строку с указанием ошибки пользователю
Функция ПроверитьИдентификаторИБНаУникальность(Знач ИдентификаторИБ, Ошибка) Экспорт
	
	Ошибка			= "";
	Результат		= Истина;
	внСоединение	= ПолучитьСоединение();
	Если внСоединение = Неопределено Тогда
		Ошибка = "Невозможно подключиться к базе данных!";
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
		"ВЫБРАТЬ
		|	внИнформационныеБазы.ИдентификаторИБ,
		|	СУММА(1) КАК Колво
		|ИЗ
		|	Справочник.внИнформационныеБазы КАК внИнформационныеБазы
		|ГДЕ
		|	внИнформационныеБазы.ИдентификаторИБ = &ИдентификаторИБ
		|
		|СГРУППИРОВАТЬ ПО
		|	внИнформационныеБазы.ИдентификаторИБ";
		
	Запрос.УстановитьПараметр("ИдентификаторИБ", ИдентификаторИБ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() ТОгда
		Если Выборка.Колво >= 1 Тогда
			Ошибка = "Данный идентификатор базы данных уже есть в журнале регистрации!";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьИдентификаторИБНаУникальность

// Список идентификторов ИБ с параметрами
Функция ПолучитьСписокИдентификаторовИБ(ТипИБ, СерверВнешнейИБ, ПользовательВнешнейИБ, ПарольВнешнейИБ, ИмяИБ, ПутьКВнешнейИБ) Экспорт
	
	Параметры		= ЗадатьПараметрыДоступаКБазеДанных(ТипИБ, СерверВнешнейИБ, ПользовательВнешнейИБ, ПарольВнешнейИБ, ИмяИБ, ПутьКВнешнейИБ);
	внСоединение	= ПолучитьСоединениеПоПарамерам(Параметры);
	Если внСоединение = Неопределено Тогда
		Сообщить("Ошибка подключения к <" + ИмяИБ + ">!");
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	внИнформационныеБазы.ИдентификаторИБ
	|ИЗ
	|	Справочник.внИнформационныеБазы КАК внИнформационныеБазы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторИБ";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СЗ = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СЗ.Добавить(Выборка.ИдентификаторИБ);
	КонецЦикла;	
	внСоединение = Неопределено;
	ОтключитьСоединение();
	
	Возврат СЗ;
	
КонецФункции

// Возвращает ТЗ со всеми изменениями с Отбором ДатаНач, ДатаКон
// МассивПользователи, МассивКомпьютеры, МассивСобытий должны быть массивами с ссылками из внешней базы
// МассивОбъектов должен быть массивом с строками
// Представление Представление строки (допускается использование %, _ и т.д.)
Функция ПолучитьИсториюИзменений(ДатаНач, ДатаКон, МассивПользователи, МассивКомпьютеры, МассивМетаданных,
	МассивОбъектов, МассивОбъектовСсылок, МассивСобытий, МассивУзловРИБ, Представление = "", ТолькоИзменения = Ложь) Экспорт
	
	// Здесь добавим результат, который будет выведен и показан пользователю
	ТаблицаРезультата = Новый ТаблицаЗначений;	
	ТаблицаРезультата.Колонки.Добавить("Код");
	ТаблицаРезультата.Колонки.Добавить("УзелРИБ");
	ТаблицаРезультата.Колонки.Добавить("ДатаИзменения");
	ТаблицаРезультата.Колонки.Добавить("Объект");
	ТаблицаРезультата.Колонки.Добавить("МетаданныеОбъекта");
	ТаблицаРезультата.Колонки.Добавить("Пользователь");
	ТаблицаРезультата.Колонки.Добавить("Компьютер");
	ТаблицаРезультата.Колонки.Добавить("ВерсияИзменения");
	ТаблицаРезультата.Колонки.Добавить("ПредставлениеОбъекта");
	ТаблицаРезультата.Колонки.Добавить("Событие");
	ТаблицаРезультата.Колонки.Добавить("СобытиеПредставление");
	ТаблицаРезультата.Колонки.Добавить("СостояниеЗаписи");
	
	внСоединение = ПолучитьСоединение();
	СоединениеДоступно = внСоединение <> Неопределено;
	
	Параметры1 = Новый Соответствие;
	Параметры2 = Новый Соответствие;
	
	Если СоединениеДоступно Тогда
		ИдентификаторИБСсылка = внСоединение.внЖурналРегистрации.ПолучитьСсылкуИнформационнойБазы(внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
		Параметры1.Вставить("ИнформационнаяБаза", ИдентификаторИБСсылка);
		ТекстВЗапросе1 = "(внЖурналРегистрации.ИнформационнаяБаза = &ИнформационнаяБаза)";
		
		// Получим представление и номер событий в журнале	
		События	= СоответствиеСобытий(внСоединение, "Наименование");
	Иначе
		События = Новый Соответствие;
		События.Вставить(9, "Начало сеанса");
		События.Вставить(10, "Завершение сеанса");
	КонецЕсли;
	
	// Первоначальные тексты запросов для локального кэша и внешней БД	
	ТекстВЗапросе2 = "ИСТИНА ";	
	
	// Условие по датам
	Если ДатаКон <> Дата(1, 1, 1) И ДатаНач <= ДатаКон Тогда
		
		Если СоединениеДоступно Тогда
			ТекстВЗапросе1 = ТекстВЗапросе1 + 
			"И(внЖурналРегистрации.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон) ";
			Параметры1.Вставить("ДатаНач", ДатаНач);
			Параметры1.Вставить("ДатаКон", ДатаКон);
		КонецЕсли;
		
		ТекстВЗапросе2 = ТекстВЗапросе2 + 
		"И(внКэшЖурналаРегистрации.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон) ";
		Параметры2.Вставить("ДатаНач", ДатаНач);
		Параметры2.Вставить("ДатаКон", ДатаКон);
		
	КонецЕсли;
	
	// Установим отбор по пользователям
	Если ЗначениеЗаполнено(МассивПользователи) И МассивПользователи.Количество() > 0 Тогда
		
		Если СоединениеДоступно Тогда
			ТекстВЗапросе1 = ТекстВЗапросе1 + 
			"И(внЖурналРегистрации.Пользователь В(&МассивПользователей))";
			Параметры1.Вставить("МассивПользователей", внСоединение.внЖурналРегистрации.ПолучитьМассивПоОтбору(ИдентификаторИБСсылка, МассивПользователи, "внПользователи"));
		КонецЕсли;
		
		ТекстВЗапросе2 = ТекстВЗапросе2 + 
		"И(внКэшЖурналаРегистрации.Пользователь В(&МассивПользователей))";		
		Список = ПолучитьПользователейИстории(внСоединение);
		МассивВОтбор = Новый Массив();
		Для каждого Элемент Из Список Цикл 
			Если МассивПользователи.Найти(Элемент.Значение) <> Неопределено Тогда
				МассивВОтбор.Добавить(Элемент.Представление);
			КонецЕсли;			
		КонецЦикла;
		Параметры2.Вставить("МассивПользователей", МассивВОтбор);
		
	КонецЕсли;
	
	// Установим отбор по компьютерам
	Если СоединениеДоступно И ЗначениеЗаполнено(МассивКомпьютеры) И МассивКомпьютеры.Количество() > 0 Тогда
		
		ТекстВЗапросе1 = ТекстВЗапросе1 + 
		"И(внЖурналРегистрации.Компьютер В(&МассивКомпьютеров))";
		Параметры1.Вставить("МассивКомпьютеров", внСоединение.внЖурналРегистрации.ПолучитьМассивПоОтбору(ИдентификаторИБСсылка, МассивКомпьютеры, "внКомпьютеры"));
		
		ТекстВЗапросе2 = ТекстВЗапросе2 + 
		"И(внКэшЖурналаРегистрации.Компьютер В(&МассивКомпьютеров))";
		Список = ПолучитьКомпьютерыИстории(внСоединение);
		МассивВОтбор = Новый Массив();
		Для каждого Элемент Из Список Цикл 
			Если МассивКомпьютеры.Найти(Элемент.Значение) <> Неопределено Тогда
				МассивВОтбор.Добавить(Элемент.Представление);
			КонецЕсли;			
		КонецЦикла;
		Параметры2.Вставить("МассивКомпьютеров", МассивВОтбор);
		
	КонецЕсли;
	
	// Установим отбор по РИБ
	Если СоединениеДоступно И ЗначениеЗаполнено(МассивУзловРИБ) И МассивУзловРИБ.Количество() > 0 Тогда
		
		ТекстВЗапросе1 = ТекстВЗапросе1 + 
		"И(внЖурналРегистрации.УзелРИБ В(&МассивУзловРИБ))";
		Параметры1.Вставить("МассивУзловРИБ", внСоединение.внЖурналРегистрации.ПолучитьМассивПоОтбору(ИдентификаторИБСсылка, МассивУзловРИБ, "внУзлыРИБ"));
		
		ТекстВЗапросе2 = ТекстВЗапросе2 + 
		"И(внКэшЖурналаРегистрации.УзелРИБ В(&МассивУзловРИБ))";
		Список = ПолучитьУзлыРИБИстории(внСоединение);
		МассивВОтбор = Новый Массив();
		Для каждого Элемент Из Список Цикл 
			Если МассивУзловРИБ.Найти(Элемент.Значение) <> Неопределено Тогда
				МассивВОтбор.Добавить(Элемент.Представление);
			КонецЕсли;			
		КонецЦикла;
		Параметры2.Вставить("МассивУзловРИБ", МассивВОтбор);
		
	КонецЕсли;	
	
	// Установим отбор по метаданным
	Если СоединениеДоступно И ЗначениеЗаполнено(МассивМетаданных) И МассивМетаданных.Количество() > 0 Тогда
		
		ТекстВЗапросе1 = ТекстВЗапросе1 + 
		"И(внЖурналРегистрации.МетаданныеОбъекта В(&МетаданныеОбъекта))";
		Параметры1.Вставить("МетаданныеОбъекта", внСоединение.внЖурналРегистрации.ПолучитьМассивПоОтбору(ИдентификаторИБСсылка, МассивМетаданных, "внМетаданные", "ПолноеНаименование"));
		
		ТекстВЗапросе2 = ТекстВЗапросе2 + 
		"И(внКэшЖурналаРегистрации.МетаданныеОбъекта В(&МетаданныеОбъекта))";
		Параметры2.Вставить("МетаданныеОбъекта", МассивМетаданных);
		
	КонецЕсли;
	
	// Установим отбор по объектам
	Если СоединениеДоступно И ЗначениеЗаполнено(МассивОбъектов) И МассивОбъектов.Количество() > 0 Тогда
		ТекстВЗапросе1 = ТекстВЗапросе1 + 
		"И(внЖурналРегистрации.ИдентификаторОбъекта В(&МассивОбъектов))";
		Параметры1.Вставить("МассивОбъектов", внСоединение.внЖурналРегистрации.ПолучитьМассивПоОтбору(ИдентификаторИБСсылка, МассивОбъектов, "внИдентификаторыОбъектов", "Наименование"));
		
		ТекстВЗапросе2 = ТекстВЗапросе2 + 
		"И(внКэшЖурналаРегистрации.ИдентификаторОбъекта В(&МассивОбъектов))";
		Параметры2.Вставить("МассивОбъектов", МассивОбъектов);			
	КонецЕсли;
	
	// Установим отбора по объектам ссылкам
	Если СоединениеДоступно И ЗначениеЗаполнено(МассивОбъектовСсылок) И МассивОбъектовСсылок.Количество() > 0 Тогда
		
		Подстрока1 = "";
		Индекс = 1;
		Для Каждого Элемент Из МассивОбъектовСсылок Цикл
			Если Не ПустаяСтрока(Подстрока1) Тогда
				Подстрока1 = Подстрока1 + " ИЛИ ";
			КонецЕсли;
			Подстрока1 = Подстрока1 + 
			" ПОДСТРОКА(внИзменения.НовоеЗначение, 1, 300) = &ЭлементМассивОбъектовСсылок" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + " ИЛИ "
			" ПОДСТРОКА(внИзменения.СтароеЗначение, 1, 300) = &ЭлементМассивОбъектовСсылок" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
			Параметры1.Вставить("ЭлементМассивОбъектовСсылок" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ="), Элемент);
						
			Индекс = Индекс + 1;
		КонецЦикла;
		
		ТекстВЗапросе1 = ТекстВЗапросе1 + 
		"И(внЖурналРегистрации.Ссылка В
		|(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	внИзменения.Изменение
		|ИЗ
		|	РегистрСведений.внИзменения КАК внИзменения
		|ГДЕ
		|	" + Подстрока1 + "))";
		
		Подстрока2 = "";
		НаборЗаписейКэша = РегистрыСведений.внКэшЖурналаРегистрации.СоздатьНаборЗаписей();
		НаборЗаписейКэша.Прочитать();
		Индекс = 1;
		Для Каждого Запись Из НаборЗаписейКэша Цикл  
			ТЗКэша = внЖурналРегистрации.ДеСериализоватьОбъект(Запись.Данные.Получить(), Запись);
			Если ТЗКэша = Неопределено Тогда
				ТЗКэша = внЖурналРегистрации.СоздатьИзмененияТЧ();
			КонецЕсли;			
			
			Для Каждого Элемент Из МассивОбъектовСсылок Цикл
				Если ТЗКэша.Найти(Элемент, "Значение") <> Неопределено Тогда
					Если Не ПустаяСтрока(Подстрока2) Тогда
						Подстрока2 = Подстрока2 + " ИЛИ ";
					КонецЕсли;
					Подстрока2 = Подстрока2 + 
					" (внКэшЖурналаРегистрации.НомерЗаписи = &НомерЗаписиКэша" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + 
					" И внКэшЖурналаРегистрации.ИдентификаторОбъекта = &ИДОбъектаКэша" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + 
					" И внКэшЖурналаРегистрации.УзелРИБ = &УзелРИБКэша" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=") + ")";
					
					Параметры2.Вставить("НомерЗаписиКэша" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")	, Запись.НомерЗаписи);
					Параметры2.Вставить("ИДОбъектаКэша" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")	, Запись.ИдентификаторОбъекта);
					Параметры2.Вставить("УзелРИБКэша" + Формат(Индекс, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=")		, Запись.УзелРИБ);
					Индекс = Индекс + 1;
					Прервать;
				КонецЕсли;                           
			КонецЦикла;
		КонецЦикла;
		
		// Не нашли в кэше, записи кэша пропускаем
		Если ПустаяСтрока(Подстрока2) Тогда
			Подстрока2 = "ЛОЖЬ";
		КонецЕсли;
		
		ТекстВЗапросе2 = ТекстВЗапросе2 + 
			" И (" + Подстрока2 + ")";
	КонецЕсли;
	
	// Установим отбор по событиям
	Если СоединениеДоступно И ЗначениеЗаполнено(МассивСобытий) И МассивСобытий.Количество() > 0 Тогда
		ТекстВЗапросе1 = ТекстВЗапросе1 + 
		"И(внЖурналРегистрации.Событие В(&МассивСобытий))";
		Параметры1.Вставить("МассивСобытий", внСоединение.внЖурналРегистрации.ПолучитьМассивПоОтбору(Неопределено, МассивСобытий, "внСобытия"));
		
		ТекстВЗапросе2 = ТекстВЗапросе2 + 
		"И(внКэшЖурналаРегистрации.Событие В(&МассивСобытий))";
		Параметры2.Вставить("МассивСобытий", МассивСобытий);			
	КонецЕсли;
	
	// Установим отбор по представлению	
	Если СоединениеДоступно И НЕ ПустаяСтрока(Представление) Тогда
		ТекстВЗапросе1 = ТекстВЗапросе1 +
		"И(внЖурналРегистрации.ПредставлениеОбъекта ПОДОБНО &ПредставлениеОбъекта)";
		Параметры1.Вставить("ПредставлениеОбъекта", "%" + СокрЛП(Представление) + "%");		
		
		ТекстВЗапросе2 = ТекстВЗапросе2 + 
		"И(внКэшЖурналаРегистрации.ПредставлениеОбъекта ПОДОБНО &ПредставлениеОбъекта)";
		Параметры2.Вставить("ПредставлениеОбъекта", "%" + СокрЛП(Представление) + "%");		
	КонецЕсли;
	
	// Установим отбор только по событиям где есть изменения
	Если СоединениеДоступно И ТолькоИзменения Тогда
		ТекстВЗапросе1 = ТекстВЗапросе1 +
		"И(внЖурналРегистрации.СостояниеЗаписи = 1 ИЛИ внЖурналРегистрации.СостояниеЗаписи = 3)";
		
		ТекстВЗапросе2 = ТекстВЗапросе2 + 
		"И(ИСТИНА)";
	КонецЕсли;
	
	
	//*******************************************************
	// Запрос во внешней базе
	//*******************************************************
	
	// Сначала добавляем данные по сжатым объектам во внешней БД
	Если СоединениеДоступно Тогда
		
		Запрос1 = внСоединение.NewObject("Запрос");	
		
		Запрос1.Текст =
		"ВЫБРАТЬ
		|	внЖурналРегистрации.Код КАК Код,
		|	внЖурналРегистрации.УзелРИБ.ИдентификаторУзлаРИБ КАК УзелРИБ,
		|	внЖурналРегистрации.ДатаИзменения,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(внЖурналРегистрации.ИдентификаторОбъекта) КАК Объект,
		|	ВЫБОР
		|		КОГДА внЖурналРегистрации.Событие.Код = 9
		|			ТОГДА ""Начало сеанса""
		|		КОГДА внЖурналРегистрации.Событие.Код = 10
		|			ТОГДА ""Завершение сеанса""
		|		КОГДА внЖурналРегистрации.Событие.Код = 11
		|			ТОГДА ""Начало сеанса (роли изменены)""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА внЖурналРегистрации.МетаданныеОбъекта ЕСТЬ NULL 
		|					ТОГДА """"
		|				ИНАЧЕ внЖурналРегистрации.МетаданныеОбъекта.ПолноеНаименование
		|			КОНЕЦ
		|	КОНЕЦ КАК МетаданныеОбъекта,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(внЖурналРегистрации.Пользователь) КАК Пользователь,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(внЖурналРегистрации.Компьютер) КАК Компьютер,
		|	внЖурналРегистрации.ПредставлениеОбъекта,
		|	ЕСТЬNULL(внЖурналРегистрации.Событие.Код, 0) Как Событие,
		|	внЖурналРегистрации.СостояниеЗаписи КАК СостояниеЗаписи,
		|	внЖурналРегистрации.Версия КАК ВерсияИзменения
		|ИЗ
		|	Справочник.внЖурналРегистрации КАК внЖурналРегистрации
		|ГДЕ
		|	&ДОПОЛНИТЕЛЬНОЕУСЛОВИЕ
		|
		|УПОРЯДОЧИТЬ ПО
		|	внЖурналРегистрации.ДатаИзменения,
		|	Код";
		
		Запрос1.Текст	= СтрЗаменить(Запрос1.Текст, "&ДОПОЛНИТЕЛЬНОЕУСЛОВИЕ", ТекстВЗапросе1);
		
		// Установка параметров
		Для Каждого П Из Параметры1 Цикл
			Запрос1.УстановитьПараметр(П.Ключ, П.Значение);
		КонецЦикла;
		
		Выборка			= Запрос1.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока						= ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);		
			НоваяСтрока.СобытиеПредставление= События.Получить(НоваяСтрока.Событие);
			
		КонецЦикла;
		
	КонецЕсли;
	
	//*******************************************************
	// Запрос в кэш конфигурации
	//*******************************************************
	Запрос2 = Новый Запрос;
	
	// Добавим не сжатые данные из кэша в журнал
	Запрос2.Текст =
	"ВЫБРАТЬ
	|	внКэшЖурналаРегистрации.НомерЗаписи КАК Код,
	|	внКэшЖурналаРегистрации.УзелРИБ КАК УзелРИБ,
	|	внКэшЖурналаРегистрации.ДатаИзменения,
	|	внКэшЖурналаРегистрации.ИдентификаторОбъекта КАК Объект,
	|	ВЫБОР
	|		КОГДА внКэшЖурналаРегистрации.Событие = 9
	|			ТОГДА ""Начало сеанса""
	|		КОГДА внКэшЖурналаРегистрации.Событие = 10
	|			ТОГДА ""Завершение сеанса""
	|		КОГДА внКэшЖурналаРегистрации.Событие = 11
	|			ТОГДА ""Начало сеанса (роли изменены)""
	|		ИНАЧЕ внКэшЖурналаРегистрации.МетаданныеОбъекта
	|	КОНЕЦ КАК МетаданныеОбъекта,
	|	внКэшЖурналаРегистрации.Пользователь,
	|	внКэшЖурналаРегистрации.Компьютер,
	|	внКэшЖурналаРегистрации.ПредставлениеОбъекта,
	|	внКэшЖурналаРегистрации.Событие,
	|	0 КАК СостояниеЗаписи
	|ИЗ
	|	РегистрСведений.внКэшЖурналаРегистрации КАК внКэшЖурналаРегистрации
	|ГДЕ
	|	&ДОПОЛНИТЕЛЬНОЕУСЛОВИЕ
	|
	|УПОРЯДОЧИТЬ ПО
	|	внКэшЖурналаРегистрации.ДатаИзменения,
	|	внКэшЖурналаРегистрации.НомерЗаписи";                            
	
	Запрос2.Текст	= СтрЗаменить(Запрос2.Текст, "&ДОПОЛНИТЕЛЬНОЕУСЛОВИЕ", ТекстВЗапросе2);
	
	// Установка параметров
	Для Каждого П Из Параметры2 Цикл
		Запрос2.УстановитьПараметр(П.Ключ, П.Значение);
	КонецЦикла;
	
	Выборка			= Запрос2.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока						= ТаблицаРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);		
		НоваяСтрока.СобытиеПредставление= События.Получить(НоваяСтрока.Событие);
		
	КонецЦикла;
	
	Возврат ТаблицаРезультата;	
	
КонецФункции // ПолучитьИсториюИзменений

// Получает количество записей в кэше
Функция СостояниеКэша() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("КоличествоСобытий", 0);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	РегистрСведений.внКэшЖурналаРегистрации КАК внКэшЖурналаРегистрации"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.КоличествоСобытий = Выборка.Количество;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СостояниеКэша 

// Получает структуру с состояниями при сжатии
Функция СостояниеИзВнешнейИБ(Разделы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	внСоединение = ПолучитьСоединение();
	Если внСоединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат внСоединение.внЖурналРегистрации.СостояниеЖурнала(внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ(), Разделы);
	
КонецФункции

// Возвращает список узлов РИБ
Функция СписокУзловРИБ() Экспорт
	
	СЗ = Новый СписокЗначений;
	
	внСоединение = ПолучитьСоединение();
	
	Если внСоединение = Неопределено Тогда
		Возврат СЗ;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	внУзлыРИБ.ИдентификаторУзлаРИБ КАК ИдентификаторУзлаРИБ,
	|	внУзлыРИБ.Код
	|ИЗ
	|	Справочник.внУзлыРИБ КАК внУзлыРИБ
	|ГДЕ
	|	внУзлыРИБ.Владелец.ИдентификаторИБ = &ИдентификаторИБ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторУзлаРИБ";
	
	Запрос.УстановитьПараметр("ИдентификаторИБ", внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СЗ.Добавить(Выборка.ИдентификаторУзлаРИБ);
		
	КонецЦикла;
	
	Возврат СЗ;	
	
КонецФункции // СписокУзловРИБ

// Возвращает соответствие из таблица "ИмяТаблицы" где Ключ - caption, Значение - uid 
Функция СоответствиеЗначенийБД(внСоединение, ИмяТаблицы, ИБ, ПредставлениеНаименования = "Наименование") Экспорт
	
	Соответствие = Новый Соответствие;
	
	Если внСоединение = Неопределено Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр." + ПредставлениеНаименования + " КАК Наименование,
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяТаблицы + " КАК Спр
	|ГДЕ
	|	Спр.Владелец = &ИБ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ИБ", ИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Соответствие.Вставить(Выборка.Наименование, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции // СоответствиеЗначенийБД

// Возвращает соответствие из таблица "ИмяТаблицы" где Ключ - caption, Значение - uid 
Функция СоответствиеЗначенийБДПоКоду(внСоединение, ИмяТаблицы, ИБ, ПредставлениеНаименования = "Наименование") Экспорт
	
	Соответствие = Новый Соответствие;
	
	Если внСоединение = Неопределено Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр." + ПредставлениеНаименования + " КАК Наименование,
	|	Спр.Код КАК Код
	|ИЗ
	|	Справочник." + ИмяТаблицы + " КАК Спр
	|ГДЕ
	|	Спр.Владелец = &ИБ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ИБ", ИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Соответствие.Вставить(Выборка.Наименование, Выборка.Код);
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции // СоответствиеЗначенийБДПоКоду

// Возвращает соответствие из таблица "ИмяТаблицы" где Ключ - caption, Значение - uid 
Функция СоответствиеСобытий(внСоединение, СтолбецОписания = "Ссылка") Экспорт
	
	Соответствие = Новый Соответствие;
	
	Если внСоединение = Неопределено Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Запрос = внСоединение.NewObject("Запрос");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Код КАК Код,
	|	Спр." + СтолбецОписания + " КАК " + СтолбецОписания + "
	|ИЗ
	|	Справочник.внСобытия КАК Спр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Соответствие.Вставить(Выборка.Код, Выборка[СтолбецОписания]);
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции // СоответствиеЗначенийБД

// Возвращает полный образ объекта "ИдентификаторОбъекта" на "ДатаАктуальности"
// Результат ТаблицаЗначений
Функция ОбразОбъектаНаДату(Знач Данные) Экспорт
	
	внСоединение = ПолучитьСоединение();	
	Если внСоединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("Код"							, Данные.Код);
	Структура.Вставить("ДатаИзменения"					, Данные.ДатаИзменения);
	Структура.Вставить("МетаданныеОбъекта"				, Данные.МетаданныеОбъекта);
	Структура.Вставить("МетаданныеОбъектаНаименование"	, внЖурналРегистрации.ПолучитьПредставлениеМетаданных(Данные.МетаданныеОбъекта));
	Структура.Вставить("ТипМетаданных"					, внЖурналРегистрации.ПолучитьТипОбъектаПоИмени(Данные.МетаданныеОбъекта));
	Структура.Вставить("ИдентификаторОбъекта"			, Данные.Объект);
	Структура.Вставить("ИдентификаторИБ"				, внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
	
	Возврат внСоединение.внЖурналРегистрацииРегламентныеЗадания.ПолныйОбразОбъектаНаДатуВнешнееСоединение(Структура);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ИЗ БСП И ПРОЧИХ

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  внРазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  внРазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  внРазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  внРазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  внРазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  внРазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция внРазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция внПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция внПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = внПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает цвет и описание записи по состоянию
Функция ПолучитьСтруктуруСостоянияЗаписи(Знач СостояниеЗаписи) Экспорт
	
	Структура = Новый Структура("Цвет,Текст,Подсказка");
	
	Если СостояниеЗаписи = 0 Тогда
		Структура.Текст		= НСтр("ru = 'Событие в кэше и не показывает всех изменений объекта!'");
		Структура.Подсказка = НСтр("ru = 'Если событие в кэше, то в нем не показывается информация о том, что было в объекте изменено, а что нет. При переносе в базу хранителя и обработке, эта информация появится.'");
		Структура.Цвет		= WebЦвета.Красный;
	ИначеЕсли СостояниеЗаписи = 1 Тогда
		Структура.Текст		= НСтр("ru = 'Событие в хранителе, но изменения в событии еще не определены!'");
		Структура.Подсказка = НСтр("ru = 'Если в событии не определены изменения, то в нем не показывается информация о том, что было в объекте изменено, а что нет. При обработке, эта информация появится.'");
		Структура.Цвет		= WebЦвета.ТемноКрасный;
	Иначе
		Структура.Текст		= НСтр("ru = 'Событие в хранителе, все изменения до события и после определены!'");
		Структура.Подсказка = НСтр("ru = 'Все изменения события показаны в табличной части'");
		Структура.Цвет		= WebЦвета.Зеленый;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруСостоянияЗаписи 

// Создание образа объектов, т.е. зафиксировать состояние объектов
// 	КонтрольОбъектовПоДате - Булево (контролировать объекты с датами)
// 	ПериодКонтроляОбъектовПоДате - Число (количество дней если задан контроль)
//	МассивОбъектов - Массив (объекты, которые надо контролировать)
Процедура СозданиеПервоначальногоОбраза(КонтрольОбъектовПоДате, ПериодКонтроляОбъектовПоДате, МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	// Журнал регистрации ведется
	Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
		#Если Клиент Тогда
			Сообщить("Журнал регистрации выключен.");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
		Сообщить("Константы");
	#КонецЕсли
	
	// Для Констант
	Для Каждого Константа из Метаданные.Константы Цикл
		Имя = Константа.Имя;
		
		Если МассивОбъектов.Найти("Константа." + Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		
		#Если Клиент Тогда
			Сообщить("  Константа " + Константа.Синоним);
		#КонецЕсли
		
		КонстантаМ = Константы[Имя].СоздатьМенеджерЗначения();
		КонстантаМ.Прочитать();
		РегистрацияИзмененияОбъекта(КонстантаМ, Истина);		
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Справочники");
	#КонецЕсли
	
	// Справочники
	Для Каждого Справочник из Метаданные.Справочники Цикл
		Имя = Справочник.Имя;
		
		Если МассивОбъектов.Найти("Справочник." + Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		
		#Если Клиент Тогда
			Сообщить("  Справочник " + Справочник.Синоним);
		#КонецЕсли
		
		Мен = Справочники[Имя];
		Выборка = Мен.Выбрать();
		Пока Выборка.Следующий() Цикл 
			РегистрацияИзмененияОбъекта(Выборка.ПолучитьОбъект(), Истина);
		КонецЦикла;		
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Документы");
	#КонецЕсли
	
	// Документы
	Для Каждого Элемент из Метаданные.Документы Цикл
		Имя = Элемент.Имя;
		
		Если МассивОбъектов.Найти("Документ." + Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		
		#Если Клиент Тогда
			Сообщить("  Документ " + Элемент.Синоним);
		#КонецЕсли
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	внДок.Ссылка
		|ИЗ
		|	Документ." + Имя + " КАК внДок
		|ГДЕ
		|	&КонтрольОбъектовПоДате
		|
		|УПОРЯДОЧИТЬ ПО
		|	внДок.Дата"
		);
		
		Если КонтрольОбъектовПоДате Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонтрольОбъектовПоДате", "внДок.Дата >= &ДатаКон");
			Запрос.УстановитьПараметр("ДатаКон", НачалоДня(ТекущаяДата()) - ПериодКонтроляОбъектовПоДате * 86400);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонтрольОбъектовПоДате", "Истина");
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				РегистрацияИзмененияОбъекта(Выборка.Ссылка.ПолучитьОбъект(), Истина);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Планы видов характеристик");
	#КонецЕсли
	
	// План видов характеристик
	Для Каждого Элемент из Метаданные.ПланыВидовХарактеристик Цикл
		Имя = Элемент.Имя;
		
		Если МассивОбъектов.Найти("ПланВидовХарактеристик." + Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		
		#Если Клиент Тогда
			Сообщить("  План видов характеристик " + Элемент.Синоним);
		#КонецЕсли
		
		Мен = ПланыВидовХарактеристик[Имя];
		Выборка = Мен.Выбрать();
		Пока Выборка.Следующий() Цикл
			РегистрацияИзмененияОбъекта(Выборка.ПолучитьОбъект(), Истина);
		КонецЦикла;
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Планы счетов");
	#КонецЕсли
	
	// План счетов
	Для Каждого Элемент из Метаданные.ПланыСчетов Цикл
		Имя = Элемент.Имя;
		Если МассивОбъектов.Найти("ПланСчетов." + Элемент.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда
			Сообщить("  План счетов " + Элемент.Синоним);
		#КонецЕсли
		
		Мен = ПланыСчетов[Имя];
		Выборка = Мен.Выбрать();
		Пока Выборка.Следующий() Цикл
			РегистрацияИзмененияОбъекта(Выборка.ПолучитьОбъект(), Истина);
		КонецЦикла;
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Планы видов расчетов");
	#КонецЕсли
	
	// План видов расчета
	Для Каждого Элемент из Метаданные.ПланыВидовРасчета Цикл
		Имя = Элемент.Имя;
		Если МассивОбъектов.Найти("ПланВидовРасчета." + Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда
			Сообщить("  План видов расчетов " + Элемент.Синоним);
		#КонецЕсли
		
		Мен = ПланыВидовРасчета[Имя];
		Выборка = Мен.Выбрать();
		Пока Выборка.Следующий() Цикл
			РегистрацияИзмененияОбъекта(Выборка.ПолучитьОбъект(), Истина);
		КонецЦикла;
	КонецЦикла;	
	
	#Если Клиент Тогда
		Сообщить("Планы обмена");
	#КонецЕсли
	
	// План счетов
	Для Каждого Элемент из Метаданные.ПланыОбмена Цикл
		Имя = Элемент.Имя;
		Если МассивОбъектов.Найти("ПланОбмена." + Элемент.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда
			Сообщить("  План обмена " + Элемент.Синоним);
		#КонецЕсли
		
		Мен = ПланыОбмена[Имя];
		Выборка = Мен.Выбрать();
		Пока Выборка.Следующий() Цикл
			РегистрацияИзмененияОбъекта(Выборка.ПолучитьОбъект(), Истина);
		КонецЦикла;
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Регистры сведений");
	#КонецЕсли
	
	// План видов расчета
	Для Каждого Элемент из Метаданные.РегистрыСведений Цикл
		Имя = Элемент.Имя;
		Если МассивОбъектов.Найти("РегистрСведений." + Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда
			Сообщить("  Регистр сведений " + Элемент.Синоним);
		#КонецЕсли
		
		Если КонтрольОбъектовПоДате И Элемент.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			
			Если Элемент.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				
				// Заполняем только теми данными, что меньше определенной даты
				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	внРегистр.Регистратор
				|ИЗ
				|	РегистрСведений." + Имя + " КАК внРегистр
				|ГДЕ
				|	внРегистр.Регистратор.Дата >= &ДатаКон
				|
				|УПОРЯДОЧИТЬ ПО
				|	внРегистр.Регистратор.Дата"
				);
				
				Запрос.УстановитьПараметр("ДатаКон", НачалоДня(ТекущаяДата()) - ПериодКонтроляОбъектовПоДате * 86400);
				
				Результат = Запрос.Выполнить();
				Если НЕ Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						Набор = РегистрыСведений[Имя].СоздатьНаборЗаписей();
						Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
						Набор.Прочитать();
						РегистрацияИзмененияОбъекта(Набор, Истина);
					КонецЦикла;
				КонецЕсли;		
				
			Иначе
				
				// Заполняем только теми данными, что меньше определенной даты
				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	внРегистр.Период КАК Период
				|ИЗ
				|	РегистрСведений." + Имя + " КАК внРегистр
				|ГДЕ
				|	внРегистр.Период >= &ДатаКон
				|
				|УПОРЯДОЧИТЬ ПО
				|	Период"
				);
				
				Запрос.УстановитьПараметр("ДатаКон", НачалоДня(ТекущаяДата()) - ПериодКонтроляОбъектовПоДате * 86400);
				
				Результат = Запрос.Выполнить();
				Если НЕ Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						Набор = РегистрыСведений[Имя].СоздатьНаборЗаписей();
						Набор.Отбор.Период.Установить(Выборка.Период);
						Набор.Прочитать();
						РегистрацияИзмененияОбъекта(Набор, Истина);
					КонецЦикла;
				КонецЕсли;		
				
			КонецЕсли;
			
		Иначе
			// Заполнение без отборов (регистр не периодический)
			Набор = РегистрыСведений[Имя].СоздатьНаборЗаписей();
			Набор.Прочитать();
			РегистрацияИзмененияОбъекта(Набор, Истина);
		КонецЕсли;
		
	КонецЦикла;	
	
	#Если Клиент Тогда
		Сообщить("Задачи");
	#КонецЕсли
	
	// Задачи
	Для Каждого Элемент из Метаданные.Задачи Цикл
		Имя = Элемент.Имя;
		Если МассивОбъектов.Найти("Задача." + Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда
			Сообщить("  Задача " + Элемент.Синоним);
		#КонецЕсли
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	внЗадача.Ссылка
		|ИЗ
		|	Задача." + Имя + " КАК внЗадача
		|ГДЕ
		|	&КонтрольОбъектовПоДате
		|
		|УПОРЯДОЧИТЬ ПО
		|	внЗадача.Дата"
		);
		
		Если КонтрольОбъектовПоДате Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонтрольОбъектовПоДате", "внЗадача.Дата >= &ДатаКон");
			Запрос.УстановитьПараметр("ДатаКон", НачалоДня(ТекущаяДата()) - ПериодКонтроляОбъектовПоДате * 86400);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонтрольОбъектовПоДате", "Истина");
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				РегистрацияИзмененияОбъекта(Выборка.Ссылка.ПолучитьОбъект(), Истина);
			КонецЦикла;
		КонецЕсли;		
		
	КонецЦикла;	
	
	#Если Клиент Тогда
		Сообщить("Бизнес-процессы");
	#КонецЕсли
	
	// Бизнес процессы
	Для Каждого Элемент из Метаданные.БизнесПроцессы Цикл
		Имя = Элемент.Имя;
		Если МассивОбъектов.Найти("БизнесПроцесс." + Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда
			Сообщить("  Бизнес-процесс " + Элемент.Синоним);
		#КонецЕсли
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	внПроцесс.Ссылка
		|ИЗ
		|	БизнесПроцесс." + Имя + " КАК внПроцесс
		|ГДЕ
		|	&КонтрольОбъектовПоДате
		|
		|УПОРЯДОЧИТЬ ПО
		|	внПроцесс.Дата"
		);
		
		Если КонтрольОбъектовПоДате Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонтрольОбъектовПоДате", "внПроцесс.Дата >= &ДатаКон");
			Запрос.УстановитьПараметр("ДатаКон", НачалоДня(ТекущаяДата()) - ПериодКонтроляОбъектовПоДате * 86400);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонтрольОбъектовПоДате", "Истина");
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				РегистрацияИзмененияОбъекта(Выборка.Ссылка.ПолучитьОбъект(), Истина);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СозданиеПервоначальногоОбраза

// Строку переводит из внутреннего представления в значение
Функция ЗначениеИзСтрокиВнутрСервер(Стр) Экспорт
	
	Возврат ЗначениеИзСтрокиВнутр(Стр);
	
КонецФункции

// Возвращает есть ли пользоватли ИБ в конфигурации
Функция ЕстьПользователи() Экспорт
	
	Возврат внЖурналРегистрацииСервер.ЕстьПользователи();
	
КонецФункции  // ЕстьПользователи

// Возвращает спсок пользователей в ИБ 1С
Функция СписокПользователей() Экспорт
	
	Результат = Новый СписокЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка		
		НаличиеПраваНаРедактированиеПользователейИБ = ПравоДоступа("Администрирование", Метаданные);
		
		Если НаличиеПраваНаРедактированиеПользователейИБ Тогда
			Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл			
				Результат.Добавить(ПользовательИБ.Имя);
			КонецЦикла;
		КонецЕсли;
	Исключение
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции // СписокПользователей

// Возвращает из строки
// Srvr="Имя сервера"
// Ref="Имя БД"
// по параметру Srvr или Ref получать Имя сервера или Имя БД без кавычек
Функция ПолучитьЗначениеИзСтроки(СтрокаПоиска, Параметр) Экспорт
	
	Массив = внРазложитьСтрокуВМассивПодстрок(НРег(СтрокаПоиска), ";", Истина);
	Подстрока = НРег(Параметр) + "=";
	Для Каждого Стр Из Массив Цикл
		Стр = СтрЗаменить(Стр, """", "");
		Позиция = Найти(Стр, Подстрока);
		Если Позиция > 0 Тогда
			Результат = Прав(Стр, СтрДлина(Стр) - Позиция - СтрДлина(Подстрока) + 1);
			Возврат Результат;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции // ПолучитьЗначениеИзСтроки

// Проверка настроек подсистемы и если настройки 
Процедура ПроверкаЗаполненияНастроек() Экспорт
	
	Если РольДоступна("внАдминистраторЖурналаРегистрации") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = РегистрыСведений.внНастройкиЖурналаРегистрации.Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			НаборЗаписей = РегистрыСведений.внНастройкиЖурналаРегистрации.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				НоваяЗапись											= НаборЗаписей.Добавить();
				НоваяЗапись.ВестиИсториюИзменений					= Ложь;
				НоваяЗапись.РегистрироватьВходыИВыходыПользователей	= Ложь;
				НоваяЗапись.ДавностьПросмотраВЖурналеПоУмолчанию	= 2;
				НоваяЗапись.Версия									= "";
				НоваяЗапись.ИспользоватьПараметрУникальностиИБ		= Истина;
				Параметры											= ПараметрУникальностиИБ();
				НоваяЗапись.ПараметрУникальностиСписокСерверов		= Параметры.Сервер;
				НоваяЗапись.ПараметрУникальностиИмяБазы				= Параметры.ИмяБазы;
				НоваяЗапись.ИдентификаторИБ							= Метаданные.Имя;
				НоваяЗапись.ТипОбменаРИБ							= Перечисления.внТипОбменаРИБ.ОбменЧерезРИБХранительЖурнала;
				НоваяЗапись.РазмерПакетаПереносаДанных				= 100;
				НаборЗаписей.Записать();
				
				Если НЕ ЕстьПользователи() Тогда		
					Сообщить(
					"В информационную базу не введены пользователи!
					|Подсистема не будет работать пока не добавлены пользователи!");
				КонецЕсли;
				
				// Открываем форму настроек для управляемых форм не модально
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					Форма = Обработки.внНастройкаЖурналаРегистрации.ПолучитьФорму();
					Форма.ОткрытьМодально();
				#ИначеЕсли ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент ИЛИ ВебКлиент Тогда
					ОткрытьФорму("Обработка.внНастройкаЖурналаРегистрации.Форма.ФормаУправляемая");
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаЗаполненияНастроек

// Получить тип объекта по полному имени метаданных
Функция ПолучитьТипОбъектаПоИмени(Знач ОбъектИмяМетаданных) Экспорт
	
	ПолноеИмя = ОбъектИмяМетаданных;
	ПозицияТочки = Найти(ПолноеИмя, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат 0;
	КонецЕсли;
	ТипСтрокой = Лев(ПолноеИмя, ПозицияТочки - 1);
	Если ТипСтрокой = "Документ" Тогда
		Возврат 1;
	ИначеЕсли ТипСтрокой = "Справочник" Тогда
		Возврат 2;
	ИначеЕсли ТипСтрокой = "ПланВидовХарактеристик" Тогда
		Возврат 3;
	ИначеЕсли ТипСтрокой = "Константа" Тогда
		Возврат 4;
	ИначеЕсли ТипСтрокой = "ПланСчетов" Тогда
		Возврат 5;
	ИначеЕсли ТипСтрокой = "ПланВидовРасчета" Тогда
		Возврат 6;
	ИначеЕсли ТипСтрокой = "ПланОбмена" Тогда
		Возврат 7;
	ИначеЕсли ТипСтрокой = "Задача" Тогда
		Возврат 8;
	ИначеЕсли ТипСтрокой = "БизнесПроцесс" Тогда
		Возврат 9;
	ИначеЕсли ТипСтрокой = "РегистрСведений" Тогда
		Возврат 10;
	Иначе
		Возврат 0;
	КонецЕсли;        
	
КонецФункции // ПолучитьТипОбъектаПоИмени

// Возвращает по имени метаданных Синоним
Функция ПолучитьПредставлениеМетаданных(Знач ОбъектИмяМетаданных) Экспорт
	
	ПолноеИмя		= ОбъектИмяМетаданных;
	ПозицияТочки	= Найти(ПолноеИмя, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСтрокой		= Лев(ПолноеИмя, ПозицияТочки - 1);
	ОбъектСтрокой	= Сред(ПолноеИмя, ПозицияТочки + 1);
	Синоним 		= "";
	
	// Возможно ситуация, когда попытаемся получить представление объекта, 
	// который переименован или удален, поэтому заключим его в Попытку/Исключение и при необходимости вернем все, что после символа "."
	Попытка
		Если ТипСтрокой = "Документ" Тогда
			Синоним = Метаданные.Документы[ОбъектСтрокой].Синоним;		
		ИначеЕсли ТипСтрокой = "Справочник" Тогда
			Синоним = Метаданные.Справочники[ОбъектСтрокой].Синоним;		
		ИначеЕсли ТипСтрокой = "ПланВидовХарактеристик" Тогда
			Синоним = Метаданные.ПланыВидовХарактеристик[ОбъектСтрокой].Синоним;		
		ИначеЕсли ТипСтрокой = "Константа" Тогда
			Синоним = Метаданные.Константы[ОбъектСтрокой].Синоним;		
		ИначеЕсли ТипСтрокой = "ПланСчетов" Тогда
			Синоним = Метаданные.ПланыСчетов[ОбъектСтрокой].Синоним;
		ИначеЕсли ТипСтрокой = "ПланВидовРасчета" Тогда
			Синоним = Метаданные.ПланыВидовРасчета[ОбъектСтрокой].Синоним;
		ИначеЕсли ТипСтрокой = "ПланОбмена" Тогда
			Синоним = Метаданные.ПланыОбмена[ОбъектСтрокой].Синоним;
		ИначеЕсли ТипСтрокой = "Задача" Тогда
			Синоним = Метаданные.Задачи[ОбъектСтрокой].Синоним;		
		ИначеЕсли ТипСтрокой = "БизнесПроцесс" Тогда
			Синоним = Метаданные.БизнесПроцессы[ОбъектСтрокой].Синоним;		
		ИначеЕсли ТипСтрокой = "РегистрСведений" Тогда
			Синоним = Метаданные.РегистрыСведений[ОбъектСтрокой].Синоним;		
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ?(ПустаяСтрока(Синоним), ОбъектСтрокой, Синоним);
	
КонецФункции // ПолучитьПредставлениеМетаданных

Функция ПолучитьМетаданныеПоПредставлению(Знач ПолноеИмя) Экспорт
	
	ПозицияТочки	= Найти(ПолноеИмя, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСтрокой		= Лев(ПолноеИмя, ПозицияТочки - 1);
	ОбъектСтрокой	= Сред(ПолноеИмя, ПозицияТочки + 1);
	
	// Возможно ситуация, когда попытаемся получить представление объекта, 
	// который переименован или удален, поэтому заключим его в Попытку/Исключение и при необходимости вернем все, что после символа "."
	Попытка
		Если ТипСтрокой = "Документ" Тогда
			Возврат Метаданные.Документы[ОбъектСтрокой];		
		ИначеЕсли ТипСтрокой = "Справочник" Тогда
			Возврат Метаданные.Справочники[ОбъектСтрокой];
		ИначеЕсли ТипСтрокой = "ПланВидовХарактеристик" Тогда
			Возврат Метаданные.ПланыВидовХарактеристик[ОбъектСтрокой];
		ИначеЕсли ТипСтрокой = "Константа" Тогда
			Возврат Метаданные.Константы[ОбъектСтрокой];
		ИначеЕсли ТипСтрокой = "ПланСчетов" Тогда
			Возврат Метаданные.ПланыСчетов[ОбъектСтрокой];
		ИначеЕсли ТипСтрокой = "ПланВидовРасчета" Тогда
			Возврат Метаданные.ПланыВидовРасчета[ОбъектСтрокой];
		ИначеЕсли ТипСтрокой = "ПланОбмена" Тогда
			Возврат Метаданные.ПланыОбмена[ОбъектСтрокой];
		ИначеЕсли ТипСтрокой = "Задача" Тогда
			Возврат Метаданные.Задачи[ОбъектСтрокой];
		ИначеЕсли ТипСтрокой = "БизнесПроцесс" Тогда
			Возврат Метаданные.БизнесПроцессы[ОбъектСтрокой];
		ИначеЕсли ТипСтрокой = "РегистрСведений" Тогда
			Возврат Метаданные.РегистрыСведений[ОбъектСтрокой];
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Неопределено;	
	
КонецФункции // ПолучитьМетаданныеПоПредставлению 

// Создает новый объект по переданной строке метаданным
Функция СоздатьНовыйОбъектПоМетаданным(ОбъектИмяМетаданных, ОбразОбъекта) Экспорт
	
	ПолноеИмя = ОбъектИмяМетаданных;
	ПозицияТочки = Найти(ПолноеИмя, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСтрокой = Лев(ПолноеИмя, ПозицияТочки - 1);
	ОбъектСтрокой = Сред(ПолноеИмя, ПозицияТочки + 1);
	
	Если ТипСтрокой = "Документ" Тогда
		Возврат Документы[ОбъектСтрокой].СоздатьДокумент();
	ИначеЕсли ТипСтрокой = "Справочник" Тогда
		
		// Что это группа или элемент
		Для Каждого Строки Из ОбразОбъекта Цикл
			Если Строки.Реквизит.ИмяТЧ = "" И Строки.Реквизит.ИмяРеквизита = "ЭтоГруппа" И Строки.НовоеЗначение = Истина тогда
				Возврат Справочники[ОбъектСтрокой].СоздатьГруппу();
			КонецЕсли;
		КонецЦикла;
		
		Возврат Справочники[ОбъектСтрокой].СоздатьЭлемент();
	ИначеЕсли ТипСтрокой = "ПланВидовХарактеристик" Тогда
		
		// Что это группа или элемент
		Для Каждого Строки Из ОбразОбъекта Цикл
			Если Строки.Реквизит.ИмяТЧ = "" И Строки.Реквизит.ИмяРеквизита = "ЭтоГруппа" И Строки.НовоеЗначение = Истина тогда
				Возврат ПланыВидовХарактеристик[ОбъектСтрокой].СоздатьГруппу();
			КонецЕсли;
		КонецЦикла;
		
		Возврат ПланыВидовХарактеристик[ОбъектСтрокой].СоздатьЭлемент();
	ИначеЕсли ТипСтрокой = "Константа" Тогда		
		Возврат Константы[ОбъектСтрокой];
	ИначеЕсли ТипСтрокой = "ПланСчетов" Тогда
		Возврат ПланыСчетов[ОбъектСтрокой].СоздатьСчет();
	ИначеЕсли ТипСтрокой = "ПланВидовРасчета" Тогда
		Возврат ПланыВидовРасчета[ОбъектСтрокой].СоздатьВидРасчета();
	ИначеЕсли ТипСтрокой = "ПланОбмена" Тогда
		Возврат ПланыОбмена[ОбъектСтрокой].СоздатьУзел();
	ИначеЕсли ТипСтрокой = "Задача" Тогда
		Возврат Задачи[ОбъектСтрокой].СоздатьЗадачу();
	ИначеЕсли ТипСтрокой = "БизнесПроцесс" Тогда
		Возврат БизнесПроцессы[ОбъектСтрокой].СоздатьБизнесПроцесс();
	ИначеЕсли ТипСтрокой = "РегистрСведений" Тогда
		Возврат Неопределено;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьНовыйОбъектПоМетаданным

// Проверка доступа к объекту по ссылке и/или метаданным. Проверяет доступна ли ссылка для данного пользователя
// Возвращает Ложь если права доступа не нарушены, Истина в противном случае
Функция ПроверитьНарушениеПравДоступа(Знач Объект, Знач МетаданныеОбъекта) Экспорт
	
	// Сначала проверим доступ к метаданным для чтения
	Попытка
		
		Мета = внЖурналРегистрации.ПолучитьМетаданныеПоПредставлению(МетаданныеОбъекта);
		Если Мета <> Неопределено Тогда
			
			Если НЕ ПравоДоступа("Чтение", Мета) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	// Проверка доступа к объекту
	Попытка
		
		// Ссылка ограничена по RLS?
		// Проверка через запрос сработает не везде, делаем через представление ссылки
		Если внЖурналРегистрации.ЭтаСсылкаСуществуетВИБ(Объект) Тогда
			УстановитьПривилегированныйРежим(Ложь);
			ОбъектСсылка 			= ЗначениеИзСтрокиВнутр(Объект);
			Если Найти(Строка(ОбъектСсылка), "<Объект не найден>") Тогда
				Возврат Истина;
			КонецЕсли;						
		КонецЕсли;
				
	Исключение
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьНарушениеПравДоступа

Процедура ВосстановитьОбъект(Объект, ОбразОбъекта, ОткрытьФорму) Экспорт
	
	ТипОбъекта = ПолучитьТипОбъекта(Объект);
	
	// Константа
	Если ТипОбъекта = 4 Тогда
		ОткрытьФорму = Ложь;
		Если ОбразОбъекта.Количество() > 0 Тогда
			Объект.Установить(ОбразОбъекта[0].НовоеЗначение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму = Истина;
	
	ОбразОбъекта.Сортировать("Реквизит,НомерСтрокиТЧ");
	
	Попытка
		МетаданныеТЧ = Объект.Метаданные().ТабличныеЧасти;
		ЕстьТЧ = Истина;		
	Исключение
		ЕстьТЧ = Ложь;
	КонецПопытки;
	
	// Очистим объект
	Если ЕстьТЧ Тогда
		Для Каждого ТЧ Из МетаданныеТЧ Цикл			
			Объект[ТЧ.Имя].Очистить();
			
			// Добавим нужное количество строк
			КоличествоСтрок = 0;
			Для каждого Строки2 Из ОбразОбъекта Цикл
				
				Если Строки2.Реквизит.ИмяТЧ = ТЧ.Имя Тогда
					
					Если (КоличествоСтрок < Строки2.НомерСтрокиТЧ) И Строки2.НовоеЗначение <> "" Тогда
						КоличествоСтрок = Строки2.НомерСтрокиТЧ;
					КонецЕсли;
					
				КонецЕсли		
			КонецЦикла;
			
			Для Индекс = 1 ПО КоличествоСтрок Цикл
				Объект[ТЧ.Имя].Добавить();
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		МетаданныеТЧ = Объект.Метаданные().СтандартныеТабличныеЧасти;
		ЕстьСтандартныеТЧ = Истина;		
	Исключение
		ЕстьСтандартныеТЧ = Ложь;
	КонецПопытки;
	
	// Очистим объект
	Если ЕстьСтандартныеТЧ Тогда
		Для Каждого ТЧ Из МетаданныеТЧ Цикл			
			Объект[ТЧ.Имя].Очистить();
			
			// Добавим нужное количество строк
			КоличествоСтрок = 0;
			Для каждого Строки2 Из ОбразОбъекта Цикл
				
				Если Строки2.Реквизит.ИмяТЧ = ТЧ.Имя Тогда
					
					Если (КоличествоСтрок < Строки2.НомерСтрокиТЧ) И Строки2.НовоеЗначение <> "" Тогда
						КоличествоСтрок = Строки2.НомерСтрокиТЧ;
					КонецЕсли;
					
				КонецЕсли		
			КонецЦикла;
			
			Для Индекс = 1 ПО КоличествоСтрок Цикл
				Объект[ТЧ.Имя].Добавить();
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("ИмяРеквизита,НомерСтрокиТЧ");
	
	Для Каждого Строки Из ОбразОбъекта Цикл
		
		ИмяТЧ			= Строки.Реквизит.ИмяТЧ;
		ИмяРеквизита	= Строки.Реквизит.ИмяРеквизита;
		НомерСтрокиТЧ	= Строки.НомерСтрокиТЧ;
		
		Если ПустаяСтрока(ИмяТЧ) Тогда
			
			Попытка
				Объект[ИмяРеквизита] = ЗначениеИзСтрокиВнутр(Строки.НовоеЗначение);
			Исключение
			КонецПопытки;
			
		Иначе
			
			Если Строки.НовоеЗначение = "" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТЧ = "ПризнакиУчета" И ТипОбъекта = 5 Тогда
				// План счетов
				Попытка
					Объект[ИмяРеквизита] = ЗначениеИзСтрокиВнутр(Строки.НовоеЗначение);
				Исключение
				КонецПопытки;
				
			Иначе
				НоваяСтрока	= Объект[ИмяТЧ].Получить(НомерСтрокиТЧ - 1);
				Попытка
					НоваяСтрока[ИмяРеквизита] = ЗначениеИзСтрокиВнутр(Строки.НовоеЗначение);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВосстановитьОбъект

// Возвращает для объекта метаданных стандартные реквизиты
Функция ПолучитьСтандартныеРеквизитыОбъекта(Знач ОбъектМетаданных, Знач ТипОбъекта) Экспорт
	
	Результат = Новый СписокЗначений;	
	
	Если ТипОбъекта = 1 Тогда
		// Документ +
		Результат.Добавить("Дата", "Дата");
		Если ОбъектМетаданных.ДлинаНомера > 0 Тогда
			Результат.Добавить("Номер", "Номер");
		КонецЕсли;		
		Если ОбъектМетаданных.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Результат.Добавить("Проведен", "Проведен");
		КонецЕсли;
		Результат.Добавить("ПометкаУдаления", "Пометка удаления");
	ИначеЕсли ТипОбъекта = 2 Тогда
		// Справочник +
		Если ОбъектМетаданных.ДлинаКода > 0 Тогда
			Результат.Добавить("Код", "Код");
		КонецЕсли;
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			Результат.Добавить("Наименование", "Наименование");
		КонецЕсли;		
		Если ОбъектМетаданных.Иерархический Тогда
			Результат.Добавить("Родитель", "Родитель");
			Результат.Добавить("ЭтоГруппа", "Это группа");
		КонецЕсли;		
		Если ОбъектМетаданных.Владельцы.Количество() > 0 Тогда
			Результат.Добавить("Владелец", "Владелец");
		КонецЕсли;
		Результат.Добавить("ПометкаУдаления", "Пометка удаления");
	ИначеЕсли ТипОбъекта = 3 Тогда
		// ПланыВидовХарактеристик +
		Если ОбъектМетаданных.ДлинаКода > 0 Тогда
			Результат.Добавить("Код", "Код");
		КонецЕсли;
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			Результат.Добавить("Наименование", "Наименование");
		КонецЕсли;
		Если ОбъектМетаданных.Иерархический Тогда
			Результат.Добавить("Родитель", "Родитель");
			Результат.Добавить("ЭтоГруппа", "Это группа");
		КонецЕсли;
		Результат.Добавить("ПометкаУдаления", "Пометка удаления");
	ИначеЕсли ТипОбъекта = 4 Тогда
		// Константы
		// ПУСТО
	ИначеЕсли ТипОбъекта = 5 Тогда
		// ПланыСчетов +
		Если ОбъектМетаданных.ДлинаКода > 0 Тогда
			Результат.Добавить("Код", "Код");
		КонецЕсли;
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			Результат.Добавить("Наименование", "Наименование");
		КонецЕсли;
		Результат.Добавить("Родитель", "Родитель");
		Результат.Добавить("Порядок", "Порядок");
		Результат.Добавить("Забалансовый", "Забалансовый");
		Результат.Добавить("Вид", "Вид");
		Результат.Добавить("ПометкаУдаления", "Пометка удаления");
	ИначеЕсли ТипОбъекта = 6 Тогда
		// ПланыВидовРасчета +
		Если ОбъектМетаданных.ДлинаКода > 0 Тогда
			Результат.Добавить("Код", "Код");
		КонецЕсли;
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			Результат.Добавить("Наименование", "Наименование");
		КонецЕсли;
		Если ОбъектМетаданных.ИспользованиеПериодаДействия Тогда
			Результат.Добавить("ПериодДействияБазовый", "Базовый период действия");
		КонецЕсли;
		Результат.Добавить("ПометкаУдаления", "Пометка удаления");
	ИначеЕсли ТипОбъекта = 7 Тогда
		// ПланыОбмена +
		Результат.Добавить("НомерОтправленного", "Номер отправленного");
		Результат.Добавить("НомерПринятого", "Номер принятого");		
		Если ОбъектМетаданных.ДлинаКода > 0 Тогда
			Результат.Добавить("Код", "Код");
		КонецЕсли;		
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			Результат.Добавить("Наименование", "Наименование");
		КонецЕсли;
		Результат.Добавить("ПометкаУдаления", "Пометка удаления");
	ИначеЕсли ТипОбъекта = 8 Тогда
		// Задачи +
		Если ОбъектМетаданных.ДлинаНомера > 0 Тогда
			Результат.Добавить("Номер", "Номер");
		КонецЕсли;
		Результат.Добавить("Дата", "Дата");
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
			Результат.Добавить("Наименование", "Наименование");
		КонецЕсли;
		Результат.Добавить("Выполнена"	   , "Выполнена");
		Результат.Добавить("БизнесПроцесс", "Бизнес-процесс");
		Результат.Добавить("ТочкаМаршрута", "Точка маршрута");
		Результат.Добавить("ПометкаУдаления", "Пометка удаления");
	ИначеЕсли ТипОбъекта = 9 Тогда
		// БизнесПроцессы +
		Если ОбъектМетаданных.ДлинаНомера > 0 Тогда
			Результат.Добавить("Номер", "Номер");
		КонецЕсли;
		Результат.Добавить("Дата", "Дата");
		Результат.Добавить("Стартован", "Стартован");
		Результат.Добавить("Завершен", "Завершен");		
		Результат.Добавить("ВедущаяЗадача", "Ведущая задача");
		Результат.Добавить("ПометкаУдаления", "Пометка удаления");			
	ИначеЕсли ТипОбъекта = 10 Тогда
		// РегистрыСведений
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтандартныеРеквизитыОбъекта

// Получает все реквизиты объекта
Функция ПолучитьРеквизитыОбъекта(ОбъектМетаданных, ТипОбъекта, Объект = Неопределено) Экспорт
	
	// Стандартные реквизиты
	Результат = ПолучитьСтандартныеРеквизитыОбъекта(ОбъектМетаданных, ТипОбъекта);
	
	// Задачи реквизиты адресации
	Если ТипОбъекта = 8 Тогда		
		Для Каждого Реквизит Из ОбъектМетаданных.РеквизитыАдресации Цикл
			Результат.Добавить(Реквизит.Имя, ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним));
		КонецЦикла;
	КонецЕсли;	
	
	// Остальные реквизиты
	Если ТипОбъекта <> 4 И ТипОбъекта <> 10 Тогда
		Для каждого Реквизит Из ОбъектМетаданных["Реквизиты"] Цикл
			
			// Справочник и ПВХ для групп и элементов разные реквизиты пропускаем элементы
			Если (Объект <> Неопределено) И (ТипОбъекта = 2 ИЛИ ТипОбъекта = 3) Тогда				
				Если Объект.ЭтоГруппа Тогда
					Если Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					Если Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
						Продолжить;
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;
			
			Результат.Добавить(Реквизит.Имя, ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним));
		КонецЦикла;
	КонецЕсли;
	
	// Общие реквизиты
	Попытка
		ЕстьОбщиеРеквизиты = Метаданные.ОбщиеРеквизиты.Количество() > 0
	Исключение
		ЕстьОбщиеРеквизиты = Ложь;
	КонецПопытки;
	
	Если ЕстьОбщиеРеквизиты Тогда                                         
		Для каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
			
			НайденныйОбъект = Реквизит.Состав.Найти(ОбъектМетаданных);
			Если НайденныйОбъект <> Неопределено Тогда
				Если (НайденныйОбъект.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) ИЛИ (Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать И НайденныйОбъект.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто) Тогда
					Результат.Добавить(Реквизит.Имя, ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним));
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьРеквизитыОбъекта

// Добавляет в объект все его реквизиты, ТЧ и предопределенные реквизиты и ТЧ
Процедура ДобавитьРегистрируемыеОбъекты(Объекты, МетаданныеОбъекты, Представление, Имя, ИндексКартинки, ЗаполнятьРеквизитыИТЧ = Истина) Экспорт
	
	Массив						= внЖурналРегистрацииПовтИсп.МассивПредопределенныхНеРегистрируемыхОбъектов();
	
	НоваяСтрока					= Объекты.Строки.Добавить();
	НоваяСтрока.Представление	= Представление;
	НоваяСтрока.Имя				= "";
	НоваяСтрока.ИндексКартинки	= ИндексКартинки;
	НоваяСтрока.СодержитЭлементы = Истина;
	НоваяСтрока.ЭтоОбъект		= Ложь;
	
	Для Каждого ОбъектМетаданных из МетаданныеОбъекты Цикл
		
		ПолноеИмя				= ОбъектМетаданных.ПолноеИмя();
		
		// Пропуск метаданных журнала регистрации
		Если Массив.Найти(ПолноеИмя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипОбъекта				= ПолучитьТипОбъектаПоИмени(ПолноеИмя);
		ЭлементИмя				= ОбъектМетаданных.Имя;              
		СубСтрока				= НоваяСтрока.Строки.Добавить();
		СубСтрока.Представление = ?(ПустаяСтрока(ОбъектМетаданных.Синоним), ЭлементИмя, ОбъектМетаданных.Синоним);
		СубСтрока.Имя			= "";
		СубСтрока.ИмяТЧ			= "";
		СубСтрока.ИндексКартинки= ИндексКартинки;
		СубСтрока.ПолноеИмя		= ПолноеИмя;
		СубСтрока.СодержитЭлементы = Истина;
		СубСтрока.ЭтоОбъект		= Истина;
		Попытка
			СубСтрока.ТипЭлемента = ОбъектМетаданных.Тип;
		Исключение
		КонецПопытки;
		
		Если НЕ ЗаполнятьРеквизитыИТЧ Тогда
			Продолжить;
		КонецЕсли;
		
		// Стандартные реквизиты		
		Реквизиты = ПолучитьРеквизитыОбъекта(ОбъектМетаданных, ТипОбъекта);
		Для каждого Реквизит Из Реквизиты Цикл
			
			СтрокаРеквизита					= СубСтрока.Строки.Добавить();
			СтрокаРеквизита.Представление	= ?(ПустаяСтрока(Реквизит.Представление), Реквизит.Значение, Реквизит.Представление);
			СтрокаРеквизита.Имя				= Реквизит.Значение;
			СтрокаРеквизита.ИмяТЧ			= "";
			СтрокаРеквизита.ИндексКартинки	= 0;
			СтрокаРеквизита.ПолноеИмя		= ПолноеИмя;
			СтрокаРеквизита.СодержитЭлементы = Ложь;
			СтрокаРеквизита.ЭтоОбъект		= Ложь;
			Попытка				
				СтрокаРеквизита.ТипЭлемента	= ОбъектМетаданных.СтандартныеРеквизиты[Реквизит.Значение].Тип;
			Исключение
			КонецПопытки;
			Попытка				
				СтрокаРеквизита.ТипЭлемента	= ОбъектМетаданных.Реквизиты[Реквизит.Значение].Тип;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		// Таб части (не константы, не регистры сведений)
		Если ТипОбъекта <> 4 И ТипОбъекта <> 10 Тогда
			
			Если ТипОбъекта = 5 Тогда
				
				Для каждого ТЧ Из ОбъектМетаданных.СтандартныеТабличныеЧасти Цикл
					СтрокаТЧ				= СубСтрока.Строки.Добавить();
					СтрокаТЧ.Представление	= ?(ПустаяСтрока(ТЧ.Синоним), ТЧ.Имя, ТЧ.Синоним);
					СтрокаТЧ.Имя			= "";
					СтрокаТЧ.ИмяТЧ			= ТЧ.Имя;
					СтрокаТЧ.ИндексКартинки	= 1;
					СтрокаТЧ.ПолноеИмя		= ПолноеИмя;
					СтрокаТЧ.СодержитЭлементы = Истина;
					СтрокаТЧ.ЭтоОбъект		= Ложь;
					Попытка
						СтрокаТЧ.ТипЭлемента	= ТЧ.Тип;
					Исключение
					КонецПопытки;
					
					Для каждого Реквизит Из ТЧ.СтандартныеРеквизиты Цикл
						
						Если Реквизит.Имя = "НомерСтроки" ИЛИ Реквизит.Имя = "Предопределенное" Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаРеквизита					= СтрокаТЧ.Строки.Добавить();
						СтрокаРеквизита.Представление	= ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
						СтрокаРеквизита.Имя				= Реквизит.Имя;
						СтрокаРеквизита.ИмяТЧ			= ТЧ.Имя;
						СтрокаРеквизита.ИндексКартинки	= 0;
						СтрокаРеквизита.ПолноеИмя		= ПолноеИмя;
						СтрокаРеквизита.СодержитЭлементы = Ложь;
						СтрокаРеквизита.ЭтоОбъект		= Ложь;
						Попытка
							СтрокаРеквизита.ТипЭлемента		= Реквизит.Тип;
						Исключение
						КонецПопытки;
						
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли ТипОбъекта = 6 Тогда
				// План видов расчета
				// БазовыеВидыРасчета
				
				Для каждого ТЧ Из ОбъектМетаданных.СтандартныеТабличныеЧасти Цикл
					СтрокаТЧ				= СубСтрока.Строки.Добавить();
					СтрокаТЧ.Представление	= ?(ПустаяСтрока(ТЧ.Синоним), ТЧ.Имя, ТЧ.Синоним);
					СтрокаТЧ.Имя			= "";
					СтрокаТЧ.ИмяТЧ			= ТЧ.Имя;
					СтрокаТЧ.ИндексКартинки	= 1;
					СтрокаТЧ.ПолноеИмя		= ПолноеИмя;
					СтрокаТЧ.СодержитЭлементы = Истина;
					СтрокаТЧ.ЭтоОбъект		= Ложь;
					Попытка
						СтрокаТЧ.ТипЭлемента= ТЧ.Тип;
					Исключение
					КонецПопытки;
					
					Для каждого Реквизит Из ТЧ.СтандартныеРеквизиты Цикл
						
						Если Реквизит.Имя = "НомерСтроки" ИЛИ Реквизит.Имя = "Предопределенный" Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаРеквизита					= СтрокаТЧ.Строки.Добавить();
						СтрокаРеквизита.Представление	= ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
						СтрокаРеквизита.Имя				= Реквизит.Имя;
						СтрокаРеквизита.ИмяТЧ			= ТЧ.Имя;
						СтрокаРеквизита.ИндексКартинки	= 0;
						СтрокаРеквизита.ПолноеИмя		= ПолноеИмя;
						СтрокаРеквизита.СодержитЭлементы = Ложь;
						СтрокаРеквизита.ЭтоОбъект		= Ложь;
						Попытка
							СтрокаРеквизита.ТипЭлемента		= Реквизит.Тип;
						Исключение
						КонецПопытки;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для каждого ТЧ Из ОбъектМетаданных.ТабличныеЧасти Цикл
				
				СтрокаТЧ				= СубСтрока.Строки.Добавить();
				СтрокаТЧ.Представление	= ?(ПустаяСтрока(ТЧ.Синоним), ТЧ.Имя, ТЧ.Синоним);
				СтрокаТЧ.Имя			= "";
				СтрокаТЧ.ИмяТЧ			= ТЧ.Имя;
				СтрокаТЧ.ИндексКартинки	= 1;
				СтрокаТЧ.ПолноеИмя		= ПолноеИмя;
				СтрокаТЧ.СодержитЭлементы = Истина;
				СтрокаТЧ.ЭтоОбъект		= Ложь;
				Попытка
					СтрокаТЧ.ТипЭлемента= ТЧ.Тип;
				Исключение
				КонецПопытки;
				
				// Реквизиты ТЧ
				Для каждого Реквизит Из ТЧ["Реквизиты"] Цикл
					
					СтрокаРеквизита					= СтрокаТЧ.Строки.Добавить();
					СтрокаРеквизита.Представление	= ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
					СтрокаРеквизита.Имя				= Реквизит.Имя;
					СтрокаРеквизита.ИмяТЧ			= ТЧ.Имя;
					СтрокаРеквизита.ИндексКартинки	= 0;
					СтрокаРеквизита.ПолноеИмя		= ПолноеИмя;
					СтрокаРеквизита.СодержитЭлементы = Ложь;
					СтрокаРеквизита.ЭтоОбъект		= Ложь;
					Попытка
						СтрокаРеквизита.ТипЭлемента	= Реквизит.Тип;
					Исключение
					КонецПопытки;
					
				КонецЦикла;				
				
			КонецЦикла;
			
			//
			
		КонецЕсли;
		
		// Регисты сведений
		Если ТипОбъекта = 10 Тогда
			
			СтрокаТЧ				= СубСтрока.Строки.Добавить();
			СтрокаТЧ.Представление	= "Записи";
			СтрокаТЧ.Имя			= "";
			СтрокаТЧ.ИмяТЧ			= "Записи";
			СтрокаТЧ.ИндексКартинки	= 1;
			СтрокаТЧ.ПолноеИмя		= ПолноеИмя;
			СтрокаТЧ.СодержитЭлементы = Истина;
			СтрокаТЧ.ЭтоОбъект		= Истина;
			
			Для каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
				СтрокаРеквизита					= СтрокаТЧ.Строки.Добавить();
				СтрокаРеквизита.Представление	= ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
				СтрокаРеквизита.Имя				= Реквизит.Имя;
				СтрокаРеквизита.ИмяТЧ			= СтрокаТЧ.ИмяТЧ;
				СтрокаРеквизита.ИндексКартинки	= 0;
				СтрокаРеквизита.ПолноеИмя		= ПолноеИмя;
				СтрокаРеквизита.СодержитЭлементы = Ложь;
				СтрокаРеквизита.ЭтоОбъект		= Ложь;
				Попытка
					СтрокаРеквизита.ТипЭлемента	= Реквизит.Тип;
				Исключение
				КонецПопытки;
			КонецЦикла;
			Для каждого Реквизит Из ОбъектМетаданных.Измерения Цикл
				СтрокаРеквизита					= СтрокаТЧ.Строки.Добавить();
				СтрокаРеквизита.Представление	= ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
				СтрокаРеквизита.Имя				= Реквизит.Имя;
				СтрокаРеквизита.ИмяТЧ			= СтрокаТЧ.ИмяТЧ;
				СтрокаРеквизита.ИндексКартинки	= 12;
				СтрокаРеквизита.ПолноеИмя		= ПолноеИмя;
				СтрокаРеквизита.СодержитЭлементы = Ложь;
				СтрокаРеквизита.ЭтоОбъект		= Ложь;
				Попытка
					СтрокаРеквизита.ТипЭлемента	= Реквизит.Тип;
				Исключение
				КонецПопытки;
			КонецЦикла;
			Для каждого Реквизит Из ОбъектМетаданных.Ресурсы Цикл
				СтрокаРеквизита					= СтрокаТЧ.Строки.Добавить();
				СтрокаРеквизита.Представление	= ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
				СтрокаРеквизита.Имя				= Реквизит.Имя;
				СтрокаРеквизита.ИмяТЧ			= СтрокаТЧ.ИмяТЧ;
				СтрокаРеквизита.ИндексКартинки	= 13;
				СтрокаРеквизита.ПолноеИмя		= ПолноеИмя;
				СтрокаРеквизита.СодержитЭлементы = Ложь;
				СтрокаРеквизита.ЭтоОбъект		= Ложь;
				Попытка
					СтрокаРеквизита.ТипЭлемента	= Реквизит.Тип;
				Исключение
				КонецПопытки;
			КонецЦикла;				
			Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
				СтрокаРеквизита					= СтрокаТЧ.Строки.Добавить();
				СтрокаРеквизита.Представление	= ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним);
				СтрокаРеквизита.Имя				= Реквизит.Имя;
				СтрокаРеквизита.ИмяТЧ			= СтрокаТЧ.ИмяТЧ;
				СтрокаРеквизита.ИндексКартинки	= 0;
				СтрокаРеквизита.ПолноеИмя		= ПолноеИмя;
				СтрокаРеквизита.СодержитЭлементы = Ложь;
				СтрокаРеквизита.ЭтоОбъект		= Ложь;
				Попытка
					СтрокаРеквизита.ТипЭлемента	= Реквизит.Тип;
				Исключение
				КонецПопытки;
			КонецЦикла;			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьРегистрируемыеОбъекты

// Заполняет дерево изменений по переданной ссылке ЖРИзменений
Процедура ЗаполнитьДеревоИзменений(ТЧИзменения, ДеревоИзменений, ТолькоИзменения = Ложь, Иерархически = Истина) Экспорт
	
	ДеревоИзменений.Строки.Очистить();
	
	Попытка
		ТЧИзменения.Сортировать("ИмяТЧ,НомерСтрокиТЧ,ИмяРеквизита,ТипРеквизита");
	Исключение
		Возврат;
	КонецПопытки;	
	
	ПоследнийИндекс = 0;
	// Сначала реквизиты шапки
	Если ТЧИзменения.Количество() > 0 Тогда
		НайденнаяСтрока					= ТЧИзменения.Найти("", "ИмяТЧ");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаИмяТЧ					= ДеревоИзменений.Строки.Добавить();
			СтрокаИмяТЧ.Реквизит		= "Реквизиты";
			СтрокаИмяТЧ.ИндексКартинки	= 0;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 0 По ТЧИзменения.Количество() - 1 Цикл
		Если ТЧИзменения[Индекс].ИмяТЧ <> "" Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока						= СтрокаИмяТЧ.Строки.Добавить();
		НоваяСтрока.Реквизит			= ТЧИзменения[Индекс].ИмяРеквизита;
		НоваяСтрока.СтароеПредставление = Строка(ТЧИзменения[Индекс].СтароеПредставление);
		НоваяСтрока.НовоеПредставление	= Строка(ТЧИзменения[Индекс].НовоеПредставление);
		
		// НЕОГР ДЛИНА
		НоваяСтрока.СтароеЗначение 		= ТЧИзменения[Индекс].СтароеЗначение;
		НоваяСтрока.НовоеЗначение		= ТЧИзменения[Индекс].НовоеЗначение;
		НоваяСтрока.Изменено			= Ложь;
		
		НоваяСтрока.ИндексКартинки		= 0;
		
		ПоследнийИндекс					= Индекс;
	КонецЦикла;
	
	// Потом ТЧ
	Если Иерархически Тогда
		СтрокаИмяТЧ				= Неопределено;
		СтрокаНОмерТЧ			= Неопределено;
		ПоследняяСтрокаИмяТЧ	= "";
		ПоследняяСтрокаНомерТЧ	= -1;
		
		Для Индекс = ПоследнийИндекс По ТЧИзменения.Количество() - 1 Цикл
			Если ТЧИзменения[Индекс].НомерСтрокиТЧ > 0 Тогда
				Если ПоследняяСтрокаИмяТЧ <> ТЧИзменения[Индекс].ИмяТЧ Тогда
					СтрокаИмяТЧ					= ДеревоИзменений.Строки.Добавить();
					СтрокаИмяТЧ.Реквизит		= ТЧИзменения[Индекс].ИмяТЧ;
					СтрокаИмяТЧ.ИндексКартинки	= 1;
					ПоследняяСтрокаИмяТЧ		= ТЧИзменения[Индекс].ИмяТЧ;
					ПоследняяСтрокаНомерТЧ		= -1;
				КонецЕсли;
				
				Если ПоследняяСтрокаНомерТЧ <> ТЧИзменения[Индекс].НомерСтрокиТЧ Тогда
					СтрокаНОмерТЧ				= СтрокаИмяТЧ.Строки.Добавить();
					СтрокаНОмерТЧ.Реквизит		= "[" + ТЧИзменения[Индекс].НомерСтрокиТЧ + "]";
					Если ТЧИзменения[Индекс].ТипРеквизита = 3 ИЛИ ТЧИзменения[Индекс].ТипРеквизита = 4 ИЛИ ТЧИзменения[Индекс].ТипРеквизита = 5 Тогда
						СтрокаНОмерТЧ.ИндексКартинки = 11;
					Иначе
						СтрокаНОмерТЧ.ИндексКартинки = 1;
					КонецЕсли;
					
					ПоследняяСтрокаНомерТЧ = ТЧИзменения[Индекс].НомерСтрокиТЧ;
				КонецЕсли;
				
				НоваяСтрока						= СтрокаНОмерТЧ.Строки.Добавить();
				НоваяСтрока.Реквизит			= ТЧИзменения[Индекс].ИмяРеквизита;
				НоваяСтрока.СтароеПредставление = ТЧИзменения[Индекс].СтароеПредставление;		
				НоваяСтрока.НовоеПредставление	= ТЧИзменения[Индекс].НовоеПредставление;
				
				// НЕОГР ДЛИНА
				НоваяСтрока.СтароеЗначение		= ТЧИзменения[Индекс].СтароеЗначение;
				НоваяСтрока.НовоеЗначение		= ТЧИзменения[Индекс].НовоеЗначение;
				
				НоваяСтрока.Изменено			= ТЧИзменения[Индекс].Изменено;
				
				Если ТЧИзменения[Индекс].ТипРеквизита = 3 ИЛИ ТЧИзменения[Индекс].ТипРеквизита = 5 Тогда					
					НоваяСтрока.ИндексКартинки	= 12;
				ИначеЕсли ТЧИзменения[Индекс].ТипРеквизита = 4 Тогда
					НоваяСтрока.ИндексКартинки	= 13;
				Иначе				
					НоваяСтрока.ИндексКартинки	= 0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Для Индекс = ПоследнийИндекс По ТЧИзменения.Количество() - 1 Цикл
			Если ТЧИзменения[Индекс].НомерСтрокиТЧ > 0 Тогда
				НоваяСтрока						= ДеревоИзменений.Строки.Добавить();
				НоваяСтрока.Реквизит			= ТЧИзменения[Индекс].ИмяТЧ + "[" + ТЧИзменения[Индекс].НомерСтрокиТЧ + "]." + ТЧИзменения[Индекс].ИмяРеквизита;
				НоваяСтрока.СтароеПредставление = ТЧИзменения[Индекс].СтароеПредставление;
				НоваяСтрока.НовоеПредставление	= ТЧИзменения[Индекс].НовоеПредставление;
				
				// НЕОГР ДЛИНА
				НоваяСтрока.СтароеЗначение		= ТЧИзменения[Индекс].СтароеЗначение;
				НоваяСтрока.НовоеЗначение		= ТЧИзменения[Индекс].НовоеЗначение;
				
				Если ТЧИзменения[Индекс].ТипРеквизита = 3 ИЛИ ТЧИзменения[Индекс].ТипРеквизита = 5 Тогда					
					НоваяСтрока.ИндексКартинки	= 12;
				ИначеЕсли ТЧИзменения[Индекс].ТипРеквизита = 4 Тогда
					НоваяСтрока.ИндексКартинки	= 13;
				Иначе				
					НоваяСтрока.ИндексКартинки	= 0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДеревоИзменений

// В дереве устанавливает флаги
Процедура УстановитьФлаги(СтрокиОбъектов, Флаг) Экспорт
	
	Для Каждого Стр Из СтрокиОбъектов.Строки Цикл
		Стр.Использование = Флаг;
		УстановитьФлаги(Стр, Флаг);
	КонецЦикла;
	
КонецПроцедуры // УстановитьФлаги

Процедура ОбновитьСтрокиДерева(СтрокаДерева) Экспорт
	
	Если СтрокаДерева.Использование Тогда
		// Устанавливаем родительские флаги
		СтрокаОбъекта = СтрокаДерева;
		Пока СтрокаОбъекта.Родитель <> Неопределено Цикл			
			СтрокаОбъекта = СтрокаОбъекта.Родитель;
			СтрокаОбъекта.Использование = Истина;
		КонецЦикла;
	Иначе
		// Снимаем родительские флаги
		СтрокаОбъекта = СтрокаДерева;
		Пока СтрокаОбъекта.Родитель <> Неопределено Цикл			
			СтрокаОбъекта = СтрокаОбъекта.Родитель;
			Если КоличествоВыделеныхСтрок(СтрокаОбъекта) <> 0 Тогда
				Прервать;
			КонецЕсли;
			СтрокаОбъекта.Использование = Ложь;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСтрокиДерева

Функция КоличествоВыделеныхСтрок(СтрокиОбъектов) Экспорт
	
	КоличествоВыделеных = 0;
	Для Каждого Стр Из СтрокиОбъектов.Строки Цикл
		Если Стр.Использование Тогда
			КоличествоВыделеных = КоличествоВыделеных + 1;
		КонецЕсли;		
		КоличествоВыделеных = КоличествоВыделеных + КоличествоВыделеныхСтрок(Стр);
	КонецЦикла;
	
	Возврат КоличествоВыделеных;
	
КонецФункции // КоличествоВыделеныхСтрок

// Возвращает параметр уникальности ИБ
Функция ПараметрУникальностиИБ() Экспорт
	
	Стр = НРег(СтрокаСоединенияИнформационнойБазы());
	Результат = Новый Структура();	
	ИмяБазы = СокрЛП(ПолучитьЗначениеИзСтроки(Стр, "Ref"));
	Если Не ПустаяСтрока(ИмяБазы) Тогда
		Результат.Вставить("Сервер", СокрЛП(ПолучитьЗначениеИзСтроки(Стр, "Srvr")));
		Результат.Вставить("ИмяБазы", ИмяБазы);
	Иначе
		Результат.Вставить("Сервер", "");
		Результат.Вставить("ИмяБазы", СокрЛП(ПолучитьЗначениеИзСтроки(Стр, "File")));
	КонецЕсли;
	Возврат Результат;
	
КонецФункции // ПараметрУникальностиИБ

// По предеданному системному представлению (GUID) определяет есть ли 
// данное значение в ИБ.
Функция ЭтаСсылкаСуществуетВИБ(Знач СистемноеПредставление) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Возврат ЗначениеИзСтрокиВнутр(СистемноеПредставление).ПолучитьОбъект() <> Неопределено;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ЭтаСсылкаСуществуетВИБ

// Функция возвращает таблицу значений с изменениями по объекту в БД журнала
Функция ПолучитьИзмененияПоОбъекту(Знач ДатаИзменения, Знач КодИзменения, Знач УзелРИБ, Знач СостояниеЗаписи) Экспорт
	
	внСоединение = ПолучитьСоединение();
	Если внСоединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТЧ = Новый ТаблицаЗначений;
	ТЧ.Колонки.Добавить("НомерСтроки");
	ТЧ.Колонки.Добавить("Реквизит");
	ТЧ.Колонки.Добавить("ИмяТЧ");
	ТЧ.Колонки.Добавить("ИмяРеквизита");
	ТЧ.Колонки.Добавить("НомерСтрокиТЧ");
	ТЧ.Колонки.Добавить("СтароеЗначение");
	ТЧ.Колонки.Добавить("НовоеЗначение");
	ТЧ.Колонки.Добавить("СтароеПредставление");
	ТЧ.Колонки.Добавить("НовоеПредставление");
	ТЧ.Колонки.Добавить("ТипРеквизита");
	ТЧ.Колонки.Добавить("Изменено");
	
	// добавим индексы для быстроты поиска
	ТЧ.Индексы.Добавить("ИмяТЧ,ИмяРеквизита,НомерСтрокиТЧ");	
	
	Запрос = внСоединение.NewObject("Запрос");
	
	// Запись в хранителе, но не обработана
	Если СостояниеЗаписи = 1 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	внЖурналРегистрации.Данные
			|ИЗ
			|	Справочник.внЖурналРегистрации КАК внЖурналРегистрации
			|ГДЕ
			|	внЖурналРегистрации.ИнформационнаяБаза = &ИнформационнаяБаза
			|	И внЖурналРегистрации.Код = &Код
			|	И внЖурналРегистрации.ДатаИзменения = &ДатаИзменения
			|	И внЖурналРегистрации.УзелРИБ = &УзелРИБ";
			
		ИБСсылка = внСоединение.внЖурналРегистрации.ПолучитьСсылкуИнформационнойБазы(внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
		Запрос.УстановитьПараметр("ИнформационнаяБаза"	, ИБСсылка);
		Запрос.УстановитьПараметр("Код"					, КодИзменения);
		Запрос.УстановитьПараметр("ДатаИзменения"		, ДатаИзменения);
		Запрос.УстановитьПараметр("УзелРИБ"				, внСоединение.внЖурналРегистрации.ПолучитьСсылкуУзлаРИБ(ИБСсылка, УзелРИБ));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НомерСтроки = 0;
			ТЧВнешняя = Выборка.Данные.Получить();
			Для Каждого Строки Из ТЧВнешняя Цикл
				
				НоваяСтрока 					= ТЧ.Добавить();
				НоваяСтрока.НомерСтроки			= НомерСтроки;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строки);
				НоваяСтрока.НовоеЗначение		= Строки.Значение;
				НоваяСтрока.НовоеПредставление	= Строки.Представление;
				НоваяСтрока.Изменено			= Истина;
				НомерСтроки						= НомерСтроки + 1;
				
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		// Запись в хранителе и обработана
		Запрос.Текст =
			"ВЫБРАТЬ
			|	внРеквизитыОбъектов.ИмяТЧ КАК ИмяТЧ,
			|	внРеквизитыОбъектов.ИмяРеквизита КАК ИмяРеквизита,
			|	внРеквизитыОбъектов.ТипРеквизита,
			|	внИзменения.СтароеЗначение,
			|	внИзменения.СтароеПредставление,
			|	внИзменения.НовоеЗначение,
			|	внИзменения.НовоеПредставление,
			|	внИзменения.Изменено,
			|	внИзменения.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
			|	внИзменения.Реквизит
			|ИЗ
			|	РегистрСведений.внИзменения КАК внИзменения
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.внЖурналРегистрации КАК внЖурналРегистрации
			|		ПО внИзменения.Изменение = внЖурналРегистрации.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.внРеквизитыОбъектов КАК внРеквизитыОбъектов
			|		ПО внИзменения.Реквизит = внРеквизитыОбъектов.Ссылка
			|ГДЕ
			|	внЖурналРегистрации.ИнформационнаяБаза = &ИнформационнаяБаза
			|	И внЖурналРегистрации.Код = &Код
			|	И внЖурналРегистрации.ДатаИзменения = &ДатаИзменения
			|	И внЖурналРегистрации.УзелРИБ = &УзелРИБ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИмяТЧ,
			|	НомерСтрокиТЧ,
			|	ИмяРеквизита";
		
		ИБСсылка = внСоединение.внЖурналРегистрации.ПолучитьСсылкуИнформационнойБазы(внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
		Запрос.УстановитьПараметр("ИнформационнаяБаза"	, ИБСсылка);
		Запрос.УстановитьПараметр("Код"					, КодИзменения);
		Запрос.УстановитьПараметр("ДатаИзменения"		, ДатаИзменения);
		Запрос.УстановитьПараметр("УзелРИБ"				, внСоединение.внЖурналРегистрации.ПолучитьСсылкуУзлаРИБ(ИБСсылка, УзелРИБ));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока 					= ТЧ.Добавить();
			НоваяСтрока.НомерСтроки			= НомерСтроки;		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НомерСтроки						= НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТЧ;
	
КонецФункции // ПолучитьИзмененияПоОбъекту

Функция ПолучитьОписаниеСобытия(Знач ДатаИзменения, Знач КодИзменения, Знач УзелРИБ, Знач СостояниеЗаписи) Экспорт

	Результат = Новый Структура;
	
	Если СостояниеЗаписи > 0 Тогда
		
		внСоединение = ПолучитьСоединение();
		Если внСоединение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Запрос = внСоединение.NewObject("Запрос");
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	внЖурналРегистрации.Ссылка,
			|	внЖурналРегистрации.ВерсияДанных,
			|	внЖурналРегистрации.Код,
			|	внЖурналРегистрации.ДатаИзменения,
			|	внЖурналРегистрации.УзелРИБ.ИдентификаторУзлаРИБ КАК УзелРИБ,
			|	внЖурналРегистрации.Версия,
			|	внЖурналРегистрации.МетаданныеОбъекта.ПолноеНаименование КАК МетаданныеОбъекта,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(внЖурналРегистрации.ИдентификаторОбъекта) КАК ИдентификаторОбъекта,
			|	внЖурналРегистрации.ПредставлениеОбъекта,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(внЖурналРегистрации.Пользователь) КАК Пользователь,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(внЖурналРегистрации.Компьютер) КАК Компьютер,
			|	внЖурналРегистрации.Событие.Код КАК Событие,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(внЖурналРегистрации.Событие),
			|	внЖурналРегистрации.СостояниеЗаписи
			|ИЗ
			|	Справочник.внЖурналРегистрации КАК внЖурналРегистрации
			|ГДЕ
			|	внЖурналРегистрации.ИнформационнаяБаза = &ИнформационнаяБаза
			|	И внЖурналРегистрации.Код = &Код
			|	И внЖурналРегистрации.ДатаИзменения = &ДатаИзменения
			|	И внЖурналРегистрации.УзелРИБ = &УзелРИБ";
			
		ИБСсылка = внСоединение.внЖурналРегистрации.ПолучитьСсылкуИнформационнойБазы(внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторИБ());
		Запрос.УстановитьПараметр("ИнформационнаяБаза"	, ИБСсылка);
		Запрос.УстановитьПараметр("УзелРИБ"				, внСоединение.внЖурналРегистрации.ПолучитьСсылкуУзлаРИБ(ИБСсылка, УзелРИБ));
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		
		Результат.Вставить("Версия", "-");
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	*
			|ИЗ
			|	РегистрСведений.внКэшЖурналаРегистрации КАК внКэшЖурналаРегистрации
			|ГДЕ
			|	внКэшЖурналаРегистрации.НомерЗаписи		= &Код
			|	И внКэшЖурналаРегистрации.ДатаИзменения	= &ДатаИзменения
			|	И внКэшЖурналаРегистрации.УзелРИБ 		= &УзелРИБ"
		);
		
		Запрос.УстановитьПараметр("УзелРИБ"			, УзелРИБ);	
		
	КонецЕсли;
	Запрос.УстановитьПараметр("Код"				, КодИзменения);	
	Запрос.УстановитьПараметр("ДатаИзменения"	, ДатаИзменения);	
	
	
	РезультатВыборки = Запрос.Выполнить();
	Если НЕ РезультатВыборки.Пустой() Тогда
		
		Выборка = РезультатВыборки.Выбрать();
		Выборка.Следующий();
		
		Для Каждого К Из РезультатВыборки.Колонки Цикл
			Результат.Вставить(К.Имя, Выборка[К.Имя]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

// Функция возвращает таблицу значений с изменениями по объекту из кэша
Функция ПолучитьИзмененияПоОбъектуВКэше(Знач ДатаИзменения, Знач КодИзменения, Знач УзелРИБ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Код"				, КодИзменения);
	Запрос.УстановитьПараметр("УзелРИБ"			, УзелРИБ);
	Запрос.УстановитьПараметр("ДатаИзменения"	, ДатаИзменения);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	РегистрСведений.внКэшЖурналаРегистрации КАК внКэшЖурналаРегистрации
		|ГДЕ
		|	внКэшЖурналаРегистрации.НомерЗаписи = &Код
		|	И внКэшЖурналаРегистрации.УзелРИБ = &УзелРИБ
		|	И внКэшЖурналаРегистрации.ДатаИзменения = &ДатаИзменения"
	;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТЧ = ДеСериализоватьОбъект(Выборка.Данные.Получить(), Выборка);
		Если ТЧ = Неопределено Тогда
			ТЧ = СоздатьИзмененияТЧ();
		КонецЕсли;
		
		// Работаем с колонками			
		Колонка		= ТЧ.Колонки.Найти("Представление");
		Колонка.Имя = "НовоеПредставление";
		Колонка		= ТЧ.Колонки.Найти("Значение");
		Колонка.Имя = "НовоеЗначение";			
		ТЧ.Колонки.Добавить("Изменено");
		ТЧ.Колонки.Добавить("СтароеПредставление");
		ТЧ.Колонки.Добавить("СтароеЗначение");
		ТЧ.ЗаполнитьЗначения(Истина, "Изменено");							
		ТЧ.ЗаполнитьЗначения("", "СтароеПредставление,СтароеЗначение");			
		ТЧ.Индексы.Добавить("ИмяТЧ,ИмяРеквизита,НомерСтрокиТЧ"); // добавим индексы для быстроты поиска
		ТЧ.Сортировать("ИмяТЧ,НомерСтрокиТЧ,ИмяРеквизита");
	Иначе
		ТЧ			= СоздатьИзмененияТЧ();
	КонецЕсли;
		
	Для Каждого Строки Из ТЧ Цикл		
		Если НЕ ЗначениеЗаполнено(Строки.НовоеПредставление) Тогда
			Если ТипЗнч(Строки.НовоеЗначение) = Тип("УникальныйИдентификатор") Тогда
				Строки.НовоеПредставление = Строка(Строки.НовоеЗначение);
			ИначеЕсли ТипЗнч(Строки.НовоеЗначение) = Тип("ХранилищеЗначения") Тогда
				Строки.НовоеПредставление = "<ХранилищеЗначения>";
			Иначе
				Попытка
					Строки.НовоеПредставление = Строка(ЗначениеИзСтрокиВнутр(Строки.НовоеЗначение));
				Исключение
					Строки.НовоеПредставление = Строка(Строки.НовоеЗначение);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;

	Возврат ТЧ;
	
КонецФункции // ПолучитьИзмененияПоОбъектуВКэше

// Показывает изменения на форме в обычном приложении
Процедура ПоказатьИзмененияНаФорме(ОбъектЖР) Экспорт
	
	Попытка
		Попытка
			Объект = ЗначениеИзСтрокиВнутр(ОбъектЖР.Объект);
		Исключение
			Объект = ОбъектЖР.Объект;
		КонецПопытки;
		
		ТипОбъекта = ОбъектЖР.Событие;
		
		СтрДатаИзмененияПлюсПользователь = Формат(ОбъектЖР.ДатаИзменения, "ДФ='dd.MM.yyyy HH:mm:ss'") + " " + ОбъектЖР.Пользователь;
		
		// Константа и входы, выходы
		Если ТипОбъекта = 4 И ТипОбъекта = 9 И ТипОбъекта = 10 Тогда
			#Если Клиент Тогда
				внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю("Для констант изменения не показываются на форме!");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		Форма = Объект.ПолучитьФорму();
		
		Если Типзнч(Форма) = Тип("Форма") Тогда
			ЭлементыФормыОбъекта = Форма.ЭлементыФормы;
		Иначе	
			ЭлементыФормыОбъекта = Форма.ПодчиненныеЭлементы;
		КонецЕсли;	
		
		Изменения = ПолучитьИзмененияПоОбъекту(ОбъектЖР.ДатаИзменения, ОбъектЖР.Код, ОбъектЖР.УзелРИБ, ОбъектЖР.СостояниеЗаписи);
		
		Для Каждого Строки Из Изменения Цикл
			
			Если НЕ Строки.Изменено Тогда
				Продолжить;
			КонецЕсли;
			
			// Перебор всех реквизитов на форме
			Для Индекс = 0 По ЭлементыФормыОбъекта.Количество() - 1 Цикл
				Элемент = ЭлементыФормыОбъекта[Индекс];
				Если Строки.НомерСтрокиТЧ = 0 Тогда
					// ШАПКА
					Если Типзнч(Форма) = Тип("Форма") Тогда 
						Если ВРег(Элемент.Данные) = ВРег(Строки.ИмяРеквизита) Тогда
							
							Если Строки.СтароеПредставление = Строки.НовоеПредставление И
								Строки.НовоеПредставление = "" Тогда
								СтрокаЗначений = "";
							Иначе
								СтрокаЗначений = 
								" '" + Строки.СтароеПредставление + "' => " +
								" '" + Строки.НовоеПредставление + "'"
							КонецЕсли;
							
							Элемент.ЦветРамки = WebЦвета.Красный;
							Элемент.Подсказка = СтрДатаИзмененияПлюсПользователь + СтрокаЗначений;
						КонецЕсли;
					Иначе 
						Если ВРег(Элемент.Имя) = ВРег(Строки.ИмяРеквизита) Тогда
							Если Строки.СтароеПредставление = Строки.НовоеПредставление И
								Строки.НовоеПредставление = "" Тогда
								СтрокаЗначений = "";
							Иначе
								СтрокаЗначений = 
								" '" + Строки.СтароеПредставление + "' => " +
								" '" + Строки.НовоеПредставление + "'"
							КонецЕсли;
							
							Элемент.ЦветРамки = WebЦвета.Красный;
							Элемент.Подсказка = СтрДатаИзмененияПлюсПользователь + СтрокаЗначений;
						КонецЕсли;
					КонецЕсли;
				Иначе 
					// ТЧ
					Если Типзнч(Форма) = Тип("Форма") Тогда 
						Если ВРег(Элемент.Данные) = ВРег(Строки.ИмяТЧ) Тогда
							Элемент.ЦветРамки = WebЦвета.Красный;
							Элемент.Подсказка =	СтрДатаИзмененияПлюсПользователь;
						КонецЕсли;	
					Иначе
						Если ВРег(Элемент.Имя) = ВРег(Строки.ИмяТЧ) Тогда
							Элемент.ЦветРамки = WebЦвета.Красный;
							Элемент.Подсказка =	СтрДатаИзмененияПлюсПользователь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Форма.Открыть();		
	Исключение		
		#Если Клиент Тогда
			внЖурналРегистрацииКлиент.ПоказатьПредупреждениеПользователю(
				"Не удалось открыть объект с изменениями на форме! Возможно он удален, или не является просматриваемым объектом"
			);
		#КонецЕсли
	КонецПопытки;
КонецПроцедуры // ПоказатьИзмененияНаФорме

// Получить тип объекта
// 
Функция ПолучитьТипОбъекта(Объект) Экспорт
	
	Возврат ПолучитьТипОбъектаПоИмени(Объект.Метаданные().ПолноеИмя());
	
КонецФункции // ПолучитьТипОбъекта

// Считает хэш переданной строки
Функция ВычислитьХэш(ИсходнаяСтрока, Хэш = 5381, М = 33, Разрядность = 18446744073709551616) Экспорт
	
	ДлинаБлока	= 11;
	НачПозиция	= 1;
	ДлинаСтроки	= СтрДлина(ИсходнаяСтрока);
	
	Пока НачПозиция <= ДлинаСтроки Цикл
		СтрокаБлока		= Сред(ИсходнаяСтрока, НачПозиция, ДлинаБлока);
		ДлинаПодстроки	= СтрДлина(СтрокаБлока);
		Если ДлинаПодстроки = ДлинаБлока Тогда
			Хэш = ((((((((((( Хэш*М + КодСимвола(СтрокаБлока, 1))*М + КодСимвола(СтрокаБлока, 2))*М
			+ КодСимвола(СтрокаБлока, 3))*М + КодСимвола(СтрокаБлока, 4))*М + КодСимвола(СтрокаБлока, 5))*М
			+ КодСимвола(СтрокаБлока, 6))*М + КодСимвола(СтрокаБлока, 7))*М + КодСимвола(СтрокаБлока, 8))*М
			+ КодСимвола(СтрокаБлока, 9))*М + КодСимвола(СтрокаБлока, 10))*М + КодСимвола(СтрокаБлока, 11))
		Иначе
			Для к = 1 По ДлинаПодстроки Цикл
				Хэш = М * Хэш + КодСимвола(СтрокаБлока, к)
			КонецЦикла
		КонецЕсли;
		Хэш			= Хэш % Разрядность;
		НачПозиция	= НачПозиция + ДлинаБлока
	КонецЦикла;
	
	Возврат Хэш;
	
КонецФункции // ВычислитьХэш

// Из числа в HEX-представление
Функция Из_Число_В_16(Знач Значение) Экспорт
	
	Результат = "";
	Пока Значение > 0 Цикл 
		Остат = Значение % 16; 
		Значение = (Значение - Остат) / 16;
		Результат = Сред("0123456789ABCDEF", Остат + 1, 1) + Результат
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции // Из_Число_В_16

// Получить таблицу значений с не регистрируемыми объектами
Функция ПолучитьРегистрируемыеОбъекты() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	внРегистрируемыеОбъекты.МетаданныеОбъекта КАК МетаданныеОбъекта,
		|	внРегистрируемыеОбъекты.ИмяТЧ КАК ИмяТЧ,
		|	внРегистрируемыеОбъекты.ИмяРеквизита КАК ИмяРеквизита
		|ИЗ
		|	РегистрСведений.внРегистрируемыеОбъекты КАК внРегистрируемыеОбъекты
		|
		|УПОРЯДОЧИТЬ ПО
		|	МетаданныеОбъекта,
		|	ИмяТЧ,
		|	ИмяРеквизита"
	);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьРегистрируемыеОбъекты()

// Проверяет необходимо ли фиксировать изменения объекта или нет при обмене данных
Функция ПолучитьУзелРИБ(Объект = Неопределено) Экспорт
	
	Возврат внЖурналРегистрацииПовтИсп.ПолучитьИдентификаторУзлаРИБ();
	
КонецФункции // ПолучитьУзелРИБ

// Проверка нужно ли регистрировать событие в РИБ
Функция ЭтоОбменВРИБ(Знач Объект) Экспорт
	
	Если Найти(Объект.Метаданные().ПолноеИмя(), "ПланОбмена.") <> 1 Тогда
		
		// Это обмен?
		Если Объект.ОбменДанными.Загрузка Тогда
			Отправитель = Объект.ОбменДанными.Отправитель;
			Если Отправитель <> Неопределено И Отправитель.Метаданные().РаспределеннаяИнформационнаяБаза Тогда
				
				// Это РИБ и запущена процедуры получения данных из дочерней или родительской базы
				// В таком случае не регистрируем изменения, они будут загружены автоматически либо из другой базы, либо при обмене в ИБ хранителей
				Возврат Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЭтоОбменВРИБ 

// Возвращает на клиент имя компьютера на сервере
Функция ИмяКомпьютераНаСервере() Экспорт
	
	Возврат ИмяКомпьютера();
	
КонецФункции // ИмяКомпьютераНаСервере

// Фукнция возвращает системное представление объекта.
// Если передана ссылка, возвращает вместо номера таблицы 0 (фикс при РИБ)
// Т.е. строку вида:
// {"#",4dcc257a-be68-4de0-bad6-a7dc42232078,135:8269998f2df8084a11e421234b28682d}
// Преобразует в:
// {"#",4dcc257a-be68-4de0-bad6-a7dc42232078,0:8269998f2df8084a11e421234b28682d}
Функция СистемноеПредставлениеОбъекта(Знач Объект) Экспорт
	
	ТипОбъекта		= ТипЗнч(Объект);
	Значение		= ЗначениеВСтрокуВнутр(Объект);	
	Если ТипОбъекта <> Тип("УникальныйИдентификатор") И ТипОбъекта <> Тип("ХранилищеЗначения") Тогда
		Возврат ?(Лев(Значение, 5) = "{""#"",", Лев(Значение, 42) + "0" + Сред(Значение, Найти(Значение, ":")), Значение);
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции // СистемноеПредставлениеОбъекта()

// Функция возвращает представление объекта
// 	- СсылкаИлиЗначение - объект или примитивный тип представление которого надо получить
// 	- Принудительно - если Истина, то принудительное определение представления
Функция СтандартноеПредставлениеОбъекта(Знач СсылкаИлиЗначение) Экспорт
		
	Возврат Строка(СсылкаИлиЗначение);
	
КонецФункции // СтандартноеПредставлениеОбъекта

// Выполняет быструю выгрузку объекта в структуру
Функция СериализоватьОбъект(Объект, ОбъектМетаданные, ТипОбъекта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Объект.Ссылка);
	
	Реквизиты = Новый Структура;
	СписокРеквизитов = внЖурналРегистрации.ПолучитьРеквизитыОбъекта(ОбъектМетаданные, ТипОбъекта, Объект);
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		РеквизитИмя = Реквизит.Значение;
		Попытка
			Реквизиты.Вставить(РеквизитИмя, Объект[РеквизитИмя]);
		Исключение
		КонецПопытки;
	КонецЦикла;
	Результат.Вставить("Реквизиты", Реквизиты);	
	
	ТЧ = Новый Структура;

	Для Каждого Таблица Из ОбъектМетаданные.ТабличныеЧасти Цикл
		ТаблицаИмя = Таблица.Имя;
		ТЧ.Вставить(ТаблицаИмя, Объект[ТаблицаИмя].Выгрузить());
	КонецЦикла;
	
	Результат.Вставить("ТабличныеЧасти", ТЧ);
	
	Возврат Результат;	
	
КонецФункции // СериализоватьОбъект

// Выполняет операцию обратную сериализации
Функция ДеСериализоватьОбъект(Данные, ЭлементКэша) Экспорт
	
	Если ТипЗнч(Данные) <> Тип("Структура") Тогда
		Возврат Данные;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИзмененияТЧ					= внЖурналРегистрации.СоздатьИзмененияТЧ();
	
	ТаблицаРегистрации	= внЖурналРегистрацииПовтИсп.ТаблицаРегистрацииОбъектовМетаданных(ЭлементКэша.МетаданныеОбъекта);
	МетодРегистрации	= внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("МетодРегистрацииОбъектовМетаданных");
	Если МетодРегистрации = Перечисления.внМетодыРегистрацииНовыхОбъектов.ФиксироватьТолькоВыбранныеОбъекты Тогда
		РегистрироватьПоРеквизитам	= ТаблицаРегистрации.Количество() > 1;
	Иначе
		РегистрироватьПоРеквизитам	= ТаблицаРегистрации.Количество() > 0;
	КонецЕсли;
	
	Для каждого Реквизит Из Данные.Реквизиты Цикл
		
		РеквизитИмя = Реквизит.Ключ;
		
		// Пропускаем регистрацию изменений для не регистрируемых реквизитов
		Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, "", РеквизитИмя) Тогда
			Продолжить;
		КонецЕсли;
			
		// Добавляем
		Попытка
			ЗначениеРеквизита					= внЖурналРегистрации.СистемноеПредставлениеОбъекта(Реквизит.Значение);
		Исключение
			Продолжить;
		КонецПопытки;
		
		НоваяЗаписьТаблицы						= ИзмененияТЧ.Добавить();
		НоваяЗаписьТаблицы.ИмяРеквизита			= РеквизитИмя;
		НоваяЗаписьТаблицы.Значение				= ЗначениеРеквизита;
		НоваяЗаписьТаблицы.Представление		= внЖурналРегистрации.СтандартноеПредставлениеОбъекта(Реквизит.Значение);
		НоваяЗаписьТаблицы.ТипРеквизита			= 0;
		
	КонецЦикла;
	
	//=========================================
	// Для табличных частей                  //
	//========================================
	// По каждой ТЧ
	
	Для Каждого Таблица Из Данные.ТабличныеЧасти Цикл
		
		ТаблицаИмя			= Таблица.Ключ;
		
		// Пропускаем регистрацию изменений для не регистрируемых ТЧ
		Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, ТаблицаИмя, "") Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаЗначение		= Таблица.Значение;
		
		// По каждому реквизиту в строке ТЧ
		Для Каждого Реквизит Из ТаблицаЗначение.Колонки Цикл
			
			РеквизитИмя = Реквизит.Имя;
			
			// Пропускаем регистрацию изменений для не регистрируемых реквизитов
			Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, ТаблицаИмя, РеквизитИмя) Тогда
				Продолжить;
			КонецЕсли;
			
			// По каждой строке ТЧ
			Для Каждого Строки Из ТаблицаЗначение Цикл
				
				// Добавляем
				НоваяЗаписьТаблицы					= ИзмененияТЧ.Добавить();
				НоваяЗаписьТаблицы.ИмяРеквизита		= РеквизитИмя;
				НоваяЗаписьТаблицы.ИмяТЧ			= ТаблицаИмя;
				НоваяЗаписьТаблицы.НомерСтрокиТЧ	= Строки.НомерСтроки;
				НоваяЗаписьТаблицы.Значение			= внЖурналРегистрации.СистемноеПредставлениеОбъекта(Строки[РеквизитИмя]);
				НоваяЗаписьТаблицы.Представление	= внЖурналРегистрации.СтандартноеПредставлениеОбъекта(Строки[РеквизитИмя]);
				НоваяЗаписьТаблицы.ТипРеквизита		= 2;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИзмененияТЧ;	
	
КонецФункции // ДеСериализоватьОбъект

///////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ

Процедура внЖурналРегистрацииПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
			Возврат;
		КонецЕсли;
		
		// Вызов переопределяемой процедуры (при необходимости)
		СтандартнаяОбработка = Истина;
		внЖурналРегистрацииПереопределяемый.ПриЗаписи(Источник, Отказ, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			
			Если ЭтоОбменВРИБ(Источник) Тогда
				Возврат;
			КонецЕсли;
			
			РегистрацияИзмененияОбъекта(Источник);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // внЖурналРегистрацииПриЗаписи

Процедура внЖурналРегистрацииПередУдалением(Источник, Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
			Возврат;
		КонецЕсли;
		
		// Вызов переопределяемой процедуры (при необходимости)
		СтандартнаяОбработка = Истина;
		внЖурналРегистрацииПереопределяемый.ПередУдалением(Источник, Отказ, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			Если ЭтоОбменВРИБ(Источник) Тогда
				Возврат;
			КонецЕсли;
			
			внЖурналРегистрацииСервер.РегистрацияУдаленияОбъекта(Источник.Ссылка, ПолучитьУзелРИБ(Источник));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // внЖурналРегистрацииПередУдалением

Процедура внЖурналРегистрацииПередЗаписью(Источник, Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
			Возврат;
		КонецЕсли;
		
		// Вызов переопределяемой процедуры (при необходимости)
		СтандартнаяОбработка = Истина;
		внЖурналРегистрацииПереопределяемый.ПередЗаписью(Источник, Отказ, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			// Добавляем дополнительные свойства
			Если НЕ Источник.ЭтоНовый() Тогда                                                            
				
				Если ЭтоОбменВРИБ(Источник) Тогда
					Возврат;
				КонецЕсли;
				
				Источник.ДополнительныеСвойства.Вставить("внПометкаУдаления", Источник.Ссылка.ПометкаУдаления);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // внЖурналРегистрацииПередЗаписью

Процедура внЖурналРегистрацииПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если НЕ Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
			Возврат;
		КонецЕсли;
		
		// Вызов переопределяемой процедуры (при необходимости)
		СтандартнаяОбработка = Истина;
		внЖурналРегистрацииПереопределяемый.ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			Если ЭтоОбменВРИБ(Источник) Тогда
				Возврат;
			КонецЕсли;
			
			// Добавляем дополнительные свойства
			Если НЕ Источник.Ссылка.Пустая() Тогда
				Источник.ДополнительныеСвойства.Вставить("внПроведен"		, Источник.Ссылка.Проведен);
				Источник.ДополнительныеСвойства.Вставить("внПометкаУдаления", Источник.Ссылка.ПометкаУдаления);
			КонецЕсли;
			Источник.ДополнительныеСвойства.Вставить("внРежимЗаписи"		, РежимЗаписи);
			Источник.ДополнительныеСвойства.Вставить("внРежимПроведения"	, РежимПроведения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // внЖурналРегистрацииПередЗаписьюДокумента

Процедура внЖурналРегистрацииПередЗаписьюРегистраСведений(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
			Возврат;
		КонецЕсли;
		
		ПолноеИмя			 = Источник.Метаданные().ПолноеИмя();
		Если НЕ внЖурналРегистрацииПовтИсп.РегистрироватьСобытиеОбъекта(ПолноеИмя) Тогда
			Возврат;
		КонецЕсли;
		
		// Вызов переопределяемой процедуры (при необходимости)
		СтандартнаяОбработка = Истина;		
		внЖурналРегистрацииПереопределяемый.ПередЗаписьюРегистраСведений(Источник, Отказ, Замещение, СтандартнаяОбработка);
				
		Если СтандартнаяОбработка Тогда
			
			Если ЭтоОбменВРИБ(Источник) Тогда
				Возврат;
			КонецЕсли;
			
			// Добавляем дополнительные свойства
			Запрос					= Новый Запрос;
			УсловиеОтбора			= "";			
			ФиксироватьИзменение	= Истина;
			
			Для каждого ЭлементОтбора Из Источник.Отбор Цикл
				
				Если НЕ ЭлементОтбора.Использование Тогда
					Продолжить;				
				КонецЕсли;
								
				Если НЕ ПустаяСтрока(УсловиеОтбора) Тогда
					УсловиеОтбора = УсловиеОтбора  + " И ";
				КонецЕсли;			
				УсловиеОтбора = УсловиеОтбора +" внНабор." + ЭлементОтбора.Имя + " = &" + ЭлементОтбора.Имя;
				Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
				
			КонецЦикла;
			
			Если ФиксироватьИзменение Тогда
				Если НЕ ПустаяСтрока(УсловиеОтбора) Тогда
					УсловиеОтбора = " ГДЕ " + УсловиеОтбора;
				КонецЕсли;
				
				Запрос.Текст	= "ВЫБРАТЬ * ИЗ " + ПолноеИмя + " КАК внНабор " + УсловиеОтбора;
				ТаблицаРегистра	= Запрос.Выполнить().Выгрузить();
				
				Источник.ДополнительныеСвойства.Вставить("внРегистрСведенийТаблицаРегистра", ТаблицаРегистра);
			Иначе
				Источник.ДополнительныеСвойства.Вставить("внНеФиксироватьИзменение", Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // внЖурналРегистрацииПередЗаписьюРегистраСведений

Процедура внЖурналРегистрацииПриЗаписиРегистраСведений(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если НЕ внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("ВестиИсториюИзменений") Тогда
			Возврат;
		КонецЕсли;
		
		ПолноеИмя			 = Источник.Метаданные().ПолноеИмя();
		Если НЕ внЖурналРегистрацииПовтИсп.РегистрироватьСобытиеОбъекта(ПолноеИмя) Тогда
			Возврат;
		КонецЕсли;		
		
		// Вызов переопределяемой процедуры (при необходимости)
		СтандартнаяОбработка = Истина;
		внЖурналРегистрацииПереопределяемый.ПриЗаписиРегистраСведений(Источник, Отказ, Замещение, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			
			Если ЭтоОбменВРИБ(Источник) Тогда
				Возврат;
			КонецЕсли;		
			
			РегистрацияИзмененияОбъекта(Источник);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // внЖурналРегистрацииПриЗаписиРегистраСведений

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕСС РЕГИСТРАЦИИ ИЗМЕНЕНИЙ В КЭШЕ

Функция СоздатьИзмененияТЧ() Экспорт
	
	// Таблица, в которую будем записывать все реквизиты
	ИзмененияТЧ			= Новый ТаблицаЗначений;
	ИзмененияТЧ.Колонки.Добавить("ИмяРеквизита",		Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));
	ИзмененияТЧ.Колонки.Добавить("ИмяТЧ",				Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));	
	ИзмененияТЧ.Колонки.Добавить("НомерСтрокиТЧ",		Новый ОписаниеТипов("Число"));
	ИзмененияТЧ.Колонки.Добавить("ТипРеквизита",		Новый ОписаниеТипов("Число"));	
	ИзмененияТЧ.Колонки.Добавить("Представление",		Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(300, ДопустимаяДлина.Переменная)));
	ИзмененияТЧ.Колонки.Добавить("Значение",			Новый ОписаниеТипов("Строка"));
	ИзмененияТЧ.Колонки.Добавить("ИдентификаторЗаписи",	Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(35, ДопустимаяДлина.Переменная)));
	
	Возврат ИзмененияТЧ;
	
КонецФункции

Функция РегистрироватьИзмененияРеквизита(Знач РегистрироватьПоРеквизитам, Знач МетодРегистрации, Знач ТаблицаРегистрации, Знач ИмяТЧ, Знач РеквизитИмя)
	
	Если РегистрироватьПоРеквизитам Тогда
		
		НайденныеСтроки = ТаблицаРегистрации.НайтиСтроки(Новый Структура("ИмяТЧ,ИмяРеквизита", ИмяТЧ, РеквизитИмя));
		Если МетодРегистрации = Перечисления.внМетодыРегистрацииНовыхОбъектов.ФиксироватьВыбранныеОбъектыИНовые И НайденныеСтроки.Количество() > 0 Тогда
			Возврат Ложь;
		ИначеЕсли МетодРегистрации = Перечисления.внМетодыРегистрацииНовыхОбъектов.ФиксироватьТолькоВыбранныеОбъекты И НайденныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // РегистрироватьИзмененияРеквизита

// Процедура фиксирует текущее состояние объекта и записывает в справочник внКэшЖурналаРегистрации
Процедура РегистрацияИзмененияОбъекта(Знач Объект, НачальноеЗаполнение = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектМетаданные 	= Объект.Метаданные();
	ПолноеИмя			= ОбъектМетаданные.ПолноеИмя();
	
	// Объект конфигурации принадлежащий журналу (изменения в нем не надо регистрировать)
	Массив = внЖурналРегистрацииПовтИсп.МассивПредопределенныхНеРегистрируемыхОбъектов();
	Если Массив.Найти(ПолноеИмя) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Не фиксировать, если есть причины (запись)
	Если Объект.ДополнительныеСвойства.Свойство("внНеФиксироватьИзменение") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим необходимо ли регистрировать объект	полностью
	ТаблицаРегистрации	= внЖурналРегистрацииПовтИсп.ТаблицаРегистрацииОбъектовМетаданных(ПолноеИмя);
	МетодРегистрации	= внЖурналРегистрацииПовтИсп.глВНЗначениеПеременной("МетодРегистрацииОбъектовМетаданных");
	Если МетодРегистрации = Перечисления.внМетодыРегистрацииНовыхОбъектов.ФиксироватьТолькоВыбранныеОбъекты Тогда
		Если ТаблицаРегистрации.Количество() = 0 Тогда		
			// Объекта нет в списке регистрируемых, пропускаем
			Возврат;
		КонецЕсли;
		РегистрироватьПоРеквизитам	= ТаблицаРегистрации.Количество() > 1;
	Иначе
		Если ТаблицаРегистрации.Количество() = 1 Тогда
			// В настройках указано, что бы НЕ регистрировались изменения объекта
			Если ПустаяСтрока(ТаблицаРегистрации[0].ИмяТЧ) И ПустаяСтрока(ТаблицаРегистрации[0].ИмяРеквизита) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		РегистрироватьПоРеквизитам	= ТаблицаРегистрации.Количество() > 0;
	КонецЕсли;	
	
	ОбъектИмя 			= ОбъектМетаданные.Имя;
	ТипОбъекта			= ПолучитьТипОбъектаПоИмени(ПолноеИмя);
	РеквизитыСобытие	= -1;
	
	// Таблица, в которую будем записывать все реквизиты
	ИзмененияТЧ			= СоздатьИзмененияТЧ();
	
	Если ТипОбъекта = 4 Тогда
		
		// У константы нет реквизитов, поэтому сразу добавляем изменения
		// Добавляем
		НоваяЗаписьТаблицы					= ИзмененияТЧ.Добавить();
		НоваяЗаписьТаблицы.ИмяРеквизита		= ОбъектИмя;
		НоваяЗаписьТаблицы.Значение			= СистемноеПредставлениеОбъекта(Объект.Значение);
		НоваяЗаписьТаблицы.Представление	= СтандартноеПредставлениеОбъекта(Объект.Значение);
		НоваяЗаписьТаблицы.ТипРеквизита		= 0;
		
	ИначеЕсли ТипОбъекта = 10 Тогда
		
		// Для регистра сведений свой механизм		
		// Список реквизитов, измерений и ресурсов
		
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
		ТаблицаРеквизитов.Колонки.Добавить("ТипРеквизита");
		
		Для каждого Реквизит Из ОбъектМетаданные.СтандартныеРеквизиты Цикл
			
			// Пропускаем регистрацию изменений для не регистрируемых реквизитов
			Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, "Записи", Реквизит.Имя) Тогда
				Продолжить;
			КонецЕсли;
						
			НоваяСтрока 				= ТаблицаРеквизитов.Добавить();
			НоваяСтрока.ИмяРеквизита 	= Реквизит.Имя;
			НоваяСтрока.ТипРеквизита 	= 5;
		КонецЦикла;
		
		Для каждого Реквизит Из ОбъектМетаданные.Измерения Цикл
			
			// Пропускаем регистрацию изменений для не регистрируемых реквизитов			
			Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, "Записи", Реквизит.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 				= ТаблицаРеквизитов.Добавить();
			НоваяСтрока.ИмяРеквизита 	= Реквизит.Имя;
			НоваяСтрока.ТипРеквизита 	= 3;
		КонецЦикла;
		
		Для каждого Реквизит Из ОбъектМетаданные.Ресурсы Цикл
			
			// Пропускаем регистрацию изменений для не регистрируемых реквизитов
			Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, "Записи", Реквизит.Имя) Тогда
				Продолжить;
			КонецЕсли;
						
			НоваяСтрока 				= ТаблицаРеквизитов.Добавить();
			НоваяСтрока.ИмяРеквизита 	= Реквизит.Имя;
			НоваяСтрока.ТипРеквизита 	= 4;
		КонецЦикла;	
		
		Для каждого Реквизит Из ОбъектМетаданные.Реквизиты Цикл
			
			// Пропускаем регистрацию изменений для не регистрируемых реквизитов			
			Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, "Записи", Реквизит.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 				= ТаблицаРеквизитов.Добавить();
			НоваяСтрока.ИмяРеквизита 	= Реквизит.Имя;
			НоваяСтрока.ТипРеквизита 	= 1;
		КонецЦикла;		
		
		// То, что есть при записи
		Если Объект.Количество() > 0 Тогда
			
			// Записываемые данные
			НомерСтроки = 1; 
			Для каждого Запись Из Объект Цикл
				
				СтрокаХэша				= ПолноеИмя;
				МассивСтрок				= Новый Массив;
				Для Каждого Реквизит Из ТаблицаРеквизитов Цикл
					
					РеквизитИмяРеквизита				= Реквизит.ИмяРеквизита;
					РеквизитТипРеквизита				= Реквизит.ТипРеквизита;
										
					// Добавляем
					НоваяЗаписьТаблицы					= ИзмененияТЧ.Добавить();
					НоваяЗаписьТаблицы.ИмяТЧ			= "Записи";
					НоваяЗаписьТаблицы.ИмяРеквизита		= РеквизитИмяРеквизита;
					НоваяЗаписьТаблицы.НомерСтрокиТЧ	= НомерСтроки;						
					НоваяЗаписьТаблицы.Значение			= СистемноеПредставлениеОбъекта(Запись[РеквизитИмяРеквизита]);
					НоваяЗаписьТаблицы.Представление	= СтандартноеПредставлениеОбъекта(Запись[РеквизитИмяРеквизита]);
					НоваяЗаписьТаблицы.ТипРеквизита		= Реквизит.ТипРеквизита;
					
					// Идентификатор записи
					Если РеквизитТипРеквизита = 3 ИЛИ (РеквизитТипРеквизита = 5 И РеквизитИмяРеквизита = "Период") ИЛИ (РеквизитТипРеквизита = 5 И РеквизитИмяРеквизита = "Регистратор") Тогда
						СтрокаХэша				= СтрокаХэша + НоваяЗаписьТаблицы.Значение;
					КонецЕсли;
					МассивСтрок.Добавить(НоваяЗаписьТаблицы);
					
				КонецЦикла;
				
				ИдентификаторЗаписи						= Из_Число_В_16(ВычислитьХэш(СтрокаХэша));
				Для Каждого Элемент Из МассивСтрок Цикл
					Элемент.ИдентификаторЗаписи = ИдентификаторЗаписи;
				КонецЦикла;
								
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;                                   
			
		Иначе
			
			// Очистка по отбору
			Если Объект.ДополнительныеСвойства.Свойство("внРегистрСведенийТаблицаРегистра") Тогда
				НомерСтроки = 1;
				Для каждого Запись Из Объект.ДополнительныеСвойства.внРегистрСведенийТаблицаРегистра Цикл
					
					СтрокаХэша				= ПолноеИмя;
					МассивСтрок				= Новый Массив;					
					Для Каждого Реквизит Из ТаблицаРеквизитов Цикл
						
						РеквизитИмяРеквизита					= Реквизит.ИмяРеквизита;
						РеквизитТипРеквизита					= Реквизит.ТипРеквизита;
						
						// Добавляем
						НоваяЗаписьТаблицы					= ИзмененияТЧ.Добавить();
						НоваяЗаписьТаблицы.ИмяТЧ			= "Записи";
						НоваяЗаписьТаблицы.ИмяРеквизита		= Реквизит.ИмяРеквизита;
						НоваяЗаписьТаблицы.НомерСтрокиТЧ	= НомерСтроки;						
						НоваяЗаписьТаблицы.Значение			= СистемноеПредставлениеОбъекта(Запись[РеквизитИмяРеквизита]);
						НоваяЗаписьТаблицы.Представление	= СтандартноеПредставлениеОбъекта(Запись[РеквизитИмяРеквизита]);
						НоваяЗаписьТаблицы.ТипРеквизита		= РеквизитТипРеквизита;
						
						// Идентификатор записи
						Если РеквизитТипРеквизита = 3 ИЛИ (РеквизитТипРеквизита = 5 И РеквизитИмяРеквизита = "Период") ИЛИ (РеквизитТипРеквизита = 5 И РеквизитИмяРеквизита = "Регистратор") Тогда
							СтрокаХэша				= СтрокаХэша + НоваяЗаписьТаблицы.Значение;
						КонецЕсли;
						МассивСтрок.Добавить(НоваяЗаписьТаблицы);
						
					КонецЦикла;
					
					ИдентификаторЗаписи						= Из_Число_В_16(ВычислитьХэш(СтрокаХэша));
					Для Каждого Элемент Из МассивСтрок Цикл
						Элемент.ИдентификаторЗаписи = ИдентификаторЗаписи;
					КонецЦикла;
										
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;			
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = 1 ИЛИ ТипОбъекта = 2 Тогда
		
		// СПРАВОЧНИКИ И ДОКУМЕНТЫ
		
		// Проведение
		Если ТипОбъекта = 1 И Объект.ДополнительныеСвойства.Свойство("внПроведен") Тогда
			Если Объект.Проведен <> Объект.ДополнительныеСвойства.внПроведен Тогда
				РеквизитыСобытие = ?(Объект.Проведен, 3, 7);
			КонецЕсли;
		КонецЕсли;
		
		// Пометка удаления
		Если Объект.ДополнительныеСвойства.Свойство("внПометкаУдаления") Тогда
			Если Объект.ПометкаУдаления <> Объект.ДополнительныеСвойства.внПометкаУдаления Тогда
				РеквизитыСобытие = ?(Объект.ПометкаУдаления, 5, 6);
			КонецЕсли;
		КонецЕсли;
		
		ИзмененияТЧ = СериализоватьОбъект(Объект, ОбъектМетаданные, ТипОбъекта);
		
	Иначе
		
		// Добавляем все реквизиты объекта
		Реквизиты = ПолучитьРеквизитыОбъекта(ОбъектМетаданные, ТипОбъекта, Объект);
		Для каждого Реквизит Из Реквизиты Цикл
			
			РеквизитИмя = Реквизит.Значение;
			
			// Пропускаем регистрацию изменений для не регистрируемых реквизитов
			Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, "", РеквизитИмя) Тогда
				Продолжить;
			КонецЕсли;
						
			// Добавляем
			Попытка
				ЗначениеРеквизита					= СистемноеПредставлениеОбъекта(Объект[РеквизитИмя]);
			Исключение
				Продолжить;
			КонецПопытки;
			НоваяЗаписьТаблицы						= ИзмененияТЧ.Добавить();
			НоваяЗаписьТаблицы.ИмяРеквизита			= РеквизитИмя;
			НоваяЗаписьТаблицы.Значение				= ЗначениеРеквизита;
			НоваяЗаписьТаблицы.Представление		= СтандартноеПредставлениеОбъекта(Объект[РеквизитИмя]);
			НоваяЗаписьТаблицы.ТипРеквизита			= 0;
			
		КонецЦикла;
		
		// Проведение
		Если ТипОбъекта = 1 И Объект.ДополнительныеСвойства.Свойство("внПроведен") Тогда
			Если Объект.Проведен <> Объект.ДополнительныеСвойства.внПроведен Тогда
				РеквизитыСобытие = ?(Объект.Проведен, 3, 7);
			КонецЕсли;
		КонецЕсли;
		
		// Пометка удаления
		Если Объект.ДополнительныеСвойства.Свойство("внПометкаУдаления") Тогда
			Если Объект.ПометкаУдаления <> Объект.ДополнительныеСвойства.внПометкаУдаления Тогда
				РеквизитыСобытие = ?(Объект.ПометкаУдаления, 5, 6);
			КонецЕсли;
		КонецЕсли;
		
		//=========================================
		// Для табличных частей                  //
		//========================================
		// По каждой ТЧ
		
		Для Каждого Таблица Из ОбъектМетаданные.ТабличныеЧасти Цикл
			
			ТаблицаРеквизиты	= Таблица.Реквизиты;
			ТаблицаИмя			= Таблица.Имя;
			
			// Пропускаем регистрацию изменений для не регистрируемых ТЧ
			Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, ТаблицаИмя, "") Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаНовая		= Объект[ТаблицаИмя];
			// По каждому реквизиту в строке ТЧ
			Для Каждого Реквизит Из ТаблицаРеквизиты Цикл
				
				РеквизитИмя = Реквизит.Имя;
				
				// Пропускаем регистрацию изменений для не регистрируемых реквизитов
				Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, ТаблицаИмя, РеквизитИмя) Тогда
					Продолжить;
				КонецЕсли;
				
				// По каждой строке ТЧ
				Для Каждого Строки Из ТаблицаНовая Цикл
					
					// Добавляем
					НоваяЗаписьТаблицы					= ИзмененияТЧ.Добавить();
					НоваяЗаписьТаблицы.ИмяРеквизита		= РеквизитИмя;
					НоваяЗаписьТаблицы.ИмяТЧ			= ТаблицаИмя;
					НоваяЗаписьТаблицы.НомерСтрокиТЧ	= Строки.НомерСтроки;
					НоваяЗаписьТаблицы.Значение			= СистемноеПредставлениеОбъекта(Строки[РеквизитИмя]);
					НоваяЗаписьТаблицы.Представление	= СтандартноеПредставлениеОбъекта(Строки[РеквизитИмя]);
					НоваяЗаписьТаблицы.ТипРеквизита		= 2;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		//=========================================
		// Для предопределенных табличных частей //
		//=========================================
		Если ТипОбъекта = 5 Тогда
			
			// Планы счетов
			// Признаки учета
			Для Каждого Признак Из ОбъектМетаданные.ПризнакиУчета Цикл
				
				Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, "ПризнакиУчета", Признак.Имя) Тогда
					Продолжить;
				КонецЕсли;
				
				// Добавляем
				НоваяЗаписьТаблицы						= ИзмененияТЧ.Добавить();
				НоваяЗаписьТаблицы.ИмяРеквизита			= Признак.Имя;
				НоваяЗаписьТаблицы.Значение				= СистемноеПредставлениеОбъекта(Объект[Признак.Имя]);
				НоваяЗаписьТаблицы.Представление		= СтандартноеПредставлениеОбъекта(Объект[Признак.Имя]);
				НоваяЗаписьТаблицы.ТипРеквизита			= 1;
				
			КонецЦикла;
			
			Массив = Новый Массив;
			Массив.Добавить("ВидСубконто");
			Массив.Добавить("ТолькоОбороты");
			Для Каждого Признак Из ОбъектМетаданные.ПризнакиУчетаСубконто Цикл
				Массив.Добавить(Признак.Имя);
			КонецЦикла;
			
			// Признаки учета субконто
			Для Каждого Элемент Из Массив Цикл
				
				Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, "ВидыСубконто", Элемент) Тогда
					Продолжить;
				КонецЕсли;
				
				НомерСтроки = 1;
				Для Каждого Строки Из Объект.ВидыСубконто Цикл
					
					// Добавляем
					НоваяЗаписьТаблицы						= ИзмененияТЧ.Добавить();
					НоваяЗаписьТаблицы.ИмяРеквизита			= Элемент;
					НоваяЗаписьТаблицы.ИмяТЧ				= "ВидыСубконто";
					НоваяЗаписьТаблицы.НомерСтрокиТЧ		= НомерСтроки;
					НоваяЗаписьТаблицы.Значение				= СистемноеПредставлениеОбъекта(Строки[Элемент]);
					НоваяЗаписьТаблицы.Представление		= СтандартноеПредставлениеОбъекта(Строки[Элемент]);
					НоваяЗаписьТаблицы.ТипРеквизита			= 1;
					
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ТипОбъекта = 6 Тогда
			
			// План видов расчета			
			Массив = Новый Массив;
			Массив.Добавить("БазовыеВидыРасчета");
			Массив.Добавить("ВедущиеВидыРасчета");
			Массив.Добавить("ВытесняющиеВидыРасчета");
			
			Для каждого ИмяВидаРасчета Из Массив Цикл			
				
				Попытка
					// Пропускаем ТЧ
					Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, ИмяВидаРасчета, "") Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого Строки Из Объект[ИмяВидаРасчета] Цикл
						// Пропускаем реквизиты в ТЧ
						Если НЕ РегистрироватьИзмененияРеквизита(РегистрироватьПоРеквизитам, МетодРегистрации, ТаблицаРегистрации, ИмяВидаРасчета, "ВидРасчета") Тогда
							Продолжить;
						КонецЕсли;
						
						ВидРасчета								= Строки.ВидРасчета;
						
						// Добавляем
						НоваяЗаписьТаблицы						= ИзмененияТЧ.Добавить();
						НоваяЗаписьТаблицы.ИмяРеквизита			= "ВидРасчета";
						НоваяЗаписьТаблицы.ИмяТЧ				= ИмяВидаРасчета;
						НоваяЗаписьТаблицы.НомерСтрокиТЧ		= Строки.НомерСтроки;
						НоваяЗаписьТаблицы.Значение				= СистемноеПредставлениеОбъекта(ВидРасчета);
						НоваяЗаписьТаблицы.Представление		= СтандартноеПредставлениеОбъекта(ВидРасчета);
						НоваяЗаписьТаблицы.ТипРеквизита			= 2;
						
					КонецЦикла;						
					
				Исключение
				КонецПопытки;
				
			КонецЦикла;			
		КонецЕсли;		
	КонецЕсли;	

	//=========================================
	//  ЗАПИСЬ В КЭШ ПОДГОТОВЛЕННОЙ ТАБЛИЦЫ  //
	//=========================================
	Событие					= 0;
	ПредставлениеОбъекта	= "";
	ИдентификаторОбъекта	= "";
	Если ТипОбъекта = 4 Тогда // Константа
		Если НачальноеЗаполнение Тогда
			Событие			= 0; // только изменение
		Иначе
			Событие			= 2; // только изменение
		КонецЕсли;
		ПредставлениеОбъекта= СтандартноеПредставлениеОбъекта(Объект.Значение);
		ИдентификаторОбъекта= ПолноеИмя;
	ИначеЕсли ТипОбъекта = 10 Тогда // Регистр сведений
		Если Объект.Количество() > 0 Тогда
			Если НачальноеЗаполнение Тогда
				Событие		= 0; // только изменение
			Иначе
				Событие		= 8; // сохранение
			КонецЕсли;
		Иначе
			Событие			= 4; // физическое удаление
		КонецЕсли;			
		ПредставлениеОбъекта= "";
		СтрокаХэша			= ПолноеИмя;
		Для каждого ЭлементОтбора Из Объект.Отбор Цикл
			Если НЕ ЭлементОтбора.Использование Тогда
				Продолжить;				
			КонецЕсли;
			ЭлементОтбораЗначение	= СтандартноеПредставлениеОбъекта(ЭлементОтбора.Значение);
			Если ПустаяСтрока(ЭлементОтбораЗначение) Тогда
				ЭлементОтбораЗначение = "<>";
			КонецЕсли;
			ПредставлениеОбъекта	= ПредставлениеОбъекта + ЭлементОтбора.Имя + " = " + ЭлементОтбораЗначение + "; ";			
			СтрокаХэша				= СтрокаХэша + ЭлементОтбора.Имя + СистемноеПредставлениеОбъекта(ЭлементОтбора.Значение);
		КонецЦикла;
		ПредставлениеОбъекта = СокрЛП(ПредставлениеОбъекта);
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда				
			ПредставлениеОбъекта= "<Запись набора регистра сведений>";
		КонецЕсли;
		ИдентификаторОбъекта= Из_Число_В_16(ВычислитьХэш(СтрокаХэша));		
	Иначе
		ИдентификаторОбъекта	= СистемноеПредставлениеОбъекта(Объект.Ссылка);
		ПредставлениеОбъекта	= СтандартноеПредставлениеОбъекта(Объект);
		Если НачальноеЗаполнение Тогда
			Событие = 0; // начальное заполнение
		ИначеЕсли РеквизитыСобытие = -1 Тогда
			Событие = 2; // изменение
		Иначе
			Событие = РеквизитыСобытие;
		КонецЕсли;		
	КонецЕсли;	
	
	// Записываем
	внЖурналРегистрацииСервер.РегистрацияИзмененияОбъекта(ИзмененияТЧ, ИдентификаторОбъекта, ПолучитьУзелРИБ(Объект), ПредставлениеОбъекта, ПолноеИмя, ТипОбъекта, Событие);
	
КонецПроцедуры // РегистрацияИзмененияОбъекта
