
Функция ЗапаковатьСтроку(вхДанные)
	Возврат DataExchangeПовтИсп.ПолучитьУпаковщик().PackString(вхДанные);
КонецФункции

Функция РаспаковатьСтроку(вхДанные)
	Возврат DataExchangeПовтИсп.ПолучитьУпаковщик().UnpackString(вхДанные);
КонецФункции

Функция СериализоватьСтруктуру(вхДанные)
	
	лЗапись = Новый ЗаписьXML;
	лЗапись.УстановитьСтроку("");
	лЗапись.ЗаписатьНачалоЭлемента("Структура");
	Для Каждого лЭлементСтруктуры Из вхДанные цикл
		лЗапись.ЗаписатьНачалоЭлемента(лЭлементСтруктуры.Ключ);
		лЗапись.ЗаписатьБезОбработки(лЭлементСтруктуры.Значение);
		лЗапись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	лЗапись.ЗаписатьКонецЭлемента();
	Возврат лЗапись.Закрыть();	
	
КонецФункции

Функция ДесериализоватьСтруктуру(вхДанные)
	
	лИнициализирован = Ложь;
	лРезультат = Новый Структура;
	лЧтение = Новый ЧтениеXML;
	лЧтение.УстановитьСтроку(вхДанные);
	Пока лЧтение.Прочитать() цикл
		Если (лЧтение.ТипУзла = ТипУзлаXML.НачалоЭлемента)
			И (лЧтение.Имя = "Структура") тогда
			лИнициализирован = Истина;
		ИначеЕсли (лЧтение.ТипУзла = ТипУзлаXML.КонецЭлемента)
			И (лЧтение.Имя = "Структура") И лИнициализирован тогда
			Прервать;
		ИначеЕсли (лЧтение.ТипУзла = ТипУзлаXML.НачалоЭлемента)
			И лИнициализирован тогда
			лИмяЭлемента = лЧтение.Имя;
			лЗначениеЭлемента = "";
			Если лЧтение.Прочитать() тогда
				лЗначениеЭлемента = лЧтение.Значение;
			КонецЕсли;
			лРезультат.Вставить(лИмяЭлемента, лЗначениеЭлемента);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат лРезультат;	
	
КонецФункции

Функция ИмяТипаОбъектаМетаданных(вхОбъектМетаданных)
	Возврат	ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(вхОбъектМетаданных) + "." + вхОбъектМетаданных.Имя;
КонецФункции

Процедура ПодготовитьФайлПравилВыгрузки(вхИмяФайлаПравилаВыгрузки)
	
	//Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() тогда
		Константы.ПравилаОбменаПартКом77_83.Получить().Получить().Записать(вхИмяФайлаПравилаВыгрузки);
	//Иначе
	//	КопироватьФайл("\\10.0.2.180\Exchange\1С\RULES83_77.xml", вхИмяФайлаПравилаВыгрузки);	
	//КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьДанныеОбмена(вхВходящиеДанные, выхИсходящиеДанные)
	//Если Константы.ВключитьОтладкуОбмена_1с7_1с8.Получить() тогда
	//	тестТекст = Новый ТекстовыйДокумент;
	//	тестТекст.ДобавитьСтроку(вхВходящиеДанные);
	//	имяФайла = "C:\123\ФайлОбмена_" + Формат(ТекущаяДата(), "ДФ=ddMMyyyy") + Формат(ТекущаяДата(), "ДЛФ=T");
	//	тестТекст.Записать(ИмяФайла);
	//	
	//КонецЕсли;
	
	Результат = Ложь;
	
	лИмяФайлаДанных = ПолучитьИмяВременногоФайла();
	лИмяФайлаДанных = СтрЗаменить(лИмяФайлаДанных, "v8_", "io_v8_");
	лИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла();
	лИмяФайлаПротоколаОбмена = СтрЗаменить(лИмяФайлаПротоколаОбмена, "v8_", "nm_v8_");
	
	DataExchangeПовтИсп.ПолучитьУпаковщик().UnpackStringToFile(
	вхВходящиеДанные, лИмяФайлаДанных);
	
	лОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	лОбработкаОбъект.РежимОбмена = "Загрузка";
	лОбработкаОбъект.ИмяФайлаОбмена = лИмяФайлаДанных;
	лОбработкаОбъект.ИмяФайлаПротоколаОбмена = лИмяФайлаПротоколаОбмена;
	лОбработкаОбъект.ВыводВПротоколИнформационныхСообщений = Ложь;
	лОбработкаОбъект.ВыводВПротоколСообщенийОбОшибках = Истина;
	лОбработкаОбъект.СнятьОграничениеПоДатеЗапрета = Истина;
	лОбработкаОбъект.ВыполнитьЗагрузку();
	
	выхИсходящиеДанные = Новый Структура;
	// протокол загрузки
	лТекст = Новый ТекстовыйДокумент;
	лТекст.Прочитать(лИмяФайлаПротоколаОбмена, "windows-1251");
	лТекстПротоколаОбмена = лТекст.ПолучитьТекст();
	лТекст = Неопределено;
	выхИсходящиеДанные.Вставить("ПротоколОбмена", ЗапаковатьСтроку(лТекстПротоколаОбмена));
	Результат = НЕ лОбработкаОбъект.ФлагОшибки;
	
	Если НЕ Константы.ВключитьОтладкуОбмена_1с7_1с8.Получить() Тогда
		УдалитьФайлы(лИмяФайлаПротоколаОбмена);
		УдалитьФайлы(лИмяФайлаДанных);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЗаписатьДанныеОбмена(выхИсходящиеДанные)
	
	Результат = Ложь;
	
	лИмяФайлаДанных = ПолучитьИмяВременногоФайла();
	лИмяФайлаДанных = СтрЗаменить(лИмяФайлаДанных, "v8_", "fo_v8_");
	лИмяФайлаПравилаВыгрузки = ПолучитьИмяВременногоФайла();
	лИмяФайлаПравилаВыгрузки = СтрЗаменить(лИмяФайлаПравилаВыгрузки, "v8_", "er_v8_");
	лИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла();
	лИмяФайлаПротоколаОбмена = СтрЗаменить(лИмяФайлаПротоколаОбмена, "v8_", "yh_v8_");
	
	ПодготовитьФайлПравилВыгрузки(лИмяФайлаПравилаВыгрузки);
	
	лОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	лОбработкаОбъект.РежимОбмена = "Выгрузка";
	лОбработкаОбъект.ИмяФайлаПравилОбмена = лИмяФайлаПравилаВыгрузки;
	лОбработкаОбъект.ИмяФайлаОбмена = лИмяФайлаДанных;
	лОбработкаОбъект.ИмяФайлаПротоколаОбмена = лИмяФайлаПротоколаОбмена;
	
	лЗаписьХМЛ = Новый ЗаписьXML;
	лЗаписьХМЛ.УстановитьСтроку("utf-8");
	лЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	лЗаписьСообщения.НачатьЗапись(лЗаписьХМЛ, ПланыОбмена.ОбменПартКом77_83.НайтиПоКоду("001"));
	Попытка
		
		лОбработкаОбъект.ЗагрузитьПравилаОбмена();
		// параметры
		Для Каждого лСтрокаТаблицаНастройкиПараметров Из лОбработкаОбъект.ТаблицаНастройкиПараметров цикл
			Если лСтрокаТаблицаНастройкиПараметров.Имя = "РазностнаяВыгрузка" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = 1;
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "Отправитель" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = Число(ПланыОбмена.ОбменПартКом77_83.ЭтотУзел().Код);
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "Получатель" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = 1;
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "НомерСообщения" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = лЗаписьСообщения.НомерСообщения;
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "НомерПринятого" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = лЗаписьСообщения.НомерПринятого;
			КонецЕсли;
		КонецЦикла;
		
		лОбработкаОбъект.ВыполнитьВыгрузку();		
		лЗаписьСообщения.ЗакончитьЗапись();
		Результат = НЕ лОбработкаОбъект.ФлагОшибки;
		
	Исключение
		Результат = Ложь;
		лЗаписьСообщения.ПрерватьЗапись();
	КонецПопытки;	
	
	выхИсходящиеДанные = DataExchangeПовтИсп.ПолучитьУпаковщик().PackFileToString(лИмяФайлаДанных);
	
	УдалитьФайлы(лИмяФайлаПротоколаОбмена);
	УдалитьФайлы(лИмяФайлаДанных);
	УдалитьФайлы(лИмяФайлаПравилаВыгрузки);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСообщениеОбмена_ОбменПартКом83_Сайт(вхИдентификаторУзлаОбмена, вхНомерПринятого)
	Если Константы.ВключитьРегистрациюDataExchageModule.Получить() Тогда
		ЗаписьЖурналаРегистрации("Обмен данными.Выгрузка." + Метаданные.ПланыОбмена.ОбменПартКом83_Сайт.Синоним,
				УровеньЖурналаРегистрации.Ошибка,,,"Номер сообщения: "+вхНомерПринятого);
	КонецЕсли;
	
	лПолучатель = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(
	Метаданные.ПланыОбмена.ОбменПартКом83_Сайт, вхИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(лПолучатель) тогда
		ВызватьИсключение "Неправильное значение параметра ""Sender"".";	
	КонецЕсли;
	лНомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(лПолучатель, "НомерОтправленного");
	
	Если (вхНомерПринятого > лНомерОтправленного) тогда
		ВызватьИсключение "Неправильное значение параметра ""ReceivedNo"": сообщение с таким номером не отправлялось.";
	КонецЕсли;
	
	// фиксируем номер принятого
	ПланыОбмена.УдалитьРегистрациюИзменений(лПолучатель, вхНомерПринятого);
	// возвращаем сообщение обмена
	Возврат ПланыОбмена.ОбменПартКом83_Сайт.ВыгрузитьСообщениеОбмена(вхИдентификаторУзлаОбмена, вхНомерПринятого);
		
КонецФункции

Функция ПолучитьСообщениеОбмена_ОбменПартКом83_Сайт_остатки_на_складах(вхИдентификаторУзлаОбмена, вхНомерПринятого)
	Если Константы.ВключитьРегистрациюDataExchageModule.Получить() Тогда
		ЗаписьЖурналаРегистрации("Обмен данными.Выгрузка." + Метаданные.ПланыОбмена.ОбменПартКом83_Сайт_остатки_на_складах.Синоним,
				УровеньЖурналаРегистрации.Ошибка,,,"Номер сообщения: "+вхНомерПринятого);
	КонецЕсли;
			
	лПолучатель = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(
	Метаданные.ПланыОбмена.ОбменПартКом83_Сайт_остатки_на_складах, вхИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(лПолучатель) тогда
		ВызватьИсключение "Неправильное значение параметра ""Sender"".";	
	КонецЕсли;
	лНомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(лПолучатель, "НомерОтправленного");
	
	Если (вхНомерПринятого > лНомерОтправленного) тогда
		ВызватьИсключение "Неправильное значение параметра ""ReceivedNo"": сообщение с таким номером не отправлялось.";
	КонецЕсли;
	
	Возврат ПланыОбмена.ОбменПартКом83_Сайт_остатки_на_складах.ВыгрузитьСообщениеОбмена_ОстаткиНоменклатуры(вхИдентификаторУзлаОбмена,  вхНомерПринятого);
	
КонецФункции

Функция ПолучитьСообщениеОбмена_ОбменПартКом83_Сайт_данные_покупателей(вхИдентификаторУзлаОбмена, вхНомерПринятого, вхТолькоИзменения )
	Если Константы.ВключитьРегистрациюDataExchageModule.Получить() Тогда
		ЗаписьЖурналаРегистрации("Обмен данными.Выгрузка." + Метаданные.ПланыОбмена.ОбменПартКом83_Сайт_данные_покупателей.Синоним,
				УровеньЖурналаРегистрации.Ошибка,,,"Номер сообщения: "+вхНомерПринятого);
	КонецЕсли;
			
	лПолучатель = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(
	Метаданные.ПланыОбмена.ОбменПартКом83_Сайт_данные_покупателей, вхИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(лПолучатель) тогда
		ВызватьИсключение "Неправильное значение параметра ""Sender"".";	
	КонецЕсли;
	лНомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(лПолучатель, "НомерОтправленного");
	
	Если (вхНомерПринятого > лНомерОтправленного) тогда
		ВызватьИсключение "Неправильное значение параметра ""ReceivedNo"": сообщение с таким номером не отправлялось.";
	КонецЕсли;
	
	Возврат ПланыОбмена.ОбменПартКом83_Сайт_данные_покупателей.ВыгрузитьСообщениеОбмена_Взаиморасчеты(вхИдентификаторУзлаОбмена, вхНомерПринятого, вхТолькоИзменения);
	
КонецФункции

Функция ПолучитьСообщениеОбмена_ОбменПартКом83_ОкноПоставщика(вхИдентификаторУзлаОбмена, вхНомерПринятого)
	Если Константы.ВключитьРегистрациюDataExchageModule.Получить() Тогда
		ЗаписьЖурналаРегистрации("Обмен данными.Выгрузка." + Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщика.Синоним,
				УровеньЖурналаРегистрации.Ошибка,,,"Номер сообщения: "+вхНомерПринятого);
	КонецЕсли;
	
	лПолучатель = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(
	Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщика, вхИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(лПолучатель) тогда
		ВызватьИсключение "Неправильное значение параметра ""Sender"".";	
	КонецЕсли;
	лНомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(лПолучатель, "НомерОтправленного");
	
	Если (вхНомерПринятого > лНомерОтправленного) тогда
		ВызватьИсключение "Неправильное значение параметра ""ReceivedNo"": сообщение с таким номером не отправлялось.";
	КонецЕсли;
	
	// фиксируем номер принятого
	ПланыОбмена.УдалитьРегистрациюИзменений(лПолучатель, вхНомерПринятого);
	// возвращаем сообщение обмена
	Возврат ПланыОбмена.ОбменПартКом83_ОкноПоставщика.ВыгрузитьСообщениеОбмена(вхИдентификаторУзлаОбмена, вхНомерПринятого);
		
КонецФункции

Функция ПолучитьСообщениеОбмена_ОбменПартКом77_83(вхИдентификаторУзлаОбмена, вхНомерПринятого)
	Результат = "";
	
	// фиксируем номер принятого
	лПолучатель = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(
	Метаданные.ПланыОбмена.ОбменПартКом77_83, вхИдентификаторУзлаОбмена);
	
	Если НЕ ЗначениеЗаполнено(лПолучатель) тогда
		ВызватьИсключение "Неправильное значение параметра ""Sender"".";	
	КонецЕсли;
	лНомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(лПолучатель, "НомерОтправленного");
	
	Если (вхНомерПринятого > лНомерОтправленного) тогда
		ВызватьИсключение "Неправильное значение параметра ""ReceivedNo"": сообщение с таким номером не отправлялось.";
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(лПолучатель, вхНомерПринятого);
	
	// формируем сообщение обмена
	лИмяФайлаДанных = ПолучитьИмяВременногоФайла();
	лИмяФайлаДанных = СтрЗаменить(лИмяФайлаДанных, "v8_", "dd_v8_");
	лИмяФайлаПравилаВыгрузки = ПолучитьИмяВременногоФайла();
	лИмяФайлаПравилаВыгрузки = СтрЗаменить(лИмяФайлаПравилаВыгрузки, "v8_", "pr_v8_");
	лИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла();
	лИмяФайлаПротоколаОбмена = СтрЗаменить(лИмяФайлаПротоколаОбмена, "v8_", "ob_v8_");
	
	ПодготовитьФайлПравилВыгрузки(лИмяФайлаПравилаВыгрузки);
	
	лОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	лОбработкаОбъект.РежимОбмена = "Выгрузка";
	лОбработкаОбъект.ИмяФайлаПравилОбмена = лИмяФайлаПравилаВыгрузки;
	лОбработкаОбъект.ИмяФайлаОбмена = лИмяФайлаДанных;
	лОбработкаОбъект.ИмяФайлаПротоколаОбмена = лИмяФайлаПротоколаОбмена;
	
	лЗаписьХМЛ = Новый ЗаписьXML;
	лЗаписьХМЛ.УстановитьСтроку("utf-8");
	лЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	лЗаписьСообщения.НачатьЗапись(лЗаписьХМЛ, ПланыОбмена.ОбменПартКом77_83.НайтиПоКоду("001"));
	Попытка
		
		лОбработкаОбъект.ЗагрузитьПравилаОбмена();
		// параметры
		Для Каждого лСтрокаТаблицаНастройкиПараметров Из лОбработкаОбъект.ТаблицаНастройкиПараметров цикл
			Если лСтрокаТаблицаНастройкиПараметров.Имя = "РазностнаяВыгрузка" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = 1;
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "Отправитель" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = Число(ПланыОбмена.ОбменПартКом77_83.ЭтотУзел().Код);
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "Получатель" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = 1;
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "НомерСообщения" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = лЗаписьСообщения.НомерСообщения;
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "НомерПринятого" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = лЗаписьСообщения.НомерПринятого;
			КонецЕсли;
		КонецЦикла;
		
		лОбработкаОбъект.ВыполнитьВыгрузку();		
		лЗаписьСообщения.ЗакончитьЗапись();
		Если НЕ лОбработкаОбъект.ФлагОшибки тогда
			Результат = DataExchangeПовтИсп.ПолучитьУпаковщик().PackFileToString(лИмяФайлаДанных);
		Иначе
			// вывод содержимого протокола обмена в журнал регистрации (временно)
			лТекст = Новый ТекстовыйДокумент;
			лТекст.Прочитать(лИмяФайлаПротоколаОбмена, "windows-1251");
			ЗаписьЖурналаРегистрации("Обмен данными.Выгрузка." + Метаданные.ПланыОбмена.ОбменПартКом77_83.Синоним,
			УровеньЖурналаРегистрации.Ошибка,Метаданные.ПланыОбмена.ОбменПартКом77_83, , лТекст.ПолучитьТекст());
			лТекст = Неопределено;
		КонецЕсли;
				
	Исключение
		лЗаписьСообщения.ПрерватьЗапись();
		Результат = "";
		ВызватьИсключение;
	КонецПопытки;	
	
	УдалитьФайлы(лИмяФайлаПротоколаОбмена);
	УдалитьФайлы(лИмяФайлаДанных);
	УдалитьФайлы(лИмяФайлаПравилаВыгрузки);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСообщениеОбмена_ОбменПартКом77_83_изм(вхИдентификаторУзлаОбмена, вхНомерПринятого)
	Результат = "";
	
	// фиксируем номер принятого
	лПолучатель = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(
	Метаданные.ПланыОбмена.ОбменПартКом77_83, вхИдентификаторУзлаОбмена);
	
	Попытка
	
		Если НЕ ЗначениеЗаполнено(лПолучатель) тогда
			ВызватьИсключение "Неправильное значение параметра ""Sender"".";	
		КонецЕсли;
		лНомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(лПолучатель, "НомерОтправленного");
	
		Если (вхНомерПринятого > лНомерОтправленного) тогда
			ВызватьИсключение "Неправильное значение параметра ""ReceivedNo"": сообщение с таким номером не отправлялось.";
		КонецЕсли;
	
		ПланыОбмена.УдалитьРегистрациюИзменений(лПолучатель, вхНомерПринятого);
	
		// формируем сообщение обмена
		лИмяФайлаДанных = ПолучитьИмяВременногоФайла();
		лИмяФайлаДанных = СтрЗаменить(лИмяФайлаДанных, "v8_", "dd_v8_");
		лИмяФайлаПравилаВыгрузки = ПолучитьИмяВременногоФайла();
		лИмяФайлаПравилаВыгрузки = СтрЗаменить(лИмяФайлаПравилаВыгрузки, "v8_", "pr_v8_");
		лИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла();
		лИмяФайлаПротоколаОбмена = СтрЗаменить(лИмяФайлаПротоколаОбмена, "v8_", "ob_v8_");
	
		ПодготовитьФайлПравилВыгрузки(лИмяФайлаПравилаВыгрузки);
	
		лОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
		лОбработкаОбъект.РежимОбмена = "Выгрузка";
		лОбработкаОбъект.ИмяФайлаПравилОбмена = лИмяФайлаПравилаВыгрузки;
		лОбработкаОбъект.ИмяФайлаОбмена = лИмяФайлаДанных;
		лОбработкаОбъект.ИмяФайлаПротоколаОбмена = лИмяФайлаПротоколаОбмена;
	
		лЗаписьХМЛ = Новый ЗаписьXML;
		лЗаписьХМЛ.УстановитьСтроку("utf-8");
		лЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		лЗаписьСообщения.НачатьЗапись(лЗаписьХМЛ, ПланыОбмена.ОбменПартКом77_83.НайтиПоКоду("001"));
	
		
		лОбработкаОбъект.ЗагрузитьПравилаОбмена();
		// параметры
		Для Каждого лСтрокаТаблицаНастройкиПараметров Из лОбработкаОбъект.ТаблицаНастройкиПараметров цикл
			Если лСтрокаТаблицаНастройкиПараметров.Имя = "РазностнаяВыгрузка" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = 1;
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "Отправитель" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = Число(ПланыОбмена.ОбменПартКом77_83.ЭтотУзел().Код);
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "Получатель" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = 1;
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "НомерСообщения" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = лЗаписьСообщения.НомерСообщения;
			ИначеЕсли лСтрокаТаблицаНастройкиПараметров.Имя = "НомерПринятого" тогда
				лСтрокаТаблицаНастройкиПараметров.Значение = лЗаписьСообщения.НомерПринятого;
			КонецЕсли;
		КонецЦикла;
		
		лОбработкаОбъект.ВыполнитьВыгрузку();		
		лЗаписьСообщения.ЗакончитьЗапись();
		Если НЕ лОбработкаОбъект.ФлагОшибки тогда
			Результат = DataExchangeПовтИсп.ПолучитьУпаковщик().PackFileToString(лИмяФайлаДанных);
			
		Иначе
			// вывод содержимого протокола обмена в журнал регистрации (временно)
			лТекст = Новый ТекстовыйДокумент;
			лТекст.Прочитать(лИмяФайлаПротоколаОбмена, "windows-1251");
			ЗаписьЖурналаРегистрации("Обмен данными.Выгрузка." + Метаданные.ПланыОбмена.ОбменПартКом77_83.Синоним,
			УровеньЖурналаРегистрации.Ошибка,Метаданные.ПланыОбмена.ОбменПартКом77_83, , лТекст.ПолучитьТекст());
			лТекст = Неопределено;
			ВызватьИсключение лТекст.ПолучитьТекст();
			
		КонецЕсли;
				
	Исключение
		лЗаписьСообщения.ПрерватьЗапись();
		Результат = "";
		ЗаписьЖурналаРегистрации("Обмен данными.Выгрузка." + Метаданные.ПланыОбмена.ОбменПартКом77_83.Синоним,
			УровеньЖурналаРегистрации.Ошибка,Метаданные.ПланыОбмена.ОбменПартКом77_83, , ОписаниеОшибки());
		УдалитьФайлы(лИмяФайлаПротоколаОбмена);
		УдалитьФайлы(лИмяФайлаДанных);
		УдалитьФайлы(лИмяФайлаПравилаВыгрузки);
		
	КонецПопытки;	
	
	УдалитьФайлы(лИмяФайлаПротоколаОбмена);
	УдалитьФайлы(лИмяФайлаДанных);
	УдалитьФайлы(лИмяФайлаПравилаВыгрузки);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСообщениеОбмена_ОбменПартКом83_TopLog(вхИдентификаторУзлаОбмена, вхНомерПринятого)
		
	лПолучатель = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(
	Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, вхИдентификаторУзлаОбмена);
	Если НЕ ЗначениеЗаполнено(лПолучатель) тогда
		ВызватьИсключение "Неправильное значение параметра ""Sender"".";	
	КонецЕсли;
	
	лНомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(лПолучатель, "НомерОтправленного");
	
	Если (вхНомерПринятого > лНомерОтправленного) тогда
		ВызватьИсключение "Неправильное значение параметра ""ReceivedNo"": сообщение с таким номером не отправлялось.";
	КонецЕсли;
	
	//Пока не удаляем
	// фиксируем номер принятого
	ПланыОбмена.УдалитьРегистрациюИзменений(лПолучатель, вхНомерПринятого);
	// возвращаем сообщение обмена
	Возврат ПланыОбмена.ОбменПартКом83_TopLog.ВыгрузитьСообщениеОбмена(вхИдентификаторУзлаОбмена);
		
КонецФункции

Функция ПолучитьСообщениеОбмена_ОбменПартКом83_VMI(Sender, ReceivedNo)
	
	Если Константы.ВключитьРегистрациюDataExchageModule.Получить() Тогда
		ЗаписьЖурналаРегистрации("Обмен данными.Выгрузка." + Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщикаПрайсыVMI.Синоним,
				УровеньЖурналаРегистрации.Информация,,,"Номер принятого сообщения: " + ReceivedNo);
	КонецЕсли;
	
	Получатель = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(Метаданные.ПланыОбмена.ОбменПартКом83_ОкноПоставщикаПрайсыVMI, Sender);
	Если НЕ ЗначениеЗаполнено(Получатель) тогда
		ВызватьИсключение "Неправильное значение параметра ""Sender"".";	
	КонецЕсли;
	НомерОтправленного = Получатель.НомерОтправленного;
	
	Если ReceivedNo > НомерОтправленного тогда
		ВызватьИсключение "Неправильное значение параметра ""ReceivedNo"": сообщение с таким номером не отправлялось.";
	КонецЕсли;
	
	Возврат ПланыОбмена.ОбменПартКом83_ОкноПоставщикаПрайсыVMI.ВыгрузитьСообщениеОбмена(Sender, ReceivedNo);
	
КонецФункции
//ЭКСПОРТНЫЕ МЕТОДЫ, ВЫЗЫВАЕМЫЕ ИЗ МОДУЛЯ ВЕБСЕРВИСА

Функция DoDataExchange(InData, OutData) Экспорт
	
	лДанныеЗагрузки = Неопределено;
	Результат = ПрочитатьДанныеОбмена(InData, лДанныеЗагрузки);
	Если Результат тогда
		лДанныеВыгрузки = Неопределено;
		Если ЗаписатьДанныеОбмена(лДанныеВыгрузки) тогда
			OutData = лДанныеВыгрузки;
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция GetExchangeMessage(ExchangePlan, Sender, ReceivedNo) Экспорт
	
	Если СокрЛП(ВРег(ExchangePlan)) = ВРег("ОбменПартКом83_Сайт") тогда
		Возврат ПолучитьСообщениеОбмена_ОбменПартКом83_Сайт(Sender, ReceivedNo);
	ИначеЕсли Найти(СокрЛП(ВРег(ExchangePlan)),ВРег("остатки_на_складах")) > 0 тогда
		лСообщениеОбмена = ПолучитьСообщениеОбмена_ОбменПартКом83_Сайт_остатки_на_складах(Sender, ReceivedNo);
		лУпакованноеСообщение = DataExchangeПовтИсп.ПолучитьУпаковщик().PackWideString(лСообщениеОбмена);
		Возврат лУпакованноеСообщение;
	ИначеЕсли Найти(СокрЛП(ВРег(ExchangePlan)),ВРег("orders_nn")) > 0 тогда
		лСообщениеОбмена = ПланыОбмена.ОбменПартКом83_Сайт_состояние_заявок.ВыгрузитьСообщениеОбмена_ИсторияЗаявок(Sender,  ReceivedNo);
		лУпакованноеСообщение = DataExchangeПовтИсп.ПолучитьУпаковщик().PackWideString(лСообщениеОбмена);
		Возврат лУпакованноеСообщение;
	ИначеЕсли Найти(СокрЛП(ВРег(ExchangePlan)),ВРег("orders_express_nn")) > 0 тогда
		лСообщениеОбмена = ПланыОбмена.ОбменПартКом83_Сайт_состояние_заявок_exp.ВыгрузитьСообщениеОбмена_ИсторияЗаявок(Sender,  ReceivedNo);
		лУпакованноеСообщение = DataExchangeПовтИсп.ПолучитьУпаковщик().PackWideString(лСообщениеОбмена);
		Возврат лУпакованноеСообщение;
	ИначеЕсли Найти(СокрЛП(ВРег(ExchangePlan)),ВРег("credit")) > 0 тогда
		лСообщениеОбмена = ПолучитьСообщениеОбмена_ОбменПартКом83_Сайт_данные_покупателей(Sender, ReceivedNo, ?(Найти(СокрЛП(ВРег(ExchangePlan)),ВРег("all")),Ложь,Истина) );
		лУпакованноеСообщение = DataExchangeПовтИсп.ПолучитьУпаковщик().PackWideString(лСообщениеОбмена);
		Возврат лУпакованноеСообщение;
	ИначеЕсли СокрЛП(ВРег(ExchangePlan)) = ВРег("ОбменПартКом83_ОкноПоставщика") тогда
		Возврат ПолучитьСообщениеОбмена_ОбменПартКом83_ОкноПоставщика(Sender, ReceivedNo);
	ИначеЕсли СокрЛП(ВРег(ExchangePlan)) = ВРег("ОбменПартКом83_VMI") тогда
		Возврат ПолучитьСообщениеОбмена_ОбменПартКом83_VMI(Sender, ReceivedNo);
	ИначеЕсли СокрЛП(ВРег(ExchangePlan)) = ВРег("ОбменПартКом77_83") тогда
		Возврат ПолучитьСообщениеОбмена_ОбменПартКом77_83(Sender, ReceivedNo);
	ИначеЕсли СокрЛП(ВРег(ExchangePlan)) = ВРег("ОбменПартКом83_TopLog") тогда
		лСообщениеОбмена = ПолучитьСообщениеОбмена_ОбменПартКом83_TopLog(Sender, ReceivedNo);
		//Пока не упаковываем
		//лУпакованноеСообщение = DataExchangeПовтИсп.ПолучитьУпаковщик().PackWideString(лСообщениеОбмена);
		//Возврат лУпакованноеСообщение;
		Возврат лСообщениеОбмена;
	ИначеЕсли ПланыОбмена.ОбменПартКом83_Сайт.ЭтоЭкспрессДоставка(ExchangePlan) Тогда
		Возврат ПланыОбмена.ОбменПартКом83_Сайт.СообщениеПоЭкспрессДоставке(Sender, ReceivedNo);
	ИначеЕсли ExchangePlan = "1CSiteExchange" Тогда
		СообщениеОбмена = ПланыОбмена.ОбменПартКом83_Сайт_Файлы.ВыгрузитьСообщениеОбмена(Sender, ReceivedNo);
		УпакованноеСообщение = DataExchangeПовтИсп.ПолучитьУпаковщик().PackWideString(СообщениеОбмена);
		Возврат УпакованноеСообщение;
	ИначеЕсли ExchangePlan = "motion" Тогда
		Возврат ПланыОбмена.ОбменССайтом_СтрокиЗаявок.ВыгрузитьСообщениеОбмена(Sender, ReceivedNo);
	Иначе
		ВызватьИсключение "Неправильное значение параметра ""ExchangePlan"".";
	КонецЕсли;
	
КонецФункции

Функция SetExchangeMessage(InData) Экспорт
	
	лИмяФайлаДанных = ПолучитьИмяВременногоФайла();
	лИмяФайлаДанных = СтрЗаменить(лИмяФайлаДанных, "v8_", "dd_v8_");
	лИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла();
	лИмяФайлаПротоколаОбмена = СтрЗаменить(лИмяФайлаПротоколаОбмена, "v8_", "ob_v8_");
	
	DataExchangeПовтИсп.ПолучитьУпаковщик().UnpackStringToFile(
	InData, лИмяФайлаДанных);
	
	лОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	лОбработкаОбъект.РежимОбмена = "Загрузка";
	лОбработкаОбъект.ИмяФайлаОбмена = лИмяФайлаДанных;
	лОбработкаОбъект.ИмяФайлаПротоколаОбмена = лИмяФайлаПротоколаОбмена;
	лОбработкаОбъект.ВыводВПротоколИнформационныхСообщений = Ложь;
	лОбработкаОбъект.ВыводВПротоколСообщенийОбОшибках = Истина;
	лОбработкаОбъект.ВыполнитьЗагрузку();
	
	Результат = 0;
	Если НЕ лОбработкаОбъект.ФлагОшибки	тогда
		Результат = лОбработкаОбъект.Параметры.ВходящиеПараметры.НомерСообщения;		
	Иначе
		// вывод содержимого протокола обмена в журнал регистрации (временно)
		лТекст = Новый ТекстовыйДокумент;
		лТекст.Прочитать(лИмяФайлаПротоколаОбмена, "windows-1251");
		ЗаписьЖурналаРегистрации("Обмен данными.Загрузка." + Метаданные.ПланыОбмена.ОбменПартКом77_83.Синоним,
		УровеньЖурналаРегистрации.Ошибка, Метаданные.ПланыОбмена.ОбменПартКом77_83, , лТекст.ПолучитьТекст());
		лТекст = Неопределено;
	КонецЕсли;
	
	УдалитьФайлы(лИмяФайлаПротоколаОбмена);
	УдалитьФайлы(лИмяФайлаДанных);
	
	Возврат Результат;
	
КонецФункции

Функция SetExchangeMessage_изм(InData) Экспорт
	
	лИмяФайлаДанных = ПолучитьИмяВременногоФайла();
	лИмяФайлаДанных = СтрЗаменить(лИмяФайлаДанных, "v8_", "dd_v8_");
	лИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла();
	лИмяФайлаПротоколаОбмена = СтрЗаменить(лИмяФайлаПротоколаОбмена, "v8_", "ob_v8_");
		
	DataExchangeПовтИсп.ПолучитьУпаковщик().UnpackStringToFile(
	InData, лИмяФайлаДанных);
		
	лОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	лОбработкаОбъект.РежимОбмена = "Загрузка";
	лОбработкаОбъект.ИмяФайлаОбмена = лИмяФайлаДанных;
	лОбработкаОбъект.ИмяФайлаПротоколаОбмена = лИмяФайлаПротоколаОбмена;
	лОбработкаОбъект.ВыводВПротоколИнформационныхСообщений = Ложь;
	лОбработкаОбъект.ВыводВПротоколСообщенийОбОшибках = Истина;
	
	Результат = 0;
	Попытка
		лОбработкаОбъект.ВыполнитьЗагрузку();
	    		
		Если НЕ лОбработкаОбъект.ФлагОшибки	тогда
			Результат = лОбработкаОбъект.Параметры.ВходящиеПараметры.НомерСообщения;		
		Иначе
			// вывод содержимого протокола обмена в журнал регистрации (временно)
			лТекст = Новый ТекстовыйДокумент;
			лТекст.Прочитать(лИмяФайлаПротоколаОбмена, "windows-1251");
			ЗаписьЖурналаРегистрации("Обмен данными.Загрузка." + Метаданные.ПланыОбмена.ОбменПартКом77_83.Синоним,
			УровеньЖурналаРегистрации.Ошибка, Метаданные.ПланыОбмена.ОбменПартКом77_83, , лТекст.ПолучитьТекст());
			лТекст = Неопределено;
		КонецЕсли;
	    
		
	Исключение
		ЗаписьЖурналаРегистрации("Обмен данными.Загрузка." + Метаданные.ПланыОбмена.ОбменПартКом77_83.Синоним,
			УровеньЖурналаРегистрации.Ошибка, Метаданные.ПланыОбмена.ОбменПартКом77_83, , ОписаниеОшибки());
		УдалитьФайлы(лИмяФайлаПротоколаОбмена);
		УдалитьФайлы(лИмяФайлаДанных);
		
	КонецПопытки;
		
	УдалитьФайлы(лИмяФайлаПротоколаОбмена);
	УдалитьФайлы(лИмяФайлаДанных);
	
	Возврат Результат;
	
КонецФункции


// [Тарасов А.В.] 

//Параметры:
//1. ExchangeID - идентификатор узла обмена для очистки регистрации
//2. Data       - хранилище значения, содержит в себе таблицу значений с колонками "TableID", "ObjectID"

Функция CleanRegistry(ExchangeID, MessageNo, Data) Экспорт
	
	УзелОбмена = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена("ОбменПартКом83_TopLog", ExchangeID);
		
	Если НЕ ЗначениеЗаполнено(Узелобмена) Тогда
		ВызватьИсключение "Неправильное значение параметра ""ExchangeID"". Не удалось определить исходящий узел обмена!";		
	КонецЕсли;
	
	Если MessageNo = 0 Тогда
		ВызватьИсключение "Неправильное значение параметра ""MessageNo"". Номер сообщения должен быть больше нуля!";		
	КонецЕсли;
	
	ВхТаблица = Data.Получить();
	
	МассивИдТаблиц = Новый Массив;
	Для Каждого СтрокаВхТаблицы ИЗ ВхТаблица Цикл
		Если МассивИдТаблиц.Найти(СтрокаВхТаблицы.TableID) = Неопределено Тогда
			МассивИдТаблиц.Добавить(СтрокаВхТаблицы.TableID);			
		КонецЕсли;
	КонецЦикла;
	
	МассивСсылок = Новый Массив;
	
	Для Каждого ИдТаблицы ИЗ МассивИдТаблиц Цикл
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИдТаблицы);		
		
		МассивСсылок.Очистить();
		мСтрокПоОтбору = ВхТаблица.НайтиСтроки(Новый Структура("TableID", ИдТаблицы));
		Для Каждого мСтрока ИЗ мСтрокПоОтбору Цикл
			СсылкаНаОбъект  = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(мСтрока.ObjectID));
			Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
				МассивСсылок.Добавить(СсылкаНаОбъект);
			КонецЕсли;	
		КонецЦикла;
		
		//Собственно очистка регистрации для конкретной таблицы изменений
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический); 
		Попытка                                                            						
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Т.Ссылка
			|ИЗ
			|	" + ИдТаблицы + ".Изменения КАК Т
			|ГДЕ
			|	Т.Узел = &УзелОбмена
			|	И Т.Ссылка В(&МассивСсылок)
			|	И Т.НомерСообщения <= &MessageNo
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Ссылка";
			Запрос.УстановитьПараметр("УзелОбмена",   УзелОбмена);
			Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
			Запрос.УстановитьПараметр("MessageNo",    MessageNo);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Выборка.Ссылка);
			КонецЦикла;
		
			ЗафиксироватьТранзакцию();	
		Исключение
			//Не удалось очистить регистрацию по каким-либо причинам
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки; 
	
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

//Параметры:
//1. Data - хранилище значения, содержит в себе строку XML, сформированную при помощи КД

Функция GetData(Data) Экспорт
	ИмяФайлаДанных = ПолучитьИмяВременногоФайла();
	ИмяФайлаДанных = СтрЗаменить(ИмяФайлаДанных, "v8_", "dd_v8_");
	ИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла();
	ИмяФайлаПротоколаОбмена = СтрЗаменить(ИмяФайлаПротоколаОбмена, "v8_", "ob_v8_");
	
	ОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбъект.РежимОбмена             = "Загрузка";
	ОбработкаОбъект.ИмяФайлаОбмена          = ИмяФайлаДанных;
	ОбработкаОбъект.ИмяФайлаПротоколаОбмена = ИмяФайлаПротоколаОбмена;
	
	ОбработкаОбъект.ВыводВПротоколИнформационныхСообщений = Ложь;
	ОбработкаОбъект.ВыводВПротоколСообщенийОбОшибках      = Истина;
		
	Если ОбработкаОбъект.ВыполнитьДействияПередЧтениемДанных(Data.Получить()) Тогда
		
		ОбработкаОбъект.ПроизвестиЧтениеДанных();
		ОбработкаОбъект.ВыполнитьДействияПослеЗавершенияЧтенияДанных(); 
		
		Если ОбработкаОбъект.ФлагОшибки	Тогда
			
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаПротоколаОбмена, "windows-1251");
			
			мОписаниеОшибки = Текст.ПолучитьТекст(); 
			
			ЗаписьЖурналаРегистрации("Обмен данными.Загрузка." + Метаданные.ПланыОбмена.ОбменПартКом83_TopLog.Синоним,
			УровеньЖурналаРегистрации.Ошибка, Метаданные.ПланыОбмена.ОбменПартКом83_TopLog, , мОписаниеОшибки);
			
			Текст = Неопределено;
			
		КонецЕсли;
	КонецЕсли;      
	
	УдалитьФайлы(ИмяФайлаПротоколаОбмена);
	УдалитьФайлы(ИмяФайлаДанных);
	
	Если ОбработкаОбъект.ФлагОшибки	Тогда
		ВызватьИсключение мОписаниеОшибки;
	КонецЕсли;	
			
	Возврат "";
	
КонецФункции
// [Тарасов А.В.] 

// Добавлено Валиахметов А.А.
//Изменил Углев О.О. 22.06.2018
//Data - входная таблица в хранилеще значения, имеет колонки
//GUID - guid документа
//ТипДокумента - в том виде, как он называется в 8ке
Функция AddRegistry(ExchangePlan, ExchangeID, Data) Экспорт  //Зарегистрировать изменения на узле
	
	//Старый текст
	
	//лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(ExchangePlan);	
	//Если лМетаданныеПланаОбмена = Неопределено Тогда 
	//	ВызватьИсключение "Неправильное значение параметра ""ExchangePlan"". Не удалось найти план обмена!";
	//КонецЕсли;
	//
	//УзелОбмена = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(ExchangePlan, ExchangeID);
	//
	//Если НЕ ЗначениеЗаполнено(Узелобмена) Тогда
	//	ВызватьИсключение "Неправильное значение параметра ""ExchangeID"". Не удалось определить исходящий узел обмена!";		
	//КонецЕсли;
	//
	//ВхТаблица = Data.Получить();
	//
	//Успешно = Истина;
	//
	//Если лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом83_TopLog Тогда 
	//	// Таблица значений, которая содержит колонки "ПолноеИмяОбъектаМетаданных","ИмяРеквизита" и "ЗначениеРеквизита"  строковое представление guid 
	//	Для Каждого СтрокаТЧ Из ВхТаблица Цикл 
	//		Попытка
	//			МенеджерОбъекта = Вычислить(СтрокаТЧ.ПолноеИмяОбъектаМетаданных);	
	//		Исключение
	//			Успешно = Ложь;
	//		КонецПопытки;
	//		Если СтрокаТЧ.ИмяРеквизита = "Ссылка" Тогда 
	//			СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТЧ.ЗначениеРеквизита));
	//			Если Не ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(СсылкаНаОбъект) Тогда 
	//				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СсылкаНаОбъект);
	//			Иначе
	//				Успешно = Ложь;
	//			КонецЕсли;
	//		Иначе
	//			МетаданныеОбъекта = МенеджерОбъекта.ПустаяСсылка().Метаданные();
	//			Если ОбщегоНазначения.ЕстьРеквизитДокумента(СтрокаТЧ.ИмяРеквизита, МетаданныеОбъекта) Тогда 
	//				ИмяОбъектаМетаданных = СтрЗаменить(СтрЗаменить(СтрокаТЧ.ПолноеИмяОбъектаМетаданных, "Справочники.", ""), "Документы.", "");
	//				Запрос = Новый Запрос;
	//				Запрос.Текст = "ВЫБРАТЬ
	//				               |	Т.Ссылка
	//				               |ИЗ
	//				               |	" +?(ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта),"Справочник.", "Документ.")+ ИмяОбъектаМетаданных + " КАК Т
	//				               |ГДЕ
	//				               |	Т." + СтрокаТЧ.ИмяРеквизита + " = &ЗначениеРеквизита";
	//				Запрос.УстановитьПараметр("ЗначениеРеквизита", СтрокаТЧ.ЗначениеРеквизита);
	//				РезультатЗапроса = Запрос.Выполнить();
	//				Если Не РезультатЗапроса.Пустой() Тогда 
	//					Выборка = РезультатЗапроса.Выбрать();
	//					Выборка.Следующий();
	//					СсылкаНаОбъект = Выборка.Ссылка;
	//					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СсылкаНаОбъект);
	//				Иначе
	//					Успешно = Ложь;
	//				КонецЕсли;
	//			Иначе
	//				Успешно = Ложь;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//		
	//Возврат Успешно;
	
	СтруктураВозврата = Новый Структура;
	лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(ExchangePlan);
	
	ДопустимыеТипыОбъектов = Новый Массив;
	
	ДопустимыеТипыОбъектов.Добавить("Справочники.ТорговыеТочки");
	ДопустимыеТипыОбъектов.Добавить("Справочники.Номенклатура");
    ДопустимыеТипыОбъектов.Добавить("Документы.РеализацияТоваровУслуг");	
	ДопустимыеТипыОбъектов.Добавить("Документы.ПоступлениеТоваровУслуг");
    ДопустимыеТипыОбъектов.Добавить("Документы.ПеремещениеТоваров");	
	
	
	Если лМетаданныеПланаОбмена = Неопределено Тогда
		СтруктураВозврата.Вставить("Ошибка", Истина);
		СтруктураВозврата.Вставить("СообщениеДиагностики", "Неправильное значение параметра ""ExchangePlan"". Не удалось найти план обмена!");
		Возврат СтруктураВозврата; 
	КонецЕсли;
	
	УзелОбмена = ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена(ExchangePlan, ExchangeID);
	
	Если НЕ ЗначениеЗаполнено(Узелобмена) Тогда
		СтруктураВозврата.Вставить("Ошибка", Истина);
		СтруктураВозврата.Вставить("СообщениеДиагностики", "Неправильное значение параметра ""ExchangeID"". Не удалось определить исходящий узел обмена!");
		Возврат СтруктураВозврата;	
	КонецЕсли;
	
	ВходнаяТаблица = Data.Получить();
	
	ВыходнаяТаблица = ВходнаяТаблица.СкопироватьКолонки();
	ВыходнаяТаблица.Колонки.Добавить("Ошибка", Новый ОписаниеТипов("Булево"));
    ВыходнаяТаблица.Колонки.Добавить("СообщениеДиагностики", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)));
	
	Для каждого СтрокаВходнойТаблицы из ВходнаяТаблица Цикл
		
		//Проверка типа документа
		Попытка
			
			МенеджерОбъекта = Вычислить(СтрокаВходнойТаблицы.ТипДокумента);
			Поиск = ДопустимыеТипыОбъектов.Найти(СтрокаВходнойТаблицы.ТипДокумента);
			Если Поиск = Неопределено Тогда
				СтруктураВозврата.Вставить("Ошибка", Истина);
				СтруктураВозврата.Вставить("СообщениеДиагностики", "Тип документа не поддерживается: " + СтрокаВходнойТаблицы.ТипДокумента);
				Возврат СтруктураВозврата;			
			КонецЕсли;
			
		Исключение
			//Такого типа документа нет
			СтруктураВозврата.Вставить("Ошибка", Истина);
			СтруктураВозврата.Вставить("СообщениеДиагностики", "Неправильный тип документа: " + СтрокаВходнойТаблицы.ТипДокумента);
			Возврат СтруктураВозврата;		
		КонецПопытки;

		//Поиск документа по ссылке
		СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВходнойТаблицы.GUID));
		Если Не ОбменДаннымиКлиентСервер.ЭтоБитаяСсылка(СсылкаНаОбъект) Тогда
			
			Объект = СсылкаНаОбъект.ПолучитьОбъект();
			
			ПопыткаРегистрации = Объект.ВыгрузитьВОбменТоплог();
			
			НоваяСтрока = ВыходнаяТаблица.Добавить();
			НоваяСтрока.GUID = СтрокаВходнойТаблицы.GUID;
			НоваяСтрока.ТипДокумента = СтрокаВходнойТаблицы.ТипДокумента;
			НоваяСтрока.Ошибка = ПопыткаРегистрации.Ошибка;
			НоваяСтрока.СообщениеДиагностики = ПопыткаРегистрации.СообщениеДиагностики;
			
		Иначе
			
			НоваяСтрока = ВыходнаяТаблица.Добавить();
			НоваяСтрока.GUID = СтрокаВходнойТаблицы.GUID;
			НоваяСтрока.ТипДокумента = СтрокаВходнойТаблицы.ТипДокумента;
			НоваяСтрока.Ошибка = Истина;
			НоваяСтрока.СообщениеДиагностики = "Объект по УИД не найден.";

			
		КонецЕсли;

	КонецЦикла;
	
	Хранилище = Новый ХранилищеЗначения(ВыходнаяТаблица, Новый СжатиеДанных(9));
	
	Возврат  Хранилище;
	
КонецФункции

Функция GetGUID(Data) Экспорт   //Получить УИДы документов. Только для обмена с ТопЛог
	
	// Таблица значений, которая содержит колонки "НомерДокумента", "ДатаДокумента"
	
	ВхТаблица = Data.Получить();
	
	лТаблица = Новый ТаблицаЗначений;
	лТаблица.Колонки.Добавить("ИмяДокумента", Новый ОписаниеТипов("Строка"));
	лТаблица.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
	лТаблица.Колонки.Добавить("НомерДокумента83", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11,ДопустимаяДлина.Фиксированная)));
	лТаблица.Колонки.Добавить("ДатаДокумента", Новый ОписаниеТипов("Дата"));
	лТаблица.Колонки.Добавить("Guid", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Для Каждого СтрокаТЧ Из ВхТаблица Цикл 
		НоваяСтрока = лТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НомерДокумента = СокрЛП(НоваяСтрока.НомерДокумента);
		НоваяСтрока.НомерДокумента = НомерДокумента;
		ДлинаНомера = СтрДлина(НоваяСтрока.НомерДокумента);
		
		Если Не ПустаяСтрока(НоваяСтрока.НомерДокумента) Тогда 
			ДобавленныеНули = "";
			КоличествоДобавляемыхНулей = 11 - ДлинаНомера;
			Для Шаг = 1 По КоличествоДобавляемыхНулей Цикл 
				ДобавленныеНули = ДобавленныеНули + "0";
			КонецЦикла;
			НомерДокумента83 = Лев(НоваяСтрока.НомерДокумента, 3) + ДобавленныеНули + Прав(НоваяСтрока.НомерДокумента, ДлинаНомера - 3);
			НоваяСтрока.НомерДокумента83 = НомерДокумента83;
		КонецЕсли;
	КонецЦикла;
	
	ИменаДокументов = ВхТаблица.Скопировать(, "ИмяДокумента");
	ИменаДокументов.Свернуть("ИмяДокумента");
	Для Каждого СтрокаИмДок Из ИменаДокументов Цикл 
		Строки = лТаблица.НайтиСтроки(Новый Структура("ИмяДокумента", СтрокаИмДок.ИмяДокумента));
		Таб = лТаблица.Скопировать(Строки);
		
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		                |	лТаблица.НомерДокумента,
		                |	лТаблица.НомерДокумента83,
		                |	лТаблица.ДатаДокумента
		                |ПОМЕСТИТЬ лТаблица
		                |ИЗ
		                |	&лТаблица КАК лТаблица
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	лТаблица.НомерДокумента,
		                |	Док.Ссылка
		                |ИЗ
		                |	лТаблица КАК лТаблица
		                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + СтрокаИмДок.ИмяДокумента + " КАК Док
		                |		ПО лТаблица.НомерДокумента83 = Док.Номер
		                |			И (ГОД(лТаблица.ДатаДокумента) = ГОД(Док.Дата))";
		Запрос.УстановитьПараметр("лТаблица", Таб);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			Строки = лТаблица.НайтиСтроки(Новый Структура("НомерДокумента,ИмяДокумента", Выборка.НомерДокумента, СтрокаИмДок.ИмяДокумента));
			Для Каждого СтрокаТаблицы Из Строки Цикл 
				СтрокаТаблицы.Guid = Выборка.Ссылка.УникальныйИдентификатор();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	лТаблица.Колонки.Удалить("НомерДокумента83");
	
	Возврат Новый ХранилищеЗначения(лТаблица, Новый СжатиеДанных(9));
	
КонецФункции
//Конец Добавлено Валиахметов А.А.

// [Рудаков В.В.] Начало 
// Обработка вернет данные для печати чека в БИТ
Функция GetDocForBit(Data,Number,Answer) Экспорт
	// Вставить содержимое обработчика.
	НомерДокумента = СокрЛП(Number);
	ДлинаНомера = СтрДлина(НомерДокумента);
	Если Не ПустаяСтрока(НомерДокумента) Тогда 
		ДобавленныеНули = "";
		КоличествоДобавляемыхНулей = 11 - ДлинаНомера;
		Для Шаг = 1 По КоличествоДобавляемыхНулей Цикл 
			ДобавленныеНули = ДобавленныеНули + "0";
		КонецЦикла;
		НомерДокумента83 = Лев(НомерДокумента, 3) + ДобавленныеНули + Прав(НомерДокумента, ДлинаНомера - 3);
	КонецЕсли;
	ДатаДокумента=Data;
	
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	0 КАК ДокументUID,
	|	0 КАК ВидДокумента,
	|	РеализацияТоваровУслугТовары.Ссылка.Номер КАК НомерДокумента,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.Количество КАК КоличествоТТН,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.Сумма КАК СуммаТТН,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК nds_value,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК nds_summ,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК CODE,
	|	РеализацияТоваровУслугТовары.Номенклатура.Акцизный КАК АкцизныйТовар,
	|	РеализацияТоваровУслугТовары.Ссылка.Организация.УчитыватьНДС КАК nds_use
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Номер = &Номер
	|	И ГОД(РеализацияТоваровУслугТовары.Ссылка.Дата) = &Дата
	|	И РеализацияТоваровУслугТовары.Количество > 0";
	запрос.УстановитьПараметр("Номер",НомерДокумента);
	запрос.УстановитьПараметр("Дата",ДатаДокумента);
	Рез=Запрос.Выполнить().Выгрузить();
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КоличествоТТН", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СуммаТТН", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("nds_value", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("nds_summ", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("nds_use", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("НомерСтрокиДокумента", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ДокументUID", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("CODE", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("АкцизныйТовар", Новый ОписаниеТипов("Булево"));
	Answer="";
	Для Каждого Стр Из Рез Цикл
		Стр.ДокументUID=Стр.Ссылка.УникальныйИдентификатор();
		Стр.ВидДокумента=Тип(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
		строкатаб=ТЗ.Добавить();
		строкатаб.ВидДокумента=Строка(Стр.ВидДокумента);
		строкатаб.НомерДокумента=Стр.НомерДокумента;
		строкатаб.Количество=Стр.Количество;
		строкатаб.КоличествоТТН=Стр.КоличествоТТН;
		строкатаб.Цена=Стр.Цена;
		строкатаб.Сумма=Стр.Сумма;
		строкатаб.СуммаТТН=Стр.СуммаТТН;
		Ставка=1;
		Если Стр.nds_value=Перечисления.СтавкиНДС.БезНДС Тогда 
			Ставка=1;
		ИначеЕсли Стр.nds_value=Перечисления.СтавкиНДС.НДС0 Тогда 	
			Ставка=2;
		ИначеЕсли Стр.nds_value=Перечисления.СтавкиНДС.НДС18 Тогда 	
			Ставка=3;
		ИначеЕсли Стр.nds_value=Перечисления.СтавкиНДС.НДС18_118 Тогда 	
			Ставка=4;
		ИначеЕсли Стр.nds_value=Перечисления.СтавкиНДС.НДС10 Тогда 	
			Ставка=5;
		ИначеЕсли Стр.nds_value=Перечисления.СтавкиНДС.НДС10_110 Тогда 	
			Ставка=6;
		ИначеЕсли Стр.nds_value=Перечисления.СтавкиНДС.НДС20 Тогда 	
			Ставка=7;
		ИначеЕсли Стр.nds_value=Перечисления.СтавкиНДС.НДС20_120 Тогда 	
			Ставка=8;
		Иначе 	
			Ставка=0;
        КонецЕсли;
		строкатаб.nds_value=Ставка;
		строкатаб.nds_summ=Стр.nds_summ;
		строкатаб.nds_use=Стр.nds_use;
		строкатаб.НомерСтрокиДокумента=Стр.НомерСтрокиДокумента;
		ДДок=Стр.Ссылка.ПолучитьОбъект();
		строкатаб.ДокументUID=ДДок.Ссылка.УникальныйИдентификатор();//Стр.ДокументUID;
		строкатаб.Номенклатура=Строка(Стр.Номенклатура);
		строкатаб.CODE=Стр.CODE;
		строкатаб.АкцизныйТовар=Стр.АкцизныйТовар;
		Answer=Answer+"Реализация;";
		Answer=Answer+строкатаб.НомерДокумента+";";
		Answer=Answer+строкатаб.Количество+";";
		Answer=Answer+строкатаб.КоличествоТТН+";";
		Answer=Answer+строкатаб.Цена+";";
		Answer=Answer+строкатаб.Сумма+";";
		Answer=Answer+строкатаб.СуммаТТН+";";
		Answer=Answer+строкатаб.nds_value+";";
		Answer=Answer+строкатаб.nds_summ+";";
		Answer=Answer+Строка(строкатаб.nds_use)+";";
		Answer=Answer+Строка(строкатаб.НомерСтрокиДокумента)+";";
		Answer=Answer+Строка(строкатаб.ДокументUID)+";";
		Answer=Answer+строкатаб.Номенклатура+";";
		Answer=Answer+строкатаб.CODE+";";
		Answer=Answer+Строка(строкатаб.АкцизныйТовар)+";";
		Answer=Answer+Строка(строкатаб.ВидДокумента)+";";
		Answer=Answer+"#"+Символы.ПС;
	КонецЦикла;	
	
	Если Рез.Количество()>0 Тогда 
		Возврат Answer;//Новый ХранилищеЗначения(Answer, Новый СжатиеДанных(9));;
	Иначе 
		Возврат "Нет данных";
	КонецЕсли;	
КонецФункции
// [Рудаков В.В.] Конец 

//Углев 09.06.2018
Функция  ПолучитьДокументыДляОбменаТоплог(ДатаНачала, ДатаОкончания) Экспорт
	
	ОбработкаСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ПроверкаДокументовИзОбмена8");
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ОбработкаСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
	УдалитьФайлы(ИмяФайла);
	
	Возврат	ВнешняяОбработка.ПолучитьДокументыДляОбменаТоплог(ДатаНачала, ДатаОкончания);

КонецФункции 


//Углев 09.06.2018
Функция ПроверитьДокументыДляОбменаТоплог(ТекстЗапроса) Экспорт
	
	ОбработкаСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ПроверкаДокументовИзОбмена8");
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ОбработкаСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
	УдалитьФайлы(ИмяФайла);
	
	Возврат	ВнешняяОбработка.ПроверитьДокументыДляОбменаТоплог(ТекстЗапроса);
		
КонецФункции

//Углев 17.08.2018
Функция ПолучитьОтказыПоПартиям() Экспорт
	
	ОбработкаСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ТоплогПолучениеОтказовПоПартиям");
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ОбработкаСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
	УдалитьФайлы(ИмяФайла);
	
	Возврат	ВнешняяОбработка.ПолучитьОтказыПоПартиям();
			
КонецФункции

//Углев 17.08.2018
Функция СравнитьДокументы(ДатаНачала, ДатаОкончания, ТаблицаДокументов) Экспорт
	
	ОбработкаСсылка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ПроверкаДокументовИзОбмена8");
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ОбработкаСсылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
	УдалитьФайлы(ИмяФайла);
	
	Возврат	ВнешняяОбработка.СравнитьДокументыВТоплогИ1С8(ДатаНачала, ДатаОкончания, ТаблицаДокументов);
	
КонецФункции

//Возвращает статус IDSite (данные по реализациям и возвратам)
Функция IDSiteStatus(IDSite) Экспорт
	
	Данные = ДанныеПоIDSite(IDSite);
	ЕстьДанные = Данные.Количество() > 0;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("Success");
	ЗаписьJSON.ЗаписатьЗначение(ЕстьДанные);
	Если ЕстьДанные Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("Data");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого ДанныеДокумента Из Данные Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("doc_number");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеДокумента.doc_number);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("doc_data");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ДанныеДокумента.doc_data, "ДЛФ=DT"));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("cash");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеДокумента.cash);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("amount");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеДокумента.amount);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("price");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеДокумента.price);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("gtd");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеДокумента.gtd);
			
			ЗаписьJSON.ЗаписатьИмяСвойства("country_code");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеДокумента.country_code);

			ЗаписьJSON.ЗаписатьИмяСвойства("guid_nom");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеДокумента.guid_nom);

			ЗаписьJSON.ЗаписатьИмяСвойства("amount_return");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеДокумента.amount_return);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
	КонецЕсли;
	ЗаписьJSON.ЗаписатьКонецОбъекта();

	Возврат ЗаписьJSON.Закрыть();

КонецФункции
Функция ДанныеПоIDSite(IDSite)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИдентификаторыСтрокЗаявок.Ссылка
	                      |ПОМЕСТИТЬ Идентификаторы
	                      |ИЗ
	                      |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                      |ГДЕ
	                      |	ИдентификаторыСтрокЗаявок.IDSite = &IDSite
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПродажиОбороты.Регистратор КАК ДокументРеализации,
	                      |	ПродажиОбороты.Регистратор.Контрагент КАК Контрагент,
	                      |	ПродажиОбороты.Номенклатура,
	                      |	ПродажиОбороты.СтрокаЗаявки,
	                      |	ПродажиОбороты.КоличествоОборот КАК Количество,
	                      |	ПродажиОбороты.СуммаРеглОборот КАК Сумма,
	                      |	ВЫБОР
	                      |		КОГДА ПродажиОбороты.КоличествоОборот = 0
	                      |			ТОГДА 0
	                      |		ИНАЧЕ ПродажиОбороты.СуммаРеглОборот / ПродажиОбороты.КоличествоОборот
	                      |	КОНЕЦ КАК Цена
	                      |ПОМЕСТИТЬ ДанныеРеализации
	                      |ИЗ
	                      |	РегистрНакопления.Продажи.Обороты(
	                      |			,
	                      |			,
	                      |			Регистратор,
	                      |			СтрокаЗаявки В
	                      |				(ВЫБРАТЬ
	                      |					Идентификаторы.Ссылка
	                      |				ИЗ
	                      |					Идентификаторы КАК Идентификаторы)) КАК ПродажиОбороты
	                      |ГДЕ
	                      |	ПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ДанныеРеализации.ДокументРеализации,
	                      |	ДанныеРеализации.Контрагент,
	                      |	ДанныеРеализации.СтрокаЗаявки,
	                      |	ДанныеРеализации.Номенклатура,
	                      |	ДанныеРеализации.Количество,
	                      |	ДанныеРеализации.Сумма,
	                      |	ДанныеРеализации.Цена,
	                      |	ЕСТЬNULL(ПартииТоваровОбороты.СтрокаПрихода, ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.ПустаяСсылка)) КАК СтрокаПрихода
	                      |ПОМЕСТИТЬ ДанныеПоступления
	                      |ИЗ
	                      |	ДанныеРеализации КАК ДанныеРеализации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваров.Обороты(
	                      |				,
	                      |				,
	                      |				Регистратор,
	                      |				Номенклатура В
	                      |					(ВЫБРАТЬ
	                      |						ДанныеРеализации.Номенклатура
	                      |					ИЗ
	                      |						ДанныеРеализации КАК ДанныеРеализации)) КАК ПартииТоваровОбороты
	                      |		ПО ДанныеРеализации.ДокументРеализации = ПартииТоваровОбороты.Регистратор
	                      |			И ДанныеРеализации.Номенклатура = ПартииТоваровОбороты.Номенклатура
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПартииТоваровОбороты.Регистратор.ДокументОснование КАК Реализация,
	                      |	ПартииТоваровОбороты.Регистратор.Контрагент КАК Контрагент,
	                      |	ПартииТоваровОбороты.СтрокаПрихода,
	                      |	СУММА(ПартииТоваровОбороты.КоличествоОборот) КАК КоличествоВозврат
	                      |ПОМЕСТИТЬ ДанныеВозвратов
	                      |ИЗ
	                      |	РегистрНакопления.ПартииТоваров.Обороты(
	                      |			,
	                      |			,
	                      |			Регистратор,
	                      |			(Организация, СтрокаПрихода, Номенклатура) В
	                      |				(ВЫБРАТЬ
	                      |					ДанныеПоступления.ДокументРеализации.Организация КАК Организация,
	                      |					ДанныеПоступления.СтрокаПрихода,
	                      |					ДанныеПоступления.Номенклатура
	                      |				ИЗ
	                      |					ДанныеПоступления КАК ДанныеПоступления)) КАК ПартииТоваровОбороты
	                      |ГДЕ
	                      |	ПартииТоваровОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПартииТоваровОбороты.СтрокаПрихода,
	                      |	ПартииТоваровОбороты.Регистратор.Контрагент,
	                      |	ПартииТоваровОбороты.Регистратор.ДокументОснование
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ДанныеПоступления.ДокументРеализации,
	                      |	ДанныеПоступления.СтрокаЗаявки,
	                      |	МАКСИМУМ(ДанныеПоступления.СтрокаПрихода) КАК СтрокаПрихода,
	                      |	ДанныеПоступления.Номенклатура,
	                      |	ДанныеПоступления.Количество,
	                      |	ДанныеПоступления.Цена,
	                      |	СУММА(ЕСТЬNULL(ДанныеВозвратовПоРегистратору.КоличествоВозврат, 0)) КАК КоличествоВозвратПоРеализации,
	                      |	СУММА(ЕСТЬNULL(ДанныеВозвратовПоКонтрагенту.КоличествоВозврат, 0)) КАК КоличествоВозвратПоКонтрагенту
	                      |ПОМЕСТИТЬ ДанныеИтоговые
	                      |ИЗ
	                      |	ДанныеПоступления КАК ДанныеПоступления
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозвратов КАК ДанныеВозвратовПоРегистратору
	                      |		ПО ДанныеПоступления.СтрокаПрихода = ДанныеВозвратовПоРегистратору.СтрокаПрихода
	                      |			И ДанныеПоступления.ДокументРеализации = ДанныеВозвратовПоРегистратору.Реализация
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозвратов КАК ДанныеВозвратовПоКонтрагенту
	                      |		ПО ДанныеПоступления.СтрокаПрихода = ДанныеВозвратовПоКонтрагенту.СтрокаПрихода
	                      |			И ДанныеПоступления.Контрагент = ДанныеВозвратовПоКонтрагенту.Контрагент
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ДанныеПоступления.ДокументРеализации,
	                      |	ДанныеПоступления.СтрокаЗаявки,
	                      |	ДанныеПоступления.Номенклатура,
	                      |	ДанныеПоступления.Количество,
	                      |	ДанныеПоступления.Цена
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ДанныеИтоговые.ДокументРеализации.Номер КАК doc_number,
	                      |	ДанныеИтоговые.ДокументРеализации.Дата КАК doc_data,
	                      |	ВЫБОР
	                      |		КОГДА ЕСТЬNULL(ДанныеИтоговые.ДокументРеализации.ДоговорКонтрагента.ВидОплаты, ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные)) = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные)
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК cash,
	                      |	ДанныеИтоговые.Количество КАК amount,
	                      |	ДанныеИтоговые.Цена КАК price,
	                      |	ЕСТЬNULL(ДанныеИтоговые.СтрокаПрихода.НомерГТД.Код, """") КАК gtd,
	                      |	ЕСТЬNULL(ДанныеИтоговые.СтрокаПрихода.СтранаПроисхождения.Код, """") КАК country_code,
	                      |	ДанныеИтоговые.Номенклатура,
	                      |	ВЫБОР
	                      |		КОГДА ДанныеИтоговые.КоличествоВозвратПоРеализации <> 0
	                      |			ТОГДА ДанныеИтоговые.КоличествоВозвратПоРеализации
	                      |		ИНАЧЕ ДанныеИтоговые.КоличествоВозвратПоКонтрагенту
	                      |	КОНЕЦ КАК amount_return
	                      |ИЗ
	                      |	ДанныеИтоговые КАК ДанныеИтоговые");
	Запрос.УстановитьПараметр("IDSite", IDSite);
	Выборка = Запрос.Выполнить().Выбрать();
	Массив = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура;
		Структура.Вставить("doc_number", Выборка.doc_number);
		Структура.Вставить("doc_data", Выборка.doc_data);
		Структура.Вставить("cash", Выборка.cash);
		Структура.Вставить("amount", Выборка.amount);
		Структура.Вставить("price", Выборка.price);
		Структура.Вставить("gtd", Выборка.gtd);
		Структура.Вставить("country_code", Выборка.country_code);
		Структура.Вставить("guid_nom", Строка(Выборка.Номенклатура.УникальныйИдентификатор()));
		Структура.Вставить("amount_return", Выборка.amount_return);
		
		Массив.Добавить(Структура);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Процедура ОтметитьОтправкуОбъектов(ОбъектыРегистрации, ВидОбмена, НомерПакета) Экспорт
	
	НаборЗаписей = РегистрыСведений.ИсторияОбменов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидОбмена.Установить(ВидОбмена);
	НаборЗаписей.Отбор.НомерПакета.Установить(НомерПакета);
	Для Каждого ЗарегистрированныйОбъект Из ОбъектыРегистрации Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Период = ТекущаяДата();
		Запись.ВидОбмена = ВидОбмена;
		Запись.НомерПакета = НомерПакета;
		Запись.Ссылка = ЗарегистрированныйОбъект;
	КонецЦикла;
	Таблица = НаборЗаписей.Выгрузить();
	Таблица.Свернуть("ВидОбмена,НомерПакета,Период,Ссылка");
	НаборЗаписей.Загрузить(Таблица);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#Область Работа_SQL
Функция ВыполнитьЗапросSQL(ТекстЗапроса) Экспорт
	
	Попытка
		СоединениеSQL  = Новый COMОбъект("ADODB.Connection");
		КомандаSQL     = Новый COMОбъект("ADODB.Command");
		ВыборкаSQL     = Новый COMОбъект("ADODB.RecordSet");
		
		СоединениеSQL.ConnectionString = СтрокаСоединенияSQL();
		
		СоединениеSQL.ConnectionTimeout = 30;
		СоединениеSQL.CommandTimeout = 6000;
		
		СоединениеSQL.Open();
		КомандаSQL.ActiveConnection   = СоединениеSQL;
		КомандаSQL.CommandText = ТекстЗапроса;
		КомандаSQL.Execute();
		
		СоединениеSQL.Close();
		
		ОписаниеОшибки = "";
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;

	Возврат ОписаниеОшибки;
	
КонецФункции
Функция СтрокаСоединенияSQL() Экспорт
	
	Возврат РаботаСSQL.СтрокаСоединенияSQL();
	
КонецФункции
#КонецОбласти

#Область РегистрацияОбъектовЧерезWEBService
Функция RegisterToExchange(ObjectType, ObjectKey) Экспорт
	
	ОбъектЗарегистрирован = Ложь;
	Если ObjectType = "Справочники.ПрайсыПоставщиков" Тогда
		Зарегистрировано = ЗарегистрироватьСправочники(Справочники.ПрайсыПоставщиков, ObjectKey);
	ИначеЕсли ObjectType = "Справочники.Организации" Тогда
		Зарегистрировано = ЗарегистрироватьСправочники(Справочники.Организации, ObjectKey);
	ИначеЕсли ObjectType = "Справочники.ДоговорыКонтрагентов" Тогда
		Зарегистрировано = ЗарегистрироватьСправочники(Справочники.ДоговорыКонтрагентов, ObjectKey);
	ИначеЕсли ObjectType = "Справочники.Склады" Тогда
		Зарегистрировано = ЗарегистрироватьСправочники(Справочники.Склады, ObjectKey);
	ИначеЕсли ObjectType = "Справочники.Водители" Тогда
		Зарегистрировано = ЗарегистрироватьСправочники(Справочники.Водители, ObjectKey);
	ИначеЕсли ObjectType = "Справочники.Регионы" Тогда
		Зарегистрировано = ЗарегистрироватьСправочники(Справочники.Регионы, ObjectKey);
	ИначеЕсли ObjectType = "Справочник.Менеджеры" Тогда
		Зарегистрировано = ЗарегистрироватьСправочники(Справочники.Менеджеры, ObjectKey);
	ИначеЕсли ObjectType = "Справочник.Поставщики" Тогда
		Зарегистрировано = ЗарегистрироватьСправочники(Справочники.Контрагенты, ObjectKey);
	ИначеЕсли ObjectType = "Справочник.Покупатели" Тогда
		Зарегистрировано = ЗарегистрироватьСправочники(Справочники.Контрагенты, ObjectKey);
	ИначеЕсли ObjectType = "СостояниеСтрокиЗаявки" Тогда
		Зарегистрировано = ЗарегистрироватьСостояниеСтрокиЗаявки(ObjectKey);
	ИначеЕсли ObjectType = "ИсторияСтрокЗаявок" Тогда
		Зарегистрировано = ЗарегистрироватьИсториюСтрокиЗаявки(ObjectKey);
	КонецЕсли;
	
	Возврат Зарегистрировано;
	
КонецФункции

Функция ЗарегистрироватьСправочники(Менеджер, ObjectKey)
	
	Массив = МассивОбъектов(Менеджер, ObjectKey);
	
	Если Массив.Количество() > 0 Тогда
		ОбъектЗарегистрирован = Истина;
		ПланыОбмена.ОбменПартКом83_Сайт.ЗарегистрироватьВОбмен(Массив);
	КонецЕсли;
	
	Возврат Массив.Количество() > 0;
	
КонецФункции
Функция ЗарегистрироватьСостояниеСтрокиЗаявки(ObjectKey)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СостояниеЗаявокПокупателя.СтрокаЗаявки
	                      |ИЗ
	                      |	РегистрСведений.СостояниеЗаявокПокупателя КАК СостояниеЗаявокПокупателя
	                      |ГДЕ
	                      |	СостояниеЗаявокПокупателя.IDSite В(&IDSite)");
	Запрос.УстановитьПараметр("IDSite", МассивСтрок(ObjectKey));
	Результат = Запрос.Выполнить();
	
	РегистрыСведений.СостояниеЗаявокПокупателя.СнятьРегистрациюСЗаписей(Результат);
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции
Функция ЗарегистрироватьИсториюСтрокиЗаявки(ObjectKey)
	
	Массив = МассивСтрок(ObjectKey);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИсторияЗаявокПокупателя.Период,
	                      |	ИсторияЗаявокПокупателя.Регистратор,
	                      |	ИсторияЗаявокПокупателя.НомерСтроки,
	                      |	ИсторияЗаявокПокупателя.СтрокаЗаявки,
	                      |	ИсторияЗаявокПокупателя.СтрокаПрихода,
	                      |	ИсторияЗаявокПокупателя.Отказ,
	                      |	ИсторияЗаявокПокупателя.Порядок
	                      |ИЗ
	                      |	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	                      |ГДЕ
	                      |	ИсторияЗаявокПокупателя.IDSite В(&IDSite)");
	
	Запрос.УстановитьПараметр("IDSite", МассивСтрок(ObjectKey));
	Результат = Запрос.Выполнить();
	
	РегистрыСведений.ИсторияЗаявокПокупателя.СнятьРегистрациюСЗаписей(Результат);
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция МассивОбъектов(Менеджер, ObjectKey)
	
	Массив = Новый Массив;
	МногострочнаяСтрока = СтрЗаменить(ObjectKey, ",", Символы.ПС);
	Для Индекс = 1 По СтрЧислоСтрок(МногострочнаяСтрока) Цикл
		Ключ = СтрПолучитьСтроку(МногострочнаяСтрока, Индекс);
		Если ЭтоUUID(Ключ) Тогда
			РегистрируемыйОбъект = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Ключ));
		Иначе
			РегистрируемыйОбъект = Менеджер.НайтиПоКоду(Ключ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегистрируемыйОбъект) Тогда
			Массив.Добавить(РегистрируемыйОбъект);
		КонецЕсли;
	КонецЦикла;
	Возврат Массив;
	
КонецФункции
Функция МассивСтрок(ObjectKey) Экспорт
	
	Массив = Новый Массив;
	МногострочнаяСтрока = СтрЗаменить(ObjectKey, ",", Символы.ПС);
	Для Индекс = 1 По СтрЧислоСтрок(МногострочнаяСтрока) Цикл
		Ключ = СтрПолучитьСтроку(МногострочнаяСтрока, Индекс);
		Массив.Добавить(Ключ);
	КонецЦикла;

	Возврат Массив;
	
КонецФункции
Функция ЭтоUUID(Ключ) Экспорт
	
	Возврат СтрЧислоВхождений(Ключ, "-") = 4;
	
КонецФункции
#КонецОбласти

#Область ПолучениеНоменклатурыССайта
Функция НоменклатураПоUUID(UUID, СтруктураОтчета, ПредопределенноеНаименованиеНоменклатуры = "") Экспорт
	
	НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
	Если ЗначениеЗаполнено(НоменклатураСсылка.ВерсияДанных) Тогда
		Номенклатура = НоменклатураСсылка;
	Иначе
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		Отказ = Ложь;
		//Получили реквизиты номенклатуры с WS Сайта//
		ДокументDOM  = ДанныеНоменклатурыПоUUID(UUID, Отказ);
		Если НЕ Отказ Тогда
			//Сайт выдал читаемый результат//
			Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
			
			НоменклатураНайдена = (ЗначениеЭлементаDOM(ДокументDOM, "/response/success", Разыменователь, 0) = "1");
			Если НоменклатураНайдена Тогда
				
				Если ЗначениеЗаполнено(ПредопределенноеНаименованиеНоменклатуры) Тогда
					Наименование = ПредопределенноеНаименованиеНоменклатуры;
				Иначе
					Наименование = ЗначениеЭлементаDOM(ДокументDOM, "/response/data/name", Разыменователь, "");
				КонецЕсли;
				БрендНаименование = ЗначениеЭлементаDOM(ДокументDOM, "/response/data/brand/name", Разыменователь, "");
				БрендUUID = ЗначениеЭлементаDOM(ДокументDOM, "/response/data/brand/uuid", Разыменователь, "");
				Артикул = ЗначениеЭлементаDOM(ДокументDOM, "/response/data/number", Разыменователь, "");
				Бренд = БрендПоUUID(БрендUUID, Наименование);
				
				Попытка
					//Создаем новый элемент с нужными реквизитами//
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
					ЕдиницаИзмерения.Владелец = НоменклатураСсылка;
					ЕдиницаИзмерения.ЕдиницаПоКлассификатору = Константы.ОсновнаяЕдиницаПоКлассификатору.Получить();
					ЕдиницаИзмерения.Коэффициент = 1;
					ЕдиницаИзмерения.Наименование = ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование;
					ЕдиницаИзмерения.ОбменДанными.Загрузка = Истина;
					ЕдиницаИзмерения.УстановитьНовыйКод();
					ЕдиницаИзмерения.Записать();
					
					НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
					НовыйЭлемент.УстановитьСсылкуНового(НоменклатураСсылка);
					НовыйЭлемент.Наименование = Наименование;
					НовыйЭлемент.Изготовитель = Бренд;
					НовыйЭлемент.Артикул = Артикул;
					НовыйЭлемент.ЕдиницаХраненияОстатков = ЕдиницаИзмерения.Ссылка;
					НовыйЭлемент.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
					НовыйЭлемент.ДатаСоздания = ТекущаяДата();
					НовыйЭлемент.ОбменДанными.Загрузка = Истина;
					НовыйЭлемент.УстановитьНовыйКод();
					НовыйЭлемент.Записать();
					
					Номенклатура = НовыйЭлемент.Ссылка;
				Исключение
					СтруктураОтчета.Отказ = Истина;
					ТекстОшибки = "Не записать номенклатуру: UUID = <" + UUID + ">" + ОписаниеОшибки();
					ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции
Функция ДанныеНоменклатурыПоUUID(UUID, Отказ)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	ПараметрыЗапроса = "uuid=" + UUID;
	
	HTTPСоединение = Новый HTTPСоединение(АдресWEBСервиса());
	HTTPЗапрос = Новый HTTPЗапрос("/uuid/part_by_uuid", Заголовки); 
	HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		Текст = Ответ.ПолучитьТелоКакСтроку();
			
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);

		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	Иначе
		Отказ = Истина;
		ДокументDOM = Неопределено;
	КонецЕсли;
	
	Возврат ДокументDOM;
	
КонецФункции
Функция БрендПоUUID(UUID, Наименование)
	
	БрендСсылка = Справочники.Изготовители.ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
	Если НЕ ЗначениеЗаполнено(БрендСсылка.ВерсияДанных) Тогда
		
		НовыйЭлемент = Справочники.Изготовители.СоздатьЭлемент();
		НовыйЭлемент.УстановитьСсылкуНового(БрендСсылка);
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.Записать();
		
	КонецЕсли;
	
	Возврат БрендСсылка;
	
КонецФункции
Функция АдресWEBСервиса()
	
	Настройка = Справочники.НастройкиРеквизитовДляОбменов.API_Сайт;
	
	Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда
		Адрес = Настройка.СтрокаДляРабочейБазы;
	Иначе
		Адрес = Настройка.СтрокаДляТестовойБазы;
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции
Функция ЗначениеЭлементаDOM(ДокументDOM, Путь, Разыменователь, ЗначениеПоУмолчанию)
	
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath (Путь, ДокументDOM, Разыменователь);
	ПолученныйЭлемент = РезультатXPath.ПолучитьСледующий();
	
	Возврат ?(ПолученныйЭлемент = Неопределено, ЗначениеПоУмолчанию, ПолученныйЭлемент.ТекстовоеСодержимое);
	
КонецФункции
Процедура ДополнитьОшибку(Строка, Дополнение, Разделитель = Неопределено) Экспорт
	
	Разделитель = ?(ЗначениеЗаполнено(Разделитель), Разделитель, Символы.ПС);
	Строка = Строка + ?(Строка = "", "", Символы.ПС) + Дополнение;
	
КонецПроцедуры
#КонецОбласти
