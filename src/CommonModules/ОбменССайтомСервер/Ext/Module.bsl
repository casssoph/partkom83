#Область ЭкспортныеПроцедуры
// Процедура - Получить данные с сайта
// Получает данные с сайта и записывает в рег объектыОбмена
// Параметры:
//  УзелОбмена	 - УзелПланаОбмена	 - Этот узел плана обмена 
//  ИмяМетода	 - Строка -  Имя метода апи сайта для получения данных
//
Процедура ПолучитьДанныеССайта(УзелОбмена,ИмяМетода) Экспорт
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ПолучитьДанныеССайта";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////		
	ИмяПланаОбмена =  ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелОбмена);
	СтруктураУзловОбмена = ПолучитьСтрктуруУзловОбмена(УзелОбмена,ИмяПланаОбмена);	
	АдресВебСервиса = ПолучитьАдресВэбСервиса(ИмяПланаОбмена);	
	Прокси  = ПолучитьWSПрокси(АдресВебСервиса);
	
	ОтветВэбСервиса = Прокси.GetExchangeMessage(ИмяМетода,СтруктураУзловОбмена.КодПолучателя, СтруктураУзловОбмена.НомерПринятого1С);
	//ОтветВэбСервиса  = Временный_СоообщениеОбмена();
	
	РаспакованноеСообщение = ОбменДаннымиСервер.РаспаковатьСообщениеОбмена(ОтветВэбСервиса);

	
	ДанныеХДТО =  ОбработатьОтветВэбСервиса(РаспакованноеСообщение);
	ОбъектыXDTO =  ДанныеХДТО.Объекты.ПолучитьСписок("Объект");
	
	НомерСообщения = ДанныеХДТО.НомерСообщения;
	ДатаСообщения = ТекущаяДатаСеанса();
	НомерПринятогоСайтом = Мин(СтруктураУзловОбмена.НомерОтправленного1С, ДанныеХДТО.НомерПринятого);
	
	Если НомерСообщения <= СтруктураУзловОбмена.НомерПринятого1С Тогда
		Текстсообщения = "[ЗагрузитьСообщениеОбмена]: неправильное значение элемента ""НомерСообщения"": сообщение с таким номером уже загружалось";
		КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(УзелОбмена,ПредопределенноеЗначение("Справочник.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаССайтом"),
		Текстсообщения,СтруктураУзловОбмена,Истина);
		Возврат 
	КонецЕсли;
	
	Если ОбъектыXDTO.Количество() > 0 Тогда
		ОбменДаннымиВызовСервера.ЗарегистрироватьСообщениеВИсторииОбменаССайтом(СтруктураУзловОбмена.ИсходящийУзел.ИдентификаторУзла, СтруктураУзловОбмена.КодПолучателя,
		ОтветВэбСервиса, НомерСообщения);
		РазобратьПолученныеОбъекты(ОбъектыXDTO, НомерСообщения,ИмяПланаОбмена,,ДатаСообщения);
	КонецЕсли;
	
	//# Kalinin V.A. ( 2019-03-21 )	
	ОбменДаннымиКлиентСервер.ЗафиксироватьСообщениеВИсторииОбмена(НомерСообщения, СтруктураУзловОбмена.ВходящийУзел,  РаспакованноеСообщение,,,,ДатаСообщения, ОбъектыXDTO.Количество());	
	
	ОбновитьНомерОтправленого(СтруктураУзловОбмена.ВходящийУзел,НомерСообщения);	
	
КонецПроцедуры	

// Процедура - Обработать объекты обмена
//
// Параметры:
//  УзелОбмена	 - УзелПланаОбмена	 - Этот узел обмен
//  НомерПотока	 - Число	 -  Номер потока для потоковой загрузки
//
Процедура ОбработатьОбъектыОбмена(УзелОбмена, НомерПотока = Неопределено) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ОбработатьОбъектыОбмена";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	ИмяПланаОбмена =  ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелОбмена);
	
	ВидОбмена  = ПредопределенноеЗначение("Перечисление.ВидыОбменов."+ИмяПланаОбмена);
	
	ВыборкаПоНомеруСообщения = ОбъектыКОбработке(ВидОбмена, , НомерПотока);
	
	ОбщиеНастройкиЗагрузки = ОбщиеНастройкиЗагрузки();
	Пока ВыборкаПоНомеруСообщения.Следующий() цикл 	
	
		ВыборкаСтрок = ВыборкаПоНомеруСообщения.Выбрать();	
		
		ОбменДаннымиКлиентСервер.НачатьЗаписьВИсториюОбменовПоОбъектам();	
		
		Пока ВыборкаСтрок.Следующий() Цикл
			СтруктураОтчета = Новый Структура("СсылкаНаОбъект,Ошибка,ВременнаяОшибка,ТекстОшибки, Обработано", Неопределено, Ложь, Ложь, "", Ложь);
			
			ЗагрузитьОбъект(ВыборкаСтрок, СтруктураОтчета, ОбщиеНастройкиЗагрузки);
			
			// 25.03.19 Строганов Роман > 
			Если ВидОбмена = Перечисления.ВидыОбменов.ОбменПартКом83_TopLog Тогда
				ТелоСообщения = ВыборкаСтрок.Данные;
			Иначе
				ТелоСообщения = ЗначениеИзСтрокиВнутр(ВыборкаСтрок.Данные);
			КонецЕсли;
			// 25.03.19 Строганов Роман <
			
			Если ВидОбмена <> Перечисления.ВидыОбменов.ОбменПартКом83_TopLog Тогда // 05.04.19 Строганов Роман > По ТопЛогу история по объектам фиксируется на уровне модуля менеджера.	
				ОбменДаннымиКлиентСервер.ДобавитьСтрокуИсторииПоОбъекту(СтруктураОтчета.СсылкаНаОбъект, ТелоСообщения,,СтруктураОтчета.Ошибка,СтруктураОтчета.ТекстОшибки);
			КонецЕсли;
			
			УстановитьПризнакОбработаноДляЗаписи(ВыборкаСтрок,СтруктураОтчета);
			
		КонецЦикла;
		
		СтруктураЗаписи  = ПолучитьСтруктуЗаписиСообщения(ВыборкаПоНомеруСообщения, УзелПланаОбмена(ИмяПланаОбмена,Истина,УзелОбмена),ВыборкаСтрок.Данные);
		РегистрыСведений.ИсторияОбменовПоОбъектам.СоздатьЗаписиПоСообщению(СтруктураЗаписи, ОбменДаннымиКлиентСервер.ПолучитьТаблицуИсторииИзПараметраСеанса());
		
		ОбменДаннымиКлиентСервер.ИнициализироватьПараметрыДляХраненияТекущихДанных(); 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокОшибокПоСТрокамДокумента(МассивОшибок)
	
	СоответсвиеОшибок = новый Соответствие();
	Для каждого СтруктураОшибки   из МассивОшибок  цикл 
		СоответсвиеОшибок.Вставить(СтруктураОшибки.НомерСтроки, 
		?(СоответсвиеОшибок.Получить(СтруктураОшибки.НомерСтроки)  = Неопределено, 
		СтруктураОшибки.ТекстДляОднойОшибки,
		СоответсвиеОшибок.Получить(СтруктураОшибки.НомерСтроки)+ Символы.ПС +
		СтруктураОшибки.ТекстДляОднойОшибки)); 
	КонецЦикла;	
	
	Возврат СоответсвиеОшибок;
КонецФункции	


Функция УзелПланаОбмена(ИмяПланаОбмена,Входящий = Истина,УзелПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос ;
	ТекстЗапроса  = "ВЫБРАТЬ
	                |	ПланОбменаССайтом.Ссылка
	                |ИЗ
	                |	ПланОбмена.%1 КАК ПланОбменаССайтом
	                |ГДЕ
	                |	НЕ ПланОбменаССайтом.ЭтотУзел
	                |	И (&Входящий
	                |				И ПланОбменаССайтом.Входящий
	                |			ИЛИ НЕ &Входящий
	                |				И ПланОбменаССайтом.Исходящий)";
	Запрос.УстановитьПараметр("Входящий", Входящий);
 	Запрос.Текст = СтрШаблон(ТекстЗапроса,ИмяПланаОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, УзелПоУмолчанию);
	
КонецФункции

Процедура ОбновитьНомерОтправленого(УзелОбмена,НомерСообщения) Экспорт 
	ОбъектУзла = УзелОбмена.ПолучитьОбъект();
	ОбъектУзла.НомерПринятого = НомерСообщения;
	ОбъектУзла.ОбменДанными.Загрузка = Истина;
	ОбъектУзла.Записать();
КонецПроцедуры	

Процедура ЗаполнитьКолонкуПоГУИДу(Таблица,МенеджерОбъекта,ИмяСвойстваГуида,ИмяНовойКолоки) Экспорт
	Таблица.колонки.Добавить(ИмяНовойКолоки, ОбщегоНазначения.ОписаниеТипаИзСтроки(СтрЗаменить(Строка(МенеджерОбъекта),"Менеджер","Ссылка")));
	Для Каждого Строка из Таблица цикл 
		Строка[ИмяНовойКолоки] = МенеджерОбъекта.ПолучитьСсылку(Строка[ИмяСвойстваГуида]);
	КонецЦикла;		
	
КонецПроцедуры	

#КонецОбласти

#Область ЗагрузкаОбъектов_Вызов

Процедура ЗагрузитьОбъект(ДанныеОбъекта, СтруктураОтчета, ОбщиеНастройкиЗагрузки)
	
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ЗагрузитьОбъект";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////	
	Если ДанныеОбъекта.ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаРозница Тогда
		ЗагрузкаОбъекта_ЗаявкаРозница(ДанныеОбъекта.Данные, СтруктураОтчета);
	ИначеЕсли ДанныеОбъекта.ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаказПоставщику тогда 
		ЗагрузкаОбъекта_ЗаказПоставщику(ДанныеОбъекта.Данные, СтруктураОтчета);
	ИначеЕсли ДанныеОбъекта.ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ПоступлениеТоваровУслуг тогда 
		ЗагрузкаОбъекта_ПоступлениеТоваровУслуг(ДанныеОбъекта.Данные, СтруктураОтчета);
		// 06.03.19 Строганов Роман > 
	ИначеЕсли ДанныеОбъекта.ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаПокупателя Тогда
		ЗагрузкаОбъекта_ЗаявкаПокупателя(ДанныеОбъекта.Данные, СтруктураОтчета, ДанныеОбъекта.НомерСообщения);
		// 11.03.19 Строганов Роман > 	 
	ИначеЕсли ДанныеОбъекта.ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаПокупателяОтмена Тогда
		ЗагрузкаОбъекта_ОтменаЗаявкиПокупателя(ДанныеОбъекта.Данные, СтруктураОтчета, ДанныеОбъекта.НомерСообщения); 
	ИначеЕсли ДанныеОбъекта.ВидОбмена = ПредопределенноеЗначение("Перечисление.ВидыОбменов.ОбменПартКом83_TopLog") Тогда
		ПланыОбмена.ОбменПартКом83_TopLog.ЗагрузитьОбъектОбменаТопЛог(ДанныеОбъекта, СтруктураОтчета, Ложь, ДанныеОбъекта.НомерСообщения);
	КонецЕсли;
	// 11.03.19 Строганов Роман <
	
КонецПроцедуры

Процедура ЗагрузкаОбъекта_ЗаявкаРозница(ДанныеОбъекта,СтруктураОтчета)

	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ЗагрузкаОбъекта_ЗаявкаРозница";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхСайта  = ЗначениеИзСтрокиВнутр(ДанныеОбъекта);
	
	если не СтруктураДанныхСайта.items.Количество() тогда 
		возврат 
	КонецЕсли;
	
	Если НЕ СтруктураОтчета.Ошибка Тогда
		Склад = СкладРозничнойЗаявки(СтруктураДанныхСайта);
		
		ТаблицаТоваров = ПреобразоватьМассивСтрокВТаблицуЗначений(СтруктураДанныхСайта.items);
		ЗаполнитьКолонкуПоГУИДу(ТаблицаТоваров,Справочники.Номенклатура,"part_uuid","Номенклатура");
		ПакетРазбития = ПолучитьНаборРазбитыхПоОстаткамТаблиц(ТаблицаТоваров,Склад);
		ВыборкаСкладов = ПакетРазбития[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТаблицаОтказов = ПакетРазбития[2].Выгрузить();
		
		// 18.03.2019 Горохов Пётр XX-1738 Заполнять услугу по клиенту с розничного сайта
		ДобавитьУслугуДоставки = СтруктураДанныхСайта.delivery_needed;
		СтоимостьДоставки = СтруктураДанныхСайта.delivery_price;
		АдресДоставки = СтруктураДанныхСайта.delivery_address;
		
		Пока ВыборкаСкладов.Следующий() Цикл 
			 Склад = ВыборкаСкладов.Склад;		 
			 Если ЗаявкаНеСуществует(СтруктураДанныхСайта.number,Склад,ДобавитьУслугуДоставки) тогда
				 СтруктураЗаявки = СоздатьСтруктуруЗаявкиПоСкладу(Склад,СтруктураДанныхСайта,ВыборкаСкладов.Выбрать());
				 ЗаписатьДокументЗаявки(СтруктураЗаявки,СтруктураОтчета, ДобавитьУслугуДоставки, СтоимостьДоставки, АдресДоставки);
			 КонецЕсли;			 
		КонецЦикла;	
		
	КонецЕсли;	
	
	
КонецПроцедуры	

Процедура  ЗагрузкаОбъекта_ПоступлениеТоваровУслуг(ДанныеОбъекта, СтруктураОтчета);
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ЗагрузкаОбъекта_ПоступлениеТоваровУслуг";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	СтруктураДанныхСайта  = ЗначениеИзСтрокиВнутр(ДанныеОбъекта);
	
	если не СтруктураДанныхСайта.items.Количество() тогда 
		возврат 
	КонецЕсли;
	
	Если НЕ СтруктураОтчета.Ошибка Тогда
		Документы.ПоступлениеТоваровУслуг.ЗагрузитьЭлемент(СтруктураДанныхСайта,ПланыОбмена.ОбменПартКом83_ОкноПоставщика.ПустаяСсылка(),СтруктураОтчета.Ошибка,,,СтруктураОтчета);		
		//Если МассивДокументов.Количество() тогда  
		//	СтруктураОтчета.СсылкаНаОбъект = МассивДокументов[0];	
		//Конецесли;		
	КонецЕсли;	
	
	Если  СтруктураОтчета.Ошибка Тогда
	
	КонецЕсли;
КонецПроцедуры




Процедура ЗагрузкаОбъекта_ЗаказПоставщику(ДанныеОбъекта,СтруктураОтчета)

	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ЗагрузкаОбъекта_ЗаказПоставщику";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхСайта  = ЗначениеИзСтрокиВнутр(ДанныеОбъекта);
	
	если не СтруктураДанныхСайта.items.Количество() тогда 
		возврат 
	КонецЕсли;
	
	Если НЕ СтруктураОтчета.Ошибка Тогда
		
		СтруктураКорректировкиЗаказа   = Новый Структура;
		
		ДокументЗаказ = Документы.ЗаказПоставщику.ПолучитьСсылку(СтруктураДанныхСайта.order_uuid);
		
		ПоследняяКорректировка  =ОбщегоНазначения.ПолучитьПоследнююКорректировкуЗаказа(ДокументЗаказ);
		ПроверитьКорректностьЗаказа(ПоследняяКорректировка,СтруктураДанныхСайта.order_uuid,СтруктураОтчета);
		
		Если СтруктураОтчета.Ошибка тогда 
			Возврат 
		КонецЕсли;	
		
		СтруктураКорректировкиЗаказа.вставить("Дата",ТекущаяДата());
		СтруктураКорректировкиЗаказа.Вставить("ДокументОснование",ДокументЗаказ);
		СтруктураКорректировкиЗаказа.Вставить("СтатусДокумента",Справочники.СтатусыДокументов.ОтправленПоставщику);
		СтруктураОтчета.СсылкаНаОбъект =  ДокументЗаказ;
		
		ТаблицаТоваровСайта = ПреобразоватьМассивСтрокВТаблицуЗначений(СтруктураДанныхСайта.items);
	
		СтруктураТаблицКорректировкиЗаказа  =  ПолучитьСтруктуруТаблицДокумента_ЗаказПоставщику(ПоследняяКорректировка,ТаблицаТоваровСайта,СтруктураДанныхСайта) ;
				
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураКорректировкиЗаказа,СтруктураТаблицКорректировкиЗаказа);
		
		РаботаСоСтатусамиДокументовСервер.СоздатьКорректировкуЗаказаЗаявки(ПоследняяКорректировка,СтруктураКорректировкиЗаказа,истина); 
		
	КонецЕсли;	
	
КонецПроцедуры	

// 06.03.19 Строганов Роман > XX-2047 Ускорить загрузку Заявки Покупателя 
Процедура  ЗагрузкаОбъекта_ЗаявкаПокупателя(ДанныеОбъекта, СтруктураОтчета, НомерСообщения);
	
	ПланыОбмена.ОбменПартКом83_Сайт_состояние_заявок.ОбработатьОбъектЗаявкиССайта(ДанныеОбъекта, НомерСообщения, Ложь, СтруктураОтчета);
	
КонецПроцедуры

Процедура  ЗагрузкаОбъекта_ОтменаЗаявкиПокупателя(ДанныеОбъекта, СтруктураОтчета, НомерСообщения)
	
	ПланыОбмена.ОбменПартКом83_Сайт_состояние_заявок.ОбработатьОбъектОтменыЗаявкиССайта(ДанныеОбъекта, НомерСообщения, Ложь, СтруктураОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОбъекта_ЗаказПоставщику
Процедура ПроверитьКорректностьЗаказа(ДокументЗаказ,GUIDЗаказа,СтруктураОтчета)
	
	 	Если НЕ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаказ,"ВерсияДанных")) Тогда
			ДобавитьОшибкуВСтруктуруОтчета(СтруктураОтчета, "ЗаказПоставщикуМодульМенеджера.ЗагрузитьЭлемент(): не найден документ с GUID <" + GUIDЗаказа + ">");
		ИначеЕсли ДокументЗаказ.ПометкаУдаления Тогда
			ДобавитьОшибкуВСтруктуруОтчета(СтруктураОтчета, "ЗаказПоставщикуМодульМенеджера.ЗагрузитьЭлемент(): заказ с GUID <" + GUIDЗаказа + "> помечен на удаление");
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаказ,"СтатусДокумента") = Справочники.СтатусыДокументов.ЗаказПоставщикуЗакрыт Тогда
			ДобавитьОшибкуВСтруктуруОтчета(СтруктураОтчета, "ЗаказПоставщикуМодульМенеджера.ЗагрузитьЭлемент(): ошибка загрузки из окна поставщика, заказ закрыт <" + ДокументЗаказ + ">");
		КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСтруктуруТаблицДокумента_ЗаказПоставщику(ДокументЗаказ,ТаблицаТоваровСайта,СтруктураДанныхСайта)
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ПолучитьСтруктуруТаблицДокумента_ЗаказПоставщику";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
	
	СтруктураТаблиц = Новый структура;	
	Запрос  = новый запрос("ВЫБРАТЬ
	                       |	ДанныеСайта.shipping_amount,
	                       |	ВЫРАЗИТЬ(ДанныеСайта.replacement_articul КАК СТРОКА(25)) КАК replacement_articul,
	                       |	ВЫРАЗИТЬ(ДанныеСайта.replacement_brand КАК СТРОКА(100)) КАК replacement_brand,
	                       |	ДанныеСайта.item_price,
	                       |	ВЫРАЗИТЬ(ДанныеСайта.item_id КАК СТРОКА(40)) КАК item_id,
	                       |	ДанныеСайта.expected_amount,
	                       |	&delivery_date
	                       |ПОМЕСТИТЬ ВТ_ДанныеСайта
	                       |ИЗ
	                       |	&ТаблицаТоваровСайта КАК ДанныеСайта
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки,
	                       |	ВТ_ДанныеСайта.item_price КАК Цена,
	                       |	ВТ_ДанныеСайта.shipping_amount КАК КоличествоКОтправкеПоставщиком,
	                       |	СпрНоменклатура.Ссылка КАК НоменклатураЗамена,
	                       |	ВЫБОР
	                       |		КОГДА ИдентификаторыСтрокЗаявок.Количество - ЕСТЬNULL(ОтказыПоЗаявкамОбороты.КоличествоОборот, 0) - ВТ_ДанныеСайта.shipping_amount < 0
	                       |			ТОГДА 0
	                       |		ИНАЧЕ ИдентификаторыСтрокЗаявок.Количество - ЕСТЬNULL(ОтказыПоЗаявкамОбороты.КоличествоОборот, 0) - ВТ_ДанныеСайта.shipping_amount
	                       |	КОНЕЦ КАК КоличествоОтказа,
	                       |	ВТ_ДанныеСайта.delivery_date КАК ДатаДоставки
	                       |ПОМЕСТИТЬ ВТ_ДанныеСайтаНормализованные
	                       |ИЗ
	                       |	ВТ_ДанныеСайта КАК ВТ_ДанныеСайта
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	                       |		ПО ВТ_ДанныеСайта.replacement_brand = СпрНоменклатура.Изготовитель.Наименование
	                       |			И ВТ_ДанныеСайта.replacement_articul = СпрНоменклатура.Артикул
	                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                       |		ПО ВТ_ДанныеСайта.item_id = ИдентификаторыСтрокЗаявок.IDSite
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтказыПоЗаявкам.Обороты КАК ОтказыПоЗаявкамОбороты
	                       |		ПО ВТ_ДанныеСайта.item_id = ОтказыПоЗаявкамОбороты.СтрокаЗаявки.IDSite
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ЗаказПоставщикуТовары.СтрокаЗаявки,
	                       |	ЗаказПоставщикуТовары.Номенклатура,
	                       |	ЗаказПоставщикуТовары.Количество,
	                       |	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
	                       |	ЗаказПоставщикуТовары.Коэффициент,
	                       |	ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, ЗаказПоставщикуТовары.Цена) КАК Цена,
	                       |	ЗаказПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, ЗаказПоставщикуТовары.Цена) КАК Сумма,
	                       |	ЗаказПоставщикуТовары.СтавкаНДС,
	                       |	ВЫБОР
	                       |		КОГДА ЗаказПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	                       |			ТОГДА ЗаказПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, ЗаказПоставщикуТовары.Цена) / 100 * 20
	                       |		КОГДА ЗаказПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	                       |			ТОГДА ЗаказПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, ЗаказПоставщикуТовары.Цена) / 100 * 18
	                       |		КОГДА ЗаказПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	                       |			ТОГДА ЗаказПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, ЗаказПоставщикуТовары.Цена) / 100 * 18 / (ЗаказПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, ЗаказПоставщикуТовары.Цена) / 100) * 118
	                       |		КОГДА ЗаказПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	                       |			ТОГДА ЗаказПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, ЗаказПоставщикуТовары.Цена) / 100 * 10
	                       |		КОГДА ЗаказПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	                       |			ТОГДА ЗаказПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, ЗаказПоставщикуТовары.Цена) / 100 * 10 / (ЗаказПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, ЗаказПоставщикуТовары.Цена) / 100) * 110
	                       |		ИНАЧЕ 0
	                       |	КОНЕЦ КАК СуммаНДС,
	                       |	ЗаказПоставщикуТовары.Комментарий,
	                       |	ЗаказПоставщикуТовары.СрокГарантированныйЗаказа,
	                       |	ВЫБОР
	                       |		КОГДА ВТ_ДанныеСайтаНормализованные.ДатаДоставки ЕСТЬ NULL
	                       |				ИЛИ ВТ_ДанныеСайтаНормализованные.ДатаДоставки = ДАТАВРЕМЯ(1, 1, 1)
	                       |			ТОГДА ЗаказПоставщикуТовары.СрокОжидаемыйЗаказа
	                       |		ИНАЧЕ ВТ_ДанныеСайтаНормализованные.ДатаДоставки
	                       |	КОНЕЦ КАК СрокОжидаемыйЗаказа,
	                       |	ЗаказПоставщикуТовары.СтрокаЗаказа,
	                       |	ЗаказПоставщикуТовары.КлючСвязи,
	                       |	ЗаказПоставщикуТовары.СостояниеСтрокиЗаказа,
	                       |	ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.КоличествоКОтправкеПоставщиком, 0) КАК КоличествоКОтправкеПоставщиком,
	                       |	ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.КоличествоОтказа, 0) КАК КоличествоОтказа,
	                       |	ВТ_ДанныеСайтаНормализованные.НоменклатураЗамена
	                       |ПОМЕСТИТЬ ВТ_ТаблицаТоваров
	                       |ИЗ
	                       |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеСайтаНормализованные КАК ВТ_ДанныеСайтаНормализованные
	                       |		ПО ЗаказПоставщикуТовары.СтрокаЗаявки = ВТ_ДанныеСайтаНормализованные.СтрокаЗаявки
	                       |ГДЕ
	                       |	ЗаказПоставщикуТовары.Ссылка = &ДокументЗаказ
	                       |
	                       |ОБЪЕДИНИТЬ ВСЕ
	                       |
	                       |ВЫБРАТЬ
	                       |	КорректировкаЗаказаПоставщикуТовары.СтрокаЗаявки,
	                       |	КорректировкаЗаказаПоставщикуТовары.Номенклатура,
	                       |	КорректировкаЗаказаПоставщикуТовары.Количество,
	                       |	КорректировкаЗаказаПоставщикуТовары.ЕдиницаИзмерения,
	                       |	КорректировкаЗаказаПоставщикуТовары.Коэффициент,
	                       |	ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, КорректировкаЗаказаПоставщикуТовары.Цена),
	                       |	КорректировкаЗаказаПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, КорректировкаЗаказаПоставщикуТовары.Цена),
	                       |	КорректировкаЗаказаПоставщикуТовары.СтавкаНДС,
	                       |	ВЫБОР
	                       |		КОГДА КорректировкаЗаказаПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	                       |			ТОГДА КорректировкаЗаказаПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, КорректировкаЗаказаПоставщикуТовары.Цена) / 100 * 20
	                       |		КОГДА КорректировкаЗаказаПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	                       |			ТОГДА КорректировкаЗаказаПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, КорректировкаЗаказаПоставщикуТовары.Цена) / 100 * 18
	                       |		КОГДА КорректировкаЗаказаПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	                       |			ТОГДА КорректировкаЗаказаПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, КорректировкаЗаказаПоставщикуТовары.Цена) / 100 * 18 / (КорректировкаЗаказаПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, КорректировкаЗаказаПоставщикуТовары.Цена) / 100) * 118
	                       |		КОГДА КорректировкаЗаказаПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	                       |			ТОГДА КорректировкаЗаказаПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, КорректировкаЗаказаПоставщикуТовары.Цена) / 100 * 10
	                       |		КОГДА КорректировкаЗаказаПоставщикуТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	                       |			ТОГДА КорректировкаЗаказаПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, КорректировкаЗаказаПоставщикуТовары.Цена) / 100 * 10 / (КорректировкаЗаказаПоставщикуТовары.Количество * ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.Цена, КорректировкаЗаказаПоставщикуТовары.Цена) / 100) * 110
	                       |		ИНАЧЕ 0
	                       |	КОНЕЦ,
	                       |	КорректировкаЗаказаПоставщикуТовары.Комментарий,
	                       |	КорректировкаЗаказаПоставщикуТовары.СрокГарантированныйЗаказа,
	                       |	ВЫБОР
	                       |		КОГДА ВТ_ДанныеСайтаНормализованные.ДатаДоставки ЕСТЬ NULL
	                       |				ИЛИ ВТ_ДанныеСайтаНормализованные.ДатаДоставки = ДАТАВРЕМЯ(1, 1, 1)
	                       |			ТОГДА КорректировкаЗаказаПоставщикуТовары.СрокОжидаемыйЗаказа
	                       |		ИНАЧЕ ВТ_ДанныеСайтаНормализованные.ДатаДоставки
	                       |	КОНЕЦ,
	                       |	КорректировкаЗаказаПоставщикуТовары.СтрокаЗаказа,
	                       |	КорректировкаЗаказаПоставщикуТовары.КлючСвязи,
	                       |	КорректировкаЗаказаПоставщикуТовары.СостояниеСтрокиЗаказа,
	                       |	ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.КоличествоКОтправкеПоставщиком, 0),
	                       |	ЕСТЬNULL(ВТ_ДанныеСайтаНормализованные.КоличествоОтказа, 0),
	                       |	ВТ_ДанныеСайтаНормализованные.НоменклатураЗамена
	                       |ИЗ
	                       |	Документ.КорректировкаЗаказаПоставщику.Товары КАК КорректировкаЗаказаПоставщикуТовары
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеСайтаНормализованные КАК ВТ_ДанныеСайтаНормализованные
	                       |		ПО КорректировкаЗаказаПоставщикуТовары.СтрокаЗаявки = ВТ_ДанныеСайтаНормализованные.СтрокаЗаявки
	                       |ГДЕ
	                       |	КорректировкаЗаказаПоставщикуТовары.Ссылка = &ДокументЗаказ
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ВТ_ТаблицаТоваров.СтрокаЗаявки,
	                       |	ВТ_ТаблицаТоваров.Номенклатура,
	                       |	ВТ_ТаблицаТоваров.Количество,
	                       |	ВТ_ТаблицаТоваров.ЕдиницаИзмерения,
	                       |	ВТ_ТаблицаТоваров.Коэффициент,
	                       |	ВТ_ТаблицаТоваров.Цена,
	                       |	ВТ_ТаблицаТоваров.Сумма,
	                       |	ВТ_ТаблицаТоваров.СтавкаНДС,
	                       |	ВТ_ТаблицаТоваров.СуммаНДС,
	                       |	ВТ_ТаблицаТоваров.Комментарий,
	                       |	ВТ_ТаблицаТоваров.СрокГарантированныйЗаказа,
	                       |	ВТ_ТаблицаТоваров.СтрокаЗаказа,
	                       |	ВТ_ТаблицаТоваров.КлючСвязи,
	                       |	ВТ_ТаблицаТоваров.СостояниеСтрокиЗаказа,
	                       |	ВТ_ТаблицаТоваров.КоличествоКОтправкеПоставщиком,
	                       |	ВТ_ТаблицаТоваров.КоличествоОтказа,
	                       |	ВТ_ТаблицаТоваров.НоменклатураЗамена
	                       |ИЗ
	                       |	ВТ_ТаблицаТоваров КАК ВТ_ТаблицаТоваров
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	ВТ_ТаблицаТоваров.КлючСвязи,
	                       |	ВТ_ТаблицаТоваров.СтрокаЗаявки,
	                       |	ВТ_ТаблицаТоваров.СтрокаЗаказа,
	                       |	ВТ_ТаблицаТоваров.КоличествоОтказа КАК Количество
	                       |ИЗ
	                       |	ВТ_ТаблицаТоваров КАК ВТ_ТаблицаТоваров
	                       |ГДЕ
	                       |	ВТ_ТаблицаТоваров.КоличествоОтказа > 0");	
	Запрос.УстановитьПараметр("ТаблицаТоваровСайта",ТаблицаТоваровСайта);
	Запрос.УстановитьПараметр("ДокументЗаказ",ДокументЗаказ);
	Запрос.УстановитьПараметр("delivery_date",СтруктураДанныхСайта.delivery_date);
	
	Результат = Запрос.ВыполнитьПакет();
	СтруктураТаблиц.Вставить("Товары",Результат[3].Выгрузить());
	ПричиныОтказов =  ДокументЗаказ.ПричиныОтказов.Выгрузить();
	ВыборкаОтказов  = Результат[4].Выбрать();
	Пока ВыборкаОтказов.Следующий() цикл
		// Не должно тормозить , если что переписать на ДоступноеКоличествоПоЗаявкеКОтказуПоМассивуСтрок(процедура не дотестированая и сырая)
		ДоступноеКоличествоОтказа = ЗаявкиПокупателяСервер.ДоступноеКоличествоПоЗаявкеКОтказу(ВыборкаОтказов.СтрокаЗаявки,ДокументЗаказ.МоментВремени(),Ложь);
		Если ДоступноеКоличествоОтказа>0 тогда 
			НоваяСтрока = ПричиныОтказов.добавить();
			новаястрока.строкаЗаявки =ВыборкаОтказов.СтрокаЗаявки;
			НоваяСтрока.Количество  = Мин(ВыборкаОтказов.Количество,ДоступноеКоличествоОтказа);
			НоваяСтрока.ПричинаОтказа = Справочники.СостоянияСтрокДокументов.НетНаСкладе;
			НоваяСтрока.ЗагруженИзОП = Истина;
		КонецЕсли;	
	КонецЦикла;
	СтруктураТаблиц.Вставить("ПричиныОтказов",ПричиныОтказов);
	
	Возврат СтруктураТаблиц;
КонецФункции

#КонецОбласти

#Область ОбработкаОбъекта_ЗаявкаРозница
Функция ЗаявкаНеСуществует(НомерРозничнойЗаявки,Склад,ДобавитьУслугуДоставки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаПокупателя.Ссылка,
		|	КОЛИЧЕСТВО(ЗаявкаПокупателяУслуги.Номенклатура) КАК ЕстьУслуга
		|ИЗ
		|	Документ.ЗаявкаПокупателя КАК ЗаявкаПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПокупателя.Услуги КАК ЗаявкаПокупателяУслуги
		|		ПО (ЗаявкаПокупателяУслуги.Ссылка = ЗаявкаПокупателя.Ссылка)
		|ГДЕ
		|	ЗаявкаПокупателя.НомерРозничнойЗаявки = &НомерРозничнойЗаявки
		|	И ЗаявкаПокупателя.Склад = &Склад
		|	И ЗаявкаПокупателя.Проведен = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаПокупателя.Ссылка";
	
	Запрос.УстановитьПараметр("НомерРозничнойЗаявки", НомерРозничнойЗаявки);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат Истина;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.ЕстьУслуга > 0 Тогда
			ДобавитьУслугуДоставки = Ложь;
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции	
 
Процедура УстановитьДанныеКонтрагента(СтруктураЗаявки, ДанныеОбъекта)

	 
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Контрагенты.Ссылка
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	НЕ Контрагенты.ПометкаУдаления
	                      |	И Контрагенты.IDРозничногоПокупателя = &IDРозничногоПокупателя");
	Запрос.УстановитьПараметр("IDРозничногоПокупателя", ДанныеОбъекта.client);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//Контрагент уже существует//
		Контрагент = Выборка.Ссылка;
	Иначе
		//Контрагента нет, создаем нового//
		КонтрагентСсылкаНового = Справочники.Контрагенты.ПолучитьСсылку();
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.УстановитьНовыйКод();
		НовыйКонтрагент.УстановитьСсылкуНового(КонтрагентСсылкаНового);

		НовыйКонтрагент.Родитель = Справочники.Контрагенты.КонтрагентыСРозничногоСайта;
		НовыйКонтрагент.IDРозничногоПокупателя = ДанныеОбъекта.client;
		НовыйКонтрагент.Наименование = ДанныеОбъекта.name;
		НовыйКонтрагент.НаименованиеПолное = ДанныеОбъекта.name;
		НовыйКонтрагент.Покупатель = Истина;
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		//НовыйКонтрагент.СайтГруппаКонтрагента = ОбщиеНастройкиЗагрузки.ЦеноваяГруппаРозничныхКонтрагентов;
		НовыйКонтрагент.Регион = СтруктураЗаявки.Регион;
		НовыйКонтрагент.ДатаСоздания = ТекущаяДата();
		
		//Создаем торговую точку.. или не создаем
		Если Истина тогда //ОбщиеНастройкиЗагрузки.СоздаватьТорговуюТочку Тогда		
			ТорговаяТочка = Справочники.ТорговыеТочки.СоздатьЭлемент();
			ТорговаяТочка.Владелец = КонтрагентСсылкаНового;
			ТорговаяТочка.Регион = СтруктураЗаявки.Регион;
			ТорговаяТочка.Наименование = ДанныеОбъекта.name;
			ТорговаяТочка.Код = НовыйКонтрагент.Код;
			ТорговаяТочка.ДополнительныйКомментарий = "Создано для розничного покупателя";
			ТорговаяТочка.ОбменДанными.Загрузка = Истина;
			//#XX-1665 Kalinin V.A. ( 2019-01-29 )
			// 
			Город = ОбменССайтомСерверПовтИсп.ГородКОнтрагента(СтруктураЗаявки.Регион);
			Если не Город = Неопределено тогда 
				ТорговаяТочка.Город  = Город;
			КонецЕсли;	
			
			ТорговаяТочка.Записать();
			
		Иначе
			ТорговаяТочка = Справочники.ТорговыеТочки.ПустаяСсылка();
		КонецЕсли;
		
		//Создаем договор//
		Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Договор.УстановитьНовыйКод();
		Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Договор.Владелец = КонтрагентСсылкаНового;
		Договор.Наименование = "Основной договор";
		Договор.Дата = ТекущаяДата();
		Договор.Организация = СтруктураЗаявки.Организация;
		Договор.ДопустимаяСуммаЗадолженности = 0;
		Договор.ДопустимоеЧислоДнейЗадолженности = 0;
		Договор.КоэффициентСуммыКредита = 1;
		Договор.ВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные;
		Договор.ДоговорНаОферту = Истина;
		Договор.НеКонтролироватьЛимит = Ложь;
		Договор.ДоговорПодписан = Истина;
		Договор.ВалютаВзаиморасчетов =  Константы.ВалютаРегламентированногоУчета.Получить();
		Договор.Номер = "1";
		Договор.ВидРасчетаДней = Перечисления.ВидыРасчетаДней.ПоБанковскимДням;
		Договор.ОбменДанными.Загрузка = Истина;
		Договор.Записать();

		НовыйКонтрагент.ОсновнойДоговорКонтрагента = Договор.Ссылка;
		НовыйКонтрагент.ОсновнаяТорговаяТочка = ТорговаяТочка.Ссылка;
		НовыйКонтрагент.ОбменДанными.Загрузка = Истина;
		НовыйКонтрагент.Записать();
		
		Контрагент = НовыйКонтрагент.Ссылка;
		
		//Запись контактной информации
		ДобавитьКонтактнуюИнформацию(Новый Структура("Объект,Тип,Вид,Представление",
												Контрагент,
												Перечисления.ТипыКонтактнойИнформации.Телефон,
												Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
												ДанныеОбъекта.phone));
	КонецЕсли;

	СтруктураЗаявки.Вставить("Контрагент", Контрагент);	
	СтруктураЗаявки.Вставить("ТорговаяТочка", Контрагент.ОсновнаяТорговаяТочка);	
	СтруктураЗаявки.Вставить("ДоговорКонтрагента", Контрагент.ОсновнойДоговорКонтрагента);	
	СтруктураЗаявки.Вставить("УчитыватьНДС", СтруктураЗаявки.Организация.УчитыватьНДС);	
	СтруктураЗаявки.Вставить("СуммаВключаетНДС", Истина);
	
КонецПроцедуры

Процедура УстановитьДанныеФилиала(СтруктураЗаявки, СтруктураДанныхСайта)
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_УстановитьДанныеФилиала";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Филиал =  Справочники.Филиалы.ПолучитьСсылку(СтруктураДанныхСайта.filial_uuid);
	РеквизитыФилала  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Филиал,"ОсновнойРегионФилиала,ОсновнаяОрганизация");
	СтруктураЗаявки.Вставить("Филиал",Филиал);
	СтруктураЗаявки.Вставить("Организация",РеквизитыФилала.ОсновнаяОрганизация);
	СтруктураЗаявки.Вставить("БанковскийСчет", СтруктураЗаявки.Организация.ОсновнойБанковскийСчет);
	СтруктураЗаявки.Вставить("Регион",Филиал.ОсновнойРегионФилиала);
	
КонецПроцедуры

Процедура УстановитьДанныеМенеджера(СтруктураЗаявки, СтруктураДанныхСайта)
лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_УстановитьДанныеМенеджера";
лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
Если Не лЗамена = Неопределено Тогда
	Выполнить(лЗамена);
	Возврат;
КонецЕсли;

Если ЗначениеЗаполнено(СтруктураДанныхСайта.manager_uuid) тогда 
Менеджер = Справочники.Менеджеры.ПолучитьСсылку(СтруктураДанныхСайта.manager_uuid);
СтруктураЗаявки.Вставить("Менеджер",Менеджер);
СтруктураЗаявки.Вставить("Ответственный",Менеджер.Пользователь);
КонецЕсли;

///////////////////////////////////////////////////////////////////////////	
Конецпроцедуры	

Функция СоздатьСтруктуруЗаявкиПоСкладу(Склад,СтруктураДанныхСайта,ВыборкаОстатков)
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_СоздатьСтруктуруЗаявкиПоСкладу";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	СтруктураЗаявки = Новый Структура;
	//номерСтроки =  СтруктураДанныхСайта.number;
	//СтруктураЗаявки.Вставить("Номер",ПолучитьНомерРозничнойЗаявки(ВыборкаОстатков.ТипПоставки,);
	
	СтруктураЗаявки.Вставить("Склад",Склад);	
	МагазинСамовывозва =  Справочники.Склады.ПолучитьСсылку(СтруктураДанныхСайта.shop_uuid);  
	СтруктураЗаявки.Вставить("МаршрутДоставки",МагазинСамовывозва.МаршрутДоставкиСамовывоза) ;
	СтруктураЗаявки.Вставить("НомерРозничнойЗаявки", СтруктураДанныхСайта.number); 
	СтруктураЗаявки.Вставить("Дата", ТекущаяДата()); 
	СтруктураЗаявки.Вставить("ИсточникЗаявки", Перечисления.ИсточникиЗаявок.СайтРозница);
	СтруктураЗаявки.Вставить("ВалютаДокумента",  Константы.ВалютаРегламентированногоУчета.Получить());
	СтруктураЗаявки.Вставить("КурсВзаиморасчетов", 1);
	СтруктураЗаявки.Вставить("КратностьВзаиморасчетов", 1);
	СтруктураЗаявки.Вставить("Подтверждена", Истина);
	СтруктураЗаявки.Вставить("ТипЦен",  Константы.ТипЦен_дляСайта.Получить());
	СтруктураЗаявки.Вставить("СтатусДокумента", ?(СтруктураЗаявки.Подтверждена, Справочники.СтатусыДокументов.ЗаявкаПокупателяПодтвержден, Справочники.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден));
	СтруктураЗаявки.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаявкаПокупателя.ЗаявкаПокупателя);
	УстановитьДанныеФилиала(СтруктураЗаявки, СтруктураДанныхСайта);
	УстановитьДанныеКонтрагента(СтруктураЗаявки, СтруктураДанныхСайта);
	 //# Kalinin V.A. ( 2019-04-09 )  /*
	УстановитьДанныеМенеджера(СтруктураЗаявки, СтруктураДанныхСайта);
	 
	ДополнитьСтруктуруТаблицамиДокумента(ВыборкаОстатков,СтруктураЗаявки);
Возврат СтруктураЗаявки;	
	
КонецФункции	

Процедура ЗаписатьДокументЗаявки(СтруктураЗаявки, СтруктураОтчета, ДобавитьУслугуДоставки, СтоимостьДоставки = Неопределено, АдресДоставки = Неопределено)
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ЗаписатьДокументЗаявки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	Документ = Документы.ЗаявкаПокупателя.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Документ, СтруктураЗаявки);
	Документ.Товары.Загрузить(СтруктураЗаявки.Товары);
	Документ.ПричиныОтказов.Загрузить(СтруктураЗаявки.ПричиныОтказов);

	// 18.03.2019 Горохов Пётр XX-1738 Заполнять услугу по клиенту с розничного сайта
	Если ДобавитьУслугуДоставки Тогда
		ОписаниеОшибки = "";
		Если СтоимостьДоставки = Неопределено Тогда
			ОписаниеОшибки = "Не указана стоимость доставки";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(АдресДоставки) Тогда
		    ОписаниеОшибки = "Не указан адрес доставки";
		КонецЕсли;
		Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
			СтруктураОтчета.Ошибка = Истина;
			ТекстОшибки = "Ошибка записи документа: " + Символы.ПС + ОписаниеОшибки;
			DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, ТекстОшибки);
			СтруктураОтчета.Вставить("СсылкаНаОбъект", Документы.ЗаявкаПокупателя.ПустаяСсылка());
			
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = Документ.Услуги.Добавить();
		НоваяСтрока.Номенклатура = Константы.УслугаДоставкаРозница;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Цена = СтоимостьДоставки;
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
			
		ДобавитьУслугуДоставки = Ложь;
		
	КонецЕсли;
	
	Попытка
		Документ.ДополнительныеСвойства.Вставить("ЗагрузкаССайта", Истина);
		Документ.Записать(РежимЗаписиДокумента.Проведение);
		
		// 18.03.2019 Горохов Пётр XX-1738 Заполнять услугу по клиенту с розничного сайта
		Если ЗначениеЗаполнено(АдресДоставки) Тогда
			НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Документ.Ссылка);
			НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.АдресДоставкиДляРозницы);
			Запись = НаборЗаписей.Добавить();
			Запись.Объект = Документ.Ссылка;
			Запись.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.АдресДоставкиДляРозницы;
			Запись.Значение = АдресДоставки;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
		СтруктураОтчета.Вставить("СсылкаНаОбъект", Документ.Ссылка);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		СтруктураОтчета.Ошибка = Истина;
		ТекстОшибки = "Ошибка записи документа: " + Символы.ПС + ОписаниеОшибки;
		DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, ТекстОшибки);
		СтруктураОтчета.Вставить("СсылкаНаОбъект", Документы.ЗаявкаПокупателя.ПустаяСсылка());
	КонецПопытки;
	
КонецПроцедуры

Функция  ПолучитьНомерРозничнойЗаявки(ТипПоставки,НомерРозничнойЗаявки)

	Префикс = ПрефиксРозничнойЗаявки()+ПрефиксТипаПоставки(ТипПоставки);
	НомерРозничнойЗаявки =Сред(НомерРозничнойЗаявки,СтрНайти(НомерРозничнойЗаявки,"-")+1);
	НомерСпрефиксом = Префикс+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерРозничнойЗаявки,11-СтрДлина(Префикс))	;
	
	Возврат НомерРозничнойЗаявки;
	

	
КонецФункции	

Функция ПолучитьНаборРазбитыхПоОстаткамТаблиц(ТаблицаТоваров,Склад) 
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ЗагрузкаОбъекта_ПолучитьНаборРазбитыхПоОстаткамТаблиц";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
	
	
	Запрос = новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДанныеСайта.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество,
	|	ДанныеСайта.price КАК Цена,
	|	ДанныеСайта.quantity КАК Количество,
	|	ДанныеСайта.quantity * ДанныеСайта.price КАК Сумма,
	|	ДанныеСайта.site_id КАК IDSite,
	|	&Склад,
	|	ДанныеСайта.description КАК КомментарийИзСайта
	|ПОМЕСТИТЬ ВТТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ДанныеСайта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Количество,
	|	1 КАК Приоритет,
	|	ЗНАЧЕНИЕ(Перечисление.ТипПоставки.Сток) КАК ТипПоставки,
	|	ПрайсыПоставщиков.Ссылка КАК ПрайсПоставщика,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(40)) КАК IDSite,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(1024)) КАК КомментарийИзСайта,
	|	0 КАК Цена,
	|	0 КАК Сумма,
	|	ЛОЖЬ КАК Отказ
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Склад) В
	|				(ВЫБРАТЬ
	|					ВТТоваров.Номенклатура КАК Номенклатура,
	|					ВТТоваров.Склад КАК Склад
	|				ИЗ
	|					ВТТоваров КАК ВТТоваров)) КАК ТоварыНаСкладахОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрайсыПоставщиков КАК ПрайсыПоставщиков
	|		ПО ТоварыНаСкладахОстатки.Склад = ПрайсыПоставщиков.Владелец
	|ГДЕ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ПрайсыПоставщиков.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартииТоваровОстатки.Номенклатура,
	|	ПартииТоваровОстатки.Склад,
	|	СУММА(ПартииТоваровОстатки.КоличествоОстаток),
	|	2,
	|	ЗНАЧЕНИЕ(Перечисление.ТипПоставки.VMI),
	|	ПрайсыПоставщиков.Ссылка,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(40)),
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(1024)),
	|	0,
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ПартииТоваров.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТТоваров.Номенклатура КАК Номенклатура
	|					ИЗ
	|						ВТТоваров КАК ВТТоваров)
	|				И Склад В
	|					(ВЫБРАТЬ
	|						Склады.Ссылка КАК Ссылка
	|					ИЗ
	|						Справочник.Склады КАК Склады
	|					ГДЕ
	|						Склады.СкладVMI = ИСТИНА
	|						И Склады.ФизическийСклад = &Склад)
	|				И СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)) КАК ПартииТоваровОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрайсыПоставщиков КАК ПрайсыПоставщиков
	|		ПО (ПрайсыПоставщиков.Склад В
	|				(ВЫБРАТЬ
	|					Склады.Ссылка КАК Ссылка
	|				ИЗ
	|					Справочник.Склады КАК Склады
	|				ГДЕ
	|					Склады.СкладVMI = ИСТИНА
	|					И Склады.ФизическийСклад = &Склад))
	|			И ((ВЫРАЗИТЬ(ПрайсыПоставщиков.Владелец КАК Справочник.ТорговыеТочки)) = ПартииТоваровОстатки.СтрокаПрихода.ТорговаяТочка)
	|ГДЕ
	|	ПартииТоваровОстатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровОстатки.Номенклатура,
	|	ПрайсыПоставщиков.Ссылка,
	|	ПартииТоваровОстатки.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет"	);
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",ТаблицаТоваров);
	запрос.УстановитьПараметр("Склад",Склад);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ТАблицаСРазбитием = ПолучитьТаблицуСРазбитием(ТаблицаОстатков,ТаблицаТоваров,Склад);
	
	ЗапросИтоговый = новый запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаРазбитая.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаРазбитая.Склад,
	|	ТаблицаРазбитая.Количество,
	|	ТаблицаРазбитая.Цена,
	|	ТаблицаРазбитая.Сумма,
	|	ТаблицаРазбитая.Отказ,
	|	ТаблицаРазбитая.ПрайсПоставщика,
	|	ТаблицаРазбитая.IDSite,
	|	ТаблицаРазбитая.КомментарийИзСайта
	|ПОМЕСТИТЬ ТаблицаРазбиения
	|ИЗ
	|	&ТаблицаРазбитая КАК ТаблицаРазбитая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Коэффициент,
	|	ТаблицаРазбиения.Склад КАК Склад,
	|	СУММА(ТаблицаРазбиения.Количество) КАК Количество,
	|	ТаблицаРазбиения.Цена,
	|	ТаблицаРазбиения.ПрайсПоставщика,
	|	ТаблицаРазбиения.IDSite,
	|	ТаблицаРазбиения.КомментарийИзСайта,
	|	ТаблицаРазбиения.Номенклатура,
	|	ТаблицаРазбиения.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ТаблицаРазбиения.Отказ КАК Отказ,
	|	ТаблицаРазбиения.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество,
	|	ТаблицаРазбиения.Цена * ТаблицаРазбиения.Количество КАК Сумма
	|ИЗ
	|	ТаблицаРазбиения КАК ТаблицаРазбиения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРазбиения.Склад,
	|	ТаблицаРазбиения.Цена,
	|	ТаблицаРазбиения.ПрайсПоставщика,
	|	ТаблицаРазбиения.IDSite,
	|	ТаблицаРазбиения.КомментарийИзСайта,
	|	ТаблицаРазбиения.Номенклатура,
	|	ТаблицаРазбиения.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТаблицаРазбиения.Отказ,
	|	ТаблицаРазбиения.Номенклатура.СтавкаНДС,
	|	ТаблицаРазбиения.Цена * ТаблицаРазбиения.Количество
	|
	|УПОРЯДОЧИТЬ ПО
	|	Отказ
	|ИТОГИ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРазбиения.Склад,
	|	СУММА(ТаблицаРазбиения.Количество) КАК Количество
	|ИЗ
	|	ТаблицаРазбиения КАК ТаблицаРазбиения
	|ГДЕ
	|	ТаблицаРазбиения.Отказ = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРазбиения.Склад" );
	
	ЗапросИтоговый.УстановитьПараметр("ТаблицаРазбитая",ТАблицаСРазбитием);
	Результат = ЗапросИтоговый.ВыполнитьПакет();
	
	Возврат Результат;
	
	
	
Конецфункции

Функция ПолучитьТаблицуСРазбитием(ТаблицаОстатков,Знач ТаблицаТоваров,Склад)
	ТаблицаРаспределения  = ТаблицаОстатков.СкопироватьКолонки();
	
	Для Каждого СтрокаТоваров из ТаблицаТоваров Цикл
		СтруктураТекСтроки = новый Структура;
		СтруктураТекСтроки.Вставить("Цена",СтрокаТоваров.price);
		СтруктураТекСтроки.Вставить("IDSite",СтрокаТоваров.site_id);
		СтруктураТекСтроки.Вставить("ЦенаЗакупки",СтрокаТоваров.input_price);
		СтруктураТекСтроки.Вставить("КомментарийИзСайта", СтрокаТоваров.description);		 
		
		СтрокиОстатка = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура",СтрокаТоваров.Номенклатура));	
		Для каждого СтрокаОстатка из СтрокиОстатка цикл 
			если СтрокаТоваров.quantity = 0 тогда 
				Прервать;
			КонецЕсли;	 
			
			Если СтрокаОстатка.Количество >= СтрокаТоваров.quantity тогда 
				ДобавитьНовуюСтрокуРаспределения(ТаблицаРаспределения,СтрокаОстатка,СтрокаТоваров.quantity,СтруктураТекСтроки);
				СтрокаТоваров.quantity = 0 ;
			Иначе 
				ДобавитьНовуюСтрокуРаспределения(ТаблицаРаспределения,СтрокаОстатка,СтрокаОстатка.Количество,СтруктураТекСтроки);
				СтрокаТоваров.quantity =СтрокаТоваров.quantity - СтрокаОстатка.Количество;  	  
			КонецЕсли;	
		КонецЦикла;
		
		Если СтрокаТоваров.quantity > 0  тогда
			ДобавитьНовуюСтрокуОтказа(СтрокаТоваров,ТаблицаРаспределения,Склад);
		Конецесли;		
	КонецЦикла;
	
	Возврат ТаблицаРаспределения;
КонецФункции	

Процедура ДобавитьНовуюСтрокуРаспределения(ТаблицаРаспределения,СтрокаОстатка,Количество,СтруктураТекСтроки)
	НовСтрока = ТаблицаРаспределения.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока,СтрокаОстатка,"Номенклатура,Склад,Отказ,ПрайсПоставщика");
	ЗаполнитьЗначенияСвойств(НовСтрока,СтруктураТекСтроки);
	НовСтрока.Количество =  Количество;
	НовСтрока.Сумма  =  Количество * СтруктураТекСтроки.Цена;
КонецПроцедуры	

Процедура ДобавитьНовуюСтрокуОтказа(СтрокаТоваров,ТаблицаРаспределения,Склад)
	 	НовСтрока = ТаблицаРаспределения.Добавить();
		НовСтрока.Номенклатура =СтрокаТоваров.Номенклатура;
		НовСтрока.Склад = Склад;//# Kalinin V.A. ( 2019-03-28 )  поправил
		НовСтрока.Количество = СтрокаТоваров.quantity;
		НовСтрока.Цена =   СтрокаТоваров.price;
		НовСтрока.Сумма = СтрокаТоваров.quantity* СтрокаТоваров.price;
		НовСтрока.Отказ = Истина;
		НовСтрока.ПрайсПоставщика = DataExchangeПовтИсп.ПрайсСтоковогоСклада(НовСтрока.Склад);
		НовСтрока.IDSite = СтрокаТоваров.site_id;
		НовСтрока.КомментарийИзСайта =  СтрокаТоваров.description;
	
КонецПроцедуры	

Процедура ДобавитьКонтактнуюИнформацию(Структура)
	
	Если ЗначениеЗаполнено(Структура.Представление) Тогда
		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Структура);
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СистемныеПроцедурыИФункции
 
Процедура ДобавитьОшибкуВСтруктуруОтчета(СтруктураОтчета,ТекстОшибки);
	СтруктураОтчета.Ошибка = Истина;
	СтруктураОтчета.ТекстОшибки  = ТекстОшибки;
КонецПроцедуры	

Функция ПолучитьWSПрокси(АдресВебСервиса)
	Определения = Новый WSОпределения(АдресВебСервиса);
	Прокси = Новый WSПрокси(Определения, Определения.Сервисы[0].URIПространстваИмен, Определения.Сервисы[0].Имя, Определения.Сервисы[0].ТочкиПодключения[0].Имя);
	Возврат Прокси;
КонецФункции	

Функция ПолучитьАдресВэбСервиса(ИмяПланаОбмена)
	Настройка = ПредопределенноеЗначение("Справочник.НастройкиРеквизитовДляОбменов."+ИмяПланаОбмена);
	АдресВебСервиса = ?(ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза(), Настройка.СтрокаДляРабочейБазы, Настройка.СтрокаДляТестовойБазы);
	Возврат АдресВебСервиса;
	
	
КонецФункции

Функция ПолучитьСтрктуруУзловОбмена(УзелОбмена,ИмяПланаОбмена)
	//МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена] ;
	СтруктураУзловОбмена = новый Структура;
	ВходящийУзел = УзелПланаОбмена(ИмяПланаОбмена,Истина,УзелОбмена);
	ИсходящийУзел = УзелПланаОбмена(ИмяПланаОбмена,Ложь,УзелОбмена);
	СтруктураУзловОбмена.Вставить("ВходящийУзел",ВходящийУзел);
	СтруктураУзловОбмена.Вставить("ИсходящийУзел",ИсходящийУзел);
	СтруктураУзловОбмена.Вставить("КодПолучателя",УзелОбмена.ИдентификаторУзла);
	СтруктураУзловОбмена.Вставить("НомерПринятого1С",ВходящийУзел.НомерПринятого);
	СтруктураУзловОбмена.Вставить("НомерОтправленного1С",ИсходящийУзел.НомерОтправленного);
	
	Возврат СтруктураУзловОбмена
	
Конецфункции 

Функция ОбработатьОтветВэбСервиса(РаспакованноеСообщение);
		
	ТипСообщениеОбмена = ФабрикаXDTO.Тип(ПространствоИмен(), "СообщениеОбмена");
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(РаспакованноеСообщение);
	ДанныеХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ, ТипСообщениеОбмена);	
	
	Возврат ДанныеХДТО;
	
КонецФункции	

Процедура УстановитьПризнакОбработаноДляЗаписи(ДанныеСтроки,СтруктураОтчета) 
	
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_УстановитьПризнакОбработаноДляЗаписи";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	Запись = РегистрыСведений.ОбъектыОбмена.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись,ДанныеСтроки,"Период,ВидОбмена,НомерСообщения,ИндексСтроки");
	Запись.Прочитать();
	
	ЗаполнитьЗначенияСвойств(Запись, СтруктураОтчета, "Ошибка,ТекстОшибки,Обработано");
	
	Если НЕ СтруктураОтчета.ВременнаяОшибка Тогда
		Запись.Обработано = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтчета.СсылкаНаОбъект) Тогда
		Запись.Ссылка = СтруктураОтчета.СсылкаНаОбъект;
	КонецЕсли;
	Запись.ДатаОбработки = ТекущаяДата();
	Запись.Записать();
	
КонецПроцедуры

Процедура РазобратьПолученныеОбъекты(ОбъектыXDTO, НомерСообщения,ИмяПланаОбмена, ЧислоПотоков = 1, ДатаСообщения = Неопределено) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_РазобратьПолученныеОбъекты";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	

	ВидОбмена  = ПредопределенноеЗначение("Перечисление.ВидыОбменов."+ИмяПланаОбмена);
		
	НаборЗаписей = РегистрыСведений.ОбъектыОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидОбмена.Установить(ВидОбмена);
	НаборЗаписей.Отбор.НомерСообщения.Установить(НомерСообщения);
		
	ИндексСтроки = 1;
	
	// 06.03.19 Строганов Роман > XX-2047 Ускорить загрузку Заявки Покупателя
	НомерПотока = 1;
	// 06.03.19 Строганов Роман < XX-2047 Ускорить загрузку Заявки Покупателя
	
	// 21.03.19 Строганов Роман > 
	СписокИсключений = Новый Соответствие;
	СписокИсключений.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОбъектовОбмена.Водители"), 		Истина);
	СписокИсключений.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОбъектовОбмена.Изготовители"), 	Истина);
	СписокИсключений.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОбъектовОбмена.Номенклатура"), 	Истина);
	
	СписокПараллельныхОбъектов = Новый Соответствие();
	СписокПараллельныхОбъектов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОбъектовОбмена.ЗаявкаПокупателя"),	Истина);
	СписокПараллельныхОбъектов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОбъектовОбмена.РезультатСборки"), 	Истина);
	СписокПараллельныхОбъектов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОбъектовОбмена.ЗаказНаОтгрузкуСтатус"), 	Истина);
	
	СоответствиеОбъектовОбменаТопЛог = ПланыОбмена.ОбменПартКом83_TopLog.ПолучитьСоответствиеОбъектовОбменаТопЛог();
	// 21.03.19 Строганов Роман <
	
	Для Каждого Объект Из ОбъектыXDTO Цикл
		ВидОбъекта = ВидОбъекта(Объект.Тип().Имя);
				
		Если ЗначениеЗаполнено(ВидОбъекта) Тогда
			
			// 21.03.19 Строганов Роман > 
			Если СписокИсключений[ВидОбъекта] = Истина Тогда
				Продолжить;
			КонецЕсли;
			// 21.03.19 Строганов Роман <
			
			Запись = НаборЗаписей.Добавить();
			Запись.ВидОбмена = ВидОбмена; 
			Запись.НомерСообщения = НомерСообщения; 
			Запись.ИндексСтроки = ИндексСтроки;
			
			Запись.ВидОбъекта = ВидОбъекта;
			Запись.Период = ?(ДатаСообщения = Неопределено,ТекущаяДата(),ДатаСообщения);
			//Серилизатор = новый СериализаторXDTO(ФабрикаXDTO);
			
			// 06.03.19 Строганов Роман > XX-2047 Ускорить загрузку Заявки Покупателя 
			Если ЧислоПотоков > 1 Тогда
				Если СписокПараллельныхОбъектов[ВидОбъекта] = Истина Тогда
					// 27.03.19 Строганов Роман > Аукционы
					Если ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаПокупателя И ЗначениеЗаполнено(Объект.АукционID) Тогда
						Запись.НомерПотока = 1;
					Иначе
					// 27.03.19 Строганов Роман > Аукционы
						НомерПотока = ?(НомерПотока = ЧислоПотоков, 1, НомерПотока + 1);
						Запись.НомерПотока = НомерПотока;
					КонецЕсли;
				Иначе 
					Запись.НомерПотока = 1;
				КонецЕсли;
			КонецЕсли;
			
			// 20.03.19 Строганов Роман >  
			//ДатаСообщения = ТекущаяДатаСеанса();
			Параметры = Новый Структура("ДатаСообщения",  ?(ДатаСообщения = Неопределено,ТекущаяДата(),ДатаСообщения));
			Запись.Параметры = Новый ХранилищеЗначения(Параметры, Новый СжатиеДанных(9));
			// 20.03.19 Строганов Роман > 
			
			Если СоответствиеОбъектовОбменаТопЛог[ВидОбъекта] = Неопределено Тогда
				Данные = ПреобразованныйОбъектXDTO(Объект);
				Запись.Данные = ЗначениеВСтрокуВнутр(Данные);
			Иначе
				Запись.Данные = ОбменДаннымиКлиентСервер.ПолучитьXML(Объект);
			КонецЕсли;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ОбщиеНастройкиЗагрузки()
	
	Структура = Новый Структура;
	Структура.Вставить("ГруппаРозничныхКонтрагентов", РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт(Розница)", "Группа розничных контрагентов", Справочники.Контрагенты.НайтиПоКоду("00000002")));
	Структура.Вставить("ЦеноваяГруппаРозничныхКонтрагентов", РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт(Розница)", "Ценовая группа розничных контрагентов", Справочники.ГруппыКонтрагентов.НайтиПоКоду(1)));
	Структура.Вставить("ВалютаВзаиморасчетов", Константы.ВалютаРегламентированногоУчета.Получить());
	Структура.Вставить("СоздаватьТорговуюТочку", Истина);
	Структура.Вставить("ТипЦен", Константы.ТипЦен_дляСайта.Получить());
	
	Возврат Структура;
	
КонецФункции

Функция ПреобразоватьМассивСтрокВТаблицуЗначений(МассивСтрок) экспорт 
ТаблицаЗагрузки = новый ТаблицаЗначений;
 Для Каждого Свойство из МассивСтрок[0] цикл 
 	ИмяТипа =СтрЗаменить(СокрЛП(ТипЗнч(Свойство.Значение))," ",""); 
 	  ТаблицаЗагрузки.Колонки.Добавить(Свойство.Ключ,ОбщегоНазначения.ОписаниеТипаИзСтроки(ИмяТипа));	
КонецЦикла;	

Для Каждого СтруктураСтроки из МассивСтрок цикл 
	СтрокаТаблицы  = ТаблицаЗагрузки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтруктураСтроки);
КонецЦикла;

Возврат ТаблицаЗагрузки	
КонецФункции	

Процедура ДополнитьСтруктуруТаблицамиДокумента(ВыборкаТоваров,СтруктураЗаявки)
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ДополнитьСтруктуруТаблицамиДокумента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	
	ТаблицаТоваров =  Документы.ЗаявкаПокупателя.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТаблицаОтказов  = Документы.ЗаявкаПокупателя.ПустаяСсылка().ПричиныОтказов.ВыгрузитьКолонки();
	НомерСтроки = 0;	
	Пока ВыборкаТоваров.Следующий() цикл 
		НомерСтроки = НомерСтроки+1;
		СтрокаТовары = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары,ВыборкаТоваров);
		СтрокаТовары.КлючСвязи = НомерСтроки;
		СтрокаТовары.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТовары.Сумма, СтруктураЗаявки.УчитыватьНДС, СтруктураЗаявки.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТовары.СтавкаНДС));
		//УБРАТЬ когда норм фариант будет
		СтрокаТовары.ЦенаЗакупки  = СтрокаТовары.Цена-1;
		//
		СтрокаТовары.ЦенаСоСкидкой  = СтрокаТовары.Цена;
		
	
		Если ВыборкаТоваров.отказ тогда 
		НайденыеОтказы = ТаблицаТоваров.НайтиСтроки(новый Структура ("Номенклатура",ВыборкаТоваров.Номенклатура));
		если НайденыеОтказы.Количество() тогда 
			Для Каждого НайденыйОтказ из НайденыеОтказы цикл 
			СтрокаОтказы = ТаблицаОтказов.Добавить();
			СтрокаОтказы.КлючСвязи = НайденыйОтказ.КлючСвязи;
			СтрокаОтказы.ПричинаОтмены = ПредопределенноеЗначение("Справочник.СостоянияСтрокДокументов.ОтсутствуетНаСкладеПартком");
			СтрокаОтказы.Количество = ВыборкаТоваров.КОличество;
			КонецЦикла;
			
		КонецЕсли;	
		 КонецЕсли;
		
	КонецЦикла;	
	
	 СтруктураЗаявки.Вставить("Товары",ТаблицаТоваров);
	 СтруктураЗаявки.Вставить("ПричиныОтказов",ТаблицаОтказов);
	
	
 КонецПроцедуры
 
Функция ПолучитьСтруктуЗаписиСообщения(ВыборкаПоНомеруСообщения, УзелОбмена, ДанныеОбъекта) 
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("НомерСообщения", ВыборкаПоНомеруСообщения.НомерСообщения);
	СтруктураЗаписи.Вставить("Период", ВыборкаПоНомеруСообщения.Период);
	СтруктураЗаписи.Вставить("Исходящее", Ложь);
	СтруктураЗаписи.Вставить("Узел", УзелОбмена);
	СтруктураЗаписи.Вставить("ХранилищеСообщения", Неопределено);
	
	Возврат СтруктураЗаписи;
	
КонецФункции	

Функция ОбъектыКОбработке(ВидыОбмена,КолВоОбъектов = 1000, НомерПотока = Неопределено)
	
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ОбъектыКОбработке";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ %1
	|	ОбъектыОбмена.Период КАК Период,
	|	ОбъектыОбмена.ВидОбмена,
	|	ОбъектыОбмена.НомерСообщения КАК НомерСообщения,
	|	ОбъектыОбмена.ИндексСтроки,
	|	ОбъектыОбмена.ВидОбъекта,
	|	ОбъектыОбмена.Данные,
	|	ОбъектыОбмена.Параметры
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена В(&ВидыОбмена)
	|	И (&НомерПотока = НЕОПРЕДЕЛЕНО
	|			ИЛИ ОбъектыОбмена.НомерПотока = &НомерПотока)
	|ИТОГИ
	|	МИНИМУМ(Период)
	|ПО
	|	НомерСообщения";
	// 06.03.19 Строганов Роман <
	Запрос.Текст = СтрШаблон(ТекстЗапроса, "Первые "+Формат(КолВоОбъектов,"ЧГ=0"));
	Запрос.УстановитьПараметр("ВидыОбмена", ВидыОбмена);	
	// 06.03.19 Строганов Роман > 
	Запрос.УстановитьПараметр("НомерПотока", НомерПотока);
	// 06.03.19 Строганов Роман <
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

#КонецОбласти 

#Область Переопределяемая

Функция ПрефиксРозничнойЗаявки()
Возврат "Р"		
КонецФункции	

Функция ПрефиксТипаПоставки(ТипПоставки)
	Если ТипПоставки = Перечисления.ТипПоставки.Сток тогда 
		 Возврат "С"		
	Иначеесли ТипПоставки = Перечисления.ТипПоставки.VMI тогда 
		 Возврат "В"		
	ИначеЕсли ТипПоставки = Перечисления.ТипПоставки.Кросс тогда 
	     Возврат "К"
	Иначе 
		  Возврат ""
	КонецЕсли;	  		
		
КонецФункции

Функция СкладРозничнойЗаявки(СтруктураДанныхСайта)
	Филиал =  Справочники.Филиалы.ПолучитьСсылку(СтруктураДанныхСайта.filial_uuid);	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Филиал,"ОсновнойСклад")
КонецФункции	

Функция СкладVMIФизСклада(Склад)
	 Запрос = новый запрос
КонецФункции

Функция ВидОбъекта(ВидОбъектаСтрокой) Экспорт 
	
	Если ВидОбъектаСтрокой = "retail_order" Тогда
		ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаРозница;	
	Иначе
		ВидОбъекта  = ОбменССайтомСерверПовтИсп.НайтиВидОбъектаПоСтроке(ВидОбъектаСтрокой);	
	КонецЕсли;
	
	Возврат ВидОбъекта;
	
КонецФункции

Функция ПространствоИмен() Экспорт
	Возврат   "http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema";
КонецФункции	

Функция ПреобразованныйОбъектXDTO(ОбъектXDTO) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ПреобразованныйОбъектXDTO";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////
	
	СоответствиеОбъектовОбменаТопЛог = ПланыОбмена.ОбменПартКом83_TopLog.ПолучитьСоответствиеОбъектовОбменаТопЛог();
	
	Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") тогда 
		ВидОбъекта = ВидОбъекта(ОбъектXDTO.Тип().Имя);
	Иначе 
		Возврат ПреобразованыйСписокXDTO(ОбъектXDTO);
	КонецЕсли; 
	
	//Если ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаРозница Тогда
	// 22.03.19 Строганов Роман > 
	Если СоответствиеОбъектовОбменаТопЛог[ВидОбъекта] = Неопределено Тогда
		ПреобразованныйОбъект = Новый Структура;
		Для каждого Свойство из ОбъектXDTO.Свойства() Цикл 
			Если Свойство.Имя ="items" тогда
				СписокЗаявки  = ПреобразованыйСписокXDTO(ОбъектXDTO.items.ПолучитьСписок("item"));
				ПреобразованныйОбъект.Вставить("items",СписокЗаявки);
			иначе 	
				ПреобразованныйОбъект.Вставить(Свойство.Имя,ОбъектXDTO[Свойство.Имя]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ВидОбъекта = ПредопределенноеЗначение("Перечисление.ВидыОбъектовОбмена.РезультатРазмещения") Тогда	
			ПреобразованныйОбъект = Новый Структура;
			Для Каждого Свойство Из ОбъектXDTO.Свойства()Цикл 
				Если Свойство.Имя = "Заказы" Тогда
					Список = ПреобразованыйСписокXDTO(ОбъектXDTO.Заказы.ПолучитьСписок("СтрокаЗаказы"));
					ПреобразованныйОбъект.Вставить("Заказы", Список);
				Иначе 	
					ПреобразованныйОбъект.Вставить(Свойство.Имя,ОбъектXDTO[Свойство.Имя]);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПреобразованныйОбъект = Новый Структура;
			Для Каждого Свойство Из ОбъектXDTO.Свойства()Цикл 
				Если Свойство.Имя = "Товары" Тогда
					Список  = ПреобразованыйСписокXDTO(ОбъектXDTO.Товары.ПолучитьСписок("СтрокаТовары"));
					ПреобразованныйОбъект.Вставить("Товары", Список);
				Иначе 	
					ПреобразованныйОбъект.Вставить(Свойство.Имя,ОбъектXDTO[Свойство.Имя]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПреобразованныйОбъект;
	
КонецФункции

Функция ПреобразованыйСписокXDTO(СписокXDTO)
	ПреобразованыйСписокXDTO = Новый Массив;
	Для Каждого Строка Из СписокXDTO Цикл
		Структура = Новый Структура;
		Для каждого Свойство из Строка.Свойства() Цикл 
			Структура.Вставить(Свойство.Имя,Строка[Свойство.Имя]);
		КонецЦикла;
		ПреобразованыйСписокXDTO.Добавить(Структура);
	КонецЦикла;
	
	Возврат ПреобразованыйСписокXDTO;	
	
КонецФункции

// 04.04.19 Строганов Роман > 
Функция ВыгрузитьВОкноПоставщика(СсылкаНаОбъект, Файл_Акт = "", Файл_Расшифровка = "", ДатаВремяОбновленияАкта = "", ДатаВремяОбновленияРасшифровки = "") Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_ОбменССайтомСервер_ВыгрузитьВОкноПоставщика";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	Если ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза() Тогда 
		ИмяРеквизита = "СтрокаДляРабочейБазы";
	Иначе
		ИмяРеквизита = "СтрокаДляТестовойБазы";
	КонецЕсли;
	
	СтрокаПодключенияADO = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.НастройкиРеквизитовДляОбменов.СтрокаПодключенияADO, ИмяРеквизита);
	
	АдресСервераMySQL = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.НастройкиРеквизитовДляОбменов.АдресСервераОП, ИмяРеквизита); 
	ИмяБазы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.НастройкиРеквизитовДляОбменов.ИмяБазыОП, ИмяРеквизита);
	ИмяПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.НастройкиРеквизитовДляОбменов.ИмяПользователяОП, ИмяРеквизита);
	ПарольПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.НастройкиРеквизитовДляОбменов.ПарольОП, ИмяРеквизита);
	
	Если Не ЗначениеЗаполнено(АдресСервераMySQL) Тогда 
		ВызватьИсключение "В константах не заполнен адрес сервера MySQL";
	КонецЕсли;
	
	СтрокаПодключенияADO = СтрЗаменить(СтрокаПодключенияADO, "%АдресСервера%", АдресСервераMySQL);
	СтрокаПодключенияADO = СтрЗаменить(СтрокаПодключенияADO, "%ИмяБазы%", ИмяБазы);
	СтрокаПодключенияADO = СтрЗаменить(СтрокаПодключенияADO, "%ИмяПользователя%", ИмяПользователя);
	СтрокаПодключенияADO = СтрЗаменить(СтрокаПодключенияADO, "%ПарольПользователя%", ПарольПользователя);
	
	ADOСоединение  = Новый COMОбъект("ADODB.Connection");
	ADOСоединение.ConnectionString = СтрокаПодключенияADO;
	ADOСоединение.ConnectionTimeout = 30;
	ADOСоединение.CommandTimeout = 6000;

	Попытка
		ADOСоединение.Open();
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки; 
	
	RS = Новый ComОбъект("ADODB.Recordset"); 
	
	ИмяТаблицы = "import_bonus";
	
	ТекНомерДок = СсылкаНаОбъект.Номер + "_" + СокрЛП(Формат(Год(СсылкаНаОбъект.Дата), "ЧГ=0")); 
	
	ТекстЗапроса_Поиск = "SELECT * FROM "+ИмяТаблицы+" WHERE act_number = '"+ТекНомерДок+"'";
	
	RS.Open(ТекстЗапроса_Поиск, ADOСоединение);
	
	ТекстЗапроса_Добавление = "INSERT INTO "+ ИмяТаблицы +"(act_number) VALUES ('"+ ТекНомерДок + "')";
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.CommandTimeout = 100;
	Command.CommandText = ТекстЗапроса_Поиск;
	Command.CommandType = 1;
	Command.ActiveConnection = ADOСоединение;
	
	Попытка
		Command.Execute();
	Исключение
		ВызватьИсключение 
		"Ошибка выгрузки бонусов в «Окно поставщика». 
		|Запрос к таблицам MySQL на сайте вызвал ошибку. 
		|Описание ошибки: " + ОписаниеОшибки();
	КонецПопытки;
	
	Если RS.EOF() Тогда
		
		Command = Новый COMОбъект("ADODB.Command");
		Command.CommandTimeout = 100;
		Command.CommandText = ТекстЗапроса_Добавление;
		Command.CommandType = 1;
		Command.ActiveConnection = ADOСоединение;
		
		Попытка
			Command.Execute();
		Исключение
			ВызватьИсключение 
			"Ошибка выгрузки бонусов в «Окно поставщика». 
			|Запрос к таблицам MySQL на сайте вызвал ошибку. 
			|Описание ошибки: " + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаДолга.ДатаАкта КАК ДатаАкта,
	|	КорректировкаДолга.КонтрагентДебитор КАК Контрагент,
	|	КорректировкаДолга.ПериодАнализаНачало КАК ПериодАнализаНачало,
	|	КорректировкаДолга.ПериодАнализаОкончание КАК ПериодАнализаОкончание,
	|	КорректировкаДолга.ПроцентБонуса КАК ПроцентБонуса,
	|	ЕСТЬNULL(ВложенныйЗапрос.Сумма, 0) КАК СуммаПремии,
	|	КорректировкаДолга.СканПолучен КАК СканПолучен,
	|	КорректировкаДолга.ОригиналПолучен КАК ОригиналПолучен,
	|	КорректировкаДолга.ДатаПолученияОригинала КАК ДатаПолученияОригинала
	|ИЗ
	|	Документ.КорректировкаДолга КАК КорректировкаДолга
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КорректировкаДолгаСуммыДолга.Ссылка КАК Ссылка,
	|			СУММА(КорректировкаДолгаСуммыДолга.Сумма) КАК Сумма
	|		ИЗ
	|			Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолгаСуммыДолга
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КорректировкаДолгаСуммыДолга.Ссылка) КАК ВложенныйЗапрос
	|		ПО КорректировкаДолга.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ТекстЗапроса_Обновление = "";
	
	Если ЗначениеЗаполнено(Файл_Акт) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", act_file = '"+Файл_Акт+"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Файл_Расшифровка) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", vedomost_file = '"+Файл_Расшифровка+"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаВремяОбновленияАкта) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", act_file_date = '"+ДатаВремяОбновленияАкта+"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаВремяОбновленияРасшифровки) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", vedomost_file_date = '"+ДатаВремяОбновленияРасшифровки+"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ДатаАкта) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", act_date = '"+ПеревернутьДату(СсылкаНаОбъект.ДатаАкта)+"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.СуммаПремии) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", act_sum = '"+XMLСтрока(Выборка.СуммаПремии)+"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", supplier_code = '"+ Выборка.Контрагент.Код+"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ПериодАнализаНачало) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", period_start = '"+ПеревернутьДату(Выборка.ПериодАнализаНачало)+"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ПериодАнализаОкончание) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", period_end = '"+ПеревернутьДату(Выборка.ПериодАнализаОкончание)+"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.СканПолучен) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", has_scan = '"+ ?(Выборка.СканПолучен, 1, 0) +"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ОригиналПолучен) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", has_original = '"+ ?(Выборка.ОригиналПолучен, 1, 0)+"'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ДатаПолученияОригинала) Тогда
		ТекстЗапроса_Обновление = ТекстЗапроса_Обновление + ", original_date = '"+?(ЗначениеЗаполнено(Выборка.ДатаПолученияОригинала), Выборка.ДатаПолученияОригинала, "0000-00-00") +"'";
	КонецЕсли;
	
	ТекстЗапроса_Обновление = Сред(ТекстЗапроса_Обновление, 2);
	
	ТекстЗапроса_Обновление = "UPDATE "+ИмяТаблицы+" SET " + ТекстЗапроса_Обновление + " WHERE act_number = '"+ТекНомерДок+"'";

	Command = Новый COMОбъект("ADODB.Command");
	Command.CommandTimeout = 100;
	Command.CommandText = ТекстЗапроса_Обновление;
	Command.CommandType = 1;
	Command.ActiveConnection = ADOСоединение;
	
	Попытка
		Command.Execute();
	Исключение
		ВызватьИсключение 
		"Ошибка выгрузки бонусов в «Окно поставщика». 
		|Запрос к таблицам MySQL на сайте вызвал ошибку. 
		|Описание ошибки: " + ОписаниеОшибки();
	КонецПопытки;
	
	// Документ выгрузили, теперь надо в специальную таблицу записать об этом
	
	КодТаблицы 	= "import_bonus";
	КодЗаписи 	= "bonus";
	
	ТекстЗапроса_Добавление = "INSERT INTO exchange_messages (date_created,`table`,record_id,operation,source) VALUES (NOW(), '"+КодТаблицы+"', '"+ТекНомерДок+"', '"+КодЗаписи+"','1С');";
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.CommandTimeout = 100;
	Command.CommandText = ТекстЗапроса_Добавление;
	Command.CommandType = 1;
	Command.ActiveConnection = ADOСоединение;
	
	Попытка
		Command.Execute(); 
	Исключение
		ВызватьИсключение 
		"Ошибка выгрузки бонусов в «Окно поставщика». 
		|Запрос к таблицам MySQL на сайте вызвал ошибку. 
		|Описание ошибки: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ADOСоединение.Close();
	
КонецФункции

// 04.04.19 Строганов Роман > 
Функция ПеревернутьДату(Знач ТекДата, Дата_сВременем = 0) Экспорт
	
	// должно быть так '2011-04-05' (причем можно и так '2011-4-5')
	
	Если Дата_сВременем = 0 Тогда
		Тмп = "" + Формат(Год(ТекДата), "ЧГ=0") + "-" + Месяц(ТекДата) + "-" + День(ТекДата);
	Иначе
		//с 28.01.2016 (проект "новые 4 срока")
		Тмп = ПеревернутьДату(Дата(Лев(ТекДата, 10))) + Сред(ТекДата, 11);
	КонецЕсли;
	
	Возврат Тмп;
	
КонецФункции

#КонецОбласти
