#Область  ИсторияИСостоянияЗаявок



Функция ТекстЗапросаСостояний_()
	
	//При изменении текста запроса, требуется учесть замены текста запроса в процедуре ВыборкаСостоянийСтрокЗаявок()//
	Возврат "ВЫБРАТЬ ПЕРВЫЕ 1234
	        |	СостояниеЗаявокПокупателя.ДатаИзменения КАК Дата,
	        |	ВЫБОР
	        |		КОГДА СостояниеЗаявокПокупателя.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	        |			ТОГДА ЕСТЬNULL(СостояниеЗаявокПокупателя.СтрокаЗаявки.Заявка.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	        |		ИНАЧЕ СостояниеЗаявокПокупателя.Склад
	        |	КОНЕЦ КАК Склад,
	        |	СостояниеЗаявокПокупателя.Номенклатура,
	        |	СостояниеЗаявокПокупателя.IDSite,
	        |	СостояниеЗаявокПокупателя.СтрокаЗаявки,
	        |	СостояниеЗаявокПокупателя.Состояние,
	        |	СостояниеЗаявокПокупателя.КоличествоВЗаявке,
	        |	СостояниеЗаявокПокупателя.КоличествоЗаказано - СостояниеЗаявокПокупателя.КоличествоПоступило КАК КоличествоЗаказано,
	        |	СостояниеЗаявокПокупателя.КоличествоОтказ КАК КоличествоОтказано,
	        |	СостояниеЗаявокПокупателя.КоличествоПоступило,
	        |	СостояниеЗаявокПокупателя.КоличествоВРезерве,
	        |	ВЫБОР
	        |		КОГДА СостояниеЗаявокПокупателя.КоличествоВРезерве <> 0
	        |			ТОГДА СостояниеЗаявокПокупателя.КоличествоВРезерве
	        |		ИНАЧЕ СостояниеЗаявокПокупателя.КоличествоПоступило
	        |	КОНЕЦ - СостояниеЗаявокПокупателя.КоличествоОтгружено КАК КоличествоНаСкладе,
	        |	СостояниеЗаявокПокупателя.КоличествоОтгружено КАК КоличествоВыдано,
	        |	ВЫБОР
	        |		КОГДА СостояниеЗаявокПокупателя.СтрокаЗаявки.ПоследняяКорректировка <> ЗНАЧЕНИЕ(Документ.КорректировкаЗаявкиПокупателя.ПустаяСсылка)
	        |			ТОГДА СостояниеЗаявокПокупателя.СтрокаЗаявки.ПоследняяКорректировка
	        |		ИНАЧЕ СостояниеЗаявокПокупателя.СтрокаЗаявки.Заявка
	        |	КОНЕЦ КАК ДокументСвязи
	        |ПОМЕСТИТЬ ДанныеСтрокиЗаявки
	        |ИЗ
	        |	РегистрСведений.СостояниеЗаявокПокупателя КАК СостояниеЗаявокПокупателя
	        |ГДЕ
	        |	НЕ СостояниеЗаявокПокупателя.СтрокаЗаявки.Виртуальная
	        |	И НЕ СостояниеЗаявокПокупателя.ПолученоСайтом
	        |	И ИСТИНА
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	СостояниеЗаявокПокупателя.ДатаИзменения УБЫВ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЗаявкаПокупателяТовары.Ссылка КАК Документ,
	        |	ЗаявкаПокупателяТовары.СтрокаЗаявки,
	        |	ЗаявкаПокупателяТовары.Номенклатура
	        |ПОМЕСТИТЬ ОпределениеНоменклатуры
	        |ИЗ
	        |	Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
	        |ГДЕ
	        |	ЗаявкаПокупателяТовары.Ссылка В
	        |			(ВЫБРАТЬ
	        |				ДанныеСтрокиЗаявки.ДокументСвязи
	        |			ИЗ
	        |				ДанныеСтрокиЗаявки КАК ДанныеСтрокиЗаявки)
	        |	И ЗаявкаПокупателяТовары.СтрокаЗаявки В
	        |			(ВЫБРАТЬ
	        |				ДанныеСтрокиЗаявки.СтрокаЗаявки
	        |			ИЗ
	        |				ДанныеСтрокиЗаявки КАК ДанныеСтрокиЗаявки)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	КорректировкаЗаявкиПокупателяТовары.Ссылка,
	        |	КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки,
	        |	КорректировкаЗаявкиПокупателяТовары.Номенклатура
	        |ИЗ
	        |	Документ.КорректировкаЗаявкиПокупателя.Товары КАК КорректировкаЗаявкиПокупателяТовары
	        |ГДЕ
	        |	КорректировкаЗаявкиПокупателяТовары.Ссылка В
	        |			(ВЫБРАТЬ
	        |				ДанныеСтрокиЗаявки.ДокументСвязи
	        |			ИЗ
	        |				ДанныеСтрокиЗаявки КАК ДанныеСтрокиЗаявки)
	        |	И КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки В
	        |			(ВЫБРАТЬ
	        |				ДанныеСтрокиЗаявки.СтрокаЗаявки
	        |			ИЗ
	        |				ДанныеСтрокиЗаявки КАК ДанныеСтрокиЗаявки)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ДанныеСтрокиЗаявки.Дата,
	        |	ЕСТЬNULL(ДанныеСтрокиЗаявки.СтрокаЗаявки.Заявка, ЗНАЧЕНИЕ(Документ.ЗаявкаПокупателя.ПустаяСсылка)) КАК ДокументЗаявки,
	        |	ВЫБОР
	        |		КОГДА ДанныеСтрокиЗаявки.СтрокаЗаявки.Заявка.ИсточникЗаявки = ЗНАЧЕНИЕ(Перечисление.ИсточникиЗаявок.СайтРозница)
	        |			ТОГДА ЕСТЬNULL(ДанныеСтрокиЗаявки.СтрокаЗаявки.Заявка.НомерРозничнойЗаявки, """")
	        |		ИНАЧЕ ЕСТЬNULL(ДанныеСтрокиЗаявки.СтрокаЗаявки.Заявка.Номер, """")
	        |	КОНЕЦ КАК НомерДокументаЗаявки,
	        |	ВЫБОР
	        |		КОГДА ДанныеСтрокиЗаявки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	        |			ТОГДА ЕСТЬNULL(ОпределениеНоменклатуры.Номенклатура.Артикул, """")
	        |		ИНАЧЕ ЕСТЬNULL(ДанныеСтрокиЗаявки.Номенклатура.Артикул, """")
	        |	КОНЕЦ КАК Артикул,
	        |	ДанныеСтрокиЗаявки.Склад,
	        |	ДанныеСтрокиЗаявки.IDSite,
	        |	ДанныеСтрокиЗаявки.СтрокаЗаявки,
	        |	ДанныеСтрокиЗаявки.Состояние,
	        |	ДанныеСтрокиЗаявки.КоличествоВЗаявке,
	        |	ДанныеСтрокиЗаявки.КоличествоОтказано,
	        |	ДанныеСтрокиЗаявки.КоличествоНаСкладе,
	        |	ДанныеСтрокиЗаявки.КоличествоВыдано,
	        |	ДанныеСтрокиЗаявки.ДокументСвязи,
	        |	ДанныеСтрокиЗаявки.КоличествоВРезерве,
	        |	ДанныеСтрокиЗаявки.КоличествоПоступило,
	        |	ДанныеСтрокиЗаявки.КоличествоЗаказано,
	        |	ЕСТЬNULL(ДанныеСтрокиЗаявки.СтрокаЗаявки.Цена, 0) КАК Цена,
	        |	ЕСТЬNULL(ДанныеСтрокиЗаявки.СтрокаЗаявки.ЦенаЗакупки, 0) КАК ЗакупочнаяЦена,
	        |	ВЫБОР
	        |		КОГДА ДанныеСтрокиЗаявки.СтрокаЗаявки.Заявка.ИсточникЗаявки = ЗНАЧЕНИЕ(Перечисление.ИсточникиЗаявок.СайтРозница)
	        |			ТОГДА ИСТИНА
	        |		ИНАЧЕ ЛОЖЬ
	        |	КОНЕЦ КАК Розница
	        |ИЗ
	        |	ДанныеСтрокиЗаявки КАК ДанныеСтрокиЗаявки
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ОпределениеНоменклатуры КАК ОпределениеНоменклатуры
	        |		ПО ДанныеСтрокиЗаявки.СтрокаЗаявки = ОпределениеНоменклатуры.СтрокаЗаявки
	        |			И ДанныеСтрокиЗаявки.ДокументСвязи = ОпределениеНоменклатуры.Документ";
	
КонецФункции


#КонецОбласти  







#Область ЗагрузкаОбъектов

Процедура ЗагрузкаОбъекта_ЗаявкаРозница(ДанныеОбъекта,СтруктураОтчета)
	
	СтруктураДанныхСайта  = ЗначениеИзСтрокиВнутр(ДанныеОбъекта);
	
	если не СтруктураДанныхСайта.items.Количество() тогда 
		возврат 
	КонецЕсли;
	
	Если НЕ СтруктураОтчета.Ошибка Тогда
		Склад = СкладРозничнойЗаявки();
		
		ТаблицаТоваров = ПреобразоватьМассивСтрокВТаблицуЗначений(СтруктураДанныхСайта.items);
		ЗаполнитьКолонкуПоГУИДу(ТаблицаТоваров,Справочники.Номенклатура,"part_uuid","Номенклатура");
		ПакетРазбития = ПолучитьНаборРазбитыхПоОстаткамТаблиц(ТаблицаТоваров,Склад);
		ВыборкаСкладов = ПакетРазбития[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТаблицаОтказов = ПакетРазбития[2].Выгрузить();
		
		Пока ВыборкаСкладов.Следующий() Цикл 
			 Склад = ВыборкаСкладов.Склад;		 
			 СтруктураЗаявки = СоздатьСтруктуруЗаявкиПоСкладу(Склад,СтруктураДанныхСайта,ВыборкаСкладов.Выбрать());
			 ЗаписатьДокументЗаявки(СтруктураЗаявки,СтруктураОтчета);
		КонецЦикла;	
		
	КонецЕсли;	
	
	
КонецПроцедуры	


Процедура ДополнитьСтруктуруТаблицамиДокумента(ВыборкаТоваров,СтруктураЗаявки)
	
	ТаблицаТоваров =  Документы.ЗаявкаПокупателя.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТаблицаОтказов  = Документы.ЗаявкаПокупателя.ПустаяСсылка().ПричиныОтказов.ВыгрузитьКолонки();
	НомерСтроки = 0;	
	Пока ВыборкаТоваров.Следующий() цикл 
		НомерСтроки = НомерСтроки+1;
		СтрокаТовары = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары,ВыборкаТоваров);
		СтрокаТовары.КлючСвязи = НомерСтроки;
		СтрокаТовары.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТовары.Сумма, СтруктураЗаявки.УчитыватьНДС, СтруктураЗаявки.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТовары.СтавкаНДС));
		//УБРАТЬ когда норм фариант будет
		СтрокаТовары.ЦенаЗакупки  = СтрокаТовары.Цена-1;
		//

		Если ВыборкаТоваров.отказ тогда 
		НайденыеОтказы = ТаблицаТоваров.НайтиСтроки(новый Структура ("Номенклатура",ВыборкаТоваров.Номенклатура));
		если НайденыеОтказы.Количество() тогда 
			Для Каждого НайденыйОтказ из НайденыеОтказы цикл 
			СтрокаОтказы = ТаблицаОтказов.Добавить();
			СтрокаОтказы.КлючСвязи = НайденыйОтказ.КлючСвязи;
			СтрокаОтказы.ПричинаОтмены = ПредопределенноеЗначение("Справочник.СостоянияСтрокДокументов.ОтсутствуетНаСкладеПартком");
			СтрокаОтказы.Количество = ВыборкаТоваров.КОличество;
			КонецЦикла;
			
		КонецЕсли;	
		 КонецЕсли;
		
	КонецЦикла;	
	
	 СтруктураЗаявки.Вставить("Товары",ТаблицаТоваров);
	 СтруктураЗаявки.Вставить("ПричиныОтказов",ТаблицаОтказов);
	
	
 КонецПроцедуры
 
 Процедура УстановитьДанныеКонтрагента(СтруктураЗаявки, ДанныеОбъекта)

	 
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Контрагенты.Ссылка
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	НЕ Контрагенты.ПометкаУдаления
	                      |	И Контрагенты.IDРозничногоПокупателя = &IDРозничногоПокупателя");
	Запрос.УстановитьПараметр("IDРозничногоПокупателя", ДанныеОбъекта.client);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//Контрагент уже существует//
		Контрагент = Выборка.Ссылка;
	Иначе
		//Контрагента нет, создаем нового//
		КонтрагентСсылкаНового = Справочники.Контрагенты.ПолучитьСсылку();
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.УстановитьНовыйКод();
		НовыйКонтрагент.УстановитьСсылкуНового(КонтрагентСсылкаНового);

		НовыйКонтрагент.Родитель = Справочники.Контрагенты.КонтрагентыСРозничногоСайта;
		НовыйКонтрагент.IDРозничногоПокупателя = ДанныеОбъекта.client;
		НовыйКонтрагент.Наименование = ДанныеОбъекта.name;
		НовыйКонтрагент.НаименованиеПолное = ДанныеОбъекта.name;
		НовыйКонтрагент.Покупатель = Истина;
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		//НовыйКонтрагент.СайтГруппаКонтрагента = ОбщиеНастройкиЗагрузки.ЦеноваяГруппаРозничныхКонтрагентов;
		НовыйКонтрагент.Регион = СтруктураЗаявки.Регион;
		НовыйКонтрагент.ДатаСоздания = ТекущаяДата();
		
		//Создаем торговую точку.. или не создаем
		Если Истина тогда //ОбщиеНастройкиЗагрузки.СоздаватьТорговуюТочку Тогда		
			ТорговаяТочка = Справочники.ТорговыеТочки.СоздатьЭлемент();
			ТорговаяТочка.Владелец = КонтрагентСсылкаНового;
			ТорговаяТочка.Регион = СтруктураЗаявки.Регион;
			ТорговаяТочка.Наименование = ДанныеОбъекта.name;
			ТорговаяТочка.Код = НовыйКонтрагент.Код;
			ТорговаяТочка.ДополнительныйКомментарий = "Создано для розничного покупателя";
			ТорговаяТочка.ОбменДанными.Загрузка = Истина;
			ТорговаяТочка.Записать();
			
		Иначе
			ТорговаяТочка = Справочники.ТорговыеТочки.ПустаяСсылка();
		КонецЕсли;
		
		//Создаем договор//
		Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Договор.УстановитьНовыйКод();
		Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Договор.Владелец = КонтрагентСсылкаНового;
		Договор.Наименование = "Основной договор";
		Договор.Дата = ТекущаяДата();
		Договор.Организация = СтруктураЗаявки.Организация;
		Договор.ДопустимаяСуммаЗадолженности = 0;
		Договор.ДопустимоеЧислоДнейЗадолженности = 0;
		Договор.КоэффициентСуммыКредита = 1;
		Договор.ВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные;
		Договор.ДоговорНаОферту = Истина;
		Договор.НеКонтролироватьЛимит = Ложь;
		Договор.ДоговорПодписан = Истина;
		Договор.ВалютаВзаиморасчетов =  Константы.ВалютаРегламентированногоУчета.Получить();
		Договор.Номер = "1";
		Договор.ВидРасчетаДней = Перечисления.ВидыРасчетаДней.ПоБанковскимДням;
		Договор.ОбменДанными.Загрузка = Истина;
		Договор.Записать();

		НовыйКонтрагент.ОсновнойДоговорКонтрагента = Договор.Ссылка;
		НовыйКонтрагент.ОсновнаяТорговаяТочка = ТорговаяТочка.Ссылка;
		НовыйКонтрагент.ОбменДанными.Загрузка = Истина;
		НовыйКонтрагент.Записать();
		
		Контрагент = НовыйКонтрагент.Ссылка;
		
		//Запись контактной информации
		ДобавитьКонтактнуюИнформацию(Новый Структура("Объект,Тип,Вид,Представление",
												Контрагент,
												Перечисления.ТипыКонтактнойИнформации.Телефон,
												Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
												ДанныеОбъекта.phone));
	КонецЕсли;

	СтруктураЗаявки.Вставить("Контрагент", Контрагент);	
	СтруктураЗаявки.Вставить("ТорговаяТочка", Контрагент.ОсновнаяТорговаяТочка);	
	СтруктураЗаявки.Вставить("ДоговорКонтрагента", Контрагент.ОсновнойДоговорКонтрагента);	
	СтруктураЗаявки.Вставить("УчитыватьНДС", СтруктураЗаявки.Организация.УчитыватьНДС);	
	СтруктураЗаявки.Вставить("СуммаВключаетНДС", Истина);
	
КонецПроцедуры

Процедура ДобавитьКонтактнуюИнформацию(Структура)
	
	Если ЗначениеЗаполнено(Структура.Представление) Тогда
		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Структура);
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры



Функция СоздатьСтруктуруЗаявкиПоСкладу(Склад,СтруктураДанныхСайта,ВыборкаОстатков)
	СтруктураЗаявки = Новый Структура;
	//номерСтроки =  СтруктураДанныхСайта.number;
	//СтруктураЗаявки.Вставить("Номер",ПолучитьНомерРозничнойЗаявки(ВыборкаОстатков.ТипПоставки,);	
	СтруктураЗаявки.Вставить("Склад",Склад);	
	МагазинСамовывозва =  Справочники.Склады.ПолучитьСсылку(СтруктураДанныхСайта.shop_uuid);  
	СтруктураЗаявки.Вставить("МаршрутДоставки",МагазинСамовывозва.МаршрутДоставкиСамовывоза) ;
	СтруктураЗаявки.Вставить("НомерРозничнойЗаявки", СтруктураДанныхСайта.number); 
	СтруктураЗаявки.Вставить("Дата", ТекущаяДата()); 
	СтруктураЗаявки.Вставить("ИсточникЗаявки", Перечисления.ИсточникиЗаявок.СайтРозница);
	СтруктураЗаявки.Вставить("ВалютаДокумента",  Константы.ВалютаРегламентированногоУчета.Получить());
	СтруктураЗаявки.Вставить("КурсВзаиморасчетов", 1);
	СтруктураЗаявки.Вставить("КратностьВзаиморасчетов", 1);
	СтруктураЗаявки.Вставить("Подтверждена", Истина);
	СтруктураЗаявки.Вставить("ТипЦен",  Константы.ТипЦен_дляСайта.Получить());
	СтруктураЗаявки.Вставить("СтатусДокумента", ?(СтруктураЗаявки.Подтверждена, Справочники.СтатусыДокументов.ЗаявкаПокупателяПодтвержден, Справочники.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден));
	СтруктураЗаявки.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаявкаПокупателя.ЗаявкаПокупателя);
	СтруктураЗаявки.Вставить("Филиал", Справочники.Филиалы.ПолучитьСсылку(СтруктураДанныхСайта.filial_uuid));
	СтруктураЗаявки.Вставить("Организация",DataExchangeПовтИсп.ОрганизацияФилиалаДляФизЛиц(СтруктураЗаявки.Филиал));
	СтруктураЗаявки.Вставить("БанковскийСчет", СтруктураЗаявки.Организация.ОсновнойБанковскийСчет);
	СтруктураЗаявки.Вставить("Регион", РаботаСоСтатусамиДокументовПовтИсп.РегионФилиала(СтруктураЗаявки.Филиал));
	УстановитьДанныеКонтрагента(СтруктураЗаявки, СтруктураДанныхСайта);

	ДополнитьСтруктуруТаблицамиДокумента(ВыборкаОстатков,СтруктураЗаявки);
Возврат СтруктураЗаявки;	
	
КонецФункции	

Процедура ЗаписатьДокументЗаявки(СтруктураЗаявки, СтруктураОтчета)
	
	Документ = Документы.ЗаявкаПокупателя.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Документ, СтруктураЗаявки);
	Документ.Товары.Загрузить(СтруктураЗаявки.Товары);
	Документ.ПричиныОтказов.Загрузить(СтруктураЗаявки.ПричиныОтказов);
	
	Попытка
		Документ.ДополнительныеСвойства.Вставить("ЗагрузкаССайта", Истина);
		//Документ.ДополнительныеСвойства.Вставить("РеквизитыПоставщика", СтруктураДокумента.РеквизитыПоставщика);
		Документ.Записать(РежимЗаписиДокумента.Проведение);
		СтруктураОтчета.Вставить("СсылкаНаЗаявку", Документ.Ссылка);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		СтруктураОтчета.Ошибка = Истина;
		//СтруктураОтчета.ВременнаяОшибка = ЭтоВременнаяОшибка(ОписаниеОшибки);
		ТекстОшибки = "Ошибка записи документа: " + Символы.ПС + ОписаниеОшибки;
		DataExchangeModule.ДополнитьОшибку(СтруктураОтчета.ТекстОшибки, ТекстОшибки);
		СтруктураОтчета.Вставить("СсылкаНаЗаявку", Документы.ЗаявкаПокупателя.ПустаяСсылка());
	КонецПопытки;
	
КонецПроцедуры



 
Процедура ЗаполнитьКолонкуПоГУИДу(Таблица,МенеджерОбъекта,ИмяСвойстваГуида,ИмяНовойКолоки) Экспорт
	Таблица.колонки.Добавить(ИмяНовойКолоки, ОбщегоНазначения.ОписаниеТипаИзСтроки(СтрЗаменить(Строка(МенеджерОбъекта),"Менеджер","Ссылка")));
	Для Каждого Строка из Таблица цикл 
		Строка[ИмяНовойКолоки] = МенеджерОбъекта.ПолучитьСсылку(Строка[ИмяСвойстваГуида]);
	КонецЦикла;		
	
КонецПроцедуры	
	
	

Функция ПолучитьНаборРазбитыхПоОстаткамТаблиц(ТаблицаТоваров,Склад) 
Запрос = новый Запрос("ВЫБРАТЬ
                      |	ВЫРАЗИТЬ(ДанныеСайта.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
                      |	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество,
                      |	ДанныеСайта.price КАК Цена,
                      |	ДанныеСайта.quantity КАК Количество,
                      |	ДанныеСайта.quantity * ДанныеСайта.price КАК Сумма,
                      |	ДанныеСайта.site_id КАК IDSite,
                      |	&Склад,
                      |	ДанныеСайта.description КАК КомментарийИзСайта
                      |ПОМЕСТИТЬ ВТТоваров
                      |ИЗ
                      |	&ТаблицаТоваров КАК ДанныеСайта
                      |;
                      |
                      |////////////////////////////////////////////////////////////////////////////////
                      |ВЫБРАТЬ
                      |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
                      |	ТоварыНаСкладахОстатки.Склад КАК Склад,
                      |	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Количество,
                      |	1 КАК Приоритет,
                      |	ЗНАЧЕНИЕ(Перечисление.ТипПоставки.Сток) КАК ТипПоставки,
                      |	ПрайсыПоставщиков.Ссылка КАК ПрайсПоставщика,
                      |	ВЫРАЗИТЬ("""" КАК СТРОКА(40)) КАК IDSite,
                      |	ВЫРАЗИТЬ("""" КАК СТРОКА(1024)) КАК КомментарийИзСайта,
                      |	0 КАК Цена,
                      |	0 КАК Сумма,
                      |	ЛОЖЬ КАК Отказ
                      |ИЗ
                      |	РегистрНакопления.ТоварыНаСкладах.Остатки(
                      |			,
                      |			(Номенклатура, Склад) В
                      |				(ВЫБРАТЬ
                      |					ВТТоваров.Номенклатура КАК Номенклатура,
                      |					ВТТоваров.Склад КАК Склад
                      |				ИЗ
                      |					ВТТоваров КАК ВТТоваров)) КАК ТоварыНаСкладахОстатки
                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрайсыПоставщиков КАК ПрайсыПоставщиков
                      |		ПО ТоварыНаСкладахОстатки.Склад = ПрайсыПоставщиков.Владелец
                      |ГДЕ
                      |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
                      |
                      |СГРУППИРОВАТЬ ПО
                      |	ТоварыНаСкладахОстатки.Номенклатура,
                      |	ТоварыНаСкладахОстатки.Склад,
                      |	ПрайсыПоставщиков.Ссылка
                      |
                      |ОБЪЕДИНИТЬ ВСЕ
                      |
                      |ВЫБРАТЬ
                      |	ПартииТоваровОстатки.Номенклатура,
                      |	ПартииТоваровОстатки.Склад,
                      |	СУММА(ПартииТоваровОстатки.КоличествоОстаток),
                      |	2,
                      |	ЗНАЧЕНИЕ(Перечисление.ТипПоставки.VMI),
                      |	ПрайсыПоставщиков.Ссылка,
                      |	ВЫРАЗИТЬ("""" КАК СТРОКА(40)),
                      |	ВЫРАЗИТЬ("""" КАК СТРОКА(1024)),
                      |	0,
                      |	0,
                      |	ЛОЖЬ
                      |ИЗ
                      |	РегистрНакопления.ПартииТоваров.Остатки(
                      |			,
                      |			Номенклатура В
                      |					(ВЫБРАТЬ
                      |						ВТТоваров.Номенклатура КАК Номенклатура
                      |					ИЗ
                      |						ВТТоваров КАК ВТТоваров)
                      |				И Склад В
                      |					(ВЫБРАТЬ
                      |						Склады.Ссылка КАК Ссылка
                      |					ИЗ
                      |						Справочник.Склады КАК Склады
                      |					ГДЕ
                      |						Склады.СкладVMI = ИСТИНА
                      |						И Склады.ФизическийСклад = &Склад)
                      |				И СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартии.ПринятыйНаОтветХранение)) КАК ПартииТоваровОстатки
                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрайсыПоставщиков КАК ПрайсыПоставщиков
                      |		ПО (ПрайсыПоставщиков.Склад В
                      |				(ВЫБРАТЬ
                      |					Склады.Ссылка КАК Ссылка
                      |				ИЗ
                      |					Справочник.Склады КАК Склады
                      |				ГДЕ
                      |					Склады.СкладVMI = ИСТИНА
                      |					И Склады.ФизическийСклад = &Склад))
                      |			И ((ВЫРАЗИТЬ(ПрайсыПоставщиков.Владелец КАК Справочник.ТорговыеТочки)) = ПартииТоваровОстатки.СтрокаПрихода.ТорговаяТочка)
                      |ГДЕ
                      |	ПартииТоваровОстатки.КоличествоОстаток > 0
                      |
                      |СГРУППИРОВАТЬ ПО
                      |	ПартииТоваровОстатки.Номенклатура,
                      |	ПрайсыПоставщиков.Ссылка,
                      |	ПартииТоваровОстатки.Склад
                      |
                      |УПОРЯДОЧИТЬ ПО
                      |	Приоритет"	);

Запрос.УстановитьПараметр("ТаблицаТоваров",ТаблицаТоваров);
запрос.УстановитьПараметр("Склад",Склад);

ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
ТАблицаСРазбитием = ПолучитьТаблицуСРазбитием(ТаблицаОстатков,ТаблицаТоваров);

ЗапросИтоговый = новый запрос("ВЫБРАТЬ
                              |	ВЫРАЗИТЬ(ТаблицаРазбитая.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
                              |	ТаблицаРазбитая.Склад,
                              |	ТаблицаРазбитая.Количество,
                              |	ТаблицаРазбитая.Цена,
                              |	ТаблицаРазбитая.Сумма,
                              |	ТаблицаРазбитая.Отказ,
                              |	ТаблицаРазбитая.ПрайсПоставщика,
                              |	ТаблицаРазбитая.IDSite,
                              |	ТаблицаРазбитая.КомментарийИзСайта
                              |ПОМЕСТИТЬ ТаблицаРазбиения
                              |ИЗ
                              |	&ТаблицаРазбитая КАК ТаблицаРазбитая
                              |;
                              |
                              |////////////////////////////////////////////////////////////////////////////////
                              |ВЫБРАТЬ
                              |	1 КАК Коэффициент,
                              |	ТаблицаРазбиения.Склад КАК Склад,
                              |	СУММА(ТаблицаРазбиения.Количество) КАК Количество,
                              |	ТаблицаРазбиения.Цена,
                              |	ТаблицаРазбиения.ПрайсПоставщика,
                              |	ТаблицаРазбиения.IDSite,
                              |	ТаблицаРазбиения.КомментарийИзСайта,
                              |	ТаблицаРазбиения.Номенклатура,
                              |	ТаблицаРазбиения.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
                              |	ТаблицаРазбиения.Отказ КАК Отказ,
                              |	ТаблицаРазбиения.Номенклатура.СтавкаНДС КАК СтавкаНДС,
                              |	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество
                              |ИЗ
                              |	ТаблицаРазбиения КАК ТаблицаРазбиения
                              |
                              |СГРУППИРОВАТЬ ПО
                              |	ТаблицаРазбиения.Склад,
                              |	ТаблицаРазбиения.Цена,
                              |	ТаблицаРазбиения.ПрайсПоставщика,
                              |	ТаблицаРазбиения.IDSite,
                              |	ТаблицаРазбиения.КомментарийИзСайта,
                              |	ТаблицаРазбиения.Номенклатура,
                              |	ТаблицаРазбиения.Номенклатура.ЕдиницаХраненияОстатков,
                              |	ТаблицаРазбиения.Отказ
                              |
                              |УПОРЯДОЧИТЬ ПО
                              |	Отказ
                              |ИТОГИ ПО
                              |	Склад
                              |;
                              |
                              |////////////////////////////////////////////////////////////////////////////////
                              |ВЫБРАТЬ
                              |	ТаблицаРазбиения.Склад,
                              |	СУММА(ТаблицаРазбиения.Количество) КАК Количество
                              |ИЗ
                              |	ТаблицаРазбиения КАК ТаблицаРазбиения
                              |ГДЕ
                              |	ТаблицаРазбиения.Отказ = ИСТИНА
                              |
                              |СГРУППИРОВАТЬ ПО
                              |	ТаблицаРазбиения.Склад" );

ЗапросИтоговый.УстановитьПараметр("ТаблицаРазбитая",ТАблицаСРазбитием);
 Результат = ЗапросИтоговый.ВыполнитьПакет();

Возврат Результат;
	
	
	
Конецфункции

Функция ПолучитьТаблицуСРазбитием(ТаблицаОстатков,Знач ТаблицаТоваров)
	ТаблицаРаспределения  = ТаблицаОстатков.СкопироватьКолонки();
	
	Для Каждого СтрокаТоваров из ТаблицаТоваров Цикл
		СтруктураТекСтроки = новый Структура;
		СтруктураТекСтроки.Вставить("Цена",СтрокаТоваров.price);
		СтруктураТекСтроки.Вставить("IDSite",СтрокаТоваров.site_id);
		СтруктураТекСтроки.Вставить("КомментарийИзСайта", СтрокаТоваров.description);		 
		
		СтрокиОстатка = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура",СтрокаТоваров.Номенклатура));	
		Для каждого СтрокаОстатка из СтрокиОстатка цикл 
			если СтрокаТоваров.quantity = 0 тогда 
				Прервать;
			КонецЕсли;	 
			
			Если СтрокаОстатка.Количество >= СтрокаТоваров.quantity тогда 
				ДобавитьНовуюСтрокуРаспределения(ТаблицаРаспределения,СтрокаОстатка,СтрокаТоваров.quantity,СтруктураТекСтроки);
				СтрокаТоваров.quantity = 0 ;
			Иначе 
				ДобавитьНовуюСтрокуРаспределения(ТаблицаРаспределения,СтрокаОстатка,СтрокаОстатка.Количество,СтруктураТекСтроки);
				СтрокаТоваров.quantity =СтрокаТоваров.quantity - СтрокаОстатка.Количество;  	  
			КонецЕсли;	
		КонецЦикла;
		
		Если СтрокаТоваров.quantity > 0  тогда
			ДобавитьНовуюСтрокуОтказа(СтрокаТоваров,ТаблицаРаспределения);
		Конецесли;		
	КонецЦикла;
	
	Возврат ТаблицаРаспределения;
КонецФункции	

Процедура ДобавитьНовуюСтрокуРаспределения(ТаблицаРаспределения,СтрокаОстатка,Количество,СтруктураТекСтроки)
	НовСтрока = ТаблицаРаспределения.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока,СтрокаОстатка,"Номенклатура,Склад,Отказ,ПрайсПоставщика");
	ЗаполнитьЗначенияСвойств(НовСтрока,СтруктураТекСтроки);
	НовСтрока.Количество =  Количество;
	НовСтрока.Сумма  =  Количество * СтруктураТекСтроки.Цена;
КонецПроцедуры	

Процедура ДобавитьНовуюСтрокуОтказа(СтрокаТоваров,ТаблицаРаспределения)
	 	НовСтрока = ТаблицаРаспределения.Добавить();
		НовСтрока.Номенклатура =СтрокаТоваров.Номенклатура;
		НовСтрока.Склад = СкладРозничнойЗаявки();
		НовСтрока.Количество = СтрокаТоваров.quantity;
		НовСтрока.Цена =   СтрокаТоваров.price;
		НовСтрока.Сумма = СтрокаТоваров.quantity* СтрокаТоваров.price;
		НовСтрока.Отказ = Истина;
		НовСтрока.ПрайсПоставщика = DataExchangeПовтИсп.ПрайсСтоковогоСклада(НовСтрока.Склад);
		НовСтрока.IDSite = СтрокаТоваров.site_id;
		НовСтрока.КомментарийИзСайта =  СтрокаТоваров.description;
	
КонецПроцедуры	

#КонецОбласти

#Область Переопределяемая

Функция ПрефиксРозничнойЗаявки()
Возврат "Р"		
КонецФункции	

Функция ПрефиксТипаПоставки(ТипПоставки)
	Если ТипПоставки = Перечисления.ТипПоставки.Сток тогда 
		 Возврат "С"		
	Иначеесли ТипПоставки = Перечисления.ТипПоставки.VMI тогда 
		 Возврат "В"		
	ИначеЕсли ТипПоставки = Перечисления.ТипПоставки.Кросс тогда 
	     Возврат "К"
	Иначе 
		  Возврат ""
	КонецЕсли;	  		
		
КонецФункции


Функция СкладРозничнойЗаявки()
	Возврат Константы.СкладОсновной.Получить()	
КонецФункции	


Функция СкладVMIФизСклада(Склад)
	 Запрос = новый запрос
КонецФункции
Функция ВидОбъекта(ВидОбъектаСтрокой) Экспорт 
	
	Если ВидОбъектаСтрокой = "retail_order" Тогда
		ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаРозница;
	Иначе
		ВидОбъекта  = ВидОбъектаСтрокой;	
	КонецЕсли;
	
	Возврат ВидОбъекта;
	
КонецФункции

Функция ПространствоИмен() Экспорт
	Возврат   "http://ws-02.part-kom.ru/partkom83/hs/SiteExchange/XMLSchema";
КонецФункции	

Функция ПреобразованныйОбъектXDTO(ОбъектXDTO)
	Если ТипЗнч(ОбъектXDTO) = тип("ОбъектXDTO") тогда 
		ВидОбъекта = ВидОбъекта(ОбъектXDTO.Тип().Имя);
	иначе 
		Возврат ПреобразованыйСписокXDTO(ОбъектXDTO);
	КонецЕсли; 
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаРозница Тогда
		ПреобразованныйОбъект = Новый Структура;
		Для каждого Свойство из ОбъектXDTO.Свойства() Цикл 
			Если Свойство.Имя ="items" тогда
				СписокЗаявки  =ПреобразованыйСписокXDTO(ОбъектXDTO.items.ПолучитьСписок("item"));
				ПреобразованныйОбъект.Вставить("items",СписокЗаявки);
			иначе 	
				ПреобразованныйОбъект.Вставить(Свойство.Имя,ОбъектXDTO[Свойство.Имя]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПреобразованныйОбъект;
	
КонецФункции

Функция ПреобразованыйСписокXDTO(СписокXDTO)
	ПреобразованыйСписокXDTO = Новый Массив;
	Для Каждого Строка Из СписокXDTO Цикл
		Структура = Новый Структура;
		Для каждого Свойство из Строка.Свойства() Цикл 
			Структура.Вставить(Свойство.Имя,Строка[Свойство.Имя]);
		КонецЦикла;
		ПреобразованыйСписокXDTO.Добавить(Структура);
	КонецЦикла;
	
	Возврат ПреобразованыйСписокXDTO;	
	
КонецФункции


#КонецОбласти

#Область Обработка_Объектов 

Функция  ПолучитьНомерРозничнойЗаявки(ТипПоставки,НомерРозничнойЗаявки)

	Префикс = ПрефиксРозничнойЗаявки()+ПрефиксТипаПоставки(ТипПоставки);
	НомерРозничнойЗаявки =Сред(НомерРозничнойЗаявки,СтрНайти(НомерРозничнойЗаявки,"-")+1);
	НомерСпрефиксом = Префикс+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерРозничнойЗаявки,11-СтрДлина(Префикс))	;
	
	Возврат НомерРозничнойЗаявки;
	

	
КонецФункции	

Функция ОбъектыКОбработке(ВидыОбмена,КолВоОбъектов = 1000)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 		"ВЫБРАТЬ %1
						  |	ОбъектыОбмена.Период,
	                      |	ОбъектыОбмена.ВидОбмена,
	                      |	ОбъектыОбмена.НомерСообщения,
	                      |	ОбъектыОбмена.ИндексСтроки,
	                      |	ОбъектыОбмена.ВидОбъекта,
	                      |	ОбъектыОбмена.Данные
	                      |ИЗ
	                      |	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	                      |ГДЕ
	                      |	НЕ ОбъектыОбмена.Обработано
	                      |	И ОбъектыОбмена.ВидОбмена В(&ВидыОбмена)";
	 Запрос.Текст = СтрШаблон(ТекстЗапроса, "Первые "+Формат(КолВоОбъектов,"ЧГ=0"));
	Запрос.УстановитьПараметр("ВидыОбмена", ВидыОбмена);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ОбработатьОбъектыОбмена(УзелОбмена) Экспорт
	
	ИмяПланаОбмена =  ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелОбмена);
	
	ВидОбмена  = ПредопределенноеЗначение("Перечисление.ВидыОбменов."+ИмяПланаОбмена);
	
	Выборка = ОбъектыКОбработке(ВидОбмена);
	
	ОбщиеНастройкиЗагрузки = ОбщиеНастройкиЗагрузки();
	Пока Выборка.Следующий() Цикл
		СтруктураОтчета = Новый Структура("СсылкаНаЗаявку,Ошибка,ВременнаяОшибка,ТекстОшибки", Неопределено, Ложь, Ложь, "");
		
		ЗагрузитьОбъект(Выборка, СтруктураОтчета, ОбщиеНастройкиЗагрузки);
				
		Запись = РегистрыСведений.ОбъектыОбмена.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись,Выборка,"Период,ВидОбмена,НомерСообщения,ИндексСтроки");
		Запись.Прочитать();
		
		ЗаполнитьЗначенияСвойств(Запись, СтруктураОтчета, "Ошибка,ТекстОшибки");
		Если НЕ СтруктураОтчета.ВременнаяОшибка Тогда
			Запись.Обработано = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОтчета.СсылкаНаЗаявку) Тогда
			Запись.Ссылка = СтруктураОтчета.СсылкаНаЗаявку;
		КонецЕсли;
		Запись.ДатаОбработки = ТекущаяДата();
		Запись.Записать();
		
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗагрузитьОбъект(ДанныеОбъекта, СтруктураОтчета, ОбщиеНастройкиЗагрузки)
	
	Если ДанныеОбъекта.ВидОбъекта = Перечисления.ВидыОбъектовОбмена.ЗаявкаРозница Тогда
		ЗагрузкаОбъекта_ЗаявкаРозница(ДанныеОбъекта.Данные, СтруктураОтчета);
	КонецЕсли;
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СистемныеПроцедуДурыИФункции
Функция ПолучитьWSПрокси(АдресВебСервиса)
	Определения = Новый WSОпределения(АдресВебСервиса);
	Прокси = Новый WSПрокси(Определения, Определения.Сервисы[0].URIПространстваИмен, Определения.Сервисы[0].Имя, Определения.Сервисы[0].ТочкиПодключения[0].Имя);
	Возврат Прокси;
КонецФункции	

Функция ПолучитьАдресВэбСервиса(ИмяПланаОбмена)
	Настройка = ПредопределенноеЗначение("Справочник.НастройкиРеквизитовДляОбменов."+ИмяПланаОбмена);
	АдресВебСервиса = ?(ОбщегоНазначения.ЭтоРабочаяИнформационнаяБаза(), Настройка.СтрокаДляРабочейБазы, Настройка.СтрокаДляТестовойБазы);
	Возврат АдресВебСервиса;
	
	
КонецФункции


Функция ПолучитьСтрктуруУзловОбмена(УзелОбмена,ИмяПланаОбмена)
	МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена] ;
	СтруктураУзловОбмена = новый Структура;
	ВходящийУзел = МенеджерПланаОбмена.УзелПланаОбмена(Истина);
	ИсходящийУзел = МенеджерПланаОбмена.УзелПланаОбмена(Ложь);
	СтруктураУзловОбмена.Вставить("ВходящийУзел",ВходящийУзел);
	СтруктураУзловОбмена.Вставить("ИсходящийУзел",ИсходящийУзел);
	СтруктураУзловОбмена.Вставить("КодПолучателя",УзелОбмена.ИдентификаторУзла);
	СтруктураУзловОбмена.Вставить("НомерПринятого1С",ВходящийУзел.НомерПринятого);
	СтруктураУзловОбмена.Вставить("НомерОтправленного1С",ИсходящийУзел.НомерОтправленного);
	
	Возврат СтруктураУзловОбмена
	
Конецфункции 

Функция ОбработатьОтветВэбСервиса(ОтветВэбСервиса);
	
	РаспакованноеСообщение = ОбменДаннымиСервер.РаспаковатьСообщениеОбмена(ОтветВэбСервиса);
	
	ТипСообщениеОбмена = ФабрикаXDTO.Тип(ПространствоИмен(), "СообщениеОбмена");
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(РаспакованноеСообщение);
	ДанныеХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ, ТипСообщениеОбмена);	
	
	Возврат ДанныеХДТО;
	
КонецФункции	

Процедура ОбновитьНомерОтправленого(УзелОбмена,НомерСообщения) Экспорт 
	ОбъектУзла = УзелОбмена.ПолучитьОбъект();
	ОбъектУзла.НомерПринятого = НомерСообщения;
	ОбъектУзла.ОбменДанными.Загрузка = Истина;
	ОбъектУзла.Записать();
КонецПроцедуры	

Процедура ПолучитьДанныеССайта(УзелОбмена,ИмяМетода) Экспорт
	//# Kalinin V.A. ( 2018-11-13 )
	// Переписал , так как дублировалось в каждом обмене	
	ИмяПланаОбмена =  ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелОбмена);
	СтруктураУзловОбмена = ПолучитьСтрктуруУзловОбмена(УзелОбмена,ИмяПланаОбмена);	
	АдресВебСервиса = ПолучитьАдресВэбСервиса(ИмяПланаОбмена);	
	Прокси  = ПолучитьWSПрокси(АдресВебСервиса);
	
	ОтветВэбСервиса = Прокси.GetExchangeMessage(ИмяМетода,СтруктураУзловОбмена.КодПолучателя, СтруктураУзловОбмена.НомерПринятого1С);
	//ОтветВэбСервиса = Прокси.GetExchangeMessage(ИмяМетода, СтруктураУзловОбмена.КодПолучателя, 0);
	
	ДанныеХДТО =  ОбработатьОтветВэбСервиса(ОтветВэбСервиса);
	ОбъектыXDTO =  ДанныеХДТО.Объекты.ПолучитьСписок("Объект");
	
	
	НомерСообщения = ДанныеХДТО.НомерСообщения;
	НомерПринятогоСайтом = Мин(СтруктураУзловОбмена.НомерОтправленного1С, ДанныеХДТО.НомерПринятого);
	
	
	Если НомерСообщения <= СтруктураУзловОбмена.НомерПринятого1С Тогда
		Текстсообщения = "[ЗагрузитьСообщениеОбмена]: неправильное значение элемента ""НомерСообщения"": сообщение с таким номером уже загружалось";
		КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(УзелОбмена,ПредопределенноеЗначение("Справочник.СобытияДляОтправкиЭлектронныхПисем.ОшибкаОбменаССайтом"),
		Текстсообщения,СтруктураУзловОбмена,Истина);
		Возврат 
	КонецЕсли;
	
	Если ОбъектыXDTO.Количество() > 0 Тогда
		ОбменДаннымиВызовСервера.ЗарегистрироватьСообщениеВИсторииОбменаССайтом(СтруктураУзловОбмена.ИсходящийУзел.ИдентификаторУзла, СтруктураУзловОбмена.КодПолучателя,
		ОтветВэбСервиса, НомерСообщения);
		РазобратьПолученныеОбъекты(ОбъектыXDTO, НомерСообщения,ИмяПланаОбмена);
	КонецЕсли;
	
	ОбновитьНомерОтправленого(СтруктураУзловОбмена.ВходящийУзел,НомерСообщения);	
	
КонецПроцедуры	


Процедура РазобратьПолученныеОбъекты(ОбъектыXDTO, НомерСообщения,ИмяПланаОбмена)Экспорт
	
	ВидОбмена  = ПредопределенноеЗначение("Перечисление.ВидыОбменов."+ИмяПланаОбмена);
	
	
	НаборЗаписей = РегистрыСведений.ОбъектыОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидОбмена.Установить(ВидОбмена);;
	НаборЗаписей.Отбор.НомерСообщения.Установить(НомерСообщения);
	
	ИндексСтроки = 1;
	Для Каждого Объект Из ОбъектыXDTO Цикл
		ВидОбъекта = ВидОбъекта(Объект.Тип().Имя);
		Если ЗначениеЗаполнено(ВидОбъекта) Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.ВидОбмена = ВидОбмена; 
			Запись.НомерСообщения = НомерСообщения; 
			Запись.ИндексСтроки = ИндексСтроки;
			
			Запись.ВидОбъекта = ВидОбъекта;
			Запись.Период = ТекущаяДата();
			//Серилизатор = новый СериализаторXDTO(ФабрикаXDTO);
			
			Данные = ПреобразованныйОбъектXDTO(Объект);
			Запись.Данные = ЗначениеВСтрокуВнутр(Данные);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры


Функция ОбщиеНастройкиЗагрузки()
	
	Структура = Новый Структура;
	Структура.Вставить("ГруппаРозничныхКонтрагентов", РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт(Розница)", "Группа розничных контрагентов", Справочники.Контрагенты.НайтиПоКоду("00000002")));
	Структура.Вставить("ЦеноваяГруппаРозничныхКонтрагентов", РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт(Розница)", "Ценовая группа розничных контрагентов", Справочники.ГруппыКонтрагентов.НайтиПоКоду(1)));
	Структура.Вставить("ВалютаВзаиморасчетов", Константы.ВалютаРегламентированногоУчета.Получить());
	Структура.Вставить("СоздаватьТорговуюТочку", Истина);
	Структура.Вставить("ТипЦен", Константы.ТипЦен_дляСайта.Получить());
	
	Возврат Структура;
	
КонецФункции


Функция ПреобразоватьМассивСтрокВТаблицуЗначений(МассивСтрок) экспорт 
ТаблицаЗагрузки = новый ТаблицаЗначений;
 Для Каждого Свойство из МассивСтрок[0] цикл 
 	ИмяТипа =СтрЗаменить(СокрЛП(ТипЗнч(Свойство.Значение))," ",""); 
 	  ТаблицаЗагрузки.Колонки.Добавить(Свойство.Ключ,ОбщегоНазначения.ОписаниеТипаИзСтроки(ИмяТипа));	
КонецЦикла;	

Для Каждого СтруктураСтроки из МассивСтрок цикл 
	СтрокаТаблицы  = ТаблицаЗагрузки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтруктураСтроки);
КонецЦикла;

Возврат ТаблицаЗагрузки	
КонецФункции	
#КонецОбласти 