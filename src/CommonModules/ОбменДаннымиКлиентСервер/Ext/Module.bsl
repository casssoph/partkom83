////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен данными"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Для внутреннего использования
//
Процедура ПроверитьНедопустимыеСимволыВИмениПользователяWSПрокси(Знач ИмяПользователя) Экспорт
	
	Если СтрокаСодержитСимвол(ИмяПользователя, НедопустимыеСимволыВИмениПользователяWSПрокси()) Тогда
		
		СтрокаСообщения = НСтр("ru = 'В имени пользователя %1 содержатся недопустимые символы.
			|Имя пользователя не должно содержать символы %2.'"
		);
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
			ИмяПользователя, НедопустимыеСимволыВИмениПользователяWSПрокси()
		);
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
//
Функция НедопустимыеСимволыВИмениПользователяWSПрокси() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.17.0") > 0 Тогда
		Возврат ":";
	Иначе
		Возврат "@/\[]#&*?:;=";
	КонецЕсли;
	
КонецФункции

// Для внутреннего использования
//
Функция СтрокаСодержитСимвол(Знач Строка, Знач СтрокаСимволов)
	
	Для Индекс = 1 По СтрДлина(СтрокаСимволов) Цикл
		
		Символ = Сред(СтрокаСимволов, Индекс, 1);
		
		Если Найти(Строка, Символ) <> 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ЕстьРазличияСсылкиИОбъекта(вхОбъект, вхМетаданныеПланаОбмена, выхПредставлениеРазличий = -1) Экспорт
	
	лМетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(вхОбъект));
	Если (лМетаданныеОбъекта = Неопределено) тогда
		ВызватьИсключение "[ЕстьРазличияСсылкиИОбъекта]: неправильный параметр номер 1.";
	КонецЕсли;
	
	Если вхОбъект.ЭтоНовый() тогда
		Если (выхПредставлениеРазличий <> -1) тогда
			выхПредставлениеРазличий = "новый объект"; 
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	лЭтоДокумент = Ложь;
	Если Метаданные.Документы.Содержит(лМетаданныеОбъекта) тогда
		Если (лМетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить) тогда
			лЭтоДокумент = Истина;
		КонецЕсли;
	КонецЕсли;
	
	лМенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лМетаданныеОбъекта);
	лЗначенияРеквизитовКонтроля = лМенеджерОбъекта.ПолучитьЗначенияРеквизитовКонтроля(вхОбъект.Ссылка, вхМетаданныеПланаОбмена);
	
	Если (лЗначенияРеквизитовКонтроля = Неопределено) тогда
		ВызватьИсключение "[ЕстьРазличияСсылкиИОбъекта]: неправильный параметр номер 2.";
	КонецЕсли;
	
	лШапка = Неопределено;
	Если лЗначенияРеквизитовКонтроля.Свойство("Шапка", лШапка) тогда
		Для Каждого лЭлементСтруктуры Из лШапка цикл
			
			лСтароеЗначение = лЭлементСтруктуры.Значение;
			лНовоеЗначение = вхОбъект[лЭлементСтруктуры.Ключ];
			
			// свойство документа "Проведен" нужно обрабатывать по особому
			Если лЭтоДокумент И (ВРег(лЭлементСтруктуры.Ключ) = "ПРОВЕДЕН") тогда
				лРежимЗаписи = Неопределено;
				Если ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(
					вхОбъект.ДополнительныеСвойства, "РежимЗаписи", лРежимЗаписи) тогда
					Если (ТипЗнч(лРежимЗаписи) = Тип("РежимЗаписиДокумента")) тогда
						Если (лРежимЗаписи = РежимЗаписиДокумента.Проведение) тогда
							лНовоеЗначение = Истина;
						ИначеЕсли (лРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) тогда
							лНовоеЗначение = Ложь;
						КонецЕсли;
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;
			
			Если (лСтароеЗначение <> лНовоеЗначение) тогда
				Если (выхПредставлениеРазличий <> -1) тогда
					лПредставлениеСтароеЗначение = ?(ЗначениеЗаполнено(лСтароеЗначение), "" + лСтароеЗначение, "<пусто!>");
					лПредставлениеНовоеЗначение = ?(ЗначениеЗаполнено(лНовоеЗначение), "" + лНовоеЗначение, "<пусто!>");
					выхПредставлениеРазличий = """" + лЭлементСтруктуры.Ключ + """: " + лПредставлениеСтароеЗначение + " <> " + лПредставлениеНовоеЗначение; 
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;			
	КонецЕсли;
	лТабличныеЧасти = Неопределено;
	Если лЗначенияРеквизитовКонтроля.Свойство("ТабличныеЧасти", лТабличныеЧасти) тогда
		Для Каждого лЭлементСтруктуры Из лТабличныеЧасти цикл
			
			лИсходная = лЭлементСтруктуры.Значение;
			
			лКолонки = "";
			Для Каждого лКолонка Из лИсходная.Колонки цикл
				лКолонки = лКолонки + лКолонка.Имя + ",";
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(лКолонки) тогда
				лКолонки = Лев(лКолонки, СтрДлина(лКолонки) - 1);
			КонецЕсли;
			
			лТребуемая = вхОбъект[лЭлементСтруктуры.Ключ].Выгрузить(, лКолонки);
			лДобавить = Неопределено;
			лУдалить = Неопределено;
			
			Если НЕ РаботаСПоследовательностямиКлиентСервер.ТаблицыИдентичны(лИсходная, лТребуемая, лДобавить, лУдалить) тогда
				Если (выхПредставлениеРазличий <> -1) тогда
					выхПредставлениеРазличий = "табличная часть """ + лЭлементСтруктуры.Ключ + """"; 
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;		
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимаРегистрацияИзменений(вхПланОбмена, вхОбъектРегистрации, выхПредставлениеРазличий = -1) Экспорт
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[НеобходимаРегистрацияИзменений]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лТипОбъекта = ТипЗнч(вхОбъектРегистрации);
	Если (лТипОбъекта = Тип("УдалениеОбъекта")) тогда
		Возврат Истина;
	КонецЕсли;
	
	лМетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(вхОбъектРегистрации));
	Если (лМетаданныеОбъекта = Неопределено) тогда
		ВызватьИсключение "[НеобходимаРегистрацияИзменений]: неправильный параметр номер 2.";
	КонецЕсли;
	
	Если НЕ лМетаданныеПланаОбмена.Состав.Содержит(лМетаданныеОбъекта) тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьРазличияСсылкиИОбъекта(вхОбъектРегистрации, лМетаданныеПланаОбмена, выхПредставлениеРазличий);	
	
КонецФункции

Функция НеобходимаРегистрацияИзмененийНовое(вхПланОбмена, вхОбъектРегистрации) Экспорт 
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[НеобходимаРегистрацияИзменений]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лТипОбъекта = ТипЗнч(вхОбъектРегистрации);
	Если (лТипОбъекта = Тип("УдалениеОбъекта")) тогда
		Возврат Истина;
	КонецЕсли;
	
	лМетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(вхОбъектРегистрации));
	Если (лМетаданныеОбъекта = Неопределено) тогда
		ВызватьИсключение "[НеобходимаРегистрацияИзменений]: неправильный параметр номер 2.";
	КонецЕсли;
	
	Если НЕ лМетаданныеПланаОбмена.Состав.Содержит(лМетаданныеОбъекта) тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтарыеЗначения = Новый Структура;
	
	Если Не ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(вхОбъектРегистрации.ДополнительныеСвойства,"СтарыеЗначения", СтарыеЗначения) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	лМенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лМетаданныеОбъекта);
	лШапка = Неопределено;
	Если СтарыеЗначения.Свойство("Шапка", лШапка) тогда
		Для Каждого лЭлементСтруктуры Из лШапка цикл
			лСтароеЗначение = лЭлементСтруктуры.Значение;
			лНовоеЗначение = вхОбъектРегистрации[лЭлементСтруктуры.Ключ];
			Если лСтароеЗначение <> лНовоеЗначение Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьУзлыРегистрации(вхПланОбмена, вхУзлы, вхКромеУзлов)
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[ПолучитьСписокУзлов]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМенеджерПланаОбмена = ПланыОбмена[лМетаданныеПланаОбмена.Имя];
	
	лУзлы = Неопределено;
	лТипУзлы = ТипЗнч(вхУзлы);
	Если (лТипУзлы = Тип("Массив")) тогда
		лУзлы = вхУзлы;
	ИначеЕсли (лТипУзлы = Тип("СписокЗначений")) тогда
		лУзлы = вхУзлы.ВыгрузитьЗначения();
	ИначеЕсли (лТипУзлы = Тип("ПланОбменаСсылка." + лМетаданныеПланаОбмена.Имя)) тогда
		лУзлы = Новый Массив;
		лУзлы.Добавить(вхУзлы);
	КонецЕсли;
	лВсеУзлы = (лУзлы = Неопределено);
	
	лКромеУзлов = Неопределено;
	лТипКромеУзлов = ТипЗнч(вхКромеУзлов);
	Если (лТипКромеУзлов = Тип("Массив")) тогда
		лКромеУзлов = вхКромеУзлов;
	ИначеЕсли (лТипКромеУзлов = Тип("СписокЗначений")) тогда
		лКромеУзлов = вхКромеУзлов.ВыгрузитьЗначения();
	ИначеЕсли (лТипКромеУзлов = Тип("ПланОбменаСсылка." + лМетаданныеПланаОбмена.Имя)) тогда
		лКромеУзлов = Новый Массив;
		лКромеУзлов.Добавить(вхКромеУзлов);
	КонецЕсли;
	лНетКромеУзлов = (лКромеУзлов = Неопределено);
	
	лЗапрос = Новый Запрос;
	лЗапрос.УстановитьПараметр("ЭтотУзел", лМенеджерПланаОбмена.ЭтотУзел());
	лЗапрос.УстановитьПараметр("Узлы", лУзлы);
	лЗапрос.УстановитьПараметр("ВсеУзлы", лВсеУзлы);
	лЗапрос.УстановитьПараметр("КромеУзлов", лКромеУзлов);
	лЗапрос.УстановитьПараметр("НетКромеУзлов", лНетКромеУзлов);
	лТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Ссылка
	|ИЗ
	|	ПланОбмена." + лМетаданныеПланаОбмена.Имя + " КАК Т
	|ГДЕ
	|	НЕ Т.ПометкаУдаления";
	
	лРеквизитИсходящий = лМетаданныеПланаОбмена.Реквизиты.Найти("Исходящий");
	лОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	Если (лРеквизитИсходящий <> Неопределено) И (лРеквизитИсходящий.Тип = лОписаниеТиповБулево) тогда
		лТекстЗапроса = лТекстЗапроса + "
		|	И Т.Исходящий";
	КонецЕсли;
	
	лТекстЗапроса = лТекстЗапроса + "
	|	И Т.Ссылка <> &ЭтотУзел
	|	И (Т.Ссылка В (&Узлы)
	|			ИЛИ &ВсеУзлы)
	|	И (НЕ Т.Ссылка В (&КромеУзлов)
	|			ИЛИ &НетКромеУзлов)";
	лЗапрос.Текст = лТекстЗапроса;
	
	Возврат лЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

Процедура ЗарегистрироватьОбъектВУзлах(вхОбъект, вхПланОбмена, вхУзлы = Неопределено, вхКромеУзлов = Неопределено) Экспорт
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[ЗарегистрироватьОбъект]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лУзлыРегистрации = ПолучитьУзлыРегистрации(лМетаданныеПланаОбмена, вхУзлы, вхКромеУзлов);
	Если (лУзлыРегистрации.Количество() > 0) тогда
		ПланыОбмена.ЗарегистрироватьИзменения(лУзлыРегистрации, вхОбъект.Ссылка);
		Если (лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.ОбменПартКом77_83) тогда
			
			лПредставлениеРазличий = "";
			лЕстьПредставлениеРазличий = ПроведениеДокументовКлиентСервер.ПрочитатьЗначение(
			вхОбъект.ДополнительныеСвойства, "ПредставлениеРазличий", лПредставлениеРазличий);
			Если НЕ лЕстьПредставлениеРазличий тогда
				лПредставлениеРазличий = "<нет данных!>";
			КонецЕсли;
			
			лДобавляемаяСтрока = "Регистрация: " + вхОбъект + " (" + лПредставлениеРазличий + "), " + ПараметрыСеанса.ТекущийПользователь;
			ОбменДаннымиВызовСервера.ДобавитьЗаписьВЛог_ОбменПартКом77_83(лДобавляемаяСтрока);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбъект(вхОбъект, вхПланОбмена) Экспорт
	ЗарегистрироватьОбъектВУзлах(вхОбъект, вхПланОбмена, , вхОбъект.ОбменДанными.Отправитель);	
КонецПроцедуры

Функция ВыбратьИзмененияДляУзлаОбмена(вхУзелОбмена, вхНомерСообщения) Экспорт
	
	лМетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(вхУзелОбмена));
	Если (лМетаданныеПланаОбмена = Неопределено) ИЛИ НЕ Метаданные.ПланыОбмена.Содержит(лМетаданныеПланаОбмена) тогда
		ВызватьИсключение "[ВыбратьИзмененияДляУзлаОбмена]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМенеджерПланаОбмена = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лМетаданныеПланаОбмена);
	Если (вхУзелОбмена = лМенеджерПланаОбмена.ЭтотУзел()) тогда
		ВызватьИсключение "[ВыбратьИзмененияДляУзлаОбмена]: неправильный параметр номер 1.";
	КонецЕсли;
		
	Результат = Новый Соответствие;
	лВыборка = ПланыОбмена.ВыбратьИзменения(вхУзелОбмена, вхНомерСообщения);
	Для Каждого лЭлементСостава Из лМетаданныеПланаОбмена.Состав цикл
		лОбъектМетаданных = лЭлементСостава.Метаданные;
		лИмяТаблицы = лОбъектМетаданных.ПолноеИмя();
		Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(лОбъектМетаданных) тогда
			
			лЗапрос = Новый Запрос;
			лЗапрос.УстановитьПараметр("Узел", вхУзелОбмена);
			лЗапрос.УстановитьПараметр("НомерСообщения", вхНомерСообщения);
			лЗапрос.Текст = 
			"ВЫБРАТЬ
			|	Т.Ссылка,
			|	ВЫБОР
			|		КОГДА Т.Ссылка В (ВЫБРАТЬ Ссылка ИЗ " + лИмяТаблицы + ") ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЭтоУдаление
			|ПОМЕСТИТЬ
			|	Объекты
			|ИЗ
			|	" + лИмяТаблицы + ".Изменения КАК Т
			|ГДЕ
			|	Т.Узел = &Узел
			|	И Т.НомерСообщения <= &НомерСообщения;      
			|ВЫБРАТЬ Ссылка ИЗ Объекты ГДЕ НЕ ЭтоУдаление;
			|ВЫБРАТЬ Ссылка ИЗ Объекты ГДЕ ЭтоУдаление;
			|УНИЧТОЖИТЬ Объекты";
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); // read committed
			лРезультатыЗапросов = лЗапрос.ВыполнитьПакет();
			ЗафиксироватьТранзакцию();
						
			лРезультат = Новый Структура;
			Если НЕ лРезультатыЗапросов[1].Пустой() тогда
				лРезультат.Вставить("Объекты", лРезультатыЗапросов[1].Выгрузить().ВыгрузитьКолонку(0));
			КонецЕсли;
			Если НЕ лРезультатыЗапросов[2].Пустой() тогда
				лРезультат.Вставить("Удаленные", лРезультатыЗапросов[2].Выгрузить().ВыгрузитьКолонку(0));
			КонецЕсли;
			
			Если (лРезультат.Количество() > 0) тогда
				Результат.Вставить(лОбъектМетаданных, лРезультат);
			КонецЕсли;
			
		ИначеЕсли (Метаданные.РегистрыСведений.Содержит(лОбъектМетаданных)
			И лОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору)
			ИЛИ Метаданные.РегистрыНакопления.Содержит(лОбъектМетаданных) тогда
			
			лЗапрос = Новый Запрос;
			лЗапрос.УстановитьПараметр("Узел", вхУзелОбмена);
			лЗапрос.УстановитьПараметр("НомерСообщения", вхНомерСообщения);
			лЗапрос.Текст = 
			"ВЫБРАТЬ
			|	Т.Регистратор КАК Ссылка,
			|	ВЫБОР
			|		КОГДА Т.Регистратор В (ВЫБРАТЬ Регистратор ИЗ " + лИмяТаблицы + ") ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЭтоУдаление
			|ПОМЕСТИТЬ
			|	Объекты
			|ИЗ
			|	" + лИмяТаблицы + ".Изменения КАК Т
			|ГДЕ
			|	Т.Узел = &Узел
			|	И Т.НомерСообщения <= &НомерСообщения;      
			|ВЫБРАТЬ Ссылка ИЗ Объекты ГДЕ НЕ ЭтоУдаление;
			|ВЫБРАТЬ Ссылка ИЗ Объекты ГДЕ ЭтоУдаление;
			|УНИЧТОЖИТЬ Объекты";
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); // read committed
			лРезультатыЗапросов = лЗапрос.ВыполнитьПакет();
			ЗафиксироватьТранзакцию();
						
			лРезультат = Новый Структура;
			Если НЕ лРезультатыЗапросов[1].Пустой() тогда
				лРезультат.Вставить("Объекты", лРезультатыЗапросов[1].Выгрузить().ВыгрузитьКолонку(0));
			КонецЕсли;
			Если НЕ лРезультатыЗапросов[2].Пустой() тогда
				лРезультат.Вставить("Удаленные", лРезультатыЗапросов[2].Выгрузить().ВыгрузитьКолонку(0));
			КонецЕсли;
			
			Если (лРезультат.Количество() > 0) тогда
				Результат.Вставить(лОбъектМетаданных, лРезультат);
			КонецЕсли;
			
		ИначеЕсли (Метаданные.РегистрыСведений.Содержит(лОбъектМетаданных)
			И лОбъектМетаданных.РежимЗаписи <> Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) тогда
			
			лЗапрос = Новый Запрос;
			лЗапрос.УстановитьПараметр("Узел", вхУзелОбмена);
			лЗапрос.УстановитьПараметр("НомерСообщения", вхНомерСообщения);
			лТекстЗапроса = 
			"ВЫБРАТЬ";
			
			лЕстьСвязь = Ложь;
			лПолеСвязи = "";
			Если (лОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) тогда
				лТекстЗапроса = лТекстЗапроса + "
				|	Т.Период,";
				Если НЕ лЕстьСвязь тогда
					лЕстьСвязь = Истина;
					лПолеСвязи = "Период";
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого лИзмерение Из лОбъектМетаданных.Измерения цикл
				лТекстЗапроса = лТекстЗапроса + "
				|	Т." + лИзмерение.Имя + ",";
				Если НЕ лЕстьСвязь тогда
					лЕстьСвязь = Истина;
					лПолеСвязи = лИзмерение.Имя;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ лЕстьСвязь тогда
				ВызватьИсключение "[ВыбратьИзмененияДляУзлаОбмена]: обработка условия не реализована (непериодический регистр сведений без измерений).";
			КонецЕсли;
			
			лТекстЗапроса = лТекстЗапроса + "
			|	ВЫБОР
			|		КОГДА Р." + лПолеСвязи + " ЕСТЬ NULL ТОГДА ЛОЖЬ 
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЭтоУдаление
			|ПОМЕСТИТЬ
			|	Объекты
			|ИЗ
			|	" + лИмяТаблицы + ".Изменения КАК Т
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	" + лИмяТаблицы + " КАК Р
			|ПО
			|	ИСТИНА";
			
			Если (лОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) тогда
				лТекстЗапроса = лТекстЗапроса + "
				|	И Т.Период = Р.Период";
			КонецЕсли;
			
			Для Каждого лИзмерение Из лОбъектМетаданных.Измерения цикл
				лТекстЗапроса = лТекстЗапроса + "
				|	И Т." + лИзмерение.Имя + " = Р." + лИзмерение.Имя;
			КонецЦикла;
			
			лТекстЗапроса = лТекстЗапроса + "
			|ГДЕ
			|	Т.Узел = &Узел
			|	И Т.НомерСообщения <= &НомерСообщения;";      
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВыбратьПакетИзмененийДляУзлаОбмена(вхУзелОбмена, вхНомерСообщения, вхМаксимальноеКоличество) Экспорт
	
	лМетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(вхУзелОбмена));
	Если (лМетаданныеПланаОбмена = Неопределено) ИЛИ НЕ Метаданные.ПланыОбмена.Содержит(лМетаданныеПланаОбмена) тогда
		ВызватьИсключение "[ВыбратьПакетИзмененийДляУзлаОбмена]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМенеджерПланаОбмена = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лМетаданныеПланаОбмена);
	Если (вхУзелОбмена = лМенеджерПланаОбмена.ЭтотУзел()) тогда
		ВызватьИсключение "[ВыбратьПакетИзмененийДляУзлаОбмена]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лБанковскиеДокументы = Новый Массив;
	лБанковскиеДокументы.Добавить(Метаданные.Документы.ПлатежноеПоручениеВходящее);
	лБанковскиеДокументы.Добавить(Метаданные.Документы.ПлатежноеПоручениеИсходящее);
	
	// очередь метаданных - сначала справочники, потом документы, потом остальное
	лОбъектыМетаданных = РегистрыСведений.ПриоритетВыгрузкиОбъектов.ПолучитьТаблицуПриоритетов(вхУзелОбмена);
	Для Каждого лЭлементСостава Из лМетаданныеПланаОбмена.Состав цикл
		лОбъектМетаданных = лЭлементСостава.Метаданные;
		Если лОбъектыМетаданных.Найти(лОбъектМетаданных) = Неопределено Тогда
			лСтрокаОбъектыМетаданных = лОбъектыМетаданных.Добавить();
			лСтрокаОбъектыМетаданных.ОбъектМетаданных = лОбъектМетаданных;
			Если Метаданные.Справочники.Содержит(лОбъектМетаданных) тогда
				лСтрокаОбъектыМетаданных.Приоритет = 200;
			ИначеЕсли Метаданные.Документы.Содержит(лОбъектМетаданных) тогда
				// +Асташов 2017-04-17 (приоритет выгрузки банковских документов)
				// лСтрокаОбъектыМетаданных.Приоритет = 500;
				Если (лБанковскиеДокументы.Найти(лОбъектМетаданных) <> Неопределено) тогда
					лСтрокаОбъектыМетаданных.Приоритет = 400;
				Иначе
					лСтрокаОбъектыМетаданных.Приоритет = 500;
				КонецЕсли;				
				// -Асташов 2017-04-17 (приоритет выгрузки банковских документов)
			Иначе
				лСтрокаОбъектыМетаданных.Приоритет = 700;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	лОбъектыМетаданных.Сортировать("Приоритет ВОЗР");
	
	лВосстановить = Новый Соответствие;
	Результат = Новый Соответствие;
	лОставшеесяКоличество = вхМаксимальноеКоличество;	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический); // repeatable read
	Попытка
		
		лВыборка = ПланыОбмена.ВыбратьИзменения(вхУзелОбмена, вхНомерСообщения);
		Для Каждого лСтрокаОбъектыМетаданных Из лОбъектыМетаданных цикл
			лОбъектМетаданных = лСтрокаОбъектыМетаданных.ОбъектМетаданных;
			лИмяТаблицы = лОбъектМетаданных.ПолноеИмя();
			Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(лОбъектМетаданных) тогда
				
				лОписаниеТипов = ОбщегоНазначения.ОписаниеТиповСсылкаПоОбъектуМетаданных(лОбъектМетаданных);
				
				лОбъектыДляРегистрации = Новый ТаблицаЗначений;
				лОбъектыДляРегистрации.Колонки.Добавить("Ссылка", лОписаниеТипов);
				
				лОбъектыДляВосстановления = Новый ТаблицаЗначений;
				лОбъектыДляВосстановления.Колонки.Добавить("Ссылка", лОписаниеТипов);
				
				лЗапрос = Новый Запрос;
				лЗапрос.УстановитьПараметр("Узел", вхУзелОбмена);
				лЗапрос.УстановитьПараметр("НомерСообщения", вхНомерСообщения);
				лЗапрос.Текст = 
				"ВЫБРАТЬ
				|	Т.Ссылка
				|ИЗ
				|	" + лИмяТаблицы + ".Изменения КАК Т
				|ГДЕ
				|	Т.Узел = &Узел
				|	И Т.НомерСообщения <= &НомерСообщения";
				лОбъекты = Новый Массив;
				лВыборка = лЗапрос.Выполнить().Выбрать();
				Пока лВыборка.Следующий() цикл
					Если (лОставшеесяКоличество > 0) тогда
						лОбъектыДляРегистрации.Добавить().Ссылка = лВыборка.Ссылка;
						лОставшеесяКоличество = лОставшеесяКоличество - 1;
					Иначе
						лОбъектыДляВосстановления.Добавить().Ссылка = лВыборка.Ссылка;
					КонецЕсли;
				КонецЦикла;
				
				// добавляем в результат и в восстановление
				Если (лОбъектыДляРегистрации.Количество() > 0) тогда
					Результат.Вставить(лОбъектМетаданных, лОбъектыДляРегистрации);
				КонецЕсли;
				
				Если (лОбъектыДляВосстановления.Количество() > 0) тогда
					лВосстановить.Вставить(лОбъектМетаданных, лОбъектыДляВосстановления);
				КонецЕсли;
								
			КонецЕсли;
			
			// тут изменяем, чтобы возвращалась таблица значений с колонками из измерения
			// ...
			Если ОбщегоНазначения.ЭтоРегистрСведений(лОбъектМетаданных) Тогда
				
				лМенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лОбъектМетаданных);
				НаборЗаписейРегистра = лМенеджерОбъекта.СоздатьНаборЗаписей();
				
				лИзмеренияРегистра = "";
				
				Если (лОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) Тогда
					лИзмеренияРегистра = "Период";
				КонецЕсли;
				Если (лОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
					лИзмеренияРегистра = лИзмеренияРегистра + ?(ЗначениеЗаполнено(лИзмеренияРегистра),",","") + "Регистратор";
				КонецЕсли;
				
				Для Каждого лИзмерение Из лОбъектМетаданных.Измерения Цикл
					лИзмеренияРегистра = лИзмеренияРегистра + ?(ЗначениеЗаполнено(лИзмеренияРегистра),",","") + лИзмерение.Имя;
				КонецЦикла;
				
				лМассивИзмерений = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(лИзмеренияРегистра);
				
				лОбъектыДляВыгрузки = лСоздатьСтруктуруРегистраСведений(лОбъектМетаданных);
				
				лОбъектыДляВосстановления = лСоздатьСтруктуруРегистраСведений(лОбъектМетаданных);
				
				лЗапрос = Новый Запрос;
				лЗапрос.УстановитьПараметр("Узел", вхУзелОбмена);
				лЗапрос.УстановитьПараметр("НомерСообщения", вхНомерСообщения);
				лЗапрос.Текст = 
				"ВЫБРАТЬ
				|	" + лИзмеренияРегистра + "
				|ИЗ
				|	" + лИмяТаблицы + ".Изменения КАК Т
				|ГДЕ
				|	Т.Узел = &Узел
				|	И Т.НомерСообщения <= &НомерСообщения";
				лОбъекты = Новый Массив;
				лВыборка = лЗапрос.Выполнить().Выбрать();
				Пока лВыборка.Следующий() цикл
					Если (лОставшеесяКоличество > 0) тогда
						
						НоваяСтрока = лОбъектыДляВыгрузки.Добавить();
						
						ЗаполнитьЗначенияСвойств(НоваяСтрока, лВыборка);
						
						лОставшеесяКоличество = лОставшеесяКоличество - 1;
					Иначе
						НоваяСтрока = лОбъектыДляВосстановления.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, лВыборка);
					КонецЕсли;
				КонецЦикла;
				
				// добавляем в результат
				Если (лОбъектыДляВыгрузки.Количество() > 0) тогда
					Результат.Вставить(лОбъектМетаданных, лОбъектыДляВыгрузки);
				КонецЕсли;
				
				Если (лОбъектыДляВосстановления.Количество() > 0) тогда
					лВосстановить.Вставить(лОбъектМетаданных, лОбъектыДляВосстановления);
				КонецЕсли;
					
			КонецЕсли;
		КонецЦикла;
		
		// восстановление не попавших в сообщение объектов
		Для Каждого лЭлементСоответствия Из лВосстановить цикл
			лОбъектыДляВосстановления = лЭлементСоответствия.Значение;
			Для Каждого лСтрокаОбъектыДляВосстановления Из лОбъектыДляВосстановления цикл
				Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(лЭлементСоответствия.Ключ) тогда
					ПланыОбмена.ЗарегистрироватьИзменения(вхУзелОбмена, лСтрокаОбъектыДляВосстановления.Ссылка);
				ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(лЭлементСоответствия.Ключ) Тогда
					
					лМенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лЭлементСоответствия.Ключ);
					НаборЗаписейРегистра = лМенеджерОбъекта.СоздатьНаборЗаписей();
					
					лИзмеренияРегистра = "";
					
					Если (лОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) Тогда
						лИзмеренияРегистра = "Период";
					КонецЕсли;
					Если (лОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
						лИзмеренияРегистра = лИзмеренияРегистра + ?(ЗначениеЗаполнено(лИзмеренияРегистра),",","") + "Регистратор";
					КонецЕсли;
					
					Для Каждого лИзмерение Из лОбъектМетаданных.Измерения Цикл
						лИзмеренияРегистра = лИзмеренияРегистра + ?(ЗначениеЗаполнено(лИзмеренияРегистра),",","") + лИзмерение.Имя;
					КонецЦикла;
					
					лМассивИзмерений = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(лИзмеренияРегистра);
					
					Для Каждого лИзмерение Из лМассивИзмерений Цикл
						
						НаборЗаписейРегистра.Отбор[лИзмерение].Значение = лСтрокаОбъектыДляВосстановления[лИзмерение];
						НаборЗаписейРегистра.Отбор[лИзмерение].Использование = Истина;
						
					КонецЦикла;
					
					ПланыОбмена.ЗарегистрироватьИзменения(вхУзелОбмена, НаборЗаписейРегистра);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Добавлено Валиахметов А.А. Убрана перерегистрация
Функция ВыбратьПакетИзмененийДляУзлаОбменаНовое(вхУзелОбмена, вхНомерСообщения, вхМаксимальноеКоличество = 1000) Экспорт
	
	лМетаданныеПланаОбмена = Метаданные.НайтиПоТипу(ТипЗнч(вхУзелОбмена));
	Если (лМетаданныеПланаОбмена = Неопределено) ИЛИ НЕ Метаданные.ПланыОбмена.Содержит(лМетаданныеПланаОбмена) тогда
		ВызватьИсключение "[ВыбратьПакетИзмененийДляУзлаОбмена]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМенеджерПланаОбмена = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лМетаданныеПланаОбмена);
	Если (вхУзелОбмена = лМенеджерПланаОбмена.ЭтотУзел()) тогда
		ВызватьИсключение "[ВыбратьПакетИзмененийДляУзлаОбмена]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лБанковскиеДокументы = Новый Массив;
	лБанковскиеДокументы.Добавить(Метаданные.Документы.ПлатежноеПоручениеВходящее);
	лБанковскиеДокументы.Добавить(Метаданные.Документы.ПлатежноеПоручениеИсходящее);
	
	// очередь метаданных - сначала справочники, потом документы, потом остальное
	лОбъектыМетаданных = РегистрыСведений.ПриоритетВыгрузкиОбъектов.ПолучитьТаблицуПриоритетов(вхУзелОбмена);
	Для Каждого лЭлементСостава Из лМетаданныеПланаОбмена.Состав цикл
		лОбъектМетаданных = лЭлементСостава.Метаданные;
		Если лОбъектыМетаданных.Найти(лОбъектМетаданных) = Неопределено Тогда
			лСтрокаОбъектыМетаданных = лОбъектыМетаданных.Добавить();
			лСтрокаОбъектыМетаданных.ОбъектМетаданных = лОбъектМетаданных;
			Если Метаданные.Справочники.Содержит(лОбъектМетаданных) тогда
				лСтрокаОбъектыМетаданных.Приоритет = 200;
			ИначеЕсли Метаданные.Документы.Содержит(лОбъектМетаданных) тогда
				// +Асташов 2017-04-17 (приоритет выгрузки банковских документов)
				// лСтрокаОбъектыМетаданных.Приоритет = 500;
				Если (лБанковскиеДокументы.Найти(лОбъектМетаданных) <> Неопределено) тогда
					лСтрокаОбъектыМетаданных.Приоритет = 400;
				Иначе
					лСтрокаОбъектыМетаданных.Приоритет = 500;
				КонецЕсли;				
				// -Асташов 2017-04-17 (приоритет выгрузки банковских документов)
			Иначе
				лСтрокаОбъектыМетаданных.Приоритет = 700;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	лОбъектыМетаданных.Сортировать("Приоритет ВОЗР");
	
	Результат = Новый Соответствие;
	
	МассивОбъектов = Новый Массив;
	КоличествоВыбираемых = вхМаксимальноеКоличество;
	Индекс = 0;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический);
	Попытка
		Пока КоличествоВыбираемых > 0 И Индекс < лОбъектыМетаданных.Количество() Цикл  
			лСтрокаОбъектыМетаданных = лОбъектыМетаданных.Получить(Индекс);
			лОбъектМетаданных = лСтрокаОбъектыМетаданных.ОбъектМетаданных;
			Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(лОбъектМетаданных) Тогда 
				
				лОписаниеТипов = ОбщегоНазначения.ОписаниеТиповСсылкаПоОбъектуМетаданных(лОбъектМетаданных);
				
				лОбъектыДляРегистрации = Новый ТаблицаЗначений;
				лОбъектыДляРегистрации.Колонки.Добавить("Ссылка", лОписаниеТипов);
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоВыбираемых, "ЧН=; ЧГ=") + "
				               |	Т.Ссылка
				               |ИЗ
				               |" + лОбъектМетаданных.ПолноеИмя() + ".Изменения КАК Т
				               |ГДЕ
				               |	Т.Узел = &Узел";
				Запрос.УстановитьПараметр("Узел", вхУзелОбмена);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл 
					МассивОбъектов.Добавить(Выборка.Ссылка);
					лОбъектыДляРегистрации.Добавить().Ссылка = Выборка.Ссылка;
				КонецЦикла;
				
				КоличествоВыбираемых = КоличествоВыбираемых - Выборка.Количество();
				
				Если (лОбъектыДляРегистрации.Количество() > 0) тогда
					Результат.Вставить(лОбъектМетаданных, лОбъектыДляРегистрации);
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(лОбъектМетаданных) Тогда 
				
				лОбъектыДляВыгрузки = лСоздатьСтруктуруРегистраСведений(лОбъектМетаданных);
				
				лМенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лОбъектМетаданных);
				
				лИзмеренияРегистра = "";
				
				Если (лОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) Тогда
					лИзмеренияРегистра = "Период";
				КонецЕсли;
				Если (лОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
					лИзмеренияРегистра = лИзмеренияРегистра + ?(ЗначениеЗаполнено(лИзмеренияРегистра),",","") + "Регистратор";
				КонецЕсли;
				
				Для Каждого лИзмерение Из лОбъектМетаданных.Измерения Цикл
					лИзмеренияРегистра = лИзмеренияРегистра + ?(ЗначениеЗаполнено(лИзмеренияРегистра),",","") + лИзмерение.Имя;
				КонецЦикла;
				
				лЗапрос = Новый Запрос;
				лЗапрос.УстановитьПараметр("Узел", вхУзелОбмена);
				лЗапрос.Текст = 
				
				"ВЫБРАТЬ ПЕРВЫЕ "  + Формат(КоличествоВыбираемых, "ЧН=; ЧГ=") + "
				|	" + лИзмеренияРегистра + "
				|ИЗ
				|	" + лОбъектМетаданных.ПолноеИмя() + ".Изменения КАК Т
				|ГДЕ
				|	Т.Узел = &Узел";
				Таблица = лЗапрос.Выполнить().Выгрузить();
				Для Каждого СтрокаТЧ Из Таблица Цикл 
					НаборЗаписейРегистра = лМенеджерОбъекта.СоздатьНаборЗаписей();
					Для Индекс = 0 По НаборЗаписейРегистра.Отбор.Количество() - 1 Цикл 
						ЭлементОтбора = НаборЗаписейРегистра.Отбор.Получить(Индекс);
						ЭлементОтбора.Установить(СтрокаТЧ[ЭлементОтбора.Имя]);
					КонецЦикла;
					МассивОбъектов.Добавить(НаборЗаписейРегистра);
					ЗаполнитьЗначенияСвойств(лОбъектыДляВыгрузки.Добавить(), СтрокаТЧ);
				КонецЦикла;
				
				КоличествоВыбираемых = КоличествоВыбираемых - Таблица.Количество();
				
				// добавляем в результат
				Если (лОбъектыДляВыгрузки.Количество() > 0) тогда
					Результат.Вставить(лОбъектМетаданных, лОбъектыДляВыгрузки);
				КонецЕсли;
				
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		лВыборка = ПланыОбмена.ВыбратьИзменения(вхУзелОбмена, вхНомерСообщения, МассивОбъектов);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции
// Конец Добавлено Валиахметов А.А.

Функция ПолучитьВходящийУзелОбмена(вхПланОбмена, вхИдентификаторУзла) Экспорт
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[ПолучитьВходящийУзелОбмена]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМенеджерПланаОбмена = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лМетаданныеПланаОбмена);
	Результат = лМенеджерПланаОбмена.ПустаяСсылка();
	
	лЗапрос = Новый Запрос;
	лЗапрос.УстановитьПараметр("ИдентификаторУзла", вхИдентификаторУзла);
	лЗапрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка
	|ИЗ
	|	ПланОбмена." + лМетаданныеПланаОбмена.Имя + " КАК Т
	|ГДЕ
	|	Т.ИдентификаторУзла = &ИдентификаторУзла
	|	И Т.Входящий";
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Если лВыборка.Следующий() тогда
		Результат = лВыборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИсходящийУзелОбмена(вхПланОбмена, вхИдентификаторУзла) Экспорт
	
	лМетаданныеПланаОбмена = Неопределено;
	лТип = ТипЗнч(вхПланОбмена);
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеПланаОбмена = Метаданные.ПланыОбмена.Найти(вхПланОбмена);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.ПланыОбмена.Содержит(вхПланОбмена) тогда
		лМетаданныеПланаОбмена = вхПланОбмена;
	КонецЕсли;
	
	Если (лМетаданныеПланаОбмена = Неопределено) тогда
		ВызватьИсключение "[ПолучитьИсходящийУзелОбмена]: неправильный параметр номер 1.";
	КонецЕсли;
	
	лМенеджерПланаОбмена = ОбщегоНазначения.МенеджерОбъектаПоМетаданным(лМетаданныеПланаОбмена);
	Результат = лМенеджерПланаОбмена.ПустаяСсылка();
	
	лЗапрос = Новый Запрос;
	лЗапрос.УстановитьПараметр("ИдентификаторУзла", вхИдентификаторУзла);
	лЗапрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка
	|ИЗ
	|	ПланОбмена." + лМетаданныеПланаОбмена.Имя + " КАК Т
	|ГДЕ
	|	Т.ИдентификаторУзла = &ИдентификаторУзла
	|	И Т.Исходящий";
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Если лВыборка.Следующий() тогда
		Результат = лВыборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуЗначенийИзМассива(вхМассив, вхИмяКолонки, вхОписаниеТиповКолонки) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить(вхИмяКолонки, вхОписаниеТиповКолонки);
	Для к = 1 по вхМассив.Количество() цикл
		Результат.Добавить();	
	КонецЦикла;	
	Результат.ЗагрузитьКолонку(вхМассив, вхИмяКолонки);
	Возврат Результат;
	
КонецФункции

Функция лСоздатьСтруктуруРегистраСведений(вхРегистр)
	
	лТип = ТипЗнч(вхРегистр);
	лМетаданныеРегистра = Неопределено;
	Если (лТип = Тип("Строка")) тогда
		лМетаданныеРегистра = Метаданные.РегистрыСведений.Найти(вхРегистр);
	ИначеЕсли (лТип = Тип("ОбъектМетаданных")) И Метаданные.РегистрыСведений.Содержит(вхРегистр) тогда
		лМетаданныеРегистра = вхРегистр;
	КонецЕсли;
	
	Если (лМетаданныеРегистра = Неопределено) тогда
		ВызватьИсключение "[лСоздатьСтруктуруРегистраСведений]: неправильный параметр номер 1.";
	КонецЕсли;
	
	выхТабДвиж = Новый ТаблицаЗначений;
	Если (лМетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) тогда
		выхТабДвиж.Колонки.Добавить("Период", лМетаданныеРегистра.СтандартныеРеквизиты.Период.Тип);
	КонецЕсли;
	Если (лМетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) тогда
		выхТабДвиж.Колонки.Добавить("Регистратор", лМетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Тип);
	КонецЕсли;
		
	Для Каждого лОбъектМетаданных Из лМетаданныеРегистра.Измерения цикл
		выхТабДвиж.Колонки.Добавить(лОбъектМетаданных.Имя, лОбъектМетаданных.Тип);
	КонецЦикла;
	
	Возврат выхТабДвиж
	
КонецФункции

// Процедура регистрирует к обмену объекты ссылочного типа, которые необходимо выгрузить вместе с объектом(-ами)
//
// Параметры:
//  вхОбъекты  - <Объект ссылочного типа; Массив объектов ссылочного типа> - Объект или массив объектов, для которого необходимо найти и зарегистрировать связанные объекты ссылочного типа
//                 
//  вхИдентификаторУзла  - <ПланОбменаСсылка> - узел обмена, для которого необходимо зарегистрировать изменения
//                 
//  вхВключаемыеРеквизиты  - <Соответствие> - соответствие вида <ИмяОбъектаМетаданных>-<Структура>
//                 Если параметр задан, регистрация объектов будет произведена только для указанных реквизитов
//  вхИсключаемыеРеквизиты  - <Соответствие> - соответствие вида <ИмяОбъектаМетаданных>-<Структура>
//                 Если параметр задан, из регистрации объектов будут исключены указанные реквизиты
//
Функция ПолучитьСвязанныеОбъекты(вхОбъекты, вхИдентификаторУзла, вхВключаемыеРеквизиты=Неопределено, вхИсключаемыеРеквизиты=Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(вхОбъекты) Тогда
		ВызватьИсключение "[ЗарегистрироватьСвязанныеОбъектыКОбмену]: неправильный параметр номер 1.";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(вхИдентификаторУзла) Тогда
		ВызватьИсключение "[ЗарегистрироватьСвязанныеОбъектыКОбмену]: неправильный параметр номер 2.";
	КонецЕсли;
	
	лОбъекты = Новый Массив;
	
	Если ТипЗнч(вхОбъекты) = Тип("Массив") Тогда
		
		Для Каждого ТекущийОбъект Из вхОбъекты Цикл
			
			ПолучитьОбъектыДляРегистрации(ТекущийОбъект, лОбъекты, вхВключаемыеРеквизиты, вхИсключаемыеРеквизиты);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(вхОбъекты) = Тип("ТаблицаЗначений") Тогда
		
		Если вхОбъекты.Колонки.Найти("Ссылка") = Неопределено Тогда
			ВызватьИсключение "[ЗарегистрироватьСвязанныеОбъектыКОбмену]: неправильный параметр номер 1 (отсутствует колонка ""Ссылка"").";
		КонецЕсли;
		
		Для Каждого цТекущаяСтрока Из вхОбъекты Цикл
			
			ПолучитьОбъектыДляРегистрации(цТекущаяСтрока.Ссылка, лОбъекты, вхВключаемыеРеквизиты, вхИсключаемыеРеквизиты);
			
		КонецЦикла;
		
	Иначе
		
		ПолучитьОбъектыДляРегистрации(вхОбъекты, лОбъекты, вхВключаемыеРеквизиты, вхИсключаемыеРеквизиты);
		
	КонецЕсли;
	
	Возврат лОбъекты

КонецФункции // ЗарегистрироватьСвязанныеОбъектыКОбмену()

Процедура ПолучитьОбъектыДляРегистрации(вхОбъект, лОбъектыДляРегистрации, вхВключаемыеРеквизиты = Неопределено, вхИсключаемыеРеквизиты = Неопределено)
	
	Если лОбъектыДляРегистрации.Найти(вхОбъект) = Неопределено Тогда
		лОбъектыДляРегистрации.Добавить(вхОбъект);
	КонецЕсли;
	
	МассивИсключаемыхСтандартныхРеквизитов = Новый Массив;
	МассивИсключаемыхСтандартныхРеквизитов.Добавить("ИмяПредопределенныхДанных");
	МассивИсключаемыхСтандартныхРеквизитов.Добавить("Предопределенный");
	МассивИсключаемыхСтандартныхРеквизитов.Добавить("Ссылка");
	
	лМетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(вхОбъект));
	лВключаемыеРеквизиты = Неопределено;
	лИсключаемыеРеквизиты = Неопределено;
	Если Не вхВключаемыеРеквизиты = Неопределено Тогда
		лСоответствие = вхВключаемыеРеквизиты.Получить(лМетаданныеОбъекта);
		Если Не лСоответствие = Неопределено Тогда
			лВключаемыеРеквизиты = лСоответствие;
		КонецЕсли;
	КонецЕсли;
	
	Если Не вхИсключаемыеРеквизиты = Неопределено Тогда
		лСоответствие = вхИсключаемыеРеквизиты.Получить(лМетаданныеОбъекта);
		Если Не лСоответствие = Неопределено Тогда
			лИсключаемыеРеквизиты = лСоответствие;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовОбъекта = Новый Структура("Шапка", Новый Массив);
	
	Для Каждого ТекРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		
		Для Каждого ТекТип Из ТекРеквизит.Тип.Типы() Цикл
			
			Если ОбщегоНазначения.ЭтоСсылка(ТекТип) Тогда
				СтруктураРеквизитовОбъекта.Шапка.Добавить(ТекРеквизит.Имя);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекРеквизит Из лМетаданныеОбъекта.СтандартныеРеквизиты Цикл
		
		Если МассивИсключаемыхСтандартныхРеквизитов.Найти(ТекРеквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекТип Из ТекРеквизит.Тип.Типы() Цикл
			
			Если ОбщегоНазначения.ЭтоСсылка(ТекТип) Тогда
				СтруктураРеквизитовОбъекта.Шапка.Добавить(ТекРеквизит.Имя);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ОбщегоНазначения.ЭтоПеречисление(лМетаданныеОбъекта) Тогда
		Для Каждого ТекРеквизит Из лМетаданныеОбъекта.Реквизиты Цикл
			
			Для Каждого ТекТип Из ТекРеквизит.Тип.Типы() Цикл
				
				Если ОбщегоНазначения.ЭтоСсылка(ТекТип) Тогда
					СтруктураРеквизитовОбъекта.Шапка.Добавить(ТекРеквизит.Имя);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ТекущаяТабличнаяЧасть Из лМетаданныеОбъекта.ТабличныеЧасти Цикл
			
			ИмяТабличнойЧасти = ТекущаяТабличнаяЧасть.Имя;
			СтруктураРеквизитовОбъекта.Вставить(ИмяТабличнойЧасти, Новый Массив);
			
			Для Каждого ТекРеквизит Из ТекущаяТабличнаяЧасть.Реквизиты Цикл
				
				Для Каждого ТекТип Из ТекРеквизит.Тип.Типы() Цикл
					
					Если ОбщегоНазначения.ЭтоСсылка(ТекТип) Тогда
						СтруктураРеквизитовОбъекта[ИмяТабличнойЧасти].Добавить(ТекРеквизит.Имя);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Если лВключаемыеРеквизиты <> Неопределено Тогда
		
		Для Каждого ТекущаяЧасть Из лВключаемыеРеквизиты Цикл
			
			Если СтруктураРеквизитовОбъекта.Свойство(ТекущаяЧасть.Ключ) Тогда
				
				Счетчик = ТекущаяЧасть.Значение.Количество();
				Пока Счетчик > 0 Цикл
					
					Счетчик = Счетчик - 1;
					ИмяЭлемента = ТекущаяЧасть.Значение[Счетчик];
					ИндексЭлемента = СтруктураРеквизитовОбъекта[ТекущаяЧасть.Ключ].Найти(ИмяЭлемента);
					Если ИндексЭлемента = Неопределено Тогда
						ТекущаяЧасть.Значение.Удалить(Счетчик);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураРеквизитовОбъекта = лВключаемыеРеквизиты;
		
	КонецЕсли;
	
	Если лИсключаемыеРеквизиты <> Неопределено Тогда
		
		Для Каждого ТекущаяЧасть Из лИсключаемыеРеквизиты Цикл
			
			Если СтруктураРеквизитовОбъекта.Свойство(ТекущаяЧасть.Ключ) Тогда
				
				Для Каждого ТекРеквизит Из ТекущаяЧасть.Значение Цикл
					
					ИндексЭлемента = СтруктураРеквизитовОбъекта[ТекущаяЧасть.Ключ].Найти(ТекРеквизит);
					Если ИндексЭлемента <> Неопределено Тогда
						СтруктураРеквизитовОбъекта[ТекущаяЧасть.Ключ].Удалить(ИндексЭлемента);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекущаяЗапись Из СтруктураРеквизитовОбъекта Цикл
		
		Если ТекущаяЗапись.Ключ = "Шапка" Тогда
			
			Если ТекущаяЗапись.Значение.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаПолейШапки = "";
			Для Каждого цИмяРеквизита Из ТекущаяЗапись.Значение Цикл
				ИменаПолейШапки = ИменаПолейШапки + ?(ЗначениеЗаполнено(ИменаПолейШапки), ",","") + цИмяРеквизита;
			КонецЦикла;
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	" + ИменаПолейШапки + "
			|ИЗ
			|	" + лМетаданныеОбъекта.ПолноеИмя() + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", вхОбъект);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Для Каждого цИмяРеквизита Из ТекущаяЗапись.Значение Цикл
					
					Если ЗначениеЗаполнено(Выборка[цИмяРеквизита]) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Выборка[цИмяРеквизита])) И лОбъектыДляРегистрации.Найти(Выборка[цИмяРеквизита]) = Неопределено Тогда
						Если лОбъектыДляРегистрации.Найти(Выборка[цИмяРеквизита]) = Неопределено Тогда
							ПолучитьОбъектыДляРегистрации(Выборка[цИмяРеквизита], лОбъектыДляРегистрации, вхВключаемыеРеквизиты, вхИсключаемыеРеквизиты);
						КонецЕсли;
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			Если ТекущаяЗапись.Значение.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаПолейТабличнойЧасти = "";
			Для Каждого цИмяРеквизита Из ТекущаяЗапись.Значение Цикл
				ИменаПолейТабличнойЧасти = ИменаПолейТабличнойЧасти + ?(ЗначениеЗаполнено(ИменаПолейТабличнойЧасти), ",","") + "ТабличнаяЧасть." + цИмяРеквизита;
			КонецЦикла;
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	" + ИменаПолейТабличнойЧасти + "
			|ИЗ
			|	" + лМетаданныеОбъекта.ПолноеИмя() + "." + ТекущаяЗапись.Ключ + " КАК ТабличнаяЧасть
			|ГДЕ
			|	ТабличнаяЧасть.Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", вхОбъект);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Для Каждого цИмяРеквизита Из ТекущаяЗапись.Значение Цикл
					
					Если ЗначениеЗаполнено(Выборка[цИмяРеквизита]) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Выборка[цИмяРеквизита])) И лОбъектыДляРегистрации.Найти(Выборка[цИмяРеквизита]) = Неопределено Тогда
						Если лОбъектыДляРегистрации.Найти(Выборка[цИмяРеквизита]) = Неопределено Тогда
							ПолучитьОбъектыДляРегистрации(Выборка[цИмяРеквизита], лОбъектыДляРегистрации, вхВключаемыеРеквизиты, вхИсключаемыеРеквизиты);
						КонецЕсли;
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//____________________________________________
Процедура ЗарегистрироватьКОбменуБИТ(вхСсылкаНаОбъект, вхОтправитель = Неопределено) Экспорт
	УзелПолучатель = ПланыОбмена.ОбменПартКом83_БитФинанс.ПолучитьСсылку(Новый УникальныйИдентификатор("356a626c-086c-11e6-80e1-005056817b9c"));
	Если вхОтправитель <> УзелПолучатель Тогда		
		Если ТипЗнч(вхСсылкаНаОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
			//ИЛИ ТипЗнч(вхСсылкаНаОбъект) = Тип("СправочникСсылка.Организации") Тогда
			СсылкаДляРегистрации = вхСсылкаНаОбъект;
		ИначеЕсли ТипЗнч(вхСсылкаНаОбъект) = Тип("СправочникСсылка.БанковскиеСчета")
			ИЛИ ТипЗнч(вхСсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			ИЛИ ТипЗнч(вхСсылкаНаОбъект) = Тип("СправочникСсылка.ТорговыеТочки") Тогда
			СсылкаДляРегистрации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаОбъект, "Владелец");
			Если ТипЗнч(СсылкаДляРегистрации) <> Тип("СправочникСсылка.Контрагенты") Тогда
				СсылкаДляРегистрации = Неопределено;
			КонецЕсли;
		Иначе
			СсылкаДляРегистрации = Неопределено;
		КонецЕсли;
		Если СсылкаДляРегистрации <> Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелПолучатель, СсылкаДляРегистрации);
		КонецЕсли;
		//ПланыОбмена.ЗарегистрироватьИзменения(УзелПолучатель, вхСсылкаНаОбъект);
	КонецЕсли;
	УзелПолучатель = ПланыОбмена.ОбменПартКом83_CRM.ПолучитьСсылку(Новый УникальныйИдентификатор("3b7555d0-95dd-11e6-80e5-005056817b9c"));
	Если вхОтправитель <> УзелПолучатель Тогда		
		Если ТипЗнч(вхСсылкаНаОбъект) = Тип("СправочникСсылка.Контрагенты")Тогда
			СсылкаДляРегистрации = вхСсылкаНаОбъект;
		ИначеЕсли ТипЗнч(вхСсылкаНаОбъект) = Тип("СправочникСсылка.ТорговыеТочки") Тогда
			СсылкаДляРегистрации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(вхСсылкаНаОбъект, "Владелец");
		Иначе
			СсылкаДляРегистрации = Неопределено;
		КонецЕсли;
		Если СсылкаДляРегистрации <> Неопределено И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СсылкаДляРегистрации)) И Не ЭтоБитаяСсылка(СсылкаДляРегистрации) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелПолучатель, СсылкаДляРегистрации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавлено Валиахметов А.А.  2017г.
Функция ЭтоБитаяСсылка(Ссылка) Экспорт 
	
	ПолноеИмя = Ссылка.Метаданные().ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.Ссылка
	               |ИЗ
	               |" + ПолноеИмя+ " КАК Т
	               |ГДЕ
	               |	Т.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ЗаписатьОшибкиПриОбменеСТопЛог(СтруктураОшибки) Экспорт 
	
	МенеджерЗаписи = РегистрыСведений.ОшибкиПриОбменеСТопЛог.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураОшибки);
		
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ОчиститьОшибкиПриОбменеСТопЛог(СтруктураОшибки) Экспорт 
	
	НаборЗаписей = РегистрыСведений.ОшибкиПриОбменеСТопЛог.СоздатьНаборЗаписей();
	Для Каждого КлючЗначение из СтруктураОшибки Цикл
		Выполнить("НаборЗаписей.Отбор." + КлючЗначение.Ключ +".Установить(КлючЗначение.Значение)"); 
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ДополнитьДаннымиПоПечати(ОбъектXDTO, вхСсылкаНаДокумент, СЗ = Неопределено) Экспорт
	
	Если ТипЗнч(вхСсылкаНаДокумент) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		ДополнитьПустымиДаннымиПоПечати(ОбъектXDTO, вхСсылкаНаДокумент); //Для валидности схемы XDTO
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	КонтактнаяИнформация.Объект КАК Контрагент,
	                |	КонтактнаяИнформация.Представление КАК АдресДоставки
	                |ПОМЕСТИТЬ втАдресаДоставки
	                |ИЗ
	                |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |ГДЕ
	                |	КонтактнаяИнформация.Объект = ВЫРАЗИТЬ(&Ссылка КАК Документ.РеализацияТоваровУслуг).Контрагент
	                |	И КонтактнаяИнформация.Вид = &Вид
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	РеализацияТоваровУслуг.Организация КАК Организация,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.НаименованиеПолное, """") КАК ФирмаНаименование,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ИНН, """") + ВЫБОР
	                |		КОГДА РеализацияТоваровУслуг.Организация.ЮрФизЛицо.Порядок = 0
	                |			ТОГДА ""/"" + ЕСТЬNULL(РеализацияТоваровУслуг.Организация.КПП, """")
	                |		ИНАЧЕ """"
	                |	КОНЕЦ КАК ФирмаИНН,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.КодПоОКПО, """") КАК ФирмаОКПО,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.НомерСчета, """") КАК НомерСчета,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Код, """") КАК БИКБанка,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.КоррСчет, """") КАК СчетБанка,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Наименование, """") КАК Банк,
	                |	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	                |	ВЫБОР
	                |		КОГДА РеализацияТоваровУслуг.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	                |			ТОГДА РеализацияТоваровУслуг.Контрагент
	                |		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	                |	КОНЕЦ КАК Грузополучатель,
	                |	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	                |	РеализацияТоваровУслуг.ДатаОплаты КАК ДатаОплаты,
	                |	ЕСТЬNULL(ЕСТЬNULL(РеализацияТоваровУслуг.БанковскийСчетОрганизации.БанкДляРасчетов.Наименование, РеализацияТоваровУслуг.БанковскийСчетОрганизации.Банк.Наименование), ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.БанкДляРасчетов.Наименование, РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Наименование)) КАК БанкПолучателяСчетНаОплату,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.БанковскийСчетОрганизации.НомерСчета, РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.НомерСчета) КАК НомерСчетаСчетНаОплату,
	                |	ЕСТЬNULL(ЕСТЬNULL(РеализацияТоваровУслуг.БанковскийСчетОрганизации.БанкДляРасчетов.Код, РеализацияТоваровУслуг.БанковскийСчетОрганизации.Банк.Код), ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.БанкДляРасчетов.Код, РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Код)) КАК БИКБанкаСчетНаОплату,
	                |	ЕСТЬNULL(ЕСТЬNULL(РеализацияТоваровУслуг.БанковскийСчетОрганизации.БанкДляРасчетов.КоррСчет, РеализацияТоваровУслуг.БанковскийСчетОрганизации.Банк.КоррСчет), ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.БанкДляРасчетов.КоррСчет, РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.КоррСчет)) КАК КоррСчетСчетНаОплату,
	                |	ЕСТЬNULL(ЕСТЬNULL(РеализацияТоваровУслуг.БанковскийСчетОрганизации.БанкДляРасчетов.Город, РеализацияТоваровУслуг.БанковскийСчетОрганизации.Банк.Город), ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.БанкДляРасчетов.Город, РеализацияТоваровУслуг.Организация.ОсновнойБанковскийСчет.Банк.Город)) КАК ГородБанка,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.Контрагент.КодПоОКПО, """") КАК КонтрагентОКПО,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.УчитыватьНДС, ЛОЖЬ) КАК УчитыватьНДС,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.Склад.Сувенирный, ЛОЖЬ) КАК СкладСувенирный,
	                |	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидОплаты КАК ДоговорКонтрагентаВидОплаты,
	                |	РеализацияТоваровУслуг.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	                |	РеализацияТоваровУслуг.ТипДоставки,
	                |	РеализацияТоваровУслуг.ТорговаяТочка,
	                |	РеализацияТоваровУслуг.Номер КАК НомерДокументаТОРГ12,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.ДоговорКонтрагента.Номер, """") КАК ДоговорКонтрагентаНомер,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.ДоговорКонтрагента.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДоговорКонтрагентаДата,
	                |	РеализацияТоваровУслуг.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК ГлубинаКредита,
	                |	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидРасчетаДней КАК ВидРасчетаДней,
	                |	ЕСТЬNULL(РеализацияТоваровУслуг.МаршрутДоставки.Наименование, """") КАК МаршрутДоставкиСФ,
	                |	втАдресаДоставки.АдресДоставки
	                |ИЗ
	                |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                |		ЛЕВОЕ СОЕДИНЕНИЕ втАдресаДоставки КАК втАдресаДоставки
	                |		ПО РеализацияТоваровУслуг.Контрагент = втАдресаДоставки.Контрагент
	                |ГДЕ
	                |	РеализацияТоваровУслуг.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ОбъектXDTO, Выборка, "ФирмаНаименование,ФирмаИНН,ФирмаОКПО");
	
	ФирмаАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Выборка.Организация, "Юридический");
	Если Не ЗначениеЗаполнено(ФирмаАдрес) Тогда 
		ФирмаАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Выборка.Организация, "Фактический");
	КонецЕсли;
	
	ОбъектXDTO.ФирмаАдрес = ФирмаАдрес;
	
	ФирмаБанковскиеРеквизиты = "";
	
	Если Не ЗначениеЗаполнено(Выборка.НомерСчета) Или Не ЗначениеЗаполнено(Выборка.Банк) Тогда 
		ФирмаБанковскиеРеквизиты = ", р/c " + СокрЛП(Выборка.НомерСчета) + " в " + Выборка.Банк + ?(ЗначениеЗаполнено(Выборка.БИКБанка),Выборка.БИКБанка,"") + 
		?(ЗначениеЗаполнено(Выборка.СчетБанка),", корр/c " + СокрЛП(Выборка.СчетБанка), "")
	КонецЕсли;
	ОбъектXDTO.ФирмаБанковскиеРеквизиты = ФирмаБанковскиеРеквизиты;	
	
	ОбъектXDTO.ГрузополучательТОРГ12  = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Грузополучатель,  Выборка.ДатаДокумента), "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбъектXDTO.ПлательщикТОРГ12  = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Контрагент,  Выборка.ДатаДокумента));
	ОбъектXDTO.ОснованиеТОРГ12 = "договор № " + СокрЛп(Выборка.ДоговорКонтрагентаНомер) + " от " + Формат(Выборка.ДоговорКонтрагентаДата,"ДФ=dd.MM.yyyy; ДЛФ=D"); 
	
	ИнформацияВПодвалеТОРГ12 = "";
	Если Выборка.ГлубинаКредита > 0 Тогда 
		ДатаОплаты = УправлениеВзаиморасчетами.ПолучитьДатуОплаты(Выборка.ГлубинаКредита, Выборка.ВидРасчетаДней); 
		ИнформацияВПодвалеТОРГ12 = "Товар подлежит оплате до " + Формат(ДатаОплаты, "ДФ=dd.MM.yyyy; ДЛФ=D");
	КонецЕсли;
	
	ОбъектXDTO.ИнформацияВПодвалеТОРГ12 = ИнформацияВПодвалеТОРГ12;
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Выборка.Организация, Выборка.ДатаДокумента);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
	Если ТипЗнч(Руководитель) = Тип("Строка") Тогда 
		ОбъектXDTO.ФИОРуководителяТОРГ12 = Руководитель;
	Иначе
		ОбъектXDTO.ФИОРуководителяТОРГ12 = "";
	КонецЕсли;
	
	Если ТипЗнч(Бухгалтер) = Тип("Строка") Тогда 
		ОбъектXDTO.ФИОГлБухгалтераТОРГ12 = Бухгалтер;
	Иначе
		ОбъектXDTO.ФИОГлБухгалтераТОРГ12 = "";
	КонецЕсли;
	
	Если ТипЗнч(Руководители.РуководительДолжность) = Тип("Строка") Тогда 
		ОбъектXDTO.ДолжностьРуководителяТОРГ12 = Руководители.РуководительДолжность;
	Иначе
		ОбъектXDTO.ДолжностьРуководителяТОРГ12 = "";
	КонецЕсли;
	
	//СФ
	
	СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.ДатаДокумента);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Организация,  Выборка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Грузополучатель,  Выборка.ДатаДокумента);
	
	ОбъектXDTO.ПродавецСФ       = //"Продавец: " + 
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	Если Не ЗначениеЗаполнено(Выборка.АдресДоставки) Тогда 
		ОбъектXDTO.ГрузополучательСФ  = //"Грузополучатель и его адрес: "              + 
		?(Не ЗначениеЗаполнено(Выборка.Грузополучатель), "", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,"));
	Иначе
		ОбъектXDTO.ГрузополучательСФ  = //"Грузополучатель и его адрес: "              + 
		?(Не ЗначениеЗаполнено(Выборка.Грузополучатель), "", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование")) + "," + Выборка.АдресДоставки;
	КонецЕсли;
	
	Если Выборка.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда 
		ОбъектXDTO.АдресПокупателяСФ  = //"Адрес: " + 
		УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Выборка.Контрагент, "Юридический");
	Иначе
		ОбъектXDTO.АдресПокупателяСФ  = //"Адрес: " + 
		УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Выборка.Контрагент, "Фактический");
	КонецЕсли;
	
	ОбъектXDTO.ПокупательСФ = //"Покупатель: " + 
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
	ОбъектXDTO.ИННПокупателяСФ = //"Идентификационный номер покупателя (ИНН): " + 
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + ?(Выборка.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "/" + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь), "");
	
	//Счет на оплату
	ОбъектXDTO.ПокупательСчетНаОплату = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.ДатаДокумента), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ОбъектXDTO.БанкПолучателяСчетНаОплату = Выборка.БанкПолучателяСчетНаОплату + ?(ПустаяСтрока(Выборка.ГородБанка), "", " " + Выборка.ГородБанка); 	
	ОбъектXDTO.НомерСчетаСчетНаОплату = Выборка.НомерСчетаСчетНаОплату;
	ОбъектXDTO.БИКБанкаСчетНаОплату = Выборка.БИКБанкаСчетНаОплату;
	ОбъектXDTO.КоррСчетСчетНаОплату = Выборка.КоррСчетСчетНаОплату;
	
	ОбъектXDTO.НомерДокументаТОРГ12 = Выборка.НомерДокументаТОРГ12;
	ОбъектXDTO.ШтрихкодТОРГ12  = ОбщегоНазначения.СформироватьШК_дляДок(вхСсылкаНаДокумент);
	
	НомерДокументаСФ = "";
	ШтрихкодСФ = "";
	
	// Добавлено Валиахметов А.А.  17.02.2018	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вхСсылкаНаДокумент, "Организация.УчитыватьНДС") Тогда
		ДокСФ = УчетНДС.НайтиПодчиненныйДокумент(вхСсылкаНаДокумент, "СчетФактураВыданный");
	
		//Создаем СФ, если нет
		Если ТипЗнч(ДокСФ) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			СФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			Сф.Заполнить(вхСсылкаНаДокумент);
			Сф.Записать(РежимЗаписиДокумента.Проведение);
			ДокСф = Сф.Ссылка;
		КонецЕсли;
		НомерДокументаСФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокСФ, "Номер");
		ШтрихкодСФ = ОбщегоНазначения.СформироватьШК_дляДок(ДокСФ);
	КонецЕсли;
	// Конец Добавлено Валиахметов А.А.  17.02.2018
	
	ОбъектXDTO.НомерДокументаСФ = НомерДокументаСФ;
	ОбъектXDTO.ШтрихкодСФ = ШтрихкодСФ;
	ОбъектXDTO.КонтрагентОКПО = Выборка.КонтрагентОКПО;
	ОбъектXDTO.УчитыватьНДС = Выборка.УчитыватьНДС;
	ОбъектXDTO.МаршрутДоставкиСФ = Выборка.МаршрутДоставкиСФ;
	
	Если СЗ <> Неопределено Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(СлужебноеЗадание.ТранспортнаяКомпания.Наименование, """") КАК ТранспортнаяКомпания,
		               |	ЕСТЬNULL(СлужебноеЗадание.Водитель.Наименование, """") КАК ВодительНаименование,
		               |	ЕСТЬNULL(СлужебноеЗадание.Водитель.ФизЛицо, ЗНАЧЕНИЕ(Справочник.Физическиелица.ПустаяСсылка)) КАК ВодительФизЛицо,
		               |	ЕСТЬNULL(ВЫБОР
		               |			КОГДА СлужебноеЗадание.Водитель.Автомобиль.Марка ЕСТЬ NULL
		               |				ТОГДА СлужебноеЗадание.Водитель.Автомобиль.Наименование
		               |			ИНАЧЕ СлужебноеЗадание.Водитель.Автомобиль.Марка.Наименование
		               |		КОНЕЦ, """") КАК МаркаАвто,
		               |	ЕСТЬNULL(СлужебноеЗадание.Водитель.ГосударственныйНомер, """") КАК ГосНомерАвто,
		               |	СлужебноеЗадание.Номер КАК НомерСлужебногоЗадания,
		               |	СлужебноеЗадание.Дата КАК ДатаСлужебногоЗадания,
		               |	СлужебноеЗадание.Ссылка,
		               |	СлужебноеЗадание.ДатаНачалаУпаковки,
		               |	СлужебноеЗадание.ВремяНачалаУпаковки,
		               |	СлужебноеЗадание.ДатаОкончанияДовыписки,
		               |	СлужебноеЗадание.ВремяОкончанияДовыписки,
		               |	СлужебноеЗадание.Комментарий КАК КомментарийСЗ,
		               |	ЕСТЬNULL(СлужебноеЗадание.Водитель.Код, """") КАК КодВодителя,
		               |	СлужебноеЗадание.Водитель КАК Водитель,
		               |	ЕСТЬNULL(СлужебноеЗадание.МаршрутДоставки.Наименование, """") КАК МаршрутДоставкиСЗ
		               |ИЗ
		               |	Документ.СлужебноеЗадание КАК СлужебноеЗадание
		               |ГДЕ
		               |	СлужебноеЗадание.Ссылка = &Ссылка";	
		Запрос.УстановитьПараметр("Ссылка", СЗ);
		ВыборкаСЗ = Запрос.Выполнить().Выбрать();
		ВыборкаСЗ.Следующий();
		ЗаполнитьЗначенияСвойств(ОбъектXDTO, ВыборкаСЗ, "ТранспортнаяКомпания,ВодительНаименование,МаркаАвто,ГосНомерАвто,НомерСлужебногоЗадания,ДатаСлужебногоЗадания,КомментарийСЗ,КодВодителя,МаршрутДоставкиСЗ");
		ОбъектXDTO.ВодительТелефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВыборкаСЗ.ВодительФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаСлужебный, Выборка.ДатаДокумента);
		ОбъектXDTO.ШтрихкодСЗ = ОбщегоНазначения.СформироватьШК_дляДок(ВыборкаСЗ.Ссылка);
		ОбъектXDTO.ДатаНачалаУпаковки = ВыборкаСЗ.ДатаНачалаУпаковки + Час(ВыборкаСЗ.ВремяНачалаУпаковки) * 60*60 + Минута(ВыборкаСЗ.ВремяНачалаУпаковки) * 60 + Секунда(ВыборкаСЗ.ВремяНачалаУпаковки);
		ОбъектXDTO.ДатаОкончанияДовыписки = ВыборкаСЗ.ДатаОкончанияДовыписки + Час(ВыборкаСЗ.ВремяОкончанияДовыписки) * 60*60 + Минута(ВыборкаСЗ.ВремяОкончанияДовыписки) * 60 + Секунда(ВыборкаСЗ.ВремяОкончанияДовыписки);
		ОбъектXDTO.ИДВодителя = XMLСтрока(ВыборкаСЗ.Водитель);
	Иначе
		ОбъектXDTO.ТранспортнаяКомпания = "";
		ОбъектXDTO.ВодительНаименование = "";
		ОбъектXDTO.МаркаАвто = "";
		ОбъектXDTO.ГосНомерАвто = "";
		ОбъектXDTO.НомерСлужебногоЗадания = "";
		ОбъектXDTO.ДатаСлужебногоЗадания = Дата(1,1,1);
		ОбъектXDTO.МаршрутДоставкиСФ = "";
		ОбъектXDTO.КомментарийСЗ = "";
		ОбъектXDTO.КодВодителя = "";
		ОбъектXDTO.ВодительТелефон = "";
		ОбъектXDTO.ШтрихкодСЗ = "";
		ОбъектXDTO.ДатаНачалаУпаковки = Дата(1,1,1);
		ОбъектXDTO.ДатаОкончанияДовыписки = Дата(1,1,1);
		ОбъектXDTO.ИДВодителя = "";
		ОбъектXDTO.МаршрутДоставкиСЗ = "";
	КонецЕсли;
	
	// Упрощено Валиахметов А.А 07.06.2018
	
	ПечататьТЧ = Не Выборка.УчитыватьНДС;
	ПечататьСчетНаОплату = Ложь;
	ПечататьТОРГ12 = Выборка.УчитыватьНДС;
	ПечататьСФ = Выборка.УчитыватьНДС;
	
	//Если Выборка.ДоговорКонтрагентаВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда 
	//	ПечататьТЧ = Истина;
	//	ПечататьСчетНаОплату = Ложь;
	//	ПечататьТОРГ12 = Ложь;
	//	ПечататьСФ = Ложь;
	//ИначеЕсли 	Выборка.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
	//	Если Выборка.УчитыватьНДС Тогда 
	//		ПечататьТЧ = Истина;
	//		ПечататьСчетНаОплату = Ложь;
	//		ПечататьТОРГ12 = Ложь;
	//		ПечататьСФ = Ложь;
	//	Иначе
	//		ПечататьТЧ = Истина;
	//		ПечататьСчетНаОплату = Ложь;
	//		ПечататьТОРГ12 = Истина;
	//		ПечататьСФ = Не Выборка.СкладСувенирный;
	//	КонецЕсли;
	//Иначе
	//	ПечататьТЧ = Ложь;
	//	ПечататьСчетНаОплату = Истина;
	//	ПечататьТОРГ12 = Истина;
	//	ПечататьСФ = Не Выборка.СкладСувенирный;
	//КонецЕсли;
	
	ОбъектXDTO.ПечататьТЧ = ПечататьТЧ;
	ОбъектXDTO.ПечататьСчетНаОплату = ПечататьСчетНаОплату;
	ОбъектXDTO.ПечататьТОРГ12 = ПечататьТОРГ12;
	ОбъектXDTO.ПечататьСФ = ПечататьСФ;
		
	ОбъектXDTO.ЭкспрессДоставка = Выборка.ТипДоставки = Справочники.ТипыДоставки.ЭкспрессДоставка;
	ОбъектXDTO.АдресЭкспрессДоставки = 	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.ТорговаяТочка, Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента, Выборка.ДатаДокумента);
	
	ОбъектXDTO.ФирмаОплаты = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Выборка.Организация, Выборка.ДатаДокумента), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	
	ЦенаДоставки = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Сумма), 0) КАК Сумма
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |ГДЕ
	               |	(РеализацияТоваровУслугТовары.Номенклатура = &Доставка
	               |			ИЛИ РеализацияТоваровУслугТовары.Номенклатура = &ЭкспрессДоставка)
	               |	И РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", вхСсылкаНаДокумент);
	Запрос.УстановитьПараметр("Доставка", Константы.ОсновнаяУслуга.Получить());
	Запрос.УстановитьПараметр("ЭкспрессДоставка", Константы.УслугаЭкспрессДоставка.Получить());
	
	ВыборкаДост = Запрос.Выполнить().Выбрать();
	Если ВыборкаДост.Следующий() Тогда 
		ЦенаДоставки = ВыборкаДост.Сумма;
	КонецЕсли;
	ОбъектXDTO.ЦенаДоставки = ЦенаДоставки;
	
	КоличествоДокументовСЗ = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СлужебноеЗаданиеПокупатели.Реализация), 0) КАК КоличествоДокументовСЗ
	               |ИЗ
	               |	Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
	               |ГДЕ
	               |	СлужебноеЗаданиеПокупатели.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СЗ);
	ВыборкаКолво = Запрос.Выполнить().Выбрать();
	Если ВыборкаКолво.Следующий() Тогда 
		КоличествоДокументовСЗ = ВыборкаКолво.КоличествоДокументовСЗ;
	КонецЕсли;
	
	ОбъектXDTO.КоличествоДокументовСЗ = КоличествоДокументовСЗ;
КонецПроцедуры

Процедура ДополнитьПустымиДаннымиПоПечати(ОбъектXDTO, вхСсылкаНаДокумент) Экспорт
	
	ОбъектXDTO.ФирмаНаименование = "";
	ОбъектXDTO.ФирмаИНН = "";
	ОбъектXDTO.ФирмаОКПО = "";
	ОбъектXDTO.ФирмаАдрес = "";
	ОбъектXDTO.ФирмаБанковскиеРеквизиты = "";	
	ОбъектXDTO.ГрузополучательТОРГ12  = "";
	ОбъектXDTO.ПлательщикТОРГ12  = "";
	ОбъектXDTO.ОснованиеТОРГ12 = "";
	ОбъектXDTO.ИнформацияВПодвалеТОРГ12 = "";
	ОбъектXDTO.ФИОРуководителяТОРГ12 = "";
	ОбъектXDTO.ФИОГлБухгалтераТОРГ12 = "";
	ОбъектXDTO.ДолжностьРуководителяТОРГ12 = "";
	
	//СФ
	ОбъектXDTO.ПродавецСФ       = "";
	ОбъектXDTO.ГрузополучательСФ  = "";
	ОбъектXDTO.АдресПокупателяСФ  = "";
	ОбъектXDTO.ПокупательСФ = ""; 
	ОбъектXDTO.ИННПокупателяСФ = ""; 
	
	//Счет на оплату
	ОбъектXDTO.ПокупательСчетНаОплату = "";
	ОбъектXDTO.БанкПолучателяСчетНаОплату = ""; 	
	ОбъектXDTO.НомерСчетаСчетНаОплату = "";
	ОбъектXDTO.БИКБанкаСчетНаОплату = "";
	ОбъектXDTO.КоррСчетСчетНаОплату = "";
	
	ОбъектXDTO.НомерДокументаТОРГ12 = "";
	ОбъектXDTO.ШтрихкодТОРГ12  = "";
		
	ОбъектXDTO.НомерДокументаСФ = "";
	ОбъектXDTO.ШтрихкодСФ = "";
	ОбъектXDTO.КонтрагентОКПО = "";
	ОбъектXDTO.УчитыватьНДС = Ложь;
	
	ОбъектXDTO.ТранспортнаяКомпания = "";
	ОбъектXDTO.ВодительНаименование = "";
	ОбъектXDTO.МаркаАвто = "";
	ОбъектXDTO.ГосНомерАвто = "";
	ОбъектXDTO.НомерСлужебногоЗадания = "";
	ОбъектXDTO.ДатаСлужебногоЗадания = Дата(1,1,1);
	ОбъектXDTO.МаршрутДоставкиСФ = "";
	ОбъектXDTO.КомментарийСЗ = "";
	ОбъектXDTO.КодВодителя = "";
	ОбъектXDTO.ВодительТелефон = "";
	ОбъектXDTO.ШтрихкодСЗ = "";
	ОбъектXDTO.ДатаНачалаУпаковки = Дата(1,1,1);
	ОбъектXDTO.ДатаОкончанияДовыписки = Дата(1,1,1);
	
	ОбъектXDTO.ПечататьТЧ = Ложь;
	ОбъектXDTO.ПечататьСчетНаОплату = Ложь;
	ОбъектXDTO.ПечататьТОРГ12 = Ложь;
	ОбъектXDTO.ПечататьСФ = Ложь;
	
	ОбъектXDTO.ЭкспрессДоставка = Ложь;
	ОбъектXDTO.АдресЭкспрессДоставки = 	"";
	
	ОбъектXDTO.ФирмаОплаты = "";
	ОбъектXDTO.ЦенаДоставки = 0;
	ОбъектXDTO.ИДВодителя = "";
	ОбъектXDTO.КоличествоДокументовСЗ = 0;
	ОбъектXDTO.МаршрутДоставкиСЗ = "";
	
КонецПроцедуры

Функция СоответствиеСтрокЗаявокИSSID(ТоварыXDTO, ДокументДляПоиска = Неопределено) Экспорт 
	
	ДляТеста = Ложь;
	
	МассивSSID = Новый Массив;
	Для Каждого СтрокаТовары Из ТоварыXDTO Цикл 
		Если ЗначениеЗаполнено(СтрокаТовары.SSID) Тогда 
			МассивSSID.Добавить(СтрокаТовары.SSID);
			Если ДляТеста И СтрДлина(СтрокаТовары.SSID) > 20 Тогда 
				МассивSSID.Добавить(Лев(СтрокаТовары.SSID, 20));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки,
	                |	ИдентификаторыСтрокЗаявок.IDSite КАК SSID
	                |ПОМЕСТИТЬ втОбщая
	                |ИЗ
	                |	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	                |ГДЕ
	                |	ИдентификаторыСтрокЗаявок.IDSite В(&МассивSSID)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втОбщая.SSID
	                |ПОМЕСТИТЬ втБезДублей
	                |ИЗ
	                |	втОбщая КАК втОбщая
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	втОбщая.SSID
	                |
	                |ИМЕЮЩИЕ
	                |	КОЛИЧЕСТВО(втОбщая.СтрокаЗаявки) = 1
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	втОбщая.СтрокаЗаявки,
	                |	втОбщая.SSID
	                |ИЗ
	                |	втБезДублей КАК втБезДублей
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбщая КАК втОбщая
	                |		ПО втБезДублей.SSID = втОбщая.SSID
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ Различные
	                |	втОбщая.SSID
	                |ИЗ
	                |	втОбщая КАК втОбщая
	                |ГДЕ
	                |	НЕ втОбщая.SSID В
	                |				(ВЫБРАТЬ
	                |					втБезДублей.SSID
	                |				ИЗ
	                |					втБезДублей)";
	Запрос.УстановитьПараметр("МассивSSID", МассивSSID);
	Результаты = Запрос.ВыполнитьПакет();

	СоотвSSID = Новый Соответствие;
	Выборка = Результаты[2].Выбрать();
	Пока Выборка.Следующий() Цикл 
		СоотвSSID.Вставить(Выборка.SSID, Выборка.СтрокаЗаявки);	
	КонецЦикла;
	
	Если Не Результаты[3].Пустой() Тогда 
		СДублями = Результаты[3].Выгрузить();
		Если ДокументДляПоиска <> Неопределено  Тогда 
			Если ТипЗнч(ДокументДляПоиска) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
				ИмяТЧ = "РазмещениеСтрокПрихода";
			Иначе
				ИмяТЧ = "Товары";
			КонецЕсли;                                                                                
			
			Запрос = Новый Запрос;
			Запрос.Текст =  "ВЫБРАТЬ
			                |	втТовары.SSID
			                |ПОМЕСТИТЬ втТовары
			                |ИЗ
			                |	&втТовары КАК втТовары
			                |;
			                |
			                |////////////////////////////////////////////////////////////////////////////////
			                |ВЫБРАТЬ РАЗЛИЧНЫЕ
			                |	Док.СтрокаЗаявки.IDSite КАК SSID,
			                |	Док.СтрокаЗаявки
			                |ИЗ
			                |	" + ДокументДляПоиска.Метаданные().ПолноеИмя() + "." + ИмяТЧ + " КАК Док
			                |ГДЕ
			                |	Док.Ссылка = &Ссылка
			                |	И Док.СтрокаЗаявки.IDSite В
			                |			(ВЫБРАТЬ
			                |				втТовары.SSID
			                |			ИЗ
			                |				втТовары)";
			Запрос.УстановитьПараметр("Ссылка", ДокументДляПоиска);
			Запрос.УстановитьПараметр("втТовары", СДублями);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				СоотвSSID.Вставить(Выборка.SSID, Выборка.СтрокаЗаявки);	
				НайденнаяСтрока = СДублями.Найти(Выборка.SSID, "SSID");
				Если НайденнаяСтрока <> Неопределено Тогда 
					СДублями.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СДублями.Количество() > 0 Тогда 
			Запрос.Текст =  "ВЫБРАТЬ
			                |	втТовары.SSID
			                |ПОМЕСТИТЬ втТовары
			                |ИЗ
			                |	&втТовары КАК втТовары
			                |;
			                |
			                |////////////////////////////////////////////////////////////////////////////////
			                |ВЫБРАТЬ
			                |	втТовары.SSID,
			                |	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки,
			                |	ИдентификаторыСтрокЗаявок.ПоследняяКорректировка <> ЗНАЧЕНИЕ(Документ.КорректировкаЗаявкиПокупателя.ПустаяСсылка) КАК ЕстьКорректировка
			                |ИЗ
			                |	втТовары КАК втТовары
			                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
			                |		ПО втТовары.SSID = ИдентификаторыСтрокЗаявок.IDSite
			                |
			                |УПОРЯДОЧИТЬ ПО
			                |	ЕстьКорректировка УБЫВ,
			                |	ИдентификаторыСтрокЗаявок.СрокГарантированный УБЫВ";
			Запрос.УстановитьПараметр("втТовары", СДублями);
			Таблица = Запрос.Выполнить().Выгрузить();
			Для Каждого СтрокаТЧ Из СДублями Цикл 
				НайденнаяСтрока = Таблица.Найти(СтрокаТЧ.SSID, "SSID");
				Если НайденнаяСтрока <> Неопределено Тогда 
					СоотвSSID.Вставить(СтрокаТЧ.SSID, НайденнаяСтрока.СтрокаЗаявки);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат СоотвSSID;
	
КонецФункции

Функция НайтиСтрокуЗаявкиВСоответствии(СоотвSSID, SSID) Экспорт 
	
	ДляТеста = Ложь;
	
	СтрокаЗаявки = СоотвSSID[SSID];
	
	Если ДляТеста И Не ЗначениеЗаполнено(СтрокаЗаявки) И СтрДлина(SSID) > 20 Тогда 
		СтрокаЗаявки = СоотвSSID[Лев(SSID, 20)];
	КонецЕсли;
	
	Возврат СтрокаЗаявки;
	
КонецФункции

// Конец Добавлено Валиахметов А.А. 2017г.

Процедура ПостОбработкаОбъектовПриОбменеСТопЛог() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтложенноеИзменениеОбъектовТопЛог.Объект
	               |ИЗ
	               |	РегистрСведений.ОтложенноеИзменениеОбъектовТопЛог КАК ОтложенноеИзменениеОбъектовТопЛог";
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Результат = Запрос.Выполнить();
	ЗафиксироватьТранзакцию();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Попытка
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический);
				Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
					ОбработатьПТУ(Выборка.Объект);
				ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.СлужебноеЗадание") Тогда 
					ОбработатьСЗ(Выборка.Объект);
				КонецЕсли;
			НаборЗаписей = РегистрыСведений.ОтложенноеИзменениеОбъектовТопЛог.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписей.Записать(Истина);
			
		    ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьПТУ(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.СтрокаПрихода,
	               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
	               |ПОМЕСТИТЬ втРазмещение
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
	               |	И ПеремещениеТоваровТовары.Ссылка.Проведен
	               |	И ПеремещениеТоваровТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПеремещениеТоваровПоступил)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПеремещениеТоваровТовары.СтрокаПрихода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугТовары.НомерСтроки,
	               |	ЕСТЬNULL(втРазмещение.Количество, 0) - ПоступлениеТоваровУслугТовары.КоличествоРазмещено КАК КоличествоДобавить
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втРазмещение КАК втРазмещение
	               |		ПО ПоступлениеТоваровУслугТовары.СтрокаПрихода = втРазмещение.СтрокаПрихода
	               |ГДЕ
	               |	ПоступлениеТоваровУслугТовары.КоличествоРазмещено - ЕСТЬNULL(втРазмещение.Количество, 0) <> 0
	               |	И ПоступлениеТоваровУслугТовары.Ссылка = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ДокОбъект = Объект.ПолучитьОбъект();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			СтрокаТЧ = ДокОбъект.Товары.Найти(Выборка.НомерСтроки, "НомерСтроки");
			СтрокаТЧ.КоличествоРазмещено = СтрокаТЧ.КоличествоРазмещено + Выборка.КоличествоДобавить;
		КонецЦикла;
		
		Товары = ДокОбъект.Товары.Выгрузить(, "Количество,КоличествоНеПринято,КоличествоРазмещено");
		Товары.Колонки.Добавить("КоличествоНеРазмещено", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
		
		Для Каждого СтрокаТЧ Из Товары Цикл 
			СтрокаТЧ.КоличествоНеРазмещено = СтрокаТЧ.Количество - СтрокаТЧ.КоличествоНеПринято - СтрокаТЧ.КоличествоРазмещено;	
		КонецЦикла;
		
		СтрокиНеРазм = Товары.НайтиСтроки(Новый Структура("КоличествоНеРазмещено",0));
		Если Товары.Количество() = СтрокиНеРазм.Количество() Тогда 
			ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен; 
		КонецЕсли;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПоступлениеТоваровУслугТовары.НомерСтроки
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		               |ГДЕ
		               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		               |	И ПоступлениеТоваровУслугТовары.Количество - ПоступлениеТоваровУслугТовары.КоличествоНеПринято - ПоступлениеТоваровУслугТовары.КоличествоРазмещено <> 0";
		Запрос.УстановитьПараметр("Ссылка", Объект);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда 
			ДокОбъект = Объект.ПолучитьОбъект();
			ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.ПоступлениеТоваровРазмещен;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСЗ(Объект)
	
	СтатусСЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "СтатусДокумента");
	Если ЗначениеЗаполнено(СтатусСЗ) И СтатусСЗ <> Справочники.СтатусыДокументов.СлужебноеЗаданиеИдетСборка Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СлужебноеЗаданиеПокупатели.Реализация.СтатусДокумента КАК СтатусДокумента
	               |ИЗ
	               |	Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
	               |ГДЕ
	               |	СлужебноеЗаданиеПокупатели.Ссылка = &Ссылка
	               |	И СлужебноеЗаданиеПокупатели.Реализация.СтатусДокумента <> ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугОтгружен)";
	Запрос.УстановитьПараметр("Ссылка", Объект);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		ДокОбъект = Объект.ПолучитьОбъект();
		ДокОбъект.СтатусДокумента = Справочники.СтатусыДокументов.СлужебноеЗаданиеВыданВодителю;
		ДокОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры