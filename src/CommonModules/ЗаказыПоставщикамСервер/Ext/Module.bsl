

#Область Размещение_заказов_поставщику_в_ПТУ

//Процедура ОбновитьТаблицуРазмещения(ДокументПоступление,ТаблицаРазмещения,СтруктураПараметров)
//	ТаблицаДокумента = ДокументПоступление.РазмещениеСтрокПрихода;
//	Если СтруктураПараметров.ОтборНоменклатуры тогда 
//		МассивНоменклатуры = СтруктураПараметров.МассивОтбораНоменклатуры;
//		Для каждого ЭлементНоменклатуры из МассивНоменклатуры цикл 
//			
//			НайдСтроки = ТаблицаДокумента.НайтиСтроки(Новый Структура("Номенклатура",ЭлементНоменклатуры));
//			Для каждого НайденаяСтрока из НайдСтроки цикл 
//				ТаблицаДокумента.Удалить(НайденаяСтрока);
//			КонецЦикла;	
//		КонецЦикла;
//		
//		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРазмещения,ТаблицаДокумента);
//	Иначе 
//		ТаблицаДокумента.Очиствить();
//		ТаблицаДокумента.загрузить(ТаблицаРазмещения);	
//	КонецЕсли;	
//	
//КонецПроцедуры	

Процедура СоздатьВиртуальныеСтроки(СтруктураТаблицРазмещения,СтруктураПараметров)  Экспорт
	лКлючАлгоритма = "ОбщийМодуль_ЗаказыПоставщикамСервер_СоздатьВиртуальныеСтроки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	
	ТаблицаНеразмещенного = СтруктураТаблицРазмещения.ТаблицаНеразмещенного;	
	
	Если НЕ СтруктураПараметров.СоздаватьВиртуальныеСтроки 
		или ТаблицаНеразмещенного.количество() =0 тогда 
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаНеразмещенного из ТаблицаНеразмещенного цикл 
			//СтрокаВиртуальная = ДокументПоступление.РазмещениеСтрокПрихода.Добавить();
			//ЗаполнитьЗначенияСвойств(СтрокаВиртуальная,СтрокаНеразмещенного);
			СтрокаВиртуальная = ОбщегоНазначенияКлиентСервер.ВиртуальнаяСтрокаЗаявки();
			ДобавитьСтрокуРазмещениявТаблицу(СтруктураТаблицРазмещения.ТаблицаРазмещения,СтрокаНеразмещенного.Номенклатура,СтрокаВиртуальная,СтрокаНеразмещенного.СтрокаПрихода,СтрокаНеразмещенного.Количество);
	КонецЦикла;			
		
КонецПроцедуры	

//Процедура ПроставитьОтказыПоНеразмещенному(ДокументПоступление,ТаблицаНеразмещенного,СтруктураПараметров)
//	
//	Если СтруктураПараметров.ЗаказРавенПриходу и ТаблицаНеразмещенного.Количество() тогда 
//		ДокументПоступление.ДополнительныеСвойства.Вставить("ПроставитьПолныйОтказВЗаказе",СтруктураПараметров.ЗаказРаспределения);		
//	КонецЕсли;
//	
//КонецПроцедуры	

Функция ПолучитьСтруктуруПараметровЗаполнения(Знач СтруктураПараметров) экспорт
	
	Если СтруктураПараметров = Неопределено тогда 
		СтруктураПараметров = ПараметрыРазмещенияПоУмолчанию();
	иначе 
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров,ПараметрыРазмещенияПоУмолчанию(),Ложь);
	КонецЕсли;			
	
	СтрокаРеквизитовДокумента = "Контрагент,Склад,ДоговорКонтрагента,ПоставщикЗаказовДругой,ТорговаяТочка";
	СтруктураРеквизитовДокумента = новый Структура(СтрокаРеквизитовДокумента); 	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Документы,СтрокаРеквизитовДокумента);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров,СтруктураРеквизитовДокумента,Ложь);
	
	СтруктураПараметров.вставить("ОтборНоменклатуры",?(СтруктураПараметров.МассивОтбораНоменклатуры.Количество()>0,Истина,Ложь));
	//
	//СтруктураПараметров.вставить("РаспределятьПоСпискуЗаказов",?(не СтруктураПараметров.ЗаказРавенПриходу 
	//и СтруктураПараметров.СписокЗаказовРаспределения>0,Истина,Ложь));
	
	СтруктураПараметров.Вставить("МоментВремени",ТекущаяДата());
	
	Возврат СтруктураПараметров
	
КонецФункции	

#КонецОбласти

#Область Формирование_заказов
Функция ПолучитьСкладЗаказаПоПрайсу(ПрайсПоставщика,СкладВЗаявке) Экспорт 	
	лКлючАлгоритма = "ОбщийМодуль_ЗаказыПоставщикамСервер_ПолучитьСкладЗаказаПоПрайсу";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
	
	ВладелецПрайса =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрайсПоставщика,"Владелец");
	Если (Типзнч(ВладелецПрайса) = Тип("СправочникСсылка.ТорговыеТочки") и  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецПрайса, "ГородПоставки") = Справочники.Города.СанктПетербург) тогда 
		ЭтоПитерскийПоставщик = истина;
	Иначе 
		ЭтоПитерскийПоставщик = Ложь;
	КонецЕсли; 
	
	//#XX-2173 Kalinin V.A. ( 2019-03-25 )
	Если РаботаСоСтатусамиДокументовПовтИсп.ЭтоПрайсПополнениеVMI(ПрайсПоставщика) тогда 
		Возврат СкладВЗаявке		
	ИначеЕсли РаботаСоСтатусамиДокументовПовтИсп.ЭтоКроссИлиПрайсПополнениеСток(ПрайсПоставщика) тогда 		
		Если ЭтоПитерскийПоставщик тогда 	
			Возврат Справочники.Филиалы.СанктПетербург.ОсновнойСклад ;
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецПрайса,"ОтгружаетсяВНесколькихГородах") тогда 
			Возврат СкладВЗаявке
		иначе 
			СкладЗамена =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецПрайса, "ГородПоставки.СкладЗамена");
			
			Если ЗначениеЗаполнено(СкладЗамена) тогда 
				Возврат СкладЗамена
			Иначе
				Возврат СкладВЗаявке
			КонецЕсли;				
		КонецЕсли;					
	КонецЕсли;		
	
	Возврат СкладВЗаявке
	
	
КонецФункции	



#КонецОбласти



#Область Запросы_к_Данным_Размещения

Функция ПолучитьСтруктуруТаблицРазмещения(СтруктураТаблицДокумента,СтруктураПараметров,ОшибкиРазмещения = Неопределено)  Экспорт
	лКлючАлгоритма = "ОбщийМодуль_ЗаказыПоставщикамСервер_ПолучитьСтруктуруТаблицРазмещения";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
		
	ТаблицаРазмещения = ПолучитьПустуюТаблицуРазмещения();
	
	таблицаНеРазмещенного = ПолучитьПустуюТаблицуРазмещения();
	
	ЗапросПоОстаткам = Новый Запрос;
	ЗапросПоОстаткам.Текст =ТексЗапросаРазмещения_ПоступлениеТоваровУслуг();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЗапросПоОстаткам.Параметры,СтруктураПараметров,Истина);
	
	ЗапросПоОстаткам.установитьПараметр("ТаблицаТоваров",СтруктураТаблицДокумента.Товары);
		
	РезультатЗапроса = ЗапросПоОстаткам.ВыполнитьПакет();
	
	ВыборкаНоменклатуры = РезультатЗапроса[3].Выбрать();
	ТаблицаЗаказов = РезультатЗапроса[2].Выгрузить();	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		НоменклатураПоиска = ВыборкаНоменклатуры.Номенклатура;
		КоличествоКРазмещению  = ВыборкаНоменклатуры.Количество;
		НайдСтрокиЗаказов = ТаблицаЗаказов.найтиСтроки(Новый структура("Номенклатура",НоменклатураПоиска));
		
		Для каждого СтрокаЗаказа из  НайдСтрокиЗаказов цикл 
					
			Если СтрокаЗаказаНеКорректная(ВыборкаНоменклатуры,СтрокаЗаказа,СтруктураПараметров,ОшибкиРазмещения) тогда 
				Продолжить;
			КонецЕсли;	
			
			Если КоличествоКРазмещению = 0  тогда 
				Прервать;
			КонецЕсли;	 
			
			Если  КоличествоКРазмещению >= СтрокаЗаказа.Количество тогда 
				ДобавитьСтрокуРазмещениявТаблицу(ТаблицаРазмещения,НоменклатураПоиска,СтрокаЗаказа.СтрокаЗаявки,ВыборкаНоменклатуры.СтрокаПрихода,СтрокаЗаказа.Количество,ВыборкаНоменклатуры.НомерСтроки);
				КоличествоКРазмещению = КоличествоКРазмещению - СтрокаЗаказа.Количество;
				СтрокаЗаказа.Количество = 0;
			Иначе 
				ДобавитьСтрокуРазмещениявТаблицу(ТаблицаРазмещения,НоменклатураПоиска,СтрокаЗаказа.СтрокаЗаявки,ВыборкаНоменклатуры.СтрокаПрихода,КоличествоКРазмещению,ВыборкаНоменклатуры.НомерСтроки);
				СтрокаЗаказа.Количество = СтрокаЗаказа.Количество -КоличествоКРазмещению;
				КоличествоКРазмещению = 0;	 
			КонецЕсли;	 
		КонецЦикла;
		
		
		Если КоличествоКРазмещению>0 тогда 
			ДобавитьСтрокуРазмещениявТаблицу(ТаблицаНеРазмещенного,НоменклатураПоиска,,ВыборкаНоменклатуры.СтрокаПрихода,КоличествоКРазмещению,ВыборкаНоменклатуры.НомерСтроки);
		КонецЕсли;			
	КонецЦикла;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаРазмещения",ТаблицаРазмещения);
	СтруктураТаблиц.Вставить("ТаблицаНеРазмещенного",ТаблицаНеРазмещенного);
	
	Возврат СтруктураТаблиц;
	
КонецФункции	

Функция СтрокаЗаказаНеКорректная(ВыборкаНоменклатуры,СтрокаЗаказа,СтруктураПараметров,ОшибкиРазмещения = неопределено)
	лКлючАлгоритма = "ОбщийМодуль_ЗаказыПоставщикамСервер_СтрокаЗаказаКорректная";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
	
	Отказ = Ложь;
	
	Если СтрокаЗаказа.Количество <= 0  тогда 
		Возврат Истина;
	КонецЕсли;	
	
	Если не СтруктураПараметров.МожноПровести тогда 
		
		
		ОтклонениеЦены =  (ВыборкаНоменклатуры.Цена - СтрокаЗаказа.ЦенаВЗаказе) / ВыборкаНоменклатуры.Цена * 100 ;	
		Если ОтклонениеЦены > СтруктураПараметров.ПроцентОтклоненияЦенПрихода Тогда 
			СообщениеОшибки = "Цена в "+СтрокаЗаказа.СтрокаЗаявки+"("+СтрокаЗаказа.Номенклатура.Артикул+") не корректная. Было заказано по "
			+ Строка(СтрокаЗаказа.ЦенаВЗаказе)+ " , а пришло по "+Строка(ВыборкаНоменклатуры.Цена)+ ". Процент отклонения составил "+Строка(ОтклонениеЦены)+"%.";
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиРазмещения,,СообщениеОшибки,,ВыборкаНоменклатуры.НомерСтроки);
			Отказ = Истина;
		Конецесли;	
		
		
	КонецЕсли;
	
	Возврат Отказ;	
	
КонецФункции

Процедура ДобавитьСтрокуРазмещениявТаблицу(Таблица,Номенклатура,СтрокаЗаявки,СтрокаПрихода,Количество,НомерСтроки = Ложь)
	НовСтрока = Таблица.Добавить();
	НовСтрока.Номенклатура = Номенклатура;
	Новстрока.СтрокаЗаявки = СтрокаЗаявки;
	НовСтрока.Количество = Количество;	
	НовСтрока.СтрокаПрихода = СтрокаПрихода;
	НовСтрока.НомерСтроки = НомерСтроки;
	//НовСтрока.ПолностьюРазмещен = ПолностьюРазмещен;
КонецПроцедуры	

Функция ТексЗапросаРазмещения_ПоступлениеТоваровУслуг()
	лКлючАлгоритма = "ОбщийМодуль_ЗаказыПоставщикамСервер_ТексЗапросаРазмещения_ПоступлениеТоваровУслуг";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	
	Возврат "ВЫБРАТЬ
	        |	ПоступлениеТоваровУслугТовары.Номенклатура,
	        |	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
	        |	ПоступлениеТоваровУслугТовары.СтрокаПрихода,
	        |	ПоступлениеТоваровУслугТовары.Цена,
	        |	ПоступлениеТоваровУслугТовары.НомерСтроки
	        |ПОМЕСТИТЬ ВТТоваров
	        |ИЗ
	        |	&ТаблицаТоваров КАК ПоступлениеТоваровУслугТовары
	        |ГДЕ
	        |	ВЫБОР
	        |			КОГДА &ОтборНоменклатуры
	        |				ТОГДА ПоступлениеТоваровУслугТовары.Номенклатура В (&МассивОтбораНоменклатуры)
	        |			ИНАЧЕ ИСТИНА
	        |		КОНЕЦ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	ВложенныйЗапрос.Номенклатура,
	        |	МИНИМУМ(ВложенныйЗапрос.Замена) КАК Замена,
	        |	МИНИМУМ(ВложенныйЗапрос.НоменклатураЗамена) КАК НоменклатураЗамена
	        |ПОМЕСТИТЬ ВТТоварыСЗаменами
	        |ИЗ
	        |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |		ВозможныеЗаменыНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	        |		ИСТИНА КАК Замена,
	        |		ВозможныеЗаменыНоменклатурыСрезПоследних.НоменклатураЗамена КАК НоменклатураЗамена
	        |	ИЗ
	        |		РегистрСведений.ВозможныеЗаменыНоменклатуры.СрезПоследних(
	        |				&МоментВремени,
	        |				НоменклатураЗамена В
	        |						(ВЫБРАТЬ
	        |							ВТТоваров.Номенклатура КАК Номенклатура
	        |						ИЗ
	        |							ВТТоваров КАК ВТТоваров)
	        |					И НЕ Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.Пустаяссылка)) КАК ВозможныеЗаменыНоменклатурыСрезПоследних
	        |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТоваров КАК ВТТоваров
	        |			ПО ВозможныеЗаменыНоменклатурыСрезПоследних.НоменклатураЗамена = ВТТоваров.Номенклатура
	        |	
	        |	ОБЪЕДИНИТЬ ВСЕ
	        |	
	        |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |		ВТТоваров.Номенклатура,
	        |		ЛОЖЬ,
	        |		ЗНАЧЕНИЕ(справочник.Номенклатура.ПустаяСсылка)
	        |	ИЗ
	        |		ВТТоваров КАК ВТТоваров) КАК ВложенныйЗапрос
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВложенныйЗапрос.Номенклатура
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВЫБОР
	        |		КОГДА ВТТоварыСЗаменами.Замена
	        |			ТОГДА ВТТоварыСЗаменами.НоменклатураЗамена
	        |		ИНАЧЕ ВТТоварыСЗаменами.Номенклатура
	        |	КОНЕЦ КАК Номенклатура,
	        |	ЗаказыПоставщикамОстатки.Номенклатура КАК НоменклатураЗаказа,
	        |	ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещенияСтрокЗаказовОстатки.КоличествоОстаток, 0) КАК Количество,
	        |	ЗаказыПоставщикамОстатки.СтрокаЗаявки,
	        |	ВТТоварыСЗаменами.НоменклатураЗамена,
	        |	ЗаказыПоставщикамОстатки.СуммаРеглОстаток / ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЦенаВЗаказе
	        |ИЗ
	        |	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	        |			&МоментВремени,
	        |			ТорговаяТочка = &ТорговаяТочка
	        |				И Склад = &Склад
	        |				И ВЫБОР
	        |					КОГДА &КонтролироватьДоговор
	        |						ТОГДА ДоговорКонтрагента = &ДоговорКонтрагента
	        |					ИНАЧЕ ИСТИНА
	        |				КОНЕЦ
	        |				И Номенклатура В
	        |					(ВЫБРАТЬ
	        |						ВТТоварыСЗаменами.Номенклатура КАК Номенклатура
	        |					ИЗ
	        |						ВТТоварыСЗаменами КАК ВТТоварыСЗаменами)
	        |				И ВЫБОР
	        |					КОГДА &ЗаказРавенПриходу
	        |						ТОГДА СтрокаЗаявки.Заказ = &ЗаказРаспределения
	        |					ИНАЧЕ ИСТИНА
	        |				КОНЕЦ) КАК ЗаказыПоставщикамОстатки
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыСЗаменами КАК ВТТоварыСЗаменами
	        |		ПО ЗаказыПоставщикамОстатки.Номенклатура = ВТТоварыСЗаменами.Номенклатура
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещенияСтрокЗаказов.Остатки КАК РазмещенияСтрокЗаказовОстатки
	        |		ПО ЗаказыПоставщикамОстатки.СтрокаЗаявки = РазмещенияСтрокЗаказовОстатки.СтрокаЗаявки
	        |			И (РазмещенияСтрокЗаказовОстатки.КоличествоОстаток > 0)
	        |ГДЕ
	        |	ЗаказыПоставщикамОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещенияСтрокЗаказовОстатки.КоличествоОстаток, 0) > 0
	        |	И ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	ЦенаВЗаказе,
	        |	ЗаказыПоставщикамОстатки.СтрокаЗаявки.СрокГарантированныйЗаказа
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТТоваров.Номенклатура,
	        |	СУММА(ВТТоваров.Количество) КАК Количество,
	        |	ВТТоваров.СтрокаПрихода,
	        |	ВТТоваров.Цена КАК Цена,
	        |	ВТТоваров.НомерСтроки
	        |ИЗ
	        |	ВТТоваров КАК ВТТоваров
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТТоваров.Номенклатура,
	        |	ВТТоваров.СтрокаПрихода,
	        |	ВТТоваров.Цена,
	        |	ВТТоваров.НомерСтроки
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Цена";	
	
КонецФункции	

#КонецОбласти



#Область Прочее

Функция ПолучитьПустуюТаблицуРазмещения()
	ТаблицаРазмещения = новый ТаблицаЗначений;
	ТаблицаРазмещения.Колонки.Добавить("Номенклатура");
	ТаблицаРазмещения.Колонки.Добавить("СтрокаПрихода");     
	ТаблицаРазмещения.Колонки.Добавить("СтрокаЗаявки");
	ТаблицаРазмещения.Колонки.Добавить("Количество",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаРазмещения.Колонки.Добавить("ПолностьюРазмещен",новый ОписаниеТипов("Булево"));
	//#XX-2240 Kalinin V.A. ( 2019-04-11 )  /*
	ТаблицаРазмещения.Колонки.Добавить("НомерСтроки",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	
	возврат   ТаблицаРазмещения;
	
КонецФункции	

Функция ПараметрыРазмещенияПоУмолчанию() Экспорт
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("СоздаватьВиртуальныеСтроки",Ложь);
	ПараметрыВыполнения.Вставить("ЗаказРавенПриходу",Ложь);
	ПараметрыВыполнения.Вставить("ЗаказРаспределения",Документы.ЗаказПоставщику.ПустаяСсылка());
	ПараметрыВыполнения.Вставить("ЗаписатьДокумент", Истина);
	ПараметрыВыполнения.Вставить("МассивОтбораНоменклатуры",новый Массив);
	ПараметрыВыполнения.Вставить("ОперативноеПроведение",Истина);		
	ПараметрыВыполнения.Вставить("МоментВремени",ТекущаяДата());
	ПараметрыВыполнения.Вставить("ПроцентОтклоненияЦенПрихода",ОбщегоНазначенияПовтИсп.ЗначениеКонстанты("ПроцентОтклоненияЦенПрихода"));	
	
	Возврат ПараметрыВыполнения
	
КонецФункции

Функция ДополнительныеПараметрыРазмещенияПоУмолчению()
	
	
КонецФункции

Функция ЭтоСкладНовойСхемы(Склад) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_Временно_СкладыНовойСхемыЗакрытияЗаказов.Склад
	|ИЗ
	|	РегистрСведений._Временно_СкладыНовойСхемыЗакрытияЗаказов КАК _Временно_СкладыНовойСхемыЗакрытияЗаказов
	|ГДЕ
	|	_Временно_СкладыНовойСхемыЗакрытияЗаказов.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Возврат Не РезультатЗапроса.Пустой();
	
	
КонецФункции

Функция ПоПоступлениюБылиРаспределения(ПоступлениеСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РазмещенияСтрокЗаказов.Регистратор
	|ИЗ
	|	РегистрНакопления.РазмещенияСтрокЗаказов КАК РазмещенияСтрокЗаказов
	|ГДЕ
	|	РазмещенияСтрокЗаказов.Регистратор = &ПоступлениеСсылка";
	
	Запрос.УстановитьПараметр("ПоступлениеСсылка", ПоступлениеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	возврат не РезультатЗапроса.Пустой();
	
	
КонецФункции	


#КонецОбласти


#Область  СистемныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеГТДВТабличнойЧасти(ДокументОбъект,ТабличнаяЧасть,ТекстОшибки,Отказ= Ложь)  Экспорт 
	ЗапросПроверки  = новый запрос;
	ЗапросПроверки.Текст = "ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.НомерГТД,
	|	ТабличнаяЧасть.СтранаПроисхождения
	|ПОМЕСТИТЬ ВТ_ТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТабличнаяЧасть.НомерСтроки,
	|	ВТ_ТабличнаяЧасть.СтранаПроисхождения,
	|	ВТ_ТабличнаяЧасть.НомерГТД
	|ИЗ
	|	ВТ_ТабличнаяЧасть КАК ВТ_ТабличнаяЧасть
	|ГДЕ
	|	НЕ ВТ_ТабличнаяЧасть.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.Пустаяссылка)
	|	И ВТ_ТабличнаяЧасть.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.Пустаяссылка)"  ;
	ЗапросПроверки.УстановитьПараметр("ТабличнаяЧасть",Товары.Выгрузить(, "НомерГТД, СтранаПроисхождения, НомерСтроки")
	Результат  =  ЗапросПроверки.Выполнить();
	Если не Результат.Пустой() тогда 
		ВыборкаСтрок = Результат.Выбрать();
		Пока ВыборкаСтрок.Следующий() цикл			
			
			ТекстОшибки = СтрШаблон(ТекстОшибки, ВыборкаСтрок.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ВыборкаСтрок.НомерСтроки, "НомерГТД"),
			,
			Отказ);
	
		КонецЦикла;
	КонецЕсли;


КонецПроцедуры	
#КонецОбласти