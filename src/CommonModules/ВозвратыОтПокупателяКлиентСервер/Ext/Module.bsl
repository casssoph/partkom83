

#Область Команды

Процедура ЗаполнитьКомандыНаФорме( пФорма, ТекущийСтатус, пИзменяетСохраняемыеДанные ) Экспорт
	
	новТаблицаКоманд = Справочники.ВзаимосвязиСтатусовПроцессаВозвратаОтПокупателя.ТаблицаКомандДляТекущегоСтатуса(ТекущийСтатус);
	
	//удалить старые команды
	ОчиститьКомандыФормы( пФорма, новТаблицаКоманд );
	ОчиститьКнопкиПодКомандыПроцесса( пФорма, новТаблицаКоманд );
	
	//прочитать данные о командах
	пФорма.ТаблицаКоманд.Загрузить( новТаблицаКоманд );
	СоздатьКомандыФормы( пФорма, пИзменяетСохраняемыеДанные );
	СоздатьКнопкиПодКомандыПроцесса( пФорма );
	
КонецПроцедуры	//ЗаполнитьКомандыНаФорме


Процедура ОчиститьКомандыФормы( пФорма, пНовТаблицаКоманд )
	
	Для каждого цСтрока Из пФорма.ТаблицаКоманд Цикл
		
		командаФормы = пФорма.Команды.Найти( цСтрока.имяКомандыФормы );
		нетВНовойТаблице = пНовТаблицаКоманд.Найти( цСтрока.Взаимосвязь, "Взаимосвязь" ) = Неопределено;
		
		Если Не командаФормы = Неопределено
			И нетВНовойТаблице Тогда
			
			пФорма.Команды.Удалить( командаФормы );
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	//ОчиститьКомандыФормы

Процедура ОчиститьКнопкиПодКомандыПроцесса( пФорма, пНовТаблицаКоманд )
	
	Для каждого цСтрока Из пФорма.ТаблицаКоманд Цикл
		
		кнопка = пФорма.Элементы.Найти( цСтрока.ИмяКнопки );
		нетВНовойТаблице = пНовТаблицаКоманд.Найти( цСтрока.Взаимосвязь, "Взаимосвязь" ) = Неопределено;
		
		Если Не кнопка = Неопределено
			И нетВНовойТаблице Тогда
			
			пФорма.Элементы.Удалить( кнопка );
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	//ОчиститьКнопкиПодКомандыПроцесса


Процедура СоздатьКомандыФормы( пФорма, пИзменяетСохраняемыеДанные )
	
	Для каждого цСтрока Из пФорма.ТаблицаКоманд Цикл
		
		имяКомандыФормы = ПрефиксКоманд() + цСтрока.ИмяКоманды;
		
		цСтрока.имяКомандыФормы = имяКомандыФормы;
		
		новКоманда = пФорма.Команды.Найти( имяКомандыФормы );
		
		Если новКоманда = Неопределено Тогда
			
			новКоманда = пФорма.Команды.Добавить( имяКомандыФормы );
			новКоманда.Действие                  = "ВыполнитьКоманду";
			новКоманда.Заголовок                 = цСтрока.НаименованиеКоманды;
			новКоманда.Отображение               = ОтображениеКнопки.КартинкаИТекст;
			новКоманда.ИзменяетСохраняемыеДанные = пИзменяетСохраняемыеДанные;
			//новКоманда.Картинка                  = Справочники.упКоманды.ПолучитьКартинкуКоманды( цСтрока.имяКартинки );
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	//СоздатьКомандыФормы

Процедура СоздатьКнопкиПодКомандыПроцесса( пФорма )
	
	Для каждого цСтрока Из пФорма.ТаблицаКоманд Цикл
		
		лЭлементРодитель = пФорма.Элементы.ГруппаКомандыПроцесса;
		
		имяКнопки = ПрефиксКнопок() + цСтрока.ИмяКоманды;
		цСтрока.ИмяКнопки = имяКнопки;
		
		новКнопка = пФорма.Элементы.Найти( имяКнопки );
		
		Если новКнопка = Неопределено Тогда
			
			новКнопка = пФорма.Элементы.Добавить( имяКнопки , Тип( "КнопкаФормы" ), лЭлементРодитель);
			новКнопка.ИмяКоманды = цСтрока.имяКомандыФормы;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	//СоздатьКнопкиПодКомандыПРоцесса


Функция ПрефиксКоманд()
	
	Возврат "КомандаПроцесса_";
	
КонецФункции	//ПрефиксКоманд

Функция ПрефиксКнопок()
	
	Возврат "Кнопка_";
	
КонецФункции	//ПрефиксКнопок


Функция ВыполнитьКомандуДляЗадачи( пКоманда, пФорма ) Экспорт
	
	успешно = Истина;
	
	//структураЗадачи = упУправлениеЗадачамиКлиентСервер.ПолучитьСтруктуруЗадачи( пЗадача , Истина );
	//
	//массивОбработчиков = Справочники.упКоманды.ПолучитьМассивОбработчиков( пКоманда );
	//
	//Если массивОбработчиков.Количество() = 0 Тогда
	//	
	//	Возврат успешно;
	//	
	//КонецЕсли;
	//
	//успешно = упАлгоритмыКлиентСервер.ВыполнитьМассивАлгоритмов( массивОбработчиков , структураЗадачи );
	//
	//Если Не успешно Тогда
	//	Возврат успешно;
	//КонецЕсли;
	//
	//Попытка
	//	
	//	упУправлениеЗадачамиКлиентСервер.ЗаписатьСтруктуруВЗадачу( структураЗадачи , пЗадача );
	//	
	//Исключение
	//	
	//	упЯдроПроцессаВызовСервера.Ошибка( НСтр( "ru='Ошибка записи изменений в задачу.'" ) , , пЗадача, ИнформацияОбОшибке() );
	//	
	//	Возврат Ложь;
	//	
	//КонецПопытки;
	//
	//Если пЗавершатьЗадачу Тогда
	//	
	//	успешно = упЯдроПроцесса.ЗавершитьЗадачу( пЗадача );
	//	
	//КонецЕсли;
	
	Возврат успешно;
	
КонецФункции

/////////////////////////////////////////////////////

Процедура ВыполнитьКоманду( пФорма, Знач пКоманда, Знач пЗадачи = Неопределено ) Экспорт
	
	выбраннаяКоманда = ПолучитьКомандуПроцессаДляВыполнения( пФорма, пКоманда );
	
	Если выбраннаяКоманда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//данныеКоманды = НайтиСтрокуСКомандойПоКомандеПроцесса( пФорма, выбраннаяКоманда );
	
	успешно = Истина;
	
	Если пЗадачи = Неопределено Тогда
		//вызов из формы объекта
		
		успешно = пФорма.ВыполнитьКомандуПроцесса( выбраннаяКоманда );
		
		//Если успешно Тогда
		//	
		//	ВыполнитьПостДействия( пФорма, данныеКоманды );
		//	
		//КонецЕсли;
		
	//Иначе
	//	
	//	Для каждого цЗадача Из пЗадачи Цикл
	//		
	//		Если ТипЗнч( цЗадача ) = Тип( "ЗадачаСсылка.упЗадача" ) Тогда
	//			
	//			успешно = упКомандыВызовСервера.ВыполнитьКомандуДляЗадачи( выбраннаяКоманда, цЗадача );
	//			
	//		Иначе
	//			
	//			Продолжить;
	//			
	//		КонецЕсли;
	//		
	//		Если успешно Тогда
	//			
	//			ВыполнитьПостДействия( пФорма, данныеКоманды, цЗадача );
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ВыполнитьПостДействия( пФорма, данныеКоманды, пЗадача = Неопределено )
	//
	//Если данныеКоманды.ОткрытьОтчет Тогда
	//	
	//	ОткрытьОтчетПоКоманде( пФорма, данныеКоманды, пЗадача );
	//	
	//ИначеЕсли данныеКоманды.ОткрытьПроизвольнуюФорму Тогда
	//	
	//	ОткрытьФормуПоКоманде( пФорма, данныеКоманды, пЗадача );
	//	
	//КонецЕсли;
	//
	//ОбновитьФормуПослеКоманды( пФорма, данныеКоманды, пЗадача );
	//
КонецПроцедуры


Функция ПолучитьКомандуПроцессаДляВыполнения( пФорма, пКоманда )
	
	выбраннаяКоманда = Неопределено;
	
	Если пКоманда.Имя = "ВыполнитьКоманду" Тогда
		//
		//Отбор = Новый Структура( "Ссылка" , МассивДоступныхКомандПроцесса( пФорма ) );
		//
		//ПараметрыФормы = Новый Структура( "Отбор" , Отбор );
		//
		//выбраннаяКоманда = ОткрытьФормуМодально( "Справочник.упКоманды.ФормаВыбора" , ПараметрыФормы , пФорма );
		
	Иначе
		
		выбраннаяКоманда = НайтиСтрокуСКомандойПоКомандеФормы( пФорма, пКоманда ).Взаимосвязь;
		
	КонецЕсли;
	
	Возврат выбраннаяКоманда;
	
КонецФункции

Функция МассивДоступныхКомандПроцесса( пФорма )
	
	массивКоманд = Новый Массив;
	
	Для каждого цСтрока Из пФорма.ТаблицаКоманд Цикл
		
		массивКоманд.Добавить( цСтрока.командаПроцесса );
		
	КонецЦикла;
	
	Возврат массивКоманд;
	
КонецФункции	//МассивДоступныхКомандПроцесса

Функция НайтиСтрокуСКомандойПоКомандеФормы( пФорма, пКоманда )
	
	Возврат НайтиСтрокуСКомандой( пФорма, Новый Структура( "имяКомандыФормы" , пКоманда.Имя ) );
	
КонецФункции

Функция НайтиСтрокуСКомандойПоКомандеПроцесса( пФорма, пКомандаПроцесса )
	
	Возврат НайтиСтрокуСКомандой( пФорма, Новый Структура( "командаПроцесса" , пКомандаПроцесса ) );
	
КонецФункции

Функция НайтиСтрокуСКомандой( пФорма, пСтруктПоиска )
	
	найденныеСтроки = пФорма.ТаблицаКоманд.НайтиСтроки( пСтруктПоиска );
	
	Если найденныеСтроки.Количество() > 0 Тогда
		
		найденнаяСтрока = найденныеСтроки[0];
		
	Иначе
		
		текстСообщения = НСтр( "ru='Описание команды процесса """+пСтруктПоиска.имяКомандыФормы+""" не найдено'" );
		
		ВызватьИсключение текстСообщения;
		
	КонецЕсли;
	
	Возврат найденнаяСтрока;
	
КонецФункции



#КонецОбласти