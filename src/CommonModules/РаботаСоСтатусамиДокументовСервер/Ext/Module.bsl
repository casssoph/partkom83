#Область ФормированиеИсторииЗаявок

Процедура ЗарегистрироватьИзменениеЗаявкиКлиента(ДокументСсылка,Оперативно = истина) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ЗарегистрироватьИзменениеЗаявкиКлиента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	ЗапросСостояния = новый Запрос;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаПокупателя") или 
		ТипЗнч(ДокументСсылка) =Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") тогда 
		ТекстЗапроса =ЗапросСостояние_ЗаявкаПокупателя();
	ИначеЕсли   ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПоставщику")  тогда 
		ТекстЗапроса  =ЗапросСостояние_ЗаказПоставщику();
	ИначеЕсли   ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику")  тогда 
		ТекстЗапроса  =ЗапросСостояние_КорректировкаЗаказаПоставщику();
	ИначеЕсли   ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")  тогда 
		ТекстЗапроса  =ЗапросСостояние_ПоступлениеТоваровУслуг();
	ИначеЕсли   ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")  тогда 
		ТекстЗапроса  =ЗапросСостояние_РеализацияТоваровУслуг();  
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  тогда 
		ТекстЗапроса  =ЗапросСостояние_ВозвратТоваровОтПокупателя();  
	ИначеЕсли   ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров")  тогда 
		Если ЭтоСкладПриемки(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка,"СкладОтправитель")) тогда 
			ТекстЗапроса  =ЗапросСостояние_ПеремещениеТоваров();  
		иначе 
			возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктРассмотренияВозврата") Тогда
		// 17.07.19 Строганов Роман > 
		Если ЭтоАктивнаяЗадачаJirа(Справочники.ЗадачиJira.XX2570) Тогда
			ТекстЗапроса = ЗапросСостояние_АктРассмотренияВозврата();
		Иначе
			Возврат;
		КонецЕсли;
		// 17.07.19 Строганов Роман <
	иначе 
		Возврат;
	КонецЕсли;
	
	ЗапросСостояния.Текст = ТекстЗапроса + "
	| ; "+ ЗапросСостояние_ТекщиеДвижения()+ СтрокаИтогов();
	ЗапросСостояния.УстановитьПараметр("ДокументСсылка",ДокументСсылка);
	ЗапросСостояния.УстановитьПараметр("Период",ТекущаяДата());
	
	РезультатСостояние = ЗапросСостояния.Выполнить();
	
	Если РезультатСостояние.Пустой() тогда
		Возврат;		
	КонецЕсли;
	
	ЗаписатьИзмененияЗаявки(РезультатСостояние,Оперативно)
	
КонецПроцедуры

Процедура ЗаписатьИзмененияЗаявки(РезультатСостояние,Оперативно = Истина ) экспорт 
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ЗаписатьИзмененияЗаявки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	
	МенеджерРегистра = РегистрыСведений.ИсторияЗаявокПокупателя;
	
	ВыборкаРегистратора = РезультатСостояние.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаРегистратора.Следующий() цикл
		
		НаборЗаписей =  МенеджерРегистра.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратора.Регистратор);
		ВыборкаДанных =ВыборкаРегистратора.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл 
			//если не НужноЗаписывать(ВыборкаДанных) тогда 
			//	Продолжить;
			//КонецЕсли;	
			Если Не ЗначениеЗаполнено(ВыборкаДанных.СтрокаЗаявки) тогда Продолжить; КонецЕсли;
			ЗаписьСостояния = НаборЗаписей.Добавить(); 
			ЗаполнитьЗначенияСвойств(ЗаписьСостояния,ВыборкаДанных);
			Если Не Оперативно тогда 
				ЗаписьСостояния.Период = ВыборкаДанных.Регистратор.Дата; 		
			КонецЕсли;		
		КонецЦикла;	
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры 

Функция НужноЗаписывать(ВыборкаДанных) 
	
	запрос = новый запрос (   "ВЫБРАТЬ
	|	ИсторияЗаявокПокупателя.Регистратор
	|ИЗ
	|	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	|ГДЕ
	|	ИсторияЗаявокПокупателя.СтрокаЗаявки = &СтрокаЗаявки
	|	И ИсторияЗаявокПокупателя.СтрокаПрихода = &СтрокаПрихода
	|	И ИсторияЗаявокПокупателя.Отказ = &Отказ
	|	И ИсторияЗаявокПокупателя.Порядок = &Порядок" );
	Запрос.УстановитьПараметр("СтрокаЗаявки",ВыборкаДанных.СтрокаЗаявки);
	Запрос.УстановитьПараметр("СтрокаПрихода",ВыборкаДанных.СтрокаПрихода);
	Запрос.УстановитьПараметр("Отказ",ВыборкаДанных.Отказ);
	Запрос.УстановитьПараметр("Порядок",ВыборкаДанных.Порядок);
	
	Рез = запрос.Выполнить();
	возврат Рез.Пустой();
	
КонецФункции

Процедура ПотоковаяРегитсрацияОбъектов(МассивДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросСостояния = новый Запрос;
	
	СтрОбъединить  = " Объединить Все ";
	ТекстЗапроса = ЗапросСостояние_РеализацияТоваровУслуг()+СтрОбъединить + ЗапросСостояние_ЗаявкаПокупателя() + СтрОбъединить 
	+ ЗапросСостояние_ЗаказПоставщику() + СтрОбъединить
	+ ЗапросСостояние_КорректировкаЗаказаПоставщику() + СтрОбъединить
	+ ЗапросСостояние_ПоступлениеТоваровУслуг()+ СтрОбъединить
	+ ЗапросСостояние_ПеремещениеТоваров();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"= &ДокументСсылка" , " в (&ДокументСсылка)" );
	
	ЗапросСостояния.Текст = ТекстЗапроса + СтрокаИтогов();
	
	ЗапросСостояния.УстановитьПараметр("ДокументСсылка",МассивДокументов);
	ЗапросСостояния.УстановитьПараметр("Период",ТекущаяДата());
	
	РезультатСостояние = ЗапросСостояния.Выполнить();
	
	Если РезультатСостояние.Пустой() тогда
		Возврат;		
	КонецЕсли;
	
	ЗаписатьИзмененияЗаявки(РезультатСостояние,Ложь)
	
	
КонецПроцедуры	

#КонецОбласти


#Область ЗапросыКДанным_СосточнияСтрокЗаявок

Функция ЗапросСостояние_ЗаявкаПокупателя()
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ЗапросСостояние_ЗаявкаПокупателя";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкиПокупателей.СтрокаЗаявки КАК СтрокаЗаявки,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка) КАК СтрокаПрихода,
	|	ЛОЖЬ КАК Отказ,
	|	1 КАК Порядок,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	|					ТОГДА ВЫРАЗИТЬ(ЗаявкиПокупателей.Регистратор КАК Документ.ЗаявкаПокупателя).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяПодтвержден)
	|				ИНАЧЕ ВЫРАЗИТЬ(ЗаявкиПокупателей.Регистратор КАК Документ.КорректировкаЗаявкиПокупателя).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяПодтвержден)
	|			КОНЕЦ
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Новый)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.НовыйНеподтвержден)
	|	КОНЕЦ КАК Состояние,
	|	&Период КАК Период,
	|	СУММА(ЗаявкиПокупателей.Количество) КАК Количество,
	|	ИСТИНА КАК Изменена,
	|	ЗаявкиПокупателей.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	|			ТОГДА ВЫРАЗИТЬ(ЗаявкиПокупателей.Регистратор КАК Документ.ЗаявкаПокупателя).Склад
	|		ИНАЧЕ ВЫРАЗИТЬ(ЗаявкиПокупателей.Регистратор КАК Документ.КорректировкаЗаявкиПокупателя).Склад
	|	КОНЕЦ КАК Склад,
	|	МАКСИМУМ(ЗаявкиПокупателей.Номенклатура) КАК Номенклатура,
	|	ЗаявкиПокупателей.СтрокаЗаявки.IDSite КАК IDSite
	|ПОМЕСТИТЬ ВтДвижения
	|ИЗ
	|	РегистрНакопления.ЗаявкиПокупателей КАК ЗаявкиПокупателей
	|ГДЕ
	|	ЗаявкиПокупателей.Регистратор = &ДокументСсылка
	|	И ЗаявкиПокупателей.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	|	И ЗаявкиПокупателей.ВидДвижения = ЗНАЧЕНИЕ(вИдДвиженияНакопления.Приход)
	|	И (ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	|			ИЛИ ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.КорректировкаЗаявкиПокупателя)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиПокупателей.СтрокаЗаявки,
	|	ЗаявкиПокупателей.Период,
	|	ЗаявкиПокупателей.Регистратор,
	|	ЗаявкиПокупателей.СтрокаЗаявки.IDSite,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ЗаявкиПокупателей.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	|					ТОГДА ВЫРАЗИТЬ(ЗаявкиПокупателей.Регистратор КАК Документ.ЗаявкаПокупателя).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяПодтвержден)
	|				ИНАЧЕ ВЫРАЗИТЬ(ЗаявкиПокупателей.Регистратор КАК Документ.КорректировкаЗаявкиПокупателя).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяПодтвержден)
	|			КОНЕЦ
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Новый)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.НовыйНеподтвержден)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаявкиПокупателей.Количество) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезервыТоваров.СтрокаЗаявки,
	|	РезервыТоваров.СтрокаПрихода,
	|	ЛОЖЬ,
	|	5,
	|	ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВРезерве),
	|	&Период,
	|	РезервыТоваров.Количество,
	|	ИСТИНА,
	|	РезервыТоваров.Регистратор,
	|	РезервыТоваров.Склад,
	|	РезервыТоваров.Номенклатура,
	|	РезервыТоваров.СтрокаЗаявки.IDSite
	|ИЗ
	|	РегистрНакопления.РезервыТоваров КАК РезервыТоваров
	|ГДЕ
	|	РезервыТоваров.Регистратор = &ДокументСсылка
	|	И РезервыТоваров.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	|	И РезервыТоваров.Количество > 0
	|	И РезервыТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И (РезервыТоваров.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	|			ИЛИ РезервыТоваров.Регистратор ССЫЛКА Документ.КорректировкаЗаявкиПокупателя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтказыПоЗаявкам.СтрокаЗаявки,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка),
	|	ИСТИНА,
	|	0,
	|	Максимум(ОтказыПоЗаявкам.ПричинаОтказа),
	|	&Период,
	|	Сумма(ОтказыПоЗаявкам.Количество),
	|	ИСТИНА,
	|	ОтказыПоЗаявкам.Регистратор,
	|	ВЫБОР
	|		КОГДА ОтказыПоЗаявкам.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	|			ТОГДА ВЫРАЗИТЬ(ОтказыПоЗаявкам.Регистратор КАК Документ.ЗаявкаПокупателя).Склад
	|		ИНАЧЕ ВЫРАЗИТЬ(ОтказыПоЗаявкам.Регистратор КАК Документ.КорректировкаЗаявкиПокупателя).Склад
	|	КОНЕЦ,
	|	NULL,
	|	ОтказыПоЗаявкам.СтрокаЗаявки.IDSite
	|ИЗ
	|	РегистрНакопления.ОтказыПоЗаявкам КАК ОтказыПоЗаявкам
	|ГДЕ
	|	ОтказыПоЗаявкам.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	|	И ОтказыПоЗаявкам.Регистратор = &ДокументСсылка
	|	И ОтказыПоЗаявкам.Количество > 0
	|	И (ОтказыПоЗаявкам.Регистратор ССЫЛКА Документ.ЗаявкаПокупателя
	|			ИЛИ ОтказыПоЗаявкам.Регистратор ССЫЛКА Документ.КорректировкаЗаявкиПокупателя)
	|
	|  Сгруппировать по 
	|   СтрокаЗаявки, Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаПокупателяТовары.СтрокаЗаявки,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА ЗаявкаПокупателяТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.БонусыБезСборки)
	|				И НЕ ЗаявкаПокупателяТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден)
	|			ТОГДА 8
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаявкаПокупателяТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.БонусыБезСборки)
	|				И НЕ ЗаявкаПокупателяТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Выдано)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.НовыйНеподтвержден)
	|	КОНЕЦ,
	|	&Период,
	|	ЗаявкаПокупателяТовары.Количество,
	|	ИСТИНА,
	|	ЗаявкаПокупателяТовары.Ссылка,
	|	ЗаявкаПокупателяТовары.Ссылка.Склад,
	|	ЗаявкаПокупателяТовары.Номенклатура,
	|	ЗаявкаПокупателяТовары.СтрокаЗаявки.IDSite
	|ИЗ
	|	Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
	|ГДЕ
	|	ЗаявкаПокупателяТовары.Ссылка = &ДокументСсылка
	|	И (ЗаявкаПокупателяТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден)
	|			ИЛИ ЗаявкаПокупателяТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.БонусыБезСборки))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА КорректировкаЗаявкиПокупателяТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.БонусыБезСборки)
	|				И НЕ КорректировкаЗаявкиПокупателяТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден)
	|			ТОГДА 8
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаЗаявкиПокупателяТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.БонусыБезСборки)
	|				И НЕ КорректировкаЗаявкиПокупателяТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Выдано)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.НовыйНеподтвержден)
	|	КОНЕЦ,
	|	&Период,
	|	КорректировкаЗаявкиПокупателяТовары.Количество,
	|	ИСТИНА,
	|	КорректировкаЗаявкиПокупателяТовары.Ссылка,
	|	КорректировкаЗаявкиПокупателяТовары.Ссылка.Склад,
	|	КорректировкаЗаявкиПокупателяТовары.Номенклатура,
	|	КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки.IDSite
	|ИЗ
	|	Документ.КорректировкаЗаявкиПокупателя.Товары КАК КорректировкаЗаявкиПокупателяТовары
	|ГДЕ
	|	КорректировкаЗаявкиПокупателяТовары.Ссылка = &ДокументСсылка
	|	И (КорректировкаЗаявкиПокупателяТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден)
	|			ИЛИ КорректировкаЗаявкиПокупателяТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкаПокупателя.БонусыБезСборки))";
	
	//ХудинВВ 17072019
	//Добавил группировку по "СтрокаЗаявки, Регистратор" в третьем запросе. Исключение дублей строк по причинам отказа.
	
КонецФункции	

Функция ЗапросСостояние_ЗаказПоставщику() 
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщикам.СтрокаЗаявки КАК СтрокаЗаявки,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка) КАК СтрокаПрихода,
	|	ЛОЖЬ КАК Отказ,
	|	2 КАК Порядок,
	|	ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Заказано) КАК Состояние,
	|	ЗаказыПоставщикам.Период КАК Период,
	|	СУММА(ЗаказыПоставщикам.Количество) КАК Количество,
	|	ИСТИНА КАК Изменена,
	|	ЗаказыПоставщикам.Регистратор КАК Регистратор,
	|	МАКСИМУМ(ЗаказыПоставщикам.Склад) КАК Склад,
	|	МАКСИМУМ(ЗаказыПоставщикам.Номенклатура) КАК Номенклатура,
	|	ЗаказыПоставщикам.СтрокаЗаявки.IDSite КАК IDSite
	|ПОМЕСТИТЬ ВтДвижения
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Регистратор = &ДокументСсылка
	|	И ЗаказыПоставщикам.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	|	И ЗаказыПоставщикам.Регистратор ССЫЛКА Документ.ЗаказПоставщику
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.СтрокаЗаявки,
	|	ЗаказыПоставщикам.Регистратор,
	|	ЗаказыПоставщикам.Период,
	|	ЗаказыПоставщикам.СтрокаЗаявки.IDSite";
КонецФункции

Функция ЗапросСостояние_КорректировкаЗаказаПоставщику() 
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ЗапросСостояние_КорректировкаЗаказаПоставщику";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	Возврат 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщикам.СтрокаЗаявки КАК СтрокаЗаявки,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка) КАК СтрокаПрихода,
	|	ЛОЖЬ КАК Отказ,
	|	2 КАК Порядок,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ЗаказыПоставщикам.Регистратор КАК Документ.ЗаказПоставщику).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПроведенЗаказПоставщику)
	|				ИЛИ ВЫРАЗИТЬ(ЗаказыПоставщикам.Регистратор КАК Документ.ЗаказПоставщику).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ОтправленПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Заказано)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Выкуплено)
	|	КОНЕЦ КАК Состояние,
	|	&Период КАК Период,
	|	СУММА(ЗаказыПоставщикам.Количество) КАК Количество,
	|	ИСТИНА КАК Изменена,
	|	ЗаказыПоставщикам.Регистратор КАК Регистратор,
	|	МАКСИМУМ(ЗаказыПоставщикам.Склад) КАК Склад,
	|	МАКСИМУМ(ЗаказыПоставщикам.Номенклатура) КАК Номенклатура,
	|	ЗаказыПоставщикам.СтрокаЗаявки.IDSite КАК IDSite
	|ПОМЕСТИТЬ ВтДвижения
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ЗаказыПоставщикам.Регистратор = &ДокументСсылка
	|	И ЗаказыПоставщикам.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.СтрокаЗаявки,
	|	ЗаказыПоставщикам.Регистратор,
	|	ЗаказыПоставщикам.СтрокаЗаявки.IDSite,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ЗаказыПоставщикам.Регистратор КАК Документ.ЗаказПоставщику).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПроведенЗаказПоставщику)
	|				ИЛИ ВЫРАЗИТЬ(ЗаказыПоставщикам.Регистратор КАК Документ.ЗаказПоставщику).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ОтправленПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Заказано)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Выкуплено)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтказыПоЗаявкам.СтрокаЗаявки,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.ПустаяСсылка),
	|	ИСТИНА,
	|	0,
	|	МАКСИМУМ(ОтказыПоЗаявкам.ПричинаОтказа),
	|	&Период,
	|	СУММА(ОтказыПоЗаявкам.Количество),
	|	ИСТИНА,
	|	ОтказыПоЗаявкам.Регистратор,
	|	ВЫРАЗИТЬ(&ДокументСсылка КАК Документ.КорректировкаЗаказаПоставщику).Склад,
	|	NULL,
	|	ОтказыПоЗаявкам.СтрокаЗаявки.IDSite
	|ИЗ
	|	РегистрНакопления.ОтказыПоЗаявкам КАК ОтказыПоЗаявкам
	|ГДЕ
	|	ОтказыПоЗаявкам.Регистратор = &ДокументСсылка
	|	И ОтказыПоЗаявкам.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	|	И ОтказыПоЗаявкам.Количество > 0
	|	И ОтказыПоЗаявкам.Регистратор ССЫЛКА Документ.КорректировкаЗаказаПоставщику
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтказыПоЗаявкам.СтрокаЗаявки,
	|	ОтказыПоЗаявкам.Регистратор,
	|	ОтказыПоЗаявкам.СтрокаЗаявки.IDSite";
	
	
КонецФункции

Функция ЗапросСостояние_ПоступлениеТоваровУслуг() 
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазмещенияСтрокЗаказов.СтрокаЗаявки,
	|	РазмещенияСтрокЗаказов.СтрокаПрихода КАК СтрокаПрихода,
	|	ЛОЖЬ КАК Отказ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.статусыДокументов.ПоступлениеТоваровПринят)
	|				ИЛИ ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.статусыДокументов.ПоступлениеТоваровРазмещен)
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.статусыДокументов.ПоступлениеТоваровПринят)
	|				ИЛИ ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.статусыДокументов.ПоступлениеТоваровРазмещен)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ПринятНаСкладе)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВПутиПК)
	|	КОНЕЦ КАК Состояние,
	|	&Период КАК Период,
	|	СУММА(РазмещенияСтрокЗаказов.Количество) КАК Количество,
	|	ИСТИНА КАК Изменена,
	|	РазмещенияСтрокЗаказов.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Склад КАК Склад,
	|	NULL КАК Номенклатура,
	|	РазмещенияСтрокЗаказов.СтрокаЗаявки.IDSite КАК IDSite
	|ПОМЕСТИТЬ ВтДвижения
	|ИЗ
	|	РегистрНакопления.РазмещенияСтрокЗаказов КАК РазмещенияСтрокЗаказов
	|ГДЕ
	|	РазмещенияСтрокЗаказов.Регистратор = &ДокументСсылка
	|	И РазмещенияСтрокЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РазмещенияСтрокЗаказов.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	|	И РазмещенияСтрокЗаказов.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	РазмещенияСтрокЗаказов.СтрокаЗаявки,
	|	РазмещенияСтрокЗаказов.СтрокаПрихода,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.статусыДокументов.ПоступлениеТоваровПринят)
	|				ИЛИ ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.статусыДокументов.ПоступлениеТоваровРазмещен)
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.статусыДокументов.ПоступлениеТоваровПринят)
	|				ИЛИ ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.статусыДокументов.ПоступлениеТоваровРазмещен)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ПринятНаСкладе)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВПутиПК)
	|	КОНЕЦ,
	|	РазмещенияСтрокЗаказов.Регистратор,
	|	РазмещенияСтрокЗаказов.СтрокаЗаявки.IDSite,
	|	ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Склад";
	
	
КонецФункции

Функция ЗапросСостояние_РеализацияТоваровУслуг() 
	Возврат "ВЫБРАТЬ
	        |	ПартииТоваров.Регистратор,
	        |	ПартииТоваров.Номенклатура,
	        |	ПартииТоваров.Склад,
	        |	МИНИМУМ(ПартииТоваров.СтрокаПрихода) КАК СтрокаПрихода,
	        |	ПартииТоваров.Качество,
	        |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
	        |	РеализацияТоваровУслугТовары.Количество
	        |ПОМЕСТИТЬ ВТПартии
	        |ИЗ
	        |	РегистрНакопления.ПартииТоваров КАК ПартииТоваров
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	        |		ПО ПартииТоваров.Регистратор = РеализацияТоваровУслугТовары.Ссылка
	        |			И ПартииТоваров.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
	        |			И (РеализацияТоваровУслугТовары.Ссылка = &ДокументСсылка)
	        |			И (ПартииТоваров.Регистратор = &ДокументСсылка)
	        |			И ПартииТоваров.НомерСтрокиВДокументе = РеализацияТоваровУслугТовары.НомерСтроки
	        |			И ПартииТоваров.Склад = РеализацияТоваровУслугТовары.Ссылка.Склад
	        |ГДЕ
	        |	ПартииТоваров.Регистратор = &ДокументСсылка
	        |	И РеализацияТоваровУслугТовары.Ссылка.ЭтоМФП = ЛОЖЬ
	        |	И ПартииТоваров.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ПартииТоваров.Регистратор,
	        |	ПартииТоваров.Номенклатура,
	        |	ПартииТоваров.Склад,
	        |	ПартииТоваров.Качество,
	        |	РеализацияТоваровУслугТовары.СтрокаЗаявки,
	        |	РеализацияТоваровУслугТовары.Количество
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЕСТЬNULL(Продажи.СтрокаЗаявки, ВТПартии.СтрокаЗаявки) КАК СтрокаЗаявки,
	        |	ВТПартии.СтрокаПрихода,
	        |	ЛОЖЬ КАК Отказ,
	        |	ВЫБОР
	        |		КОГДА ВЫРАЗИТЬ(ВТПартии.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугСборка)
	        |			ТОГДА 6
	        |		КОГДА ВЫРАЗИТЬ(ВТПартии.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугУпакован)
	        |				ИЛИ ВЫРАЗИТЬ(ВТПартии.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче)
	        |			ТОГДА 7
	        |		ИНАЧЕ 8
	        |	КОНЕЦ КАК Порядок,
	        |	ВЫБОР
	        |		КОГДА ВЫРАЗИТЬ(ВТПартии.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугСборка)
	        |			ТОГДА ВЫБОР
	        |					КОГДА ВЫРАЗИТЬ(ВТПартии.Регистратор КАК Документ.РеализацияТоваровУслуг).ТипДоставки = ЗНАЧЕНИЕ(Справочник.ТипыДоставки.ЭкспрессДоставка)
	        |						ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ИдетСборкаПКЭкспресс)
	        |					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.СборкаПК)
	        |				КОНЕЦ
	        |		КОГДА ВЫРАЗИТЬ(ВТПартии.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугУпакован)
	        |			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Упаковано)
	        |		КОГДА ВЫРАЗИТЬ(ВТПартии.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче)
	        |			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ГотовкВыдаче)
	        |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.Выдано)
	        |	КОНЕЦ КАК Состояние,
	        |	&Период КАК Период,
	        |	ВЫБОР
	        |		КОГДА ВЫРАЗИТЬ(ВТПартии.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугСборка)
	        |				ИЛИ ВЫРАЗИТЬ(ВТПартии.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугУпакован)
	        |				ИЛИ ВЫРАЗИТЬ(ВТПартии.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугГотовКВыдаче)
	        |			ТОГДА ВТПартии.Количество
	        |		ИНАЧЕ Продажи.Количество
	        |	КОНЕЦ КАК Количество,
	        |	ИСТИНА КАК Изменена,
	        |	ВТПартии.Регистратор КАК Документ,
	        |	ВТПартии.Склад,
	        |	ВТПартии.Номенклатура
	        |ПОМЕСТИТЬ ВТПродажи
	        |ИЗ
	        |	ВТПартии КАК ВТПартии
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи КАК Продажи
	        |		ПО (Продажи.Регистратор = ВТПартии.Регистратор)
	        |			И (Продажи.Номенклатура = ВТПартии.Номенклатура)
	        |			И (Продажи.Склад = ВТПартии.Склад)
	        |			И (Продажи.Качество = ВТПартии.Качество)
	        |			И (Продажи.Регистратор = &ДокументСсылка)
	        |			И (НЕ Продажи.СтрокаЗаявки = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.ПустаяСсылка))
	        |			И ВТПартии.СтрокаЗаявки = Продажи.СтрокаЗаявки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ОтказыПоЗаявкам.СтрокаЗаявки,
	        |	МАКСИМУМ(ОтказыПоЗаявкам.ПричинаОтказа) КАК ПричинаОтказа,
	        |	ОтказыПоЗаявкам.Регистратор,
	        |	ОтказыПоЗаявкам.Период,
	        |	МАКСИМУМ(ОтказыПоЗаявкам.Количество) КАК Количество
	        |ПОМЕСТИТЬ ВТОтказы
	        |ИЗ
	        |	РегистрНакопления.ОтказыПоЗаявкам КАК ОтказыПоЗаявкам
	        |ГДЕ
	        |	ОтказыПоЗаявкам.СтрокаЗаявки.Виртуальная = ЛОЖЬ
	        |	И ОтказыПоЗаявкам.Количество > 0
	        |	И ОтказыПоЗаявкам.Регистратор = &ДокументСсылка
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ОтказыПоЗаявкам.СтрокаЗаявки,
	        |	ОтказыПоЗаявкам.Регистратор,
	        |	ОтказыПоЗаявкам.Период
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	ВТПродажи.СтрокаЗаявки КАК СтрокаЗаявки,
	        |	ВТПродажи.СтрокаПрихода,
	        |	ВТПродажи.Отказ,
	        |	ВТПродажи.Порядок,
	        |	МАКСИМУМ(ВТПродажи.Состояние) КАК Состояние,
	        |	ВТПродажи.Период,
	        |	СУММА(ВТПродажи.Количество) КАК Количество,
	        |	ВТПродажи.Изменена,
	        |	ВТПродажи.Документ КАК Регистратор,
	        |	МАКСИМУМ(ВТПродажи.Склад) КАК Склад,
	        |	МАКСИМУМ(ВТПродажи.Номенклатура) КАК Номенклатура,
	        |	ВТПродажи.СтрокаЗаявки.IDSite КАК IDSite
	        |ПОМЕСТИТЬ ВтДвижения
	        |ИЗ
	        |	ВТПродажи КАК ВТПродажи
	        |ГДЕ
	        |	ВТПродажи.Количество > 0
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТПродажи.СтрокаЗаявки,
	        |	ВТПродажи.СтрокаПрихода,
	        |	ВТПродажи.Отказ,
	        |	ВТПродажи.Порядок,
	        |	ВТПродажи.Документ,
	        |	ВТПродажи.СтрокаЗаявки.IDSite,
	        |	ВТПродажи.Период,
	        |	ВТПродажи.Изменена
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ВТОтказы.СтрокаЗаявки,
	        |	ВТПартии.СтрокаПрихода,
	        |	ИСТИНА,
	        |	0,
	        |	ВТОтказы.ПричинаОтказа,
	        |	&Период,
	        |	СУММА(ВТОтказы.Количество),
	        |	ИСТИНА,
	        |	ВТОтказы.Регистратор,
	        |	МАКСИМУМ(ВТПартии.Склад),
	        |	МАКСИМУМ(ВТПартии.Номенклатура),
	        |	ВТОтказы.СтрокаЗаявки.IDSite
	        |ИЗ
	        |	ВТОтказы КАК ВТОтказы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПартии КАК ВТПартии
	        |		ПО ВТОтказы.Регистратор = ВТПартии.Регистратор
	        |			И ВТОтказы.СтрокаЗаявки = ВТПартии.СтрокаЗаявки
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТОтказы.Регистратор,
	        |	ВТОтказы.СтрокаЗаявки,
	        |	ВТПартии.СтрокаПрихода,
	        |	ВТОтказы.ПричинаОтказа,
	        |	ВТОтказы.СтрокаЗаявки.IDSite" ;
	
	
	
КонецФункции

Функция ЗапросСостояние_ВозвратТоваровОтПокупателя()
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ЗапросСостояние_ВозвратТоваровОтПокупателя";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////

	Если ЭтоАктивнаяЗадачаJirа(Справочники.ЗадачиJira.XX2570) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Продажи.СтрокаЗаявки,
		|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.Пустаяссылка) КАК СтрокаПрихода,
		|	ЛОЖЬ КАК Отказ,
		|	9 КАК Порядок,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяНовый)
		|				И НЕ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).АктРассмотренияВозврата.Ссылка ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВозвратЖдемТовар)
		|		КОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяПринят)
		|				ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ВозвратТоваровОтПокупателяРазмещен)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВозвратТоваровОтПокупателя)
		|	КОНЕЦ КАК Состояние,
		|	СУММА(Продажи.КоличествоВозврат) КАК Количество,
		|	ИСТИНА КАК Изменена,
		|	МАКСИМУМ(Продажи.Склад) КАК Склад,
		|	МАКСИМУМ(Продажи.Номенклатура) КАК Номенклатура,
		|	Продажи.СтрокаЗаявки.IDSite КАК IDSite,
		|	&Период,
		|	Продажи.Регистратор
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Регистратор = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Продажи.СтрокаЗаявки,
		|	Продажи.СтрокаЗаявки.IDSite,
		|	Продажи.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.СтрокаЗаявки,
		|	Данные.СтрокаПрихода,
		|	Данные.Отказ,
		|	Данные.Порядок,
		|	Данные.Состояние,
		|	Данные.Количество,
		|	Данные.Изменена,
		|	Данные.Склад,
		|	Данные.Номенклатура,
		|	Данные.IDSite,
		|	Данные.Период,
		|	Данные.Регистратор
		|ПОМЕСТИТЬ ВтДвижения
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
		|		ПО Данные.СтрокаЗаявки = ИсторияЗаявокПокупателя.СтрокаЗаявки
		|			И Данные.СтрокаПрихода = ИсторияЗаявокПокупателя.СтрокаПрихода
		|			И Данные.Отказ = ИсторияЗаявокПокупателя.Отказ
		|			И Данные.Порядок = ИсторияЗаявокПокупателя.Порядок
		|			И Данные.Состояние = ИсторияЗаявокПокупателя.Состояние
		|ГДЕ
		|	Данные.Состояние <> НЕОПРЕДЕЛЕНО
		|	И ИсторияЗаявокПокупателя.Состояние ЕСТЬ NULL";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Продажи.СтрокаЗаявки,
		|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПриходов.Пустаяссылка) КАК СтрокаПрихода,
		|	ЛОЖЬ КАК Отказ,
		|	9 КАК Порядок,
		|	ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВозвратОтПокупателя) КАК Состояние,
		|	СУММА(Продажи.КоличествоВозврат) КАК Количество,
		|	ИСТИНА КАК Изменена,
		|	МАКСИМУМ(Продажи.Склад) КАК Склад,
		|	МАКСИМУМ(Продажи.Номенклатура) КАК Номенклатура,
		|	Продажи.СтрокаЗаявки.IDSite КАК IDSite,
		|	&Период,
		|	Продажи.Регистратор
		|ПОМЕСТИТЬ ВтДвижения
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Регистратор = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Продажи.СтрокаЗаявки,
		|	Продажи.СтрокаЗаявки.IDSite,
		|	Продажи.Регистратор";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ЗапросСостояние_ПеремещениеТоваров()
	Возврат 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезервыТоваров.СтрокаЗаявки КАК СтрокаЗаявки,
	|	РезервыТоваров.СтрокаПрихода КАК СтрокаПрихода,
	|	ЛОЖЬ КАК Отказ,
	|	5 КАК Порядок,
	|	ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВРезерве) КАК Состояние,
	|	&Период КАК Период,
	|	СУММА(ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(&ДокументСсылка КАК Документ.ПеремещениеТоваров).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещенияТоваров.ПриемкаТопЛог)
	|				ТОГДА РезервыТоваров.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество,
	|	ИСТИНА КАК Изменена,
	|	РезервыТоваров.Регистратор КАК Регистратор,
	|	РезервыТоваров.Склад,
	|	МАКСИМУМ(РезервыТоваров.Номенклатура) КАК Номенклатура,
	|	РезервыТоваров.СтрокаЗаявки.IDSite КАК IDSite
	|ПОМЕСТИТЬ ВтДвижения
	|ИЗ
	|	РегистрНакопления.РезервыТоваров КАК РезервыТоваров
	|ГДЕ
	|	РезервыТоваров.Регистратор = &ДокументСсылка
	|	И РезервыТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервыТоваров.Регистратор,
	|	РезервыТоваров.Склад,
	|	РезервыТоваров.СтрокаЗаявки,
	|	РезервыТоваров.СтрокаПрихода,
	|	РезервыТоваров.СтрокаЗаявки.IDSite"
	
КонецФункции	

Функция ЗапросСостояние_АктРассмотренияВозврата()
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ЗапросСостояние_АктРассмотренияВозврата";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;
		Выполнить(лЗамена);
		Возврат АлгоритмыЗначениеВозврата;
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////

	Возврат
	"ВЫБРАТЬ
	|	АктРассмотренияВозвратаТовары.СтрокаПрихода,
	|	АктРассмотренияВозвратаТовары.СтрокаЗаявки,
	|	ЛОЖЬ КАК Отказ,
	|	9 КАК Порядок,
	|	ВЫБОР
	|		КОГДА АктРассмотренияВозвратаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.АРВ_ГВОтказ)
	|				ИЛИ АктРассмотренияВозвратаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.АРВ_ГПРКОтказ)
	|				ИЛИ АктРассмотренияВозвратаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.АРВ_КРООтказ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВозвратОтказано)
	|		КОГДА АктРассмотренияВозвратаТовары.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.АРВ_Отменен)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВозвратОтменен)
	|		КОГДА ВозвратТоваровОтПокупателя.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СостоянияСтрокДокументов.ВозвратНаРассмотрении)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Состояние,
	|	&Период,
	|	АктРассмотренияВозвратаТовары.Количество,
	|	ИСТИНА КАК Изменена,
	|	АктРассмотренияВозвратаТовары.Ссылка КАК Регистратор,
	|	ВозвратТоваровОтПокупателя.Склад КАК Склад,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК ВозвратСсылка,
	|	АктРассмотренияВозвратаТовары.Номенклатура КАК Номенклатура,
	|	АктРассмотренияВозвратаТовары.СтрокаЗаявки.IDSite КАК IDSite
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.АктРассмотренияВозврата.Товары КАК АктРассмотренияВозвратаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО АктРассмотренияВозвратаТовары.Ссылка = ВозвратТоваровОтПокупателя.АктРассмотренияВозврата
	|ГДЕ
	|	АктРассмотренияВозвратаТовары.Ссылка = &ДокументСсылка
	|	И АктРассмотренияВозвратаТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.СтрокаПрихода,
	|	ДанныеДокумента.СтрокаЗаявки,
	|	ДанныеДокумента.Отказ,
	|	ДанныеДокумента.Порядок,
	|	ДанныеДокумента.Состояние,
	|	ДанныеДокумента.Период,
	|	ДанныеДокумента.Количество,
	|	ДанныеДокумента.Изменена,
	|	ДанныеДокумента.Склад,
	|	ДанныеДокумента.ВозвратСсылка,
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.IDSite,
	|	ДанныеДокумента.Регистратор
	|ПОМЕСТИТЬ ВтДвижения
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	|		ПО ДанныеДокумента.СтрокаПрихода = ИсторияЗаявокПокупателя.СтрокаПрихода
	|			И ДанныеДокумента.СтрокаЗаявки = ИсторияЗаявокПокупателя.СтрокаЗаявки
	|			И ДанныеДокумента.Отказ = ИсторияЗаявокПокупателя.Отказ
	|			И ДанныеДокумента.Порядок = ИсторияЗаявокПокупателя.Порядок
	|			И ДанныеДокумента.Состояние = ИсторияЗаявокПокупателя.Состояние
	|ГДЕ
	|	ИсторияЗаявокПокупателя.Состояние ЕСТЬ NULL
	|	И ДанныеДокумента.Состояние <> НЕОПРЕДЕЛЕНО";
	
КонецФункции	

Функция ЗапросСостояние_ТекщиеДвижения()
	Возврат 	"ВЫБРАТЬ
	|	ИсторияЗаявокПокупателя.Период,
	|	ИсторияЗаявокПокупателя.Регистратор КАК Регистратор,
	|	ИсторияЗаявокПокупателя.СтрокаЗаявки,
	|	ИсторияЗаявокПокупателя.СтрокаПрихода,
	|	ИсторияЗаявокПокупателя.Отказ,
	|	ИсторияЗаявокПокупателя.Порядок,
	|	ИсторияЗаявокПокупателя.Состояние,
	|	ИсторияЗаявокПокупателя.ДатаСобытия,
	|	ИсторияЗаявокПокупателя.Количество,
	|	ИсторияЗаявокПокупателя.Изменена,
	|	ИсторияЗаявокПокупателя.Склад,
	|	ИсторияЗаявокПокупателя.Номенклатура,
	|	ИсторияЗаявокПокупателя.IDSite
	|ИЗ
	|	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДвижения КАК ВтДвижения
	|		ПО ИсторияЗаявокПокупателя.СтрокаЗаявки = ВтДвижения.СтрокаЗаявки
	|			И ИсторияЗаявокПокупателя.Порядок = ВтДвижения.Порядок
	|ГДЕ
	|	ВтДвижения.СтрокаЗаявки ЕСТЬ NULL
	|	И ИсторияЗаявокПокупателя.Регистратор = &ДокументСсылка
	|	И ИсторияЗаявокПокупателя.Отказ = ЛОЖЬ
	|	И ИсторияЗаявокПокупателя.Порядок В (2,3, 4, 6, 7)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтДвижения.Период,
	|	ВтДвижения.Регистратор,
	|	ВтДвижения.СтрокаЗаявки,
	|	ВтДвижения.СтрокаПрихода,
	|	ВтДвижения.Отказ,
	|	ВтДвижения.Порядок,
	|	ВтДвижения.Состояние,
	|	NULL,
	|	ВтДвижения.Количество,
	|	ВтДвижения.Изменена,
	|	ВтДвижения.Склад,
	|	ВтДвижения.Номенклатура,
	|	ВтДвижения.IDSite
	|ИЗ
	|	ВтДвижения КАК ВтДвижения"
	
КонецФункции	

Функция СтрокаИтогов()
	Возврат " ИТОГИ ПО
	| Регистратор	" ;
	
КонецФункции	


#КонецОбласти 


#Область ЗапросыКДанным_СтатусСтрокиЗаявки

Функция ЗапросСтатуса_ЗаказыЗаявки()
	Запрос = новый запрос( "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыКорректировокСрезПоследних.СтатусДокумента,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрСведений.ДокументыКорректировок.СрезПоследних(, Документ = &ДокументСсылка) КАК ДокументыКорректировокСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПоставщику.СтатусДокумента,
	|	0
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявкаПокупателя.СтатусДокумента,
	|	0
	|ИЗ
	|	Документ.ЗаявкаПокупателя КАК ЗаявкаПокупателя
	|ГДЕ
	|	ЗаявкаПокупателя.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ" );
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда 
		возврат Справочники.СтатусыДокументов.ПустаяСсылка();
	иначе 
		Выборка = Результат.Выбрать();
		выборка.Следующий();
		Возврат Выборка.СтатусДокумента;
	КонецЕсли;
	
КонецФункции	

Функция  ЗапросЗакрытияСтрокЗаявок()	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ЗапросЗакрытияСтрокЗаявок";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	
	Возврат "ВЫБРАТЬ ПЕРВЫЕ %1
	|	ОчередьЗакрытияСтрокЗаявок.Регистратор
	|ПОМЕСТИТЬ ВТ_РегистраторыВыборки
	|ИЗ
	|	РегистрСведений.ОчередьЗакрытияСтрокЗаявок КАК ОчередьЗакрытияСтрокЗаявок
	|ГДЕ
	|	ОчередьЗакрытияСтрокЗаявок.Обработана = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЗакрытияСтрокЗаявок.Регистратор.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьЗакрытияСтрокЗаявок.СтрокаЗаявки КАК ссылка,
	|	ВЫБОР
	|		КОГДА ОчередьЗакрытияСтрокЗаявок.СтрокаЗаявки.СостояниеЗаявки = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяЗакрыт)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПроверятьЗаявкаЗакрыта,
	|	ВЫБОР
	|		КОГДА ОчередьЗакрытияСтрокЗаявок.СтрокаЗаявки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.Пустаяссылка)
	|				ИЛИ ОчередьЗакрытияСтрокЗаявок.СтрокаЗаявки.ТипПоставки В (ЗНАЧЕНИЕ(Перечисление.ТипПоставки.Сток), ЗНАЧЕНИЕ(Перечисление.ТипПоставки.VMI))
	|				ИЛИ ОчередьЗакрытияСтрокЗаявок.СтрокаЗаявки.УдалитьСостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаказПоставщикуЗакрыт)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПроверятьЗаказЗакрыт,
	|	ВТ_РегистраторыВыборки.Регистратор
	|ПОМЕСТИТЬ ВТ_СтрокиЗаявок
	|ИЗ
	|	ВТ_РегистраторыВыборки КАК ВТ_РегистраторыВыборки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьЗакрытияСтрокЗаявок КАК ОчередьЗакрытияСтрокЗаявок
	|		ПО ВТ_РегистраторыВыборки.Регистратор = ОчередьЗакрытияСтрокЗаявок.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СтрокиЗаявок.ссылка КАК СтрокаЗаявки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_СтрокиЗаявок.ПроверятьЗаявкаЗакрыта
	|					И ЗаявкиПокупателейОстатки.СтрокаЗаявки ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПометитьЗаявкуЗакрытой,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_СтрокиЗаявок.ПроверятьЗаказЗакрыт
	|					И ЗаказыПоставщикамОстатки.СтрокаЗаявки ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПометитьЗаказЗакрытым,
	|	ВТ_СтрокиЗаявок.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ_СтрокиЗаявок КАК ВТ_СтрокиЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиПокупателей.Остатки(
	|				,
	|				СтрокаЗаявки В
	|					(ВЫБРАТЬ
	|						ВТ_СтрокиЗаявок.ссылка КАК Ссылка
	|					ИЗ
	|						ВТ_СтрокиЗаявок КАК ВТ_СтрокиЗаявок
	|					ГДЕ
	|						ВТ_СтрокиЗаявок.ПроверятьЗаявкаЗакрыта = ИСТИНА)) КАК ЗаявкиПокупателейОстатки
	|		ПО ВТ_СтрокиЗаявок.ссылка = ЗаявкиПокупателейОстатки.СтрокаЗаявки
	|			И (ЗаявкиПокупателейОстатки.КоличествоОстаток > 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				СтрокаЗаявки В
	|					(ВЫБРАТЬ
	|						ВТ_СтрокиЗаявок.ссылка КАК Ссылка
	|					ИЗ
	|						ВТ_СтрокиЗаявок КАК ВТ_СтрокиЗаявок
	|					ГДЕ
	|						ВТ_СтрокиЗаявок.ПроверятьЗаказЗакрыт = ИСТИНА)) КАК ЗаказыПоставщикамОстатки
	|		ПО ВТ_СтрокиЗаявок.ссылка = ЗаказыПоставщикамОстатки.СтрокаЗаявки
	|			И (ЗаказыПоставщикамОстатки.КоличествоОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СтрокиЗаявок.Регистратор,
	|	ВТ_СтрокиЗаявок.ссылка
	|ИТОГИ ПО
	|	Регистратор";	
	
	
КонецФункции

#КонецОбласти


#Область СтатусыДокументов

Функция НоваяСхемаЗакрытияЗаявок(Дата) Экспорт 
	Возврат Дата> Константы.ДатаНовойСхемыЗакрытияЗаявок.Получить();	
КонецФункции	

Процедура ИзменитьКорректировкуЗаказаЗаявки(знач Документ,СтруктураЗаполнения,ПровестиИзменения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику") 
		или  ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику")  
		или  ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаПокупателя")
		или   ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") тогда
		Документ = Документ.ПолучитьОбъект();
	КонецЕсли;	
	
	МетаданныеДокумента = Документ.метаданные();
	
	Модифицированость = Ложь;
	
	Для каждого ЭлементаСтруктуры  из СтруктураЗаполнения цикл 
		Если НЕ МетаданныеДокумента.Реквизиты.Найти(ЭлементаСтруктуры.ключ) = Неопределено
			и Не Документ[ЭлементаСтруктуры.ключ] = ЭлементаСтруктуры.Значение тогда 
			Документ[ЭлементаСтруктуры.ключ] = ЭлементаСтруктуры.Значение;
		Иначеесли  НЕ МетаданныеДокумента.ТабличныеЧасти.Найти(ЭлементаСтруктуры.ключ) = Неопределено тогда 
			Документ[ЭлементаСтруктуры.ключ].Загрузить(ЭлементаСтруктуры.Значение);
		ИначеЕсли  ЭлементаСтруктуры.ключ = "Дата" тогда
			Документ.Дата =  ЭлементаСтруктуры.Значение;
		иначе 	
			Продолжить;
		КонецЕсли;	
		
		Модифицированость = Истина
	КонецЦикла;	
	
	Если не Модифицированость тогда 
		Возврат;
	КонецЕсли;
	Документ.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета");
	Документ.Записать(?(ПровестиИзменения,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
	
	
КонецПроцедуры	

//ХудинВВ XX-2855 12072019 Изменил на функцию
Функция СоздатьКорректировкуЗаказаЗаявки(знач Документ, СтруктураЗаполнения, ПровестиИзменения = Истина) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_СоздатьКорректировкуЗаказаЗаявки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику") 
		или  ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда   
		ДокументКорректировки = Документы.КорректировкаЗаказаПоставщику.СоздатьДокумент();
	Иначеесли  ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаПокупателя")
		или   ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда
		ДокументКорректировки = Документы.КорректировкаЗаявкиПокупателя.СоздатьДокумент();
	КонецЕсли;	
	
	//Валиахметов http://jira.part-kom.ru/browse/XX-2261 22.04.2019
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику") 
		Или  ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") Тогда   
		ДокументКорректировки.ДокументОснование = Документ.ДокументОснование;
	ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") 
		Или  ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда 
		ДокументКорректировки.ДокументОснование = Документ;
	КонецЕсли;
	//Конец Валиахметов http://jira.part-kom.ru/browse/XX-2261 22.04.2019
	
	МетаданныеДокумента = ДокументКорректировки.метаданные();	
	ЗаполнитьЗначенияСвойств(ДокументКорректировки,Документ,,"Номер,Дата");
	
	Модифицированость = Ложь;
	
	Для каждого ЭлементаСтруктуры  из СтруктураЗаполнения цикл 
		Если НЕ МетаданныеДокумента.Реквизиты.Найти(ЭлементаСтруктуры.ключ) = Неопределено
			и Не ДокументКорректировки[ЭлементаСтруктуры.ключ] = ЭлементаСтруктуры.Значение тогда 
			ДокументКорректировки[ЭлементаСтруктуры.ключ] = ЭлементаСтруктуры.Значение;
		Иначеесли  НЕ МетаданныеДокумента.ТабличныеЧасти.Найти(ЭлементаСтруктуры.ключ) = Неопределено тогда 
			ДокументКорректировки[ЭлементаСтруктуры.ключ].Загрузить(ЭлементаСтруктуры.Значение);
		ИначеЕсли  ЭлементаСтруктуры.ключ = "Дата" тогда
			ДокументКорректировки.Дата =  ЭлементаСтруктуры.Значение;		
		иначе 	
			Продолжить;
		КонецЕсли;	
		
		Модифицированость = Истина
	КонецЦикла;	
	
	Если не Модифицированость тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументКорректировки.Дата) тогда 
		ДокументКорректировки.Дата = ТекущаяДата();	
	КонецЕсли;	
	
	ДокументКорректировки.ДополнительныеСвойства.Вставить("СнятьОграничениеПоДатеЗапрета");
	ДокументКорректировки.Записать(?(ПровестиИзменения,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
	
	Возврат ДокументКорректировки.Ссылка;
	
КонецФункции	

Функция ПоЗаявкеЕстьАктивныйЗаказ(ДокументЗаявка,Период = Неопределено) Экспорт 
	
	ПоследняяКорректировка = ПолучитьПоследниюКорректировкуЗаявкиЗаказа(ДокументЗаявка);
	Если Период = Неопределено тогда 
		Период = ТекущаяДата();
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказыПоставщикамОстатки.СтрокаЗаявки,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			&Период,
	|			СтрокаЗаявки В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВложенныйЗапрос.СтрокаЗаявки
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ЗаявкаПокупателяТовары.СтрокаЗаявки КАК СтрокаЗаявки
	|					ИЗ
	|						Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
	|					ГДЕ
	|						ЗаявкаПокупателяТовары.Ссылка = &ДокументЗаявка
	|			
	|					ОБЪЕДИНИТЬ ВСЕ
	|			
	|					ВЫБРАТЬ
	|						КорректировкаЗаявкиПокупателяТовары.СтрокаЗаявки
	|					ИЗ
	|						Документ.КорректировкаЗаявкиПокупателя.Товары КАК КорректировкаЗаявкиПокупателяТовары
	|					ГДЕ
	|						КорректировкаЗаявкиПокупателяТовары.Ссылка = &ДокументЗаявка) КАК ВложенныйЗапрос)) КАК ЗаказыПоставщикамОстатки
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("ДокументЗаявка", ДокументЗаявка);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат не РезультатЗапроса.Пустой();
КонецФункции	

Процедура ПометитьСтрокиЗаявокВыгруженымиНаСайт(ОбработаныеСтрокиЗаявок,НомерСообщения,СтруктураХранения,ЭтоРозница = ложь) Экспорт 
	
	УстанавливаемыеПоля = Новый Структура;
	УстанавливаемыеПоля.Вставить("ДатаОтправки", ТекущаяДата());
	УстанавливаемыеПоля.Вставить("НомерСообщенияОтправленного", НомерСообщения);
	
	ОтборПоСтрокамЗаявки = Новый Структура;
	ОтборПоСтрокамЗаявки.Вставить("ВидСравнения", ВидСравнения.ВСписке);
	ОтборПоСтрокамЗаявки.Вставить("Значение", ОбработаныеСтрокиЗаявок); 
	
	ПоляОтбора = Новый Структура;
	Если Не ЭтоРозница тогда 
		ПоляОтбора.Вставить("СтрокаЗаявки", ОтборПоСтрокамЗаявки);
	иначе
		ПоляОтбора.Вставить("IDSite", ОтборПоСтрокамЗаявки);
	КонецЕсли;
	
	Структура = Новый Структура("ИмяТаблицы", ?(ЭтоРозница,"РегистрСведений.СостояниеРозничныхЗаявокПокупателя","РегистрСведений.СостояниеЗаявокПокупателя"));
	Структура.Вставить("УстанавливаемыеПоля", УстанавливаемыеПоля);
	Структура.Вставить("ПоляОтбора", ПоляОтбора);
	Структура.Вставить("СтруктураХранения", СтруктураХранения);
	
	ОписаниеОшибки = РаботаСSQL.UpdateAtWhere(Структура);
	
	
КонецПроцедуры	

Процедура УстановитьПометкуПолученыхСайтом(НомерСообщения,СтруктураХранения,ЭтоРозница = ложь) Экспорт 
	
	
	УстанавливаемыеПоля = Новый Структура;
	УстанавливаемыеПоля.Вставить("ПолученоСайтом", Истина);
	УстанавливаемыеПоля.Вставить("ДатаОбработкиСайтом", ТекущаяДата());
	
	ОтборПоНомеруСообщения = Новый Структура;
	ОтборПоНомеруСообщения.Вставить("ВидСравнения", ВидСравнения.Интервал);
	ОтборПоНомеруСообщения.Вставить("Минимум", 1);
	ОтборПоНомеруСообщения.Вставить("Максимум", НомерСообщения);
	
	ПоляОтбора = Новый Структура;
	ПоляОтбора.Вставить("НомерСообщенияОтправленного", ОтборПоНомеруСообщения);
	ПоляОтбора.Вставить("ПолученоСайтом", Ложь);
	
	Структура = Новый Структура("ИмяТаблицы", ?(ЭтоРозница,"РегистрСведений.СостояниеРозничныхЗаявокПокупателя","РегистрСведений.СостояниеЗаявокПокупателя"));
	Структура.Вставить("УстанавливаемыеПоля", УстанавливаемыеПоля);
	Структура.Вставить("ПоляОтбора", ПоляОтбора);
	Структура.Вставить("СтруктураХранения", СтруктураХранения);
	
	ОписаниеОшибки = РаботаСSQL.UpdateAtWhere(Структура);
	
	
КонецПроцедуры	

Процедура ОбновитьСтатусыЗаявокЗаказов(ДокументСсылка)  Экспорт 
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ОбновитьСтатусыЗаявокЗаказов";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	Если ТипЗнч(ДокументСсылка) = тип("ДокументСсылка.КорректировкаЗаказаПоставщику") тогда 
		Обработки.ЗакрытиеЗаявокИЗаказов.ЗакрытьЗаказПоставщику(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка,"ДокументОснование"));
	ИначеЕсли  ТипЗнч(ДокументСсылка) = тип("ДокументСсылка.ЗаказПоставщику") тогда  	
		Обработки.ЗакрытиеЗаявокИЗаказов.ЗакрытьЗаказПоставщику(ДокументСсылка);
	КонецЕсли;	 
	
	
	
КонецПроцедуры	

Процедура ПроверитьСтатусыЗакрытияСтрокЗаявок(КоличествоОбъектов = 100) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ПроверитьСтатусыЗакрытияСтрокЗаявок";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	ЗапросЗакрытияСтрокЗаявок = новый запрос;		
	ЗапросЗакрытияСтрокЗаявок.Текст  =  СтрШаблон(ЗапросЗакрытияСтрокЗаявок(),Формат(КоличествоОбъектов,"ЧГ=0"));
	Результат = ЗапросЗакрытияСтрокЗаявок.Выполнить();
	ВыборкаРегистраторовКЗакрытию  =  Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Пока ВыборкаРегистраторовКЗакрытию.Следующий() цикл 
		ДокументРегистратор  =ВыборкаРегистраторовКЗакрытию.Регистратор;
		ДатаДокумента  =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРегистратор,"Дата");	
		ДатаОбработки  = ТекущаяДата();
		НаборРегистратора =  РегистрыСведений.ОчередьЗакрытияСтрокЗаявок.СоздатьНаборЗаписей();
		НаборРегистратора.Отбор.Регистратор.Установить(ДокументРегистратор);
		
		НачатьТранзакцию();
		УстановитьБлокировкуОчередлиПоДокументу(ДокументРегистратор);	
		
		Попытка
			
			ВыборкаСтрокЗаявокКЗакрытию  =  ВыборкаРегистраторовКЗакрытию.Выбрать();
			Пока ВыборкаСтрокЗаявокКЗакрытию.Следующий() цикл 
				СтрокаЗаявки = ВыборкаСтрокЗаявокКЗакрытию.СтрокаЗаявки; 
				ЗакрытьСтрокуЗаявки(СтрокаЗаявки,ВыборкаСтрокЗаявокКЗакрытию.ПометитьЗаказЗакрытым
				,ВыборкаСтрокЗаявокКЗакрытию.ПометитьЗаявкуЗакрытой,ДатаДокумента);
				
				СтрокаНабора =  НаборРегистратора.Добавить();
				СтрокаНабора.Период = ДатаОбработки;
				СтрокаНабора.СтрокаЗаявки =СтрокаЗаявки;
				СтрокаНабора.Обработана= Истина;
				СтрокаНабора.ДатаОбработки = ДатаОбработки;
				
			КонецЦикла;
			
			НаборРегистратора.Записать();
			
			ЗафиксироватьТранзакцию();
			
			
		Исключение
			ОтменитьТранзакцию();
			
			КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(ДокументРегистратор,ПредопределенноеЗначение("Справочник.СобытияДляОтправкиЭлектронныхПисем.ОшибкаЗакрытияСтрокЗаявок"),
			"Не удалось закрыть строку заявки по документу " +СокрЛП(ДокументРегистратор) + " по причине " +ОписаниеОшибки());
		КонецПопытки;
		
		
		
	КонецЦикла;
	
	
	
	
КонецПроцедуры

Процедура УстановитьБлокировкуОчередлиПоДокументу(ДокументРегистратор)
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_УстановитьБлокировкуОчередлиПоДокументу";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "РегистрСведений.ОчередьЗакрытияСтрокЗаявок.НаборЗаписей";
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Регистратор",ДокументРегистратор); 
	Блокировка.Заблокировать(); 	
	
КонецПроцедуры

Процедура ЗакрытьСтрокуЗаявки(СтрокаЗаявки,ЗакрытьЗаказ,ЗакрытьЗаявку,ДатаДокумента)
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ЗакрытьСтрокуЗаявки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	
	Если не ЗакрытьЗаказ и не ЗакрытьЗаявку тогда 
		Возврат;
	КонецЕсли;	
	
	СтрокаЗаявкиОбъект  =  СтрокаЗаявки.ПолучитьОбъект();
	Если ЗакрытьЗаказ  тогда 
		СтрокаЗаявкиОбъект.УдалитьСостояниеЗаказа = ПредопределенноеЗначение("Справочник.СтатусыДокументов.ЗаказПоставщикуЗакрыт");
		СтрокаЗаявкиОбъект.ДатаЗакрытияЗаказа = ДатаДокумента;
	КонецЕсли;
	
	
	Если  ЗакрытьЗаявку тогда 
		СтрокаЗаявкиОбъект.СостояниеЗаявки = ПредопределенноеЗначение("Справочник.СтатусыДокументов.ЗаявкаПокупателяЗакрыт");
		СтрокаЗаявкиОбъект.ДатаЗакрытияЗаявки = ДатаДокумента;	
	КонецЕсли;	
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтрокаЗаявкиОбъект);
	
КонецПроцедуры	

Процедура ДобавитьДокументВОчередьЗакрытияСтрокЗаявок(ДокументСсылка,ВыборкаСтрокЗаявок) экспорт 
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ДобавитьДокументВОчередьЗакрытияСтрокЗаявок";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей  = РегистрыСведений.ОчередьЗакрытияСтрокЗаявок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	ВыборкаСтрокЗаявок.Свернуть("СтрокаЗаявки");
	Для каждого СтрокаВыборки из ВыборкаСтрокЗаявок цикл 
		Если ЗначениеЗаполнено(СтрокаВыборки.СтрокаЗаявки) 
			и  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаВыборки.СтрокаЗаявки,"Виртуальная") = ложь тогда 
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Период = ТекущаяДата();
		СтрокаНабора.СтрокаЗаявки  = СтрокаВыборки.СтрокаЗаявки;
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
		
КонецПроцедуры	

Процедура ОбработатьИзменениеДокументаПоСостониямСтрокЗаявок(ДокументСсылка,ОтменаПроведения = ложь)  Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ОбработатьИзменениеДокументаПоСостониямСтрокЗаявок";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	ИмяТЧ = "Товары";	
	Если НеобходимоПроверитьЗакрытиеСтрокЗаявок(ДокументСсылка,ИмяТЧ) тогда 
		ЗапросСтрокЗаявок = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ДокументСсылка, ИмяТЧ, Новый Структура("СтрокаЗаявки","СтрокаЗаявки"));
		Если ОтменаПроведения тогда 
			ОткатитьСостоянияСтрокЗаявокПриРаспроведенииДокумента(ДокументСсылка,ЗапросСтрокЗаявок.Выгрузить().ВыгрузитьКолонку("СтрокаЗаявки"));
		Иначе 
			ДобавитьДокументВОчередьЗакрытияСтрокЗаявок(Документссылка,ЗапросСтрокЗаявок.Выгрузить());
		КонецЕсли;	
	Конецесли	
	
КонецПроцедуры	

Функция НеобходимоПроверитьЗакрытиеСтрокЗаявок(ДокументСсылка,ИмяТЧ="Товары")
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_НеобходимоПроверитьЗакрытиеСтрокЗаявок";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаПокупателя") или 
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") тогда 
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка,"СтатусДокумента") = ПредопределенноеЗначение("Справочник.СтатусыДокументов.ЗаявкаПокупателяНеПодтвержден")  тогда 
			Возврат Ложь;
		Иначе 
			Возврат Истина;
		КонецЕсли;		 
	КонецЕсли;	 
	
	
	Если  ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику") тогда 
		Возврат истина;	 		 
	КонецЕсли;	 
	
	Если  ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда 
		Если   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка,"ЭтоМФП") тогда 
			Возврат ложь
		Иначе  
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если  ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") тогда 
		ИмяТЧ = "РазмещениеСтрокПрихода";	
		Если   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка,"ЭтоМФП") тогда 
			Возврат ложь
		Иначе  
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат ложь;
	
	
	
КонецФункции	 

Процедура ОткатитьСостоянияСтрокЗаявокПриРаспроведенииДокумента(ДокументСсылка,МассивСтрокЗаявок)
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ОткатитьСостоянияСтрокЗаявокПриРаспроведенииДокумента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////	
	
	
	ВыборкаСтрок = ВыбратьСстрокиЗаявокКОтменеЗакрытия(МассивСтрокЗаявок);
	Пока ВыборкаСтрок.Следующий() цикл 
		СтрокаЗаявкиОбъект = ВыборкаСтрок.СтрокаЗаявки.ПолучитьОбъект();
		
		Если ВыборкаСтрок.ОткатитьЗаказ тогда 
			СтрокаЗаявкиОбъект.УдалитьСостояниеЗаказа = ПредопределенноеЗначение("Справочник.СтатусыДокументов.ОтгруженПоставщиком");
			СтрокаЗаявкиОбъект.ДатаЗакрытияЗаказа = Дата(1,1,1);
		КонецЕсли;
		
		
		Если  ВыборкаСтрок.ОткатитьЗаявку  тогда 
			СтрокаЗаявкиОбъект.СостояниеЗаявки = ПредопределенноеЗначение("Справочник.СтатусыДокументов.ЗаявкаПокупателяЗакрыт");
			СтрокаЗаявкиОбъект.ДатаЗакрытияЗаявки = Дата(1,1,1);;	
		КонецЕсли;	
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтрокаЗаявкиОбъект);
		
	КонецЦикла;	 
	
КонецПроцедуры	

Функция ВыбратьСстрокиЗаявокКОтменеЗакрытия(МассивСтрокЗаявок)
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ВыбратьСстрокиЗаявокКОтменеЗакрытия";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыСтрокЗаявок.Ссылка КАК СтрокаЗаявки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ЗаказыПоставщикамОстатки.СтрокаЗаявки ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОткатитьЗаказ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ЗаявкиПокупателейОстатки.СтрокаЗаявки ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОткатитьЗаявку
	|ИЗ
	|	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				СтрокаЗаявки В (&МассивСтрокЗаявок)
	|					И СтрокаЗаявки.УдалитьСостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаказПоставщикуЗакрыт)) КАК ЗаказыПоставщикамОстатки
	|		ПО ИдентификаторыСтрокЗаявок.Ссылка = ЗаказыПоставщикамОстатки.СтрокаЗаявки
	|			И (ЗаказыПоставщикамОстатки.КоличествоОстаток > 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиПокупателей.Остатки(
	|				,
	|				СтрокаЗаявки В (&МассивСтрокЗаявок)
	|					И СтрокаЗаявки.СостояниеЗаявки = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяЗакрыт)) КАК ЗаявкиПокупателейОстатки
	|		ПО ИдентификаторыСтрокЗаявок.Ссылка = ЗаявкиПокупателейОстатки.СтрокаЗаявки
	|			И (ЗаявкиПокупателейОстатки.КоличествоОстаток > 0)
	|ГДЕ
	|	ИдентификаторыСтрокЗаявок.Ссылка В(&МассивСтрокЗаявок)
	|	И (ИдентификаторыСтрокЗаявок.УдалитьСостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаказПоставщикуЗакрыт)
	|			ИЛИ ИдентификаторыСтрокЗаявок.СостояниеЗаявки = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяЗакрыт))
	|	И (НЕ ЗаказыПоставщикамОстатки.СтрокаЗаявки ЕСТЬ NULL
	|			ИЛИ НЕ ЗаявкиПокупателейОстатки.СтрокаЗаявки ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИдентификаторыСтрокЗаявок.Ссылка";
	
	Запрос.УстановитьПараметр("МассивСтрокЗаявок", МассивСтрокЗаявок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат  РезультатЗапроса.Выбрать();
	
КонецФункции	
		
#КонецОбласти


#Область ВызовСервера
// т.к у нас в толстом клиенте 90% кода идет на клиенте , не стал делать отдельный модуль вызова сервера , а все включил сюда 
Функция СтрокаЗаявкиЗакрыта(СтрокаЗаявки) Экспорт 
	возврат РаботаСоСтатусамиДокументовПовтИсп.СтрокаЗаявкиЗакрыта(СтрокаЗаявки);
КонецФункции	

Функция ТекущийСтатусДокумента(ДокументСсылка) экспорт 
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ТекущийСтатусДокумента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	
	Если ТипЗнч(ДокументСсылка)  =  тип("ДокументСсылка.ЗаказПоставщику") 
		или ТипЗнч(ДокументСсылка)  =  тип("ДокументСсылка.ЗаявкаПокупателя") тогда 
		возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка,"СтатусДокумента");
		//РаботаСоСтатусамиДокументовПовтИсп.ТекущийСтатусЗаявкиЗаказа(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

Функция ЗаявкаЗакрыта(ДокументСсылка,НеИспользоватьКэш = Ложь) Экспорт
	Если НеИспользоватьКэш  тогда 
		Возврат ЗаявкаЗакрытаБезКэша(ДокументСсылка);
	иначе 	
		Возврат РаботаСоСтатусамиДокументовПовтИсп.ЗаявкаЗакрыта(ДокументСсылка);
	КонецЕсли;
КонецФункции

Функция ЗаявкаЗакрытаБезКэша(ДокументСсылка)  Экспорт
	ЗапросОстатков = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявкиПокупателейОстатки.СтрокаЗаявки
	|ИЗ
	|	Документ.ЗаявкаПокупателя.Товары КАК ЗаявкаПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиПокупателей.Остатки КАК ЗаявкиПокупателейОстатки
	|		ПО ЗаявкаПокупателяТовары.СтрокаЗаявки = ЗаявкиПокупателейОстатки.СтрокаЗаявки
	|			И (ЗаявкиПокупателейОстатки.КоличествоОстаток > 0)
	|ГДЕ
	|	ЗаявкаПокупателяТовары.Ссылка = &ДокументСсылка");
	ЗапросОстатков.УстановитьПараметр("ДокументСсылка",ДокументСсылка);
	Результат = ЗапросОстатков.Выполнить();
	Возврат Результат.Пустой() 	
КонецФункции	

Функция ПолучитьПоследниюКорректировкуЗаявкиЗаказа(ДокументСсылка,ДатаОтбора = Неопределено) Экспорт 
	Если ДатаОтбора = Неопределено тогда 
		ДатаОтбора = ТекущаяДата();
	КонецЕсли;	
	
	ТабСреза = РегистрыСведений.ДокументыКорректировок.СрезПоследних(ДатаОтбора,новый Структура("Документ",ДокументСсылка));	
	Если ТабСреза.Количество() тогда 
		Возврат  ТабСреза[0].ДокументКорректировки;
	иначе 
		Возврат ДокументСсылка ;
	КонецЕсли;	
КонецФункции

Процедура ОбработатьОтменуПроведенияДокумента(Источник, Отказ) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры


Функция КонтрагентЗакрываетсяБезРазмещения(Контрагент) Экспорт 
	Возврат РаботаСоСтатусамиДокументовПовтИсп.КонтрагентЗакрываетсяБезРазмещения(Контрагент);
	
КонецФункции	

Функция ЭтоСкладПриемки(Склад) Экспорт
	возврат РаботаСоСтатусамиДокументовПовтИсп.ЭтоСкладПриемки(Склад);
КонецФункции	


Функция ДокументВыгруженВТоплог(ДокументСсылка) Экспорт
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ДокументВыгруженВТоплог";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсторияОбменаСТопЛогПоОбъектам.Объект
	|ИЗ
	|	РегистрСведений.ИсторияОбменаСТопЛогПоОбъектам КАК ИсторияОбменаСТопЛогПоОбъектам
	|ГДЕ
	|	ИсторияОбменаСТопЛогПоОбъектам.Объект = &ДокументСсылка
	|	И ИсторияОбменаСТопЛогПоОбъектам.Исходящее = ИСТИНА";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат не РезультатЗапроса.Пустой();	
	
	
	//Возврат РаботаСоСтатусамиДокументовПовтИсп.ДокументВыгруженВТоплог(ДокументСсылка);
	
	
КонецФункции

Функция МенеджерПользователя(Пользователь) Экспорт
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_МенеджерПользователя";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
	
	Возврат РаботаСоСтатусамиДокументовПовтИсп.МенеджерПользователя(Пользователь);
КонецФункции



#КонецОбласти

#Область Прочее
Функция ДоступныеКодыСписанияДокумента(ДокументСсылка, ВидОперации = Неопределено) Экспорт
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ДоступныеКодыСписанияДокумента";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////	
	
	
	ЗапросКодов  = новый Запрос("ВЫБРАТЬ
	|	КодыСписания.Ссылка КАК КодСписания
	|ИЗ
	|	Справочник.КодыСписания КАК КодыСписания
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(&ДокументССылка) = ТИП(Документ.СписаниеТоваров)
	|				ТОГДА КодыСписания.Наименование ПОДОБНО ""1С /%""
	|						ИЛИ КодыСписания.Наименование ПОДОБНО ""2С /%""
	|						ИЛИ КодыСписания.Наименование ПОДОБНО ""4С /%""
	|						ИЛИ КодыСписания.Наименование ПОДОБНО ""6С /%""
	|						ИЛИ КодыСписания.Наименование ПОДОБНО ""7С /%""
	|			КОГДА ТИПЗНАЧЕНИЯ(&ДокументССылка) = ТИП(Документ.ПерестикеровкаПереоценка)
	|				ТОГДА ВЫБОР
	|						КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийУценки.Перестикеровка)
	|							ТОГДА КодыСписания.Наименование ПОДОБНО ""5С /%""
	|									ИЛИ КодыСписания.Наименование ПОДОБНО ""6С /%""
	|									ИЛИ КодыСписания.Наименование ПОДОБНО ""2С / 2%""
	|						ИНАЧЕ КодыСписания.Наименование ПОДОБНО ""3С /%""
	|					КОНЕЦ
	|		КОНЕЦ
	|	И КодыСписания.ПометкаУдаления = ЛОЖЬ"   );
	ЗапросКодов.УстановитьПараметр("ДокументССылка",ДокументСсылка);
	
	// 20.05.19 Строганов Роман > Закоментировал в рамках XX-2497
	
	//# Kalinin V.A. ( 2019-05-06 )  /*
	//нет у нас функции  ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта ,поэтому хардкодом 
	
	//Если ТипЗнч(ДокументССылка) = Тип("ДокументСсылка.ПерестикеровкаПереоценка")  тогда
	//	ВидОперации =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка,"ВидОперации");
	//иначе 
	//	ВидОперации  = Неопределено;
	//КонецЕсли;	
	
	// 20.05.19 Строганов Роман < Закоментировал в рамках XX-2497
	
	ЗапросКодов.УстановитьПараметр("ВидОперации",ВидОперации);
	Результат  = ЗапросКодов.выполнить();
	Если Результат.Пустой() тогда 
		возврат новый Массив;
	иначе 	
		Возврат результат.Выгрузить().ВыгрузитьКолонку("КодСписания");
	КонецЕсли;	 
	
	
КонецФункции	

// Функция - Возвращает список элементов по отбору
//
// Параметры:
//  ПолноеИмяМетаданных	 - Строка -  ПолноеИмяМетаданных
//  Отбор				 - Структура - Структура реквизитов отбора и х значения
//  НеКэшировать		 - Булево -  Определяет используется ли кэш
// 
// Возвращаемое значение:
//   - Список элементов
//
Функция ПолучитьСписокЭлементовПоОтбору(ПолноеИмяМетаданных,Отбор,НеКэшировать = Ложь) Экспорт 
	лКлючАлгоритма = "ОбщийМодуль_РаботаСоСтатусамиДокументовСервер_ПолучитьСписокЭлементовПоОтбору";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	////////////////////////////////////////////////
	
	Если НеКэшировать тогда 
		ЗапросОтбора = новый Запрос;	
		ТексШапки = "ВЫБРАТЬ
		|	ПсевдонимЗаданнойТаблицы.Ссылка
		|ИЗ
		|	"+ ПолноеИмяМетаданных+" КАК ПсевдонимЗаданнойТаблицы  ";
		
		ТекстОтбора = "";
		Для каждого ЭлементОтбора из Отбор цикл 
			ТекстОтбора = ТекстОтбора + ?(не ЗначениеЗаполнено(ТекстОтбора)," ГДЕ
			| "," И ");
			ТекстОтбора  = ТекстОтбора + "ПсевдонимЗаданнойТаблицы."+ ЭлементОтбора.ключ + " = &"+ЭлементОтбора.ключ ;			
			ЗапросОтбора.Параметры.Вставить(ЭлементОтбора.ключ,ЭлементОтбора.Значение);			
		КонецЦикла;		
		ЗапросОтбора.Текст = ТексШапки + ТекстОтбора;
		результат = ЗапросОтбора.Выполнить();
		Возврат результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	иначе 
		Возврат РаботаСоСтатусамиДокументовПовтИсп.ПолучитьСписокЭлементовПоОтбору(ПолноеИмяМетаданных,Отбор);
	КонецЕсли;
	
Конецфункции	


Процедура ОткрытьОтчет_РеестрДокументов() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура ОткрытьОтчет_РеестрВозвратовТоваровПоставщикам() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры
#КонецОбласти