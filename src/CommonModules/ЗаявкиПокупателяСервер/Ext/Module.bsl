#Область СостоянияСтрокЗаявок

Процедура ОбновитьСостоянияВСтрокеЗаявки(МасивСтрокЗаявок)
	ЗапросСостояний  = Новый Запрос;
	ЗапросСостояний.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИдентификаторыСтрокЗаявок.Ссылка
	|ИЗ
	|	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиПокупателей.Остатки(, СтрокаЗаявки В (&МассивСтрокЗаявок)) КАК ЗаявкиПокупателейОстатки
	|		ПО (ЗаявкиПокупателейОстатки.СтрокаЗаявки = ИдентификаторыСтрокЗаявок.Ссылка)
	|			И (ЗаявкиПокупателейОстатки.КоличествоОстаток > 0)
	|ГДЕ
	|	ИдентификаторыСтрокЗаявок.СостояниеЗаявки = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяПодтвержден)
	|	И ЗаявкиПокупателейОстатки.СтрокаЗаявки ЕСТЬ NULL
	|	И ИдентификаторыСтрокЗаявок.Виртуальная = ЛОЖЬ
	|	И ИдентификаторыСтрокЗаявок.Ссылка В(&МассивСтрокЗаявок)";
	ЗапросСостояний.УстановитьПараметр("МассивСтрокЗаявок",МасивСтрокЗаявок);				
	
	РезультатЗапроса = ЗапросСостояний.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИдентСтрокЗаявки = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ИдентСтрокЗаявки.СостояниеЗаявки = Справочники.СтатусыДокументов.ЗаявкаПокупателяЗакрыт;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИдентСтрокЗаявки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСостояниеСтрокПоДокументу(ДокументСсылка) Экспорт 
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаЗаявкиПокупателя") или 
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаЗаказаПоставщику")  или 
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров")  тогда 
		ТабСтрокДокумента = ОбщегоНазначения.ЗначенияРеквизитовТабличнойЧастиОбъекта(ДокументСсылка,"Товары","СтрокаЗаявки");
		Если ТабСтрокДокумента.Количество() тогда 
			МасивСтрокЗаявок = ТабСтрокДокумента.ВыгрузитьКолонку("СтрокаЗаявки");
			ОбновитьСостоянияВСтрокеЗаявки(МасивСтрокЗаявок);
		Конецесли;
	Конецесли;
	
КонецПроцедуры	

#КонецОбласти


#Область Отказы
Функция ДоступноеКоличествоПоЗаявкеКОтказу(СтрокаЗаявки,МоментВремениДокумента,ПроверятьОстатокПоЗаказу) Экспорт
	ЗапросКОтказу = новый Запрос;
	ЗапросКОтказу.УстановитьПараметр("СтрокаЗаявки",СтрокаЗаявки);
	ЗапросКОтказу.УстановитьПараметр("МоментВремени",новый Граница(МоментВремениДокумента,ВидГраницы.Исключая));
	ЗапросКотказу.УстановитьПараметр("ПроверятьОстатокПоЗаказу",ПроверятьОстатокПоЗаказу);
	
	Если СтрокаЗаявки.ТипПоставки = Перечисления.ТипПоставки.ПополнениеСклада тогда 
		ЗапросКОтказу.Текст = ДоступноеКоличествоПоЗаявкеКОтказу_ПополнениеСклада();	
	Иначеесли  СтрокаЗаявки.ТипПоставки = Перечисления.ТипПоставки.Сток тогда	
		ЗапросКОтказу.Текст =  ДоступноеКоличествоПоЗаявкеКОтказу_Сток();
	иначеесли   СтрокаЗаявки.ТипПоставки = Перечисления.ТипПоставки.Кросс тогда
		ЗапросКОтказу.Текст =  ДоступноеКоличествоПоЗаявкеКОтказу_Кросс();
	Иначе 
		ЗапросКОтказу.Текст = ДоступноеКоличествоПоЗаявкеКОтказу_Прочее();
	КонецЕсли;	
	
	ЗапросКОтказу.УстановитьПараметр("СтрокаЗаявки",СтрокаЗаявки);
	ЗапросКОтказу.УстановитьПараметр("МоментВремени",новый Граница(МоментВремениДокумента,ВидГраницы.Исключая));
	ЗапросКотказу.УстановитьПараметр("ПроверятьОстатокПоЗаказу",ПроверятьОстатокПоЗаказу);
	Результат = ЗапросКОтказу.Выполнить();
	если Результат.Пустой() тогда 
		Возврат 0 
	Иначе 
		Выбор = Результат.Выбрать();
		Выбор.Следующий();
		возврат Выбор.ДоступныйОтказ
	КонецЕсли;	
	
	
КонецФункции



Функция ДоступноеКоличествоПоЗаявкеКОтказу_ПополнениеСклада()
Возврат  "ВЫБРАТЬ ПЕРВЫЕ 1
         |	ВложенныйЗапрос.КоличествоВЗаявке - ВложенныйЗапрос.КоличествоВЗаказе - ВложенныйЗапрос.КоличествоКРазмещению КАК ДоступныйОтказ
         |ИЗ
         |	(ВЫБРАТЬ ПЕРВЫЕ 1
         |		ЗаявкиПокупателейОстатки.КоличествоОстаток КАК КоличествоВЗаявке,
         |		СУММА(ЕСТЬNULL(РазмещенияСтрокЗаказов.Количество, 0)) КАК КоличествоКРазмещению,
         |		ВЫБОР
         |			КОГДА &ПроверятьОстатокПоЗаказу
         |				ТОГДА ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0)
         |			ИНАЧЕ 0
         |		КОНЕЦ КАК КоличествоВЗаказе
         |	ИЗ
         |		РегистрНакопления.ЗаявкиПокупателей.Остатки(&МоментВремени, СтрокаЗаявки = &СтрокаЗаявки) КАК ЗаявкиПокупателейОстатки
         |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментВремени, ) КАК ЗаказыПоставщикамОстатки
         |			ПО ЗаявкиПокупателейОстатки.СтрокаЗаявки = ЗаказыПоставщикамОстатки.СтрокаЗаявки
         |				И (ЗаказыПоставщикамОстатки.КоличествоОстаток > 0)
         |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещенияСтрокЗаказов КАК РазмещенияСтрокЗаказов
         |			ПО ЗаявкиПокупателейОстатки.СтрокаЗаявки = РазмещенияСтрокЗаказов.СтрокаЗаявки
         |				И (РазмещенияСтрокЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
         |				И (РазмещенияСтрокЗаказов.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг)
         |				И (НЕ ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента В (ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровПринят), ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровРазмещен)))
         |	
         |	СГРУППИРОВАТЬ ПО
         |		ЗаявкиПокупателейОстатки.КоличествоОстаток,
         |		ВЫБОР
         |			КОГДА &ПроверятьОстатокПоЗаказу
         |				ТОГДА ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0)
         |			ИНАЧЕ 0
         |		КОНЕЦ) КАК ВложенныйЗапрос";
	
КонецФункции	

Функция ДоступноеКоличествоПоЗаявкеКОтказу_Кросс()
	Возврат "ВЫБРАТЬ ПЕРВЫЕ 1
	        |	ВложенныйЗапрос.КоличествоВЗаявке - ВложенныйЗапрос.КоличествоВЗаказе - ВложенныйЗапрос.КоличествоКРазмещению - ВложенныйЗапрос.КоличествоКОтгрузке КАК ДоступныйОтказ
	        |ИЗ
	        |	(ВЫБРАТЬ ПЕРВЫЕ 1
	        |		ЗаявкиПокупателейОстатки.КоличествоОстаток КАК КоличествоВЗаявке,
	        |		СУММА(ЕСТЬNULL(РазмещенияСтрокЗаказов.Количество, 0)) КАК КоличествоКРазмещению,
	        |		СУММА(ЕСТЬNULL(ТоварыКОтгрузке.Количество, 0)) КАК КоличествоКОтгрузке,
	        |		ВЫБОР
	        |			КОГДА &ПроверятьОстатокПоЗаказу
	        |				ТОГДА ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0)
	        |			ИНАЧЕ 0
	        |		КОНЕЦ КАК КоличествоВЗаказе
	        |	ИЗ
	        |		РегистрНакопления.ЗаявкиПокупателей.Остатки(&МоментВремени, СтрокаЗаявки = &СтрокаЗаявки) КАК ЗаявкиПокупателейОстатки
	        |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментВремени, ) КАК ЗаказыПоставщикамОстатки
	        |			ПО ЗаявкиПокупателейОстатки.СтрокаЗаявки = ЗаказыПоставщикамОстатки.СтрокаЗаявки
	        |				И (ЗаказыПоставщикамОстатки.КоличествоОстаток > 0)
	        |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	        |			ПО ЗаявкиПокупателейОстатки.СтрокаЗаявки = ТоварыКОтгрузке.СтрокаЗаявки
	        |				И (ТоварыКОтгрузке.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг)
	        |				И (ВЫРАЗИТЬ(ТоварыКОтгрузке.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугСборка))
	        |				И (ВЫРАЗИТЬ(ТоварыКОтгрузке.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугСборка))
	        |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещенияСтрокЗаказов КАК РазмещенияСтрокЗаказов
	        |			ПО ЗаявкиПокупателейОстатки.СтрокаЗаявки = РазмещенияСтрокЗаказов.СтрокаЗаявки
	        |				И (РазмещенияСтрокЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	        |				И (РазмещенияСтрокЗаказов.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг)
	        |				И (НЕ ВЫРАЗИТЬ(РазмещенияСтрокЗаказов.Регистратор КАК Документ.ПоступлениеТоваровУслуг).СтатусДокумента В (ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровПринят), ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ПоступлениеТоваровРазмещен)))
	        |	
	        |	СГРУППИРОВАТЬ ПО
	        |		ЗаявкиПокупателейОстатки.КоличествоОстаток,
	        |		ВЫБОР
	        |			КОГДА &ПроверятьОстатокПоЗаказу
	        |				ТОГДА ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0)
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ВложенныйЗапрос";
	
КонецФункции	

Функция ДоступноеКоличествоПоЗаявкеКОтказу_Сток()
	Возврат "ВЫБРАТЬ ПЕРВЫЕ 1
	        |	ЗаявкиПокупателейОстатки.КоличествоОстаток - ЕСТЬNULL(ТоварыКОтгрузке.Количество, 0) КАК ДоступныйОтказ
	        |ИЗ
	        |	РегистрНакопления.ЗаявкиПокупателей.Остатки(&МоментВремени, СтрокаЗаявки = &СтрокаЗаявки) КАК ЗаявкиПокупателейОстатки
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	        |		ПО ЗаявкиПокупателейОстатки.СтрокаЗаявки = ТоварыКОтгрузке.СтрокаЗаявки
	        |			И (ТоварыКОтгрузке.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг)
	        |			И (ВЫРАЗИТЬ(ТоварыКОтгрузке.Регистратор КАК Документ.РеализацияТоваровУслуг).СтатусДокумента = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.РеализацияТоваровУслугСборка))";
	
КонецФункции	



Функция ДоступноеКоличествоПоЗаявкеКОтказу_Прочее()
	
	Возврат  "ВЫБРАТЬ ПЕРВЫЕ 1
	         |	ЗаявкиПокупателейОстатки.КоличествоОстаток КАК ДоступныйОтказ
	         |ИЗ
	         |	РегистрНакопления.ЗаявкиПокупателей.Остатки(&МоментВремени, СтрокаЗаявки = &СтрокаЗаявки) КАК ЗаявкиПокупателейОстатки
	         |ГДЕ
	         |	ЗаявкиПокупателейОстатки.КоличествоОстаток > 0"	
	
	
КонецФункции	

Функция СтрокаЗаявкиЗакрыта(СтрокаЗаявки) Экспорт
	Возврат   СтрокаЗаявки.СостояниеЗаявки = Справочники.СтатусыДокументов.ЗаявкаПокупателяЗакрыт;
	
КонецФункции	


#КонецОбласти

#Область  Контроль_документов
//Процедура ПроверитьНаЗакрытыеСтрокиЗаявок()
//	
//	
//	
//КонецПроцедуры	
Функция ВсеСтрокиЗаявокЗакрыты(МассивСтрокЗаявок)  экспорт
	
КонецФункции	


Функция ПоСтрокеЗаявкиЕстьАктивныйЗаказ(СтрокаЗаявки) Экспорт
Остатки = РегистрыНакопления.ЗаказыПоставщикам.Остатки(,Новый Структура("СтрокаЗаявки",СтрокаЗаявки),"СтрокаЗаявки","Количество");
Если Остатки.Количество() тогда 
	 Возврат ?(Остатки[0].Количество>0,Истина,Ложь);
иначе 
	Возврат Ложь;
КонецЕсли;	
	
	
	
Конецфункции 	

Функция ПоСтрокеЗаявкиЕстьАктивныйРезерв(СтрокаЗаявки) Экспорт
Остатки = РегистрыНакопления.РезервыТоваров.Остатки(,Новый Структура("СтрокаЗаявки",СтрокаЗаявки),"СтрокаЗаявки","Количество");
Если Остатки.Количество() тогда 
	 Возврат ?(Остатки[0].Количество>0,Истина,Ложь);
иначе 
	Возврат Ложь;
КонецЕсли;	
		
КонецФункции
#КонецОбласти