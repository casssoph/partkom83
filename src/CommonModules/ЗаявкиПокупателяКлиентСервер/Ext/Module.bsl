#Область РаботаСоСтрокамиЗаявок
Функция СтрокаЗаявкиЗакрыта(СтрокаЗаявки,Отказ = ложь) Экспорт
	
	ЗаявкаЗакрыта = СтрокаЗаявки.СостояниеЗаявки = Справочники.СтатусыДокументов.ЗаявкаПокупателяЗакрыт;
	Отказ = ЗаявкаЗакрыта;
	 Возврат  ЗаявкаЗакрыта;
	
КонецФункции	

Функция ЗаказЗакрыт(ДокументСсылка) Экспорт
ЗапросЗакрытых  = новый Запрос("ВЫБРАТЬ
                               |	ЗаказПоставщикуТовары.СтрокаЗаявки
                               |ПОМЕСТИТЬ ВТСтрокиДокумента
                               |ИЗ
                               |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
                               |ГДЕ
                               |	ЗаказПоставщикуТовары.Ссылка = &ДокументСсылка
                               |
                               |ОБЪЕДИНИТЬ ВСЕ
                               |
                               |ВЫБРАТЬ
                               |	КорректировкаЗаказаПоставщикуТовары.СтрокаЗаявки
                               |ИЗ
                               |	Документ.КорректировкаЗаказаПоставщику.Товары КАК КорректировкаЗаказаПоставщикуТовары
                               |ГДЕ
                               |	КорректировкаЗаказаПоставщикуТовары.Ссылка = &ДокументСсылка
                               |;
                               |
                               |////////////////////////////////////////////////////////////////////////////////
                               |ВЫБРАТЬ РАЗЛИЧНЫЕ
                               |	МАКСИМУМ(ЗаказыПоставщикамОстатки.СтрокаЗаявки) КАК СтрокаЗаявки
                               |ИЗ
                               |	ВТСтрокиДокумента КАК ВТСтрокиДокумента
                               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
                               |		ПО ВТСтрокиДокумента.СтрокаЗаявки = ЗаказыПоставщикамОстатки.СтрокаЗаявки
                               |			И (ЗаказыПоставщикамОстатки.КоличествоОстаток > 0)
                               |
                               |ИМЕЮЩИЕ
                               |	МАКСИМУМ(ЗаказыПоставщикамОстатки.СтрокаЗаявки) ЕСТЬ NULL")	;
ЗапросЗакрытых.УстановитьПараметр("ДокументСсылка",ДокументСсылка);
Результат  = ЗапросЗакрытых.Выполнить();

Возврат не Результат.Пустой();
Конецфункции	

Процедура ПроверитьНаЗакрытыеСтроки(ТЧТоваров,Отказ = ложь,ТипПоставкиПроверки = Неопределено) Экспорт
	ЗапросЗакрытых = новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ 
	|	ИдентификаторыСтрокЗаявок.Ссылка как СтрокаЗаявки
	|ИЗ
	|	Справочник.ИдентификаторыСтрокЗаявок КАК ИдентификаторыСтрокЗаявок
	|ГДЕ
	|	ИдентификаторыСтрокЗаявок.СостояниеЗаявки = ЗНАЧЕНИЕ(Справочник.СтатусыДокументов.ЗаявкаПокупателяЗакрыт)
	|	И ИдентификаторыСтрокЗаявок.Ссылка В(&МассивСтрокЗаявок)
	| %1 ";
	ЗапросЗакрытых.Текст = СтрШаблон(ТекстЗапроса,?(ТипПоставкиПроверки = Неопределено,"","И ИдентификаторыСтрокЗаявок.ТипПоставки = &ТипПоставки "));
	ЗапросЗакрытых.УстановитьПараметр("МассивСтрокЗаявок",ТЧТоваров.выгрузитьКолонку("СтрокаЗаявки"));
	ЗапросЗакрытых.УстановитьПараметр("ТипПоставки",ТипПоставкиПроверки);	
	
	Результат = ЗапросЗакрытых.Выполнить();
	
	Если не Результат.Пустой() тогда 
		МассивЗакрытыхСтрок = результат.Выгрузить().ВыгрузитьКолонку("СтрокаЗаявки");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе присутствуют закрытые строки ( "+СтрСоединить(МассивЗакрытыхСтрок)+" ), распроведение запрещено",,,,отказ);
	КонецЕсли;	
	
	
КонецПроцедуры	
	
Функция  ПолучитьНаименованиеЗаявки(Артикул,НомерЗаявки,ТипПоставки,Разделитель = ";") Экспорт
Возврат НомерЗаявки +Разделитель+ СокрЛП(Артикул) + Разделитель+СокрЛП(ТипПоставки);		
КонецФункции	

#КонецОбласти

#Область РаботаСрозниянымиЗаявками

Процедура СоздатьОбновитьСТрокуЗаявкиРозничнойЗаявки(ДокументОбъект) Экспорт
ВыборкаСтрокЗаявок = ПолучитьВыборкуСтрокЗаявокКОбновлению(ДокументОбъект);
Пока ВыборкаСтрокЗаявок.Следующий() цикл 
	если ВыборкаСтрокЗаявок.КСозданию тогда 
		  СтрокаЗаявки = Справочники.ИдентификаторыСтрокЗаявок.СоздатьЭлемент();
		  СтрокаЗаявки.Заявка = ПолучитьСсылкуДокументЗаявки(ДокументОбъект);
		  СтрокаЗаявки.Наименование = ПолучитьНаименованиеЗаявки(ВыборкаСтрокЗаявок.Артикул,ДокументОбъект.НомерРозничнойЗаявки,ВыборкаСтрокЗаявок.ТипПоставки);			  
	ИначеЕсли ВыборкаСтрокЗаявок.КОбновлению тогда 
		  СтрокаЗаявки = ВыборкаСтрокЗаявок.СтрокаЗаявки.ПолучитьОбъект();
	иначе 
		Продолжить;
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(СтрокаЗаявки,ВыборкаСтрокЗаявок);
	СтрокаЗаявки.Записать();
	
	Если ВыборкаСтрокЗаявок.КСозданию тогда 
		 НайдСтроки = ДокументОбъект.Товары.НайтиСтроки(новый Структура("IDSite",ВыборкаСтрокЗаявок.IDSite));
		 Для каждого НайдСтрока из НайдСтроки цикл 
			 НайдСтрока.СтрокаЗаявки = СтрокаЗаявки.ссылка;
		КонецЦикла;	 
	Конецесли 	
	
КонецЦикла;	
	
КонецПроцедуры	



Функция ПолучитьСсылкуДокументЗаявки(ДокументОбъект)
	
	Если ДокументОбъект.ЭтоНовый() Тогда 
			СсылкаНаДокумент = ДокументОбъект.ПолучитьСсылкуНового();
			
			Если СсылкаНаДокумент.Пустая() Тогда 
				СсылкаНаДокумент = Документы.ЗаявкаПокупателя.ПолучитьСсылку();
				ДокументОбъект.УстановитьСсылкуНового(СсылкаНаДокумент);
			КонецЕсли;
			
		Иначе
			СсылкаНаДокумент = ДокументОбъект.Ссылка;
		КонецЕсли;

	  Возврат СсылкаНаДокумент
	
КонецФункции	

Функция ПолучитьВыборкуСтрокЗаявокКОбновлению(ДокументОбъект)
ЗапросСтрок = новый запрос;
ЗапросСтрок.Текст = "ВЫБРАТЬ
                    |	ВЫРАЗИТЬ(ЗаявкаПокупателяТовары.СтрокаЗаявки КАК Справочник.ИдентификаторыСтрокЗаявок) КАК СтрокаЗаявки,
                    |	ЗаявкаПокупателяТовары.IDSite КАК IDSite,
                    |	ЗаявкаПокупателяТовары.ЦенаЗакупки КАК ЦенаЗакупки,
                    |	ЗаявкаПокупателяТовары.Цена КАК Цена,
                    |	ЗаявкаПокупателяТовары.ПрайсПоставщика КАК ПрайсПоставщика,
                    |	ИСТИНА КАК РозничнаяЗаявка,
                    |	ЛОЖЬ КАК Виртуальная,
                    |	&СостояниеЗаявки КАК СостояниеЗаявки,
                    |	&ТипПоставки КАК ТипПоставки,
                    |	ЗаявкаПокупателяТовары.Количество КАК Количество,
                    |	ВЫРАЗИТЬ(ЗаявкаПокупателяТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
                    |	&МаршрутДоставки КАК МаршрутДоставки
                    |ПОМЕСТИТЬ ДанныеДокумента
                    |ИЗ
                    |	&Товары КАК ЗаявкаПокупателяТовары
                    |;
                    |
                    |////////////////////////////////////////////////////////////////////////////////
                    |ВЫБРАТЬ
                    |	ДанныеДокумента.СтрокаЗаявки КАК СтрокаЗаявки,
                    |	ДанныеДокумента.IDSite КАК IDSite,
                    |	ДанныеДокумента.ЦенаЗакупки КАК ЦенаЗакупки,
                    |	ДанныеДокумента.Цена КАК Цена,
                    |	ДанныеДокумента.ПрайсПоставщика КАК ПрайсПоставщика,
                    |	ДанныеДокумента.РозничнаяЗаявка КАК РозничнаяЗаявка,
                    |	ДанныеДокумента.Виртуальная КАК Виртуальная,
                    |	ДанныеДокумента.СостояниеЗаявки КАК СостояниеЗаявки,
                    |	ВЫБОР
                    |		КОГДА ДанныеДокумента.СтрокаЗаявки = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.Пустаяссылка)
                    |			ТОГДА ИСТИНА
                    |		ИНАЧЕ ЛОЖЬ
                    |	КОНЕЦ КАК КСозданию,
                    |	ДанныеДокумента.ТипПоставки КАК ТипПоставки,
                    |	ДанныеДокумента.Количество КАК Количество,
                    |	ВЫБОР
                    |		КОГДА ДанныеДокумента.ТипПоставки = ЗНАЧЕНИЕ(Перечисление.ТипПоставки.VMI)
                    |			ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(ДанныеДокумента.ПрайсПоставщика КАК Справочник.ПрайсыПоставщиков).Владелец КАК Справочник.ТорговыеТочки).Владелец
                    |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.Пустаяссылка)
                    |	КОНЕЦ КАК Поставщик,
                    |	ДанныеДокумента.Номенклатура.Артикул КАК Артикул,
                    |	ДанныеДокумента.МаршрутДоставки КАК МаршрутДоставки,
                    |	ВЫБОР
                    |		КОГДА НЕ ДанныеДокумента.СтрокаЗаявки = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокЗаявок.Пустаяссылка)
                    |			ТОГДА ВЫБОР
                    |					КОГДА ДанныеДокумента.ПрайсПоставщика <> ДанныеДокумента.СтрокаЗаявки.ПрайсПоставщика
                    |							ИЛИ ДанныеДокумента.МаршрутДоставки <> ДанныеДокумента.СтрокаЗаявки.МаршрутДоставки
                    |							ИЛИ ДанныеДокумента.СостояниеЗаявки <> ДанныеДокумента.СтрокаЗаявки.СостояниеЗаявки
                    |						ТОГДА ИСТИНА
                    |					ИНАЧЕ ЛОЖЬ
                    |				КОНЕЦ
                    |		ИНАЧЕ ЛОЖЬ
                    |	КОНЕЦ КАК КОбновлению
                    |ИЗ
                    |	ДанныеДокумента КАК ДанныеДокумента"	;
ЗапросСтрок.УстановитьПараметр("Товары",ДокументОбъект.Товары.Выгрузить());
ЗапросСтрок.УстановитьПараметр("ТипПоставки",ТипПоставкиПоСкладу(ДокументОбъект.склад));
ЗапросСтрок.УстановитьПараметр("СостояниеЗаявки",ДокументОбъект.СтатусДокумента);
ЗапросСтрок.УстановитьПараметр("МаршрутДоставки",ДокументОбъект.МаршрутДоставки);


Результат = ЗапросСтрок.Выполнить();
Возврат Результат.Выбрать();

	
КонецФункции


Функция ТипПоставкиПоСкладу(Склад)
	если Склад.СкладVMI тогда 
		ВОзврат ПредопределенноеЗначение("Перечисление.ТипПоставки.VMI");
	иначе 
		Возврат ПредопределенноеЗначение("Перечисление.ТипПоставки.Сток");
	КонецЕсли;	
	
КонецФункции	
#КонецОбласти