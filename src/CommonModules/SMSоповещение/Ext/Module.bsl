
// отправка сообщений
Процедура ВыполнитьРассылку() экспорт
	
	ЖурналSMS = РегистрыСведений.ЖурналSMSоповещения;
	ОтборSMS = Новый Структура("Отправлено",Ложь);
	ПакетSMS = ЖурналSMS.Выбрать(ДобавитьМесяц(ТекущаяДата(),-1),ТекущаяДата(),ОтборSMS); 
	
	СчОшибок = 0;
	СчВсего = 0;
	ОшибкаИтого = "";
	КаталогВыгрузки = КаталогВыгрузкиSMS();
	
	ИспользоватьФильтр = Истина;
	РегионОтбора = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "РегионExpressDelivery1c", Справочники.Регионы.ПустаяСсылка());
	КонтрагентОтбора = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ПокупательExpressDelivery1c", Справочники.Контрагенты.ПустаяСсылка());
	Если РегионОтбора = Справочники.Регионы.ПустаяСсылка() И КонтрагентОтбора = Справочники.Контрагенты.ПустаяСсылка() тогда
		ИспользоватьФильтр = Ложь;
	КонецЕсли;
	
	Пока ПакетSMS.Следующий() Цикл
		
		Попытка
			sms = ПакетSMS.ПолучитьМенеджерЗаписи();
			sms.Прочитать();
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(sms.ВидSMSоповещения) тогда
			Продолжить;
		КонецЕсли;
		
		Если ИспользоватьФильтр тогда
			
			Контра = sms.Получатель_КА;
			Если НЕ ЗначениеЗаполнено(Контра) тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КонтрагентОтбора) тогда
				Если НЕ Контра = КонтрагентОтбора тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РегионОтбора) тогда
				ОсновнаяТорговаяТочка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контра,"ОсновнаяТорговаяТочка");
				Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОсновнаяТорговаяТочка,"Регион") = РегионОтбора тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		sms.Дата_Отправки = ТекущаяДата();
		
		Ошибка = "";
		ИсточникОшибки = "Данные не корректны";
		СчВсего = СчВсего + 1;
		
		Если НЕ ЗначениеЗаполнено(sms.Получатель_НомерТелефона) тогда
			Ошибка = Ошибка + Символы.ПС + "err: не задан номер телефона получателя";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(sms.ТекстSMSоповещения) тогда
			Ошибка = Ошибка + Символы.ПС + "err: не задан текст сообщения";
		КонецЕсли;
		
		ПараметрыНастройки = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(sms.ВидSMSоповещения,"ИспользоватьОповещение1с8,ВидАвтооповещенияПоEmail,ИспользоватьWebСервис");
		Если НЕ ПараметрыНастройки.ИспользоватьWebСервис тогда
			Если НЕ ФайлСуществует(КаталогВыгрузки) тогда                                                                              
				Ошибка = Ошибка + Символы.ПС + "err: каталог выгрузки sms не доступен";
			КонецЕсли;
		КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(ПараметрыНастройки.Отправитель) тогда
		//	Ошибка = Ошибка + Символы.ПС + "err: не задан Отправитель";
		//КонецЕсли;
		Если НЕ ЗначениеЗаполнено(sms.id) тогда
			Ошибка = Ошибка + Символы.ПС + "err: не задан id";
		КонецЕсли;
		
		л_НомерТелефона = ПроверитьНомерТелефона(sms.Получатель_НомерТелефона);
		Если НЕ ЗначениеЗаполнено(л_НомерТелефона) тогда
			Ошибка = Ошибка + Символы.ПС + "err: номер телефона не соответствует спецификации";
		КонецЕсли;
		
		л_ТекстSMSоповещения = ПроверитьТекстSMS(sms.ТекстSMSоповещения);
		Если НЕ ЗначениеЗаполнено(л_ТекстSMSоповещения) тогда
			Ошибка = Ошибка + Символы.ПС + "err: текст SMS не соответствует спецификации";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Ошибка) тогда
			
			ИсточникОшибки = "HTTP-запрос не выполнен";
			
			ПараметрыСообщения = Новый Структура();
			ПараметрыСообщения.Вставить("ID",sms.id);
			ПараметрыСообщения.Вставить("ИспользоватьWebСервис",ПараметрыНастройки.ИспользоватьWebСервис);
			ПараметрыСообщения.Вставить("НомерТелефона",л_НомерТелефона);
			ПараметрыСообщения.Вставить("ТекстSMSоповещения",л_ТекстSMSоповещения);
			ПараметрыСообщения.Вставить("id_web",sms.id_web);
			ПараметрыСообщения.Вставить("ИспользоватьОповещение1с8",ПараметрыНастройки.ИспользоватьОповещение1с8);
			ПараметрыСообщения.Вставить("Источник",sms.Источник);
			ПараметрыСообщения.Вставить("Период",sms.Период);
			
			Ошибка = ОтправитьSMS(ПараметрыСообщения);
			
			sms.id_web = ПараметрыСообщения.id_web;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ошибка) тогда
			
			sms.Ошибка = Истина;
			sms.ОписаниеОшибки = ИсточникОшибки + " " + Ошибка;
			sms.Статус = Перечисления.СтатусыSMSоповещения.Ожидание;
			
			СчОшибок = СчОшибок + 1;
			Ошибка = СокрлП(СчОшибок) + ". Получатель: [" + СокрлП(sms.Получатель_КА) + "]; ID SMS = [" + СокрЛП(sms.id) + "]" + Символы.ПС + Ошибка;
			ОшибкаИтого = ОшибкаИтого + Ошибка;
			
		Иначе
			
			sms.Получатель_НомерТелефона = л_НомерТелефона;
			sms.ТекстSMSоповещения = л_ТекстSMSоповещения;
			sms.Отправлено = Истина;
			sms.Ошибка = Ложь;
			sms.Статус = ?(ПараметрыНастройки.ИспользоватьWebСервис,Перечисления.СтатусыSMSоповещения.Доставлено,Перечисления.СтатусыSMSоповещения.Отправлено);
			sms.ОписаниеОшибки = "";
			
		КонецЕсли;
		
		Попытка
			sms.Записать(Истина);
		Исключение
			ОшибкаИтого = ОшибкаИтого + "err: ошибка записи ID SMS = [" + СокрЛП(sms.id) + "]" + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	Если СчОшибок > 0 И ЗначениеЗаполнено(ПараметрыНастройки.ВидАвтооповещенияПоEmail) тогда
		ОшибкаИтого_Заголовок = "Из [" + СокрЛП(СчВсего) + "] sms, [" + СокрЛП(СчОшибок) + "] отправить не удалось";
		РассылкаСообщенийОбОшибках.ОтправитьЭлектронноеСообщениеБезСохранения(ПараметрыНастройки.ВидАвтооповещенияПоEmail,ОшибкаИтого,ОшибкаИтого_Заголовок);
	КонецЕсли;
	
КонецПроцедуры
Функция ОтправитьSMS(пар_SMS)
	
	Ошибка = "";
	
	Если пар_SMS.ИспользоватьОповещение1с8 Тогда
		
		Филиалы = ПолучитьСписокФилиалов(пар_SMS.Источник);
		
		Если Филиалы.Количество() > 0 тогда
			
			Логисты = ПолучитьСписокЛогистов(Филиалы.ВыгрузитьКолонку("Филиал"));
			
			Для каждого стр из Логисты Цикл
				
				Попытка 
					аЗапись = РегистрыСведений._ИсторияОповещенийПользователей.СоздатьМенеджерЗаписи();
					аЗапись.Период = пар_SMS.Период;
					аЗапись.Кому = стр.Юзер;
					аЗапись.ТекстОповещения = пар_SMS.ТекстSMSоповещения;
					аЗапись.ДатаНачала = Филиалы[0].ДокументСсылкаВремяДоставкиС;
					аЗапись.ДатаОкончания = Филиалы[0].ДокументСсылкаВремяДоставкиПо;
					аЗапись.Системное = Ложь;
					аЗапись.Записать(Истина);
				Исключение
					Ошибка = "Ошибка записи Оповещение1с8: " + ОписаниеОшибки();
				КонецПопытки;
			КонецЦикла;
		
		КонецЕсли;
		
	Иначе
	
		Если пар_SMS.ИспользоватьWebСервис тогда
			
			Если пар_SMS.id_web = 0 тогда
				
				Заголовки = Новый Соответствие;
				Заголовки.Вставить("Authorization", СтрокаАвторизации());
				Заголовки.Вставить("Content-Type", "multipart/form-data;boundary=boundary");
				
				ТелоЗапроса = "";
				Boundary = "boundary";
				
				ТелоЗапроса = ТелоЗапроса + Символы.ПС + СокрЛП("--"+boundary);
				ТелоЗапроса = ТелоЗапроса + Символы.ПС + СокрЛП("Content-Disposition: form-data; name=""phone""");
				ТелоЗапроса = ТелоЗапроса + Символы.ПС + СокрЛП("");
				ТелоЗапроса = ТелоЗапроса + Символы.ПС + СокрЛП(пар_SMS.НомерТелефона);
				
				ТелоЗапроса = ТелоЗапроса + Символы.ПС + СокрЛП("--"+boundary);
				ТелоЗапроса = ТелоЗапроса + Символы.ПС + СокрЛП("Content-Disposition: form-data; name=""msg""");
				ТелоЗапроса = ТелоЗапроса + Символы.ПС + СокрЛП("");
				ТелоЗапроса = ТелоЗапроса + Символы.ПС + СокрЛП(пар_SMS.ТекстSMSоповещения);
				
				ТелоЗапроса = ТелоЗапроса + Символы.ПС + СокрЛП("--"+boundary+"--");
				
				ПараметрыЗапроса = Новый Структура;
				ПараметрыЗапроса.Вставить("Сервер",			АдресХостаSMS());
				ПараметрыЗапроса.Вставить("ТелоЗапроса",	ТелоЗапроса);
				ПараметрыЗапроса.Вставить("Заголовки",		Заголовки);
				ПараметрыЗапроса.Вставить("HTTPМетод",		"post");
				ПараметрыЗапроса.Вставить("АдресРесурса",	"/sms/");
				
				ТекстОшибки = "";
				Результат = ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки);
				
				Если Результат = Неопределено Тогда
					Ошибка = "Ошибка POST-запроса:" + Символы.ПС + ТекстОшибки;
					Возврат Ошибка;
				КонецЕсли;
				
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(Результат);
				ЧтениеJSON.Прочитать();
				СтруктураОтвета = ОбменДаннымиСервер.РазобратьСтруктуруJSON(ЧтениеJSON);
				
				Если ТипЗнч(СтруктураОтвета) = Тип("Структура") тогда
					Если СтруктураОтвета.success = Ложь Тогда
						Ошибка = "Ошибка POST-запроса: success:false";
						Возврат Ошибка;	
					КонецЕсли;
				Иначе
					Ошибка = "Ошибка чтения JSON: " + СокрЛП(Результат);
					Возврат Ошибка;	
				КонецЕсли;
				
				пар_SMS.id_web = СтруктураОтвета.msg;
				
			КонецЕсли;
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Authorization", СтрокаАвторизации());
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("Сервер",		АдресХостаSMS());
			ПараметрыЗапроса.Вставить("ТелоЗапроса",	"");
			ПараметрыЗапроса.Вставить("Заголовки",		Заголовки);
			ПараметрыЗапроса.Вставить("HTTPМетод",		"get");
			ПараметрыЗапроса.Вставить("АдресРесурса",	"/sms/"+Формат(Число(пар_SMS.id_web),"ЧЦ=15; ЧДЦ=; ЧГ="));
			
			ТекстОшибки = "";
			Результат = ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки); 
			
			Если Результат = Неопределено Тогда
				Ошибка = "Ошибка GET-запроса:" + Символы.ПС + ТекстОшибки;
				Возврат Ошибка;
			КонецЕсли;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Результат);
			ЧтениеJSON.Прочитать();
			СтруктураОтвета = ОбменДаннымиСервер.РазобратьСтруктуруJSON(ЧтениеJSON);
			
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура") тогда
				Если СтруктураОтвета.success = Ложь Тогда
					Ошибка = "Ошибка GET-запроса: success:false";
					Возврат Ошибка;	
				КонецЕсли;
			Иначе
				Ошибка = "Ошибка чтения JSON: " + СокрЛП(Результат);
				Возврат Ошибка;	
			КонецЕсли;
			
		Иначе
			
			Попытка
				ИмяВременногоФайлика = ПолучитьИмяВременногоФайла("txt");
				
				ТекстФайла = пар_SMS.НомерТелефона + Символы.ПС + пар_SMS.ТекстSMSоповещения;
				
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
				ТекстовыйДокумент.Записать(ИмяВременногоФайлика, "windows-1251");
				
				Если НЕ ФайлСуществует(ИмяВременногоФайлика) тогда
					Ошибка = "err: ошибка записи файла sms";
				Иначе
					
					т_ИФ = пар_SMS.НомерТелефона + ТекущаяДата();
					т_ИФ = СтрЗаменить(т_ИФ, ".", "");
					т_ИФ = СтрЗаменить(т_ИФ, ":", "");
					т_ИФ = СтрЗаменить(т_ИФ, " ", "_");
					ИмяФайла = т_ИФ+".txt";	
					ПолноеИмяФайла = КаталогВыгрузкиSMS() + ИмяФайла;
					
					УдалитьФайлы(ПолноеИмяФайла);
					ПереместитьФайл(ИмяВременногоФайлика, ПолноеИмяФайла);
					
				КонецЕсли;
				
			Исключение
				Ошибка = "err: ошибка формирования файла sms" + Символы.ПС + ОписаниеОшибки();
				Возврат Ошибка;
			КонецПопытки;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Ошибка;
КонецФункции
Функция ПолучитьСписокФилиалов(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МегаЛогист_МаршрутноеЗаданиеДокументыРеализации.ДокументСсылка.Филиал КАК Филиал,
	|	МИНИМУМ(МегаЛогист_МаршрутноеЗаданиеДокументыРеализации.ДокументСсылка.ВремяДоставкиС) КАК ДокументСсылкаВремяДоставкиС,
	|	МАКСИМУМ(МегаЛогист_МаршрутноеЗаданиеДокументыРеализации.ДокументСсылка.ВремяДоставкиПо) КАК ДокументСсылкаВремяДоставкиПо
	|ИЗ
	|	Документ.МегаЛогист_МаршрутноеЗадание.ДокументыРеализации КАК МегаЛогист_МаршрутноеЗаданиеДокументыРеализации
	|ГДЕ
	|	МегаЛогист_МаршрутноеЗаданиеДокументыРеализации.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	МегаЛогист_МаршрутноеЗаданиеДокументыРеализации.ДокументСсылка.Филиал";
	Запрос.УстановитьПараметр("Ссылка", Источник);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции
Функция ПолучитьСписокЛогистов(пар_ФилиалЫ) Экспорт

	// запросим пользователей по филиалу
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияДополнительныхПравПользователя.Пользователь
	|ПОМЕСТИТЬ Получатели1с
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияДополнительныхПравПользователя
	|ГДЕ
	|	ЗначенияДополнительныхПравПользователя.Право = &Право
	|	И ЗначенияДополнительныхПравПользователя.Значение  = Истина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиФилиалыПользователя.Ссылка,
	|	ПользователиФилиалыПользователя.Филиал,
	|	1 КАК СчФ,
	|	ВЫБОР
	|		КОГДА ПользователиФилиалыПользователя.Филиал В (&Филиал)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СчФвыб
	|ПОМЕСТИТЬ Филиалы
	|ИЗ
	|	Справочник.Пользователи.ФилиалыПользователя КАК ПользователиФилиалыПользователя
	|ГДЕ
	|	ПользователиФилиалыПользователя.Ссылка В (ВЫБРАТЬ Пользователь ИЗ Получатели1с)	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Юзер,
	|	Пользователи.Наименование КАК Наименование,
	|	Пользователи.Код КАК Код,
	|	Пользователи.ИдентификаторПользователяИБ,
	|	СУММА(ЕСТЬNULL(Филиалы.СчФ, 0)) КАК СчФ,
	|	СУММА(ЕСТЬNULL(Филиалы.СчФвыб, 0)) КАК СчФвыб
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Филиалы КАК Филиалы
	|		ПО Пользователи.Ссылка = Филиалы.Ссылка
	|ГДЕ
	|	Пользователи.Ссылка В (ВЫБРАТЬ Пользователь ИЗ Получатели1с)	
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ
	|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойID
	
	|СГРУППИРОВАТЬ ПО
	|	Пользователи.Ссылка,
	|	Пользователи.Наименование,
	|	Пользователи.Код,
	|	Пользователи.ИдентификаторПользователяИБ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ЕСТЬNULL(Филиалы.СчФ, 0)) = 0
	|		ИЛИ СУММА(ЕСТЬNULL(Филиалы.СчФвыб, 0)) > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";

	Запрос.УстановитьПараметр("Право", ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПолучатьОповещенияПоЭД);
	Запрос.УстановитьПараметр("Филиал", пар_ФилиалЫ);
	Запрос.УстановитьПараметр("ПустойID", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("ПользовательИБ");
	Результат.Колонки.Добавить("Мегалогист",Новый ОписаниеТипов("Булево"));
	
	// отберем пользователей по роли
	Метаданные_Роли_Мегалогист = Метаданные.Роли.Мегалогист;
	Для каждого КонченныйЮзвер из Результат цикл
		
		ПользовательИБ = Неопределено;
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(КонченныйЮзвер.ИдентификаторПользователяИБ);
		Исключение
			Продолжить;
		КонецПопытки;
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КонченныйЮзвер.ПользовательИБ = ПользовательИБ;
		КонченныйЮзвер.Мегалогист = ПользовательИБ.Роли.Содержит(Метаданные_Роли_Мегалогист);
		
	КонецЦикла;
	
	Отбор = Новый Структура("Мегалогист",Истина);
	Логисты = Результат.Скопировать(Отбор);
	
	Возврат Логисты;
КонецФункции

Функция ВыполнитьЗапросWebProxy(ПараметрыЗапроса, ТекстОшибки) экспорт      
	// честно стрырено: Худин Обработка VMI_Client.epf
	
	ВозвращаемоеЗначение = Неопределено;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(ПараметрыЗапроса.Сервер,,,,,,,);
		
		HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса.АдресРесурса, ПараметрыЗапроса.Заголовки); 
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса.ТелоЗапроса , КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Если НРег(ПараметрыЗапроса.HTTPМетод) = "get" Тогда
			Ответ = HTTPСоединение.Получить(HTTPЗапрос);
		Иначе
			Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли;
		
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		Если Ответ.КодСостояния = 200 Тогда
			ВозвращаемоеЗначение = ТекстОтвета;
		Иначе
			ТекстОшибки = ТекстОтвета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Сообщить("Ошибка выполнение запроса: "+Ответ.КодСостояния+", "+ТекстОшибки);
		КонецЕсли;
		
		HTTPСоединение = Неопределено;
		HTTPЗапрос = Неопределено;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтрокаАвторизации()
	
	//Логин = "";
	Пароль = "T25KZVd6VTVBR3J0eVhCQkJkdG50TUJOY2tVb2JP";
	//Если Не ЗначениеЗаполнено(Логин) Тогда
	//	Возврат "";
	//КонецЕсли;
	Если Не ЗначениеЗаполнено(Пароль) Тогда
		Возврат "";
	КонецЕсли;
	
	//Возврат СоздатьСтрокуBase64(СокрЛП(Логин)+":"+СокрЛП(Пароль));
	Возврат Пароль;//СоздатьСтрокуBase64(СокрЛП(Пароль));
	
КонецФункции
Функция КаталогВыгрузкиSMS()
	Возврат "\\1csql01-g9\1c_exch\SendSMS\";
КонецФункции
Функция АдресХостаSMS()
	Возврат "sa.part-kom.ru";
КонецФункции

Функция ФайлСуществует(Знач ПутьКФайлу) Экспорт 
	
	Файл = Новый Файл(ПутьКФайлу); 
	Возврат Файл.Существует(); 
	
КонецФункции 

// формирование сообщений
Процедура ПримерЗапускаПроцессаФормированияSMSоповещения() экспорт
	
	пар_Триггер = Справочники.НастройкаSMSоповещения.Триггер_01;
	пар_Источник = Новый Массив;
	пар_Источник.Добавить(Документы.ЗаявкаПокупателя.НайтиПоНомеру("УДИ00000001"));
	пар_Источник.Добавить(Документы.ЗаявкаПокупателя.НайтиПоНомеру("УДИ00000002"));
	
	ЛаунчерSMS(Новый Структура("Триггер,Источник",пар_Триггер,пар_Источник));
	
КонецПроцедуры
Процедура ЛаунчерSMS(пар_Основание) экспорт
	
	л_Триггер = пар_Основание.Триггер;
	массив_Источник = пар_Основание.Источник;
	
	Если НЕ ЗначениеЗаполнено(л_Триггер) ИЛИ массив_Источник.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	Если НЕ л_Триггер.Активен тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТриггера = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(л_Триггер,"ШаблонSMS,Пауза,ВидАвтооповещенияПоEmail,ИспользоватьWebСервис,Префикс");
	л_ШаблонТекстаSMS = ПроверитьТекстSMS(ПараметрыТриггера.ШаблонSMS);
	л_ШаблоныSMS = ПолучитьСписокШаблонов(л_ШаблонТекстаSMS).НайтиСтроки(новый Структура("Выбран",Истина));
	Если НЕ ЗначениеЗаполнено(л_ШаблонТекстаSMS) тогда
		Возврат;
	КонецЕсли;
	
	л_ТекущийМоментВремени = ТекущаяДата();
	
	Если л_Триггер = Справочники.НастройкаSMSоповещения.Триггер_04 ИЛИ
		л_Триггер = Справочники.НастройкаSMSоповещения.Триггер_06 ИЛИ
		л_Триггер = Справочники.НастройкаSMSоповещения.Триггер_07 тогда
		
		Для каждого выб_структура из массив_Источник цикл
			
			л_Расшифровка = "";
			м_Расшифровка = Новый Массив;
			ПовторнаяОтправка = Ложь;
			л_мас_ключей_уже_итого = новый Массив;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЖурналSMSоповещения.Расшифровка
			|ИЗ
			|	РегистрСведений.ЖурналSMSоповещения КАК ЖурналSMSоповещения
			|ГДЕ
			|	ЖурналSMSоповещения.Источник = &Источник
			|	И ЖурналSMSоповещения.ВидSMSоповещения = &ВидSMSоповещения
			|	И ЖурналSMSоповещения.Получатель_КА = &Получатель_КА
			|	И ЖурналSMSоповещения.Получатель_НомерТелефона = &Получатель_НомерТелефона";
			Запрос.УстановитьПараметр("Источник",выб_структура.Источник);
			Запрос.УстановитьПараметр("ВидSMSоповещения",л_Триггер);
			Запрос.УстановитьПараметр("Получатель_КА",выб_структура.Получатель_КА);
			Запрос.УстановитьПараметр("Получатель_НомерТелефона",выб_структура.Получатель_НомерТелефона);
			тчПроверка = Запрос.Выполнить().Выгрузить();
			
			Если тчПроверка.Количество() > 0 тогда
				Для каждого стр из тчПроверка цикл
					л_мас_ключей_уже = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(стр.Расшифровка,";");
					Для каждого эл из л_мас_ключей_уже цикл
						л_мас_ключей_уже_итого.Добавить(Число(эл)); 
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			выб_структура_Расшифровка = выб_структура.Связки.ВыгрузитьКолонку("КлючСвязи");
			Для каждого КлючСвязи из выб_структура_Расшифровка цикл
				Если л_мас_ключей_уже_итого.Найти(КлючСвязи) = Неопределено тогда
					л_Расшифровка = л_Расшифровка + КлючСвязи + ";";
					м_Расшифровка.Добавить(КлючСвязи);
				КонецЕсли;
			КонецЦикла;
			
			Если м_Расшифровка.Количество() = 0 тогда   
				ПовторнаяОтправка = Истина;	
			КонецЕсли;
			
			Если НЕ ПовторнаяОтправка тогда
				
				л_Расшифровка = Лев(л_Расшифровка,СтрДлина(л_Расшифровка)-1);
				
				л_SMS = л_ШаблонТекстаSMS;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	Связки.СтрокаЗаявкиЗаявка КАК Заявка,
				|	Связки.Номенклатура,
				|	Связки.ПричинаОтказа,
				|	Связки.КлючСвязи
				|ПОМЕСТИТЬ Связки
				|ИЗ
				|	&Связки КАК Связки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Связки.Заявка,
				|	Связки.Номенклатура,
				|	Связки.ПричинаОтказа,
				|	Связки.КлючСвязи
				|ИЗ
				|	Связки КАК Связки
				|ГДЕ
				|	Связки.КлючСвязи В(&Ключики)";
				Запрос.УстановитьПараметр("Связки",выб_структура.Связки);
				Запрос.УстановитьПараметр("Ключики",м_Расшифровка);
				л_Связки = Запрос.Выполнить().Выгрузить();
				
				Для каждого шаблончика из л_ШаблоныSMS цикл
					
					ПараметрыШаблончика = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(шаблончика.Ссылка,"Наименование,Алгоритм");
					л_наименование = ПараметрыШаблончика.Наименование;
					л_алгоритм = ПараметрыШаблончика.Алгоритм; 
					
					л_Значение = "";
					Если шаблончика.Ссылка = Справочники.ШаблоныSMSоповещения.Заявка_Номер тогда
						Для каждого заява из л_Связки.ВыгрузитьКолонку("Заявка") цикл
							зн = ПолучитьЗначениеШаблона(заява,л_алгоритм);
							Если СтрНайти(л_Значение,зн) = 0 тогда
								л_Значение = л_Значение + зн +",";	
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли шаблончика.Ссылка = Справочники.ШаблоныSMSоповещения.Номенклатура_Артикул тогда
						Для каждого товар из л_Связки.ВыгрузитьКолонку("Номенклатура") цикл
							зн = ПолучитьЗначениеШаблона(товар,л_алгоритм);
							Если СтрНайти(л_Значение,зн) = 0 тогда
								л_Значение = л_Значение + зн +",";	
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли шаблончика.Ссылка = Справочники.ШаблоныSMSоповещения.ПричинаОтказа_Наименование тогда
						Для каждого причина из л_Связки.ВыгрузитьКолонку("ПричинаОтказа") цикл
							зн = ПолучитьЗначениеШаблона(причина,л_алгоритм);
							Если СтрНайти(л_Значение,зн) = 0 тогда
								л_Значение = л_Значение + зн +",";	
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					л_Значение = Лев(л_Значение,СтрДлина(л_Значение)-1);
					
					л_SMS = СтрЗаменить(л_SMS,"[" + л_наименование + "]",СокрЛП(л_Значение));
				КонецЦикла;
				
				Попытка
					НоваяЗапись = РегистрыСведений.ЖурналSMSоповещения.СоздатьМенеджерЗаписи();
					НоваяЗапись.Период = л_ТекущийМоментВремени + ПараметрыТриггера.Пауза;
					НоваяЗапись.id = ПараметрыТриггера.Префикс + Формат(ПолучитьIdSMS(ПараметрыТриггера.Префикс) + 1,"ЧЦ=" + (12-СтрДлина(ПараметрыТриггера.Префикс)) + "; ЧВН=; ЧГ=");
					НоваяЗапись.Источник = выб_структура.Источник;
					НоваяЗапись.ВидSMSоповещения = л_Триггер;
					НоваяЗапись.Получатель_КА = выб_структура.Получатель_КА;
					НоваяЗапись.Получатель_НомерТелефона = выб_структура.Получатель_НомерТелефона;
					НоваяЗапись.ТекстSMSоповещения = л_SMS;
					НоваяЗапись.Дата_Формирования = л_ТекущийМоментВремени;
					НоваяЗапись.Статус = Перечисления.СтатусыSMSоповещения.Ожидание;
					НоваяЗапись.Расшифровка = л_Расшифровка;
					НоваяЗапись.Записать();
				Исключение	
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Для каждого выб_ссылка из массив_Источник цикл
			
			л_КА = Справочники.Контрагенты.ПустаяСсылка();
			Если ТипЗнч(выб_ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
				л_КА = выб_ссылка;
			ИначеЕсли ТипЗнч(выб_ссылка) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда
				л_КА = ОбщегоНазначения.ПолучитьЗначениеРеквизита(выб_ссылка,"Контрагент");
			ИначеЕсли ТипЗнч(выб_ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				л_КА = ОбщегоНазначения.ПолучитьЗначениеРеквизита(выб_ссылка,"Контрагент");
			ИначеЕсли ТипЗнч(выб_ссылка) = Тип("ДокументСсылка.МегаЛогист_МаршрутноеЗадание") Тогда
				л_КА = ОбщегоНазначения.ПолучитьЗначениеРеквизита(выб_ссылка,"Контрагент");
			КонецЕсли;
			
			л_SMS = л_ШаблонТекстаSMS;
			Для каждого шаблончика из л_ШаблоныSMS цикл
				ПараметрыШаблончика = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(шаблончика.Ссылка,"Наименование,Алгоритм");
				л_наименование = ПараметрыШаблончика.Наименование;
				л_алгоритм = ПараметрыШаблончика.Алгоритм; 
				л_Значение = ПолучитьЗначениеШаблона(выб_ссылка,л_алгоритм);
				
				л_SMS = СтрЗаменить(л_SMS,"[" + л_наименование + "]",СокрЛП(л_Значение));
			КонецЦикла;
			
			Попытка
				НоваяЗапись = РегистрыСведений.ЖурналSMSоповещения.СоздатьМенеджерЗаписи();
				НоваяЗапись.Период = л_ТекущийМоментВремени + ПараметрыТриггера.Пауза;
				НоваяЗапись.id = ПараметрыТриггера.Префикс + Формат(ПолучитьIdSMS(ПараметрыТриггера.Префикс) + 1,"ЧЦ=" + (12-СтрДлина(ПараметрыТриггера.Префикс)) + "; ЧВН=; ЧГ=");
				НоваяЗапись.Источник = выб_ссылка;
				НоваяЗапись.ВидSMSоповещения = л_Триггер;
				НоваяЗапись.Получатель_КА = л_КА;
				НоваяЗапись.Получатель_НомерТелефона = ПолучитьНомерТелефонаКА_ЭД(л_КА);
				НоваяЗапись.ТекстSMSоповещения = л_SMS;
				НоваяЗапись.Дата_Формирования = л_ТекущийМоментВремени;
				НоваяЗапись.Статус = Перечисления.СтатусыSMSоповещения.Ожидание;
				НоваяЗапись.Записать();
			Исключение	
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
// + Пушкин 20180612 XX-1499 вызывается из модуля менеджера РТУ
Процедура СформироватьSMS_ОтказГрупногабарит(пар_Отказы) экспорт
	
	Если пар_Отказы.Количество() = 0 тогда Возврат; КонецЕсли;
	
	ЛаунчерWeb(Истина,пар_Отказы[0].Регистратор,3);
	
	СтруктураДанныхДляСМС = Новый Структура;
	СтруктураДанныхДляСМС.Вставить("Источник",пар_Отказы[0].Регистратор);
	СтруктураДанныхДляСМС.Вставить("Получатель_КА",пар_Отказы[0].Контрагент);
	СтруктураДанныхДляСМС.Вставить("Получатель_НомерТелефона",пар_Отказы[0].Телефон);
	СтруктураДанныхДляСМС.Вставить("Получатель_Имя",пар_Отказы[0].Заказчик);
	СтруктураДанныхДляСМС.Вставить("Связки",пар_Отказы);
	
	пар_Источник = Новый Массив;
	пар_Источник.Добавить(СтруктураДанныхДляСМС);
	
	ЛаунчерSMS(Новый Структура("Триггер,Источник",Справочники.НастройкаSMSоповещения.Триггер_04,пар_Источник));
	
КонецПроцедуры
// - Пушкин 20180612 XX-1499
// + Пушкин 20181012 XX-1507
Процедура СформироватьSMS_ОтказПолный(пар_Отказы) экспорт
	Если пар_Отказы.Количество() = 0 тогда Возврат; КонецЕсли;
	
	ЛаунчерWeb(Ложь,пар_Отказы[0].Регистратор,2);
	
	СтруктураДанныхДляСМС = Новый Структура;
	СтруктураДанныхДляСМС.Вставить("Источник",пар_Отказы[0].Регистратор);
	СтруктураДанныхДляСМС.Вставить("Получатель_КА",пар_Отказы[0].Контрагент);
	СтруктураДанныхДляСМС.Вставить("Получатель_НомерТелефона",пар_Отказы[0].Телефон);
	СтруктураДанныхДляСМС.Вставить("Получатель_Имя",пар_Отказы[0].Заказчик);
	СтруктураДанныхДляСМС.Вставить("Связки",пар_Отказы);
	
	пар_Источник = Новый Массив;
	пар_Источник.Добавить(СтруктураДанныхДляСМС);
	
	ЛаунчерSMS(Новый Структура("Триггер,Источник",Справочники.НастройкаSMSоповещения.Триггер_06,пар_Источник));
	
КонецПроцедуры
Процедура СформироватьSMS_ОтказЧастичный(пар_Отказы) экспорт
	Если пар_Отказы.Количество() = 0 тогда Возврат; КонецЕсли;
	
	ЛаунчерWeb(Ложь,пар_Отказы[0].Регистратор,3);
	
	СтруктураДанныхДляСМС = Новый Структура;
	СтруктураДанныхДляСМС.Вставить("Источник",пар_Отказы[0].Регистратор);
	СтруктураДанныхДляСМС.Вставить("Получатель_КА",пар_Отказы[0].Контрагент);
	СтруктураДанныхДляСМС.Вставить("Получатель_НомерТелефона",пар_Отказы[0].Телефон);
	СтруктураДанныхДляСМС.Вставить("Получатель_Имя",пар_Отказы[0].Заказчик);
	СтруктураДанныхДляСМС.Вставить("Связки",пар_Отказы);
	
	пар_Источник = Новый Массив;
	пар_Источник.Добавить(СтруктураДанныхДляСМС);
	
	ЛаунчерSMS(Новый Структура("Триггер,Источник",Справочники.НастройкаSMSоповещения.Триггер_07,пар_Источник));
	
КонецПроцедуры
// - Пушкин 20181012 XX-1507
Процедура ЛаунчерWeb(пар_Пересчет,пар_РТУ,пар_НомерКоманды)
	
	Если пар_РТУ = Документы.РеализацияТоваровУслуг.ПустаяСсылка() тогда
		Возврат;
	КонецЕсли;	
	
	Если пар_Пересчет тогда
		id_ЭД = ОбщегоНазначения.ПолучитьЗначениеРеквизита(пар_РТУ,"express_delivery_request_id");
		Если ЗначениеЗаполнено(id_ЭД) тогда
			Ответ = РассчитатьУслугуЭД(id_ЭД);
		КонецЕсли;
	КонецЕсли;
	
	мРТУ = Новый Массив;
	мРТУ.Добавить(пар_РТУ);
	
	//Если пар_НомерКоманды = 2 тогда
	//    ПланыОбмена.ОбменПартКом83_Сайт.ExpressDelivery1cCancel(мРТУ);
	//Иначе
	//	ПланыОбмена.ОбменПартКом83_Сайт.ExpressDelivery1cChange(мРТУ);
	//КонецЕсли;
	
	Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(пар_РТУ,"ПолныйОтказ") тогда
		ПланыОбмена.ОбменПартКом83_Сайт.ExpressDelivery1cCancel(мРТУ);
	Иначе
		ПланыОбмена.ОбменПартКом83_Сайт.ExpressDelivery1cChange(мРТУ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьIdSMS(пар_Префикс)
	
	счетчик = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПОДСТРОКА(ЖурналSMSоповещения.id, 0, 3)) КАК счетчик
	|ИЗ
	|	РегистрСведений.ЖурналSMSоповещения КАК ЖурналSMSоповещения
	|ГДЕ 
	|	ПОДСТРОКА(ЖурналSMSоповещения.id, 0, 3) = &Преф";
	
	Запрос.УстановитьПараметр("Преф", пар_Префикс);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 тогда
		счетчик = Результат[0].счетчик
	КонецЕсли;
	
	Возврат счетчик;
КонецФункции
Функция ПолучитьНомерТелефонаКА_ЭД(пар_КА)
	
	искомый_номер_телефона = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ 
	|	КонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|где
	|	КонтактнаяИнформация.Объект = &КА
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонЭкспрессДоставки)
	|	И НЕ КонтактнаяИнформация.НомерТелефона = """"
	|";
	Запрос.УстановитьПараметр("КА", пар_КА);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 тогда
		искомый_номер_телефона = Результат[0].НомерТелефона;
	КонецЕсли;
	
	Возврат искомый_номер_телефона;
	
КонецФункции
Функция ПолучитьЗначениеШаблона(пар_ссылка,пар_алгоритм)
	
	Искомое_Значение = неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = пар_алгоритм;
	Запрос.УстановитьПараметр("Ссылка",пар_ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 тогда
		Искомое_Значение = Результат[0].Искомое_Значение;
	КонецЕсли;
	
	Возврат Искомое_Значение;
КонецФункции

Функция ПроверитьНомерТелефона(пар_НомерТелефона)
	
	л_НомерТелефона = "";
	ПравильныеСимволы = "0123456789";
	Для Сч = 1 по СтрДлина(пар_НомерТелефона) Цикл
		ТекСимв = Сред(пар_НомерТелефона, Сч, 1);
		Если Найти(ПравильныеСимволы, ТекСимв) > 0 Тогда
			л_НомерТелефона = л_НомерТелефона + ТекСимв;
		Иначе
			л_НомерТелефона = л_НомерТелефона + "";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрДлина(л_НомерТелефона) = 11 Тогда
		л_НомерТелефона = "";
	КонецЕсли;
	
	Если Лев(л_НомерТелефона, 1) = "7" ИЛИ Лев(л_НомерТелефона, 1) = "8" Тогда
		л_НомерТелефона = "7" + Прав(л_НомерТелефона,10);
	Иначе
		л_НомерТелефона = "";
	КонецЕсли;
	
	Возврат л_НомерТелефона;
	
КонецФункции
Функция ПроверитьТекстSMS(пар_ТекстSMS)
	л_ТекстSMS = "";
	
	ПравильныеСимволы = "_0123456789[]QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnmЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮйцукенгшщзхъфывапролджэячсмитьбю(){}+-.,:;!?№%?@'";
	Для Сч = 1 по СтрДлина(пар_ТекстSMS) Цикл
		ТекСимв = Сред(пар_ТекстSMS, Сч, 1);
		Если Найти(ПравильныеСимволы, ТекСимв) > 0 Тогда
			л_ТекстSMS = л_ТекстSMS + ТекСимв;
		Иначе
			л_ТекстSMS = л_ТекстSMS + " ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат л_ТекстSMS;
КонецФункции

// настройка SMS
Функция ЗапроситьСписокШаблонов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныSMSоповещения.Ссылка
	|ИЗ
	|	Справочник.ШаблоныSMSоповещения КАК ШаблоныSMSоповещения
	|ГДЕ
	|	ШаблоныSMSоповещения.ПометкаУдаления = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция ВыбратьШаблон() экспорт
	
	желаемый_шаблон = "";
	
	Результат = ЗапроситьСписокШаблонов();
	
	Адрес = Результат.ВыбратьСтроку("Выбери Шаблон");
	Если НЕ Адрес = Неопределено тогда
		желаемый_шаблон = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Адрес.Ссылка,"Наименование");
	КонецЕсли;
	
	Возврат желаемый_шаблон;
КонецФункции
Функция ПолучитьСписокШаблонов(пар_SMS) экспорт
	
	Результат = ЗапроситьСписокШаблонов();
	Результат.Колонки.Добавить("Выбран");
	
	Для каждого стр из Результат цикл
		Если СтрНайти(пар_SMS, "[" + ОбщегоНазначения.ПолучитьЗначениеРеквизита(стр.Ссылка,"Наименование") + "]") > 0 тогда
			стр.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции



// пересчет услуги ЭД
Функция РассчитатьУслугуЭД(пар_express_delivery_request_id, ИспользоватьФильтр = Истина) экспорт
	
	Ответ = Истина;
	
	РубильникВключен = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ВключитьПересчетУслугиЭД", Ложь);
	Если НЕ РубильникВключен тогда
		Возврат Ответ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос_Текст = 
	"ВЫБРАТЬ
	|	Реализация.Ссылка КАК РТУ,
	|	Реализация.Дата КАК РТУ_дата,
	|	Реализация.СуммаДокумента,
	|	Реализация.ЭД_СуммаБесплатнойЭД,
	|	Реализация.ЭД_СтоимостьУслугиЭДрубли,
	|	Реализация.ЭД_СтоимостьУслугиЭДбонусы,
	|	Реализация.ЭД_ВидОплаты,
	|	Реализация.ЭД_init,
	|	Реализация.УчитыватьНДС,
	|	Реализация.СуммаВключаетНДС
	|ПОМЕСТИТЬ Шапки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|ГДЕ
	|	Реализация.express_delivery_request_id = &RequestID
	|	И Реализация.Контрагент = &Покупатель
	|	И Реализация.Контрагент.ОсновнаяТорговаяТочка.Регион = &Регион
	|	И Реализация.Источник = &Источник
	|	И Реализация.ТипДоставки = &ТипДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапки.ЭД_ВидОплаты,
	|	МИНИМУМ(Шапки.РТУ_дата) КАК РТУ_дата
	|ПОМЕСТИТЬ ДатаКорня
	|ИЗ
	|	Шапки КАК Шапки
	|ГДЕ
	|	Шапки.ЭД_init = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Шапки.ЭД_ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.ЦенаСоСкидкой,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.ЭД_Цена_Номенклатура,
	|	РеализацияТоваровУслугТовары.ЭД_Сумма_Услуга,
	|	РеализацияТоваровУслугТовары.КлючСвязи,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.ЭД_Цена_Номенклатура > 0
	|			ТОГДА РеализацияТоваровУслугТовары.ЭД_Цена_Номенклатура
	|		ИНАЧЕ РеализацияТоваровУслугТовары.ЦенаСоСкидкой
	|	КОНЕЦ КАК ЦенаТовара
	|ПОМЕСТИТЬ ТоварыТЧ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				Шапки.РТУ
	|			ИЗ
	|				Шапки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	СУММА(1) КАК Сч,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.ЭД_Цена_Номенклатура) КАК СуммаДо,
	|	СУММА(РеализацияТоваровУслугТовары.ЭД_Сумма_Услуга) КАК СуммаЭД
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТоварыТЧ КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				Шапки.РТУ
	|			ИЗ
	|				Шапки)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Ссылка,
	|	СУММА(1) КАК Сч,
	|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ Услуги
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка В
	|			(ВЫБРАТЬ
	|				Шапки.РТУ
	|			ИЗ
	|				Шапки)
	|	И РеализацияТоваровУслугУслуги.Номенклатура В(&ЭД_Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугУслуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугПричиныОтказов.Ссылка,
	|	СУММА(1) КАК Сч,
	|	СУММА(ЕСТЬNULL(ТоварыТЧ.ЦенаТовара, 0) * РеализацияТоваровУслугПричиныОтказов.Количество) КАК Сумма
	|ПОМЕСТИТЬ Отказы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ПричиныОтказов КАК РеализацияТоваровУслугПричиныОтказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыТЧ КАК ТоварыТЧ
	|		ПО РеализацияТоваровУслугПричиныОтказов.КлючСвязи = ТоварыТЧ.КлючСвязи
	|ГДЕ
	|	РеализацияТоваровУслугПричиныОтказов.Ссылка В
	|			(ВЫБРАТЬ
	|				Шапки.РТУ
	|			ИЗ
	|				Шапки)
	|	И НЕ РеализацияТоваровУслугПричиныОтказов.ПричинаОтмены = &ПричинаОтмены
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугПричиныОтказов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапки.ЭД_ВидОплаты,
	|	Шапки.ЭД_СуммаБесплатнойЭД,
	|	Шапки.ЭД_СтоимостьУслугиЭДрубли,
	|	Шапки.ЭД_СтоимостьУслугиЭДбонусы,
	|	Шапки.РТУ КАК РТУ,
	|	Шапки.РТУ_дата КАК РТУ_дата,
	|	Шапки.ЭД_init,
	|	ВЫБОР
	|		КОГДА ДатаКорня.РТУ_дата = Шапки.РТУ_дата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКорень,
	|	Шапки.УчитыватьНДС,
	|	Шапки.СуммаВключаетНДС,
	|	Шапки.СуммаДокумента,
	|	ЕСТЬNULL(Товары.Сч, 0) КАК Товары_Сч,
	|	ЕСТЬNULL(Товары.Сумма, 0) КАК Товары_Сумма,
	|	ЕСТЬNULL(Товары.СуммаНДС, 0) КАК Товары_СуммаНДС,
	|	ЕСТЬNULL(Товары.СуммаДо, 0) КАК Товары_СуммаДо,
	|	ЕСТЬNULL(Товары.СуммаЭД, 0) КАК Товары_СуммаЭд,
	|	ЕСТЬNULL(Услуги.Сч, 0) КАК Услуги_Сч,
	|	ЕСТЬNULL(Услуги.Сумма, 0) КАК Услуги_Сумма,
	|	ЕСТЬNULL(Услуги.СуммаНДС, 0) КАК Услуги_СуммаНДС,
	|	ЕСТЬNULL(Отказы.Сч, 0) КАК Отказы_Сч,
	|	ЕСТЬNULL(Отказы.Сумма, 0) КАК Отказы_Сумма,
	|	1 КАК Сч
	|ИЗ
	|	Шапки КАК Шапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатаКорня КАК ДатаКорня
	|		ПО Шапки.ЭД_ВидОплаты = ДатаКорня.ЭД_ВидОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО Шапки.РТУ = Товары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Услуги КАК Услуги
	|		ПО Шапки.РТУ = Услуги.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Отказы КАК Отказы
	|		ПО Шапки.РТУ = Отказы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РТУ_дата,
	|	РТУ";
	
	РегионОтбора = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "РегионExpressDelivery1c", Справочники.Регионы.ПустаяСсылка());
	КонтрагентОтбора = РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", "ПокупательExpressDelivery1c", Справочники.Контрагенты.ПустаяСсылка());
	Если РегионОтбора = Справочники.Регионы.ПустаяСсылка() И КонтрагентОтбора = Справочники.Контрагенты.ПустаяСсылка() тогда
		ИспользоватьФильтр = Ложь;
	КонецЕсли;
	Если РегионОтбора = Справочники.Регионы.ПустаяСсылка() ИЛИ НЕ ИспользоватьФильтр тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,"И Реализация.Контрагент.ОсновнаяТорговаяТочка.Регион = &Регион","");
	КонецЕсли;
	Если КонтрагентОтбора = Справочники.Контрагенты.ПустаяСсылка() ИЛИ НЕ ИспользоватьФильтр тогда
		Запрос_Текст = СтрЗаменить(Запрос_Текст,"И Реализация.Контрагент = &Покупатель","");
	КонецЕсли;
	
	у_м = новый Массив;
	ИмяПараметраУслугаДоставки = "Услуга экспресс-доставки (Безнал)";
	у_м.Добавить(РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", ИмяПараметраУслугаДоставки, Константы.УслугаЭкспрессДоставка.Получить()));
	ИмяПараметраУслугаДоставки = "Услуга экспресс-доставки (Нал)";
	у_м.Добавить(РегистрыСведений.НастройкиПодсистем.ЗначениеПараметра("Обмен 1С-Сайт", ИмяПараметраУслугаДоставки, Константы.УслугаЭкспрессДоставка.Получить()));
	
	Запрос.Текст = Запрос_Текст;
	Запрос.УстановитьПараметр("RequestID", пар_express_delivery_request_id);
	Запрос.УстановитьПараметр("Источник", Перечисления.ИсточникиРеализаций.Сайт);
	Запрос.УстановитьПараметр("ТипДоставки", Справочники.ТипыДоставки.ЭкспрессДоставка);
	Запрос.УстановитьПараметр("ЭД_Услуга", у_м);
	Запрос.УстановитьПараметр("ПричинаОтмены", Справочники.СостоянияСтрокДокументов.КрупногабаритувЭД);
	Если НЕ РегионОтбора = Справочники.Регионы.ПустаяСсылка() И ИспользоватьФильтр тогда
		Запрос.УстановитьПараметр("Регион", РегионОтбора);
	КонецЕсли;
	Если НЕ КонтрагентОтбора = Справочники.Контрагенты.ПустаяСсылка() И ИспользоватьФильтр тогда
		Запрос.УстановитьПараметр("Покупатель", КонтрагентОтбора);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() = 0 тогда
		Возврат Ответ;
	КонецЕсли;
	
	ВыборкаИтоги = Выборка.Скопировать();
	ВыборкаИтоги.Свернуть("ЭД_СуммаБесплатнойЭД,ЭД_СтоимостьУслугиЭДрубли,ЭД_СтоимостьУслугиЭДбонусы,ЭД_ВидОплаты","Сч,СуммаДокумента,Товары_Сч,Товары_Сумма,Товары_СуммаНДС,Товары_СуммаДо,Товары_СуммаЭд,Услуги_Сч,Услуги_Сумма,Услуги_СуммаНДС,Отказы_Сч,Отказы_Сумма");
	
	ЭД_СуммаЗаказа = ВыборкаИтоги[0].Товары_Сумма + ВыборкаИтоги[0].Отказы_Сумма; 
	ЭД_Бесплатно = Истина;
	Если ЭД_СуммаЗаказа <  ВыборкаИтоги[0].ЭД_СуммаБесплатнойЭД И  ВыборкаИтоги[0].ЭД_СуммаБесплатнойЭД > 0 тогда
		ЭД_Бесплатно = Ложь;
	КонецЕсли;
	
	АдресКорня = Выборка.Найти(Истина,"ЭтоКорень");
	
	Если ЭД_Бесплатно = Ложь И ВыборкаИтоги[0].ЭД_ВидОплаты = Перечисления.ВидыОплатыЭД.Рубли тогда	
		
		// добавить, если услуги еще нет
		Для каждого срту из  Выборка цикл
			Если срту.ЭтоКорень тогда
				Ответ = ДобавитьУслугу(АдресКорня.РТУ,ВыборкаИтоги[0].ЭД_СтоимостьУслугиЭДрубли,у_м);
				Если Не Ответ тогда
					Прервать;
				КонецЕсли;
			Иначе
				Если срту.Услуги_Сч > 0 тогда
					Ответ = УдалитьУслугу(срту.РТУ,у_м);	
					Если Не Ответ тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если срту.Товары_СуммаЭд > 0 тогда
				Ответ = УбратьРазмазывание(срту.РТУ);	
				Если Не Ответ тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЭД_Бесплатно = Ложь И ВыборкаИтоги[0].ЭД_ВидОплаты = Перечисления.ВидыОплатыЭД.ВЦенеТовара тогда
		
		// размазать стоимость услуги по товару и сделать пересчет тч
		Для каждого срту из  Выборка цикл
			Если срту.ЭтоКорень тогда
				Ответ = Размазать(АдресКорня.РТУ,ВыборкаИтоги[0].ЭД_СтоимостьУслугиЭДрубли);
				Если Не Ответ тогда
					Прервать;
				КонецЕсли;
			Иначе
				Если срту.Товары_СуммаЭд > 0 тогда
					Ответ = УбратьРазмазывание(срту.РТУ);	
					Если Не Ответ тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если срту.Услуги_Сч > 0 тогда
				Ответ = УдалитьУслугу(срту.РТУ,у_м);	
				Если Не Ответ тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// проверить не была ли ранее добавлена услуга - если да - удалить услугу ЭД, для бесплатной доставки и в случае для бонусов
		Если ВыборкаИтоги[0].Услуги_Сч > 0 тогда
			Для каждого срту из  Выборка цикл
				Если срту.Услуги_Сч > 0 тогда
					Ответ = УдалитьУслугу(срту.РТУ,у_м);	
					Если Не Ответ тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// проверить не была ли ранее услуга размазана по товарам - если да - очистить и сделать пересчет тч
		Если ВыборкаИтоги[0].Товары_СуммаЭд > 0 тогда
			Для каждого срту из  Выборка цикл
				Если срту.Товары_СуммаЭд > 0 тогда
					Ответ = УбратьРазмазывание(срту.РТУ);	
					Если Не Ответ тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ВернутьТЧ(пар_Ссылка,пар_ИмяТЧ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ *
	|ИЗ
	|	Документ.РеализацияТоваровУслуг." + пар_ИмяТЧ + " КАК " + пар_ИмяТЧ + "
	|ГДЕ
	|	" + пар_ИмяТЧ + ".Ссылка = &РТУ
	|";
	Запрос.УстановитьПараметр("РТУ",пар_Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
Функция ВернутьУслугу(пар_Ссылка,пар_услуги)
	
	лДоговорКонтрагента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(пар_Ссылка,"ДоговорКонтрагента");
	лВидОплаты = ОбщегоНазначения.ПолучитьЗначениеРеквизита(лДоговорКонтрагента,"ВидОплаты");
	
	Возврат ?(лВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные,пар_услуги[0],пар_услуги[1]);
	
КонецФункции
Функция УдалитьУслугу(пар_Ссылка,пар_услуги)
	
	ответ = Истина;
	признак_изменения = Ложь;
	лУслугаЭД = ВернутьУслугу(пар_Ссылка,пар_услуги);
	
	у_тч = ВернутьТЧ(пар_Ссылка,"Услуги");
	адрес = у_тч.Найти(лУслугаЭД,"Номенклатура");
	Если НЕ адрес = Неопределено тогда
		у_тч.удалить(адрес);
		признак_изменения = Истина;
	КонецЕсли;
	
	Если признак_изменения тогда
		Попытка
			Корень = пар_Ссылка.ПолучитьОбъект();
			Корень.Услуги.Загрузить(у_тч);
			Корень.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ответ = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ответ;
КонецФункции
Функция УбратьРазмазывание(пар_Ссылка)
	Возврат Размазать(пар_Ссылка,0);	
КонецФункции
Функция Размазать(пар_Ссылка,пар_сумма)
	
	ответ = Истина;
	у_тч = ВернутьТЧ(пар_Ссылка,"Товары");
	
	ПараметрыРТУ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(пар_Ссылка,"УчитыватьНДС,СуммаВключаетНДС");
	л_УчитыватьНДС = ПараметрыРТУ.УчитыватьНДС;
	л_СуммаВключаетНДС = ПараметрыРТУ.СуммаВключаетНДС;
	
	у_тч_количество = у_тч.Количество();
	Если у_тч_количество = 0 тогда
		Возврат ответ;
	КонецЕсли;
	
	у_тч_шаг = Цел(пар_сумма / у_тч_количество);
	у_тч_раз = пар_сумма - у_тч_шаг * у_тч_количество;
	
	сч = 0;
	Для каждого стр из у_тч цикл
		сч = сч + 1;
		
		Если стр.ЭД_Цена_Номенклатура = 0 тогда
			стр.ЭД_Цена_Номенклатура = стр.ЦенаСоСкидкой;
		КонецЕсли;
		
		Если сч < у_тч_количество тогда
			стр.ЭД_Сумма_Услуга = у_тч_шаг;
		Иначе
			стр.ЭД_Сумма_Услуга = у_тч_шаг + у_тч_раз;
		КонецЕсли;
		
		СуммаПоСтроке = стр.ЭД_Цена_Номенклатура * стр.Количество;
		Если л_УчитыватьНДС И Не л_СуммаВключаетНДС Тогда
			СуммаПоСтроке = СуммаПоСтроке + УчетНДС.РассчитатьСуммуНДС(СуммаПоСтроке,л_УчитыватьНДС,л_СуммаВключаетНДС,УчетНДС.ПолучитьСтавкуНДС(стр.СтавкаНДС));
		КонецЕсли;
		
		стр.Сумма = СуммаПоСтроке + стр.ЭД_Сумма_Услуга;
		стр.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(стр.Сумма,л_УчитыватьНДС,л_СуммаВключаетНДС,УчетНДС.ПолучитьСтавкуНДС(стр.СтавкаНДС));		
		стр.ЦенаСоСкидкой = стр.Сумма / стр.Количество;
		
	КонецЦикла;
	
	Попытка
		Корень = пар_Ссылка.ПолучитьОбъект();
		Корень.Товары.Загрузить(у_тч);
		Корень.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ответ = Ложь
	КонецПопытки;
	
	Возврат ответ;
КонецФункции
Функция ДобавитьУслугу(пар_ссылка,пар_сумма,пар_услуги)
	
	ответ = Истина;
	
	лУслугаЭД = ВернутьУслугу(пар_Ссылка,пар_услуги);
	
	у_тч = ВернутьТЧ(пар_Ссылка,"Услуги");
	адрес = у_тч.Найти(лУслугаЭД,"Номенклатура");
	Если НЕ адрес = Неопределено тогда
		у_тч.Удалить(адрес);
	КонецЕсли;
	
	Попытка
		Корень = пар_Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = у_тч.Добавить();
		НоваяСтрока.Номенклатура = лУслугаЭД;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Цена = пар_сумма;
		НоваяСтрока.Сумма = пар_сумма;
		
		НоваяСтрока.СтавкаНДС = ?(ОбщегоНазначения.ПолучитьЗначениеРеквизита(пар_Ссылка,"СуммаВключаетНДС"), ОбщегоНазначения.ПолучитьЗначениеРеквизита(лУслугаЭД,"СтавкаНДС"), Перечисления.СтавкиНДС.БезНДС);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Корень);
		
		Корень.Услуги.Загрузить(у_тч);
		Корень.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ответ = Ложь
	КонецПопытки;
	
	Возврат ответ;
КонецФункции
