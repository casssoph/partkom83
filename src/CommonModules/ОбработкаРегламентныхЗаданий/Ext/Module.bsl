
Процедура ЗаполнитьПараметрыРегламентногоЗадания(вхОбработкаОбъект, вхРегламентноеЗадание)
	
	лКлючАлгоритма = "ОбщийМодуль_ОбработкаРегламентныхЗаданий_ЗаполнитьПараметрыРегламентногоЗадания";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////

	лОбъектМетаданных = вхОбработкаОбъект.Метаданные();

	// шапка
	Для Каждого лСтрокаШапка Из вхРегламентноеЗадание.Шапка цикл
		лИмяРеквизита = лСтрокаШапка.ИмяРеквизита; 
		Если лОбъектМетаданных.Реквизиты.Найти(лИмяРеквизита) = Неопределено тогда
			Продолжить; 
		КонецЕсли;
		вхОбработкаОбъект[лИмяРеквизита] = лСтрокаШапка.ЗначениеРеквизита;
	КонецЦикла;
	
	// табличные части
	Для Каждого лСтрокаТабличныеЧасти Из вхРегламентноеЗадание.ТабличныеЧасти цикл
		лИмяТабличнойЧасти = лСтрокаТабличныеЧасти.ИмяТабличнойЧасти;
		Если (лОбъектМетаданных.ТабличныеЧасти.Найти(лИмяТабличнойЧасти) = Неопределено) тогда
			Продолжить;
		КонецЕсли;
		лЗначениеТабличнойЧасти = лСтрокаТабличныеЧасти.ЗначениеТабличнойЧасти.Получить();
		Если ТипЗнч(лЗначениеТабличнойЧасти) <> Тип("ТаблицаЗначений") тогда
			Продолжить;
		КонецЕсли;
		вхОбработкаОбъект[лИмяТабличнойЧасти].Загрузить(лЗначениеТабличнойЧасти);		
	КонецЦикла;	
	
КонецПроцедуры

Процедура РегламентныйЗапускОбработки(вхРегламентноеЗадание) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_ОбработкаРегламентныхЗаданий_РегламентныйЗапускОбработки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	
	Если НЕ ЗначениеЗаполнено(вхРегламентноеЗадание) тогда	
		ВызватьИсключение "Не заполнен параметр регламентного задания.";
	КонецЕсли;
	
	Если ТипЗнч(вхРегламентноеЗадание) <> Тип("СправочникСсылка.РегламентныеЗадания") тогда
		ВызватьИсключение "Неправильный параметр регламентного задания.";
	КонецЕсли;
	
	 
	
	лТипОбработки = вхРегламентноеЗадание.ТипОбработки;
	Если (лТипОбработки = 0) тогда
		
		лИмяОбработки = вхРегламентноеЗадание.ИмяОбработки;
		Если ПустаяСтрока(лИмяОбработки) тогда
			// 31.05.19 Строганов Роман > 
			РегистрыСведений.ИсторияРегламентныхЗаданий.ЗафиксироватьОшибкуРегламентногоЗадания(вхРегламентноеЗадание, "Не указано имя обработки регламентного задания."); 
			// 31.05.19 Строганов Роман <
			ЗарегистрироватьОшибкуРегламентногоЗадания(вхРегламентноеЗадание,"Не указано имя обработки регламентного задания.");	
		КонецЕсли;		
		
		лОбъектМетаданных = Метаданные.Обработки.Найти(лИмяОбработки);
		Если (лОбъектМетаданных = Неопределено) тогда
			// 31.05.19 Строганов Роман > 
			РегистрыСведений.ИсторияРегламентныхЗаданий.ЗафиксироватьОшибкуРегламентногоЗадания(вхРегламентноеЗадание, "Не найден объект метаданных обработки."); 
			// 31.05.19 Строганов Роман <
			ЗарегистрироватьОшибкуРегламентногоЗадания(вхРегламентноеЗадание,"Не найден объект метаданных обработки.");	
		КонецЕсли;
		
		лОбъект = Обработки[лИмяОбработки].Создать();
		ЗаполнитьПараметрыРегламентногоЗадания(лОбъект, вхРегламентноеЗадание);
		
		// 31.05.19 Строганов Роман > 
		РегистрыСведений.ИсторияРегламентныхЗаданий.ЗафиксироватьЗапускРегламентногоЗадания(вхРегламентноеЗадание); 
		// 31.05.19 Строганов Роман <
		Попытка
			лОбъект.ВыполнитьРегламентноеЗадание();
		Исключение
			// 31.05.19 Строганов Роман > 
			РегистрыСведений.ИсторияРегламентныхЗаданий.ЗафиксироватьОшибкуРегламентногоЗадания(вхРегламентноеЗадание,ОписаниеОшибки()); 
			// 31.05.19 Строганов Роман <
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
	Иначе
		
		лДвоичныеДанные = вхРегламентноеЗадание.ХранилищеВнешнейОбработки.Получить();
		лИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
		лДвоичныеДанные.Записать(лИмяВременногоФайла);
		Попытка
			// 31.05.19 Строганов Роман > 
			РегистрыСведений.ИсторияРегламентныхЗаданий.ЗафиксироватьЗапускРегламентногоЗадания(вхРегламентноеЗадание); 
			// 31.05.19 Строганов Роман <
			лОбъект = ВнешниеОбработки.Создать(лИмяВременногоФайла, Ложь);
			ЗаполнитьПараметрыРегламентногоЗадания(лОбъект, вхРегламентноеЗадание);
			
			лОбъект.ВыполнитьРегламентноеЗадание();
			УдалитьФайлы(лИмяВременногоФайла);
		Исключение
			УдалитьФайлы(лИмяВременногоФайла);
			
			// 31.05.19 Строганов Роман > 
			РегистрыСведений.ИсторияРегламентныхЗаданий.ЗафиксироватьОшибкуРегламентногоЗадания(вхРегламентноеЗадание,ОписаниеОшибки()); 
			// 31.05.19 Строганов Роман <
			ЗарегистрироватьОшибкуРегламентногоЗадания(вхРегламентноеЗадание,ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	// 31.05.19 Строганов Роман > 
	РегистрыСведений.ИсторияРегламентныхЗаданий.ЗафиксироватьЗавершениеРегламентногоЗадания(вхРегламентноеЗадание); 
	// 31.05.19 Строганов Роман <
		
КонецПроцедуры

Процедура ОбменCRM() Экспорт
	// Вставить содержимое обработчика.
    МодульОбменаCRM.ОбменCRM();
КонецПроцедуры

#Область Лог_Ошибок     
Процедура ЗарегистрироватьОшибкуРегламентногоЗадания(РегламентноеЗадание,ОписаниеОшибки);
	ТекстОшибки = ОбщегоНазначения.СформироватьТекстСообщения(ОписаниеОшибки);
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегламентноеЗадание,"ЗаписыватьЛогОшибок,СобытиеОшибки"); 
	
	Если Реквизиты.ЗаписыватьЛогОшибок тогда 
		Если Не ЗначениеЗаполнено(Реквизиты.СобытиеОшибки) тогда 
			СобытиеОшибки = ПредопределенноеЗначение("Справочник.СобытияДляОтправкиЭлектронныхПисем.ОшибкаРегламентногоЗадания")
		иначе 
			СобытиеОшибки = Реквизиты.СобытиеОшибки;
		КонецЕсли;
		
		СтруктураПараметров = КритическиеСобытияПовтИсп.ТекущиеПараметрыРегламентногоЗадания(РегламентноеЗадание);
		КритическиеСобытияСервер.ЗарегистрироватьКритическоеСобытие(РегламентноеЗадание,СобытиеОшибки,ОписаниеОшибки,СтруктураПараметров);
	КонецЕсли;
	
	//ЗаписьЖурналаРегистрации(
	 ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры	

#КонецОбласти