Функция ВремяОтгрузкиПоМаршруту(МаршрутДоставки, ДатаОтгрузки)
	
	Если ЗначениеЗаполнено(МаршрутДоставки) Тогда
		ДеньНедели = ДеньНедели(ДатаОтгрузки);
		Если ДеньНедели = 6 Тогда
			ВремяОтгрузки = МаршрутДоставки.ВремяОтгрузкиСуббота;
		ИначеЕсли ДеньНедели = 7 Тогда
			ВремяОтгрузки = МаршрутДоставки.ВремяОтгрузкиВоскресенье;
		Иначе
			ВремяОтгрузки = МаршрутДоставки.ВремяОтгрузкиБудни;
		КонецЕсли;
	Иначе
		ВремяОтгрузки = Неопределено;
	КонецЕсли;
	
	Возврат ВремяОтгрузки;
	
КонецФункции

Функция ДатаСдачиЗадания(ВремяОтгрузки, МаршрутДоставки)
	
	Если ЗначениеЗаполнено(МаршрутДоставки) Тогда
		ДатаСдачиЗадания = ВремяОтгрузки + МаршрутДоставки.КоличествоДнейДоставки*60*60*24;
	Иначе
		ДатаСдачиЗадания = ВремяОтгрузки + 1;
	КонецЕсли;
	
	Возврат ДатаСдачиЗадания;
	
КонецФункции

#Область cancel
Процедура ОтправитьСМСОтмена(МаршрутноеЗадание) Экспорт
	
	пар_Триггер = Справочники.НастройкаSMSоповещения.Триггер_10;
	пар_Источник = Новый Массив;
	пар_Источник.Добавить(МаршрутноеЗадание);
	
	SMSоповещение.ЛаунчерSMS(Новый Структура("Триггер,Источник",пар_Триггер,пар_Источник));

КонецПроцедуры

Процедура ЭкспрессДоставка_cancel(МаршрутноеЗадание) Экспорт
	
	лКлючАлгоритма = "ОбщийМодуль_Мегалогист_Партком_ЭкспрессДоставка_cancel";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
		
	МассивРеализаций = Новый Массив();
	ОтправлятьСМС=Истина;
	
	Для Каждого СтрокаРеализации из МаршрутноеЗадание.ДокументыРеализации цикл
		Документ = СтрокаРеализации.ДокументСсылка.ПолучитьОбъект();
		Если НЕ Документ.флНеВыгружатьВТопЛог тогда
			ОтправлятьСМС=Ложь;
			Продолжить;
		КонецЕсли;		
		Документ.ПометкаУдаления = Истина;
		
		//Валиахметов http://jira.part-kom.ru/browse/XX-2919 06.08.2019
		Документ.ДополнительныеСвойства.Вставить("НеОбрабатыватьМЗПриОтменеРТУ");
		//Конец Валиахметов http://jira.part-kom.ru/browse/XX-2919 06.08.2019
		
		Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
		МассивРеализаций.Добавить(СтрокаРеализации.ДокументСсылка);
	КонецЦикла;	
	
	Если ОтправлятьСМС тогда
		ОтправитьСМСОтмена(МаршрутноеЗадание.Ссылка);
	КонецЕсли;	
	
	// + Пушкин 20181227
	ПланыОбмена.ОбменПартКом83_Сайт.ExpressDelivery1cCancel(МассивРеализаций);
	// - Пушкин 20181227
	
КонецПроцедуры

Функция ЗагружаемыеОбъекты_cancel(МаршрутноеЗадание)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Ссылка КАК Документ
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	                      |	И РеализацияТоваровУслуг.express_delivery_request_id = &RequestID
	                      |	И РеализацияТоваровУслуг.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацииЭкспрессДоставки.ВыписанаРеализация)");
	Запрос.УстановитьПараметр("RequestID", МаршрутноеЗадание.express_delivery_request_id);
	Результат = Запрос.Выполнить();
	 			
	Возврат Результат.Выбрать();
	
КонецФункции
#КонецОбласти

#Область add
Процедура ОтправитьСМСВРаботе(МаршрутноеЗадание) Экспорт
	
	пар_Триггер = Справочники.НастройкаSMSоповещения.Триггер_11;
	пар_Источник = Новый Массив;
	пар_Источник.Добавить(МаршрутноеЗадание);
	
	SMSоповещение.ЛаунчерSMS(Новый Структура("Триггер,Источник",пар_Триггер,пар_Источник));

КонецПроцедуры	

Процедура ЭкспрессДоставка_add(МаршрутноеЗадание) Экспорт
	
	Если МаршрутноеЗадание.ДокументыРеализации.Количество()=1 тогда
		ОтправитьСМСВРаботе(МаршрутноеЗадание);
	КонецЕсли;	
	
КонецПроцедуры
#КонецОбласти

#Область confirm
Процедура ОтправитьСМССборка(МаршрутноеЗадание) Экспорт
	
	пар_Триггер = Справочники.НастройкаSMSоповещения.Триггер_12;
	пар_Источник = Новый Массив;
	пар_Источник.Добавить(МаршрутноеЗадание);
	
	SMSоповещение.ЛаунчерSMS(Новый Структура("Триггер,Источник",пар_Триггер,пар_Источник));

КонецПроцедуры	

Процедура ЭкспрессДоставка_logist_confirm(МаршрутныйЛист) Экспорт
	
	// + Пушкин 20190719 XX-2440
	лКлючАлгоритма = "Мегалогист_Партком_ЭкспрессДоставка_logist_confirm";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		Выполнить(лЗамена);
		Возврат;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////
	// - Пушкин 20190719 XX-2440
	
	УстановитьСтоимостьДоставки = Истина;
	Error=Ложь;
	
	МассивРеализаций = Новый Массив();
	Для Каждого СтрокаЗадания из МаршрутныйЛист.МаршрутныеЗадания цикл
	    МаршрутноеЗадание=СтрокаЗадания.ДокументСсылка;
		ОтправитьСМССборка(МаршрутноеЗадание);
		Для Каждого СтрокаРеализации из МаршрутноеЗадание.ДокументыРеализации цикл
			МассивРеализаций.Добавить(СтрокаРеализации.ДокументСсылка);
		КонецЦикла;			
	КонецЦикла;
	
	// + Пушкин 20181220
	ПланыОбмена.ОбменПартКом83_Сайт.ExpressDelivery1cConfirm(МассивРеализаций);
	// - Пушкин 20181220
	
	ВыборкаПоСкладам = ЗагружаемыеОбъекты_confirm(МассивРеализаций);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Пока ВыборкаПоСкладам.Следующий() Цикл
		Документ = Документы.СлужебноеЗадание.СоздатьДокумент();
		ЗаполнитьДокументСлужебноеЗадание(МаршрутныйЛист, Документ, ВыборкаПоСкладам);
		
		// + Пушкин 20190719 XX-2440
		Документ.Записать();
		// - Пушкин 20190719 XX-2440
		
	    ВыборкаПоРеализациям = ВыборкаПоСкладам.Выбрать();
		Пока ВыборкаПоРеализациям.Следующий() Цикл
			НоваяСтрока = Документ.Покупатели.Добавить();
			НоваяСтрока.Реализация = ВыборкаПоРеализациям.ДокументРеализации;
			НоваяСтрока.ОрганизацияОплаты = НоваяСтрока.Реализация.Организация;
			НоваяСтрока.ТорговаяТочка = НоваяСтрока.Реализация.ТорговаяТочка;
			НоваяСтрока.Регион = НоваяСтрока.ТорговаяТочка.Регион;
			ПровестиДокументРеализацииКакПодтвержденный(ВыборкаПоРеализациям.ДокументРеализации, УстановитьСтоимостьДоставки, МаршрутноеЗадание);
		КонецЦикла;	
	
		Документ.Записать();
		
	КонецЦикла;	
	
	Если Error Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры

Процедура Доставка_logist_confirm(МаршрутныйЛист) Экспорт
	
	Error=Ложь;
	
	МассивРеализаций = Новый Массив();
	Для Каждого СтрокаЗадания из МаршрутныйЛист.МаршрутныеЗадания цикл
	    МаршрутноеЗадание=СтрокаЗадания.ДокументСсылка;
		Для Каждого СтрокаРеализации из МаршрутноеЗадание.ДокументыРеализации цикл
			МассивРеализаций.Добавить(СтрокаРеализации.ДокументСсылка);
		КонецЦикла;			
	КонецЦикла;
		
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Для Каждого ДокументРеализации из МассивРеализаций цикл
		
		Документ = ДокументРеализации.ПолучитьОбъект();
		Документ.Статус = Перечисления.СтатусыРеализацииЭкспрессДоставки.ВыписанаРеализация;
		Документ.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка;
		Документ.МаршрутДоставки = ПолучитьМаршрутДоставки(ДокументРеализации);
		Документ.флНеВыгружатьВТопЛог = Ложь;
			
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Документ.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;	
		
	КонецЦикла;	
	
	Если Error Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры

Функция ЗагружаемыеОбъекты_confirm(МассивРеализаций)
	
	лКлючАлгоритма = "ОбщийМодуль_Мегалогист_Партком_ЗагружаемыеОбъекты_confirm";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                    //Валиахметов http://jira.part-kom.ru/browse/XX-2716 
						//Сделал группировку по физич. складу, а не по складу, чтобы РТУ группировались в СЗ по физич. складу 
						  |	РеализацияТоваровУслуг.Склад.ФизическийСклад КАК Склад,
	                    //Конец Валиахметов http://jira.part-kom.ru/browse/XX-2716 
						  |	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализации,
	                      |	РеализацияТоваровУслуг.Организация КАК Организация,
	                      |	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	                      |	РеализацияТоваровУслуг.ТорговаяТочка КАК ТорговаяТочка,
	                      |	РеализацияТоваровУслуг.Филиал КАК Филиал,
	                      |	РеализацияТоваровУслуг.Дата КАК ДатаОтгрузки
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	                      |	И РеализацияТоваровУслуг.Ссылка В(&МассивРеализаций)
	                      |ИТОГИ
	                      |	МАКСИМУМ(ДокументРеализации),
	                      |	МАКСИМУМ(Организация),
	                      |	МАКСИМУМ(Контрагент),
	                      |	МАКСИМУМ(ТорговаяТочка),
	                      |	МАКСИМУМ(Филиал),
	                      |	МИНИМУМ(ДатаОтгрузки)
	                      |ПО
	                      |	Склад");
	Запрос.УстановитьПараметр("МассивРеализаций", МассивРеализаций);
	Результат = Запрос.Выполнить();
		
	Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Процедура ЗаполнитьДокументСлужебноеЗадание(МаршрутныйЛист, Документ, ВыборкаПоСкладам)
	
	Документ.Дата = ТекущаяДата();
	Документ.Авто = Истина;
	Документ.express_delivery_request_id = ВыборкаПоСкладам.ДокументРеализации.express_delivery_request_id;
	Документ.Организация = ВыборкаПоСкладам.Организация;
	Документ.Филиал = ВыборкаПоСкладам.Филиал;
	Документ.Склад = ВыборкаПоСкладам.Склад;
	//Документ.МаршрутДоставки = МаршрутноеЗадание.МаршрутДоставки;
	Документ.Водитель = МаршрутныйЛист.Курьер;
	//Документ.ТранспортнаяКомпания = Документ.Водитель.ТранспортнаяКомпания;
	Документ.ТипДоставки = Справочники.ТипыДоставки.ЭкспрессДоставка;
	Документ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Документ.ДатаОтгрузки = ВыборкаПоСкладам.ДатаОтгрузки;
	Документ.ВремяОтгрузки =  ВремяОтгрузкиПоМаршруту(Документ.МаршрутДоставки, Документ.ДатаОтгрузки);
	Документ.ДатаСдачиЗадания = ДатаСдачиЗадания(Документ.ДатаОтгрузки, Документ.МаршрутДоставки);
	
КонецПроцедуры

Функция ПолучитьМаршрутДоставки(ДокументРеализации)
	
	лКлючАлгоритма = "ОбщийМодуль_Мегалогист_Партком_ПолучитьМаршрутДоставки";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////
	
	МаршрутДоставки=Неопределено;
	
	Регион=	ДокументРеализации.Контрагент.ОсновнаяТорговаяТочка.Регион;
	Если НЕ ЗначениеЗаполнено(Регион) тогда
		Сообщить("Не определен регион для контрагента:" +ДокументРеализации.Контрагент);
		Возврат МаршрутДоставки;
	КонецЕсли;
	ГруппаМаршрутов=Регион.ГруппаМаршрутов;
	Если НЕ ЗначениеЗаполнено(ГруппаМаршрутов) тогда
		Сообщить("Не определена группа маршрутов для региона:" +Регион);
		Возврат МаршрутДоставки;
	КонецЕсли;
	
	Если НЕ ГруппаМаршрутов.ЭтоГруппа тогда
		Возврат ГруппаМаршрутов;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	МаршрутыДоставки.Ссылка
	             |ИЗ
	             |	Справочник.МаршрутыДоставки КАК МаршрутыДоставки
	             |ГДЕ
	             |	МаршрутыДоставки.Ссылка В ИЕРАРХИИ(&Родитель)
	             |	И НЕ МаршрутыДоставки.ПометкаУдаления
	             |	И НЕ МаршрутыДоставки.ЭтоГруппа
	             |	И МаршрутыДоставки.флЭД
				 
	// + Пушкин 20090528 XX-2440 
				 
				 |УПОРЯДОЧИТЬ ПО
				 |	МаршрутыДоставки.флТакси " + ?(ДокументРеализации_Водитель_ВодительТакси(ДокументРеализации) = Истина,"УБЫВ","") + "
				 |";
	
	Запрос.УстановитьПараметр("Родитель",ГруппаМаршрутов);
	
	// - Пушкин 20090528 XX-2440
	
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий()тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Возврат МаршрутДоставки
	
КонецФункции

// + Пушкин 20090528 XX-2440
Функция ДокументРеализации_Водитель_ВодительТакси(пар_РТУ)
	
	лКлючАлгоритма = "ОбщийМодуль_Мегалогист_Партком_ДокументРеализации_Водитель_ВодительТакси";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////
	
	л_фл = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СлужебноеЗаданиеПокупатели.Ссылка,
	|	СлужебноеЗаданиеПокупатели.Ссылка.Водитель,
	|	ЕСТЬNULL(СлужебноеЗаданиеПокупатели.Ссылка.Водитель.ВодительТакси, ЛОЖЬ) КАК ЭтоВодительТакси,
	|	СлужебноеЗаданиеПокупатели.Реализация,
	|	СлужебноеЗаданиеПокупатели.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.СлужебноеЗадание.Покупатели КАК СлужебноеЗаданиеПокупатели
	|ГДЕ
	|	СлужебноеЗаданиеПокупатели.Реализация = &Реализация
	|	И СлужебноеЗаданиеПокупатели.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И НЕ СлужебноеЗаданиеПокупатели.Ссылка.Водитель = ЗНАЧЕНИЕ(Справочник.Водители.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";

	Запрос.УстановитьПараметр("Реализация", пар_РТУ);

	тчРезультат = Запрос.Выполнить().Выгрузить();
	Если тчРезультат.Количество() > 0 Тогда
		л_фл = тчРезультат[0].ЭтоВодительТакси;
	КонецЕсли;
	
	Возврат л_фл;
	
КонецФункции
// - Пушкин 20090528 XX-2440

Процедура ПровестиДокументРеализацииКакПодтвержденный(ДокументРеализации, УстановитьСтоимостьДоставки, МаршрутноеЗадание)
	
	Документ = ДокументРеализации.ПолучитьОбъект();
	Документ.Статус = Перечисления.СтатусыРеализацииЭкспрессДоставки.ВыписанаРеализация;
	Документ.СтатусДокумента = Справочники.СтатусыДокументов.РеализацияТоваровУслугСборка;
	Документ.МаршрутДоставки = ПолучитьМаршрутДоставки(ДокументРеализации);
	Документ.флНеВыгружатьВТопЛог = Ложь;
			
	Попытка
		Документ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Документ.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;	
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьМассивФилиалов()
	
	МассивФилиалов=Новый Массив;
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	МегаЛогист_ФилиалыВыписки.Филиал
	             |ИЗ
	             |	РегистрСведений.МегаЛогист_ФилиалыВыписки КАК МегаЛогист_ФилиалыВыписки";
				 
	МассивФилиалов=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Филиал");
	
	Возврат МассивФилиалов
	
КонецФункции

Функция ПолучитьМЗ()
					
	ТекДата=ТекущаяДата();
	ТекВремя=Дата('00010101') + (ТекДата-НачалоДня(ТекДата));
	
	//Временное ограничение только на Карпова М. Г. (рег.развитие)
	//N0021506
	//ТекКонтрагент=Справочники.Контрагенты.НайтиПоКоду("N0021506");
	//Ограничение по филиалам
	МассивФилиалов=ПолучитьМассивФилиалов();
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	МегаЛогист_МаршрутноеЗадание.Ссылка
	             |ИЗ
	             |	Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
	             |ГДЕ
	             |	МегаЛогист_МаршрутноеЗадание.ЭкспрессДоставка
	             |	И МегаЛогист_МаршрутноеЗадание.ДатаДоставки = &ДатаДоставки
	             |	И МегаЛогист_МаршрутноеЗадание.Статус = &КРаспределению
	             //|	И ДОБАВИТЬКДАТЕ(МегаЛогист_МаршрутноеЗадание.ВремяДоставкиС, МИНУТА, &ГраницаВыписки) < &ТекВремя
	             |	И МегаЛогист_МаршрутноеЗадание.Филиал В(&МассивФилиалов)";
	
	Запрос.УстановитьПараметр("ТекВремя",ТекВремя);
	Запрос.УстановитьПараметр("ДатаДоставки",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КРаспределению",Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.КРаспределению);
	Запрос.УстановитьПараметр("ГраницаВыписки",Константы.МегаЛогист_ГраницаВыписки.Получить());
	Запрос.УстановитьПараметр("МассивФилиалов",МассивФилиалов);
	
	ГраницаВыписки=Константы.МегаЛогист_ГраницаВыписки.Получить();
	Таблица=Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка");
	Результат=Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() цикл
		
		МЗ=Результат.Ссылка;
		Если МЗ.ДокументыРеализации.Количество()=0 тогда
			Склад=Справочники.Склады.ПустаяСсылка();
		иначе
			Склад=МЗ.ДокументыРеализации[0].ДокументСсылка.Склад;
		КонецЕсли;
		
		МестноеВремя=ПроверкаРазницыВремени.ПолучитьРегиональноеВремя(ТекущаяДата(),Склад);
		Время=Дата('00010101')+(МестноеВремя-НачалоДня(МестноеВремя));
		
		Если (МЗ.ВремяДоставкиС+ГраницаВыписки*60)<Время тогда
			НоваяСтрока=Таблица.Добавить();
			НоваяСтрока.Ссылка=МЗ;
		КонецЕсли;	
		
	КонецЦикла;
	
	//Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьРасписаниеЭД(ТекДата) 
	
	ДН = ДеньНедели(ТекДата);
		
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ПараметрыФормированияСлужебныхЗаданий.Ссылка,
	              |	ПараметрыФормированияСлужебныхЗаданий.ВремОкончанияДовыписки1 КАК ВремяВыписки,
	              |	ПараметрыФормированияСлужебныхЗаданий.Склад
	              |ИЗ
	              |	Справочник.ПараметрыФормированияСлужебныхЗаданий КАК ПараметрыФормированияСлужебныхЗаданий
	              |ГДЕ
	              |	ПараметрыФормированияСлужебныхЗаданий.ТипДоставки = &ТипДоставки
	              |	И ПараметрыФормированияСлужебныхЗаданий.ДниНедели1";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДниНедели1", "ДниНедели" + Строка(ДН));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВремОкончанияДовыписки1", "ВремОкончанияДовыписки" + Строка(Дн));
	
	Запрос.УстановитьПараметр("ТипДоставки", Справочники.ТипыДоставки.ЭкспрессДоставка);
	
	Таблица = Запрос.Выполнить().Выгрузить();
		
	Возврат Таблица;
	
КонецФункции

Процедура КонтрольВыписки() Экспорт
		
	ТаблицаЗаданий=ПолучитьМЗ();
	Для Каждого СтрокаЗадания из ТаблицаЗаданий цикл
		МЗ=СтрокаЗадания.Ссылка.ПолучитьОбъект();
		МЗ.Статус = Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.НеОбработан;
		ЭкспрессДоставка_cancel(МЗ);
		МЗ.Записать();
	КонецЦикла;			
		
КонецПроцедуры	

Функция ПолучитьСписокФилиаловПользователя() Экспорт
	
	ТекущийПользователь=Пользователи.АвторизованныйПользователь();
	СписокФилиалов=Новый СписокЗначений;
	//пустой филиал доступен всем
	СписокФилиалов.Добавить(Справочники.Филиалы.ПустаяСсылка());
	Для Каждого СтрокаФилиала из ТекущийПользователь.ФилиалыПользователя цикл
		СписокФилиалов.Добавить(СтрокаФилиала.Филиал);
	КонецЦикла;	

	Возврат СписокФилиалов
	
КонецФункции

Функция ПолучитьМЗДляОповещения()
	
	лКлючАлгоритма = "ПланОбмена_ОбменПартКом83_Сайт_МодульМенеджера_РучнаяЭД_ИмитироватьОбменсСайтом";
	лЗамена =  АлгоритмыПолучитьЗамену(лКлючАлгоритма);
	Если Не лЗамена = Неопределено Тогда
		АлгоритмыЗначениеВозврата = Неопределено;		
		Выполнить(лЗамена);		
		Возврат АлгоритмыЗначениеВозврата;		
	КонецЕсли;	
	///////////////////////////////////////////////////////////////////////////
	
	ТекДата=ТекущаяДата();
	//Ограничение по филиалам
	МассивФилиалов=ПолучитьМассивФилиалов();
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	МегаЛогист_МаршрутноеЗадание.Ссылка
	             |ИЗ
	             |	Документ.МегаЛогист_МаршрутноеЗадание КАК МегаЛогист_МаршрутноеЗадание
	             |ГДЕ
	             |	МегаЛогист_МаршрутноеЗадание.ЭкспрессДоставка
	             |	И МегаЛогист_МаршрутноеЗадание.ДатаДоставки = &ДатаДоставки
	             |	И МегаЛогист_МаршрутноеЗадание.Статус = &КРаспределению
	             |	И МегаЛогист_МаршрутноеЗадание.Филиал В(&МассивФилиалов)
	             |ИТОГИ ПО
	             |	МегаЛогист_МаршрутноеЗадание.Филиал";
	
	Запрос.УстановитьПараметр("ДатаДоставки",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КРаспределению",Перечисления.МегаЛогист_СтатусыМаршрутныхЗаданий.КРаспределению);
	Запрос.УстановитьПараметр("МассивФилиалов",МассивФилиалов);
	
	ГраницаОповещения=10;
	Таблица=Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка");
	
	ВыборкаПоФилиалам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоФилиалам.Следующий() цикл
		Выборка = ВыборкаПоФилиалам.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			МЗ=Выборка.Ссылка;
			Если МЗ.ДокументыРеализации.Количество()=0 тогда
				Склад=Справочники.Склады.ПустаяСсылка();
			иначе
				Склад=МЗ.ДокументыРеализации[0].ДокументСсылка.Склад;
			КонецЕсли;
		
			МестноеВремя=ПроверкаРазницыВремени.ПолучитьРегиональноеВремя(ТекДата,Склад);
			Время=Дата('00010101')+(МестноеВремя-НачалоДня(МестноеВремя));
		
			Разность=МЗ.ВремяДоставкиС-Время;
			
			// + Пушкин 20190620  XX-2416
			
			//Если Разность>0 тогда
			//	
			//	Минут = Цел(Разность / 60);
			//	
			//	Если Минут = ГраницаОповещения тогда
			//		НоваяСтрока=Таблица.Добавить();
			//		НоваяСтрока.Ссылка=МЗ;
			//		Прервать;
			//	КонецЕсли;	
			//КонецЕсли;	
			
			Разность = ?(Разность < 0, Разность * -1, Разность);
			Минут = Цел(Разность / 60);
			
			Если Минут <= ГраницаОповещения тогда
				НоваяСтрока=Таблица.Добавить();
				НоваяСтрока.Ссылка=МЗ;
			КонецЕсли;	
			
			// - Пушкин 20190620  XX-2416
			
		КонецЦикла;	
		
	КонецЦикла;
	
	//Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Процедура ОповещениеВыписки() Экспорт
	
	ТаблицаЗаданий=ПолучитьМЗДляОповещения();
	
	Для Каждого СтрокаЗадания из ТаблицаЗаданий цикл
		МаршрутноеЗадание=СтрокаЗадания.Ссылка;
		пар_Триггер = Справочники.НастройкаSMSоповещения.Триггер_13;
		пар_Источник = Новый Массив;
		пар_Источник.Добавить(МаршрутноеЗадание);
	
		SMSоповещение.ЛаунчерSMS(Новый Структура("Триггер,Источник",пар_Триггер,пар_Источник));		
	КонецЦикла;	
		
КонецПроцедуры	

